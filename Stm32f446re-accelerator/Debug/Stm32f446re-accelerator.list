
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f08  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009484  08009484  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08009484  08009484  00019484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800948c  0800948c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800948c  0800948c  0001948c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08009494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb0  20000048  080094dc  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef8  080094dc  00020ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac9a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000327a  00000000  00000000  0003ad12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001448  00000000  00000000  0003df90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d0  00000000  00000000  0003f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245de  00000000  00000000  000406a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ce5  00000000  00000000  00064c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2bee  00000000  00000000  0007596b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148559  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c8  00000000  00000000  001485d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000048 	.word	0x20000048
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080090b4 	.word	0x080090b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	080090b4 	.word	0x080090b4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f001 faae 	bl	8001a6c <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f001 faa6 	bl	8001a6c <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f001 fa9e 	bl	8001a6c <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f001 fa96 	bl	8001a6c <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f001 fada 	bl	8001b18 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	0800916c 	.word	0x0800916c

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	//SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
	SPIWrite(LR_RegPaConfig,0x0F); //14 Дб
 800057a:	210f      	movs	r1, #15
 800057c:	2009      	movs	r0, #9
 800057e:	f001 fa75 	bl	8001a6c <SPIWrite>
	//SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84
	SPIWrite(0x5A,0x84); // обычный режим( без макс усиления: до 14 Дб)
 8000582:	2184      	movs	r1, #132	; 0x84
 8000584:	205a      	movs	r0, #90	; 0x5a
 8000586:	f001 fa71 	bl	8001a6c <SPIWrite>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <Rf96_OCP+0x20>)
 80005a2:	5cd3      	ldrb	r3, [r2, r3]
 80005a4:	4619      	mov	r1, r3
 80005a6:	200b      	movs	r0, #11
 80005a8:	f001 fa60 	bl	8001a6c <SPIWrite>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08009178 	.word	0x08009178

080005b8 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <Rf96_LNA+0x20>)
 80005c6:	5cd3      	ldrb	r3, [r2, r3]
 80005c8:	4619      	mov	r1, r3
 80005ca:	200c      	movs	r0, #12
 80005cc:	f001 fa4e 	bl	8001a6c <SPIWrite>

}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	0800917c 	.word	0x0800917c

080005dc <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
	SPIWrite(LR_RegModemConfig1,0x25); //   0x21 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005ee:	2125      	movs	r1, #37	; 0x25
 80005f0:	201d      	movs	r0, #29
 80005f2:	f001 fa3b 	bl	8001a6c <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // С CRC16
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	460b      	mov	r3, r1
 800060a:	71bb      	strb	r3, [r7, #6]
 800060c:	4613      	mov	r3, r2
 800060e:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xB4);  // SF=11
 8000610:	21b4      	movs	r1, #180	; 0xb4
 8000612:	201e      	movs	r0, #30
 8000614:	f001 fa2a 	bl	8001a6c <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000618:	88bb      	ldrh	r3, [r7, #4]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	201f      	movs	r0, #31
 8000620:	f001 fa24 	bl	8001a6c <SPIWrite>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b29b      	uxth	r3, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	2020      	movs	r0, #32
 8000642:	f001 fa13 	bl	8001a6c <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	2021      	movs	r0, #33	; 0x21
 800064e:	f001 fa0d 	bl	8001a6c <SPIWrite>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 800065a:	b590      	push	{r4, r7, lr}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	4604      	mov	r4, r0
 8000662:	4608      	mov	r0, r1
 8000664:	4611      	mov	r1, r2
 8000666:	461a      	mov	r2, r3
 8000668:	4623      	mov	r3, r4
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4603      	mov	r3, r0
 800066e:	71bb      	strb	r3, [r7, #6]
 8000670:	460b      	mov	r3, r1
 8000672:	717b      	strb	r3, [r7, #5]
 8000674:	4613      	mov	r3, r2
 8000676:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	019b      	lsls	r3, r3, #6
 800067c:	b2da      	uxtb	r2, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4413      	add	r3, r2
 8000686:	b2da      	uxtb	r2, r3
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4413      	add	r3, r2
 8000690:	b2da      	uxtb	r2, r3
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	2040      	movs	r0, #64	; 0x40
 800069c:	f001 f9e6 	bl	8001a6c <SPIWrite>
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd90      	pop	{r4, r7, pc}

080006a8 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006ac:	21f7      	movs	r1, #247	; 0xf7
 80006ae:	2011      	movs	r0, #17
 80006b0:	f001 f9dc 	bl	8001a6c <SPIWrite>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
 80006bc:	213f      	movs	r1, #63	; 0x3f
 80006be:	2011      	movs	r0, #17
 80006c0:	f001 f9d4 	bl	8001a6c <SPIWrite>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4619      	mov	r1, r3
 80006d6:	2022      	movs	r0, #34	; 0x22
 80006d8:	f001 f9c8 	bl	8001a6c <SPIWrite>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4619      	mov	r1, r3
 80006f2:	200e      	movs	r0, #14
 80006f4:	f001 f9ba 	bl	8001a6c <SPIWrite>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4619      	mov	r1, r3
 800070e:	200f      	movs	r0, #15
 8000710:	f001 f9ac 	bl	8001a6c <SPIWrite>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4619      	mov	r1, r3
 800072a:	200d      	movs	r0, #13
 800072c:	f001 f99e 	bl	8001a6c <SPIWrite>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 800073c:	2185      	movs	r1, #133	; 0x85
 800073e:	2001      	movs	r0, #1
 8000740:	f001 f994 	bl	8001a6c <SPIWrite>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <Rf96_TX_mode>:
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 800074c:	2183      	movs	r1, #131	; 0x83
 800074e:	2001      	movs	r0, #1
 8000750:	f001 f98c 	bl	8001a6c <SPIWrite>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	461a      	mov	r2, r3
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	2000      	movs	r0, #0
 800076c:	f001 f9d4 	bl	8001b18 <BurstWrite>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000780:	2010      	movs	r0, #16
 8000782:	f001 f955 	bl	8001a30 <SPIRead>
 8000786:	4603      	mov	r3, r0
 8000788:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	4619      	mov	r1, r3
 800078e:	200d      	movs	r0, #13
 8000790:	f001 f96c 	bl	8001a6c <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 8000794:	2013      	movs	r0, #19
 8000796:	f001 f94b 	bl	8001a30 <SPIRead>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	461a      	mov	r2, r3
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	2000      	movs	r0, #0
 80007a6:	f001 f985 	bl	8001ab4 <SPIBurstRead>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007b6:	f7ff feb5 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007ba:	f7ff febb 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fec0 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fed3 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fee2 	bl	8000594 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fef1 	bl	80005b8 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2104      	movs	r1, #4
 80007da:	2007      	movs	r0, #7
 80007dc:	f7ff fefe 	bl	80005dc <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x1FF);
 80007e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007e4:	2101      	movs	r1, #1
 80007e6:	2006      	movs	r0, #6
 80007e8:	f7ff ff09 	bl	80005fe <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007ec:	2008      	movs	r0, #8
 80007ee:	f7ff ff1d 	bl	800062c <Rf96_Preamble>
	SPIWrite(0x37,0x0A);
 80007f2:	210a      	movs	r1, #10
 80007f4:	2037      	movs	r0, #55	; 0x37
 80007f6:	f001 f939 	bl	8001a6c <SPIWrite>
	SPIWrite(0x31,0xA3);
 80007fa:	21a3      	movs	r1, #163	; 0xa3
 80007fc:	2031      	movs	r0, #49	; 0x31
 80007fe:	f001 f935 	bl	8001a6c <SPIWrite>
	// Заходим в StandBy
	Rf96_Standby();
 8000802:	f7ff fe87 	bl	8000514 <Rf96_Standby>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}

0800080a <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  SPIWrite(LR_RegHopPeriod,0x0);
 800080e:	2100      	movs	r1, #0
 8000810:	2024      	movs	r0, #36	; 0x24
 8000812:	f001 f92b 	bl	8001a6c <SPIWrite>
	  // Настройка вывода Di0 на прерывание по отправке
	  Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 8000816:	2302      	movs	r3, #2
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ff1c 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000822:	f7ff fe6f 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 8000826:	f7ff ff3f 	bl	80006a8 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 800082a:	202a      	movs	r0, #42	; 0x2a
 800082c:	f7ff ff4c 	bl	80006c8 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	f7ff ff57 	bl	80006e4 <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 8000836:	2080      	movs	r0, #128	; 0x80
 8000838:	f7ff ff70 	bl	800071c <Rf96_FIFO_point>

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 8000844:	2100      	movs	r1, #0
 8000846:	2024      	movs	r0, #36	; 0x24
 8000848:	f001 f910 	bl	8001a6c <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 800084c:	2302      	movs	r3, #2
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff ff01 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000858:	f7ff ff2e 	bl	80006b8 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 800085c:	f7ff fe52 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000860:	202a      	movs	r0, #42	; 0x2a
 8000862:	f7ff ff31 	bl	80006c8 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff ff4a 	bl	8000700 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ff55 	bl	800071c <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 8000872:	f7ff ff61 	bl	8000738 <Rf96_RX_Continuous_mode>

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}

0800087a <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	460b      	mov	r3, r1
 8000884:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	4619      	mov	r1, r3
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ff64 	bl	8000758 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 8000890:	f7ff ff5a 	bl	8000748 <Rf96_TX_mode>
		}
	}
	*/


}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80008a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ac:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80008ae:	e012      	b.n	80008d6 <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 80008b0:	89fb      	ldrh	r3, [r7, #14]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	89fb      	ldrh	r3, [r7, #14]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	1c59      	adds	r1, r3, #1
 80008c2:	6079      	str	r1, [r7, #4]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4043      	eors	r3, r0
 80008c8:	4909      	ldr	r1, [pc, #36]	; (80008f0 <Crc16+0x54>)
 80008ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	4053      	eors	r3, r2
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80008d6:	887b      	ldrh	r3, [r7, #2]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	807a      	strh	r2, [r7, #2]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1e7      	bne.n	80008b0 <Crc16+0x14>

    return crc;
 80008e0:	89fb      	ldrh	r3, [r7, #14]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	080091e4 	.word	0x080091e4

080008f4 <UserDelayStart>:
// Функция пользовательской задержки
void UserDelayStart(uint32_t Delay)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	TimeDelay=Delay;
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <UserDelayStart+0x20>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
	Delay_start=1;
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <UserDelayStart+0x24>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	20000020 	.word	0x20000020
 8000918:	20000074 	.word	0x20000074

0800091c <uint32_TO_charmass>:
mass - массив, в который число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	4611      	mov	r1, r2
 8000928:	461a      	mov	r2, r3
 800092a:	460b      	mov	r3, r1
 800092c:	80fb      	strh	r3, [r7, #6]
 800092e:	4613      	mov	r3, r2
 8000930:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < len; i++)
 8000932:	2300      	movs	r3, #0
 8000934:	82fb      	strh	r3, [r7, #22]
 8000936:	e01f      	b.n	8000978 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <uint32_TO_charmass+0x70>)
 800093c:	fba3 2301 	umull	r2, r3, r3, r1
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	4613      	mov	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	1aca      	subs	r2, r1, r3
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	1e59      	subs	r1, r3, #1
 8000952:	8afb      	ldrh	r3, [r7, #22]
 8000954:	1ac9      	subs	r1, r1, r3
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	440b      	add	r3, r1
 800095a:	4619      	mov	r1, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	440b      	add	r3, r1
 8000960:	3230      	adds	r2, #48	; 0x30
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <uint32_TO_charmass+0x70>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8000972:	8afb      	ldrh	r3, [r7, #22]
 8000974:	3301      	adds	r3, #1
 8000976:	82fb      	strh	r3, [r7, #22]
 8000978:	8afa      	ldrh	r2, [r7, #22]
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d3db      	bcc.n	8000938 <uint32_TO_charmass+0x1c>
	}
}
 8000980:	bf00      	nop
 8000982:	371c      	adds	r7, #28
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	cccccccd 	.word	0xcccccccd

08000990 <ReadNumofFileSD>:
// Чтение количества созданных файлов из файла InfoSD.txt
uint8_t ReadNumofFileSD(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000996:	af00      	add	r7, sp, #0
	FIL filInform;
	uint8_t Num=255;
 8000998:	23ff      	movs	r3, #255	; 0xff
 800099a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_READ);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2211      	movs	r2, #17
 80009a2:	4945      	ldr	r1, [pc, #276]	; (8000ab8 <ReadNumofFileSD+0x128>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f007 fde3 	bl	8008570 <f_open>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b43      	ldr	r3, [pc, #268]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009b0:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 80009b2:	4b42      	ldr	r3, [pc, #264]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d005      	beq.n	80009c6 <ReadNumofFileSD+0x36>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2102      	movs	r1, #2
 80009be:	4840      	ldr	r0, [pc, #256]	; (8000ac0 <ReadNumofFileSD+0x130>)
 80009c0:	f003 f970 	bl	8003ca4 <HAL_GPIO_WritePin>
		while(1);
 80009c4:	e7fe      	b.n	80009c4 <ReadNumofFileSD+0x34>
	}
	//Читаем количество файлов
	fres=f_read(&filInform,BuffSDRead,40,&bytesRead);
 80009c6:	1d38      	adds	r0, r7, #4
 80009c8:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <ReadNumofFileSD+0x134>)
 80009ca:	2228      	movs	r2, #40	; 0x28
 80009cc:	493e      	ldr	r1, [pc, #248]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009ce:	f007 ff8d 	bl	80088ec <f_read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b39      	ldr	r3, [pc, #228]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009d8:	701a      	strb	r2, [r3, #0]
	//Если на флешке не было этого файла
	if(BuffSDRead[0]=='\t' && BuffSDRead[1]=='\t' && BuffSDRead[2]=='F' && BuffSDRead[3]=='i' && BuffSDRead[4]=='l')
 80009da:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b09      	cmp	r3, #9
 80009e0:	d114      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009e2:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	2b09      	cmp	r3, #9
 80009e8:	d110      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009ea:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	2b46      	cmp	r3, #70	; 0x46
 80009f0:	d10c      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009f4:	78db      	ldrb	r3, [r3, #3]
 80009f6:	2b69      	cmp	r3, #105	; 0x69
 80009f8:	d108      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009fc:	791b      	ldrb	r3, [r3, #4]
 80009fe:	2b6c      	cmp	r3, #108	; 0x6c
 8000a00:	d104      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
	{
		Num=BuffSDRead[28]-'0'; // количество файлов
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <ReadNumofFileSD+0x138>)
 8000a04:	7f1b      	ldrb	r3, [r3, #28]
 8000a06:	3b30      	subs	r3, #48	; 0x30
 8000a08:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	}
	fres=f_close(&filInform);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f008 fa9e 	bl	8008f50 <f_close>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a1a:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000a1c:	4b27      	ldr	r3, [pc, #156]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d005      	beq.n	8000a30 <ReadNumofFileSD+0xa0>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2102      	movs	r1, #2
 8000a28:	4825      	ldr	r0, [pc, #148]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000a2a:	f003 f93b 	bl	8003ca4 <HAL_GPIO_WritePin>
		while(1);
 8000a2e:	e7fe      	b.n	8000a2e <ReadNumofFileSD+0x9e>
	}
	if(Num==255)
 8000a30:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000a34:	2bff      	cmp	r3, #255	; 0xff
 8000a36:	d132      	bne.n	8000a9e <ReadNumofFileSD+0x10e>
	{
		Num=0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2212      	movs	r2, #18
 8000a42:	491d      	ldr	r1, [pc, #116]	; (8000ab8 <ReadNumofFileSD+0x128>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 fd93 	bl	8008570 <f_open>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a50:	701a      	strb	r2, [r3, #0]
		// Количество файлов
		fres = f_write(&filInform, "\t\tFile info\nNumber of files:0;\n", 31, &bytesWroteInform);
 8000a52:	463b      	mov	r3, r7
 8000a54:	1d38      	adds	r0, r7, #4
 8000a56:	221f      	movs	r2, #31
 8000a58:	491c      	ldr	r1, [pc, #112]	; (8000acc <ReadNumofFileSD+0x13c>)
 8000a5a:	f008 f886 	bl	8008b6a <f_write>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a64:	701a      	strb	r2, [r3, #0]
		// История команд
		fres = f_write(&filInform, "\t\tCommand History\nTime\tcommand\n", 31, &bytesWroteInform);
 8000a66:	463b      	mov	r3, r7
 8000a68:	1d38      	adds	r0, r7, #4
 8000a6a:	221f      	movs	r2, #31
 8000a6c:	4918      	ldr	r1, [pc, #96]	; (8000ad0 <ReadNumofFileSD+0x140>)
 8000a6e:	f008 f87c 	bl	8008b6a <f_write>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a78:	701a      	strb	r2, [r3, #0]
		fres=f_close(&filInform);
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fa67 	bl	8008f50 <f_close>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a88:	701a      	strb	r2, [r3, #0]
		if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <ReadNumofFileSD+0x10e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2102      	movs	r1, #2
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000a98:	f003 f904 	bl	8003ca4 <HAL_GPIO_WritePin>
			while(1);
 8000a9c:	e7fe      	b.n	8000a9c <ReadNumofFileSD+0x10c>
		}
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000aa4:	f003 f8fe 	bl	8003ca4 <HAL_GPIO_WritePin>

	return Num;
 8000aa8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	080090cc 	.word	0x080090cc
 8000abc:	20000810 	.word	0x20000810
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	2000010c 	.word	0x2000010c
 8000ac8:	200006e4 	.word	0x200006e4
 8000acc:	080090d8 	.word	0x080090d8
 8000ad0:	080090f8 	.word	0x080090f8

08000ad4 <WriteNumofFileSD>:
// Запись в фаил  InfoSD.txt количество созданных файлов
void WriteNumofFileSD(uint8_t Num)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4602      	mov	r2, r0
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	701a      	strb	r2, [r3, #0]
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	2212      	movs	r2, #18
 8000ae8:	4920      	ldr	r1, [pc, #128]	; (8000b6c <WriteNumofFileSD+0x98>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f007 fd40 	bl	8008570 <f_open>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000af6:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d005      	beq.n	8000b0c <WriteNumofFileSD+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2102      	movs	r1, #2
 8000b04:	481b      	ldr	r0, [pc, #108]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b06:	f003 f8cd 	bl	8003ca4 <HAL_GPIO_WritePin>
		while(1);
 8000b0a:	e7fe      	b.n	8000b0a <WriteNumofFileSD+0x36>
	}
	//Записываем количество данных
	BuffSDfileinfo[28]=Num+'0';
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	3330      	adds	r3, #48	; 0x30
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <WriteNumofFileSD+0xa4>)
 8000b16:	771a      	strb	r2, [r3, #28]
	fres = f_write(&filInform, BuffSDfileinfo, 30, &bytesWroteInform);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	f107 0010 	add.w	r0, r7, #16
 8000b20:	221e      	movs	r2, #30
 8000b22:	4915      	ldr	r1, [pc, #84]	; (8000b78 <WriteNumofFileSD+0xa4>)
 8000b24:	f008 f821 	bl	8008b6a <f_write>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b2e:	701a      	strb	r2, [r3, #0]
	fres=f_close(&filInform);
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4618      	mov	r0, r3
 8000b36:	f008 fa0b 	bl	8008f50 <f_close>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b40:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <WriteNumofFileSD+0x82>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b50:	f003 f8a8 	bl	8003ca4 <HAL_GPIO_WritePin>
		while(1);
 8000b54:	e7fe      	b.n	8000b54 <WriteNumofFileSD+0x80>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b5c:	f003 f8a2 	bl	8003ca4 <HAL_GPIO_WritePin>
}
 8000b60:	bf00      	nop
 8000b62:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	080090cc 	.word	0x080090cc
 8000b70:	20000810 	.word	0x20000810
 8000b74:	40020800 	.word	0x40020800
 8000b78:	20000000 	.word	0x20000000

08000b7c <CommandHistoryWrite>:
// Запись в файл InfoSD.txt команд и времени
void CommandHistoryWrite(uint8_t command)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4602      	mov	r2, r0
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	701a      	strb	r2, [r3, #0]
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_APPEND | FA_WRITE);
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2232      	movs	r2, #50	; 0x32
 8000b90:	4925      	ldr	r1, [pc, #148]	; (8000c28 <CommandHistoryWrite+0xac>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f007 fcec 	bl	8008570 <f_open>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <CommandHistoryWrite+0xb0>)
 8000b9e:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <CommandHistoryWrite+0xb0>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <CommandHistoryWrite+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2102      	movs	r1, #2
 8000bac:	4820      	ldr	r0, [pc, #128]	; (8000c30 <CommandHistoryWrite+0xb4>)
 8000bae:	f003 f879 	bl	8003ca4 <HAL_GPIO_WritePin>
		while(1);
 8000bb2:	e7fe      	b.n	8000bb2 <CommandHistoryWrite+0x36>
	}
	//Записываем количество данных
	//  Время в мс, когда ,прибыла команда
	uint32_t TimeHistory = HAL_GetTick();
 8000bb4:	f002 f980 	bl	8002eb8 <HAL_GetTick>
 8000bb8:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
	uint32_TO_charmass(TimeHistory, BufFileInfoWr, 0, 8);
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	491c      	ldr	r1, [pc, #112]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000bc2:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000bc6:	f7ff fea9 	bl	800091c <uint32_TO_charmass>
	BufFileInfoWr[8]=' ';
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000bcc:	2220      	movs	r2, #32
 8000bce:	721a      	strb	r2, [r3, #8]
	BufFileInfoWr[9]=command+'0';
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3330      	adds	r3, #48	; 0x30
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000bda:	725a      	strb	r2, [r3, #9]
	BufFileInfoWr[10]=';';
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000bde:	223b      	movs	r2, #59	; 0x3b
 8000be0:	729a      	strb	r2, [r3, #10]
	BufFileInfoWr[11]='\n';
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	72da      	strb	r2, [r3, #11]
	fres = f_write(&filInform, BufFileInfoWr, 12, &bytesWroteInform);
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	f107 000c 	add.w	r0, r7, #12
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	4910      	ldr	r1, [pc, #64]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000bf4:	f007 ffb9 	bl	8008b6a <f_write>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <CommandHistoryWrite+0xb0>)
 8000bfe:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <CommandHistoryWrite+0xb0>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d005      	beq.n	8000c14 <CommandHistoryWrite+0x98>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4808      	ldr	r0, [pc, #32]	; (8000c30 <CommandHistoryWrite+0xb4>)
 8000c0e:	f003 f849 	bl	8003ca4 <HAL_GPIO_WritePin>
		while(1);
 8000c12:	e7fe      	b.n	8000c12 <CommandHistoryWrite+0x96>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2102      	movs	r1, #2
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <CommandHistoryWrite+0xb4>)
 8000c1a:	f003 f843 	bl	8003ca4 <HAL_GPIO_WritePin>
}
 8000c1e:	bf00      	nop
 8000c20:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	080090cc 	.word	0x080090cc
 8000c2c:	20000810 	.word	0x20000810
 8000c30:	40020800 	.word	0x40020800
 8000c34:	200003c0 	.word	0x200003c0

08000c38 <HistoryOnOffUSI>:
// Запись в файл InfoSD.txt метки о включении питания
void HistoryOnOffUSI(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000c3e:	af00      	add	r7, sp, #0
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_APPEND | FA_WRITE);
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	2232      	movs	r2, #50	; 0x32
 8000c46:	491d      	ldr	r1, [pc, #116]	; (8000cbc <HistoryOnOffUSI+0x84>)
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f007 fc91 	bl	8008570 <f_open>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HistoryOnOffUSI+0x88>)
 8000c54:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HistoryOnOffUSI+0x88>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d005      	beq.n	8000c6a <HistoryOnOffUSI+0x32>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2102      	movs	r1, #2
 8000c62:	4818      	ldr	r0, [pc, #96]	; (8000cc4 <HistoryOnOffUSI+0x8c>)
 8000c64:	f003 f81e 	bl	8003ca4 <HAL_GPIO_WritePin>
		while(1);
 8000c68:	e7fe      	b.n	8000c68 <HistoryOnOffUSI+0x30>
	}
	//Записываем количество данных
	fres = f_write(&filInform, "Power On\n", 9, &bytesWroteInform);
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	f107 0008 	add.w	r0, r7, #8
 8000c70:	2209      	movs	r2, #9
 8000c72:	4915      	ldr	r1, [pc, #84]	; (8000cc8 <HistoryOnOffUSI+0x90>)
 8000c74:	f007 ff79 	bl	8008b6a <f_write>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HistoryOnOffUSI+0x88>)
 8000c7e:	701a      	strb	r2, [r3, #0]
	fres=f_close(&filInform);
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 f963 	bl	8008f50 <f_close>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HistoryOnOffUSI+0x88>)
 8000c90:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HistoryOnOffUSI+0x88>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <HistoryOnOffUSI+0x6e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <HistoryOnOffUSI+0x8c>)
 8000ca0:	f003 f800 	bl	8003ca4 <HAL_GPIO_WritePin>
		while(1);
 8000ca4:	e7fe      	b.n	8000ca4 <HistoryOnOffUSI+0x6c>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <HistoryOnOffUSI+0x8c>)
 8000cac:	f002 fffa 	bl	8003ca4 <HAL_GPIO_WritePin>
}
 8000cb0:	bf00      	nop
 8000cb2:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	080090cc 	.word	0x080090cc
 8000cc0:	20000810 	.word	0x20000810
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	08009118 	.word	0x08009118

08000ccc <SyncCKT>:
	}
	ResolveSDWrite=0; // закрываем доступ к записи на SD данных с ЦКТ
}
// Функция синхронизации Usartа с ЦКТ
void SyncCKT(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	// Синхронизация
	if(readFlag==1)
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <SyncCKT+0x2c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d10d      	bne.n	8000cf4 <SyncCKT+0x28>
	{
		readFlag=0;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <SyncCKT+0x2c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f002 f8f6 	bl	8002ed0 <HAL_Delay>
		HAL_UART_Abort(&huart5);
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <SyncCKT+0x30>)
 8000ce6:	f004 ff77 	bl	8005bd8 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5,BuffCkt, MaxBuffOfCKT);
 8000cea:	222b      	movs	r2, #43	; 0x2b
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <SyncCKT+0x34>)
 8000cee:	4803      	ldr	r0, [pc, #12]	; (8000cfc <SyncCKT+0x30>)
 8000cf0:	f004 fef2 	bl	8005ad8 <HAL_UART_Receive_DMA>
	}
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000716 	.word	0x20000716
 8000cfc:	20000494 	.word	0x20000494
 8000d00:	20000410 	.word	0x20000410

08000d04 <CommandToRadio>:
// Функция передачи по радиоканалу
void CommandToRadio(uint8_t Comm)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e00a      	b.n	8000d2a <CommandToRadio+0x26>
	{
		TX_RX_Radio[i+1]=BuffMidW[i+4];
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	1d1a      	adds	r2, r3, #4
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4922      	ldr	r1, [pc, #136]	; (8000da8 <CommandToRadio+0xa4>)
 8000d1e:	5c89      	ldrb	r1, [r1, r2]
 8000d20:	4a22      	ldr	r2, [pc, #136]	; (8000dac <CommandToRadio+0xa8>)
 8000d22:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	3301      	adds	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b26      	cmp	r3, #38	; 0x26
 8000d2e:	d9f1      	bls.n	8000d14 <CommandToRadio+0x10>
	}
	// заносим в 1 элемент 4 команду
	TX_RX_Radio[0]=Comm;
 8000d30:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <CommandToRadio+0xa8>)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	7013      	strb	r3, [r2, #0]
	// Отсылаем ответ
	Rf96_Lora_TX_mode();
 8000d36:	f7ff fd68 	bl	800080a <Rf96_Lora_TX_mode>
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 8000d3a:	2128      	movs	r1, #40	; 0x28
 8000d3c:	481b      	ldr	r0, [pc, #108]	; (8000dac <CommandToRadio+0xa8>)
 8000d3e:	f7ff fdad 	bl	800089c <Crc16>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <CommandToRadio+0xac>)
 8000d48:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <CommandToRadio+0xac>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <CommandToRadio+0xa8>)
 8000d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <CommandToRadio+0xac>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <CommandToRadio+0xa8>)
 8000d62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 8000d66:	2080      	movs	r0, #128	; 0x80
 8000d68:	f7ff fcbc 	bl	80006e4 <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 8000d6c:	2080      	movs	r0, #128	; 0x80
 8000d6e:	f7ff fcd5 	bl	800071c <Rf96_FIFO_point>
	// Очистка флагов
	Rf96_LoRaClearIrq();
 8000d72:	f7ff fbc7 	bl	8000504 <Rf96_LoRaClearIrq>
	// Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8000d76:	212a      	movs	r1, #42	; 0x2a
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <CommandToRadio+0xa8>)
 8000d7a:	f7ff fd7e 	bl	800087a <Rf96_LoRaTxPacket>
	// следующее Прерывание будет по передаче
	ModeRadio=1;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <CommandToRadio+0xb0>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
	// Обнуляем массив
	for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	73bb      	strb	r3, [r7, #14]
 8000d88:	e006      	b.n	8000d98 <CommandToRadio+0x94>
		BuffMidW[i]=0;
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <CommandToRadio+0xa4>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	3301      	adds	r3, #1
 8000d96:	73bb      	strb	r3, [r7, #14]
 8000d98:	7bbb      	ldrb	r3, [r7, #14]
 8000d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d9c:	d9f5      	bls.n	8000d8a <CommandToRadio+0x86>
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000678 	.word	0x20000678
 8000dac:	200003e4 	.word	0x200003e4
 8000db0:	20000068 	.word	0x20000068
 8000db4:	2000006d 	.word	0x2000006d

08000db8 <RXCommande1>:
// Команда начала записи на SD карту
void RXCommande1(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	// Запрещаем запись на SD
	ResolveSDWrite=0;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <RXCommande1+0x50>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
	// Запись в память номера файла, на котором мы находимся
	CountFileNow=ReadNumofFileSD();
 8000dc2:	f7ff fde5 	bl	8000990 <ReadNumofFileSD>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <RXCommande1+0x54>)
 8000dcc:	701a      	strb	r2, [r3, #0]
	if(CountFileNow>=9) CountFileNow=0;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <RXCommande1+0x54>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b08      	cmp	r3, #8
 8000dd4:	d902      	bls.n	8000ddc <RXCommande1+0x24>
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <RXCommande1+0x54>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
	CountFileNow++;
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <RXCommande1+0x54>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <RXCommande1+0x54>)
 8000de6:	701a      	strb	r2, [r3, #0]
	WriteNumofFileSD(CountFileNow);
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <RXCommande1+0x54>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe71 	bl	8000ad4 <WriteNumofFileSD>
	//Записываем команду в историю
	CommandHistoryWrite(1);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f7ff fec2 	bl	8000b7c <CommandHistoryWrite>
	// Открываем доступ к записи на SD
	ResolveSDWrite=1;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <RXCommande1+0x50>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
	// Отсылаем ответ
	CommandToRadio(1);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff ff80 	bl	8000d04 <CommandToRadio>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000006a 	.word	0x2000006a
 8000e0c:	2000006c 	.word	0x2000006c

08000e10 <RXCommande2>:
// Команда включения клапаном
void RXCommande2(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <RXCommande2+0x20>)
 8000e1c:	f002 ff42 	bl	8003ca4 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(2);
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff feab 	bl	8000b7c <CommandHistoryWrite>
	// Отсылаем ответ
    CommandToRadio(2);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f7ff ff6c 	bl	8000d04 <CommandToRadio>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40020400 	.word	0x40020400

08000e34 <RXCommande3>:

// Команда включения двигателя
void RXCommande3(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	// Подаем единицу на двигатель
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e3e:	480f      	ldr	r0, [pc, #60]	; (8000e7c <RXCommande3+0x48>)
 8000e40:	f002 ff30 	bl	8003ca4 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(3);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f7ff fe99 	bl	8000b7c <CommandHistoryWrite>
    if(TX_RX_Radio[1]==0)
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <RXCommande3+0x4c>)
 8000e4c:	785b      	ldrb	r3, [r3, #1]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d104      	bne.n	8000e5c <RXCommande3+0x28>
    {
        // Запускаем задержку
        UserDelayStart(5000);
 8000e52:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e56:	f7ff fd4d 	bl	80008f4 <UserDelayStart>
 8000e5a:	e009      	b.n	8000e70 <RXCommande3+0x3c>
    } else
    {
    	// Запускаем задержку
    	UserDelayStart((uint32_t)(TX_RX_Radio[1]*1000));
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <RXCommande3+0x4c>)
 8000e5e:	785b      	ldrb	r3, [r3, #1]
 8000e60:	461a      	mov	r2, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fb03 f302 	mul.w	r3, r3, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fd42 	bl	80008f4 <UserDelayStart>
    }
	// Отсылаем ответ
    CommandToRadio(3);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f7ff ff47 	bl	8000d04 <CommandToRadio>
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	200003e4 	.word	0x200003e4

08000e84 <RXCommande4>:
// Команда - запрос на отправку данных
void RXCommande4(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	// Отсылаем ответ
	CommandToRadio(4);
 8000e88:	2004      	movs	r0, #4
 8000e8a:	f7ff ff3b 	bl	8000d04 <CommandToRadio>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <RXCommande5>:
// Команда начала закрытия файла на SD карте
void RXCommande5(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	// запрещаем запись на SD
	ResolveSDWrite=0;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <RXCommande5+0x1c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
    //Записываем команду в историю
    CommandHistoryWrite(5);
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f7ff fe6c 	bl	8000b7c <CommandHistoryWrite>
    // Отсылаем ответ
    CommandToRadio(5);
 8000ea4:	2005      	movs	r0, #5
 8000ea6:	f7ff ff2d 	bl	8000d04 <CommandToRadio>
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000006a 	.word	0x2000006a

08000eb4 <RXCommande6>:
// Команда закрытия клапана
void RXCommande6(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <RXCommande6+0x20>)
 8000ec0:	f002 fef0 	bl	8003ca4 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(6);
 8000ec4:	2006      	movs	r0, #6
 8000ec6:	f7ff fe59 	bl	8000b7c <CommandHistoryWrite>
	// Отсылаем ответ
    CommandToRadio(6);
 8000eca:	2006      	movs	r0, #6
 8000ecc:	f7ff ff1a 	bl	8000d04 <CommandToRadio>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <DataConv>:
// Парсер
void DataConv(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	// Запись времени в буфер
	uint32_TO_charmass(reciveTime, SDbufWrite, 0, 8);
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <DataConv+0x60>)
 8000ee0:	6818      	ldr	r0, [r3, #0]
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4915      	ldr	r1, [pc, #84]	; (8000f3c <DataConv+0x64>)
 8000ee8:	f7ff fd18 	bl	800091c <uint32_TO_charmass>
	for(uint8_t i=0;i<38;i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	e017      	b.n	8000f22 <DataConv+0x4a>
	{
		uint32_TO_charmass(BuffMidW[i+4], SDbufWrite, 9+i*4, 3);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <DataConv+0x68>)
 8000ef8:	5cd3      	ldrb	r3, [r2, r3]
 8000efa:	4618      	mov	r0, r3
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3309      	adds	r3, #9
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	2303      	movs	r3, #3
 8000f0a:	490c      	ldr	r1, [pc, #48]	; (8000f3c <DataConv+0x64>)
 8000f0c:	f7ff fd06 	bl	800091c <uint32_TO_charmass>
		SDbufWrite[8+i*4]=',';
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	3302      	adds	r3, #2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <DataConv+0x64>)
 8000f18:	212c      	movs	r1, #44	; 0x2c
 8000f1a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<38;i++)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b25      	cmp	r3, #37	; 0x25
 8000f26:	d9e4      	bls.n	8000ef2 <DataConv+0x1a>
	}
	SDbufWrite[160]='\n';
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <DataConv+0x64>)
 8000f2a:	220a      	movs	r2, #10
 8000f2c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000064 	.word	0x20000064
 8000f3c:	200005d4 	.word	0x200005d4
 8000f40:	20000678 	.word	0x20000678

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f48:	f001 ff50 	bl	8002dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f946 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f000 fba2 	bl	8001698 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f54:	f000 fb5a 	bl	800160c <MX_DMA_Init>
  MX_SPI1_Init();
 8000f58:	f000 f9b2 	bl	80012c0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f5c:	f000 fb02 	bl	8001564 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f60:	f000 fb2a 	bl	80015b8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000f64:	f000 fad4 	bl	8001510 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f68:	f005 fd16 	bl	8006998 <MX_FATFS_Init>
  MX_SPI3_Init();
 8000f6c:	f000 f9de 	bl	800132c <MX_SPI3_Init>
  MX_UART5_Init();
 8000f70:	f000 faa2 	bl	80014b8 <MX_UART5_Init>
  MX_TIM6_Init();
 8000f74:	f000 fa10 	bl	8001398 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000f78:	f000 fa44 	bl	8001404 <MX_TIM7_Init>
  MX_TIM10_Init();
 8000f7c:	f000 fa78 	bl	8001470 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	// Индикация включения УСИ ПРД
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2102      	movs	r1, #2
 8000f84:	4881      	ldr	r0, [pc, #516]	; (800118c <main+0x248>)
 8000f86:	f002 fe8d 	bl	8003ca4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000f8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f8e:	f001 ff9f 	bl	8002ed0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2104      	movs	r1, #4
 8000f96:	487d      	ldr	r0, [pc, #500]	; (800118c <main+0x248>)
 8000f98:	f002 fe84 	bl	8003ca4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000f9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fa0:	f001 ff96 	bl	8002ed0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	4878      	ldr	r0, [pc, #480]	; (800118c <main+0x248>)
 8000faa:	f002 fe7b 	bl	8003ca4 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000fae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fb2:	f001 ff8d 	bl	8002ed0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4874      	ldr	r0, [pc, #464]	; (800118c <main+0x248>)
 8000fbc:	f002 fe72 	bl	8003ca4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4871      	ldr	r0, [pc, #452]	; (800118c <main+0x248>)
 8000fc6:	f002 fe6d 	bl	8003ca4 <HAL_GPIO_WritePin>

    // Монтирование флешки
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4970      	ldr	r1, [pc, #448]	; (8001190 <main+0x24c>)
 8000fce:	4871      	ldr	r0, [pc, #452]	; (8001194 <main+0x250>)
 8000fd0:	f007 fa88 	bl	80084e4 <f_mount>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b6f      	ldr	r3, [pc, #444]	; (8001198 <main+0x254>)
 8000fda:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8000fdc:	4b6e      	ldr	r3, [pc, #440]	; (8001198 <main+0x254>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <main+0xac>
	{ // Если проблема с флешкой  выключаем 1 светодиод
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4868      	ldr	r0, [pc, #416]	; (800118c <main+0x248>)
 8000fea:	f002 fe5b 	bl	8003ca4 <HAL_GPIO_WritePin>
		while(1);
 8000fee:	e7fe      	b.n	8000fee <main+0xaa>
	}
	// Создание файла infoSD.txt
	ReadNumofFileSD();
 8000ff0:	f7ff fcce 	bl	8000990 <ReadNumofFileSD>
	// Запись в историю информацию о подаче питания
	HistoryOnOffUSI();
 8000ff4:	f7ff fe20 	bl	8000c38 <HistoryOnOffUSI>
	// Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 8000ff8:	f7ff fbdb 	bl	80007b2 <Rf96_Lora_init>
	// Режим приема
	Rf96_Lora_RX_mode();
 8000ffc:	f7ff fc20 	bl	8000840 <Rf96_Lora_RX_mode>
	// Запуск приема в дма с аксселерометров
	HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 8001000:	222b      	movs	r2, #43	; 0x2b
 8001002:	4966      	ldr	r1, [pc, #408]	; (800119c <main+0x258>)
 8001004:	4866      	ldr	r0, [pc, #408]	; (80011a0 <main+0x25c>)
 8001006:	f004 fd67 	bl	8005ad8 <HAL_UART_Receive_DMA>
    // Запуск таймера с целью определения подключения ЦКТ
    HAL_TIM_Base_Start_IT(&htim10);
 800100a:	4866      	ldr	r0, [pc, #408]	; (80011a4 <main+0x260>)
 800100c:	f004 fa67 	bl	80054de <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Синхронизация с ЦКТ
	    SyncCKT();
 8001010:	f7ff fe5c 	bl	8000ccc <SyncCKT>
	    // Прерывание по приему по радиоканалу
		if(Get_NIRQ_Di0())
 8001014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001018:	4863      	ldr	r0, [pc, #396]	; (80011a8 <main+0x264>)
 800101a:	f002 fe2b 	bl	8003c74 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d055      	beq.n	80010d0 <main+0x18c>
		{
			if(ModeRadio==0) // если прерывание по приему
 8001024:	4b61      	ldr	r3, [pc, #388]	; (80011ac <main+0x268>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d144      	bne.n	80010b6 <main+0x172>
			{
            // Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 800102c:	4860      	ldr	r0, [pc, #384]	; (80011b0 <main+0x26c>)
 800102e:	f7ff fba3 	bl	8000778 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 8001032:	4b5f      	ldr	r3, [pc, #380]	; (80011b0 <main+0x26c>)
 8001034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001038:	b29b      	uxth	r3, r3
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b5c      	ldr	r3, [pc, #368]	; (80011b0 <main+0x26c>)
 8001040:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001044:	b29b      	uxth	r3, r3
 8001046:	4413      	add	r3, r2
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <main+0x270>)
 800104c:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 800104e:	f7ff fa59 	bl	8000504 <Rf96_LoRaClearIrq>
			// Если CRC совпадает
			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2))
 8001052:	2128      	movs	r1, #40	; 0x28
 8001054:	4856      	ldr	r0, [pc, #344]	; (80011b0 <main+0x26c>)
 8001056:	f7ff fc21 	bl	800089c <Crc16>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b55      	ldr	r3, [pc, #340]	; (80011b4 <main+0x270>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d134      	bne.n	80010d0 <main+0x18c>
			{
				switch(TX_RX_Radio[CommIndex])
 8001066:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <main+0x26c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	3b01      	subs	r3, #1
 800106c:	2b05      	cmp	r3, #5
 800106e:	d82f      	bhi.n	80010d0 <main+0x18c>
 8001070:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <main+0x134>)
 8001072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001076:	bf00      	nop
 8001078:	08001091 	.word	0x08001091
 800107c:	08001097 	.word	0x08001097
 8001080:	0800109d 	.word	0x0800109d
 8001084:	080010a3 	.word	0x080010a3
 8001088:	080010a9 	.word	0x080010a9
 800108c:	080010af 	.word	0x080010af
				{
				case 1:   // Команда начала записи: Создаем файл
					RXCommande1();
 8001090:	f7ff fe92 	bl	8000db8 <RXCommande1>
					break;
 8001094:	e01c      	b.n	80010d0 <main+0x18c>
				case 2:   // Команда открытия клапана
					RXCommande2();
 8001096:	f7ff febb 	bl	8000e10 <RXCommande2>
					break;
 800109a:	e019      	b.n	80010d0 <main+0x18c>
				case 3:   // Команда запуска двигателя
					RXCommande3();
 800109c:	f7ff feca 	bl	8000e34 <RXCommande3>
					break;
 80010a0:	e016      	b.n	80010d0 <main+0x18c>
				case 4:   // Команда запроса данных
					RXCommande4();
 80010a2:	f7ff feef 	bl	8000e84 <RXCommande4>
					break;
 80010a6:	e013      	b.n	80010d0 <main+0x18c>
				case 5:   // Команда закрытия файла на SD и запрет записи на SD
					RXCommande5();
 80010a8:	f7ff fef4 	bl	8000e94 <RXCommande5>
					break;
 80010ac:	e010      	b.n	80010d0 <main+0x18c>
				case 6:    // Команда закрытия клапана
					RXCommande6();
 80010ae:	f7ff ff01 	bl	8000eb4 <RXCommande6>
					break;
 80010b2:	bf00      	nop
 80010b4:	e00c      	b.n	80010d0 <main+0x18c>
				}
			}
			} else if(ModeRadio==1) // если прерывание по передаче
 80010b6:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <main+0x268>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d108      	bne.n	80010d0 <main+0x18c>
			{
				ModeRadio=0;
 80010be:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <main+0x268>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
				// Сбрасываем флаги
				Rf96_LoRaClearIrq();
 80010c4:	f7ff fa1e 	bl	8000504 <Rf96_LoRaClearIrq>
	            // Заходим в Standby
				Rf96_Standby();
 80010c8:	f7ff fa24 	bl	8000514 <Rf96_Standby>
			    // Ожидаем команду
			    Rf96_Lora_RX_mode();
 80010cc:	f7ff fbb8 	bl	8000840 <Rf96_Lora_RX_mode>
			}
		}
		//  Если разрешена запись на Sd карту и если есть что записывать
		if(ResolveSDWrite==1 && ReadyToWrite==1)
 80010d0:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <main+0x274>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d149      	bne.n	800116c <main+0x228>
 80010d8:	4b38      	ldr	r3, [pc, #224]	; (80011bc <main+0x278>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d145      	bne.n	800116c <main+0x228>
		{
			// Запись на SD
			DataConv();
 80010e0:	f7ff fefa 	bl	8000ed8 <DataConv>
			// создаем новый файл
			fres = f_open(&fil, &(MassFileName[CountFileNow][0]), FA_OPEN_APPEND | FA_WRITE);
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <main+0x27c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4a34      	ldr	r2, [pc, #208]	; (80011c4 <main+0x280>)
 80010f4:	4413      	add	r3, r2
 80010f6:	2232      	movs	r2, #50	; 0x32
 80010f8:	4619      	mov	r1, r3
 80010fa:	4833      	ldr	r0, [pc, #204]	; (80011c8 <main+0x284>)
 80010fc:	f007 fa38 	bl	8008570 <f_open>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <main+0x254>)
 8001106:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <main+0x254>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <main+0x1d8>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2102      	movs	r1, #2
 8001114:	481d      	ldr	r0, [pc, #116]	; (800118c <main+0x248>)
 8001116:	f002 fdc5 	bl	8003ca4 <HAL_GPIO_WritePin>
				while(1);
 800111a:	e7fe      	b.n	800111a <main+0x1d6>
			}
			fres = f_write(&fil, SDbufWrite, 161, &bytesWrote);
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <main+0x288>)
 800111e:	22a1      	movs	r2, #161	; 0xa1
 8001120:	492b      	ldr	r1, [pc, #172]	; (80011d0 <main+0x28c>)
 8001122:	4829      	ldr	r0, [pc, #164]	; (80011c8 <main+0x284>)
 8001124:	f007 fd21 	bl	8008b6a <f_write>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <main+0x254>)
 800112e:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <main+0x254>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <main+0x200>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2102      	movs	r1, #2
 800113c:	4813      	ldr	r0, [pc, #76]	; (800118c <main+0x248>)
 800113e:	f002 fdb1 	bl	8003ca4 <HAL_GPIO_WritePin>
				while(1);
 8001142:	e7fe      	b.n	8001142 <main+0x1fe>
			}
			// Синхронизация файла и sd карты
			//fres = f_sync(&fil);
			fres=f_close(&fil);
 8001144:	4820      	ldr	r0, [pc, #128]	; (80011c8 <main+0x284>)
 8001146:	f007 ff03 	bl	8008f50 <f_close>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <main+0x254>)
 8001150:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <main+0x254>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <main+0x222>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2102      	movs	r1, #2
 800115e:	480b      	ldr	r0, [pc, #44]	; (800118c <main+0x248>)
 8001160:	f002 fda0 	bl	8003ca4 <HAL_GPIO_WritePin>
				while(1);
 8001164:	e7fe      	b.n	8001164 <main+0x220>
			}
            // Нечего записывать
			ReadyToWrite=0;
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <main+0x278>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
		}
		// Окончание задержки
		if(Timeout==1)
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <main+0x290>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	f47f af4d 	bne.w	8001010 <main+0xcc>
		{
			// Для 3 команды
			// Убираем единицу с двигателя
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117c:	4816      	ldr	r0, [pc, #88]	; (80011d8 <main+0x294>)
 800117e:	f002 fd91 	bl	8003ca4 <HAL_GPIO_WritePin>
			Timeout=0;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <main+0x290>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
	    SyncCKT();
 8001188:	e742      	b.n	8001010 <main+0xcc>
 800118a:	bf00      	nop
 800118c:	40020800 	.word	0x40020800
 8001190:	08009124 	.word	0x08009124
 8001194:	20000150 	.word	0x20000150
 8001198:	20000810 	.word	0x20000810
 800119c:	20000410 	.word	0x20000410
 80011a0:	20000494 	.word	0x20000494
 80011a4:	20000380 	.word	0x20000380
 80011a8:	40020000 	.word	0x40020000
 80011ac:	2000006d 	.word	0x2000006d
 80011b0:	200003e4 	.word	0x200003e4
 80011b4:	20000068 	.word	0x20000068
 80011b8:	2000006a 	.word	0x2000006a
 80011bc:	2000006b 	.word	0x2000006b
 80011c0:	2000006c 	.word	0x2000006c
 80011c4:	08009180 	.word	0x08009180
 80011c8:	20000814 	.word	0x20000814
 80011cc:	200003e0 	.word	0x200003e0
 80011d0:	200005d4 	.word	0x200005d4
 80011d4:	20000075 	.word	0x20000075
 80011d8:	40020400 	.word	0x40020400

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2234      	movs	r2, #52	; 0x34
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f007 ff5a 	bl	80090a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <SystemClock_Config+0xdc>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a2b      	ldr	r2, [pc, #172]	; (80012b8 <SystemClock_Config+0xdc>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <SystemClock_Config+0xdc>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <SystemClock_Config+0xe0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a25      	ldr	r2, [pc, #148]	; (80012bc <SystemClock_Config+0xe0>)
 8001226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <SystemClock_Config+0xe0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800124c:	2308      	movs	r3, #8
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001250:	23b4      	movs	r3, #180	; 0xb4
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001258:	2302      	movs	r3, #2
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800125c:	2302      	movs	r3, #2
 800125e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4618      	mov	r0, r3
 8001266:	f003 f841 	bl	80042ec <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001270:	f000 fbb2 	bl	80019d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001274:	f002 fd30 	bl	8003cd8 <HAL_PWREx_EnableOverDrive>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800127e:	f000 fbab 	bl	80019d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2302      	movs	r3, #2
 8001288:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800128e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	2105      	movs	r1, #5
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fd69 	bl	8003d78 <HAL_RCC_ClockConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012ac:	f000 fb94 	bl	80019d8 <Error_Handler>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3750      	adds	r7, #80	; 0x50
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_SPI1_Init+0x64>)
 80012c6:	4a18      	ldr	r2, [pc, #96]	; (8001328 <MX_SPI1_Init+0x68>)
 80012c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_SPI1_Init+0x64>)
 80012cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_SPI1_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_SPI1_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_SPI1_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_SPI1_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_SPI1_Init+0x64>)
 80012ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_SPI1_Init+0x64>)
 80012f4:	2210      	movs	r2, #16
 80012f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <MX_SPI1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_SPI1_Init+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <MX_SPI1_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_SPI1_Init+0x64>)
 800130c:	220a      	movs	r2, #10
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_SPI1_Init+0x64>)
 8001312:	f003 fa45 	bl	80047a0 <HAL_SPI_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800131c:	f000 fb5c 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000718 	.word	0x20000718
 8001328:	40013000 	.word	0x40013000

0800132c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_SPI3_Init+0x64>)
 8001332:	4a18      	ldr	r2, [pc, #96]	; (8001394 <MX_SPI3_Init+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_SPI3_Init+0x64>)
 8001338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800133c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_SPI3_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_SPI3_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_SPI3_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_SPI3_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_SPI3_Init+0x64>)
 8001358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_SPI3_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <MX_SPI3_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_SPI3_Init+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <MX_SPI3_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_SPI3_Init+0x64>)
 8001378:	220a      	movs	r2, #10
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_SPI3_Init+0x64>)
 800137e:	f003 fa0f 	bl	80047a0 <HAL_SPI_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001388:	f000 fb26 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000043c 	.word	0x2000043c
 8001394:	40003c00 	.word	0x40003c00

08001398 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139e:	463b      	mov	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_TIM6_Init+0x64>)
 80013a8:	4a15      	ldr	r2, [pc, #84]	; (8001400 <MX_TIM6_Init+0x68>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_TIM6_Init+0x64>)
 80013ae:	f242 3227 	movw	r2, #8999	; 0x2327
 80013b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_TIM6_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_TIM6_Init+0x64>)
 80013bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_TIM6_Init+0x64>)
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013c8:	480c      	ldr	r0, [pc, #48]	; (80013fc <MX_TIM6_Init+0x64>)
 80013ca:	f004 f85d 	bl	8005488 <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80013d4:	f000 fb00 	bl	80019d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_TIM6_Init+0x64>)
 80013e6:	f004 fa99 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80013f0:	f000 faf2 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200006a4 	.word	0x200006a4
 8001400:	40001000 	.word	0x40001000

08001404 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_TIM7_Init+0x64>)
 8001414:	4a15      	ldr	r2, [pc, #84]	; (800146c <MX_TIM7_Init+0x68>)
 8001416:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_TIM7_Init+0x64>)
 800141a:	f242 3227 	movw	r2, #8999	; 0x2327
 800141e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_TIM7_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <MX_TIM7_Init+0x64>)
 8001428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800142c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_TIM7_Init+0x64>)
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <MX_TIM7_Init+0x64>)
 8001436:	f004 f827 	bl	8005488 <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001440:	f000 faca 	bl	80019d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_TIM7_Init+0x64>)
 8001452:	f004 fa63 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800145c:	f000 fabc 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000a44 	.word	0x20000a44
 800146c:	40001400 	.word	0x40001400

08001470 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_TIM10_Init+0x40>)
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <MX_TIM10_Init+0x44>)
 8001478:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <MX_TIM10_Init+0x40>)
 800147c:	f242 3227 	movw	r2, #8999	; 0x2327
 8001480:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_TIM10_Init+0x40>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_TIM10_Init+0x40>)
 800148a:	f242 7210 	movw	r2, #10000	; 0x2710
 800148e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <MX_TIM10_Init+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_TIM10_Init+0x40>)
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_TIM10_Init+0x40>)
 800149e:	f003 fff3 	bl	8005488 <HAL_TIM_Base_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80014a8:	f000 fa96 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000380 	.word	0x20000380
 80014b4:	40014400 	.word	0x40014400

080014b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_UART5_Init+0x50>)
 80014be:	4a13      	ldr	r2, [pc, #76]	; (800150c <MX_UART5_Init+0x54>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_UART5_Init+0x50>)
 80014c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_UART5_Init+0x50>)
 80014cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d0:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <MX_UART5_Init+0x50>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_UART5_Init+0x50>)
 80014da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_UART5_Init+0x50>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_UART5_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_UART5_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_UART5_Init+0x50>)
 80014f4:	f004 faa2 	bl	8005a3c <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 80014fe:	f000 fa6b 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000494 	.word	0x20000494
 800150c:	40005000 	.word	0x40005000

08001510 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_USART1_UART_Init+0x4c>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <MX_USART1_UART_Init+0x50>)
 8001518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_USART1_UART_Init+0x4c>)
 800151c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_USART1_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_USART1_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_USART1_UART_Init+0x4c>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_USART1_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_USART1_UART_Init+0x4c>)
 8001548:	f004 fa78 	bl	8005a3c <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001552:	f000 fa41 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000594 	.word	0x20000594
 8001560:	40011000 	.word	0x40011000

08001564 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <MX_USART2_UART_Init+0x50>)
 800156c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001570:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800159c:	f004 fa4e 	bl	8005a3c <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015a6:	f000 fa17 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000770 	.word	0x20000770
 80015b4:	40004400 	.word	0x40004400

080015b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <MX_USART3_UART_Init+0x50>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015c4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80015c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015f0:	f004 fa24 	bl	8005a3c <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015fa:	f000 f9ed 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000110 	.word	0x20000110
 8001608:	40004800 	.word	0x40004800

0800160c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <MX_DMA_Init+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <MX_DMA_Init+0x88>)
 800161c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <MX_DMA_Init+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <MX_DMA_Init+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a17      	ldr	r2, [pc, #92]	; (8001694 <MX_DMA_Init+0x88>)
 8001638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <MX_DMA_Init+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	200b      	movs	r0, #11
 8001650:	f001 fd3b 	bl	80030ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001654:	200b      	movs	r0, #11
 8001656:	f001 fd54 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	200c      	movs	r0, #12
 8001660:	f001 fd33 	bl	80030ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001664:	200c      	movs	r0, #12
 8001666:	f001 fd4c 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2011      	movs	r0, #17
 8001670:	f001 fd2b 	bl	80030ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001674:	2011      	movs	r0, #17
 8001676:	f001 fd44 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	203a      	movs	r0, #58	; 0x3a
 8001680:	f001 fd23 	bl	80030ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001684:	203a      	movs	r0, #58	; 0x3a
 8001686:	f001 fd3c 	bl	8003102 <HAL_NVIC_EnableIRQ>

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b67      	ldr	r3, [pc, #412]	; (8001850 <MX_GPIO_Init+0x1b8>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a66      	ldr	r2, [pc, #408]	; (8001850 <MX_GPIO_Init+0x1b8>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b64      	ldr	r3, [pc, #400]	; (8001850 <MX_GPIO_Init+0x1b8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b60      	ldr	r3, [pc, #384]	; (8001850 <MX_GPIO_Init+0x1b8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a5f      	ldr	r2, [pc, #380]	; (8001850 <MX_GPIO_Init+0x1b8>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <MX_GPIO_Init+0x1b8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b59      	ldr	r3, [pc, #356]	; (8001850 <MX_GPIO_Init+0x1b8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a58      	ldr	r2, [pc, #352]	; (8001850 <MX_GPIO_Init+0x1b8>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b56      	ldr	r3, [pc, #344]	; (8001850 <MX_GPIO_Init+0x1b8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b52      	ldr	r3, [pc, #328]	; (8001850 <MX_GPIO_Init+0x1b8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a51      	ldr	r2, [pc, #324]	; (8001850 <MX_GPIO_Init+0x1b8>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <MX_GPIO_Init+0x1b8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	210e      	movs	r1, #14
 8001722:	484c      	ldr	r0, [pc, #304]	; (8001854 <MX_GPIO_Init+0x1bc>)
 8001724:	f002 fabe 	bl	8003ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f248 0113 	movw	r1, #32787	; 0x8013
 800172e:	484a      	ldr	r0, [pc, #296]	; (8001858 <MX_GPIO_Init+0x1c0>)
 8001730:	f002 fab8 	bl	8003ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800173a:	4846      	ldr	r0, [pc, #280]	; (8001854 <MX_GPIO_Init+0x1bc>)
 800173c:	f002 fab2 	bl	8003ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|SSV_Pin|acel2_Pin|acel2_2_Pin 
 8001740:	2200      	movs	r2, #0
 8001742:	f24f 0142 	movw	r1, #61506	; 0xf042
 8001746:	4845      	ldr	r0, [pc, #276]	; (800185c <MX_GPIO_Init+0x1c4>)
 8001748:	f002 faac 	bl	8003ca4 <HAL_GPIO_WritePin>
                          |Motor_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <MX_GPIO_Init+0x1c8>)
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	483c      	ldr	r0, [pc, #240]	; (8001854 <MX_GPIO_Init+0x1bc>)
 8001762:	f002 f8f5 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001766:	230e      	movs	r3, #14
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4835      	ldr	r0, [pc, #212]	; (8001854 <MX_GPIO_Init+0x1bc>)
 800177e:	f002 f8e7 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001782:	f248 0313 	movw	r3, #32787	; 0x8013
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	482f      	ldr	r0, [pc, #188]	; (8001858 <MX_GPIO_Init+0x1c0>)
 800179c:	f002 f8d8 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|acel1_Pin|acel1_1_Pin;
 80017a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4826      	ldr	r0, [pc, #152]	; (8001854 <MX_GPIO_Init+0x1bc>)
 80017ba:	f002 f8c9 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017be:	2302      	movs	r3, #2
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4821      	ldr	r0, [pc, #132]	; (800185c <MX_GPIO_Init+0x1c4>)
 80017d6:	f002 f8bb 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSV_Pin acel2_2_Pin Motor_Pin PB6 */
  GPIO_InitStruct.Pin = SSV_Pin|acel2_2_Pin|Motor_Pin|GPIO_PIN_6;
 80017da:	f24d 0340 	movw	r3, #53312	; 0xd040
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	481a      	ldr	r0, [pc, #104]	; (800185c <MX_GPIO_Init+0x1c4>)
 80017f4:	f002 f8ac 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 80017f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4812      	ldr	r0, [pc, #72]	; (800185c <MX_GPIO_Init+0x1c4>)
 8001812:	f002 f89d 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	480b      	ldr	r0, [pc, #44]	; (8001858 <MX_GPIO_Init+0x1c0>)
 800182c:	f002 f890 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001830:	2338      	movs	r3, #56	; 0x38
 8001832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4806      	ldr	r0, [pc, #24]	; (800185c <MX_GPIO_Init+0x1c4>)
 8001844:	f002 f884 	bl	8003950 <HAL_GPIO_Init>

}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	40020800 	.word	0x40020800
 8001858:	40020000 	.word	0x40020000
 800185c:	40020400 	.word	0x40020400
 8001860:	10210000 	.word	0x10210000

08001864 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Обработчик прерываний Usartа по приему
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	if(huart==&huart5)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a27      	ldr	r2, [pc, #156]	; (800190c <HAL_UART_RxCpltCallback+0xa8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d146      	bne.n	8001902 <HAL_UART_RxCpltCallback+0x9e>
	{
		// Остановка таймера, говорящая о том, что ЦКТ подключен
		HAL_TIM_Base_Stop_IT(&htim10);
 8001874:	4826      	ldr	r0, [pc, #152]	; (8001910 <HAL_UART_RxCpltCallback+0xac>)
 8001876:	f003 fe56 	bl	8005526 <HAL_TIM_Base_Stop_IT>
		TIM10->CNT=0;
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_UART_RxCpltCallback+0xb0>)
 800187c:	2200      	movs	r2, #0
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
        // Включение 2 светодиода, если ЦКТ подключен
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	2104      	movs	r1, #4
 8001884:	4824      	ldr	r0, [pc, #144]	; (8001918 <HAL_UART_RxCpltCallback+0xb4>)
 8001886:	f002 fa0d 	bl	8003ca4 <HAL_GPIO_WritePin>
		// Если данные синхронизированы
		if(BuffCkt[0]==0x7C && BuffCkt[1]==0x6E && BuffCkt[2]==0xA1 && BuffCkt[3]==0x2C )
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_UART_RxCpltCallback+0xb8>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b7c      	cmp	r3, #124	; 0x7c
 8001890:	d131      	bne.n	80018f6 <HAL_UART_RxCpltCallback+0x92>
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_UART_RxCpltCallback+0xb8>)
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	2b6e      	cmp	r3, #110	; 0x6e
 8001898:	d12d      	bne.n	80018f6 <HAL_UART_RxCpltCallback+0x92>
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_UART_RxCpltCallback+0xb8>)
 800189c:	789b      	ldrb	r3, [r3, #2]
 800189e:	2ba1      	cmp	r3, #161	; 0xa1
 80018a0:	d129      	bne.n	80018f6 <HAL_UART_RxCpltCallback+0x92>
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_UART_RxCpltCallback+0xb8>)
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	2b2c      	cmp	r3, #44	; 0x2c
 80018a8:	d125      	bne.n	80018f6 <HAL_UART_RxCpltCallback+0x92>
		{
			if(CountCKT==CountOfWriteToSD)
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_UART_RxCpltCallback+0xbc>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d11a      	bne.n	80018e8 <HAL_UART_RxCpltCallback+0x84>
			{
				CountCKT=0;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_UART_RxCpltCallback+0xbc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
				// Готов к записи
				ReadyToWrite=1;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_UART_RxCpltCallback+0xc0>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
				//  Время в мс, когда пришли данные
				reciveTime = HAL_GetTick();
 80018be:	f001 fafb 	bl	8002eb8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_UART_RxCpltCallback+0xc4>)
 80018c6:	601a      	str	r2, [r3, #0]
				// Перезаписываем данные в массив посредник
				for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e008      	b.n	80018e0 <HAL_UART_RxCpltCallback+0x7c>
				{
					BuffMidW[i]=BuffCkt[i];
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	4912      	ldr	r1, [pc, #72]	; (800191c <HAL_UART_RxCpltCallback+0xb8>)
 80018d4:	5c89      	ldrb	r1, [r1, r2]
 80018d6:	4a15      	ldr	r2, [pc, #84]	; (800192c <HAL_UART_RxCpltCallback+0xc8>)
 80018d8:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	3301      	adds	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b2a      	cmp	r3, #42	; 0x2a
 80018e4:	d9f3      	bls.n	80018ce <HAL_UART_RxCpltCallback+0x6a>
			if(CountCKT==CountOfWriteToSD)
 80018e6:	e009      	b.n	80018fc <HAL_UART_RxCpltCallback+0x98>
				}
			} else CountCKT++;
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_UART_RxCpltCallback+0xbc>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_UART_RxCpltCallback+0xbc>)
 80018f2:	701a      	strb	r2, [r3, #0]
			if(CountCKT==CountOfWriteToSD)
 80018f4:	e002      	b.n	80018fc <HAL_UART_RxCpltCallback+0x98>
		} else readFlag=1;  // Если данные не синхронизированы
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_UART_RxCpltCallback+0xcc>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
		// стартуем таймер для дальнейшей проверки на подключение ЦКТ
		HAL_TIM_Base_Start_IT(&htim10);
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <HAL_UART_RxCpltCallback+0xac>)
 80018fe:	f003 fdee 	bl	80054de <HAL_TIM_Base_Start_IT>
	}
}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000494 	.word	0x20000494
 8001910:	20000380 	.word	0x20000380
 8001914:	40014400 	.word	0x40014400
 8001918:	40020800 	.word	0x40020800
 800191c:	20000410 	.word	0x20000410
 8001920:	20000076 	.word	0x20000076
 8001924:	2000006b 	.word	0x2000006b
 8001928:	20000064 	.word	0x20000064
 800192c:	20000678 	.word	0x20000678
 8001930:	20000716 	.word	0x20000716

08001934 <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	if(htim==&htim10)  // Если на ЦКТ ничего не пришло, выключаем 2 светодиод
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d112      	bne.n	800196a <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		TIM10->CNT=0;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001946:	2200      	movs	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim10);
 800194a:	480a      	ldr	r0, [pc, #40]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800194c:	f003 fdc7 	bl	80054de <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2104      	movs	r1, #4
 8001954:	4809      	ldr	r0, [pc, #36]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001956:	f002 f9a5 	bl	8003ca4 <HAL_GPIO_WritePin>
		HAL_UART_Abort(&huart5);
 800195a:	4809      	ldr	r0, [pc, #36]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800195c:	f004 f93c 	bl	8005bd8 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 8001960:	222b      	movs	r2, #43	; 0x2b
 8001962:	4908      	ldr	r1, [pc, #32]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001966:	f004 f8b7 	bl	8005ad8 <HAL_UART_Receive_DMA>
	}
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000380 	.word	0x20000380
 8001978:	40014400 	.word	0x40014400
 800197c:	40020800 	.word	0x40020800
 8001980:	20000494 	.word	0x20000494
 8001984:	20000410 	.word	0x20000410

08001988 <SysTick_Handler>:

// Прерывание по системному таймеру
void SysTick_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Delay_start==1)
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <SysTick_Handler+0x40>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d114      	bne.n	80019be <SysTick_Handler+0x36>
	{
		if(Ms_Delay<TimeDelay)
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <SysTick_Handler+0x44>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <SysTick_Handler+0x48>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d205      	bcs.n	80019ac <SysTick_Handler+0x24>
		{
			Ms_Delay++;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <SysTick_Handler+0x44>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <SysTick_Handler+0x44>)
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e008      	b.n	80019be <SysTick_Handler+0x36>
		}
		else
		{
			// произошло прерывание
			Timeout=1;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <SysTick_Handler+0x4c>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
			Delay_start=0;
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SysTick_Handler+0x40>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SysTick_Handler+0x44>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80019be:	f001 fa67 	bl	8002e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000074 	.word	0x20000074
 80019cc:	20000070 	.word	0x20000070
 80019d0:	20000020 	.word	0x20000020
 80019d4:	20000075 	.word	0x20000075

080019d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 80019f2:	1df9      	adds	r1, r7, #7
 80019f4:	230a      	movs	r3, #10
 80019f6:	2201      	movs	r2, #1
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <SPICmd8bit+0x20>)
 80019fa:	f002 ff35 	bl	8004868 <HAL_SPI_Transmit>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000718 	.word	0x20000718

08001a0c <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8001a16:	1df9      	adds	r1, r7, #7
 8001a18:	230a      	movs	r3, #10
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <SPIRead8bit+0x20>)
 8001a1e:	f003 f857 	bl	8004ad0 <HAL_SPI_Receive>

  return(RdPara);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000718 	.word	0x20000718

08001a30 <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2140      	movs	r1, #64	; 0x40
 8001a3e:	480a      	ldr	r0, [pc, #40]	; (8001a68 <SPIRead+0x38>)
 8001a40:	f002 f930 	bl	8003ca4 <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffce 	bl	80019e8 <SPICmd8bit>
  tmp = SPIRead8bit();
 8001a4c:	f7ff ffde 	bl	8001a0c <SPIRead8bit>
 8001a50:	4603      	mov	r3, r0
 8001a52:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 8001a54:	2201      	movs	r2, #1
 8001a56:	2140      	movs	r1, #64	; 0x40
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <SPIRead+0x38>)
 8001a5a:	f002 f923 	bl	8003ca4 <HAL_GPIO_WritePin>
  return(tmp);
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40020400 	.word	0x40020400

08001a6c <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	460a      	mov	r2, r1
 8001a76:	71fb      	strb	r3, [r7, #7]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2140      	movs	r1, #64	; 0x40
 8001a80:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <SPIWrite+0x44>)
 8001a82:	f002 f90f 	bl	8003ca4 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ffaa 	bl	80019e8 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001a94:	79bb      	ldrb	r3, [r7, #6]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ffa6 	bl	80019e8 <SPICmd8bit>
	NSS_H();
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2140      	movs	r1, #64	; 0x40
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <SPIWrite+0x44>)
 8001aa2:	f002 f8ff 	bl	8003ca4 <HAL_GPIO_WritePin>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001ac4:	79bb      	ldrb	r3, [r7, #6]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d91f      	bls.n	8001b0a <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 8001aca:	2200      	movs	r2, #0
 8001acc:	2140      	movs	r1, #64	; 0x40
 8001ace:	4811      	ldr	r0, [pc, #68]	; (8001b14 <SPIBurstRead+0x60>)
 8001ad0:	f002 f8e8 	bl	8003ca4 <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff86 	bl	80019e8 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e009      	b.n	8001af6 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	18d4      	adds	r4, r2, r3
 8001ae8:	f7ff ff90 	bl	8001a0c <SPIRead8bit>
 8001aec:	4603      	mov	r3, r0
 8001aee:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	3301      	adds	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	79bb      	ldrb	r3, [r7, #6]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d3f1      	bcc.n	8001ae2 <SPIBurstRead+0x2e>
      NSS_H();
 8001afe:	2201      	movs	r2, #1
 8001b00:	2140      	movs	r1, #64	; 0x40
 8001b02:	4804      	ldr	r0, [pc, #16]	; (8001b14 <SPIBurstRead+0x60>)
 8001b04:	f002 f8ce 	bl	8003ca4 <HAL_GPIO_WritePin>
 8001b08:	e000      	b.n	8001b0c <SPIBurstRead+0x58>
    return;
 8001b0a:	bf00      	nop
  }
}
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40020400 	.word	0x40020400

08001b18 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001b28:	79bb      	ldrb	r3, [r7, #6]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d922      	bls.n	8001b74 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2140      	movs	r1, #64	; 0x40
 8001b32:	4812      	ldr	r0, [pc, #72]	; (8001b7c <BurstWrite+0x64>)
 8001b34:	f002 f8b6 	bl	8003ca4 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff51 	bl	80019e8 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e009      	b.n	8001b60 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff47 	bl	80019e8 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	79bb      	ldrb	r3, [r7, #6]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d3f1      	bcc.n	8001b4c <BurstWrite+0x34>
    NSS_H();
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2140      	movs	r1, #64	; 0x40
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <BurstWrite+0x64>)
 8001b6e:	f002 f899 	bl	8003ca4 <HAL_GPIO_WritePin>
 8001b72:	e000      	b.n	8001b76 <BurstWrite+0x5e>
    return;
 8001b74:	bf00      	nop
  }
}
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40020400 	.word	0x40020400

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a4e      	ldr	r2, [pc, #312]	; (8001d28 <HAL_SPI_MspInit+0x158>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12c      	bne.n	8001c4c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	4b4d      	ldr	r3, [pc, #308]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a4c      	ldr	r2, [pc, #304]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a45      	ldr	r2, [pc, #276]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c2a:	23e0      	movs	r3, #224	; 0xe0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	483a      	ldr	r0, [pc, #232]	; (8001d30 <HAL_SPI_MspInit+0x160>)
 8001c46:	f001 fe83 	bl	8003950 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c4a:	e068      	b.n	8001d1e <HAL_SPI_MspInit+0x14e>
  else if(hspi->Instance==SPI3)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a38      	ldr	r2, [pc, #224]	; (8001d34 <HAL_SPI_MspInit+0x164>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d163      	bne.n	8001d1e <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a2c      	ldr	r2, [pc, #176]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a25      	ldr	r2, [pc, #148]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <HAL_SPI_MspInit+0x15c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001cba:	2307      	movs	r3, #7
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481c      	ldr	r0, [pc, #112]	; (8001d38 <HAL_SPI_MspInit+0x168>)
 8001cc6:	f001 fe43 	bl	8003950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cdc:	2306      	movs	r3, #6
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4815      	ldr	r0, [pc, #84]	; (8001d3c <HAL_SPI_MspInit+0x16c>)
 8001ce8:	f001 fe32 	bl	8003950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cfe:	2306      	movs	r3, #6
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <HAL_SPI_MspInit+0x16c>)
 8001d0a:	f001 fe21 	bl	8003950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2033      	movs	r0, #51	; 0x33
 8001d14:	f001 f9d9 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001d18:	2033      	movs	r0, #51	; 0x33
 8001d1a:	f001 f9f2 	bl	8003102 <HAL_NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3730      	adds	r7, #48	; 0x30
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40013000 	.word	0x40013000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40003c00 	.word	0x40003c00
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800

08001d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d116      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <HAL_TIM_Base_MspInit+0xbc>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a28      	ldr	r2, [pc, #160]	; (8001dfc <HAL_TIM_Base_MspInit+0xbc>)
 8001d5c:	f043 0310 	orr.w	r3, r3, #16
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <HAL_TIM_Base_MspInit+0xbc>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	2036      	movs	r0, #54	; 0x36
 8001d74:	f001 f9a9 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d78:	2036      	movs	r0, #54	; 0x36
 8001d7a:	f001 f9c2 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001d7e:	e036      	b.n	8001dee <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <HAL_TIM_Base_MspInit+0xc0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d116      	bne.n	8001db8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_TIM_Base_MspInit+0xbc>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a1a      	ldr	r2, [pc, #104]	; (8001dfc <HAL_TIM_Base_MspInit+0xbc>)
 8001d94:	f043 0320 	orr.w	r3, r3, #32
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_TIM_Base_MspInit+0xbc>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	2037      	movs	r0, #55	; 0x37
 8001dac:	f001 f98d 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001db0:	2037      	movs	r0, #55	; 0x37
 8001db2:	f001 f9a6 	bl	8003102 <HAL_NVIC_EnableIRQ>
}
 8001db6:	e01a      	b.n	8001dee <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_TIM_Base_MspInit+0xc4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d115      	bne.n	8001dee <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_TIM_Base_MspInit+0xbc>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <HAL_TIM_Base_MspInit+0xbc>)
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_TIM_Base_MspInit+0xbc>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	2019      	movs	r0, #25
 8001de4:	f001 f971 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001de8:	2019      	movs	r0, #25
 8001dea:	f001 f98a 	bl	8003102 <HAL_NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40001000 	.word	0x40001000
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40001400 	.word	0x40001400
 8001e04:	40014400 	.word	0x40014400

08001e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b092      	sub	sp, #72	; 0x48
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a87      	ldr	r2, [pc, #540]	; (8002044 <HAL_UART_MspInit+0x23c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	f040 8083 	bne.w	8001f32 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e30:	4b85      	ldr	r3, [pc, #532]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a84      	ldr	r2, [pc, #528]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	4b82      	ldr	r3, [pc, #520]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
 8001e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4c:	4b7e      	ldr	r3, [pc, #504]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a7d      	ldr	r2, [pc, #500]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b7b      	ldr	r3, [pc, #492]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e68:	4b77      	ldr	r3, [pc, #476]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4a76      	ldr	r2, [pc, #472]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001e6e:	f043 0308 	orr.w	r3, r3, #8
 8001e72:	6313      	str	r3, [r2, #48]	; 0x30
 8001e74:	4b74      	ldr	r3, [pc, #464]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e92:	2308      	movs	r3, #8
 8001e94:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	486b      	ldr	r0, [pc, #428]	; (800204c <HAL_UART_MspInit+0x244>)
 8001e9e:	f001 fd57 	bl	8003950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4864      	ldr	r0, [pc, #400]	; (8002050 <HAL_UART_MspInit+0x248>)
 8001ebe:	f001 fd47 	bl	8003950 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001ec2:	4b64      	ldr	r3, [pc, #400]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001ec4:	4a64      	ldr	r2, [pc, #400]	; (8002058 <HAL_UART_MspInit+0x250>)
 8001ec6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001ec8:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001eca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ece:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed0:	4b60      	ldr	r3, [pc, #384]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001edc:	4b5d      	ldr	r3, [pc, #372]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee4:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eea:	4b5a      	ldr	r3, [pc, #360]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001ef0:	4b58      	ldr	r3, [pc, #352]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef8:	4b56      	ldr	r3, [pc, #344]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001efe:	4b55      	ldr	r3, [pc, #340]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001f04:	4853      	ldr	r0, [pc, #332]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001f06:	f001 f917 	bl	8003138 <HAL_DMA_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001f10:	f7ff fd62 	bl	80019d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a4f      	ldr	r2, [pc, #316]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1a:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <HAL_UART_MspInit+0x24c>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	2035      	movs	r0, #53	; 0x35
 8001f26:	f001 f8d0 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001f2a:	2035      	movs	r0, #53	; 0x35
 8001f2c:	f001 f8e9 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f30:	e18e      	b.n	8002250 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a49      	ldr	r2, [pc, #292]	; (800205c <HAL_UART_MspInit+0x254>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	f040 8099 	bne.w	8002070 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a40      	ldr	r2, [pc, #256]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001f48:	f043 0310 	orr.w	r3, r3, #16
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
 8001f5e:	4b3a      	ldr	r3, [pc, #232]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a39      	ldr	r2, [pc, #228]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b37      	ldr	r3, [pc, #220]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	4b33      	ldr	r3, [pc, #204]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a32      	ldr	r2, [pc, #200]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_UART_MspInit+0x240>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fac:	4619      	mov	r1, r3
 8001fae:	482c      	ldr	r0, [pc, #176]	; (8002060 <HAL_UART_MspInit+0x258>)
 8001fb0:	f001 fcce 	bl	8003950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fc4:	2307      	movs	r3, #7
 8001fc6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4825      	ldr	r0, [pc, #148]	; (8002064 <HAL_UART_MspInit+0x25c>)
 8001fd0:	f001 fcbe 	bl	8003950 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_UART_MspInit+0x260>)
 8001fd6:	4a25      	ldr	r2, [pc, #148]	; (800206c <HAL_UART_MspInit+0x264>)
 8001fd8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_UART_MspInit+0x260>)
 8001fdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fe0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_UART_MspInit+0x260>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <HAL_UART_MspInit+0x260>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_UART_MspInit+0x260>)
 8001ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_UART_MspInit+0x260>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_UART_MspInit+0x260>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_UART_MspInit+0x260>)
 8002004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002008:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_UART_MspInit+0x260>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_UART_MspInit+0x260>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002016:	4814      	ldr	r0, [pc, #80]	; (8002068 <HAL_UART_MspInit+0x260>)
 8002018:	f001 f88e 	bl	8003138 <HAL_DMA_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8002022:	f7ff fcd9 	bl	80019d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_UART_MspInit+0x260>)
 800202a:	635a      	str	r2, [r3, #52]	; 0x34
 800202c:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_UART_MspInit+0x260>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	2025      	movs	r0, #37	; 0x25
 8002038:	f001 f847 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800203c:	2025      	movs	r0, #37	; 0x25
 800203e:	f001 f860 	bl	8003102 <HAL_NVIC_EnableIRQ>
}
 8002042:	e105      	b.n	8002250 <HAL_UART_MspInit+0x448>
 8002044:	40005000 	.word	0x40005000
 8002048:	40023800 	.word	0x40023800
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	200007b0 	.word	0x200007b0
 8002058:	40026010 	.word	0x40026010
 800205c:	40011000 	.word	0x40011000
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	200004d4 	.word	0x200004d4
 800206c:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a78      	ldr	r2, [pc, #480]	; (8002258 <HAL_UART_MspInit+0x450>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d162      	bne.n	8002140 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	4b77      	ldr	r3, [pc, #476]	; (800225c <HAL_UART_MspInit+0x454>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a76      	ldr	r2, [pc, #472]	; (800225c <HAL_UART_MspInit+0x454>)
 8002084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b74      	ldr	r3, [pc, #464]	; (800225c <HAL_UART_MspInit+0x454>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	4b70      	ldr	r3, [pc, #448]	; (800225c <HAL_UART_MspInit+0x454>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a6f      	ldr	r2, [pc, #444]	; (800225c <HAL_UART_MspInit+0x454>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b6d      	ldr	r3, [pc, #436]	; (800225c <HAL_UART_MspInit+0x454>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020b2:	230c      	movs	r3, #12
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c2:	2307      	movs	r3, #7
 80020c4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020ca:	4619      	mov	r1, r3
 80020cc:	4864      	ldr	r0, [pc, #400]	; (8002260 <HAL_UART_MspInit+0x458>)
 80020ce:	f001 fc3f 	bl	8003950 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80020d2:	4b64      	ldr	r3, [pc, #400]	; (8002264 <HAL_UART_MspInit+0x45c>)
 80020d4:	4a64      	ldr	r2, [pc, #400]	; (8002268 <HAL_UART_MspInit+0x460>)
 80020d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80020d8:	4b62      	ldr	r3, [pc, #392]	; (8002264 <HAL_UART_MspInit+0x45c>)
 80020da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020de:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e0:	4b60      	ldr	r3, [pc, #384]	; (8002264 <HAL_UART_MspInit+0x45c>)
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e6:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <HAL_UART_MspInit+0x45c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ec:	4b5d      	ldr	r3, [pc, #372]	; (8002264 <HAL_UART_MspInit+0x45c>)
 80020ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f4:	4b5b      	ldr	r3, [pc, #364]	; (8002264 <HAL_UART_MspInit+0x45c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fa:	4b5a      	ldr	r3, [pc, #360]	; (8002264 <HAL_UART_MspInit+0x45c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002100:	4b58      	ldr	r3, [pc, #352]	; (8002264 <HAL_UART_MspInit+0x45c>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002106:	4b57      	ldr	r3, [pc, #348]	; (8002264 <HAL_UART_MspInit+0x45c>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800210c:	4b55      	ldr	r3, [pc, #340]	; (8002264 <HAL_UART_MspInit+0x45c>)
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002112:	4854      	ldr	r0, [pc, #336]	; (8002264 <HAL_UART_MspInit+0x45c>)
 8002114:	f001 f810 	bl	8003138 <HAL_DMA_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_UART_MspInit+0x31a>
      Error_Handler();
 800211e:	f7ff fc5b 	bl	80019d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4f      	ldr	r2, [pc, #316]	; (8002264 <HAL_UART_MspInit+0x45c>)
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
 8002128:	4a4e      	ldr	r2, [pc, #312]	; (8002264 <HAL_UART_MspInit+0x45c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	2026      	movs	r0, #38	; 0x26
 8002134:	f000 ffc9 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002138:	2026      	movs	r0, #38	; 0x26
 800213a:	f000 ffe2 	bl	8003102 <HAL_NVIC_EnableIRQ>
}
 800213e:	e087      	b.n	8002250 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a49      	ldr	r2, [pc, #292]	; (800226c <HAL_UART_MspInit+0x464>)
 8002146:	4293      	cmp	r3, r2
 8002148:	f040 8082 	bne.w	8002250 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	4b42      	ldr	r3, [pc, #264]	; (800225c <HAL_UART_MspInit+0x454>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	4a41      	ldr	r2, [pc, #260]	; (800225c <HAL_UART_MspInit+0x454>)
 8002156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215a:	6413      	str	r3, [r2, #64]	; 0x40
 800215c:	4b3f      	ldr	r3, [pc, #252]	; (800225c <HAL_UART_MspInit+0x454>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_UART_MspInit+0x454>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a3a      	ldr	r2, [pc, #232]	; (800225c <HAL_UART_MspInit+0x454>)
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b38      	ldr	r3, [pc, #224]	; (800225c <HAL_UART_MspInit+0x454>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	4b34      	ldr	r3, [pc, #208]	; (800225c <HAL_UART_MspInit+0x454>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a33      	ldr	r2, [pc, #204]	; (800225c <HAL_UART_MspInit+0x454>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_UART_MspInit+0x454>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021a0:	2320      	movs	r3, #32
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021b0:	2307      	movs	r3, #7
 80021b2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021b8:	4619      	mov	r1, r3
 80021ba:	482d      	ldr	r0, [pc, #180]	; (8002270 <HAL_UART_MspInit+0x468>)
 80021bc:	f001 fbc8 	bl	8003950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021d2:	2307      	movs	r3, #7
 80021d4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021da:	4619      	mov	r1, r3
 80021dc:	4825      	ldr	r0, [pc, #148]	; (8002274 <HAL_UART_MspInit+0x46c>)
 80021de:	f001 fbb7 	bl	8003950 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_UART_MspInit+0x470>)
 80021e4:	4a25      	ldr	r2, [pc, #148]	; (800227c <HAL_UART_MspInit+0x474>)
 80021e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80021e8:	4b23      	ldr	r3, [pc, #140]	; (8002278 <HAL_UART_MspInit+0x470>)
 80021ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_UART_MspInit+0x470>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_UART_MspInit+0x470>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_UART_MspInit+0x470>)
 80021fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002202:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002204:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <HAL_UART_MspInit+0x470>)
 8002206:	2200      	movs	r2, #0
 8002208:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_UART_MspInit+0x470>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_UART_MspInit+0x470>)
 8002212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002216:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_UART_MspInit+0x470>)
 800221a:	2200      	movs	r2, #0
 800221c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_UART_MspInit+0x470>)
 8002220:	2200      	movs	r2, #0
 8002222:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002224:	4814      	ldr	r0, [pc, #80]	; (8002278 <HAL_UART_MspInit+0x470>)
 8002226:	f000 ff87 	bl	8003138 <HAL_DMA_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8002230:	f7ff fbd2 	bl	80019d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a10      	ldr	r2, [pc, #64]	; (8002278 <HAL_UART_MspInit+0x470>)
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
 800223a:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_UART_MspInit+0x470>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	2027      	movs	r0, #39	; 0x27
 8002246:	f000 ff40 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800224a:	2027      	movs	r0, #39	; 0x27
 800224c:	f000 ff59 	bl	8003102 <HAL_NVIC_EnableIRQ>
}
 8002250:	bf00      	nop
 8002252:	3748      	adds	r7, #72	; 0x48
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40004400 	.word	0x40004400
 800225c:	40023800 	.word	0x40023800
 8002260:	40020000 	.word	0x40020000
 8002264:	20000534 	.word	0x20000534
 8002268:	400260a0 	.word	0x400260a0
 800226c:	40004800 	.word	0x40004800
 8002270:	40020800 	.word	0x40020800
 8002274:	40020400 	.word	0x40020400
 8002278:	200000ac 	.word	0x200000ac
 800227c:	40026028 	.word	0x40026028

08002280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <HardFault_Handler+0x4>

08002294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <MemManage_Handler+0x4>

0800229a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <BusFault_Handler+0x4>

080022a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <UsageFault_Handler+0x4>

080022a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <DMA1_Stream0_IRQHandler+0x10>)
 80022d6:	f001 f8c7 	bl	8003468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200007b0 	.word	0x200007b0

080022e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <DMA1_Stream1_IRQHandler+0x10>)
 80022ea:	f001 f8bd 	bl	8003468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200000ac 	.word	0x200000ac

080022f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <DMA1_Stream6_IRQHandler+0x10>)
 80022fe:	f001 f8b3 	bl	8003468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000534 	.word	0x20000534

0800230c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002312:	f003 f933 	bl	800557c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000380 	.word	0x20000380

08002320 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <USART1_IRQHandler+0x10>)
 8002326:	f003 fcd9 	bl	8005cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000594 	.word	0x20000594

08002334 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <USART2_IRQHandler+0x10>)
 800233a:	f003 fccf 	bl	8005cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000770 	.word	0x20000770

08002348 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <USART3_IRQHandler+0x10>)
 800234e:	f003 fcc5 	bl	8005cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000110 	.word	0x20000110

0800235c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <SPI3_IRQHandler+0x10>)
 8002362:	f002 fe61 	bl	8005028 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000043c 	.word	0x2000043c

08002370 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <UART5_IRQHandler+0x10>)
 8002376:	f003 fcb1 	bl	8005cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000494 	.word	0x20000494

08002384 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <TIM6_DAC_IRQHandler+0x10>)
 800238a:	f003 f8f7 	bl	800557c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200006a4 	.word	0x200006a4

08002398 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <TIM7_IRQHandler+0x10>)
 800239e:	f003 f8ed 	bl	800557c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000a44 	.word	0x20000a44

080023ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA2_Stream2_IRQHandler+0x10>)
 80023b2:	f001 f859 	bl	8003468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200004d4 	.word	0x200004d4

080023c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <SystemInit+0x28>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <SystemInit+0x28>)
 80023cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SystemInit+0x28>)
 80023d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023da:	609a      	str	r2, [r3, #8]
#endif
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80023f4:	f000 fd60 	bl	8002eb8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <SPI_Timer_On+0x20>)
 80023fc:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80023fe:	4a04      	ldr	r2, [pc, #16]	; (8002410 <SPI_Timer_On+0x24>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000a84 	.word	0x20000a84
 8002410:	20000a88 	.word	0x20000a88

08002414 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002418:	f000 fd4e 	bl	8002eb8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <SPI_Timer_Status+0x24>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	1ad2      	subs	r2, r2, r3
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <SPI_Timer_Status+0x28>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	bf34      	ite	cc
 800242c:	2301      	movcc	r3, #1
 800242e:	2300      	movcs	r3, #0
 8002430:	b2db      	uxtb	r3, r3
}
 8002432:	4618      	mov	r0, r3
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000a84 	.word	0x20000a84
 800243c:	20000a88 	.word	0x20000a88

08002440 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af02      	add	r7, sp, #8
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;

    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 800244a:	f107 020f 	add.w	r2, r7, #15
 800244e:	1df9      	adds	r1, r7, #7
 8002450:	2332      	movs	r3, #50	; 0x32
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2301      	movs	r3, #1
 8002456:	4804      	ldr	r0, [pc, #16]	; (8002468 <xchg_spi+0x28>)
 8002458:	f002 fc43 	bl	8004ce2 <HAL_SPI_TransmitReceive>
    return rxDat;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000043c 	.word	0x2000043c

0800246c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e00a      	b.n	8002492 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	18d4      	adds	r4, r2, r3
 8002482:	20ff      	movs	r0, #255	; 0xff
 8002484:	f7ff ffdc 	bl	8002440 <xchg_spi>
 8002488:	4603      	mov	r3, r0
 800248a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3301      	adds	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d3f0      	bcc.n	800247c <rcvr_spi_multi+0x10>
	}
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd90      	pop	{r4, r7, pc}

080024a2 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e009      	b.n	80024c6 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ffc0 	bl	8002440 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3301      	adds	r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d3f1      	bcc.n	80024b2 <xmit_spi_multi+0x10>
	}
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80024de:	f000 fceb 	bl	8002eb8 <HAL_GetTick>
 80024e2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80024e8:	20ff      	movs	r0, #255	; 0xff
 80024ea:	f7ff ffa9 	bl	8002440 <xchg_spi>
 80024ee:	4603      	mov	r3, r0
 80024f0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2bff      	cmp	r3, #255	; 0xff
 80024f6:	d007      	beq.n	8002508 <wait_ready+0x32>
 80024f8:	f000 fcde 	bl	8002eb8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8ef      	bhi.n	80024e8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2bff      	cmp	r3, #255	; 0xff
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002520:	2201      	movs	r2, #1
 8002522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002526:	4804      	ldr	r0, [pc, #16]	; (8002538 <despiselect+0x1c>)
 8002528:	f001 fbbc 	bl	8003ca4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800252c:	20ff      	movs	r0, #255	; 0xff
 800252e:	f7ff ff87 	bl	8002440 <xchg_spi>

}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40020000 	.word	0x40020000

0800253c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002540:	2200      	movs	r2, #0
 8002542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002546:	480a      	ldr	r0, [pc, #40]	; (8002570 <spiselect+0x34>)
 8002548:	f001 fbac 	bl	8003ca4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800254c:	20ff      	movs	r0, #255	; 0xff
 800254e:	f7ff ff77 	bl	8002440 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002552:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002556:	f7ff ffbe 	bl	80024d6 <wait_ready>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <spiselect+0x28>
 8002560:	2301      	movs	r3, #1
 8002562:	e002      	b.n	800256a <spiselect+0x2e>

	despiselect();
 8002564:	f7ff ffda 	bl	800251c <despiselect>
	return 0;	/* Timeout */
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40020000 	.word	0x40020000

08002574 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800257e:	20c8      	movs	r0, #200	; 0xc8
 8002580:	f7ff ff34 	bl	80023ec <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002584:	20ff      	movs	r0, #255	; 0xff
 8002586:	f7ff ff5b 	bl	8002440 <xchg_spi>
 800258a:	4603      	mov	r3, r0
 800258c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2bff      	cmp	r3, #255	; 0xff
 8002592:	d104      	bne.n	800259e <rcvr_datablock+0x2a>
 8002594:	f7ff ff3e 	bl	8002414 <SPI_Timer_Status>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f2      	bne.n	8002584 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2bfe      	cmp	r3, #254	; 0xfe
 80025a2:	d001      	beq.n	80025a8 <rcvr_datablock+0x34>
 80025a4:	2300      	movs	r3, #0
 80025a6:	e00a      	b.n	80025be <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff5e 	bl	800246c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80025b0:	20ff      	movs	r0, #255	; 0xff
 80025b2:	f7ff ff45 	bl	8002440 <xchg_spi>
 80025b6:	20ff      	movs	r0, #255	; 0xff
 80025b8:	f7ff ff42 	bl	8002440 <xchg_spi>

	return 1;						/* Function succeeded */
 80025bc:	2301      	movs	r3, #1
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80025d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025d6:	f7ff ff7e 	bl	80024d6 <wait_ready>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <xmit_datablock+0x1e>
 80025e0:	2300      	movs	r3, #0
 80025e2:	e01e      	b.n	8002622 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff2a 	bl	8002440 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	2bfd      	cmp	r3, #253	; 0xfd
 80025f0:	d016      	beq.n	8002620 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80025f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ff53 	bl	80024a2 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80025fc:	20ff      	movs	r0, #255	; 0xff
 80025fe:	f7ff ff1f 	bl	8002440 <xchg_spi>
 8002602:	20ff      	movs	r0, #255	; 0xff
 8002604:	f7ff ff1c 	bl	8002440 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002608:	20ff      	movs	r0, #255	; 0xff
 800260a:	f7ff ff19 	bl	8002440 <xchg_spi>
 800260e:	4603      	mov	r3, r0
 8002610:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2b05      	cmp	r3, #5
 800261a:	d001      	beq.n	8002620 <xmit_datablock+0x5a>
 800261c:	2300      	movs	r3, #0
 800261e:	e000      	b.n	8002622 <xmit_datablock+0x5c>
	}
	return 1;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	6039      	str	r1, [r7, #0]
 8002634:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	da0e      	bge.n	800265c <send_cmd+0x32>
		cmd &= 0x7F;
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002644:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002646:	2100      	movs	r1, #0
 8002648:	2037      	movs	r0, #55	; 0x37
 800264a:	f7ff ffee 	bl	800262a <send_cmd>
 800264e:	4603      	mov	r3, r0
 8002650:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002652:	7bbb      	ldrb	r3, [r7, #14]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d901      	bls.n	800265c <send_cmd+0x32>
 8002658:	7bbb      	ldrb	r3, [r7, #14]
 800265a:	e051      	b.n	8002700 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d008      	beq.n	8002674 <send_cmd+0x4a>
		despiselect();
 8002662:	f7ff ff5b 	bl	800251c <despiselect>
		if (!spiselect()) return 0xFF;
 8002666:	f7ff ff69 	bl	800253c <spiselect>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <send_cmd+0x4a>
 8002670:	23ff      	movs	r3, #255	; 0xff
 8002672:	e045      	b.n	8002700 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800267a:	b2db      	uxtb	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fedf 	bl	8002440 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	0e1b      	lsrs	r3, r3, #24
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fed9 	bl	8002440 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fed3 	bl	8002440 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fecd 	bl	8002440 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fec8 	bl	8002440 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <send_cmd+0x94>
 80026ba:	2395      	movs	r3, #149	; 0x95
 80026bc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d101      	bne.n	80026c8 <send_cmd+0x9e>
 80026c4:	2387      	movs	r3, #135	; 0x87
 80026c6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff feb8 	bl	8002440 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d102      	bne.n	80026dc <send_cmd+0xb2>
 80026d6:	20ff      	movs	r0, #255	; 0xff
 80026d8:	f7ff feb2 	bl	8002440 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80026dc:	230a      	movs	r3, #10
 80026de:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80026e0:	20ff      	movs	r0, #255	; 0xff
 80026e2:	f7ff fead 	bl	8002440 <xchg_spi>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80026ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	da05      	bge.n	80026fe <send_cmd+0xd4>
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80026fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <USER_SPI_initialize+0x14>
 8002718:	2301      	movs	r3, #1
 800271a:	e0cb      	b.n	80028b4 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800271c:	4b67      	ldr	r3, [pc, #412]	; (80028bc <USER_SPI_initialize+0x1b4>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <USER_SPI_initialize+0x2a>
 800272a:	4b64      	ldr	r3, [pc, #400]	; (80028bc <USER_SPI_initialize+0x1b4>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	e0c0      	b.n	80028b4 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 8002732:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <USER_SPI_initialize+0x1b8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800273a:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800273c:	230a      	movs	r3, #10
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	e005      	b.n	800274e <USER_SPI_initialize+0x46>
 8002742:	20ff      	movs	r0, #255	; 0xff
 8002744:	f7ff fe7c 	bl	8002440 <xchg_spi>
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3b01      	subs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f6      	bne.n	8002742 <USER_SPI_initialize+0x3a>

	ty = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002758:	2100      	movs	r1, #0
 800275a:	2000      	movs	r0, #0
 800275c:	f7ff ff65 	bl	800262a <send_cmd>
 8002760:	4603      	mov	r3, r0
 8002762:	2b01      	cmp	r3, #1
 8002764:	f040 808b 	bne.w	800287e <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800276c:	f7ff fe3e 	bl	80023ec <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002770:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002774:	2008      	movs	r0, #8
 8002776:	f7ff ff58 	bl	800262a <send_cmd>
 800277a:	4603      	mov	r3, r0
 800277c:	2b01      	cmp	r3, #1
 800277e:	d151      	bne.n	8002824 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e00d      	b.n	80027a2 <USER_SPI_initialize+0x9a>
 8002786:	7bfc      	ldrb	r4, [r7, #15]
 8002788:	20ff      	movs	r0, #255	; 0xff
 800278a:	f7ff fe59 	bl	8002440 <xchg_spi>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	4423      	add	r3, r4
 8002798:	f803 2c08 	strb.w	r2, [r3, #-8]
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	3301      	adds	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d9ee      	bls.n	8002786 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80027a8:	7abb      	ldrb	r3, [r7, #10]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d167      	bne.n	800287e <USER_SPI_initialize+0x176>
 80027ae:	7afb      	ldrb	r3, [r7, #11]
 80027b0:	2baa      	cmp	r3, #170	; 0xaa
 80027b2:	d164      	bne.n	800287e <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80027b4:	bf00      	nop
 80027b6:	f7ff fe2d 	bl	8002414 <SPI_Timer_Status>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <USER_SPI_initialize+0xc8>
 80027c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80027c4:	20a9      	movs	r0, #169	; 0xa9
 80027c6:	f7ff ff30 	bl	800262a <send_cmd>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f2      	bne.n	80027b6 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80027d0:	f7ff fe20 	bl	8002414 <SPI_Timer_Status>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d051      	beq.n	800287e <USER_SPI_initialize+0x176>
 80027da:	2100      	movs	r1, #0
 80027dc:	203a      	movs	r0, #58	; 0x3a
 80027de:	f7ff ff24 	bl	800262a <send_cmd>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d14a      	bne.n	800287e <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	e00d      	b.n	800280a <USER_SPI_initialize+0x102>
 80027ee:	7bfc      	ldrb	r4, [r7, #15]
 80027f0:	20ff      	movs	r0, #255	; 0xff
 80027f2:	f7ff fe25 	bl	8002440 <xchg_spi>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	f107 0310 	add.w	r3, r7, #16
 80027fe:	4423      	add	r3, r4
 8002800:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	3301      	adds	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d9ee      	bls.n	80027ee <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002810:	7a3b      	ldrb	r3, [r7, #8]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <USER_SPI_initialize+0x116>
 800281a:	230c      	movs	r3, #12
 800281c:	e000      	b.n	8002820 <USER_SPI_initialize+0x118>
 800281e:	2304      	movs	r3, #4
 8002820:	737b      	strb	r3, [r7, #13]
 8002822:	e02c      	b.n	800287e <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002824:	2100      	movs	r1, #0
 8002826:	20a9      	movs	r0, #169	; 0xa9
 8002828:	f7ff feff 	bl	800262a <send_cmd>
 800282c:	4603      	mov	r3, r0
 800282e:	2b01      	cmp	r3, #1
 8002830:	d804      	bhi.n	800283c <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002832:	2302      	movs	r3, #2
 8002834:	737b      	strb	r3, [r7, #13]
 8002836:	23a9      	movs	r3, #169	; 0xa9
 8002838:	73bb      	strb	r3, [r7, #14]
 800283a:	e003      	b.n	8002844 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800283c:	2301      	movs	r3, #1
 800283e:	737b      	strb	r3, [r7, #13]
 8002840:	2301      	movs	r3, #1
 8002842:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002844:	bf00      	nop
 8002846:	f7ff fde5 	bl	8002414 <SPI_Timer_Status>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <USER_SPI_initialize+0x158>
 8002850:	7bbb      	ldrb	r3, [r7, #14]
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fee8 	bl	800262a <send_cmd>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f2      	bne.n	8002846 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002860:	f7ff fdd8 	bl	8002414 <SPI_Timer_Status>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <USER_SPI_initialize+0x172>
 800286a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800286e:	2010      	movs	r0, #16
 8002870:	f7ff fedb 	bl	800262a <send_cmd>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <USER_SPI_initialize+0x176>
				ty = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 800287e:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <USER_SPI_initialize+0x1bc>)
 8002880:	7b7b      	ldrb	r3, [r7, #13]
 8002882:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002884:	f7ff fe4a 	bl	800251c <despiselect>

	if (ty) {			/* OK */
 8002888:	7b7b      	ldrb	r3, [r7, #13]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00c      	beq.n	80028a8 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <USER_SPI_initialize+0x1b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2210      	movs	r2, #16
 8002894:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <USER_SPI_initialize+0x1b4>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <USER_SPI_initialize+0x1b4>)
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	e002      	b.n	80028ae <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <USER_SPI_initialize+0x1b4>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80028ae:	4b03      	ldr	r3, [pc, #12]	; (80028bc <USER_SPI_initialize+0x1b4>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b2db      	uxtb	r3, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	20000028 	.word	0x20000028
 80028c0:	2000043c 	.word	0x2000043c
 80028c4:	20000077 	.word	0x20000077

080028c8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <USER_SPI_status+0x14>
 80028d8:	2301      	movs	r3, #1
 80028da:	e002      	b.n	80028e2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <USER_SPI_status+0x28>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b2db      	uxtb	r3, r3
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000028 	.word	0x20000028

080028f4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	4603      	mov	r3, r0
 8002902:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d102      	bne.n	8002910 <USER_SPI_read+0x1c>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <USER_SPI_read+0x20>
 8002910:	2304      	movs	r3, #4
 8002912:	e04d      	b.n	80029b0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002914:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <USER_SPI_read+0xc4>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <USER_SPI_read+0x32>
 8002922:	2303      	movs	r3, #3
 8002924:	e044      	b.n	80029b0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002926:	4b25      	ldr	r3, [pc, #148]	; (80029bc <USER_SPI_read+0xc8>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <USER_SPI_read+0x44>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	025b      	lsls	r3, r3, #9
 8002936:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d111      	bne.n	8002962 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	2011      	movs	r0, #17
 8002942:	f7ff fe72 	bl	800262a <send_cmd>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d129      	bne.n	80029a0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800294c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002950:	68b8      	ldr	r0, [r7, #8]
 8002952:	f7ff fe0f 	bl	8002574 <rcvr_datablock>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d021      	beq.n	80029a0 <USER_SPI_read+0xac>
			count = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	e01e      	b.n	80029a0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	2012      	movs	r0, #18
 8002966:	f7ff fe60 	bl	800262a <send_cmd>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d117      	bne.n	80029a0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002974:	68b8      	ldr	r0, [r7, #8]
 8002976:	f7ff fdfd 	bl	8002574 <rcvr_datablock>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <USER_SPI_read+0xa2>
				buff += 512;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002986:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3b01      	subs	r3, #1
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ed      	bne.n	8002970 <USER_SPI_read+0x7c>
 8002994:	e000      	b.n	8002998 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002996:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002998:	2100      	movs	r1, #0
 800299a:	200c      	movs	r0, #12
 800299c:	f7ff fe45 	bl	800262a <send_cmd>
		}
	}
	despiselect();
 80029a0:	f7ff fdbc 	bl	800251c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf14      	ite	ne
 80029aa:	2301      	movne	r3, #1
 80029ac:	2300      	moveq	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000028 	.word	0x20000028
 80029bc:	20000077 	.word	0x20000077

080029c0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	4603      	mov	r3, r0
 80029ce:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <USER_SPI_write+0x1c>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <USER_SPI_write+0x20>
 80029dc:	2304      	movs	r3, #4
 80029de:	e063      	b.n	8002aa8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80029e0:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <USER_SPI_write+0xf0>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <USER_SPI_write+0x32>
 80029ee:	2303      	movs	r3, #3
 80029f0:	e05a      	b.n	8002aa8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80029f2:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <USER_SPI_write+0xf0>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <USER_SPI_write+0x44>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e051      	b.n	8002aa8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <USER_SPI_write+0xf4>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <USER_SPI_write+0x56>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	025b      	lsls	r3, r3, #9
 8002a14:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d110      	bne.n	8002a3e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	2018      	movs	r0, #24
 8002a20:	f7ff fe03 	bl	800262a <send_cmd>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d136      	bne.n	8002a98 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002a2a:	21fe      	movs	r1, #254	; 0xfe
 8002a2c:	68b8      	ldr	r0, [r7, #8]
 8002a2e:	f7ff fdca 	bl	80025c6 <xmit_datablock>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d02f      	beq.n	8002a98 <USER_SPI_write+0xd8>
			count = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	e02c      	b.n	8002a98 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <USER_SPI_write+0xf4>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	f003 0306 	and.w	r3, r3, #6
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <USER_SPI_write+0x92>
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	2097      	movs	r0, #151	; 0x97
 8002a4e:	f7ff fdec 	bl	800262a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	2019      	movs	r0, #25
 8002a56:	f7ff fde8 	bl	800262a <send_cmd>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d11b      	bne.n	8002a98 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002a60:	21fc      	movs	r1, #252	; 0xfc
 8002a62:	68b8      	ldr	r0, [r7, #8]
 8002a64:	f7ff fdaf 	bl	80025c6 <xmit_datablock>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <USER_SPI_write+0xc4>
				buff += 512;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a74:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ee      	bne.n	8002a60 <USER_SPI_write+0xa0>
 8002a82:	e000      	b.n	8002a86 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002a84:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002a86:	21fd      	movs	r1, #253	; 0xfd
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7ff fd9c 	bl	80025c6 <xmit_datablock>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <USER_SPI_write+0xd8>
 8002a94:	2301      	movs	r3, #1
 8002a96:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002a98:	f7ff fd40 	bl	800251c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf14      	ite	ne
 8002aa2:	2301      	movne	r3, #1
 8002aa4:	2300      	moveq	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000028 	.word	0x20000028
 8002ab4:	20000077 	.word	0x20000077

08002ab8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	603a      	str	r2, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <USER_SPI_ioctl+0x1a>
 8002ace:	2304      	movs	r3, #4
 8002ad0:	e15a      	b.n	8002d88 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002ad2:	4baf      	ldr	r3, [pc, #700]	; (8002d90 <USER_SPI_ioctl+0x2d8>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <USER_SPI_ioctl+0x2c>
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e151      	b.n	8002d88 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002aea:	79bb      	ldrb	r3, [r7, #6]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	f200 8136 	bhi.w	8002d5e <USER_SPI_ioctl+0x2a6>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <USER_SPI_ioctl+0x40>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b0d 	.word	0x08002b0d
 8002afc:	08002b21 	.word	0x08002b21
 8002b00:	08002d5f 	.word	0x08002d5f
 8002b04:	08002bcd 	.word	0x08002bcd
 8002b08:	08002cc3 	.word	0x08002cc3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002b0c:	f7ff fd16 	bl	800253c <spiselect>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8127 	beq.w	8002d66 <USER_SPI_ioctl+0x2ae>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002b1e:	e122      	b.n	8002d66 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002b20:	2100      	movs	r1, #0
 8002b22:	2009      	movs	r0, #9
 8002b24:	f7ff fd81 	bl	800262a <send_cmd>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 811d 	bne.w	8002d6a <USER_SPI_ioctl+0x2b2>
 8002b30:	f107 030c 	add.w	r3, r7, #12
 8002b34:	2110      	movs	r1, #16
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fd1c 	bl	8002574 <rcvr_datablock>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8113 	beq.w	8002d6a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002b44:	7b3b      	ldrb	r3, [r7, #12]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d111      	bne.n	8002b72 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002b4e:	7d7b      	ldrb	r3, [r7, #21]
 8002b50:	461a      	mov	r2, r3
 8002b52:	7d3b      	ldrb	r3, [r7, #20]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	4413      	add	r3, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	7cfb      	ldrb	r3, [r7, #19]
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002b62:	4413      	add	r3, r2
 8002b64:	3301      	adds	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	029a      	lsls	r2, r3, #10
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e028      	b.n	8002bc4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002b72:	7c7b      	ldrb	r3, [r7, #17]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	7dbb      	ldrb	r3, [r7, #22]
 8002b7c:	09db      	lsrs	r3, r3, #7
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	7d7b      	ldrb	r3, [r7, #21]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f003 0306 	and.w	r3, r3, #6
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3302      	adds	r3, #2
 8002b96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002b9a:	7d3b      	ldrb	r3, [r7, #20]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	441a      	add	r2, r3
 8002ba8:	7cbb      	ldrb	r3, [r7, #18]
 8002baa:	029b      	lsls	r3, r3, #10
 8002bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002bb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002bba:	3b09      	subs	r3, #9
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002bca:	e0ce      	b.n	8002d6a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002bcc:	4b71      	ldr	r3, [pc, #452]	; (8002d94 <USER_SPI_ioctl+0x2dc>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d031      	beq.n	8002c3c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002bd8:	2100      	movs	r1, #0
 8002bda:	208d      	movs	r0, #141	; 0x8d
 8002bdc:	f7ff fd25 	bl	800262a <send_cmd>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 80c3 	bne.w	8002d6e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002be8:	20ff      	movs	r0, #255	; 0xff
 8002bea:	f7ff fc29 	bl	8002440 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	2110      	movs	r1, #16
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fcbd 	bl	8002574 <rcvr_datablock>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80b6 	beq.w	8002d6e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002c02:	2330      	movs	r3, #48	; 0x30
 8002c04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002c08:	e007      	b.n	8002c1a <USER_SPI_ioctl+0x162>
 8002c0a:	20ff      	movs	r0, #255	; 0xff
 8002c0c:	f7ff fc18 	bl	8002440 <xchg_spi>
 8002c10:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c14:	3b01      	subs	r3, #1
 8002c16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002c1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f3      	bne.n	8002c0a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002c22:	7dbb      	ldrb	r3, [r7, #22]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2310      	movs	r3, #16
 8002c2c:	fa03 f202 	lsl.w	r2, r3, r2
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002c3a:	e098      	b.n	8002d6e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2009      	movs	r0, #9
 8002c40:	f7ff fcf3 	bl	800262a <send_cmd>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 8091 	bne.w	8002d6e <USER_SPI_ioctl+0x2b6>
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	2110      	movs	r1, #16
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fc8e 	bl	8002574 <rcvr_datablock>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8087 	beq.w	8002d6e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002c60:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <USER_SPI_ioctl+0x2dc>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002c6c:	7dbb      	ldrb	r3, [r7, #22]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002c74:	7dfa      	ldrb	r2, [r7, #23]
 8002c76:	09d2      	lsrs	r2, r2, #7
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	7e7b      	ldrb	r3, [r7, #25]
 8002c80:	099b      	lsrs	r3, r3, #6
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e013      	b.n	8002cba <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002c92:	7dbb      	ldrb	r3, [r7, #22]
 8002c94:	109b      	asrs	r3, r3, #2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	7dfa      	ldrb	r2, [r7, #23]
 8002ca0:	00d2      	lsls	r2, r2, #3
 8002ca2:	f002 0218 	and.w	r2, r2, #24
 8002ca6:	7df9      	ldrb	r1, [r7, #23]
 8002ca8:	0949      	lsrs	r1, r1, #5
 8002caa:	b2c9      	uxtb	r1, r1
 8002cac:	440a      	add	r2, r1
 8002cae:	3201      	adds	r2, #1
 8002cb0:	fb02 f303 	mul.w	r3, r2, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002cc0:	e055      	b.n	8002d6e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002cc2:	4b34      	ldr	r3, [pc, #208]	; (8002d94 <USER_SPI_ioctl+0x2dc>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	f003 0306 	and.w	r3, r3, #6
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d051      	beq.n	8002d72 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002cce:	f107 020c 	add.w	r2, r7, #12
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	210b      	movs	r1, #11
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff feee 	bl	8002ab8 <USER_SPI_ioctl>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d149      	bne.n	8002d76 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002ce2:	7b3b      	ldrb	r3, [r7, #12]
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d104      	bne.n	8002cf6 <USER_SPI_ioctl+0x23e>
 8002cec:	7dbb      	ldrb	r3, [r7, #22]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d041      	beq.n	8002d7a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	623b      	str	r3, [r7, #32]
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <USER_SPI_ioctl+0x2dc>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d105      	bne.n	8002d1e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	025b      	lsls	r3, r3, #9
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	025b      	lsls	r3, r3, #9
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d20:	2020      	movs	r0, #32
 8002d22:	f7ff fc82 	bl	800262a <send_cmd>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d128      	bne.n	8002d7e <USER_SPI_ioctl+0x2c6>
 8002d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d2e:	2021      	movs	r0, #33	; 0x21
 8002d30:	f7ff fc7b 	bl	800262a <send_cmd>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d121      	bne.n	8002d7e <USER_SPI_ioctl+0x2c6>
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2026      	movs	r0, #38	; 0x26
 8002d3e:	f7ff fc74 	bl	800262a <send_cmd>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11a      	bne.n	8002d7e <USER_SPI_ioctl+0x2c6>
 8002d48:	f247 5030 	movw	r0, #30000	; 0x7530
 8002d4c:	f7ff fbc3 	bl	80024d6 <wait_ready>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d013      	beq.n	8002d7e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002d5c:	e00f      	b.n	8002d7e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002d5e:	2304      	movs	r3, #4
 8002d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002d64:	e00c      	b.n	8002d80 <USER_SPI_ioctl+0x2c8>
		break;
 8002d66:	bf00      	nop
 8002d68:	e00a      	b.n	8002d80 <USER_SPI_ioctl+0x2c8>
		break;
 8002d6a:	bf00      	nop
 8002d6c:	e008      	b.n	8002d80 <USER_SPI_ioctl+0x2c8>
		break;
 8002d6e:	bf00      	nop
 8002d70:	e006      	b.n	8002d80 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002d72:	bf00      	nop
 8002d74:	e004      	b.n	8002d80 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002d76:	bf00      	nop
 8002d78:	e002      	b.n	8002d80 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002d7a:	bf00      	nop
 8002d7c:	e000      	b.n	8002d80 <USER_SPI_ioctl+0x2c8>
		break;
 8002d7e:	bf00      	nop
	}

	despiselect();
 8002d80:	f7ff fbcc 	bl	800251c <despiselect>

	return res;
 8002d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3730      	adds	r7, #48	; 0x30
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000028 	.word	0x20000028
 8002d94:	20000077 	.word	0x20000077

08002d98 <Reset_Handler>:
 8002d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd0 <LoopFillZerobss+0x14>
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	e003      	b.n	8002da8 <LoopCopyDataInit>

08002da0 <CopyDataInit>:
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <LoopFillZerobss+0x18>)
 8002da2:	585b      	ldr	r3, [r3, r1]
 8002da4:	5043      	str	r3, [r0, r1]
 8002da6:	3104      	adds	r1, #4

08002da8 <LoopCopyDataInit>:
 8002da8:	480b      	ldr	r0, [pc, #44]	; (8002dd8 <LoopFillZerobss+0x1c>)
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <LoopFillZerobss+0x20>)
 8002dac:	1842      	adds	r2, r0, r1
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d3f6      	bcc.n	8002da0 <CopyDataInit>
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <LoopFillZerobss+0x24>)
 8002db4:	e002      	b.n	8002dbc <LoopFillZerobss>

08002db6 <FillZerobss>:
 8002db6:	2300      	movs	r3, #0
 8002db8:	f842 3b04 	str.w	r3, [r2], #4

08002dbc <LoopFillZerobss>:
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <LoopFillZerobss+0x28>)
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3f9      	bcc.n	8002db6 <FillZerobss>
 8002dc2:	f7ff fafd 	bl	80023c0 <SystemInit>
 8002dc6:	f006 f949 	bl	800905c <__libc_init_array>
 8002dca:	f7fe f8bb 	bl	8000f44 <main>
 8002dce:	4770      	bx	lr
 8002dd0:	20020000 	.word	0x20020000
 8002dd4:	08009494 	.word	0x08009494
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	20000048 	.word	0x20000048
 8002de0:	20000048 	.word	0x20000048
 8002de4:	20000ef8 	.word	0x20000ef8

08002de8 <ADC_IRQHandler>:
 8002de8:	e7fe      	b.n	8002de8 <ADC_IRQHandler>
	...

08002dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <HAL_Init+0x40>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <HAL_Init+0x40>)
 8002df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_Init+0x40>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <HAL_Init+0x40>)
 8002e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <HAL_Init+0x40>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <HAL_Init+0x40>)
 8002e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e14:	2003      	movs	r0, #3
 8002e16:	f000 f94d 	bl	80030b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f000 f808 	bl	8002e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e20:	f7fe feae 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023c00 	.word	0x40023c00

08002e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_InitTick+0x54>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_InitTick+0x58>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	4619      	mov	r1, r3
 8002e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f965 	bl	800311e <HAL_SYSTICK_Config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e00e      	b.n	8002e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b0f      	cmp	r3, #15
 8002e62:	d80a      	bhi.n	8002e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e64:	2200      	movs	r2, #0
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e6c:	f000 f92d 	bl	80030ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e70:	4a06      	ldr	r2, [pc, #24]	; (8002e8c <HAL_InitTick+0x5c>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e000      	b.n	8002e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000024 	.word	0x20000024
 8002e88:	20000030 	.word	0x20000030
 8002e8c:	2000002c 	.word	0x2000002c

08002e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_IncTick+0x20>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_IncTick+0x24>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <HAL_IncTick+0x24>)
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000030 	.word	0x20000030
 8002eb4:	20000a8c 	.word	0x20000a8c

08002eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return uwTick;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_GetTick+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000a8c 	.word	0x20000a8c

08002ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff ffee 	bl	8002eb8 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee8:	d005      	beq.n	8002ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_Delay+0x40>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ef6:	bf00      	nop
 8002ef8:	f7ff ffde 	bl	8002eb8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d8f7      	bhi.n	8002ef8 <HAL_Delay+0x28>
  {
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000030 	.word	0x20000030

08002f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	60d3      	str	r3, [r2, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <__NVIC_GetPriorityGrouping+0x18>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 0307 	and.w	r3, r3, #7
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	db0b      	blt.n	8002fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4907      	ldr	r1, [pc, #28]	; (8002fb0 <__NVIC_EnableIRQ+0x38>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2001      	movs	r0, #1
 8002f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000e100 	.word	0xe000e100

08002fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	db0a      	blt.n	8002fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	490c      	ldr	r1, [pc, #48]	; (8003000 <__NVIC_SetPriority+0x4c>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fdc:	e00a      	b.n	8002ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4908      	ldr	r1, [pc, #32]	; (8003004 <__NVIC_SetPriority+0x50>)
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	3b04      	subs	r3, #4
 8002fec:	0112      	lsls	r2, r2, #4
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	761a      	strb	r2, [r3, #24]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f1c3 0307 	rsb	r3, r3, #7
 8003022:	2b04      	cmp	r3, #4
 8003024:	bf28      	it	cs
 8003026:	2304      	movcs	r3, #4
 8003028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3304      	adds	r3, #4
 800302e:	2b06      	cmp	r3, #6
 8003030:	d902      	bls.n	8003038 <NVIC_EncodePriority+0x30>
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3b03      	subs	r3, #3
 8003036:	e000      	b.n	800303a <NVIC_EncodePriority+0x32>
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	401a      	ands	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	43d9      	mvns	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	4313      	orrs	r3, r2
         );
}
 8003062:	4618      	mov	r0, r3
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003080:	d301      	bcc.n	8003086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003082:	2301      	movs	r3, #1
 8003084:	e00f      	b.n	80030a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <SysTick_Config+0x40>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308e:	210f      	movs	r1, #15
 8003090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003094:	f7ff ff8e 	bl	8002fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <SysTick_Config+0x40>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <SysTick_Config+0x40>)
 80030a0:	2207      	movs	r2, #7
 80030a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	e000e010 	.word	0xe000e010

080030b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ff29 	bl	8002f14 <__NVIC_SetPriorityGrouping>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030dc:	f7ff ff3e 	bl	8002f5c <__NVIC_GetPriorityGrouping>
 80030e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	6978      	ldr	r0, [r7, #20]
 80030e8:	f7ff ff8e 	bl	8003008 <NVIC_EncodePriority>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff5d 	bl	8002fb4 <__NVIC_SetPriority>
}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff31 	bl	8002f78 <__NVIC_EnableIRQ>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff ffa2 	bl	8003070 <SysTick_Config>
 800312c:	4603      	mov	r3, r0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff feb8 	bl	8002eb8 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e099      	b.n	8003288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003174:	e00f      	b.n	8003196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003176:	f7ff fe9f 	bl	8002eb8 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b05      	cmp	r3, #5
 8003182:	d908      	bls.n	8003196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2203      	movs	r2, #3
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e078      	b.n	8003288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e8      	bne.n	8003176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4b38      	ldr	r3, [pc, #224]	; (8003290 <HAL_DMA_Init+0x158>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d107      	bne.n	8003200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	4313      	orrs	r3, r2
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0307 	bic.w	r3, r3, #7
 8003216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b04      	cmp	r3, #4
 8003228:	d117      	bne.n	800325a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00e      	beq.n	800325a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fb0d 	bl	800385c <DMA_CheckFifoParam>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2240      	movs	r2, #64	; 0x40
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003256:	2301      	movs	r3, #1
 8003258:	e016      	b.n	8003288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fac4 	bl	80037f0 <DMA_CalcBaseAndBitshift>
 8003268:	4603      	mov	r3, r0
 800326a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	223f      	movs	r2, #63	; 0x3f
 8003272:	409a      	lsls	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	f010803f 	.word	0xf010803f

08003294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_DMA_Start_IT+0x26>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e040      	b.n	800333c <HAL_DMA_Start_IT+0xa8>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d12f      	bne.n	800332e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fa56 	bl	8003794 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	223f      	movs	r2, #63	; 0x3f
 80032ee:	409a      	lsls	r2, r3
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0216 	orr.w	r2, r2, #22
 8003302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0208 	orr.w	r2, r2, #8
 800331a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e005      	b.n	800333a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800333a:	7dfb      	ldrb	r3, [r7, #23]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003352:	f7ff fdb1 	bl	8002eb8 <HAL_GetTick>
 8003356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d008      	beq.n	8003376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e052      	b.n	800341c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0216 	bic.w	r2, r2, #22
 8003384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <HAL_DMA_Abort+0x62>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0208 	bic.w	r2, r2, #8
 80033b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c6:	e013      	b.n	80033f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033c8:	f7ff fd76 	bl	8002eb8 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d90c      	bls.n	80033f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2203      	movs	r2, #3
 80033e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e015      	b.n	800341c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e4      	bne.n	80033c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	223f      	movs	r2, #63	; 0x3f
 8003404:	409a      	lsls	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d004      	beq.n	8003442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00c      	b.n	800345c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2205      	movs	r2, #5
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003474:	4b92      	ldr	r3, [pc, #584]	; (80036c0 <HAL_DMA_IRQHandler+0x258>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a92      	ldr	r2, [pc, #584]	; (80036c4 <HAL_DMA_IRQHandler+0x25c>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0a9b      	lsrs	r3, r3, #10
 8003480:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003486:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	2208      	movs	r2, #8
 8003494:	409a      	lsls	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01a      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0204 	bic.w	r2, r2, #4
 80034ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	2208      	movs	r2, #8
 80034c2:	409a      	lsls	r2, r3
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	2201      	movs	r2, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d012      	beq.n	800350a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	2201      	movs	r2, #1
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	f043 0202 	orr.w	r2, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	2204      	movs	r2, #4
 8003510:	409a      	lsls	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d012      	beq.n	8003540 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00b      	beq.n	8003540 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	2204      	movs	r2, #4
 800352e:	409a      	lsls	r2, r3
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f043 0204 	orr.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	2210      	movs	r2, #16
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d043      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d03c      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	2210      	movs	r2, #16
 8003564:	409a      	lsls	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d018      	beq.n	80035aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d024      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3
 8003596:	e01f      	b.n	80035d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01b      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
 80035a8:	e016      	b.n	80035d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d107      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0208 	bic.w	r2, r2, #8
 80035c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035dc:	2220      	movs	r2, #32
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 808e 	beq.w	8003706 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8086 	beq.w	8003706 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	2220      	movs	r2, #32
 8003600:	409a      	lsls	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b05      	cmp	r3, #5
 8003610:	d136      	bne.n	8003680 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0216 	bic.w	r2, r2, #22
 8003620:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003630:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <HAL_DMA_IRQHandler+0x1da>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0208 	bic.w	r2, r2, #8
 8003650:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	223f      	movs	r2, #63	; 0x3f
 8003658:	409a      	lsls	r2, r3
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003672:	2b00      	cmp	r3, #0
 8003674:	d07d      	beq.n	8003772 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
        }
        return;
 800367e:	e078      	b.n	8003772 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d01c      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d108      	bne.n	80036ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d030      	beq.n	8003706 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
 80036ac:	e02b      	b.n	8003706 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d027      	beq.n	8003706 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
 80036be:	e022      	b.n	8003706 <HAL_DMA_IRQHandler+0x29e>
 80036c0:	20000024 	.word	0x20000024
 80036c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0210 	bic.w	r2, r2, #16
 80036e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	2b00      	cmp	r3, #0
 800370c:	d032      	beq.n	8003774 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d022      	beq.n	8003760 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2205      	movs	r2, #5
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	3301      	adds	r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	429a      	cmp	r2, r3
 800373c:	d307      	bcc.n	800374e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f2      	bne.n	8003732 <HAL_DMA_IRQHandler+0x2ca>
 800374c:	e000      	b.n	8003750 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800374e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
 8003770:	e000      	b.n	8003774 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003772:	bf00      	nop
    }
  }
}
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop

0800377c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d108      	bne.n	80037d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037d2:	e007      	b.n	80037e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	60da      	str	r2, [r3, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	3b10      	subs	r3, #16
 8003800:	4a14      	ldr	r2, [pc, #80]	; (8003854 <DMA_CalcBaseAndBitshift+0x64>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800380a:	4a13      	ldr	r2, [pc, #76]	; (8003858 <DMA_CalcBaseAndBitshift+0x68>)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d909      	bls.n	8003832 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	1d1a      	adds	r2, r3, #4
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	659a      	str	r2, [r3, #88]	; 0x58
 8003830:	e007      	b.n	8003842 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800383a:	f023 0303 	bic.w	r3, r3, #3
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	aaaaaaab 	.word	0xaaaaaaab
 8003858:	080093fc 	.word	0x080093fc

0800385c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d11f      	bne.n	80038b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d855      	bhi.n	8003928 <DMA_CheckFifoParam+0xcc>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <DMA_CheckFifoParam+0x28>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	08003895 	.word	0x08003895
 8003888:	080038a7 	.word	0x080038a7
 800388c:	08003895 	.word	0x08003895
 8003890:	08003929 	.word	0x08003929
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d045      	beq.n	800392c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a4:	e042      	b.n	800392c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038ae:	d13f      	bne.n	8003930 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b4:	e03c      	b.n	8003930 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038be:	d121      	bne.n	8003904 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d836      	bhi.n	8003934 <DMA_CheckFifoParam+0xd8>
 80038c6:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <DMA_CheckFifoParam+0x70>)
 80038c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038cc:	080038dd 	.word	0x080038dd
 80038d0:	080038e3 	.word	0x080038e3
 80038d4:	080038dd 	.word	0x080038dd
 80038d8:	080038f5 	.word	0x080038f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      break;
 80038e0:	e02f      	b.n	8003942 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d024      	beq.n	8003938 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f2:	e021      	b.n	8003938 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038fc:	d11e      	bne.n	800393c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003902:	e01b      	b.n	800393c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d902      	bls.n	8003910 <DMA_CheckFifoParam+0xb4>
 800390a:	2b03      	cmp	r3, #3
 800390c:	d003      	beq.n	8003916 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800390e:	e018      	b.n	8003942 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      break;
 8003914:	e015      	b.n	8003942 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00e      	beq.n	8003940 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
      break;
 8003926:	e00b      	b.n	8003940 <DMA_CheckFifoParam+0xe4>
      break;
 8003928:	bf00      	nop
 800392a:	e00a      	b.n	8003942 <DMA_CheckFifoParam+0xe6>
      break;
 800392c:	bf00      	nop
 800392e:	e008      	b.n	8003942 <DMA_CheckFifoParam+0xe6>
      break;
 8003930:	bf00      	nop
 8003932:	e006      	b.n	8003942 <DMA_CheckFifoParam+0xe6>
      break;
 8003934:	bf00      	nop
 8003936:	e004      	b.n	8003942 <DMA_CheckFifoParam+0xe6>
      break;
 8003938:	bf00      	nop
 800393a:	e002      	b.n	8003942 <DMA_CheckFifoParam+0xe6>
      break;   
 800393c:	bf00      	nop
 800393e:	e000      	b.n	8003942 <DMA_CheckFifoParam+0xe6>
      break;
 8003940:	bf00      	nop
    }
  } 
  
  return status; 
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	; 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e165      	b.n	8003c38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800396c:	2201      	movs	r2, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	429a      	cmp	r2, r3
 8003986:	f040 8154 	bne.w	8003c32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d00b      	beq.n	80039aa <HAL_GPIO_Init+0x5a>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d007      	beq.n	80039aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800399e:	2b11      	cmp	r3, #17
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b12      	cmp	r3, #18
 80039a8:	d130      	bne.n	8003a0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	2203      	movs	r2, #3
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039e0:	2201      	movs	r2, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 0201 	and.w	r2, r3, #1
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0xfc>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b12      	cmp	r3, #18
 8003a4a:	d123      	bne.n	8003a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	220f      	movs	r2, #15
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	08da      	lsrs	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3208      	adds	r2, #8
 8003a8e:	69b9      	ldr	r1, [r7, #24]
 8003a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0203 	and.w	r2, r3, #3
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80ae 	beq.w	8003c32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	4b5c      	ldr	r3, [pc, #368]	; (8003c4c <HAL_GPIO_Init+0x2fc>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	4a5b      	ldr	r2, [pc, #364]	; (8003c4c <HAL_GPIO_Init+0x2fc>)
 8003ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae6:	4b59      	ldr	r3, [pc, #356]	; (8003c4c <HAL_GPIO_Init+0x2fc>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003af2:	4a57      	ldr	r2, [pc, #348]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	3302      	adds	r3, #2
 8003afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	220f      	movs	r2, #15
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4e      	ldr	r2, [pc, #312]	; (8003c54 <HAL_GPIO_Init+0x304>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d025      	beq.n	8003b6a <HAL_GPIO_Init+0x21a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4d      	ldr	r2, [pc, #308]	; (8003c58 <HAL_GPIO_Init+0x308>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01f      	beq.n	8003b66 <HAL_GPIO_Init+0x216>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a4c      	ldr	r2, [pc, #304]	; (8003c5c <HAL_GPIO_Init+0x30c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d019      	beq.n	8003b62 <HAL_GPIO_Init+0x212>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4b      	ldr	r2, [pc, #300]	; (8003c60 <HAL_GPIO_Init+0x310>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_GPIO_Init+0x20e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a4a      	ldr	r2, [pc, #296]	; (8003c64 <HAL_GPIO_Init+0x314>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00d      	beq.n	8003b5a <HAL_GPIO_Init+0x20a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a49      	ldr	r2, [pc, #292]	; (8003c68 <HAL_GPIO_Init+0x318>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <HAL_GPIO_Init+0x206>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a48      	ldr	r2, [pc, #288]	; (8003c6c <HAL_GPIO_Init+0x31c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <HAL_GPIO_Init+0x202>
 8003b4e:	2306      	movs	r3, #6
 8003b50:	e00c      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b52:	2307      	movs	r3, #7
 8003b54:	e00a      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b56:	2305      	movs	r3, #5
 8003b58:	e008      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	e006      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e004      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e002      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	f002 0203 	and.w	r2, r2, #3
 8003b72:	0092      	lsls	r2, r2, #2
 8003b74:	4093      	lsls	r3, r2
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b7c:	4934      	ldr	r1, [pc, #208]	; (8003c50 <HAL_GPIO_Init+0x300>)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	3302      	adds	r3, #2
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b8a:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <HAL_GPIO_Init+0x320>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bae:	4a30      	ldr	r2, [pc, #192]	; (8003c70 <HAL_GPIO_Init+0x320>)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <HAL_GPIO_Init+0x320>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bd8:	4a25      	ldr	r2, [pc, #148]	; (8003c70 <HAL_GPIO_Init+0x320>)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <HAL_GPIO_Init+0x320>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c02:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_GPIO_Init+0x320>)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_GPIO_Init+0x320>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c2c:	4a10      	ldr	r2, [pc, #64]	; (8003c70 <HAL_GPIO_Init+0x320>)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3301      	adds	r3, #1
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2b0f      	cmp	r3, #15
 8003c3c:	f67f ae96 	bls.w	800396c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c40:	bf00      	nop
 8003c42:	3724      	adds	r7, #36	; 0x24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40013800 	.word	0x40013800
 8003c54:	40020000 	.word	0x40020000
 8003c58:	40020400 	.word	0x40020400
 8003c5c:	40020800 	.word	0x40020800
 8003c60:	40020c00 	.word	0x40020c00
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40021400 	.word	0x40021400
 8003c6c:	40021800 	.word	0x40021800
 8003c70:	40013c00 	.word	0x40013c00

08003c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	887b      	ldrh	r3, [r7, #2]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	e001      	b.n	8003c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	807b      	strh	r3, [r7, #2]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cb4:	787b      	ldrb	r3, [r7, #1]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cba:	887a      	ldrh	r2, [r7, #2]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cc0:	e003      	b.n	8003cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cc2:	887b      	ldrh	r3, [r7, #2]
 8003cc4:	041a      	lsls	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	619a      	str	r2, [r3, #24]
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <HAL_PWREx_EnableOverDrive+0x90>)
 8003cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_PWREx_EnableOverDrive+0x90>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_PWREx_EnableOverDrive+0x94>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d04:	f7ff f8d8 	bl	8002eb8 <HAL_GetTick>
 8003d08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d0a:	e009      	b.n	8003d20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d0c:	f7ff f8d4 	bl	8002eb8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d1a:	d901      	bls.n	8003d20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e01f      	b.n	8003d60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2c:	d1ee      	bne.n	8003d0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d34:	f7ff f8c0 	bl	8002eb8 <HAL_GetTick>
 8003d38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d3a:	e009      	b.n	8003d50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d3c:	f7ff f8bc 	bl	8002eb8 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d4a:	d901      	bls.n	8003d50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e007      	b.n	8003d60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d5c:	d1ee      	bne.n	8003d3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	420e0040 	.word	0x420e0040
 8003d70:	40007000 	.word	0x40007000
 8003d74:	420e0044 	.word	0x420e0044

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0cc      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b68      	ldr	r3, [pc, #416]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d90c      	bls.n	8003db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b65      	ldr	r3, [pc, #404]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b63      	ldr	r3, [pc, #396]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0b8      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dcc:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a58      	ldr	r2, [pc, #352]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de4:	4b53      	ldr	r3, [pc, #332]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a52      	ldr	r2, [pc, #328]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df0:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	494d      	ldr	r1, [pc, #308]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d044      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b47      	ldr	r3, [pc, #284]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d119      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e07f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e36:	4b3f      	ldr	r3, [pc, #252]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e06f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e46:	4b3b      	ldr	r3, [pc, #236]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e067      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e56:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 0203 	bic.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4934      	ldr	r1, [pc, #208]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e68:	f7ff f826 	bl	8002eb8 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e70:	f7ff f822 	bl	8002eb8 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e04f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 020c 	and.w	r2, r3, #12
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1eb      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d20c      	bcs.n	8003ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e032      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ecc:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4916      	ldr	r1, [pc, #88]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	490e      	ldr	r1, [pc, #56]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003efe:	f000 f855 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8003f02:	4601      	mov	r1, r0
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
 8003f12:	fa21 f303 	lsr.w	r3, r1, r3
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe ff86 	bl	8002e30 <HAL_InitTick>

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023c00 	.word	0x40023c00
 8003f34:	40023800 	.word	0x40023800
 8003f38:	080093e4 	.word	0x080093e4
 8003f3c:	20000024 	.word	0x20000024
 8003f40:	2000002c 	.word	0x2000002c

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000024 	.word	0x20000024

08003f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f60:	f7ff fff0 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f64:	4601      	mov	r1, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0a9b      	lsrs	r3, r3, #10
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4a03      	ldr	r2, [pc, #12]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	080093f4 	.word	0x080093f4

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f88:	f7ff ffdc 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4601      	mov	r1, r0
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0b5b      	lsrs	r3, r3, #13
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4a03      	ldr	r2, [pc, #12]	; (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9a:	5cd3      	ldrb	r3, [r2, r3]
 8003f9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	080093f4 	.word	0x080093f4

08003fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc6:	4bc6      	ldr	r3, [pc, #792]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b0c      	cmp	r3, #12
 8003fd0:	f200 817e 	bhi.w	80042d0 <HAL_RCC_GetSysClockFreq+0x324>
 8003fd4:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <HAL_RCC_GetSysClockFreq+0x30>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	080042d1 	.word	0x080042d1
 8003fe4:	080042d1 	.word	0x080042d1
 8003fe8:	080042d1 	.word	0x080042d1
 8003fec:	08004017 	.word	0x08004017
 8003ff0:	080042d1 	.word	0x080042d1
 8003ff4:	080042d1 	.word	0x080042d1
 8003ff8:	080042d1 	.word	0x080042d1
 8003ffc:	0800401d 	.word	0x0800401d
 8004000:	080042d1 	.word	0x080042d1
 8004004:	080042d1 	.word	0x080042d1
 8004008:	080042d1 	.word	0x080042d1
 800400c:	08004179 	.word	0x08004179
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004010:	4bb4      	ldr	r3, [pc, #720]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x338>)
 8004012:	613b      	str	r3, [r7, #16]
       break;
 8004014:	e15f      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004016:	4bb4      	ldr	r3, [pc, #720]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004018:	613b      	str	r3, [r7, #16]
      break;
 800401a:	e15c      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800401c:	4bb0      	ldr	r3, [pc, #704]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004024:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004026:	4bae      	ldr	r3, [pc, #696]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d04a      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004032:	4bab      	ldr	r3, [pc, #684]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	f04f 0400 	mov.w	r4, #0
 800403c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	ea03 0501 	and.w	r5, r3, r1
 8004048:	ea04 0602 	and.w	r6, r4, r2
 800404c:	4629      	mov	r1, r5
 800404e:	4632      	mov	r2, r6
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	f04f 0400 	mov.w	r4, #0
 8004058:	0154      	lsls	r4, r2, #5
 800405a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800405e:	014b      	lsls	r3, r1, #5
 8004060:	4619      	mov	r1, r3
 8004062:	4622      	mov	r2, r4
 8004064:	1b49      	subs	r1, r1, r5
 8004066:	eb62 0206 	sbc.w	r2, r2, r6
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	f04f 0400 	mov.w	r4, #0
 8004072:	0194      	lsls	r4, r2, #6
 8004074:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004078:	018b      	lsls	r3, r1, #6
 800407a:	1a5b      	subs	r3, r3, r1
 800407c:	eb64 0402 	sbc.w	r4, r4, r2
 8004080:	f04f 0100 	mov.w	r1, #0
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	00e2      	lsls	r2, r4, #3
 800408a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800408e:	00d9      	lsls	r1, r3, #3
 8004090:	460b      	mov	r3, r1
 8004092:	4614      	mov	r4, r2
 8004094:	195b      	adds	r3, r3, r5
 8004096:	eb44 0406 	adc.w	r4, r4, r6
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	0262      	lsls	r2, r4, #9
 80040a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040a8:	0259      	lsls	r1, r3, #9
 80040aa:	460b      	mov	r3, r1
 80040ac:	4614      	mov	r4, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	4621      	mov	r1, r4
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f04f 0400 	mov.w	r4, #0
 80040b8:	461a      	mov	r2, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	f7fc f8a2 	bl	8000204 <__aeabi_uldivmod>
 80040c0:	4603      	mov	r3, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	e049      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c8:	4b85      	ldr	r3, [pc, #532]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	f04f 0400 	mov.w	r4, #0
 80040d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	ea03 0501 	and.w	r5, r3, r1
 80040de:	ea04 0602 	and.w	r6, r4, r2
 80040e2:	4629      	mov	r1, r5
 80040e4:	4632      	mov	r2, r6
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	f04f 0400 	mov.w	r4, #0
 80040ee:	0154      	lsls	r4, r2, #5
 80040f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040f4:	014b      	lsls	r3, r1, #5
 80040f6:	4619      	mov	r1, r3
 80040f8:	4622      	mov	r2, r4
 80040fa:	1b49      	subs	r1, r1, r5
 80040fc:	eb62 0206 	sbc.w	r2, r2, r6
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	f04f 0400 	mov.w	r4, #0
 8004108:	0194      	lsls	r4, r2, #6
 800410a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800410e:	018b      	lsls	r3, r1, #6
 8004110:	1a5b      	subs	r3, r3, r1
 8004112:	eb64 0402 	sbc.w	r4, r4, r2
 8004116:	f04f 0100 	mov.w	r1, #0
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	00e2      	lsls	r2, r4, #3
 8004120:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004124:	00d9      	lsls	r1, r3, #3
 8004126:	460b      	mov	r3, r1
 8004128:	4614      	mov	r4, r2
 800412a:	195b      	adds	r3, r3, r5
 800412c:	eb44 0406 	adc.w	r4, r4, r6
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	02a2      	lsls	r2, r4, #10
 800413a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800413e:	0299      	lsls	r1, r3, #10
 8004140:	460b      	mov	r3, r1
 8004142:	4614      	mov	r4, r2
 8004144:	4618      	mov	r0, r3
 8004146:	4621      	mov	r1, r4
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f04f 0400 	mov.w	r4, #0
 800414e:	461a      	mov	r2, r3
 8004150:	4623      	mov	r3, r4
 8004152:	f7fc f857 	bl	8000204 <__aeabi_uldivmod>
 8004156:	4603      	mov	r3, r0
 8004158:	460c      	mov	r4, r1
 800415a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800415c:	4b60      	ldr	r3, [pc, #384]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	3301      	adds	r3, #1
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	613b      	str	r3, [r7, #16]
      break;
 8004176:	e0ae      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004178:	4b59      	ldr	r3, [pc, #356]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004180:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004182:	4b57      	ldr	r3, [pc, #348]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d04a      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418e:	4b54      	ldr	r3, [pc, #336]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	f04f 0400 	mov.w	r4, #0
 8004198:	f240 11ff 	movw	r1, #511	; 0x1ff
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	ea03 0501 	and.w	r5, r3, r1
 80041a4:	ea04 0602 	and.w	r6, r4, r2
 80041a8:	4629      	mov	r1, r5
 80041aa:	4632      	mov	r2, r6
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	f04f 0400 	mov.w	r4, #0
 80041b4:	0154      	lsls	r4, r2, #5
 80041b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041ba:	014b      	lsls	r3, r1, #5
 80041bc:	4619      	mov	r1, r3
 80041be:	4622      	mov	r2, r4
 80041c0:	1b49      	subs	r1, r1, r5
 80041c2:	eb62 0206 	sbc.w	r2, r2, r6
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	f04f 0400 	mov.w	r4, #0
 80041ce:	0194      	lsls	r4, r2, #6
 80041d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041d4:	018b      	lsls	r3, r1, #6
 80041d6:	1a5b      	subs	r3, r3, r1
 80041d8:	eb64 0402 	sbc.w	r4, r4, r2
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	00e2      	lsls	r2, r4, #3
 80041e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041ea:	00d9      	lsls	r1, r3, #3
 80041ec:	460b      	mov	r3, r1
 80041ee:	4614      	mov	r4, r2
 80041f0:	195b      	adds	r3, r3, r5
 80041f2:	eb44 0406 	adc.w	r4, r4, r6
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	0262      	lsls	r2, r4, #9
 8004200:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004204:	0259      	lsls	r1, r3, #9
 8004206:	460b      	mov	r3, r1
 8004208:	4614      	mov	r4, r2
 800420a:	4618      	mov	r0, r3
 800420c:	4621      	mov	r1, r4
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f04f 0400 	mov.w	r4, #0
 8004214:	461a      	mov	r2, r3
 8004216:	4623      	mov	r3, r4
 8004218:	f7fb fff4 	bl	8000204 <__aeabi_uldivmod>
 800421c:	4603      	mov	r3, r0
 800421e:	460c      	mov	r4, r1
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e049      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004224:	4b2e      	ldr	r3, [pc, #184]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	099b      	lsrs	r3, r3, #6
 800422a:	f04f 0400 	mov.w	r4, #0
 800422e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	ea03 0501 	and.w	r5, r3, r1
 800423a:	ea04 0602 	and.w	r6, r4, r2
 800423e:	4629      	mov	r1, r5
 8004240:	4632      	mov	r2, r6
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	f04f 0400 	mov.w	r4, #0
 800424a:	0154      	lsls	r4, r2, #5
 800424c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004250:	014b      	lsls	r3, r1, #5
 8004252:	4619      	mov	r1, r3
 8004254:	4622      	mov	r2, r4
 8004256:	1b49      	subs	r1, r1, r5
 8004258:	eb62 0206 	sbc.w	r2, r2, r6
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	f04f 0400 	mov.w	r4, #0
 8004264:	0194      	lsls	r4, r2, #6
 8004266:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800426a:	018b      	lsls	r3, r1, #6
 800426c:	1a5b      	subs	r3, r3, r1
 800426e:	eb64 0402 	sbc.w	r4, r4, r2
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	00e2      	lsls	r2, r4, #3
 800427c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004280:	00d9      	lsls	r1, r3, #3
 8004282:	460b      	mov	r3, r1
 8004284:	4614      	mov	r4, r2
 8004286:	195b      	adds	r3, r3, r5
 8004288:	eb44 0406 	adc.w	r4, r4, r6
 800428c:	f04f 0100 	mov.w	r1, #0
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	02a2      	lsls	r2, r4, #10
 8004296:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800429a:	0299      	lsls	r1, r3, #10
 800429c:	460b      	mov	r3, r1
 800429e:	4614      	mov	r4, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	4621      	mov	r1, r4
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f04f 0400 	mov.w	r4, #0
 80042aa:	461a      	mov	r2, r3
 80042ac:	4623      	mov	r3, r4
 80042ae:	f7fb ffa9 	bl	8000204 <__aeabi_uldivmod>
 80042b2:	4603      	mov	r3, r0
 80042b4:	460c      	mov	r4, r1
 80042b6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0f1b      	lsrs	r3, r3, #28
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	613b      	str	r3, [r7, #16]
      break;
 80042ce:	e002      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x338>)
 80042d2:	613b      	str	r3, [r7, #16]
      break;
 80042d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d6:	693b      	ldr	r3, [r7, #16]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	007a1200 	.word	0x007a1200

080042ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8083 	beq.w	800440c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004306:	4b95      	ldr	r3, [pc, #596]	; (800455c <HAL_RCC_OscConfig+0x270>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b04      	cmp	r3, #4
 8004310:	d019      	beq.n	8004346 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004312:	4b92      	ldr	r3, [pc, #584]	; (800455c <HAL_RCC_OscConfig+0x270>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800431a:	2b08      	cmp	r3, #8
 800431c:	d106      	bne.n	800432c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800431e:	4b8f      	ldr	r3, [pc, #572]	; (800455c <HAL_RCC_OscConfig+0x270>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800432a:	d00c      	beq.n	8004346 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800432c:	4b8b      	ldr	r3, [pc, #556]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004334:	2b0c      	cmp	r3, #12
 8004336:	d112      	bne.n	800435e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004338:	4b88      	ldr	r3, [pc, #544]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004344:	d10b      	bne.n	800435e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004346:	4b85      	ldr	r3, [pc, #532]	; (800455c <HAL_RCC_OscConfig+0x270>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d05b      	beq.n	800440a <HAL_RCC_OscConfig+0x11e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d157      	bne.n	800440a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e216      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x8a>
 8004368:	4b7c      	ldr	r3, [pc, #496]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a7b      	ldr	r2, [pc, #492]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800436e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e01d      	b.n	80043b2 <HAL_RCC_OscConfig+0xc6>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800437e:	d10c      	bne.n	800439a <HAL_RCC_OscConfig+0xae>
 8004380:	4b76      	ldr	r3, [pc, #472]	; (800455c <HAL_RCC_OscConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a75      	ldr	r2, [pc, #468]	; (800455c <HAL_RCC_OscConfig+0x270>)
 8004386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b73      	ldr	r3, [pc, #460]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a72      	ldr	r2, [pc, #456]	; (800455c <HAL_RCC_OscConfig+0x270>)
 8004392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	e00b      	b.n	80043b2 <HAL_RCC_OscConfig+0xc6>
 800439a:	4b70      	ldr	r3, [pc, #448]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a6f      	ldr	r2, [pc, #444]	; (800455c <HAL_RCC_OscConfig+0x270>)
 80043a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b6d      	ldr	r3, [pc, #436]	; (800455c <HAL_RCC_OscConfig+0x270>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6c      	ldr	r2, [pc, #432]	; (800455c <HAL_RCC_OscConfig+0x270>)
 80043ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d013      	beq.n	80043e2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fe fd7d 	bl	8002eb8 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c2:	f7fe fd79 	bl	8002eb8 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b64      	cmp	r3, #100	; 0x64
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e1db      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d4:	4b61      	ldr	r3, [pc, #388]	; (800455c <HAL_RCC_OscConfig+0x270>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0xd6>
 80043e0:	e014      	b.n	800440c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fe fd69 	bl	8002eb8 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ea:	f7fe fd65 	bl	8002eb8 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b64      	cmp	r3, #100	; 0x64
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e1c7      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fc:	4b57      	ldr	r3, [pc, #348]	; (800455c <HAL_RCC_OscConfig+0x270>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f0      	bne.n	80043ea <HAL_RCC_OscConfig+0xfe>
 8004408:	e000      	b.n	800440c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800440a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d06f      	beq.n	80044f8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004418:	4b50      	ldr	r3, [pc, #320]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b00      	cmp	r3, #0
 8004422:	d017      	beq.n	8004454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004424:	4b4d      	ldr	r3, [pc, #308]	; (800455c <HAL_RCC_OscConfig+0x270>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800442c:	2b08      	cmp	r3, #8
 800442e:	d105      	bne.n	800443c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004430:	4b4a      	ldr	r3, [pc, #296]	; (800455c <HAL_RCC_OscConfig+0x270>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800443c:	4b47      	ldr	r3, [pc, #284]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d11c      	bne.n	8004482 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004448:	4b44      	ldr	r3, [pc, #272]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d116      	bne.n	8004482 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004454:	4b41      	ldr	r3, [pc, #260]	; (800455c <HAL_RCC_OscConfig+0x270>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_OscConfig+0x180>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d001      	beq.n	800446c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e18f      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446c:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	4938      	ldr	r1, [pc, #224]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800447c:	4313      	orrs	r3, r2
 800447e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004480:	e03a      	b.n	80044f8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d020      	beq.n	80044cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800448a:	4b35      	ldr	r3, [pc, #212]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fe fd12 	bl	8002eb8 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004498:	f7fe fd0e 	bl	8002eb8 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e170      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044aa:	4b2c      	ldr	r3, [pc, #176]	; (800455c <HAL_RCC_OscConfig+0x270>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b6:	4b29      	ldr	r3, [pc, #164]	; (800455c <HAL_RCC_OscConfig+0x270>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4925      	ldr	r1, [pc, #148]	; (800455c <HAL_RCC_OscConfig+0x270>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
 80044ca:	e015      	b.n	80044f8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044cc:	4b24      	ldr	r3, [pc, #144]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d2:	f7fe fcf1 	bl	8002eb8 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044da:	f7fe fced 	bl	8002eb8 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e14f      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ec:	4b1b      	ldr	r3, [pc, #108]	; (800455c <HAL_RCC_OscConfig+0x270>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f0      	bne.n	80044da <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d037      	beq.n	8004574 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d016      	beq.n	800453a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800450c:	4b15      	ldr	r3, [pc, #84]	; (8004564 <HAL_RCC_OscConfig+0x278>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004512:	f7fe fcd1 	bl	8002eb8 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800451a:	f7fe fccd 	bl	8002eb8 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e12f      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_OscConfig+0x270>)
 800452e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x22e>
 8004538:	e01c      	b.n	8004574 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_RCC_OscConfig+0x278>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fe fcba 	bl	8002eb8 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004546:	e00f      	b.n	8004568 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004548:	f7fe fcb6 	bl	8002eb8 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d908      	bls.n	8004568 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e118      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	42470000 	.word	0x42470000
 8004564:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004568:	4b8a      	ldr	r3, [pc, #552]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 800456a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e9      	bne.n	8004548 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8097 	beq.w	80046b0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004586:	4b83      	ldr	r3, [pc, #524]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	4b7f      	ldr	r3, [pc, #508]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	4a7e      	ldr	r2, [pc, #504]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 800459c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a0:	6413      	str	r3, [r2, #64]	; 0x40
 80045a2:	4b7c      	ldr	r3, [pc, #496]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045ae:	2301      	movs	r3, #1
 80045b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b2:	4b79      	ldr	r3, [pc, #484]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d118      	bne.n	80045f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045be:	4b76      	ldr	r3, [pc, #472]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a75      	ldr	r2, [pc, #468]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80045c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ca:	f7fe fc75 	bl	8002eb8 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d2:	f7fe fc71 	bl	8002eb8 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e0d3      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e4:	4b6c      	ldr	r3, [pc, #432]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d106      	bne.n	8004606 <HAL_RCC_OscConfig+0x31a>
 80045f8:	4b66      	ldr	r3, [pc, #408]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	4a65      	ldr	r2, [pc, #404]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6713      	str	r3, [r2, #112]	; 0x70
 8004604:	e01c      	b.n	8004640 <HAL_RCC_OscConfig+0x354>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b05      	cmp	r3, #5
 800460c:	d10c      	bne.n	8004628 <HAL_RCC_OscConfig+0x33c>
 800460e:	4b61      	ldr	r3, [pc, #388]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	4a60      	ldr	r2, [pc, #384]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 8004614:	f043 0304 	orr.w	r3, r3, #4
 8004618:	6713      	str	r3, [r2, #112]	; 0x70
 800461a:	4b5e      	ldr	r3, [pc, #376]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	4a5d      	ldr	r2, [pc, #372]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6713      	str	r3, [r2, #112]	; 0x70
 8004626:	e00b      	b.n	8004640 <HAL_RCC_OscConfig+0x354>
 8004628:	4b5a      	ldr	r3, [pc, #360]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	4a59      	ldr	r2, [pc, #356]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	6713      	str	r3, [r2, #112]	; 0x70
 8004634:	4b57      	ldr	r3, [pc, #348]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a56      	ldr	r2, [pc, #344]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 800463a:	f023 0304 	bic.w	r3, r3, #4
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d015      	beq.n	8004674 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fe fc36 	bl	8002eb8 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464e:	e00a      	b.n	8004666 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004650:	f7fe fc32 	bl	8002eb8 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f241 3288 	movw	r2, #5000	; 0x1388
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e092      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004666:	4b4b      	ldr	r3, [pc, #300]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0ee      	beq.n	8004650 <HAL_RCC_OscConfig+0x364>
 8004672:	e014      	b.n	800469e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004674:	f7fe fc20 	bl	8002eb8 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467a:	e00a      	b.n	8004692 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800467c:	f7fe fc1c 	bl	8002eb8 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e07c      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004692:	4b40      	ldr	r3, [pc, #256]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1ee      	bne.n	800467c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800469e:	7dfb      	ldrb	r3, [r7, #23]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d105      	bne.n	80046b0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a4:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	4a3a      	ldr	r2, [pc, #232]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 80046aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d068      	beq.n	800478a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b8:	4b36      	ldr	r3, [pc, #216]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 030c 	and.w	r3, r3, #12
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d060      	beq.n	8004786 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d145      	bne.n	8004758 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046cc:	4b33      	ldr	r3, [pc, #204]	; (800479c <HAL_RCC_OscConfig+0x4b0>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fe fbf1 	bl	8002eb8 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046da:	f7fe fbed 	bl	8002eb8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e04f      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ec:	4b29      	ldr	r3, [pc, #164]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f0      	bne.n	80046da <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	019b      	lsls	r3, r3, #6
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	3b01      	subs	r3, #1
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	061b      	lsls	r3, r3, #24
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	071b      	lsls	r3, r3, #28
 8004724:	491b      	ldr	r1, [pc, #108]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800472a:	4b1c      	ldr	r3, [pc, #112]	; (800479c <HAL_RCC_OscConfig+0x4b0>)
 800472c:	2201      	movs	r2, #1
 800472e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fe fbc2 	bl	8002eb8 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004738:	f7fe fbbe 	bl	8002eb8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e020      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x44c>
 8004756:	e018      	b.n	800478a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <HAL_RCC_OscConfig+0x4b0>)
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fe fbab 	bl	8002eb8 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004766:	f7fe fba7 	bl	8002eb8 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e009      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_RCC_OscConfig+0x4a8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f0      	bne.n	8004766 <HAL_RCC_OscConfig+0x47a>
 8004784:	e001      	b.n	800478a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40023800 	.word	0x40023800
 8004798:	40007000 	.word	0x40007000
 800479c:	42470060 	.word	0x42470060

080047a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e056      	b.n	8004860 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d106      	bne.n	80047d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7fd f9ff 	bl	8001bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2202      	movs	r2, #2
 80047d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	ea42 0103 	orr.w	r1, r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	0c1b      	lsrs	r3, r3, #16
 8004830:	f003 0104 	and.w	r1, r3, #4
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_SPI_Transmit+0x22>
 8004886:	2302      	movs	r3, #2
 8004888:	e11e      	b.n	8004ac8 <HAL_SPI_Transmit+0x260>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004892:	f7fe fb11 	bl	8002eb8 <HAL_GetTick>
 8004896:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d002      	beq.n	80048ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
 80048aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048ac:	e103      	b.n	8004ab6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_Transmit+0x52>
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048be:	e0fa      	b.n	8004ab6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2203      	movs	r2, #3
 80048c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	88fa      	ldrh	r2, [r7, #6]
 80048d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	88fa      	ldrh	r2, [r7, #6]
 80048de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004906:	d107      	bne.n	8004918 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004916:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d007      	beq.n	8004936 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004934:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493e:	d14b      	bne.n	80049d8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_SPI_Transmit+0xe6>
 8004948:	8afb      	ldrh	r3, [r7, #22]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d13e      	bne.n	80049cc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	881a      	ldrh	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	1c9a      	adds	r2, r3, #2
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004972:	e02b      	b.n	80049cc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b02      	cmp	r3, #2
 8004980:	d112      	bne.n	80049a8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	881a      	ldrh	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	1c9a      	adds	r2, r3, #2
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80049a6:	e011      	b.n	80049cc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049a8:	f7fe fa86 	bl	8002eb8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d803      	bhi.n	80049c0 <HAL_SPI_Transmit+0x158>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049be:	d102      	bne.n	80049c6 <HAL_SPI_Transmit+0x15e>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049ca:	e074      	b.n	8004ab6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ce      	bne.n	8004974 <HAL_SPI_Transmit+0x10c>
 80049d6:	e04c      	b.n	8004a72 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_SPI_Transmit+0x17e>
 80049e0:	8afb      	ldrh	r3, [r7, #22]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d140      	bne.n	8004a68 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	330c      	adds	r3, #12
 80049f0:	7812      	ldrb	r2, [r2, #0]
 80049f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a0c:	e02c      	b.n	8004a68 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d113      	bne.n	8004a44 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	7812      	ldrb	r2, [r2, #0]
 8004a28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a42:	e011      	b.n	8004a68 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a44:	f7fe fa38 	bl	8002eb8 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d803      	bhi.n	8004a5c <HAL_SPI_Transmit+0x1f4>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a5a:	d102      	bne.n	8004a62 <HAL_SPI_Transmit+0x1fa>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a66:	e026      	b.n	8004ab6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1cd      	bne.n	8004a0e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fcc4 	bl	8005404 <SPI_EndRxTxTransaction>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e000      	b.n	8004ab6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004ab4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ac6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aec:	d112      	bne.n	8004b14 <HAL_SPI_Receive+0x44>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10e      	bne.n	8004b14 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2204      	movs	r2, #4
 8004afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f8e9 	bl	8004ce2 <HAL_SPI_TransmitReceive>
 8004b10:	4603      	mov	r3, r0
 8004b12:	e0e2      	b.n	8004cda <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_SPI_Receive+0x52>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e0db      	b.n	8004cda <HAL_SPI_Receive+0x20a>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b2a:	f7fe f9c5 	bl	8002eb8 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d002      	beq.n	8004b42 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b40:	e0c2      	b.n	8004cc8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <HAL_SPI_Receive+0x7e>
 8004b48:	88fb      	ldrh	r3, [r7, #6]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b52:	e0b9      	b.n	8004cc8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2204      	movs	r2, #4
 8004b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b9a:	d107      	bne.n	8004bac <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004baa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d007      	beq.n	8004bca <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d162      	bne.n	8004c98 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bd2:	e02e      	b.n	8004c32 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d115      	bne.n	8004c0e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f103 020c 	add.w	r2, r3, #12
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	7812      	ldrb	r2, [r2, #0]
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c0c:	e011      	b.n	8004c32 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c0e:	f7fe f953 	bl	8002eb8 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d803      	bhi.n	8004c26 <HAL_SPI_Receive+0x156>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c24:	d102      	bne.n	8004c2c <HAL_SPI_Receive+0x15c>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c30:	e04a      	b.n	8004cc8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1cb      	bne.n	8004bd4 <HAL_SPI_Receive+0x104>
 8004c3c:	e031      	b.n	8004ca2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d113      	bne.n	8004c74 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	b292      	uxth	r2, r2
 8004c58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	1c9a      	adds	r2, r3, #2
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c72:	e011      	b.n	8004c98 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c74:	f7fe f920 	bl	8002eb8 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d803      	bhi.n	8004c8c <HAL_SPI_Receive+0x1bc>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c8a:	d102      	bne.n	8004c92 <HAL_SPI_Receive+0x1c2>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d102      	bne.n	8004c98 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c96:	e017      	b.n	8004cc8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1cd      	bne.n	8004c3e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	6839      	ldr	r1, [r7, #0]
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 fb46 	bl	8005338 <SPI_EndRxTransaction>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
 8004cc4:	e000      	b.n	8004cc8 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004cc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b08c      	sub	sp, #48	; 0x30
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
 8004cee:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x26>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e18a      	b.n	800501e <HAL_SPI_TransmitReceive+0x33c>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d10:	f7fe f8d2 	bl	8002eb8 <HAL_GetTick>
 8004d14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d26:	887b      	ldrh	r3, [r7, #2]
 8004d28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d00f      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0x70>
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d38:	d107      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x68>
 8004d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d003      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d50:	e15b      	b.n	800500a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x82>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x82>
 8004d5e:	887b      	ldrh	r3, [r7, #2]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d6a:	e14e      	b.n	800500a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d003      	beq.n	8004d80 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2205      	movs	r2, #5
 8004d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	887a      	ldrh	r2, [r7, #2]
 8004d90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	887a      	ldrh	r2, [r7, #2]
 8004d96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	887a      	ldrh	r2, [r7, #2]
 8004da2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	887a      	ldrh	r2, [r7, #2]
 8004da8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d007      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ddc:	d178      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_SPI_TransmitReceive+0x10a>
 8004de6:	8b7b      	ldrh	r3, [r7, #26]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d166      	bne.n	8004eba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	881a      	ldrh	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	1c9a      	adds	r2, r3, #2
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e10:	e053      	b.n	8004eba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d11b      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x176>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d016      	beq.n	8004e58 <HAL_SPI_TransmitReceive+0x176>
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d113      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	881a      	ldrh	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	1c9a      	adds	r2, r3, #2
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d119      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x1b8>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d014      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	b292      	uxth	r2, r2
 8004e7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	1c9a      	adds	r2, r3, #2
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e96:	2301      	movs	r3, #1
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e9a:	f7fe f80d 	bl	8002eb8 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d807      	bhi.n	8004eba <HAL_SPI_TransmitReceive+0x1d8>
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eb0:	d003      	beq.n	8004eba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004eb8:	e0a7      	b.n	800500a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1a6      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x130>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1a1      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x130>
 8004ece:	e07c      	b.n	8004fca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_SPI_TransmitReceive+0x1fc>
 8004ed8:	8b7b      	ldrh	r3, [r7, #26]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d16b      	bne.n	8004fb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	7812      	ldrb	r2, [r2, #0]
 8004eea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f04:	e057      	b.n	8004fb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d11c      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x26c>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d017      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x26c>
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d114      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	7812      	ldrb	r2, [r2, #0]
 8004f30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d119      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x2ae>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d014      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f90:	f7fd ff92 	bl	8002eb8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d803      	bhi.n	8004fa8 <HAL_SPI_TransmitReceive+0x2c6>
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa6:	d102      	bne.n	8004fae <HAL_SPI_TransmitReceive+0x2cc>
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fb4:	e029      	b.n	800500a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1a2      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x224>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d19d      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fa18 	bl	8005404 <SPI_EndRxTxTransaction>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d006      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fe6:	e010      	b.n	800500a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	e000      	b.n	800500a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005008:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800501a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800501e:	4618      	mov	r0, r3
 8005020:	3730      	adds	r7, #48	; 0x30
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	099b      	lsrs	r3, r3, #6
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10f      	bne.n	800506c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	099b      	lsrs	r3, r3, #6
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d004      	beq.n	800506c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
    return;
 800506a:	e0d8      	b.n	800521e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <HAL_SPI_IRQHandler+0x66>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	09db      	lsrs	r3, r3, #7
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
    return;
 800508c:	e0c7      	b.n	800521e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10c      	bne.n	80050b4 <HAL_SPI_IRQHandler+0x8c>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	099b      	lsrs	r3, r3, #6
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	0a1b      	lsrs	r3, r3, #8
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 80b5 	beq.w	800521e <HAL_SPI_IRQHandler+0x1f6>
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80ae 	beq.w	800521e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	099b      	lsrs	r3, r3, #6
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d023      	beq.n	8005116 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d011      	beq.n	80050fe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050de:	f043 0204 	orr.w	r2, r3, #4
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	e00b      	b.n	8005116 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	693b      	ldr	r3, [r7, #16]
        return;
 8005114:	e083      	b.n	800521e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	095b      	lsrs	r3, r3, #5
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d014      	beq.n	800514c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	f043 0201 	orr.w	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00c      	beq.n	8005172 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515c:	f043 0208 	orr.w	r2, r3, #8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005164:	2300      	movs	r3, #0
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	60bb      	str	r3, [r7, #8]
 8005170:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	2b00      	cmp	r3, #0
 8005178:	d050      	beq.n	800521c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005188:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <HAL_SPI_IRQHandler+0x17e>
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d034      	beq.n	8005210 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0203 	bic.w	r2, r2, #3
 80051b4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d011      	beq.n	80051e2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c2:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_SPI_IRQHandler+0x1fc>)
 80051c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe f92a 	bl	8003424 <HAL_DMA_Abort_IT>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d016      	beq.n	8005218 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ee:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <HAL_SPI_IRQHandler+0x1fc>)
 80051f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe f914 	bl	8003424 <HAL_DMA_Abort_IT>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800520e:	e003      	b.n	8005218 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f809 	bl	8005228 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005216:	e000      	b.n	800521a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005218:	bf00      	nop
    return;
 800521a:	bf00      	nop
 800521c:	bf00      	nop
  }
}
 800521e:	3720      	adds	r7, #32
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	0800523d 	.word	0x0800523d

08005228 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff ffe6 	bl	8005228 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005274:	e04c      	b.n	8005310 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527c:	d048      	beq.n	8005310 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800527e:	f7fd fe1b 	bl	8002eb8 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d902      	bls.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x30>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d13d      	bne.n	8005310 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ac:	d111      	bne.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b6:	d004      	beq.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c0:	d107      	bne.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052da:	d10f      	bne.n	80052fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e00f      	b.n	8005330 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	429a      	cmp	r2, r3
 800531e:	bf0c      	ite	eq
 8005320:	2301      	moveq	r3, #1
 8005322:	2300      	movne	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	429a      	cmp	r2, r3
 800532c:	d1a3      	bne.n	8005276 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534c:	d111      	bne.n	8005372 <SPI_EndRxTransaction+0x3a>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005356:	d004      	beq.n	8005362 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005360:	d107      	bne.n	8005372 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005370:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800537a:	d12a      	bne.n	80053d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005384:	d012      	beq.n	80053ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2200      	movs	r2, #0
 800538e:	2180      	movs	r1, #128	; 0x80
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7ff ff67 	bl	8005264 <SPI_WaitFlagStateUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d02d      	beq.n	80053f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a0:	f043 0220 	orr.w	r2, r3, #32
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e026      	b.n	80053fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2200      	movs	r2, #0
 80053b4:	2101      	movs	r1, #1
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff ff54 	bl	8005264 <SPI_WaitFlagStateUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01a      	beq.n	80053f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	f043 0220 	orr.w	r2, r3, #32
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e013      	b.n	80053fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2200      	movs	r2, #0
 80053da:	2101      	movs	r1, #1
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f7ff ff41 	bl	8005264 <SPI_WaitFlagStateUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d007      	beq.n	80053f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	f043 0220 	orr.w	r2, r3, #32
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e000      	b.n	80053fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af02      	add	r7, sp, #8
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005410:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <SPI_EndRxTxTransaction+0x7c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <SPI_EndRxTxTransaction+0x80>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	0d5b      	lsrs	r3, r3, #21
 800541c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005420:	fb02 f303 	mul.w	r3, r2, r3
 8005424:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800542e:	d112      	bne.n	8005456 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2200      	movs	r2, #0
 8005438:	2180      	movs	r1, #128	; 0x80
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff ff12 	bl	8005264 <SPI_WaitFlagStateUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e00f      	b.n	8005476 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	3b01      	subs	r3, #1
 8005460:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546c:	2b80      	cmp	r3, #128	; 0x80
 800546e:	d0f2      	beq.n	8005456 <SPI_EndRxTxTransaction+0x52>
 8005470:	e000      	b.n	8005474 <SPI_EndRxTxTransaction+0x70>
        break;
 8005472:	bf00      	nop
  }

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000024 	.word	0x20000024
 8005484:	165e9f81 	.word	0x165e9f81

08005488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e01d      	b.n	80054d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fc fc46 	bl	8001d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f000 f988 	bl	80057dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0201 	orr.w	r2, r2, #1
 80054f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b06      	cmp	r3, #6
 8005506:	d007      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6a1a      	ldr	r2, [r3, #32]
 8005544:	f241 1311 	movw	r3, #4369	; 0x1111
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10f      	bne.n	800556e <HAL_TIM_Base_Stop_IT+0x48>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	f240 4344 	movw	r3, #1092	; 0x444
 8005558:	4013      	ands	r3, r2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d107      	bne.n	800556e <HAL_TIM_Base_Stop_IT+0x48>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b02      	cmp	r3, #2
 8005590:	d122      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b02      	cmp	r3, #2
 800559e:	d11b      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0202 	mvn.w	r2, #2
 80055a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f8ee 	bl	80057a0 <HAL_TIM_IC_CaptureCallback>
 80055c4:	e005      	b.n	80055d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f8e0 	bl	800578c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f8f1 	bl	80057b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d122      	bne.n	800562c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d11b      	bne.n	800562c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0204 	mvn.w	r2, #4
 80055fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2202      	movs	r2, #2
 8005602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f8c4 	bl	80057a0 <HAL_TIM_IC_CaptureCallback>
 8005618:	e005      	b.n	8005626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f8b6 	bl	800578c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f8c7 	bl	80057b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b08      	cmp	r3, #8
 8005638:	d122      	bne.n	8005680 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b08      	cmp	r3, #8
 8005646:	d11b      	bne.n	8005680 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0208 	mvn.w	r2, #8
 8005650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2204      	movs	r2, #4
 8005656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f89a 	bl	80057a0 <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f88c 	bl	800578c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f89d 	bl	80057b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b10      	cmp	r3, #16
 800568c:	d122      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b10      	cmp	r3, #16
 800569a:	d11b      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0210 	mvn.w	r2, #16
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2208      	movs	r2, #8
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f870 	bl	80057a0 <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f862 	bl	800578c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f873 	bl	80057b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d10e      	bne.n	8005700 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d107      	bne.n	8005700 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0201 	mvn.w	r2, #1
 80056f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fc f91a 	bl	8001934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570a:	2b80      	cmp	r3, #128	; 0x80
 800570c:	d10e      	bne.n	800572c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005718:	2b80      	cmp	r3, #128	; 0x80
 800571a:	d107      	bne.n	800572c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f97e 	bl	8005a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b40      	cmp	r3, #64	; 0x40
 8005738:	d10e      	bne.n	8005758 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d107      	bne.n	8005758 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f838 	bl	80057c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b20      	cmp	r3, #32
 8005764:	d10e      	bne.n	8005784 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b20      	cmp	r3, #32
 8005772:	d107      	bne.n	8005784 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0220 	mvn.w	r2, #32
 800577c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f948 	bl	8005a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a40      	ldr	r2, [pc, #256]	; (80058f0 <TIM_Base_SetConfig+0x114>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d013      	beq.n	800581c <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fa:	d00f      	beq.n	800581c <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a3d      	ldr	r2, [pc, #244]	; (80058f4 <TIM_Base_SetConfig+0x118>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00b      	beq.n	800581c <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a3c      	ldr	r2, [pc, #240]	; (80058f8 <TIM_Base_SetConfig+0x11c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d007      	beq.n	800581c <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3b      	ldr	r2, [pc, #236]	; (80058fc <TIM_Base_SetConfig+0x120>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a3a      	ldr	r2, [pc, #232]	; (8005900 <TIM_Base_SetConfig+0x124>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d108      	bne.n	800582e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a2f      	ldr	r2, [pc, #188]	; (80058f0 <TIM_Base_SetConfig+0x114>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d02b      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583c:	d027      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2c      	ldr	r2, [pc, #176]	; (80058f4 <TIM_Base_SetConfig+0x118>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d023      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2b      	ldr	r2, [pc, #172]	; (80058f8 <TIM_Base_SetConfig+0x11c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01f      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <TIM_Base_SetConfig+0x120>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01b      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a29      	ldr	r2, [pc, #164]	; (8005900 <TIM_Base_SetConfig+0x124>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d017      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a28      	ldr	r2, [pc, #160]	; (8005904 <TIM_Base_SetConfig+0x128>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a27      	ldr	r2, [pc, #156]	; (8005908 <TIM_Base_SetConfig+0x12c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00f      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a26      	ldr	r2, [pc, #152]	; (800590c <TIM_Base_SetConfig+0x130>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00b      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a25      	ldr	r2, [pc, #148]	; (8005910 <TIM_Base_SetConfig+0x134>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d007      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a24      	ldr	r2, [pc, #144]	; (8005914 <TIM_Base_SetConfig+0x138>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a23      	ldr	r2, [pc, #140]	; (8005918 <TIM_Base_SetConfig+0x13c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d108      	bne.n	80058a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <TIM_Base_SetConfig+0x114>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_Base_SetConfig+0xf8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0c      	ldr	r2, [pc, #48]	; (8005900 <TIM_Base_SetConfig+0x124>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d103      	bne.n	80058dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	615a      	str	r2, [r3, #20]
}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40010000 	.word	0x40010000
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	40000c00 	.word	0x40000c00
 8005900:	40010400 	.word	0x40010400
 8005904:	40014000 	.word	0x40014000
 8005908:	40014400 	.word	0x40014400
 800590c:	40014800 	.word	0x40014800
 8005910:	40001800 	.word	0x40001800
 8005914:	40001c00 	.word	0x40001c00
 8005918:	40002000 	.word	0x40002000

0800591c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005930:	2302      	movs	r3, #2
 8005932:	e05a      	b.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d022      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005980:	d01d      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d018      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00e      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d009      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d10c      	bne.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40010400 	.word	0x40010400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40001800 	.word	0x40001800

08005a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e03f      	b.n	8005ace <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fc f9d0 	bl	8001e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	; 0x24
 8005a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fc0d 	bl	80062a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d166      	bne.n	8005bc0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_UART_Receive_DMA+0x26>
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e05f      	b.n	8005bc2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_UART_Receive_DMA+0x38>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e058      	b.n	8005bc2 <HAL_UART_Receive_DMA+0xea>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	88fa      	ldrh	r2, [r7, #6]
 8005b22:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2222      	movs	r2, #34	; 0x22
 8005b2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b36:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <HAL_UART_Receive_DMA+0xf4>)
 8005b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3e:	4a24      	ldr	r2, [pc, #144]	; (8005bd0 <HAL_UART_Receive_DMA+0xf8>)
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	4a23      	ldr	r2, [pc, #140]	; (8005bd4 <HAL_UART_Receive_DMA+0xfc>)
 8005b48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4e:	2200      	movs	r2, #0
 8005b50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005b52:	f107 0308 	add.w	r3, r7, #8
 8005b56:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4619      	mov	r1, r3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	f7fd fb93 	bl	8003294 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695a      	ldr	r2, [r3, #20]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bba:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e000      	b.n	8005bc2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
  }
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	08005f19 	.word	0x08005f19
 8005bd0:	08005f81 	.word	0x08005f81
 8005bd4:	08005f9d 	.word	0x08005f9d

08005bd8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005bee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0201 	bic.w	r2, r2, #1
 8005bfe:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0a:	2b80      	cmp	r3, #128	; 0x80
 8005c0c:	d124      	bne.n	8005c58 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c1c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d018      	beq.n	8005c58 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fd fb86 	bl	8003344 <HAL_DMA_Abort>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fd fd9a 	bl	800377c <HAL_DMA_GetError>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d104      	bne.n	8005c58 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2210      	movs	r2, #16
 8005c52:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e03d      	b.n	8005cd4 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d124      	bne.n	8005cb0 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695a      	ldr	r2, [r3, #20]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c74:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d018      	beq.n	8005cb0 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c82:	2200      	movs	r2, #0
 8005c84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fd fb5a 	bl	8003344 <HAL_DMA_Abort>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fd fd6e 	bl	800377c <HAL_DMA_GetError>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d104      	bne.n	8005cb0 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2210      	movs	r2, #16
 8005caa:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e011      	b.n	8005cd4 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10d      	bne.n	8005d2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_UART_IRQHandler+0x52>
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fa38 	bl	800619c <UART_Receive_IT>
      return;
 8005d2c:	e0d1      	b.n	8005ed2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80b0 	beq.w	8005e96 <HAL_UART_IRQHandler+0x1ba>
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d105      	bne.n	8005d4c <HAL_UART_IRQHandler+0x70>
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80a5 	beq.w	8005e96 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_UART_IRQHandler+0x90>
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d005      	beq.n	8005d6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d64:	f043 0201 	orr.w	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_UART_IRQHandler+0xb0>
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d84:	f043 0202 	orr.w	r2, r3, #2
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_UART_IRQHandler+0xd0>
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da4:	f043 0204 	orr.w	r2, r3, #4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00f      	beq.n	8005dd6 <HAL_UART_IRQHandler+0xfa>
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d104      	bne.n	8005dca <HAL_UART_IRQHandler+0xee>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	f043 0208 	orr.w	r2, r3, #8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d078      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <HAL_UART_IRQHandler+0x11c>
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9d2 	bl	800619c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	bf0c      	ite	eq
 8005e06:	2301      	moveq	r3, #1
 8005e08:	2300      	movne	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d102      	bne.n	8005e20 <HAL_UART_IRQHandler+0x144>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d031      	beq.n	8005e84 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f91b 	bl	800605c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d123      	bne.n	8005e7c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695a      	ldr	r2, [r3, #20]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d013      	beq.n	8005e74 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <HAL_UART_IRQHandler+0x1fc>)
 8005e52:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fd fae3 	bl	8003424 <HAL_DMA_Abort_IT>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d016      	beq.n	8005e92 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e72:	e00e      	b.n	8005e92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f845 	bl	8005f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7a:	e00a      	b.n	8005e92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f841 	bl	8005f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e82:	e006      	b.n	8005e92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f83d 	bl	8005f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005e90:	e01e      	b.n	8005ed0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e92:	bf00      	nop
    return;
 8005e94:	e01c      	b.n	8005ed0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d008      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x1d6>
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f908 	bl	80060c0 <UART_Transmit_IT>
    return;
 8005eb0:	e00f      	b.n	8005ed2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x1f6>
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f950 	bl	800616c <UART_EndTransmit_IT>
    return;
 8005ecc:	bf00      	nop
 8005ece:	e000      	b.n	8005ed2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005ed0:	bf00      	nop
  }
}
 8005ed2:	3720      	adds	r7, #32
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	08006099 	.word	0x08006099

08005edc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d11e      	bne.n	8005f72 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f48:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695a      	ldr	r2, [r3, #20]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f68:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7fb fc76 	bl	8001864 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7ff ffae 	bl	8005ef0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	2b80      	cmp	r3, #128	; 0x80
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b21      	cmp	r3, #33	; 0x21
 8005fce:	d108      	bne.n	8005fe2 <UART_DMAError+0x46>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005fdc:	68b8      	ldr	r0, [r7, #8]
 8005fde:	f000 f827 	bl	8006030 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	bf0c      	ite	eq
 8005ff0:	2301      	moveq	r3, #1
 8005ff2:	2300      	movne	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b22      	cmp	r3, #34	; 0x22
 8006002:	d108      	bne.n	8006016 <UART_DMAError+0x7a>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2200      	movs	r2, #0
 800600e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006010:	68b8      	ldr	r0, [r7, #8]
 8006012:	f000 f823 	bl	800605c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	f043 0210 	orr.w	r2, r3, #16
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006022:	68b8      	ldr	r0, [r7, #8]
 8006024:	f7ff ff6e 	bl	8005f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006046:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006072:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695a      	ldr	r2, [r3, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0201 	bic.w	r2, r2, #1
 8006082:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff ff26 	bl	8005f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b21      	cmp	r3, #33	; 0x21
 80060d2:	d144      	bne.n	800615e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060dc:	d11a      	bne.n	8006114 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d105      	bne.n	8006108 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	1c9a      	adds	r2, r3, #2
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	621a      	str	r2, [r3, #32]
 8006106:	e00e      	b.n	8006126 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	621a      	str	r2, [r3, #32]
 8006112:	e008      	b.n	8006126 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	1c59      	adds	r1, r3, #1
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6211      	str	r1, [r2, #32]
 800611e:	781a      	ldrb	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29b      	uxth	r3, r3
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	4619      	mov	r1, r3
 8006134:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10f      	bne.n	800615a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006148:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006158:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e000      	b.n	8006160 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800615e:	2302      	movs	r3, #2
  }
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006182:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff fea5 	bl	8005edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b22      	cmp	r3, #34	; 0x22
 80061ae:	d171      	bne.n	8006294 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b8:	d123      	bne.n	8006202 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10e      	bne.n	80061e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	1c9a      	adds	r2, r3, #2
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28
 80061e4:	e029      	b.n	800623a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28
 8006200:	e01b      	b.n	800623a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6858      	ldr	r0, [r3, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	1c59      	adds	r1, r3, #1
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6291      	str	r1, [r2, #40]	; 0x28
 800621a:	b2c2      	uxtb	r2, r0
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e00c      	b.n	800623a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	b2da      	uxtb	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	1c58      	adds	r0, r3, #1
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	6288      	str	r0, [r1, #40]	; 0x28
 8006232:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	b29b      	uxth	r3, r3
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	4619      	mov	r1, r3
 8006248:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800624a:	2b00      	cmp	r3, #0
 800624c:	d120      	bne.n	8006290 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0220 	bic.w	r2, r2, #32
 800625c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800626c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fb faec 	bl	8001864 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	e002      	b.n	8006296 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	e000      	b.n	8006296 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006294:	2302      	movs	r3, #2
  }
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	b085      	sub	sp, #20
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	431a      	orrs	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80062e2:	f023 030c 	bic.w	r3, r3, #12
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	68f9      	ldr	r1, [r7, #12]
 80062ec:	430b      	orrs	r3, r1
 80062ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800630e:	f040 818b 	bne.w	8006628 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4ac1      	ldr	r2, [pc, #772]	; (800661c <UART_SetConfig+0x37c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d005      	beq.n	8006328 <UART_SetConfig+0x88>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4abf      	ldr	r2, [pc, #764]	; (8006620 <UART_SetConfig+0x380>)
 8006322:	4293      	cmp	r3, r2
 8006324:	f040 80bd 	bne.w	80064a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006328:	f7fd fe2c 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 800632c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	461d      	mov	r5, r3
 8006332:	f04f 0600 	mov.w	r6, #0
 8006336:	46a8      	mov	r8, r5
 8006338:	46b1      	mov	r9, r6
 800633a:	eb18 0308 	adds.w	r3, r8, r8
 800633e:	eb49 0409 	adc.w	r4, r9, r9
 8006342:	4698      	mov	r8, r3
 8006344:	46a1      	mov	r9, r4
 8006346:	eb18 0805 	adds.w	r8, r8, r5
 800634a:	eb49 0906 	adc.w	r9, r9, r6
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800635a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800635e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006362:	4688      	mov	r8, r1
 8006364:	4691      	mov	r9, r2
 8006366:	eb18 0005 	adds.w	r0, r8, r5
 800636a:	eb49 0106 	adc.w	r1, r9, r6
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	461d      	mov	r5, r3
 8006374:	f04f 0600 	mov.w	r6, #0
 8006378:	196b      	adds	r3, r5, r5
 800637a:	eb46 0406 	adc.w	r4, r6, r6
 800637e:	461a      	mov	r2, r3
 8006380:	4623      	mov	r3, r4
 8006382:	f7f9 ff3f 	bl	8000204 <__aeabi_uldivmod>
 8006386:	4603      	mov	r3, r0
 8006388:	460c      	mov	r4, r1
 800638a:	461a      	mov	r2, r3
 800638c:	4ba5      	ldr	r3, [pc, #660]	; (8006624 <UART_SetConfig+0x384>)
 800638e:	fba3 2302 	umull	r2, r3, r3, r2
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	461d      	mov	r5, r3
 800639c:	f04f 0600 	mov.w	r6, #0
 80063a0:	46a9      	mov	r9, r5
 80063a2:	46b2      	mov	sl, r6
 80063a4:	eb19 0309 	adds.w	r3, r9, r9
 80063a8:	eb4a 040a 	adc.w	r4, sl, sl
 80063ac:	4699      	mov	r9, r3
 80063ae:	46a2      	mov	sl, r4
 80063b0:	eb19 0905 	adds.w	r9, r9, r5
 80063b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80063b8:	f04f 0100 	mov.w	r1, #0
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063cc:	4689      	mov	r9, r1
 80063ce:	4692      	mov	sl, r2
 80063d0:	eb19 0005 	adds.w	r0, r9, r5
 80063d4:	eb4a 0106 	adc.w	r1, sl, r6
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	461d      	mov	r5, r3
 80063de:	f04f 0600 	mov.w	r6, #0
 80063e2:	196b      	adds	r3, r5, r5
 80063e4:	eb46 0406 	adc.w	r4, r6, r6
 80063e8:	461a      	mov	r2, r3
 80063ea:	4623      	mov	r3, r4
 80063ec:	f7f9 ff0a 	bl	8000204 <__aeabi_uldivmod>
 80063f0:	4603      	mov	r3, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	461a      	mov	r2, r3
 80063f6:	4b8b      	ldr	r3, [pc, #556]	; (8006624 <UART_SetConfig+0x384>)
 80063f8:	fba3 1302 	umull	r1, r3, r3, r2
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	2164      	movs	r1, #100	; 0x64
 8006400:	fb01 f303 	mul.w	r3, r1, r3
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	3332      	adds	r3, #50	; 0x32
 800640a:	4a86      	ldr	r2, [pc, #536]	; (8006624 <UART_SetConfig+0x384>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006418:	4498      	add	r8, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	461d      	mov	r5, r3
 800641e:	f04f 0600 	mov.w	r6, #0
 8006422:	46a9      	mov	r9, r5
 8006424:	46b2      	mov	sl, r6
 8006426:	eb19 0309 	adds.w	r3, r9, r9
 800642a:	eb4a 040a 	adc.w	r4, sl, sl
 800642e:	4699      	mov	r9, r3
 8006430:	46a2      	mov	sl, r4
 8006432:	eb19 0905 	adds.w	r9, r9, r5
 8006436:	eb4a 0a06 	adc.w	sl, sl, r6
 800643a:	f04f 0100 	mov.w	r1, #0
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006446:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800644a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800644e:	4689      	mov	r9, r1
 8006450:	4692      	mov	sl, r2
 8006452:	eb19 0005 	adds.w	r0, r9, r5
 8006456:	eb4a 0106 	adc.w	r1, sl, r6
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	461d      	mov	r5, r3
 8006460:	f04f 0600 	mov.w	r6, #0
 8006464:	196b      	adds	r3, r5, r5
 8006466:	eb46 0406 	adc.w	r4, r6, r6
 800646a:	461a      	mov	r2, r3
 800646c:	4623      	mov	r3, r4
 800646e:	f7f9 fec9 	bl	8000204 <__aeabi_uldivmod>
 8006472:	4603      	mov	r3, r0
 8006474:	460c      	mov	r4, r1
 8006476:	461a      	mov	r2, r3
 8006478:	4b6a      	ldr	r3, [pc, #424]	; (8006624 <UART_SetConfig+0x384>)
 800647a:	fba3 1302 	umull	r1, r3, r3, r2
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	2164      	movs	r1, #100	; 0x64
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	3332      	adds	r3, #50	; 0x32
 800648c:	4a65      	ldr	r2, [pc, #404]	; (8006624 <UART_SetConfig+0x384>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	f003 0207 	and.w	r2, r3, #7
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4442      	add	r2, r8
 800649e:	609a      	str	r2, [r3, #8]
 80064a0:	e26f      	b.n	8006982 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064a2:	f7fd fd5b 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 80064a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	461d      	mov	r5, r3
 80064ac:	f04f 0600 	mov.w	r6, #0
 80064b0:	46a8      	mov	r8, r5
 80064b2:	46b1      	mov	r9, r6
 80064b4:	eb18 0308 	adds.w	r3, r8, r8
 80064b8:	eb49 0409 	adc.w	r4, r9, r9
 80064bc:	4698      	mov	r8, r3
 80064be:	46a1      	mov	r9, r4
 80064c0:	eb18 0805 	adds.w	r8, r8, r5
 80064c4:	eb49 0906 	adc.w	r9, r9, r6
 80064c8:	f04f 0100 	mov.w	r1, #0
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064dc:	4688      	mov	r8, r1
 80064de:	4691      	mov	r9, r2
 80064e0:	eb18 0005 	adds.w	r0, r8, r5
 80064e4:	eb49 0106 	adc.w	r1, r9, r6
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	461d      	mov	r5, r3
 80064ee:	f04f 0600 	mov.w	r6, #0
 80064f2:	196b      	adds	r3, r5, r5
 80064f4:	eb46 0406 	adc.w	r4, r6, r6
 80064f8:	461a      	mov	r2, r3
 80064fa:	4623      	mov	r3, r4
 80064fc:	f7f9 fe82 	bl	8000204 <__aeabi_uldivmod>
 8006500:	4603      	mov	r3, r0
 8006502:	460c      	mov	r4, r1
 8006504:	461a      	mov	r2, r3
 8006506:	4b47      	ldr	r3, [pc, #284]	; (8006624 <UART_SetConfig+0x384>)
 8006508:	fba3 2302 	umull	r2, r3, r3, r2
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	461d      	mov	r5, r3
 8006516:	f04f 0600 	mov.w	r6, #0
 800651a:	46a9      	mov	r9, r5
 800651c:	46b2      	mov	sl, r6
 800651e:	eb19 0309 	adds.w	r3, r9, r9
 8006522:	eb4a 040a 	adc.w	r4, sl, sl
 8006526:	4699      	mov	r9, r3
 8006528:	46a2      	mov	sl, r4
 800652a:	eb19 0905 	adds.w	r9, r9, r5
 800652e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006532:	f04f 0100 	mov.w	r1, #0
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800653e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006542:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006546:	4689      	mov	r9, r1
 8006548:	4692      	mov	sl, r2
 800654a:	eb19 0005 	adds.w	r0, r9, r5
 800654e:	eb4a 0106 	adc.w	r1, sl, r6
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	461d      	mov	r5, r3
 8006558:	f04f 0600 	mov.w	r6, #0
 800655c:	196b      	adds	r3, r5, r5
 800655e:	eb46 0406 	adc.w	r4, r6, r6
 8006562:	461a      	mov	r2, r3
 8006564:	4623      	mov	r3, r4
 8006566:	f7f9 fe4d 	bl	8000204 <__aeabi_uldivmod>
 800656a:	4603      	mov	r3, r0
 800656c:	460c      	mov	r4, r1
 800656e:	461a      	mov	r2, r3
 8006570:	4b2c      	ldr	r3, [pc, #176]	; (8006624 <UART_SetConfig+0x384>)
 8006572:	fba3 1302 	umull	r1, r3, r3, r2
 8006576:	095b      	lsrs	r3, r3, #5
 8006578:	2164      	movs	r1, #100	; 0x64
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	3332      	adds	r3, #50	; 0x32
 8006584:	4a27      	ldr	r2, [pc, #156]	; (8006624 <UART_SetConfig+0x384>)
 8006586:	fba2 2303 	umull	r2, r3, r2, r3
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006592:	4498      	add	r8, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	461d      	mov	r5, r3
 8006598:	f04f 0600 	mov.w	r6, #0
 800659c:	46a9      	mov	r9, r5
 800659e:	46b2      	mov	sl, r6
 80065a0:	eb19 0309 	adds.w	r3, r9, r9
 80065a4:	eb4a 040a 	adc.w	r4, sl, sl
 80065a8:	4699      	mov	r9, r3
 80065aa:	46a2      	mov	sl, r4
 80065ac:	eb19 0905 	adds.w	r9, r9, r5
 80065b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80065b4:	f04f 0100 	mov.w	r1, #0
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065c8:	4689      	mov	r9, r1
 80065ca:	4692      	mov	sl, r2
 80065cc:	eb19 0005 	adds.w	r0, r9, r5
 80065d0:	eb4a 0106 	adc.w	r1, sl, r6
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	461d      	mov	r5, r3
 80065da:	f04f 0600 	mov.w	r6, #0
 80065de:	196b      	adds	r3, r5, r5
 80065e0:	eb46 0406 	adc.w	r4, r6, r6
 80065e4:	461a      	mov	r2, r3
 80065e6:	4623      	mov	r3, r4
 80065e8:	f7f9 fe0c 	bl	8000204 <__aeabi_uldivmod>
 80065ec:	4603      	mov	r3, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	461a      	mov	r2, r3
 80065f2:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <UART_SetConfig+0x384>)
 80065f4:	fba3 1302 	umull	r1, r3, r3, r2
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	2164      	movs	r1, #100	; 0x64
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	3332      	adds	r3, #50	; 0x32
 8006606:	4a07      	ldr	r2, [pc, #28]	; (8006624 <UART_SetConfig+0x384>)
 8006608:	fba2 2303 	umull	r2, r3, r2, r3
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	f003 0207 	and.w	r2, r3, #7
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4442      	add	r2, r8
 8006618:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800661a:	e1b2      	b.n	8006982 <UART_SetConfig+0x6e2>
 800661c:	40011000 	.word	0x40011000
 8006620:	40011400 	.word	0x40011400
 8006624:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4ad7      	ldr	r2, [pc, #860]	; (800698c <UART_SetConfig+0x6ec>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d005      	beq.n	800663e <UART_SetConfig+0x39e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4ad6      	ldr	r2, [pc, #856]	; (8006990 <UART_SetConfig+0x6f0>)
 8006638:	4293      	cmp	r3, r2
 800663a:	f040 80d1 	bne.w	80067e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800663e:	f7fd fca1 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8006642:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	469a      	mov	sl, r3
 8006648:	f04f 0b00 	mov.w	fp, #0
 800664c:	46d0      	mov	r8, sl
 800664e:	46d9      	mov	r9, fp
 8006650:	eb18 0308 	adds.w	r3, r8, r8
 8006654:	eb49 0409 	adc.w	r4, r9, r9
 8006658:	4698      	mov	r8, r3
 800665a:	46a1      	mov	r9, r4
 800665c:	eb18 080a 	adds.w	r8, r8, sl
 8006660:	eb49 090b 	adc.w	r9, r9, fp
 8006664:	f04f 0100 	mov.w	r1, #0
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006670:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006674:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006678:	4688      	mov	r8, r1
 800667a:	4691      	mov	r9, r2
 800667c:	eb1a 0508 	adds.w	r5, sl, r8
 8006680:	eb4b 0609 	adc.w	r6, fp, r9
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4619      	mov	r1, r3
 800668a:	f04f 0200 	mov.w	r2, #0
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	f04f 0400 	mov.w	r4, #0
 8006696:	0094      	lsls	r4, r2, #2
 8006698:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800669c:	008b      	lsls	r3, r1, #2
 800669e:	461a      	mov	r2, r3
 80066a0:	4623      	mov	r3, r4
 80066a2:	4628      	mov	r0, r5
 80066a4:	4631      	mov	r1, r6
 80066a6:	f7f9 fdad 	bl	8000204 <__aeabi_uldivmod>
 80066aa:	4603      	mov	r3, r0
 80066ac:	460c      	mov	r4, r1
 80066ae:	461a      	mov	r2, r3
 80066b0:	4bb8      	ldr	r3, [pc, #736]	; (8006994 <UART_SetConfig+0x6f4>)
 80066b2:	fba3 2302 	umull	r2, r3, r3, r2
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	469b      	mov	fp, r3
 80066c0:	f04f 0c00 	mov.w	ip, #0
 80066c4:	46d9      	mov	r9, fp
 80066c6:	46e2      	mov	sl, ip
 80066c8:	eb19 0309 	adds.w	r3, r9, r9
 80066cc:	eb4a 040a 	adc.w	r4, sl, sl
 80066d0:	4699      	mov	r9, r3
 80066d2:	46a2      	mov	sl, r4
 80066d4:	eb19 090b 	adds.w	r9, r9, fp
 80066d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066dc:	f04f 0100 	mov.w	r1, #0
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066f0:	4689      	mov	r9, r1
 80066f2:	4692      	mov	sl, r2
 80066f4:	eb1b 0509 	adds.w	r5, fp, r9
 80066f8:	eb4c 060a 	adc.w	r6, ip, sl
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4619      	mov	r1, r3
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	f04f 0400 	mov.w	r4, #0
 800670e:	0094      	lsls	r4, r2, #2
 8006710:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006714:	008b      	lsls	r3, r1, #2
 8006716:	461a      	mov	r2, r3
 8006718:	4623      	mov	r3, r4
 800671a:	4628      	mov	r0, r5
 800671c:	4631      	mov	r1, r6
 800671e:	f7f9 fd71 	bl	8000204 <__aeabi_uldivmod>
 8006722:	4603      	mov	r3, r0
 8006724:	460c      	mov	r4, r1
 8006726:	461a      	mov	r2, r3
 8006728:	4b9a      	ldr	r3, [pc, #616]	; (8006994 <UART_SetConfig+0x6f4>)
 800672a:	fba3 1302 	umull	r1, r3, r3, r2
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	2164      	movs	r1, #100	; 0x64
 8006732:	fb01 f303 	mul.w	r3, r1, r3
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	3332      	adds	r3, #50	; 0x32
 800673c:	4a95      	ldr	r2, [pc, #596]	; (8006994 <UART_SetConfig+0x6f4>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006748:	4498      	add	r8, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	469b      	mov	fp, r3
 800674e:	f04f 0c00 	mov.w	ip, #0
 8006752:	46d9      	mov	r9, fp
 8006754:	46e2      	mov	sl, ip
 8006756:	eb19 0309 	adds.w	r3, r9, r9
 800675a:	eb4a 040a 	adc.w	r4, sl, sl
 800675e:	4699      	mov	r9, r3
 8006760:	46a2      	mov	sl, r4
 8006762:	eb19 090b 	adds.w	r9, r9, fp
 8006766:	eb4a 0a0c 	adc.w	sl, sl, ip
 800676a:	f04f 0100 	mov.w	r1, #0
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006776:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800677a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800677e:	4689      	mov	r9, r1
 8006780:	4692      	mov	sl, r2
 8006782:	eb1b 0509 	adds.w	r5, fp, r9
 8006786:	eb4c 060a 	adc.w	r6, ip, sl
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	4619      	mov	r1, r3
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	f04f 0400 	mov.w	r4, #0
 800679c:	0094      	lsls	r4, r2, #2
 800679e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067a2:	008b      	lsls	r3, r1, #2
 80067a4:	461a      	mov	r2, r3
 80067a6:	4623      	mov	r3, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	4631      	mov	r1, r6
 80067ac:	f7f9 fd2a 	bl	8000204 <__aeabi_uldivmod>
 80067b0:	4603      	mov	r3, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	461a      	mov	r2, r3
 80067b6:	4b77      	ldr	r3, [pc, #476]	; (8006994 <UART_SetConfig+0x6f4>)
 80067b8:	fba3 1302 	umull	r1, r3, r3, r2
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	2164      	movs	r1, #100	; 0x64
 80067c0:	fb01 f303 	mul.w	r3, r1, r3
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	3332      	adds	r3, #50	; 0x32
 80067ca:	4a72      	ldr	r2, [pc, #456]	; (8006994 <UART_SetConfig+0x6f4>)
 80067cc:	fba2 2303 	umull	r2, r3, r2, r3
 80067d0:	095b      	lsrs	r3, r3, #5
 80067d2:	f003 020f 	and.w	r2, r3, #15
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4442      	add	r2, r8
 80067dc:	609a      	str	r2, [r3, #8]
 80067de:	e0d0      	b.n	8006982 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80067e0:	f7fd fbbc 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 80067e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	469a      	mov	sl, r3
 80067ea:	f04f 0b00 	mov.w	fp, #0
 80067ee:	46d0      	mov	r8, sl
 80067f0:	46d9      	mov	r9, fp
 80067f2:	eb18 0308 	adds.w	r3, r8, r8
 80067f6:	eb49 0409 	adc.w	r4, r9, r9
 80067fa:	4698      	mov	r8, r3
 80067fc:	46a1      	mov	r9, r4
 80067fe:	eb18 080a 	adds.w	r8, r8, sl
 8006802:	eb49 090b 	adc.w	r9, r9, fp
 8006806:	f04f 0100 	mov.w	r1, #0
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006812:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006816:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800681a:	4688      	mov	r8, r1
 800681c:	4691      	mov	r9, r2
 800681e:	eb1a 0508 	adds.w	r5, sl, r8
 8006822:	eb4b 0609 	adc.w	r6, fp, r9
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	4619      	mov	r1, r3
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	f04f 0400 	mov.w	r4, #0
 8006838:	0094      	lsls	r4, r2, #2
 800683a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800683e:	008b      	lsls	r3, r1, #2
 8006840:	461a      	mov	r2, r3
 8006842:	4623      	mov	r3, r4
 8006844:	4628      	mov	r0, r5
 8006846:	4631      	mov	r1, r6
 8006848:	f7f9 fcdc 	bl	8000204 <__aeabi_uldivmod>
 800684c:	4603      	mov	r3, r0
 800684e:	460c      	mov	r4, r1
 8006850:	461a      	mov	r2, r3
 8006852:	4b50      	ldr	r3, [pc, #320]	; (8006994 <UART_SetConfig+0x6f4>)
 8006854:	fba3 2302 	umull	r2, r3, r3, r2
 8006858:	095b      	lsrs	r3, r3, #5
 800685a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	469b      	mov	fp, r3
 8006862:	f04f 0c00 	mov.w	ip, #0
 8006866:	46d9      	mov	r9, fp
 8006868:	46e2      	mov	sl, ip
 800686a:	eb19 0309 	adds.w	r3, r9, r9
 800686e:	eb4a 040a 	adc.w	r4, sl, sl
 8006872:	4699      	mov	r9, r3
 8006874:	46a2      	mov	sl, r4
 8006876:	eb19 090b 	adds.w	r9, r9, fp
 800687a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800687e:	f04f 0100 	mov.w	r1, #0
 8006882:	f04f 0200 	mov.w	r2, #0
 8006886:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800688a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800688e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006892:	4689      	mov	r9, r1
 8006894:	4692      	mov	sl, r2
 8006896:	eb1b 0509 	adds.w	r5, fp, r9
 800689a:	eb4c 060a 	adc.w	r6, ip, sl
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	4619      	mov	r1, r3
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	f04f 0400 	mov.w	r4, #0
 80068b0:	0094      	lsls	r4, r2, #2
 80068b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068b6:	008b      	lsls	r3, r1, #2
 80068b8:	461a      	mov	r2, r3
 80068ba:	4623      	mov	r3, r4
 80068bc:	4628      	mov	r0, r5
 80068be:	4631      	mov	r1, r6
 80068c0:	f7f9 fca0 	bl	8000204 <__aeabi_uldivmod>
 80068c4:	4603      	mov	r3, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	461a      	mov	r2, r3
 80068ca:	4b32      	ldr	r3, [pc, #200]	; (8006994 <UART_SetConfig+0x6f4>)
 80068cc:	fba3 1302 	umull	r1, r3, r3, r2
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	2164      	movs	r1, #100	; 0x64
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	3332      	adds	r3, #50	; 0x32
 80068de:	4a2d      	ldr	r2, [pc, #180]	; (8006994 <UART_SetConfig+0x6f4>)
 80068e0:	fba2 2303 	umull	r2, r3, r2, r3
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068ea:	4498      	add	r8, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	469b      	mov	fp, r3
 80068f0:	f04f 0c00 	mov.w	ip, #0
 80068f4:	46d9      	mov	r9, fp
 80068f6:	46e2      	mov	sl, ip
 80068f8:	eb19 0309 	adds.w	r3, r9, r9
 80068fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006900:	4699      	mov	r9, r3
 8006902:	46a2      	mov	sl, r4
 8006904:	eb19 090b 	adds.w	r9, r9, fp
 8006908:	eb4a 0a0c 	adc.w	sl, sl, ip
 800690c:	f04f 0100 	mov.w	r1, #0
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006918:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800691c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006920:	4689      	mov	r9, r1
 8006922:	4692      	mov	sl, r2
 8006924:	eb1b 0509 	adds.w	r5, fp, r9
 8006928:	eb4c 060a 	adc.w	r6, ip, sl
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4619      	mov	r1, r3
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	f04f 0400 	mov.w	r4, #0
 800693e:	0094      	lsls	r4, r2, #2
 8006940:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006944:	008b      	lsls	r3, r1, #2
 8006946:	461a      	mov	r2, r3
 8006948:	4623      	mov	r3, r4
 800694a:	4628      	mov	r0, r5
 800694c:	4631      	mov	r1, r6
 800694e:	f7f9 fc59 	bl	8000204 <__aeabi_uldivmod>
 8006952:	4603      	mov	r3, r0
 8006954:	460c      	mov	r4, r1
 8006956:	461a      	mov	r2, r3
 8006958:	4b0e      	ldr	r3, [pc, #56]	; (8006994 <UART_SetConfig+0x6f4>)
 800695a:	fba3 1302 	umull	r1, r3, r3, r2
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	2164      	movs	r1, #100	; 0x64
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	3332      	adds	r3, #50	; 0x32
 800696c:	4a09      	ldr	r2, [pc, #36]	; (8006994 <UART_SetConfig+0x6f4>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	f003 020f 	and.w	r2, r3, #15
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4442      	add	r2, r8
 800697e:	609a      	str	r2, [r3, #8]
}
 8006980:	e7ff      	b.n	8006982 <UART_SetConfig+0x6e2>
 8006982:	bf00      	nop
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698c:	40011000 	.word	0x40011000
 8006990:	40011400 	.word	0x40011400
 8006994:	51eb851f 	.word	0x51eb851f

08006998 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800699c:	4904      	ldr	r1, [pc, #16]	; (80069b0 <MX_FATFS_Init+0x18>)
 800699e:	4805      	ldr	r0, [pc, #20]	; (80069b4 <MX_FATFS_Init+0x1c>)
 80069a0:	f002 fb4c 	bl	800903c <FATFS_LinkDriver>
 80069a4:	4603      	mov	r3, r0
 80069a6:	461a      	mov	r2, r3
 80069a8:	4b03      	ldr	r3, [pc, #12]	; (80069b8 <MX_FATFS_Init+0x20>)
 80069aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80069ac:	bf00      	nop
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20000a90 	.word	0x20000a90
 80069b4:	20000034 	.word	0x20000034
 80069b8:	20000a94 	.word	0x20000a94

080069bc <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80069c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fb fe95 	bl	8002708 <USER_SPI_initialize>
 80069de:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fb ff67 	bl	80028c8 <USER_SPI_status>
 80069fa:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	607a      	str	r2, [r7, #4]
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006a14:	7bf8      	ldrb	r0, [r7, #15]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	68b9      	ldr	r1, [r7, #8]
 8006a1c:	f7fb ff6a 	bl	80028f4 <USER_SPI_read>
 8006a20:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
 8006a36:	4603      	mov	r3, r0
 8006a38:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */


    return USER_SPI_write(pdrv, buff, sector, count);
 8006a3a:	7bf8      	ldrb	r0, [r7, #15]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	f7fb ffbd 	bl	80029c0 <USER_SPI_write>
 8006a46:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	603a      	str	r2, [r7, #0]
 8006a5a:	71fb      	strb	r3, [r7, #7]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006a60:	79b9      	ldrb	r1, [r7, #6]
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fc f826 	bl	8002ab8 <USER_SPI_ioctl>
 8006a6c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006a82:	79fb      	ldrb	r3, [r7, #7]
 8006a84:	4a08      	ldr	r2, [pc, #32]	; (8006aa8 <disk_status+0x30>)
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	79fa      	ldrb	r2, [r7, #7]
 8006a90:	4905      	ldr	r1, [pc, #20]	; (8006aa8 <disk_status+0x30>)
 8006a92:	440a      	add	r2, r1
 8006a94:	7a12      	ldrb	r2, [r2, #8]
 8006a96:	4610      	mov	r0, r2
 8006a98:	4798      	blx	r3
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	200000a0 	.word	0x200000a0

08006aac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	4a0d      	ldr	r2, [pc, #52]	; (8006af4 <disk_initialize+0x48>)
 8006abe:	5cd3      	ldrb	r3, [r2, r3]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d111      	bne.n	8006ae8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	4a0b      	ldr	r2, [pc, #44]	; (8006af4 <disk_initialize+0x48>)
 8006ac8:	2101      	movs	r1, #1
 8006aca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	4a09      	ldr	r2, [pc, #36]	; (8006af4 <disk_initialize+0x48>)
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	79fa      	ldrb	r2, [r7, #7]
 8006ada:	4906      	ldr	r1, [pc, #24]	; (8006af4 <disk_initialize+0x48>)
 8006adc:	440a      	add	r2, r1
 8006ade:	7a12      	ldrb	r2, [r2, #8]
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	4798      	blx	r3
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	200000a0 	.word	0x200000a0

08006af8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006af8:	b590      	push	{r4, r7, lr}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	607a      	str	r2, [r7, #4]
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	4a0a      	ldr	r2, [pc, #40]	; (8006b34 <disk_read+0x3c>)
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	689c      	ldr	r4, [r3, #8]
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	4a07      	ldr	r2, [pc, #28]	; (8006b34 <disk_read+0x3c>)
 8006b18:	4413      	add	r3, r2
 8006b1a:	7a18      	ldrb	r0, [r3, #8]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	47a0      	blx	r4
 8006b24:	4603      	mov	r3, r0
 8006b26:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd90      	pop	{r4, r7, pc}
 8006b32:	bf00      	nop
 8006b34:	200000a0 	.word	0x200000a0

08006b38 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006b38:	b590      	push	{r4, r7, lr}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	4a0a      	ldr	r2, [pc, #40]	; (8006b74 <disk_write+0x3c>)
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	68dc      	ldr	r4, [r3, #12]
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	4a07      	ldr	r2, [pc, #28]	; (8006b74 <disk_write+0x3c>)
 8006b58:	4413      	add	r3, r2
 8006b5a:	7a18      	ldrb	r0, [r3, #8]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	47a0      	blx	r4
 8006b64:	4603      	mov	r3, r0
 8006b66:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd90      	pop	{r4, r7, pc}
 8006b72:	bf00      	nop
 8006b74:	200000a0 	.word	0x200000a0

08006b78 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	603a      	str	r2, [r7, #0]
 8006b82:	71fb      	strb	r3, [r7, #7]
 8006b84:	460b      	mov	r3, r1
 8006b86:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <disk_ioctl+0x38>)
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	79fa      	ldrb	r2, [r7, #7]
 8006b96:	4906      	ldr	r1, [pc, #24]	; (8006bb0 <disk_ioctl+0x38>)
 8006b98:	440a      	add	r2, r1
 8006b9a:	7a10      	ldrb	r0, [r2, #8]
 8006b9c:	79b9      	ldrb	r1, [r7, #6]
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	4798      	blx	r3
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73fb      	strb	r3, [r7, #15]
  return res;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	200000a0 	.word	0x200000a0

08006bb4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006bc4:	89fb      	ldrh	r3, [r7, #14]
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	b21a      	sxth	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	b21b      	sxth	r3, r3
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	b21b      	sxth	r3, r3
 8006bd4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006bd6:	89fb      	ldrh	r3, [r7, #14]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3303      	adds	r3, #3
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	3202      	adds	r2, #2
 8006bfc:	7812      	ldrb	r2, [r2, #0]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	021b      	lsls	r3, r3, #8
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	3201      	adds	r2, #1
 8006c0a:	7812      	ldrb	r2, [r2, #0]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	7812      	ldrb	r2, [r2, #0]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
	return rv;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	887a      	ldrh	r2, [r7, #2]
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	887b      	ldrh	r3, [r7, #2]
 8006c44:	0a1b      	lsrs	r3, r3, #8
 8006c46:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	887a      	ldrh	r2, [r7, #2]
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	701a      	strb	r2, [r3, #0]
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	0a1b      	lsrs	r3, r3, #8
 8006c7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	607a      	str	r2, [r7, #4]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	0a1b      	lsrs	r3, r3, #8
 8006c9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00d      	beq.n	8006cee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	1c53      	adds	r3, r2, #1
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	1c59      	adds	r1, r3, #1
 8006cdc:	6179      	str	r1, [r7, #20]
 8006cde:	7812      	ldrb	r2, [r2, #0]
 8006ce0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	607b      	str	r3, [r7, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f1      	bne.n	8006cd2 <mem_cpy+0x1a>
	}
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006cfa:	b480      	push	{r7}
 8006cfc:	b087      	sub	sp, #28
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	617a      	str	r2, [r7, #20]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	607b      	str	r3, [r7, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f3      	bne.n	8006d0a <mem_set+0x10>
}
 8006d22:	bf00      	nop
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006d2e:	b480      	push	{r7}
 8006d30:	b089      	sub	sp, #36	; 0x24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	61fa      	str	r2, [r7, #28]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	61ba      	str	r2, [r7, #24]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	1acb      	subs	r3, r1, r3
 8006d5a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	607b      	str	r3, [r7, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <mem_cmp+0x40>
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0eb      	beq.n	8006d46 <mem_cmp+0x18>

	return r;
 8006d6e:	697b      	ldr	r3, [r7, #20]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3724      	adds	r7, #36	; 0x24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006d86:	e002      	b.n	8006d8e <chk_chr+0x12>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	607b      	str	r3, [r7, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <chk_chr+0x26>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d1f2      	bne.n	8006d88 <chk_chr+0xc>
	return *str;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	781b      	ldrb	r3, [r3, #0]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
	...

08006db4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60bb      	str	r3, [r7, #8]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	e029      	b.n	8006e1c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006dc8:	4a27      	ldr	r2, [pc, #156]	; (8006e68 <chk_lock+0xb4>)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	4413      	add	r3, r2
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01d      	beq.n	8006e12 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006dd6:	4a24      	ldr	r2, [pc, #144]	; (8006e68 <chk_lock+0xb4>)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	4413      	add	r3, r2
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d116      	bne.n	8006e16 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006de8:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <chk_lock+0xb4>)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	4413      	add	r3, r2
 8006df0:	3304      	adds	r3, #4
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d10c      	bne.n	8006e16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006dfc:	4a1a      	ldr	r2, [pc, #104]	; (8006e68 <chk_lock+0xb4>)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	4413      	add	r3, r2
 8006e04:	3308      	adds	r3, #8
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d102      	bne.n	8006e16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e10:	e007      	b.n	8006e22 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006e12:	2301      	movs	r3, #1
 8006e14:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d9d2      	bls.n	8006dc8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d109      	bne.n	8006e3c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <chk_lock+0x80>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d101      	bne.n	8006e38 <chk_lock+0x84>
 8006e34:	2300      	movs	r3, #0
 8006e36:	e010      	b.n	8006e5a <chk_lock+0xa6>
 8006e38:	2312      	movs	r3, #18
 8006e3a:	e00e      	b.n	8006e5a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d108      	bne.n	8006e54 <chk_lock+0xa0>
 8006e42:	4a09      	ldr	r2, [pc, #36]	; (8006e68 <chk_lock+0xb4>)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	4413      	add	r3, r2
 8006e4a:	330c      	adds	r3, #12
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e52:	d101      	bne.n	8006e58 <chk_lock+0xa4>
 8006e54:	2310      	movs	r3, #16
 8006e56:	e000      	b.n	8006e5a <chk_lock+0xa6>
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000080 	.word	0x20000080

08006e6c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e72:	2300      	movs	r3, #0
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	e002      	b.n	8006e7e <enq_lock+0x12>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	607b      	str	r3, [r7, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d806      	bhi.n	8006e92 <enq_lock+0x26>
 8006e84:	4a09      	ldr	r2, [pc, #36]	; (8006eac <enq_lock+0x40>)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	011b      	lsls	r3, r3, #4
 8006e8a:	4413      	add	r3, r2
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1f2      	bne.n	8006e78 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	bf14      	ite	ne
 8006e98:	2301      	movne	r3, #1
 8006e9a:	2300      	moveq	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	20000080 	.word	0x20000080

08006eb0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	e01f      	b.n	8006f00 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006ec0:	4a41      	ldr	r2, [pc, #260]	; (8006fc8 <inc_lock+0x118>)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	4413      	add	r3, r2
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d113      	bne.n	8006efa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006ed2:	4a3d      	ldr	r2, [pc, #244]	; (8006fc8 <inc_lock+0x118>)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	4413      	add	r3, r2
 8006eda:	3304      	adds	r3, #4
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d109      	bne.n	8006efa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006ee6:	4a38      	ldr	r2, [pc, #224]	; (8006fc8 <inc_lock+0x118>)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	4413      	add	r3, r2
 8006eee:	3308      	adds	r3, #8
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d006      	beq.n	8006f08 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d9dc      	bls.n	8006ec0 <inc_lock+0x10>
 8006f06:	e000      	b.n	8006f0a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006f08:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d132      	bne.n	8006f76 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e002      	b.n	8006f1c <inc_lock+0x6c>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d806      	bhi.n	8006f30 <inc_lock+0x80>
 8006f22:	4a29      	ldr	r2, [pc, #164]	; (8006fc8 <inc_lock+0x118>)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	4413      	add	r3, r2
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f2      	bne.n	8006f16 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d101      	bne.n	8006f3a <inc_lock+0x8a>
 8006f36:	2300      	movs	r3, #0
 8006f38:	e040      	b.n	8006fbc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4922      	ldr	r1, [pc, #136]	; (8006fc8 <inc_lock+0x118>)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	440b      	add	r3, r1
 8006f46:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	491e      	ldr	r1, [pc, #120]	; (8006fc8 <inc_lock+0x118>)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	440b      	add	r3, r1
 8006f54:	3304      	adds	r3, #4
 8006f56:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	695a      	ldr	r2, [r3, #20]
 8006f5c:	491a      	ldr	r1, [pc, #104]	; (8006fc8 <inc_lock+0x118>)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	440b      	add	r3, r1
 8006f64:	3308      	adds	r3, #8
 8006f66:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006f68:	4a17      	ldr	r2, [pc, #92]	; (8006fc8 <inc_lock+0x118>)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	4413      	add	r3, r2
 8006f70:	330c      	adds	r3, #12
 8006f72:	2200      	movs	r2, #0
 8006f74:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d009      	beq.n	8006f90 <inc_lock+0xe0>
 8006f7c:	4a12      	ldr	r2, [pc, #72]	; (8006fc8 <inc_lock+0x118>)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	4413      	add	r3, r2
 8006f84:	330c      	adds	r3, #12
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <inc_lock+0xe0>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e015      	b.n	8006fbc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d108      	bne.n	8006fa8 <inc_lock+0xf8>
 8006f96:	4a0c      	ldr	r2, [pc, #48]	; (8006fc8 <inc_lock+0x118>)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	4413      	add	r3, r2
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	e001      	b.n	8006fac <inc_lock+0xfc>
 8006fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fac:	4906      	ldr	r1, [pc, #24]	; (8006fc8 <inc_lock+0x118>)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	011b      	lsls	r3, r3, #4
 8006fb2:	440b      	add	r3, r1
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	20000080 	.word	0x20000080

08006fcc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	607b      	str	r3, [r7, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d825      	bhi.n	800702c <dec_lock+0x60>
		n = Files[i].ctr;
 8006fe0:	4a17      	ldr	r2, [pc, #92]	; (8007040 <dec_lock+0x74>)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	4413      	add	r3, r2
 8006fe8:	330c      	adds	r3, #12
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006fee:	89fb      	ldrh	r3, [r7, #14]
 8006ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff4:	d101      	bne.n	8006ffa <dec_lock+0x2e>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006ffa:	89fb      	ldrh	r3, [r7, #14]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <dec_lock+0x3a>
 8007000:	89fb      	ldrh	r3, [r7, #14]
 8007002:	3b01      	subs	r3, #1
 8007004:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007006:	4a0e      	ldr	r2, [pc, #56]	; (8007040 <dec_lock+0x74>)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	011b      	lsls	r3, r3, #4
 800700c:	4413      	add	r3, r2
 800700e:	330c      	adds	r3, #12
 8007010:	89fa      	ldrh	r2, [r7, #14]
 8007012:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007014:	89fb      	ldrh	r3, [r7, #14]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d105      	bne.n	8007026 <dec_lock+0x5a>
 800701a:	4a09      	ldr	r2, [pc, #36]	; (8007040 <dec_lock+0x74>)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	4413      	add	r3, r2
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	737b      	strb	r3, [r7, #13]
 800702a:	e001      	b.n	8007030 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800702c:	2302      	movs	r3, #2
 800702e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007030:	7b7b      	ldrb	r3, [r7, #13]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000080 	.word	0x20000080

08007044 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	e010      	b.n	8007074 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007052:	4a0d      	ldr	r2, [pc, #52]	; (8007088 <clear_lock+0x44>)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	4413      	add	r3, r2
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	429a      	cmp	r2, r3
 8007060:	d105      	bne.n	800706e <clear_lock+0x2a>
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <clear_lock+0x44>)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	4413      	add	r3, r2
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3301      	adds	r3, #1
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d9eb      	bls.n	8007052 <clear_lock+0xe>
	}
}
 800707a:	bf00      	nop
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	20000080 	.word	0x20000080

0800708c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	78db      	ldrb	r3, [r3, #3]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d034      	beq.n	800710a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	7858      	ldrb	r0, [r3, #1]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070b0:	2301      	movs	r3, #1
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	f7ff fd40 	bl	8006b38 <disk_write>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80070be:	2301      	movs	r3, #1
 80070c0:	73fb      	strb	r3, [r7, #15]
 80070c2:	e022      	b.n	800710a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	1ad2      	subs	r2, r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d217      	bcs.n	800710a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	789b      	ldrb	r3, [r3, #2]
 80070de:	613b      	str	r3, [r7, #16]
 80070e0:	e010      	b.n	8007104 <sync_window+0x78>
					wsect += fs->fsize;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4413      	add	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	7858      	ldrb	r0, [r3, #1]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070f6:	2301      	movs	r3, #1
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	f7ff fd1d 	bl	8006b38 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3b01      	subs	r3, #1
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d8eb      	bhi.n	80070e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800710a:	7bfb      	ldrb	r3, [r7, #15]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d01b      	beq.n	8007164 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff ffad 	bl	800708c <sync_window>
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d113      	bne.n	8007164 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	7858      	ldrb	r0, [r3, #1]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007146:	2301      	movs	r3, #1
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	f7ff fcd5 	bl	8006af8 <disk_read>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007158:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800715a:	2301      	movs	r3, #1
 800715c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007164:	7bfb      	ldrb	r3, [r7, #15]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff ff87 	bl	800708c <sync_window>
 800717e:	4603      	mov	r3, r0
 8007180:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d158      	bne.n	800723a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b03      	cmp	r3, #3
 800718e:	d148      	bne.n	8007222 <sync_fs+0xb2>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	791b      	ldrb	r3, [r3, #4]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d144      	bne.n	8007222 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3330      	adds	r3, #48	; 0x30
 800719c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071a0:	2100      	movs	r1, #0
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7ff fda9 	bl	8006cfa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3330      	adds	r3, #48	; 0x30
 80071ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071b0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff fd38 	bl	8006c2a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3330      	adds	r3, #48	; 0x30
 80071be:	4921      	ldr	r1, [pc, #132]	; (8007244 <sync_fs+0xd4>)
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff fd4d 	bl	8006c60 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3330      	adds	r3, #48	; 0x30
 80071ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80071ce:	491e      	ldr	r1, [pc, #120]	; (8007248 <sync_fs+0xd8>)
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff fd45 	bl	8006c60 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3330      	adds	r3, #48	; 0x30
 80071da:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	4619      	mov	r1, r3
 80071e4:	4610      	mov	r0, r2
 80071e6:	f7ff fd3b 	bl	8006c60 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3330      	adds	r3, #48	; 0x30
 80071ee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f7ff fd31 	bl	8006c60 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	7858      	ldrb	r0, [r3, #1]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007216:	2301      	movs	r3, #1
 8007218:	f7ff fc8e 	bl	8006b38 <disk_write>
			fs->fsi_flag = 0;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	785b      	ldrb	r3, [r3, #1]
 8007226:	2200      	movs	r2, #0
 8007228:	2100      	movs	r1, #0
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff fca4 	bl	8006b78 <disk_ioctl>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <sync_fs+0xca>
 8007236:	2301      	movs	r3, #1
 8007238:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	41615252 	.word	0x41615252
 8007248:	61417272 	.word	0x61417272

0800724c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	3b02      	subs	r3, #2
 800725a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	3b02      	subs	r3, #2
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d301      	bcc.n	800726c <clust2sect+0x20>
 8007268:	2300      	movs	r3, #0
 800726a:	e008      	b.n	800727e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	895b      	ldrh	r3, [r3, #10]
 8007270:	461a      	mov	r2, r3
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	fb03 f202 	mul.w	r2, r3, r2
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	4413      	add	r3, r2
}
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b086      	sub	sp, #24
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d904      	bls.n	80072aa <get_fat+0x20>
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d302      	bcc.n	80072b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80072aa:	2301      	movs	r3, #1
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	e08c      	b.n	80073ca <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80072b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d045      	beq.n	800734a <get_fat+0xc0>
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d05d      	beq.n	800737e <get_fat+0xf4>
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d177      	bne.n	80073b6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4413      	add	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	6a1a      	ldr	r2, [r3, #32]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	0a5b      	lsrs	r3, r3, #9
 80072dc:	4413      	add	r3, r2
 80072de:	4619      	mov	r1, r3
 80072e0:	6938      	ldr	r0, [r7, #16]
 80072e2:	f7ff ff17 	bl	8007114 <move_window>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d167      	bne.n	80073bc <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	60fa      	str	r2, [r7, #12]
 80072f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	4413      	add	r3, r2
 80072fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072fe:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	0a5b      	lsrs	r3, r3, #9
 8007308:	4413      	add	r3, r2
 800730a:	4619      	mov	r1, r3
 800730c:	6938      	ldr	r0, [r7, #16]
 800730e:	f7ff ff01 	bl	8007114 <move_window>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d153      	bne.n	80073c0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4413      	add	r3, r2
 8007322:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	461a      	mov	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	4313      	orrs	r3, r2
 800732e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <get_fat+0xb6>
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	091b      	lsrs	r3, r3, #4
 800733e:	e002      	b.n	8007346 <get_fat+0xbc>
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007346:	617b      	str	r3, [r7, #20]
			break;
 8007348:	e03f      	b.n	80073ca <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	6a1a      	ldr	r2, [r3, #32]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	0a1b      	lsrs	r3, r3, #8
 8007352:	4413      	add	r3, r2
 8007354:	4619      	mov	r1, r3
 8007356:	6938      	ldr	r0, [r7, #16]
 8007358:	f7ff fedc 	bl	8007114 <move_window>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d130      	bne.n	80073c4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007370:	4413      	add	r3, r2
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fc1e 	bl	8006bb4 <ld_word>
 8007378:	4603      	mov	r3, r0
 800737a:	617b      	str	r3, [r7, #20]
			break;
 800737c:	e025      	b.n	80073ca <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	09db      	lsrs	r3, r3, #7
 8007386:	4413      	add	r3, r2
 8007388:	4619      	mov	r1, r3
 800738a:	6938      	ldr	r0, [r7, #16]
 800738c:	f7ff fec2 	bl	8007114 <move_window>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d118      	bne.n	80073c8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80073a4:	4413      	add	r3, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fc1c 	bl	8006be4 <ld_dword>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073b2:	617b      	str	r3, [r7, #20]
			break;
 80073b4:	e009      	b.n	80073ca <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80073b6:	2301      	movs	r3, #1
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	e006      	b.n	80073ca <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073bc:	bf00      	nop
 80073be:	e004      	b.n	80073ca <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073c0:	bf00      	nop
 80073c2:	e002      	b.n	80073ca <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80073c4:	bf00      	nop
 80073c6:	e000      	b.n	80073ca <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80073c8:	bf00      	nop
		}
	}

	return val;
 80073ca:	697b      	ldr	r3, [r7, #20]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80073d4:	b590      	push	{r4, r7, lr}
 80073d6:	b089      	sub	sp, #36	; 0x24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80073e0:	2302      	movs	r3, #2
 80073e2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	f240 80d6 	bls.w	8007598 <put_fat+0x1c4>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	f080 80d0 	bcs.w	8007598 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d073      	beq.n	80074e8 <put_fat+0x114>
 8007400:	2b03      	cmp	r3, #3
 8007402:	f000 8091 	beq.w	8007528 <put_fat+0x154>
 8007406:	2b01      	cmp	r3, #1
 8007408:	f040 80c6 	bne.w	8007598 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	61bb      	str	r3, [r7, #24]
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	085b      	lsrs	r3, r3, #1
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	4413      	add	r3, r2
 8007418:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1a      	ldr	r2, [r3, #32]
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	0a5b      	lsrs	r3, r3, #9
 8007422:	4413      	add	r3, r2
 8007424:	4619      	mov	r1, r3
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff fe74 	bl	8007114 <move_window>
 800742c:	4603      	mov	r3, r0
 800742e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007430:	7ffb      	ldrb	r3, [r7, #31]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f040 80a9 	bne.w	800758a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	1c59      	adds	r1, r3, #1
 8007442:	61b9      	str	r1, [r7, #24]
 8007444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007448:	4413      	add	r3, r2
 800744a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00d      	beq.n	8007472 <put_fat+0x9e>
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	b25b      	sxtb	r3, r3
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	b25a      	sxtb	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	b25b      	sxtb	r3, r3
 800746a:	4313      	orrs	r3, r2
 800746c:	b25b      	sxtb	r3, r3
 800746e:	b2db      	uxtb	r3, r3
 8007470:	e001      	b.n	8007476 <put_fat+0xa2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a1a      	ldr	r2, [r3, #32]
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	0a5b      	lsrs	r3, r3, #9
 8007488:	4413      	add	r3, r2
 800748a:	4619      	mov	r1, r3
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f7ff fe41 	bl	8007114 <move_window>
 8007492:	4603      	mov	r3, r0
 8007494:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007496:	7ffb      	ldrb	r3, [r7, #31]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d178      	bne.n	800758e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a8:	4413      	add	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <put_fat+0xea>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	091b      	lsrs	r3, r3, #4
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	e00e      	b.n	80074dc <put_fat+0x108>
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	b25b      	sxtb	r3, r3
 80074c4:	f023 030f 	bic.w	r3, r3, #15
 80074c8:	b25a      	sxtb	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	0a1b      	lsrs	r3, r3, #8
 80074ce:	b25b      	sxtb	r3, r3
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	b25b      	sxtb	r3, r3
 80074d6:	4313      	orrs	r3, r2
 80074d8:	b25b      	sxtb	r3, r3
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	70da      	strb	r2, [r3, #3]
			break;
 80074e6:	e057      	b.n	8007598 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1a      	ldr	r2, [r3, #32]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	4413      	add	r3, r2
 80074f2:	4619      	mov	r1, r3
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f7ff fe0d 	bl	8007114 <move_window>
 80074fa:	4603      	mov	r3, r0
 80074fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074fe:	7ffb      	ldrb	r3, [r7, #31]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d146      	bne.n	8007592 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007512:	4413      	add	r3, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	b292      	uxth	r2, r2
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff fb85 	bl	8006c2a <st_word>
			fs->wflag = 1;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	70da      	strb	r2, [r3, #3]
			break;
 8007526:	e037      	b.n	8007598 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1a      	ldr	r2, [r3, #32]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	09db      	lsrs	r3, r3, #7
 8007530:	4413      	add	r3, r2
 8007532:	4619      	mov	r1, r3
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff fded 	bl	8007114 <move_window>
 800753a:	4603      	mov	r3, r0
 800753c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800753e:	7ffb      	ldrb	r3, [r7, #31]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d128      	bne.n	8007596 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007558:	4413      	add	r3, r2
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fb42 	bl	8006be4 <ld_dword>
 8007560:	4603      	mov	r3, r0
 8007562:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007566:	4323      	orrs	r3, r4
 8007568:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007578:	4413      	add	r3, r2
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fb6f 	bl	8006c60 <st_dword>
			fs->wflag = 1;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	70da      	strb	r2, [r3, #3]
			break;
 8007588:	e006      	b.n	8007598 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800758a:	bf00      	nop
 800758c:	e004      	b.n	8007598 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800758e:	bf00      	nop
 8007590:	e002      	b.n	8007598 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007592:	bf00      	nop
 8007594:	e000      	b.n	8007598 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007596:	bf00      	nop
		}
	}
	return res;
 8007598:	7ffb      	ldrb	r3, [r7, #31]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3724      	adds	r7, #36	; 0x24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd90      	pop	{r4, r7, pc}

080075a2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b088      	sub	sp, #32
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d904      	bls.n	80075c8 <remove_chain+0x26>
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d301      	bcc.n	80075cc <remove_chain+0x2a>
 80075c8:	2302      	movs	r3, #2
 80075ca:	e04b      	b.n	8007664 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00c      	beq.n	80075ec <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80075d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	69b8      	ldr	r0, [r7, #24]
 80075da:	f7ff fefb 	bl	80073d4 <put_fat>
 80075de:	4603      	mov	r3, r0
 80075e0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80075e2:	7ffb      	ldrb	r3, [r7, #31]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <remove_chain+0x4a>
 80075e8:	7ffb      	ldrb	r3, [r7, #31]
 80075ea:	e03b      	b.n	8007664 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7ff fe4b 	bl	800728a <get_fat>
 80075f4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d031      	beq.n	8007660 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d101      	bne.n	8007606 <remove_chain+0x64>
 8007602:	2302      	movs	r3, #2
 8007604:	e02e      	b.n	8007664 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800760c:	d101      	bne.n	8007612 <remove_chain+0x70>
 800760e:	2301      	movs	r3, #1
 8007610:	e028      	b.n	8007664 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007612:	2200      	movs	r2, #0
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	69b8      	ldr	r0, [r7, #24]
 8007618:	f7ff fedc 	bl	80073d4 <put_fat>
 800761c:	4603      	mov	r3, r0
 800761e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007620:	7ffb      	ldrb	r3, [r7, #31]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <remove_chain+0x88>
 8007626:	7ffb      	ldrb	r3, [r7, #31]
 8007628:	e01c      	b.n	8007664 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	3b02      	subs	r3, #2
 8007634:	429a      	cmp	r2, r3
 8007636:	d20b      	bcs.n	8007650 <remove_chain+0xae>
			fs->free_clst++;
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	791b      	ldrb	r3, [r3, #4]
 8007646:	f043 0301 	orr.w	r3, r3, #1
 800764a:	b2da      	uxtb	r2, r3
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	429a      	cmp	r2, r3
 800765c:	d3c6      	bcc.n	80075ec <remove_chain+0x4a>
 800765e:	e000      	b.n	8007662 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007660:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3720      	adds	r7, #32
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10d      	bne.n	800769e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d004      	beq.n	8007698 <create_chain+0x2c>
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	429a      	cmp	r2, r3
 8007696:	d31b      	bcc.n	80076d0 <create_chain+0x64>
 8007698:	2301      	movs	r3, #1
 800769a:	61bb      	str	r3, [r7, #24]
 800769c:	e018      	b.n	80076d0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7ff fdf2 	bl	800728a <get_fat>
 80076a6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d801      	bhi.n	80076b2 <create_chain+0x46>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e070      	b.n	8007794 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076b8:	d101      	bne.n	80076be <create_chain+0x52>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	e06a      	b.n	8007794 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d201      	bcs.n	80076cc <create_chain+0x60>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	e063      	b.n	8007794 <create_chain+0x128>
		scl = clst;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	3301      	adds	r3, #1
 80076d8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d307      	bcc.n	80076f4 <create_chain+0x88>
				ncl = 2;
 80076e4:	2302      	movs	r3, #2
 80076e6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d901      	bls.n	80076f4 <create_chain+0x88>
 80076f0:	2300      	movs	r3, #0
 80076f2:	e04f      	b.n	8007794 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80076f4:	69f9      	ldr	r1, [r7, #28]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7ff fdc7 	bl	800728a <get_fat>
 80076fc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00e      	beq.n	8007722 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d003      	beq.n	8007712 <create_chain+0xa6>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007710:	d101      	bne.n	8007716 <create_chain+0xaa>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	e03e      	b.n	8007794 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	429a      	cmp	r2, r3
 800771c:	d1da      	bne.n	80076d4 <create_chain+0x68>
 800771e:	2300      	movs	r3, #0
 8007720:	e038      	b.n	8007794 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007722:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007728:	69f9      	ldr	r1, [r7, #28]
 800772a:	6938      	ldr	r0, [r7, #16]
 800772c:	f7ff fe52 	bl	80073d4 <put_fat>
 8007730:	4603      	mov	r3, r0
 8007732:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d109      	bne.n	800774e <create_chain+0xe2>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d006      	beq.n	800774e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6938      	ldr	r0, [r7, #16]
 8007746:	f7ff fe45 	bl	80073d4 <put_fat>
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d116      	bne.n	8007782 <create_chain+0x116>
		fs->last_clst = ncl;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	691a      	ldr	r2, [r3, #16]
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	3b02      	subs	r3, #2
 8007764:	429a      	cmp	r2, r3
 8007766:	d804      	bhi.n	8007772 <create_chain+0x106>
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	1e5a      	subs	r2, r3, #1
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	791b      	ldrb	r3, [r3, #4]
 8007776:	f043 0301 	orr.w	r3, r3, #1
 800777a:	b2da      	uxtb	r2, r3
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	711a      	strb	r2, [r3, #4]
 8007780:	e007      	b.n	8007792 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d102      	bne.n	800778e <create_chain+0x122>
 8007788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800778c:	e000      	b.n	8007790 <create_chain+0x124>
 800778e:	2301      	movs	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007792:	69fb      	ldr	r3, [r7, #28]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3720      	adds	r7, #32
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	3304      	adds	r3, #4
 80077b2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	0a5b      	lsrs	r3, r3, #9
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	8952      	ldrh	r2, [r2, #10]
 80077bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80077c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	1d1a      	adds	r2, r3, #4
 80077c6:	613a      	str	r2, [r7, #16]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <clmt_clust+0x3a>
 80077d2:	2300      	movs	r3, #0
 80077d4:	e010      	b.n	80077f8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d307      	bcc.n	80077ee <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	3304      	adds	r3, #4
 80077ea:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80077ec:	e7e9      	b.n	80077c2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80077ee:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	4413      	add	r3, r2
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800781a:	d204      	bcs.n	8007826 <dir_sdi+0x22>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	f003 031f 	and.w	r3, r3, #31
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007826:	2302      	movs	r3, #2
 8007828:	e063      	b.n	80078f2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d106      	bne.n	800784a <dir_sdi+0x46>
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d902      	bls.n	800784a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10c      	bne.n	800786a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	095b      	lsrs	r3, r3, #5
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	8912      	ldrh	r2, [r2, #8]
 8007858:	4293      	cmp	r3, r2
 800785a:	d301      	bcc.n	8007860 <dir_sdi+0x5c>
 800785c:	2302      	movs	r3, #2
 800785e:	e048      	b.n	80078f2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	61da      	str	r2, [r3, #28]
 8007868:	e029      	b.n	80078be <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	895b      	ldrh	r3, [r3, #10]
 800786e:	025b      	lsls	r3, r3, #9
 8007870:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007872:	e019      	b.n	80078a8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6979      	ldr	r1, [r7, #20]
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff fd06 	bl	800728a <get_fat>
 800787e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007886:	d101      	bne.n	800788c <dir_sdi+0x88>
 8007888:	2301      	movs	r3, #1
 800788a:	e032      	b.n	80078f2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d904      	bls.n	800789c <dir_sdi+0x98>
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	429a      	cmp	r2, r3
 800789a:	d301      	bcc.n	80078a0 <dir_sdi+0x9c>
 800789c:	2302      	movs	r3, #2
 800789e:	e028      	b.n	80078f2 <dir_sdi+0xee>
			ofs -= csz;
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d2e1      	bcs.n	8007874 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80078b0:	6979      	ldr	r1, [r7, #20]
 80078b2:	6938      	ldr	r0, [r7, #16]
 80078b4:	f7ff fcca 	bl	800724c <clust2sect>
 80078b8:	4602      	mov	r2, r0
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <dir_sdi+0xcc>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e010      	b.n	80078f2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	69da      	ldr	r2, [r3, #28]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	0a5b      	lsrs	r3, r3, #9
 80078d8:	441a      	add	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	441a      	add	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b086      	sub	sp, #24
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	3320      	adds	r3, #32
 8007910:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <dir_next+0x28>
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007920:	d301      	bcc.n	8007926 <dir_next+0x2c>
 8007922:	2304      	movs	r3, #4
 8007924:	e0aa      	b.n	8007a7c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 8098 	bne.w	8007a62 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10b      	bne.n	800795c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	8912      	ldrh	r2, [r2, #8]
 800794c:	4293      	cmp	r3, r2
 800794e:	f0c0 8088 	bcc.w	8007a62 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	61da      	str	r2, [r3, #28]
 8007958:	2304      	movs	r3, #4
 800795a:	e08f      	b.n	8007a7c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	0a5b      	lsrs	r3, r3, #9
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	8952      	ldrh	r2, [r2, #10]
 8007964:	3a01      	subs	r2, #1
 8007966:	4013      	ands	r3, r2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d17a      	bne.n	8007a62 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	4619      	mov	r1, r3
 8007974:	4610      	mov	r0, r2
 8007976:	f7ff fc88 	bl	800728a <get_fat>
 800797a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d801      	bhi.n	8007986 <dir_next+0x8c>
 8007982:	2302      	movs	r3, #2
 8007984:	e07a      	b.n	8007a7c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800798c:	d101      	bne.n	8007992 <dir_next+0x98>
 800798e:	2301      	movs	r3, #1
 8007990:	e074      	b.n	8007a7c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	429a      	cmp	r2, r3
 800799a:	d358      	bcc.n	8007a4e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d104      	bne.n	80079ac <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	61da      	str	r2, [r3, #28]
 80079a8:	2304      	movs	r3, #4
 80079aa:	e067      	b.n	8007a7c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	4619      	mov	r1, r3
 80079b4:	4610      	mov	r0, r2
 80079b6:	f7ff fe59 	bl	800766c <create_chain>
 80079ba:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <dir_next+0xcc>
 80079c2:	2307      	movs	r3, #7
 80079c4:	e05a      	b.n	8007a7c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d101      	bne.n	80079d0 <dir_next+0xd6>
 80079cc:	2302      	movs	r3, #2
 80079ce:	e055      	b.n	8007a7c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d6:	d101      	bne.n	80079dc <dir_next+0xe2>
 80079d8:	2301      	movs	r3, #1
 80079da:	e04f      	b.n	8007a7c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7ff fb55 	bl	800708c <sync_window>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <dir_next+0xf2>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e047      	b.n	8007a7c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3330      	adds	r3, #48	; 0x30
 80079f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079f4:	2100      	movs	r1, #0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff f97f 	bl	8006cfa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80079fc:	2300      	movs	r3, #0
 80079fe:	613b      	str	r3, [r7, #16]
 8007a00:	6979      	ldr	r1, [r7, #20]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff fc22 	bl	800724c <clust2sect>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a0e:	e012      	b.n	8007a36 <dir_next+0x13c>
						fs->wflag = 1;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f7ff fb38 	bl	800708c <sync_window>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <dir_next+0x12c>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e02a      	b.n	8007a7c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	613b      	str	r3, [r7, #16]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	895b      	ldrh	r3, [r3, #10]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d3e6      	bcc.n	8007a10 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad2      	subs	r2, r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007a54:	6979      	ldr	r1, [r7, #20]
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff fbf8 	bl	800724c <clust2sect>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a74:	441a      	add	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007a94:	2100      	movs	r1, #0
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff feb4 	bl	8007804 <dir_sdi>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d12b      	bne.n	8007afe <dir_alloc+0x7a>
		n = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f7ff fb2f 	bl	8007114 <move_window>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d11d      	bne.n	8007afc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2be5      	cmp	r3, #229	; 0xe5
 8007ac8:	d004      	beq.n	8007ad4 <dir_alloc+0x50>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d107      	bne.n	8007ae4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d102      	bne.n	8007ae8 <dir_alloc+0x64>
 8007ae2:	e00c      	b.n	8007afe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007ae8:	2101      	movs	r1, #1
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff ff05 	bl	80078fa <dir_next>
 8007af0:	4603      	mov	r3, r0
 8007af2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0d7      	beq.n	8007aaa <dir_alloc+0x26>
 8007afa:	e000      	b.n	8007afe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007afc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d101      	bne.n	8007b08 <dir_alloc+0x84>
 8007b04:	2307      	movs	r3, #7
 8007b06:	75fb      	strb	r3, [r7, #23]
	return res;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	331a      	adds	r3, #26
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff f847 	bl	8006bb4 <ld_word>
 8007b26:	4603      	mov	r3, r0
 8007b28:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d109      	bne.n	8007b46 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	3314      	adds	r3, #20
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff f83c 	bl	8006bb4 <ld_word>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	041b      	lsls	r3, r3, #16
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007b46:	68fb      	ldr	r3, [r7, #12]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	331a      	adds	r3, #26
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	b292      	uxth	r2, r2
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff f85f 	bl	8006c2a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d109      	bne.n	8007b88 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f103 0214 	add.w	r2, r3, #20
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	4619      	mov	r1, r3
 8007b82:	4610      	mov	r0, r2
 8007b84:	f7ff f851 	bl	8006c2a <st_word>
	}
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff fe2f 	bl	8007804 <dir_sdi>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <dir_find+0x24>
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	e03e      	b.n	8007c32 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6938      	ldr	r0, [r7, #16]
 8007bbc:	f7ff faaa 	bl	8007114 <move_window>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007bc4:	7dfb      	ldrb	r3, [r7, #23]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d12f      	bne.n	8007c2a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <dir_find+0x4e>
 8007bd8:	2304      	movs	r3, #4
 8007bda:	75fb      	strb	r3, [r7, #23]
 8007bdc:	e028      	b.n	8007c30 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	330b      	adds	r3, #11
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	330b      	adds	r3, #11
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <dir_find+0x86>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a18      	ldr	r0, [r3, #32]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3324      	adds	r3, #36	; 0x24
 8007c08:	220b      	movs	r2, #11
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	f7ff f88f 	bl	8006d2e <mem_cmp>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00b      	beq.n	8007c2e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007c16:	2100      	movs	r1, #0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff fe6e 	bl	80078fa <dir_next>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0c5      	beq.n	8007bb4 <dir_find+0x24>
 8007c28:	e002      	b.n	8007c30 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007c2a:	bf00      	nop
 8007c2c:	e000      	b.n	8007c30 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c2e:	bf00      	nop

	return res;
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007c48:	2101      	movs	r1, #1
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7ff ff1a 	bl	8007a84 <dir_alloc>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d11c      	bne.n	8007c94 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68b8      	ldr	r0, [r7, #8]
 8007c62:	f7ff fa57 	bl	8007114 <move_window>
 8007c66:	4603      	mov	r3, r0
 8007c68:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d111      	bne.n	8007c94 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	2220      	movs	r2, #32
 8007c76:	2100      	movs	r1, #0
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff f83e 	bl	8006cfa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a18      	ldr	r0, [r3, #32]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3324      	adds	r3, #36	; 0x24
 8007c86:	220b      	movs	r2, #11
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f7ff f815 	bl	8006cb8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2201      	movs	r2, #1
 8007c92:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3324      	adds	r3, #36	; 0x24
 8007cb4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007cb6:	220b      	movs	r2, #11
 8007cb8:	2120      	movs	r1, #32
 8007cba:	68b8      	ldr	r0, [r7, #8]
 8007cbc:	f7ff f81d 	bl	8006cfa <mem_set>
	si = i = 0; ni = 8;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	613b      	str	r3, [r7, #16]
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	2308      	movs	r3, #8
 8007cca:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	617a      	str	r2, [r7, #20]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007cda:	7ffb      	ldrb	r3, [r7, #31]
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	d94e      	bls.n	8007d7e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007ce0:	7ffb      	ldrb	r3, [r7, #31]
 8007ce2:	2b2f      	cmp	r3, #47	; 0x2f
 8007ce4:	d006      	beq.n	8007cf4 <create_name+0x54>
 8007ce6:	7ffb      	ldrb	r3, [r7, #31]
 8007ce8:	2b5c      	cmp	r3, #92	; 0x5c
 8007cea:	d110      	bne.n	8007d0e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007cec:	e002      	b.n	8007cf4 <create_name+0x54>
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b2f      	cmp	r3, #47	; 0x2f
 8007cfe:	d0f6      	beq.n	8007cee <create_name+0x4e>
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	4413      	add	r3, r2
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b5c      	cmp	r3, #92	; 0x5c
 8007d0a:	d0f0      	beq.n	8007cee <create_name+0x4e>
			break;
 8007d0c:	e038      	b.n	8007d80 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007d0e:	7ffb      	ldrb	r3, [r7, #31]
 8007d10:	2b2e      	cmp	r3, #46	; 0x2e
 8007d12:	d003      	beq.n	8007d1c <create_name+0x7c>
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d30c      	bcc.n	8007d36 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	2b0b      	cmp	r3, #11
 8007d20:	d002      	beq.n	8007d28 <create_name+0x88>
 8007d22:	7ffb      	ldrb	r3, [r7, #31]
 8007d24:	2b2e      	cmp	r3, #46	; 0x2e
 8007d26:	d001      	beq.n	8007d2c <create_name+0x8c>
 8007d28:	2306      	movs	r3, #6
 8007d2a:	e044      	b.n	8007db6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007d2c:	2308      	movs	r3, #8
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	230b      	movs	r3, #11
 8007d32:	61bb      	str	r3, [r7, #24]
			continue;
 8007d34:	e022      	b.n	8007d7c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007d36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	da04      	bge.n	8007d48 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007d3e:	7ffb      	ldrb	r3, [r7, #31]
 8007d40:	3b80      	subs	r3, #128	; 0x80
 8007d42:	4a1f      	ldr	r2, [pc, #124]	; (8007dc0 <create_name+0x120>)
 8007d44:	5cd3      	ldrb	r3, [r2, r3]
 8007d46:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007d48:	7ffb      	ldrb	r3, [r7, #31]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	481d      	ldr	r0, [pc, #116]	; (8007dc4 <create_name+0x124>)
 8007d4e:	f7ff f815 	bl	8006d7c <chk_chr>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <create_name+0xbc>
 8007d58:	2306      	movs	r3, #6
 8007d5a:	e02c      	b.n	8007db6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007d5c:	7ffb      	ldrb	r3, [r7, #31]
 8007d5e:	2b60      	cmp	r3, #96	; 0x60
 8007d60:	d905      	bls.n	8007d6e <create_name+0xce>
 8007d62:	7ffb      	ldrb	r3, [r7, #31]
 8007d64:	2b7a      	cmp	r3, #122	; 0x7a
 8007d66:	d802      	bhi.n	8007d6e <create_name+0xce>
 8007d68:	7ffb      	ldrb	r3, [r7, #31]
 8007d6a:	3b20      	subs	r3, #32
 8007d6c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	613a      	str	r2, [r7, #16]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	4413      	add	r3, r2
 8007d78:	7ffa      	ldrb	r2, [r7, #31]
 8007d7a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007d7c:	e7a6      	b.n	8007ccc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007d7e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	441a      	add	r2, r3
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <create_name+0xf4>
 8007d90:	2306      	movs	r3, #6
 8007d92:	e010      	b.n	8007db6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2be5      	cmp	r3, #229	; 0xe5
 8007d9a:	d102      	bne.n	8007da2 <create_name+0x102>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2205      	movs	r2, #5
 8007da0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007da2:	7ffb      	ldrb	r3, [r7, #31]
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	d801      	bhi.n	8007dac <create_name+0x10c>
 8007da8:	2204      	movs	r2, #4
 8007daa:	e000      	b.n	8007dae <create_name+0x10e>
 8007dac:	2200      	movs	r2, #0
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	330b      	adds	r3, #11
 8007db2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007db4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3720      	adds	r7, #32
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	08009404 	.word	0x08009404
 8007dc4:	08009128 	.word	0x08009128

08007dc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007ddc:	e002      	b.n	8007de4 <follow_path+0x1c>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	3301      	adds	r3, #1
 8007de2:	603b      	str	r3, [r7, #0]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b2f      	cmp	r3, #47	; 0x2f
 8007dea:	d0f8      	beq.n	8007dde <follow_path+0x16>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b5c      	cmp	r3, #92	; 0x5c
 8007df2:	d0f4      	beq.n	8007dde <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	2200      	movs	r2, #0
 8007df8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b1f      	cmp	r3, #31
 8007e00:	d80a      	bhi.n	8007e18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2280      	movs	r2, #128	; 0x80
 8007e06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff fcf9 	bl	8007804 <dir_sdi>
 8007e12:	4603      	mov	r3, r0
 8007e14:	75fb      	strb	r3, [r7, #23]
 8007e16:	e043      	b.n	8007ea0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e18:	463b      	mov	r3, r7
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff ff3f 	bl	8007ca0 <create_name>
 8007e22:	4603      	mov	r3, r0
 8007e24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d134      	bne.n	8007e96 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff feaf 	bl	8007b90 <dir_find>
 8007e32:	4603      	mov	r3, r0
 8007e34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007e3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d127      	bne.n	8007e9a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007e4a:	7afb      	ldrb	r3, [r7, #11]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d122      	bne.n	8007e9a <follow_path+0xd2>
 8007e54:	2305      	movs	r3, #5
 8007e56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007e58:	e01f      	b.n	8007e9a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e5a:	7afb      	ldrb	r3, [r7, #11]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d11c      	bne.n	8007e9e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	799b      	ldrb	r3, [r3, #6]
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007e70:	2305      	movs	r3, #5
 8007e72:	75fb      	strb	r3, [r7, #23]
 8007e74:	e014      	b.n	8007ea0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e84:	4413      	add	r3, r2
 8007e86:	4619      	mov	r1, r3
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7ff fe42 	bl	8007b12 <ld_clust>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e94:	e7c0      	b.n	8007e18 <follow_path+0x50>
			if (res != FR_OK) break;
 8007e96:	bf00      	nop
 8007e98:	e002      	b.n	8007ea0 <follow_path+0xd8>
				break;
 8007e9a:	bf00      	nop
 8007e9c:	e000      	b.n	8007ea0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e9e:	bf00      	nop
			}
		}
	}

	return res;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b087      	sub	sp, #28
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eb6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d031      	beq.n	8007f24 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	617b      	str	r3, [r7, #20]
 8007ec6:	e002      	b.n	8007ece <get_ldnumber+0x24>
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	617b      	str	r3, [r7, #20]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d903      	bls.n	8007ede <get_ldnumber+0x34>
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b3a      	cmp	r3, #58	; 0x3a
 8007edc:	d1f4      	bne.n	8007ec8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b3a      	cmp	r3, #58	; 0x3a
 8007ee4:	d11c      	bne.n	8007f20 <get_ldnumber+0x76>
			tp = *path;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	60fa      	str	r2, [r7, #12]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	3b30      	subs	r3, #48	; 0x30
 8007ef6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b09      	cmp	r3, #9
 8007efc:	d80e      	bhi.n	8007f1c <get_ldnumber+0x72>
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d10a      	bne.n	8007f1c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d107      	bne.n	8007f1c <get_ldnumber+0x72>
					vol = (int)i;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	3301      	adds	r3, #1
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	e002      	b.n	8007f26 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007f20:	2300      	movs	r3, #0
 8007f22:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007f24:	693b      	ldr	r3, [r7, #16]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
	...

08007f34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	70da      	strb	r2, [r3, #3]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f4a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff f8e0 	bl	8007114 <move_window>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <check_fs+0x2a>
 8007f5a:	2304      	movs	r3, #4
 8007f5c:	e038      	b.n	8007fd0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3330      	adds	r3, #48	; 0x30
 8007f62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe fe24 	bl	8006bb4 <ld_word>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d001      	beq.n	8007f7c <check_fs+0x48>
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e029      	b.n	8007fd0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f82:	2be9      	cmp	r3, #233	; 0xe9
 8007f84:	d009      	beq.n	8007f9a <check_fs+0x66>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f8c:	2beb      	cmp	r3, #235	; 0xeb
 8007f8e:	d11e      	bne.n	8007fce <check_fs+0x9a>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007f96:	2b90      	cmp	r3, #144	; 0x90
 8007f98:	d119      	bne.n	8007fce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3330      	adds	r3, #48	; 0x30
 8007f9e:	3336      	adds	r3, #54	; 0x36
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe fe1f 	bl	8006be4 <ld_dword>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007fac:	4a0a      	ldr	r2, [pc, #40]	; (8007fd8 <check_fs+0xa4>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d101      	bne.n	8007fb6 <check_fs+0x82>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	e00c      	b.n	8007fd0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3330      	adds	r3, #48	; 0x30
 8007fba:	3352      	adds	r3, #82	; 0x52
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fe11 	bl	8006be4 <ld_dword>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <check_fs+0xa8>)
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d101      	bne.n	8007fce <check_fs+0x9a>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e000      	b.n	8007fd0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007fce:	2302      	movs	r3, #2
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	00544146 	.word	0x00544146
 8007fdc:	33544146 	.word	0x33544146

08007fe0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b096      	sub	sp, #88	; 0x58
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f7ff ff58 	bl	8007eaa <get_ldnumber>
 8007ffa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	da01      	bge.n	8008006 <find_volume+0x26>
 8008002:	230b      	movs	r3, #11
 8008004:	e22e      	b.n	8008464 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008006:	4aa8      	ldr	r2, [pc, #672]	; (80082a8 <find_volume+0x2c8>)
 8008008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800800e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <find_volume+0x3a>
 8008016:	230c      	movs	r3, #12
 8008018:	e224      	b.n	8008464 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800801e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	f023 0301 	bic.w	r3, r3, #1
 8008026:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01a      	beq.n	8008066 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe fd1f 	bl	8006a78 <disk_status>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008040:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10c      	bne.n	8008066 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d007      	beq.n	8008062 <find_volume+0x82>
 8008052:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008056:	f003 0304 	and.w	r3, r3, #4
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800805e:	230a      	movs	r3, #10
 8008060:	e200      	b.n	8008464 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8008062:	2300      	movs	r3, #0
 8008064:	e1fe      	b.n	8008464 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	2200      	movs	r2, #0
 800806a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800806c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800806e:	b2da      	uxtb	r2, r3
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe fd17 	bl	8006aac <disk_initialize>
 800807e:	4603      	mov	r3, r0
 8008080:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008090:	2303      	movs	r3, #3
 8008092:	e1e7      	b.n	8008464 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d007      	beq.n	80080aa <find_volume+0xca>
 800809a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800809e:	f003 0304 	and.w	r3, r3, #4
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80080a6:	230a      	movs	r3, #10
 80080a8:	e1dc      	b.n	8008464 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80080ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080b2:	f7ff ff3f 	bl	8007f34 <check_fs>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80080bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d14b      	bne.n	800815c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80080c4:	2300      	movs	r3, #0
 80080c6:	643b      	str	r3, [r7, #64]	; 0x40
 80080c8:	e01f      	b.n	800810a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d2:	011b      	lsls	r3, r3, #4
 80080d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80080d8:	4413      	add	r3, r2
 80080da:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	3304      	adds	r3, #4
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d006      	beq.n	80080f4 <find_volume+0x114>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	3308      	adds	r3, #8
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe fd7a 	bl	8006be4 <ld_dword>
 80080f0:	4602      	mov	r2, r0
 80080f2:	e000      	b.n	80080f6 <find_volume+0x116>
 80080f4:	2200      	movs	r2, #0
 80080f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80080fe:	440b      	add	r3, r1
 8008100:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008106:	3301      	adds	r3, #1
 8008108:	643b      	str	r3, [r7, #64]	; 0x40
 800810a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800810c:	2b03      	cmp	r3, #3
 800810e:	d9dc      	bls.n	80080ca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008110:	2300      	movs	r3, #0
 8008112:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <find_volume+0x140>
 800811a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800811c:	3b01      	subs	r3, #1
 800811e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008128:	4413      	add	r3, r2
 800812a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800812e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <find_volume+0x162>
 8008136:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008138:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800813a:	f7ff fefb 	bl	8007f34 <check_fs>
 800813e:	4603      	mov	r3, r0
 8008140:	e000      	b.n	8008144 <find_volume+0x164>
 8008142:	2303      	movs	r3, #3
 8008144:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008148:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800814c:	2b01      	cmp	r3, #1
 800814e:	d905      	bls.n	800815c <find_volume+0x17c>
 8008150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008152:	3301      	adds	r3, #1
 8008154:	643b      	str	r3, [r7, #64]	; 0x40
 8008156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008158:	2b03      	cmp	r3, #3
 800815a:	d9e1      	bls.n	8008120 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800815c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008160:	2b04      	cmp	r3, #4
 8008162:	d101      	bne.n	8008168 <find_volume+0x188>
 8008164:	2301      	movs	r3, #1
 8008166:	e17d      	b.n	8008464 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800816c:	2b01      	cmp	r3, #1
 800816e:	d901      	bls.n	8008174 <find_volume+0x194>
 8008170:	230d      	movs	r3, #13
 8008172:	e177      	b.n	8008464 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008176:	3330      	adds	r3, #48	; 0x30
 8008178:	330b      	adds	r3, #11
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe fd1a 	bl	8006bb4 <ld_word>
 8008180:	4603      	mov	r3, r0
 8008182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008186:	d001      	beq.n	800818c <find_volume+0x1ac>
 8008188:	230d      	movs	r3, #13
 800818a:	e16b      	b.n	8008464 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	3330      	adds	r3, #48	; 0x30
 8008190:	3316      	adds	r3, #22
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe fd0e 	bl	8006bb4 <ld_word>
 8008198:	4603      	mov	r3, r0
 800819a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800819c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <find_volume+0x1d0>
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	3330      	adds	r3, #48	; 0x30
 80081a6:	3324      	adds	r3, #36	; 0x24
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe fd1b 	bl	8006be4 <ld_dword>
 80081ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081b4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	789b      	ldrb	r3, [r3, #2]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d005      	beq.n	80081d4 <find_volume+0x1f4>
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	789b      	ldrb	r3, [r3, #2]
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d001      	beq.n	80081d4 <find_volume+0x1f4>
 80081d0:	230d      	movs	r3, #13
 80081d2:	e147      	b.n	8008464 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	789b      	ldrb	r3, [r3, #2]
 80081d8:	461a      	mov	r2, r3
 80081da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081dc:	fb02 f303 	mul.w	r3, r2, r3
 80081e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	895b      	ldrh	r3, [r3, #10]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d008      	beq.n	8008208 <find_volume+0x228>
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	895b      	ldrh	r3, [r3, #10]
 80081fa:	461a      	mov	r2, r3
 80081fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fe:	895b      	ldrh	r3, [r3, #10]
 8008200:	3b01      	subs	r3, #1
 8008202:	4013      	ands	r3, r2
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <find_volume+0x22c>
 8008208:	230d      	movs	r3, #13
 800820a:	e12b      	b.n	8008464 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	3330      	adds	r3, #48	; 0x30
 8008210:	3311      	adds	r3, #17
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fcce 	bl	8006bb4 <ld_word>
 8008218:	4603      	mov	r3, r0
 800821a:	461a      	mov	r2, r3
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	891b      	ldrh	r3, [r3, #8]
 8008224:	f003 030f 	and.w	r3, r3, #15
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <find_volume+0x252>
 800822e:	230d      	movs	r3, #13
 8008230:	e118      	b.n	8008464 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	3330      	adds	r3, #48	; 0x30
 8008236:	3313      	adds	r3, #19
 8008238:	4618      	mov	r0, r3
 800823a:	f7fe fcbb 	bl	8006bb4 <ld_word>
 800823e:	4603      	mov	r3, r0
 8008240:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <find_volume+0x276>
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	3330      	adds	r3, #48	; 0x30
 800824c:	3320      	adds	r3, #32
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fcc8 	bl	8006be4 <ld_dword>
 8008254:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	3330      	adds	r3, #48	; 0x30
 800825a:	330e      	adds	r3, #14
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe fca9 	bl	8006bb4 <ld_word>
 8008262:	4603      	mov	r3, r0
 8008264:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008266:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <find_volume+0x290>
 800826c:	230d      	movs	r3, #13
 800826e:	e0f9      	b.n	8008464 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008270:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008274:	4413      	add	r3, r2
 8008276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008278:	8912      	ldrh	r2, [r2, #8]
 800827a:	0912      	lsrs	r2, r2, #4
 800827c:	b292      	uxth	r2, r2
 800827e:	4413      	add	r3, r2
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	429a      	cmp	r2, r3
 8008288:	d201      	bcs.n	800828e <find_volume+0x2ae>
 800828a:	230d      	movs	r3, #13
 800828c:	e0ea      	b.n	8008464 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800828e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008296:	8952      	ldrh	r2, [r2, #10]
 8008298:	fbb3 f3f2 	udiv	r3, r3, r2
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d103      	bne.n	80082ac <find_volume+0x2cc>
 80082a4:	230d      	movs	r3, #13
 80082a6:	e0dd      	b.n	8008464 <find_volume+0x484>
 80082a8:	20000078 	.word	0x20000078
		fmt = FS_FAT32;
 80082ac:	2303      	movs	r3, #3
 80082ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d802      	bhi.n	80082c2 <find_volume+0x2e2>
 80082bc:	2302      	movs	r3, #2
 80082be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d802      	bhi.n	80082d2 <find_volume+0x2f2>
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	1c9a      	adds	r2, r3, #2
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082de:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80082e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e4:	441a      	add	r2, r3
 80082e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80082ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	441a      	add	r2, r3
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80082f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d11e      	bne.n	800833a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	3330      	adds	r3, #48	; 0x30
 8008300:	332a      	adds	r3, #42	; 0x2a
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fc56 	bl	8006bb4 <ld_word>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <find_volume+0x332>
 800830e:	230d      	movs	r3, #13
 8008310:	e0a8      	b.n	8008464 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	891b      	ldrh	r3, [r3, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <find_volume+0x33e>
 800831a:	230d      	movs	r3, #13
 800831c:	e0a2      	b.n	8008464 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008320:	3330      	adds	r3, #48	; 0x30
 8008322:	332c      	adds	r3, #44	; 0x2c
 8008324:	4618      	mov	r0, r3
 8008326:	f7fe fc5d 	bl	8006be4 <ld_dword>
 800832a:	4602      	mov	r2, r0
 800832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	647b      	str	r3, [r7, #68]	; 0x44
 8008338:	e01f      	b.n	800837a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	891b      	ldrh	r3, [r3, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <find_volume+0x366>
 8008342:	230d      	movs	r3, #13
 8008344:	e08e      	b.n	8008464 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	6a1a      	ldr	r2, [r3, #32]
 800834a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834c:	441a      	add	r2, r3
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008356:	2b02      	cmp	r3, #2
 8008358:	d103      	bne.n	8008362 <find_volume+0x382>
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	e00a      	b.n	8008378 <find_volume+0x398>
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	695a      	ldr	r2, [r3, #20]
 8008366:	4613      	mov	r3, r2
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	4413      	add	r3, r2
 800836c:	085a      	lsrs	r2, r3, #1
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008378:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008380:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008384:	0a5b      	lsrs	r3, r3, #9
 8008386:	429a      	cmp	r2, r3
 8008388:	d201      	bcs.n	800838e <find_volume+0x3ae>
 800838a:	230d      	movs	r3, #13
 800838c:	e06a      	b.n	8008464 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008394:	611a      	str	r2, [r3, #16]
 8008396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800839e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a0:	2280      	movs	r2, #128	; 0x80
 80083a2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80083a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d149      	bne.n	8008440 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	3330      	adds	r3, #48	; 0x30
 80083b0:	3330      	adds	r3, #48	; 0x30
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe fbfe 	bl	8006bb4 <ld_word>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d140      	bne.n	8008440 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80083be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c0:	3301      	adds	r3, #1
 80083c2:	4619      	mov	r1, r3
 80083c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083c6:	f7fe fea5 	bl	8007114 <move_window>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d137      	bne.n	8008440 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	2200      	movs	r2, #0
 80083d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	3330      	adds	r3, #48	; 0x30
 80083da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe fbe8 	bl	8006bb4 <ld_word>
 80083e4:	4603      	mov	r3, r0
 80083e6:	461a      	mov	r2, r3
 80083e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d127      	bne.n	8008440 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	3330      	adds	r3, #48	; 0x30
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fe fbf5 	bl	8006be4 <ld_dword>
 80083fa:	4602      	mov	r2, r0
 80083fc:	4b1b      	ldr	r3, [pc, #108]	; (800846c <find_volume+0x48c>)
 80083fe:	429a      	cmp	r2, r3
 8008400:	d11e      	bne.n	8008440 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	3330      	adds	r3, #48	; 0x30
 8008406:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe fbea 	bl	8006be4 <ld_dword>
 8008410:	4602      	mov	r2, r0
 8008412:	4b17      	ldr	r3, [pc, #92]	; (8008470 <find_volume+0x490>)
 8008414:	429a      	cmp	r2, r3
 8008416:	d113      	bne.n	8008440 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	3330      	adds	r3, #48	; 0x30
 800841c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe fbdf 	bl	8006be4 <ld_dword>
 8008426:	4602      	mov	r2, r0
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	3330      	adds	r3, #48	; 0x30
 8008430:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fbd5 	bl	8006be4 <ld_dword>
 800843a:	4602      	mov	r2, r0
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008446:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008448:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <find_volume+0x494>)
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	3301      	adds	r3, #1
 800844e:	b29a      	uxth	r2, r3
 8008450:	4b08      	ldr	r3, [pc, #32]	; (8008474 <find_volume+0x494>)
 8008452:	801a      	strh	r2, [r3, #0]
 8008454:	4b07      	ldr	r3, [pc, #28]	; (8008474 <find_volume+0x494>)
 8008456:	881a      	ldrh	r2, [r3, #0]
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800845c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800845e:	f7fe fdf1 	bl	8007044 <clear_lock>
#endif
	return FR_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3758      	adds	r7, #88	; 0x58
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	41615252 	.word	0x41615252
 8008470:	61417272 	.word	0x61417272
 8008474:	2000007c 	.word	0x2000007c

08008478 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008482:	2309      	movs	r3, #9
 8008484:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01c      	beq.n	80084c6 <validate+0x4e>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d018      	beq.n	80084c6 <validate+0x4e>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d013      	beq.n	80084c6 <validate+0x4e>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	889a      	ldrh	r2, [r3, #4]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	88db      	ldrh	r3, [r3, #6]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d10c      	bne.n	80084c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	785b      	ldrb	r3, [r3, #1]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fae0 	bl	8006a78 <disk_status>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <validate+0x4e>
			res = FR_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d102      	bne.n	80084d2 <validate+0x5a>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	e000      	b.n	80084d4 <validate+0x5c>
 80084d2:	2300      	movs	r3, #0
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	6013      	str	r3, [r2, #0]
	return res;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80084f6:	f107 0310 	add.w	r3, r7, #16
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7ff fcd5 	bl	8007eaa <get_ldnumber>
 8008500:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	2b00      	cmp	r3, #0
 8008506:	da01      	bge.n	800850c <f_mount+0x28>
 8008508:	230b      	movs	r3, #11
 800850a:	e02b      	b.n	8008564 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800850c:	4a17      	ldr	r2, [pc, #92]	; (800856c <f_mount+0x88>)
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008514:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800851c:	69b8      	ldr	r0, [r7, #24]
 800851e:	f7fe fd91 	bl	8007044 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	2200      	movs	r2, #0
 8008526:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	490d      	ldr	r1, [pc, #52]	; (800856c <f_mount+0x88>)
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <f_mount+0x66>
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d001      	beq.n	800854e <f_mount+0x6a>
 800854a:	2300      	movs	r3, #0
 800854c:	e00a      	b.n	8008564 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800854e:	f107 010c 	add.w	r1, r7, #12
 8008552:	f107 0308 	add.w	r3, r7, #8
 8008556:	2200      	movs	r2, #0
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff fd41 	bl	8007fe0 <find_volume>
 800855e:	4603      	mov	r3, r0
 8008560:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008562:	7dfb      	ldrb	r3, [r7, #23]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3720      	adds	r7, #32
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20000078 	.word	0x20000078

08008570 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b098      	sub	sp, #96	; 0x60
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	4613      	mov	r3, r2
 800857c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <f_open+0x18>
 8008584:	2309      	movs	r3, #9
 8008586:	e1ad      	b.n	80088e4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008588:	79fb      	ldrb	r3, [r7, #7]
 800858a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800858e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008590:	79fa      	ldrb	r2, [r7, #7]
 8008592:	f107 0110 	add.w	r1, r7, #16
 8008596:	f107 0308 	add.w	r3, r7, #8
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff fd20 	bl	8007fe0 <find_volume>
 80085a0:	4603      	mov	r3, r0
 80085a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80085a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f040 8191 	bne.w	80088d2 <f_open+0x362>
		dj.obj.fs = fs;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	f107 0314 	add.w	r3, r7, #20
 80085ba:	4611      	mov	r1, r2
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff fc03 	bl	8007dc8 <follow_path>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80085c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d11a      	bne.n	8008606 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80085d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085d4:	b25b      	sxtb	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	da03      	bge.n	80085e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80085da:	2306      	movs	r3, #6
 80085dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80085e0:	e011      	b.n	8008606 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	f023 0301 	bic.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	bf14      	ite	ne
 80085ec:	2301      	movne	r3, #1
 80085ee:	2300      	moveq	r3, #0
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	461a      	mov	r2, r3
 80085f4:	f107 0314 	add.w	r3, r7, #20
 80085f8:	4611      	mov	r1, r2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fbda 	bl	8006db4 <chk_lock>
 8008600:	4603      	mov	r3, r0
 8008602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	f003 031c 	and.w	r3, r3, #28
 800860c:	2b00      	cmp	r3, #0
 800860e:	d07f      	beq.n	8008710 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008610:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008614:	2b00      	cmp	r3, #0
 8008616:	d017      	beq.n	8008648 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800861c:	2b04      	cmp	r3, #4
 800861e:	d10e      	bne.n	800863e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008620:	f7fe fc24 	bl	8006e6c <enq_lock>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d006      	beq.n	8008638 <f_open+0xc8>
 800862a:	f107 0314 	add.w	r3, r7, #20
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff fb03 	bl	8007c3a <dir_register>
 8008634:	4603      	mov	r3, r0
 8008636:	e000      	b.n	800863a <f_open+0xca>
 8008638:	2312      	movs	r3, #18
 800863a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	f043 0308 	orr.w	r3, r3, #8
 8008644:	71fb      	strb	r3, [r7, #7]
 8008646:	e010      	b.n	800866a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008648:	7ebb      	ldrb	r3, [r7, #26]
 800864a:	f003 0311 	and.w	r3, r3, #17
 800864e:	2b00      	cmp	r3, #0
 8008650:	d003      	beq.n	800865a <f_open+0xea>
					res = FR_DENIED;
 8008652:	2307      	movs	r3, #7
 8008654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008658:	e007      	b.n	800866a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	f003 0304 	and.w	r3, r3, #4
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <f_open+0xfa>
 8008664:	2308      	movs	r3, #8
 8008666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800866a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800866e:	2b00      	cmp	r3, #0
 8008670:	d168      	bne.n	8008744 <f_open+0x1d4>
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	f003 0308 	and.w	r3, r3, #8
 8008678:	2b00      	cmp	r3, #0
 800867a:	d063      	beq.n	8008744 <f_open+0x1d4>
				dw = GET_FATTIME();
 800867c:	f7fe f99e 	bl	80069bc <get_fattime>
 8008680:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008684:	330e      	adds	r3, #14
 8008686:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe fae9 	bl	8006c60 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800868e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008690:	3316      	adds	r3, #22
 8008692:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe fae3 	bl	8006c60 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800869a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869c:	330b      	adds	r3, #11
 800869e:	2220      	movs	r2, #32
 80086a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086a6:	4611      	mov	r1, r2
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff fa32 	bl	8007b12 <ld_clust>
 80086ae:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086b4:	2200      	movs	r2, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff fa4a 	bl	8007b50 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80086bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086be:	331c      	adds	r3, #28
 80086c0:	2100      	movs	r1, #0
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe facc 	bl	8006c60 <st_dword>
					fs->wflag = 1;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	2201      	movs	r2, #1
 80086cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80086ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d037      	beq.n	8008744 <f_open+0x1d4>
						dw = fs->winsect;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80086da:	f107 0314 	add.w	r3, r7, #20
 80086de:	2200      	movs	r2, #0
 80086e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe ff5d 	bl	80075a2 <remove_chain>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80086ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d126      	bne.n	8008744 <f_open+0x1d4>
							res = move_window(fs, dw);
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe fd0a 	bl	8007114 <move_window>
 8008700:	4603      	mov	r3, r0
 8008702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800870a:	3a01      	subs	r2, #1
 800870c:	60da      	str	r2, [r3, #12]
 800870e:	e019      	b.n	8008744 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008714:	2b00      	cmp	r3, #0
 8008716:	d115      	bne.n	8008744 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008718:	7ebb      	ldrb	r3, [r7, #26]
 800871a:	f003 0310 	and.w	r3, r3, #16
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008722:	2304      	movs	r3, #4
 8008724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008728:	e00c      	b.n	8008744 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <f_open+0x1d4>
 8008734:	7ebb      	ldrb	r3, [r7, #26]
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <f_open+0x1d4>
						res = FR_DENIED;
 800873e:	2307      	movs	r3, #7
 8008740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008748:	2b00      	cmp	r3, #0
 800874a:	d128      	bne.n	800879e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	f003 0308 	and.w	r3, r3, #8
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800875c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800876c:	79fb      	ldrb	r3, [r7, #7]
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	bf14      	ite	ne
 8008776:	2301      	movne	r3, #1
 8008778:	2300      	moveq	r3, #0
 800877a:	b2db      	uxtb	r3, r3
 800877c:	461a      	mov	r2, r3
 800877e:	f107 0314 	add.w	r3, r7, #20
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f7fe fb93 	bl	8006eb0 <inc_lock>
 800878a:	4602      	mov	r2, r0
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d102      	bne.n	800879e <f_open+0x22e>
 8008798:	2302      	movs	r3, #2
 800879a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800879e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f040 8095 	bne.w	80088d2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff f9af 	bl	8007b12 <ld_clust>
 80087b4:	4602      	mov	r2, r0
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80087ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087bc:	331c      	adds	r3, #28
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe fa10 	bl	8006be4 <ld_dword>
 80087c4:	4602      	mov	r2, r0
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	88da      	ldrh	r2, [r3, #6]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	79fa      	ldrb	r2, [r7, #7]
 80087e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3330      	adds	r3, #48	; 0x30
 80087fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087fe:	2100      	movs	r1, #0
 8008800:	4618      	mov	r0, r3
 8008802:	f7fe fa7a 	bl	8006cfa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008806:	79fb      	ldrb	r3, [r7, #7]
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b00      	cmp	r3, #0
 800880e:	d060      	beq.n	80088d2 <f_open+0x362>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d05c      	beq.n	80088d2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	68da      	ldr	r2, [r3, #12]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	895b      	ldrh	r3, [r3, #10]
 8008824:	025b      	lsls	r3, r3, #9
 8008826:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	657b      	str	r3, [r7, #84]	; 0x54
 8008834:	e016      	b.n	8008864 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe fd25 	bl	800728a <get_fat>
 8008840:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008844:	2b01      	cmp	r3, #1
 8008846:	d802      	bhi.n	800884e <f_open+0x2de>
 8008848:	2302      	movs	r3, #2
 800884a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800884e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008854:	d102      	bne.n	800885c <f_open+0x2ec>
 8008856:	2301      	movs	r3, #1
 8008858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800885c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800885e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	657b      	str	r3, [r7, #84]	; 0x54
 8008864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008868:	2b00      	cmp	r3, #0
 800886a:	d103      	bne.n	8008874 <f_open+0x304>
 800886c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800886e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008870:	429a      	cmp	r2, r3
 8008872:	d8e0      	bhi.n	8008836 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008878:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800887a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800887e:	2b00      	cmp	r3, #0
 8008880:	d127      	bne.n	80088d2 <f_open+0x362>
 8008882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008888:	2b00      	cmp	r3, #0
 800888a:	d022      	beq.n	80088d2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe fcdb 	bl	800724c <clust2sect>
 8008896:	6478      	str	r0, [r7, #68]	; 0x44
 8008898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800889a:	2b00      	cmp	r3, #0
 800889c:	d103      	bne.n	80088a6 <f_open+0x336>
						res = FR_INT_ERR;
 800889e:	2302      	movs	r3, #2
 80088a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80088a4:	e015      	b.n	80088d2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80088a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a8:	0a5a      	lsrs	r2, r3, #9
 80088aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ac:	441a      	add	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	7858      	ldrb	r0, [r3, #1]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a1a      	ldr	r2, [r3, #32]
 80088c0:	2301      	movs	r3, #1
 80088c2:	f7fe f919 	bl	8006af8 <disk_read>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <f_open+0x362>
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80088d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <f_open+0x370>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80088e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3760      	adds	r7, #96	; 0x60
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08e      	sub	sp, #56	; 0x38
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f107 0214 	add.w	r2, r7, #20
 800890a:	4611      	mov	r1, r2
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff fdb3 	bl	8008478 <validate>
 8008912:	4603      	mov	r3, r0
 8008914:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800891c:	2b00      	cmp	r3, #0
 800891e:	d107      	bne.n	8008930 <f_read+0x44>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	7d5b      	ldrb	r3, [r3, #21]
 8008924:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <f_read+0x4a>
 8008930:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008934:	e115      	b.n	8008b62 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	7d1b      	ldrb	r3, [r3, #20]
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <f_read+0x5a>
 8008942:	2307      	movs	r3, #7
 8008944:	e10d      	b.n	8008b62 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	429a      	cmp	r2, r3
 8008958:	f240 80fe 	bls.w	8008b58 <f_read+0x26c>
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008960:	e0fa      	b.n	8008b58 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896a:	2b00      	cmp	r3, #0
 800896c:	f040 80c6 	bne.w	8008afc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	0a5b      	lsrs	r3, r3, #9
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	8952      	ldrh	r2, [r2, #10]
 800897a:	3a01      	subs	r2, #1
 800897c:	4013      	ands	r3, r2
 800897e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d12f      	bne.n	80089e6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d103      	bne.n	8008996 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	633b      	str	r3, [r7, #48]	; 0x30
 8008994:	e013      	b.n	80089be <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d007      	beq.n	80089ae <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	4619      	mov	r1, r3
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f7fe fef9 	bl	800779c <clmt_clust>
 80089aa:	6338      	str	r0, [r7, #48]	; 0x30
 80089ac:	e007      	b.n	80089be <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	4619      	mov	r1, r3
 80089b6:	4610      	mov	r0, r2
 80089b8:	f7fe fc67 	bl	800728a <get_fat>
 80089bc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d804      	bhi.n	80089ce <f_read+0xe2>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2202      	movs	r2, #2
 80089c8:	755a      	strb	r2, [r3, #21]
 80089ca:	2302      	movs	r3, #2
 80089cc:	e0c9      	b.n	8008b62 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089d4:	d104      	bne.n	80089e0 <f_read+0xf4>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2201      	movs	r2, #1
 80089da:	755a      	strb	r2, [r3, #21]
 80089dc:	2301      	movs	r3, #1
 80089de:	e0c0      	b.n	8008b62 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089e4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	69db      	ldr	r3, [r3, #28]
 80089ec:	4619      	mov	r1, r3
 80089ee:	4610      	mov	r0, r2
 80089f0:	f7fe fc2c 	bl	800724c <clust2sect>
 80089f4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d104      	bne.n	8008a06 <f_read+0x11a>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2202      	movs	r2, #2
 8008a00:	755a      	strb	r2, [r3, #21]
 8008a02:	2302      	movs	r3, #2
 8008a04:	e0ad      	b.n	8008b62 <f_read+0x276>
			sect += csect;
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	0a5b      	lsrs	r3, r3, #9
 8008a12:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d039      	beq.n	8008a8e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a1a:	69fa      	ldr	r2, [r7, #28]
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	4413      	add	r3, r2
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	8952      	ldrh	r2, [r2, #10]
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d905      	bls.n	8008a34 <f_read+0x148>
					cc = fs->csize - csect;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	895b      	ldrh	r3, [r3, #10]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	7858      	ldrb	r0, [r3, #1]
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a3e:	f7fe f85b 	bl	8006af8 <disk_read>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d004      	beq.n	8008a52 <f_read+0x166>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	755a      	strb	r2, [r3, #21]
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e087      	b.n	8008b62 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	7d1b      	ldrb	r3, [r3, #20]
 8008a56:	b25b      	sxtb	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	da14      	bge.n	8008a86 <f_read+0x19a>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a1a      	ldr	r2, [r3, #32]
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d90d      	bls.n	8008a86 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6a1a      	ldr	r2, [r3, #32]
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	025b      	lsls	r3, r3, #9
 8008a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a76:	18d0      	adds	r0, r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3330      	adds	r3, #48	; 0x30
 8008a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a80:	4619      	mov	r1, r3
 8008a82:	f7fe f919 	bl	8006cb8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a88:	025b      	lsls	r3, r3, #9
 8008a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008a8c:	e050      	b.n	8008b30 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d02e      	beq.n	8008af6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	7d1b      	ldrb	r3, [r3, #20]
 8008a9c:	b25b      	sxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da18      	bge.n	8008ad4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	7858      	ldrb	r0, [r3, #1]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6a1a      	ldr	r2, [r3, #32]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	f7fe f841 	bl	8006b38 <disk_write>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <f_read+0x1da>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	755a      	strb	r2, [r3, #21]
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e04d      	b.n	8008b62 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	7d1b      	ldrb	r3, [r3, #20]
 8008aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	7858      	ldrb	r0, [r3, #1]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ade:	2301      	movs	r3, #1
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	f7fe f809 	bl	8006af8 <disk_read>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d004      	beq.n	8008af6 <f_read+0x20a>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	755a      	strb	r2, [r3, #21]
 8008af2:	2301      	movs	r3, #1
 8008af4:	e035      	b.n	8008b62 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b04:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008b08:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d901      	bls.n	8008b16 <f_read+0x22a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b24:	4413      	add	r3, r2
 8008b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b2c:	f7fe f8c4 	bl	8006cb8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	4413      	add	r3, r2
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	441a      	add	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	619a      	str	r2, [r3, #24]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	441a      	add	r2, r3
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f47f af01 	bne.w	8008962 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3738      	adds	r7, #56	; 0x38
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b08c      	sub	sp, #48	; 0x30
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f107 0210 	add.w	r2, r7, #16
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff fc74 	bl	8008478 <validate>
 8008b90:	4603      	mov	r3, r0
 8008b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d107      	bne.n	8008bae <f_write+0x44>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	7d5b      	ldrb	r3, [r3, #21]
 8008ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d002      	beq.n	8008bb4 <f_write+0x4a>
 8008bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bb2:	e14b      	b.n	8008e4c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	7d1b      	ldrb	r3, [r3, #20]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <f_write+0x5a>
 8008bc0:	2307      	movs	r3, #7
 8008bc2:	e143      	b.n	8008e4c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	699a      	ldr	r2, [r3, #24]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	441a      	add	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	f080 812d 	bcs.w	8008e30 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	43db      	mvns	r3, r3
 8008bdc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008bde:	e127      	b.n	8008e30 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f040 80e3 	bne.w	8008db4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	0a5b      	lsrs	r3, r3, #9
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	8952      	ldrh	r2, [r2, #10]
 8008bf8:	3a01      	subs	r2, #1
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d143      	bne.n	8008c8c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10c      	bne.n	8008c26 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d11a      	bne.n	8008c4e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe fd25 	bl	800766c <create_chain>
 8008c22:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c24:	e013      	b.n	8008c4e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d007      	beq.n	8008c3e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	4619      	mov	r1, r3
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f7fe fdb1 	bl	800779c <clmt_clust>
 8008c3a:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c3c:	e007      	b.n	8008c4e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	4619      	mov	r1, r3
 8008c46:	4610      	mov	r0, r2
 8008c48:	f7fe fd10 	bl	800766c <create_chain>
 8008c4c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 80f2 	beq.w	8008e3a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d104      	bne.n	8008c66 <f_write+0xfc>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	755a      	strb	r2, [r3, #21]
 8008c62:	2302      	movs	r3, #2
 8008c64:	e0f2      	b.n	8008e4c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c6c:	d104      	bne.n	8008c78 <f_write+0x10e>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	755a      	strb	r2, [r3, #21]
 8008c74:	2301      	movs	r3, #1
 8008c76:	e0e9      	b.n	8008e4c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c7c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d102      	bne.n	8008c8c <f_write+0x122>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c8a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	7d1b      	ldrb	r3, [r3, #20]
 8008c90:	b25b      	sxtb	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	da18      	bge.n	8008cc8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	7858      	ldrb	r0, [r3, #1]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6a1a      	ldr	r2, [r3, #32]
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	f7fd ff47 	bl	8006b38 <disk_write>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d004      	beq.n	8008cba <f_write+0x150>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	755a      	strb	r2, [r3, #21]
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e0c8      	b.n	8008e4c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	7d1b      	ldrb	r3, [r3, #20]
 8008cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	f7fe fabb 	bl	800724c <clust2sect>
 8008cd6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <f_write+0x17e>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	755a      	strb	r2, [r3, #21]
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e0b1      	b.n	8008e4c <f_write+0x2e2>
			sect += csect;
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	4413      	add	r3, r2
 8008cee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	0a5b      	lsrs	r3, r3, #9
 8008cf4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d03c      	beq.n	8008d76 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	4413      	add	r3, r2
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	8952      	ldrh	r2, [r2, #10]
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d905      	bls.n	8008d16 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	895b      	ldrh	r3, [r3, #10]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	7858      	ldrb	r0, [r3, #1]
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	69f9      	ldr	r1, [r7, #28]
 8008d20:	f7fd ff0a 	bl	8006b38 <disk_write>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d004      	beq.n	8008d34 <f_write+0x1ca>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	755a      	strb	r2, [r3, #21]
 8008d30:	2301      	movs	r3, #1
 8008d32:	e08b      	b.n	8008e4c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6a1a      	ldr	r2, [r3, #32]
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	6a3a      	ldr	r2, [r7, #32]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d915      	bls.n	8008d6e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a1a      	ldr	r2, [r3, #32]
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	025b      	lsls	r3, r3, #9
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	f7fd ffac 	bl	8006cb8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	7d1b      	ldrb	r3, [r3, #20]
 8008d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	025b      	lsls	r3, r3, #9
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008d74:	e03f      	b.n	8008df6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d016      	beq.n	8008dae <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	699a      	ldr	r2, [r3, #24]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d210      	bcs.n	8008dae <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	7858      	ldrb	r0, [r3, #1]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d96:	2301      	movs	r3, #1
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	f7fd fead 	bl	8006af8 <disk_read>
 8008d9e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	755a      	strb	r2, [r3, #21]
 8008daa:	2301      	movs	r3, #1
 8008dac:	e04e      	b.n	8008e4c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d901      	bls.n	8008dce <f_write+0x264>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ddc:	4413      	add	r3, r2
 8008dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de0:	69f9      	ldr	r1, [r7, #28]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fd ff68 	bl	8006cb8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	7d1b      	ldrb	r3, [r3, #20]
 8008dec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008df6:	69fa      	ldr	r2, [r7, #28]
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	4413      	add	r3, r2
 8008dfc:	61fb      	str	r3, [r7, #28]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	699a      	ldr	r2, [r3, #24]
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	441a      	add	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	619a      	str	r2, [r3, #24]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	bf38      	it	cc
 8008e16:	461a      	movcc	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	60da      	str	r2, [r3, #12]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	441a      	add	r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f47f aed4 	bne.w	8008be0 <f_write+0x76>
 8008e38:	e000      	b.n	8008e3c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008e3a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	7d1b      	ldrb	r3, [r3, #20]
 8008e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3730      	adds	r7, #48	; 0x30
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f107 0208 	add.w	r2, r7, #8
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7ff fb07 	bl	8008478 <validate>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d168      	bne.n	8008f46 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	7d1b      	ldrb	r3, [r3, #20]
 8008e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d062      	beq.n	8008f46 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	7d1b      	ldrb	r3, [r3, #20]
 8008e84:	b25b      	sxtb	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	da15      	bge.n	8008eb6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	7858      	ldrb	r0, [r3, #1]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a1a      	ldr	r2, [r3, #32]
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f7fd fe4d 	bl	8006b38 <disk_write>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <f_sync+0x54>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e04f      	b.n	8008f48 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	7d1b      	ldrb	r3, [r3, #20]
 8008eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008eb6:	f7fd fd81 	bl	80069bc <get_fattime>
 8008eba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	f7fe f925 	bl	8007114 <move_window>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d138      	bne.n	8008f46 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	330b      	adds	r3, #11
 8008ede:	781a      	ldrb	r2, [r3, #0]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	330b      	adds	r3, #11
 8008ee4:	f042 0220 	orr.w	r2, r2, #32
 8008ee8:	b2d2      	uxtb	r2, r2
 8008eea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6818      	ldr	r0, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68f9      	ldr	r1, [r7, #12]
 8008ef8:	f7fe fe2a 	bl	8007b50 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f103 021c 	add.w	r2, r3, #28
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	4619      	mov	r1, r3
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7fd fea9 	bl	8006c60 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	3316      	adds	r3, #22
 8008f12:	6939      	ldr	r1, [r7, #16]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fd fea3 	bl	8006c60 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	3312      	adds	r3, #18
 8008f1e:	2100      	movs	r1, #0
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fd fe82 	bl	8006c2a <st_word>
					fs->wflag = 1;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe f91e 	bl	8007170 <sync_fs>
 8008f34:	4603      	mov	r3, r0
 8008f36:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	7d1b      	ldrb	r3, [r3, #20]
 8008f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff ff7b 	bl	8008e54 <f_sync>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d118      	bne.n	8008f9a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f107 0208 	add.w	r2, r7, #8
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7ff fa81 	bl	8008478 <validate>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10c      	bne.n	8008f9a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fe f821 	bl	8006fcc <dec_lock>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d102      	bne.n	8008f9a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008fba:	4b1f      	ldr	r3, [pc, #124]	; (8009038 <FATFS_LinkDriverEx+0x94>)
 8008fbc:	7a5b      	ldrb	r3, [r3, #9]
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d131      	bne.n	8009028 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008fc4:	4b1c      	ldr	r3, [pc, #112]	; (8009038 <FATFS_LinkDriverEx+0x94>)
 8008fc6:	7a5b      	ldrb	r3, [r3, #9]
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	461a      	mov	r2, r3
 8008fcc:	4b1a      	ldr	r3, [pc, #104]	; (8009038 <FATFS_LinkDriverEx+0x94>)
 8008fce:	2100      	movs	r1, #0
 8008fd0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008fd2:	4b19      	ldr	r3, [pc, #100]	; (8009038 <FATFS_LinkDriverEx+0x94>)
 8008fd4:	7a5b      	ldrb	r3, [r3, #9]
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	4a17      	ldr	r2, [pc, #92]	; (8009038 <FATFS_LinkDriverEx+0x94>)
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <FATFS_LinkDriverEx+0x94>)
 8008fe4:	7a5b      	ldrb	r3, [r3, #9]
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4b13      	ldr	r3, [pc, #76]	; (8009038 <FATFS_LinkDriverEx+0x94>)
 8008fec:	4413      	add	r3, r2
 8008fee:	79fa      	ldrb	r2, [r7, #7]
 8008ff0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008ff2:	4b11      	ldr	r3, [pc, #68]	; (8009038 <FATFS_LinkDriverEx+0x94>)
 8008ff4:	7a5b      	ldrb	r3, [r3, #9]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	b2d1      	uxtb	r1, r2
 8008ffc:	4a0e      	ldr	r2, [pc, #56]	; (8009038 <FATFS_LinkDriverEx+0x94>)
 8008ffe:	7251      	strb	r1, [r2, #9]
 8009000:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009002:	7dbb      	ldrb	r3, [r7, #22]
 8009004:	3330      	adds	r3, #48	; 0x30
 8009006:	b2da      	uxtb	r2, r3
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	3301      	adds	r3, #1
 8009010:	223a      	movs	r2, #58	; 0x3a
 8009012:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	3302      	adds	r3, #2
 8009018:	222f      	movs	r2, #47	; 0x2f
 800901a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	3303      	adds	r3, #3
 8009020:	2200      	movs	r2, #0
 8009022:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009024:	2300      	movs	r3, #0
 8009026:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009028:	7dfb      	ldrb	r3, [r7, #23]
}
 800902a:	4618      	mov	r0, r3
 800902c:	371c      	adds	r7, #28
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	200000a0 	.word	0x200000a0

0800903c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009046:	2200      	movs	r2, #0
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff ffaa 	bl	8008fa4 <FATFS_LinkDriverEx>
 8009050:	4603      	mov	r3, r0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
	...

0800905c <__libc_init_array>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	4e0d      	ldr	r6, [pc, #52]	; (8009094 <__libc_init_array+0x38>)
 8009060:	4c0d      	ldr	r4, [pc, #52]	; (8009098 <__libc_init_array+0x3c>)
 8009062:	1ba4      	subs	r4, r4, r6
 8009064:	10a4      	asrs	r4, r4, #2
 8009066:	2500      	movs	r5, #0
 8009068:	42a5      	cmp	r5, r4
 800906a:	d109      	bne.n	8009080 <__libc_init_array+0x24>
 800906c:	4e0b      	ldr	r6, [pc, #44]	; (800909c <__libc_init_array+0x40>)
 800906e:	4c0c      	ldr	r4, [pc, #48]	; (80090a0 <__libc_init_array+0x44>)
 8009070:	f000 f820 	bl	80090b4 <_init>
 8009074:	1ba4      	subs	r4, r4, r6
 8009076:	10a4      	asrs	r4, r4, #2
 8009078:	2500      	movs	r5, #0
 800907a:	42a5      	cmp	r5, r4
 800907c:	d105      	bne.n	800908a <__libc_init_array+0x2e>
 800907e:	bd70      	pop	{r4, r5, r6, pc}
 8009080:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009084:	4798      	blx	r3
 8009086:	3501      	adds	r5, #1
 8009088:	e7ee      	b.n	8009068 <__libc_init_array+0xc>
 800908a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800908e:	4798      	blx	r3
 8009090:	3501      	adds	r5, #1
 8009092:	e7f2      	b.n	800907a <__libc_init_array+0x1e>
 8009094:	0800948c 	.word	0x0800948c
 8009098:	0800948c 	.word	0x0800948c
 800909c:	0800948c 	.word	0x0800948c
 80090a0:	08009490 	.word	0x08009490

080090a4 <memset>:
 80090a4:	4402      	add	r2, r0
 80090a6:	4603      	mov	r3, r0
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d100      	bne.n	80090ae <memset+0xa>
 80090ac:	4770      	bx	lr
 80090ae:	f803 1b01 	strb.w	r1, [r3], #1
 80090b2:	e7f9      	b.n	80090a8 <memset+0x4>

080090b4 <_init>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	bf00      	nop
 80090b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ba:	bc08      	pop	{r3}
 80090bc:	469e      	mov	lr, r3
 80090be:	4770      	bx	lr

080090c0 <_fini>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	bf00      	nop
 80090c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c6:	bc08      	pop	{r3}
 80090c8:	469e      	mov	lr, r3
 80090ca:	4770      	bx	lr
