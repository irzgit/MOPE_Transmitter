
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e6c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08009030  08009030  00019030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093b4  080093b4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080093b4  080093b4  000193b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093bc  080093bc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093bc  080093bc  000193bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093c0  080093c0  000193c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080093c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e88  20000024  080093e8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eac  080093e8  00020eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac54  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032b0  00000000  00000000  0003aca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003df58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  0003f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245de  00000000  00000000  00040680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ce3  00000000  00000000  00064c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2bec  00000000  00000000  00075941  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014852d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f0  00000000  00000000  001485a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009018 	.word	0x08009018

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08009018 	.word	0x08009018

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f001 fa64 	bl	80019d8 <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f001 fa5c 	bl	80019d8 <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f001 fa54 	bl	80019d8 <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f001 fa4c 	bl	80019d8 <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f001 fa90 	bl	8001a84 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	08009098 	.word	0x08009098

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <Rf96_OutPower+0x28>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	4619      	mov	r1, r3
 8000582:	2009      	movs	r0, #9
 8000584:	f001 fa28 	bl	80019d8 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000588:	2187      	movs	r1, #135	; 0x87
 800058a:	205a      	movs	r0, #90	; 0x5a
 800058c:	f001 fa24 	bl	80019d8 <SPIWrite>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	080090a4 	.word	0x080090a4

0800059c <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <Rf96_OCP+0x20>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	4619      	mov	r1, r3
 80005ae:	200b      	movs	r0, #11
 80005b0:	f001 fa12 	bl	80019d8 <SPIWrite>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	080090a8 	.word	0x080090a8

080005c0 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <Rf96_LNA+0x20>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	4619      	mov	r1, r3
 80005d2:	200c      	movs	r0, #12
 80005d4:	f001 fa00 	bl	80019d8 <SPIWrite>

}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	080090ac 	.word	0x080090ac

080005e4 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	460b      	mov	r3, r1
 80005f0:	71bb      	strb	r3, [r7, #6]
 80005f2:	4613      	mov	r3, r2
 80005f4:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005f6:	210e      	movs	r1, #14
 80005f8:	201d      	movs	r0, #29
 80005fa:	f001 f9ed 	bl	80019d8 <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // С CRC16
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	460b      	mov	r3, r1
 8000612:	71bb      	strb	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xC4);  // SF=12
 8000618:	21c4      	movs	r1, #196	; 0xc4
 800061a:	201e      	movs	r0, #30
 800061c:	f001 f9dc 	bl	80019d8 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	201f      	movs	r0, #31
 8000628:	f001 f9d6 	bl	80019d8 <SPIWrite>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b29b      	uxth	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	2020      	movs	r0, #32
 800064a:	f001 f9c5 	bl	80019d8 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	2021      	movs	r0, #33	; 0x21
 8000656:	f001 f9bf 	bl	80019d8 <SPIWrite>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 8000662:	b590      	push	{r4, r7, lr}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	4604      	mov	r4, r0
 800066a:	4608      	mov	r0, r1
 800066c:	4611      	mov	r1, r2
 800066e:	461a      	mov	r2, r3
 8000670:	4623      	mov	r3, r4
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4603      	mov	r3, r0
 8000676:	71bb      	strb	r3, [r7, #6]
 8000678:	460b      	mov	r3, r1
 800067a:	717b      	strb	r3, [r7, #5]
 800067c:	4613      	mov	r3, r2
 800067e:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	b2da      	uxtb	r2, r3
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4413      	add	r3, r2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4413      	add	r3, r2
 8000698:	b2da      	uxtb	r2, r3
 800069a:	793b      	ldrb	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	2040      	movs	r0, #64	; 0x40
 80006a4:	f001 f998 	bl	80019d8 <SPIWrite>
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd90      	pop	{r4, r7, pc}

080006b0 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006b4:	21f7      	movs	r1, #247	; 0xf7
 80006b6:	2011      	movs	r0, #17
 80006b8:	f001 f98e 	bl	80019d8 <SPIWrite>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
 80006c4:	213f      	movs	r1, #63	; 0x3f
 80006c6:	2011      	movs	r0, #17
 80006c8:	f001 f986 	bl	80019d8 <SPIWrite>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4619      	mov	r1, r3
 80006de:	2022      	movs	r0, #34	; 0x22
 80006e0:	f001 f97a 	bl	80019d8 <SPIWrite>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4619      	mov	r1, r3
 80006fa:	200e      	movs	r0, #14
 80006fc:	f001 f96c 	bl	80019d8 <SPIWrite>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4619      	mov	r1, r3
 8000716:	200f      	movs	r0, #15
 8000718:	f001 f95e 	bl	80019d8 <SPIWrite>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4619      	mov	r1, r3
 8000732:	200d      	movs	r0, #13
 8000734:	f001 f950 	bl	80019d8 <SPIWrite>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 8000744:	2185      	movs	r1, #133	; 0x85
 8000746:	2001      	movs	r0, #1
 8000748:	f001 f946 	bl	80019d8 <SPIWrite>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <Rf96_TX_mode>:
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 8000754:	2183      	movs	r1, #131	; 0x83
 8000756:	2001      	movs	r0, #1
 8000758:	f001 f93e 	bl	80019d8 <SPIWrite>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	461a      	mov	r2, r3
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	2000      	movs	r0, #0
 8000774:	f001 f986 	bl	8001a84 <BurstWrite>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000788:	2010      	movs	r0, #16
 800078a:	f001 f907 	bl	800199c <SPIRead>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	4619      	mov	r1, r3
 8000796:	200d      	movs	r0, #13
 8000798:	f001 f91e 	bl	80019d8 <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 800079c:	2013      	movs	r0, #19
 800079e:	f001 f8fd 	bl	800199c <SPIRead>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	461a      	mov	r2, r3
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	2000      	movs	r0, #0
 80007ae:	f001 f937 	bl	8001a20 <SPIBurstRead>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007be:	f7ff feb1 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007c2:	f7ff feb7 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff febc 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fecf 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fee2 	bl	800059c <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fef1 	bl	80005c0 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2104      	movs	r1, #4
 80007e2:	2007      	movs	r0, #7
 80007e4:	f7ff fefe 	bl	80005e4 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x1FF);
 80007e8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007ec:	2101      	movs	r1, #1
 80007ee:	2006      	movs	r0, #6
 80007f0:	f7ff ff09 	bl	8000606 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007f4:	2008      	movs	r0, #8
 80007f6:	f7ff ff1d 	bl	8000634 <Rf96_Preamble>
	SPIWrite(0x37,0x0A);
 80007fa:	210a      	movs	r1, #10
 80007fc:	2037      	movs	r0, #55	; 0x37
 80007fe:	f001 f8eb 	bl	80019d8 <SPIWrite>
	SPIWrite(0x31,0xA3);
 8000802:	21a3      	movs	r1, #163	; 0xa3
 8000804:	2031      	movs	r0, #49	; 0x31
 8000806:	f001 f8e7 	bl	80019d8 <SPIWrite>
	// Заходим в StandBy
	Rf96_Standby();
 800080a:	f7ff fe83 	bl	8000514 <Rf96_Standby>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}

08000812 <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  SPIWrite(LR_RegHopPeriod,0x0);
 8000816:	2100      	movs	r1, #0
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f001 f8dd 	bl	80019d8 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по отправке
	  Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 800081e:	2302      	movs	r3, #2
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff ff1c 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 800082a:	f7ff fe6b 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800082e:	f7ff ff3f 	bl	80006b0 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000832:	202a      	movs	r0, #42	; 0x2a
 8000834:	f7ff ff4c 	bl	80006d0 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000838:	2080      	movs	r0, #128	; 0x80
 800083a:	f7ff ff57 	bl	80006ec <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800083e:	2080      	movs	r0, #128	; 0x80
 8000840:	f7ff ff70 	bl	8000724 <Rf96_FIFO_point>

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 800084c:	2100      	movs	r1, #0
 800084e:	2024      	movs	r0, #36	; 0x24
 8000850:	f001 f8c2 	bl	80019d8 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 8000854:	2302      	movs	r3, #2
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ff01 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000860:	f7ff ff2e 	bl	80006c0 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000864:	f7ff fe4e 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000868:	202a      	movs	r0, #42	; 0x2a
 800086a:	f7ff ff31 	bl	80006d0 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff ff4a 	bl	8000708 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff ff55 	bl	8000724 <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 800087a:	f7ff ff61 	bl	8000740 <Rf96_RX_Continuous_mode>

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}

08000882 <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	4619      	mov	r1, r3
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ff64 	bl	8000760 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 8000898:	f7ff ff5a 	bl	8000750 <Rf96_TX_mode>
		}
	}
	*/


}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80008b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b4:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80008b6:	e012      	b.n	80008de <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 80008b8:	89fb      	ldrh	r3, [r7, #14]
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	b21a      	sxth	r2, r3
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	1c59      	adds	r1, r3, #1
 80008ca:	6079      	str	r1, [r7, #4]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4043      	eors	r3, r0
 80008d0:	4909      	ldr	r1, [pc, #36]	; (80008f8 <Crc16+0x54>)
 80008d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	4053      	eors	r3, r2
 80008da:	b21b      	sxth	r3, r3
 80008dc:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80008de:	887b      	ldrh	r3, [r7, #2]
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	807a      	strh	r2, [r7, #2]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1e7      	bne.n	80008b8 <Crc16+0x14>

    return crc;
 80008e8:	89fb      	ldrh	r3, [r7, #14]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	08009114 	.word	0x08009114

080008fc <CommandToRadio>:

// Функция передачи по радиоканалу
void CommandToRadio(uint8_t command)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	// Вход в режим передачи
	 Rf96_Lora_TX_mode();
 8000906:	f7ff ff84 	bl	8000812 <Rf96_Lora_TX_mode>
	// Обнуляем массив
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]
 800090e:	e006      	b.n	800091e <CommandToRadio+0x22>
	{
		TX_RX_Radio[i]=0;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <CommandToRadio+0x7c>)
 8000914:	2100      	movs	r1, #0
 8000916:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	3301      	adds	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	2b29      	cmp	r3, #41	; 0x29
 8000922:	d9f5      	bls.n	8000910 <CommandToRadio+0x14>
	}
    // Заносим команду
	TX_RX_Radio[CommIndex]=command;
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <CommandToRadio+0x7c>)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	7013      	strb	r3, [r2, #0]
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 800092a:	2128      	movs	r1, #40	; 0x28
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <CommandToRadio+0x7c>)
 800092e:	f7ff ffb9 	bl	80008a4 <Crc16>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <CommandToRadio+0x80>)
 8000938:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <CommandToRadio+0x80>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	b29b      	uxth	r3, r3
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <CommandToRadio+0x7c>)
 8000946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <CommandToRadio+0x80>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <CommandToRadio+0x7c>)
 8000952:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 8000956:	2080      	movs	r0, #128	; 0x80
 8000958:	f7ff fec8 	bl	80006ec <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 800095c:	2080      	movs	r0, #128	; 0x80
 800095e:	f7ff fee1 	bl	8000724 <Rf96_FIFO_point>
    // Очистка флагов
	Rf96_LoRaClearIrq();
 8000962:	f7ff fdcf 	bl	8000504 <Rf96_LoRaClearIrq>
    // Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8000966:	212a      	movs	r1, #42	; 0x2a
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <CommandToRadio+0x7c>)
 800096a:	f7ff ff8a 	bl	8000882 <Rf96_LoRaTxPacket>
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000398 	.word	0x20000398
 800097c:	20000044 	.word	0x20000044

08000980 <uint32_TO_charmass>:
mass - массив, в который число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 8000980:	b480      	push	{r7}
 8000982:	b087      	sub	sp, #28
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	4611      	mov	r1, r2
 800098c:	461a      	mov	r2, r3
 800098e:	460b      	mov	r3, r1
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	4613      	mov	r3, r2
 8000994:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	82fb      	strh	r3, [r7, #22]
 800099a:	e01f      	b.n	80009dc <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 800099c:	68f9      	ldr	r1, [r7, #12]
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <uint32_TO_charmass+0x70>)
 80009a0:	fba3 2301 	umull	r2, r3, r3, r1
 80009a4:	08da      	lsrs	r2, r3, #3
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	1aca      	subs	r2, r1, r3
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	88bb      	ldrh	r3, [r7, #4]
 80009b4:	1e59      	subs	r1, r3, #1
 80009b6:	8afb      	ldrh	r3, [r7, #22]
 80009b8:	1ac9      	subs	r1, r1, r3
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	440b      	add	r3, r1
 80009be:	4619      	mov	r1, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	440b      	add	r3, r1
 80009c4:	3230      	adds	r2, #48	; 0x30
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <uint32_TO_charmass+0x70>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	3301      	adds	r3, #1
 80009da:	82fb      	strh	r3, [r7, #22]
 80009dc:	8afa      	ldrh	r2, [r7, #22]
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d3db      	bcc.n	800099c <uint32_TO_charmass+0x1c>
	}
}
 80009e4:	bf00      	nop
 80009e6:	371c      	adds	r7, #28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	cccccccd 	.word	0xcccccccd

080009f4 <ReadNumofFileSD>:
uint8_t ReadNumofFileSD(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
        uint8_t Num=0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	71fb      	strb	r3, [r7, #7]
	    ///  Создание/открытие файла
		fres = f_mount(&FatFs, "", 1); //1=mount now
 80009fe:	2201      	movs	r2, #1
 8000a00:	492f      	ldr	r1, [pc, #188]	; (8000ac0 <ReadNumofFileSD+0xcc>)
 8000a02:	4830      	ldr	r0, [pc, #192]	; (8000ac4 <ReadNumofFileSD+0xd0>)
 8000a04:	f007 fd20 	bl	8008448 <f_mount>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <ReadNumofFileSD+0xd4>)
 8000a0e:	701a      	strb	r2, [r3, #0]

		if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000a10:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <ReadNumofFileSD+0xd4>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d005      	beq.n	8000a24 <ReadNumofFileSD+0x30>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	482b      	ldr	r0, [pc, #172]	; (8000acc <ReadNumofFileSD+0xd8>)
 8000a1e:	f003 f8fd 	bl	8003c1c <HAL_GPIO_WritePin>
			while(1);
 8000a22:	e7fe      	b.n	8000a22 <ReadNumofFileSD+0x2e>
		}
		// Открываем или создаем новый файл
		fres = f_open(&fil, "InformationSD.txt", FA_OPEN_ALWAYS | FA_READ);
 8000a24:	2211      	movs	r2, #17
 8000a26:	492a      	ldr	r1, [pc, #168]	; (8000ad0 <ReadNumofFileSD+0xdc>)
 8000a28:	482a      	ldr	r0, [pc, #168]	; (8000ad4 <ReadNumofFileSD+0xe0>)
 8000a2a:	f007 fd53 	bl	80084d4 <f_open>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <ReadNumofFileSD+0xd4>)
 8000a34:	701a      	strb	r2, [r3, #0]

		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000a36:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <ReadNumofFileSD+0xd4>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d005      	beq.n	8000a4a <ReadNumofFileSD+0x56>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2102      	movs	r1, #2
 8000a42:	4822      	ldr	r0, [pc, #136]	; (8000acc <ReadNumofFileSD+0xd8>)
 8000a44:	f003 f8ea 	bl	8003c1c <HAL_GPIO_WritePin>
			while(1);
 8000a48:	e7fe      	b.n	8000a48 <ReadNumofFileSD+0x54>
		}
		//Читаем количество данных
		fres=f_read(&fil,BuffSDRead,1,&bytesRead);
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <ReadNumofFileSD+0xe4>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4923      	ldr	r1, [pc, #140]	; (8000adc <ReadNumofFileSD+0xe8>)
 8000a50:	4820      	ldr	r0, [pc, #128]	; (8000ad4 <ReadNumofFileSD+0xe0>)
 8000a52:	f007 fefd 	bl	8008850 <f_read>
 8000a56:	4603      	mov	r3, r0
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <ReadNumofFileSD+0xd4>)
 8000a5c:	701a      	strb	r2, [r3, #0]
		Num=BuffSDRead[0];
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <ReadNumofFileSD+0xe8>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]

	    fres=f_close(&fil);
 8000a64:	481b      	ldr	r0, [pc, #108]	; (8000ad4 <ReadNumofFileSD+0xe0>)
 8000a66:	f008 fa25 	bl	8008eb4 <f_close>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <ReadNumofFileSD+0xd4>)
 8000a70:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <ReadNumofFileSD+0xd4>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d005      	beq.n	8000a86 <ReadNumofFileSD+0x92>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	4813      	ldr	r0, [pc, #76]	; (8000acc <ReadNumofFileSD+0xd8>)
 8000a80:	f003 f8cc 	bl	8003c1c <HAL_GPIO_WritePin>
			while(1);
 8000a84:	e7fe      	b.n	8000a84 <ReadNumofFileSD+0x90>
		}
	    fres=f_mount(NULL, "", 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <ReadNumofFileSD+0xcc>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f007 fcdc 	bl	8008448 <f_mount>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <ReadNumofFileSD+0xd4>)
 8000a96:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <ReadNumofFileSD+0xd4>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d005      	beq.n	8000aac <ReadNumofFileSD+0xb8>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <ReadNumofFileSD+0xd8>)
 8000aa6:	f003 f8b9 	bl	8003c1c <HAL_GPIO_WritePin>
			while(1);
 8000aaa:	e7fe      	b.n	8000aaa <ReadNumofFileSD+0xb6>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2102      	movs	r1, #2
 8000ab0:	4806      	ldr	r0, [pc, #24]	; (8000acc <ReadNumofFileSD+0xd8>)
 8000ab2:	f003 f8b3 	bl	8003c1c <HAL_GPIO_WritePin>

	return Num;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	08009030 	.word	0x08009030
 8000ac4:	20000124 	.word	0x20000124
 8000ac8:	200007c4 	.word	0x200007c4
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	08009034 	.word	0x08009034
 8000ad4:	200007c8 	.word	0x200007c8
 8000ad8:	200000e0 	.word	0x200000e0
 8000adc:	20000698 	.word	0x20000698

08000ae0 <WriteNumofFileSD>:
void WriteNumofFileSD(uint8_t Num)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	        UINT bytesWroteInform;
	        ///  Создание/открытие файла
			fres = f_mount(&FatFs, "", 1); //1=mount now
 8000aea:	2201      	movs	r2, #1
 8000aec:	492e      	ldr	r1, [pc, #184]	; (8000ba8 <WriteNumofFileSD+0xc8>)
 8000aee:	482f      	ldr	r0, [pc, #188]	; (8000bac <WriteNumofFileSD+0xcc>)
 8000af0:	f007 fcaa 	bl	8008448 <f_mount>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <WriteNumofFileSD+0xd0>)
 8000afa:	701a      	strb	r2, [r3, #0]

			if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000afc:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <WriteNumofFileSD+0xd0>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d005      	beq.n	8000b10 <WriteNumofFileSD+0x30>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2102      	movs	r1, #2
 8000b08:	482a      	ldr	r0, [pc, #168]	; (8000bb4 <WriteNumofFileSD+0xd4>)
 8000b0a:	f003 f887 	bl	8003c1c <HAL_GPIO_WritePin>
				while(1);
 8000b0e:	e7fe      	b.n	8000b0e <WriteNumofFileSD+0x2e>
			}
			// Открываем или создаем новый файл
			fres = f_open(&fil, "InformationSD.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000b10:	2212      	movs	r2, #18
 8000b12:	4929      	ldr	r1, [pc, #164]	; (8000bb8 <WriteNumofFileSD+0xd8>)
 8000b14:	4829      	ldr	r0, [pc, #164]	; (8000bbc <WriteNumofFileSD+0xdc>)
 8000b16:	f007 fcdd 	bl	80084d4 <f_open>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <WriteNumofFileSD+0xd0>)
 8000b20:	701a      	strb	r2, [r3, #0]

			if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <WriteNumofFileSD+0xd0>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d005      	beq.n	8000b36 <WriteNumofFileSD+0x56>

			} else
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4821      	ldr	r0, [pc, #132]	; (8000bb4 <WriteNumofFileSD+0xd4>)
 8000b30:	f003 f874 	bl	8003c1c <HAL_GPIO_WritePin>
				while(1);
 8000b34:	e7fe      	b.n	8000b34 <WriteNumofFileSD+0x54>
			}
			//Читаем количество данных
			fres = f_write(&fil, &Num, 1, &bytesWroteInform);
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	1df9      	adds	r1, r7, #7
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	481f      	ldr	r0, [pc, #124]	; (8000bbc <WriteNumofFileSD+0xdc>)
 8000b40:	f007 ffc5 	bl	8008ace <f_write>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <WriteNumofFileSD+0xd0>)
 8000b4a:	701a      	strb	r2, [r3, #0]
		    fres=f_close(&fil);
 8000b4c:	481b      	ldr	r0, [pc, #108]	; (8000bbc <WriteNumofFileSD+0xdc>)
 8000b4e:	f008 f9b1 	bl	8008eb4 <f_close>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <WriteNumofFileSD+0xd0>)
 8000b58:	701a      	strb	r2, [r3, #0]
			if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <WriteNumofFileSD+0xd0>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d005      	beq.n	8000b6e <WriteNumofFileSD+0x8e>

			} else
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2102      	movs	r1, #2
 8000b66:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <WriteNumofFileSD+0xd4>)
 8000b68:	f003 f858 	bl	8003c1c <HAL_GPIO_WritePin>
				while(1);
 8000b6c:	e7fe      	b.n	8000b6c <WriteNumofFileSD+0x8c>
			}
		    fres=f_mount(NULL, "", 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	490d      	ldr	r1, [pc, #52]	; (8000ba8 <WriteNumofFileSD+0xc8>)
 8000b72:	2000      	movs	r0, #0
 8000b74:	f007 fc68 	bl	8008448 <f_mount>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <WriteNumofFileSD+0xd0>)
 8000b7e:	701a      	strb	r2, [r3, #0]
			if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <WriteNumofFileSD+0xd0>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d005      	beq.n	8000b94 <WriteNumofFileSD+0xb4>

			} else
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <WriteNumofFileSD+0xd4>)
 8000b8e:	f003 f845 	bl	8003c1c <HAL_GPIO_WritePin>
				while(1);
 8000b92:	e7fe      	b.n	8000b92 <WriteNumofFileSD+0xb2>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2102      	movs	r1, #2
 8000b98:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <WriteNumofFileSD+0xd4>)
 8000b9a:	f003 f83f 	bl	8003c1c <HAL_GPIO_WritePin>


}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	08009030 	.word	0x08009030
 8000bac:	20000124 	.word	0x20000124
 8000bb0:	200007c4 	.word	0x200007c4
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	08009034 	.word	0x08009034
 8000bbc:	200007c8 	.word	0x200007c8

08000bc0 <SyncCKT>:

// Функция синхронизации Usartа с ЦКТ
void SyncCKT(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	// Синхронизация
	if(readFlag==1)
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <SyncCKT+0x2c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d10d      	bne.n	8000be8 <SyncCKT+0x28>
	{
		readFlag=0;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <SyncCKT+0x2c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f002 f938 	bl	8002e48 <HAL_Delay>
		HAL_UART_Abort(&huart5);
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <SyncCKT+0x30>)
 8000bda:	f004 ffb9 	bl	8005b50 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5,BuffCkt, MaxBuffOfCKT);
 8000bde:	222b      	movs	r2, #43	; 0x2b
 8000be0:	4904      	ldr	r1, [pc, #16]	; (8000bf4 <SyncCKT+0x34>)
 8000be2:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <SyncCKT+0x30>)
 8000be4:	f004 ff34 	bl	8005a50 <HAL_UART_Receive_DMA>
	}
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200006ca 	.word	0x200006ca
 8000bf0:	20000448 	.word	0x20000448
 8000bf4:	200003c4 	.word	0x200003c4

08000bf8 <RXCommande1>:
// Команда начала записи на SD карту
void RXCommande1(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    // Запись в память номера файла, на котором мы находимся

	CountFileNow=ReadNumofFileSD();
 8000bfc:	f7ff fefa 	bl	80009f4 <ReadNumofFileSD>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <RXCommande1+0xb0>)
 8000c06:	701a      	strb	r2, [r3, #0]
	if(CountFileNow>9)
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <RXCommande1+0xb0>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b09      	cmp	r3, #9
 8000c0e:	d903      	bls.n	8000c18 <RXCommande1+0x20>
	{
		CountFileNow=0;
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <RXCommande1+0xb0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	e005      	b.n	8000c24 <RXCommande1+0x2c>
	} else 	CountFileNow++;
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <RXCommande1+0xb0>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <RXCommande1+0xb0>)
 8000c22:	701a      	strb	r2, [r3, #0]
	WriteNumofFileSD(CountFileNow);
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <RXCommande1+0xb0>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff59 	bl	8000ae0 <WriteNumofFileSD>
	*/
	//flashErasePage(FLASH_SECTOR_6);
	//Flash_Write_single8bit(FilesAdr,CountFileNow);
	///ФЛЕШКА
	///  Создание файла
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8000c2e:	2201      	movs	r2, #1
 8000c30:	491e      	ldr	r1, [pc, #120]	; (8000cac <RXCommande1+0xb4>)
 8000c32:	481f      	ldr	r0, [pc, #124]	; (8000cb0 <RXCommande1+0xb8>)
 8000c34:	f007 fc08 	bl	8008448 <f_mount>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <RXCommande1+0xbc>)
 8000c3e:	701a      	strb	r2, [r3, #0]

		if (fres != FR_OK)
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <RXCommande1+0xbc>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d005      	beq.n	8000c54 <RXCommande1+0x5c>
		{ // Если проблема с флешкой  выключаем 1 светодиод
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	481a      	ldr	r0, [pc, #104]	; (8000cb8 <RXCommande1+0xc0>)
 8000c4e:	f002 ffe5 	bl	8003c1c <HAL_GPIO_WritePin>
			while(1);
 8000c52:	e7fe      	b.n	8000c52 <RXCommande1+0x5a>
		}
		// Открываем или создаем новый файл
		fres = f_open(&fil, &(MassFileName[CountFileNow][0]), FA_CREATE_ALWAYS | FA_WRITE);
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <RXCommande1+0xb0>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <RXCommande1+0xc4>)
 8000c64:	4413      	add	r3, r2
 8000c66:	220a      	movs	r2, #10
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <RXCommande1+0xc8>)
 8000c6c:	f007 fc32 	bl	80084d4 <f_open>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <RXCommande1+0xbc>)
 8000c76:	701a      	strb	r2, [r3, #0]

		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <RXCommande1+0xbc>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <RXCommande1+0x94>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2102      	movs	r1, #2
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <RXCommande1+0xc0>)
 8000c86:	f002 ffc9 	bl	8003c1c <HAL_GPIO_WritePin>
			while(1);
 8000c8a:	e7fe      	b.n	8000c8a <RXCommande1+0x92>
		}
	    ResolveSDWrite=1; // Открываем доступ к записи на SD
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <RXCommande1+0xcc>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
    // Отсылаем ответ
	    ModeRadio=1;
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <RXCommande1+0xd0>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
    CommandToRadio(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff fe2f 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000c9e:	f7ff fdd3 	bl	8000848 <Rf96_Lora_RX_mode>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000049 	.word	0x20000049
 8000cac:	08009030 	.word	0x08009030
 8000cb0:	20000124 	.word	0x20000124
 8000cb4:	200007c4 	.word	0x200007c4
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	080090b0 	.word	0x080090b0
 8000cc0:	200007c8 	.word	0x200007c8
 8000cc4:	20000046 	.word	0x20000046
 8000cc8:	2000004a 	.word	0x2000004a

08000ccc <RXCommande2>:
// Команда включения клапаном
void RXCommande2(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <RXCommande2+0x24>)
 8000cd8:	f002 ffa0 	bl	8003c1c <HAL_GPIO_WritePin>
	// Отсылаем ответ
	ModeRadio=1;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <RXCommande2+0x28>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
    CommandToRadio(2);
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f7ff fe0a 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000ce8:	f7ff fdae 	bl	8000848 <Rf96_Lora_RX_mode>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	2000004a 	.word	0x2000004a

08000cf8 <RXCommande3>:

// Команда включения двигателя
void RXCommande3(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	// Подаем единицу на двигатель
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <RXCommande3+0x38>)
 8000d04:	f002 ff8a 	bl	8003c1c <HAL_GPIO_WritePin>
	// Ждем 5 секунд
	HAL_Delay(5000);
 8000d08:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d0c:	f002 f89c 	bl	8002e48 <HAL_Delay>
	// Убираем единицу с двигателя
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <RXCommande3+0x38>)
 8000d18:	f002 ff80 	bl	8003c1c <HAL_GPIO_WritePin>
	// Отсылаем ответ
	ModeRadio=1;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <RXCommande3+0x3c>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
    CommandToRadio(3);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f7ff fdea 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000d28:	f7ff fd8e 	bl	8000848 <Rf96_Lora_RX_mode>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40020400 	.word	0x40020400
 8000d34:	2000004a 	.word	0x2000004a

08000d38 <RXCommande4>:
// Команда - запрос на отправку данных
void RXCommande4(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

	RadioIrq=1;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <RXCommande4+0x14>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]

}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20000048 	.word	0x20000048

08000d50 <RXCommande5>:
// Команда начала закрытия файла на SD карте
void RXCommande5(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	///ФЛЕШКА
    // Закрываем файл
	fres=f_close(&fil);
 8000d54:	4818      	ldr	r0, [pc, #96]	; (8000db8 <RXCommande5+0x68>)
 8000d56:	f008 f8ad 	bl	8008eb4 <f_close>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <RXCommande5+0x6c>)
 8000d60:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <RXCommande5+0x6c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d005      	beq.n	8000d76 <RXCommande5+0x26>

	} else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <RXCommande5+0x70>)
 8000d70:	f002 ff54 	bl	8003c1c <HAL_GPIO_WritePin>
		while(1);
 8000d74:	e7fe      	b.n	8000d74 <RXCommande5+0x24>
	}
	fres=f_mount(NULL, "", 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	4912      	ldr	r1, [pc, #72]	; (8000dc4 <RXCommande5+0x74>)
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f007 fb64 	bl	8008448 <f_mount>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <RXCommande5+0x6c>)
 8000d86:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <RXCommande5+0x6c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d005      	beq.n	8000d9c <RXCommande5+0x4c>

	} else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2102      	movs	r1, #2
 8000d94:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <RXCommande5+0x70>)
 8000d96:	f002 ff41 	bl	8003c1c <HAL_GPIO_WritePin>
		while(1);
 8000d9a:	e7fe      	b.n	8000d9a <RXCommande5+0x4a>
	}
    ResolveSDWrite=0; // Закрываем доступ к записи на SD
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <RXCommande5+0x78>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
    // Отсылаем ответ
    ModeRadio=1;
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <RXCommande5+0x7c>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
    CommandToRadio(5);
 8000da8:	2005      	movs	r0, #5
 8000daa:	f7ff fda7 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000dae:	f7ff fd4b 	bl	8000848 <Rf96_Lora_RX_mode>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200007c8 	.word	0x200007c8
 8000dbc:	200007c4 	.word	0x200007c4
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	08009030 	.word	0x08009030
 8000dc8:	20000046 	.word	0x20000046
 8000dcc:	2000004a 	.word	0x2000004a

08000dd0 <RXCommande6>:
// Команда закрытия клапана
void RXCommande6(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <RXCommande6+0x24>)
 8000ddc:	f002 ff1e 	bl	8003c1c <HAL_GPIO_WritePin>
	// Отсылаем ответ
	ModeRadio=1;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <RXCommande6+0x28>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
    CommandToRadio(6);
 8000de6:	2006      	movs	r0, #6
 8000de8:	f7ff fd88 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000dec:	f7ff fd2c 	bl	8000848 <Rf96_Lora_RX_mode>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40020400 	.word	0x40020400
 8000df8:	2000004a 	.word	0x2000004a

08000dfc <CheckSD>:

// Проверка SD карты на работоспособность
void CheckSD(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	///  Создание файла
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8000e00:	2201      	movs	r2, #1
 8000e02:	4928      	ldr	r1, [pc, #160]	; (8000ea4 <CheckSD+0xa8>)
 8000e04:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <CheckSD+0xac>)
 8000e06:	f007 fb1f 	bl	8008448 <f_mount>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <CheckSD+0xb0>)
 8000e10:	701a      	strb	r2, [r3, #0]

		if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <CheckSD+0xb0>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <CheckSD+0x2a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4824      	ldr	r0, [pc, #144]	; (8000eb0 <CheckSD+0xb4>)
 8000e20:	f002 fefc 	bl	8003c1c <HAL_GPIO_WritePin>
			while(1);
 8000e24:	e7fe      	b.n	8000e24 <CheckSD+0x28>
		}
		// Открываем или создаем новый файл
		fres = f_open(&fil, "CheckSD.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000e26:	220a      	movs	r2, #10
 8000e28:	4922      	ldr	r1, [pc, #136]	; (8000eb4 <CheckSD+0xb8>)
 8000e2a:	4823      	ldr	r0, [pc, #140]	; (8000eb8 <CheckSD+0xbc>)
 8000e2c:	f007 fb52 	bl	80084d4 <f_open>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <CheckSD+0xb0>)
 8000e36:	701a      	strb	r2, [r3, #0]

		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <CheckSD+0xb0>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <CheckSD+0x50>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2102      	movs	r1, #2
 8000e44:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <CheckSD+0xb4>)
 8000e46:	f002 fee9 	bl	8003c1c <HAL_GPIO_WritePin>
			while(1);
 8000e4a:	e7fe      	b.n	8000e4a <CheckSD+0x4e>
		}
	    fres=f_close(&fil);
 8000e4c:	481a      	ldr	r0, [pc, #104]	; (8000eb8 <CheckSD+0xbc>)
 8000e4e:	f008 f831 	bl	8008eb4 <f_close>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <CheckSD+0xb0>)
 8000e58:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <CheckSD+0xb0>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d005      	beq.n	8000e6e <CheckSD+0x72>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2102      	movs	r1, #2
 8000e66:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <CheckSD+0xb4>)
 8000e68:	f002 fed8 	bl	8003c1c <HAL_GPIO_WritePin>
			while(1);
 8000e6c:	e7fe      	b.n	8000e6c <CheckSD+0x70>
		}
	    fres=f_mount(NULL, "", 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <CheckSD+0xa8>)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f007 fae8 	bl	8008448 <f_mount>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <CheckSD+0xb0>)
 8000e7e:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <CheckSD+0xb0>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <CheckSD+0x98>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <CheckSD+0xb4>)
 8000e8e:	f002 fec5 	bl	8003c1c <HAL_GPIO_WritePin>
			while(1);
 8000e92:	e7fe      	b.n	8000e92 <CheckSD+0x96>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2102      	movs	r1, #2
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <CheckSD+0xb4>)
 8000e9a:	f002 febf 	bl	8003c1c <HAL_GPIO_WritePin>

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08009030 	.word	0x08009030
 8000ea8:	20000124 	.word	0x20000124
 8000eac:	200007c4 	.word	0x200007c4
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	08009048 	.word	0x08009048
 8000eb8:	200007c8 	.word	0x200007c8

08000ebc <DataConv>:



// Парсер
void DataConv(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	// Запись времени в буфер
	uint32_TO_charmass(reciveTime, SDbufWrite, 0, 8);
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <DataConv+0x60>)
 8000ec4:	6818      	ldr	r0, [r3, #0]
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4915      	ldr	r1, [pc, #84]	; (8000f20 <DataConv+0x64>)
 8000ecc:	f7ff fd58 	bl	8000980 <uint32_TO_charmass>
	for(uint8_t i=0;i<38;i++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	e017      	b.n	8000f06 <DataConv+0x4a>
	{
		uint32_TO_charmass(BuffMidW[i+4], SDbufWrite, 9+i*4, 3);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <DataConv+0x68>)
 8000edc:	5cd3      	ldrb	r3, [r2, r3]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3309      	adds	r3, #9
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	2303      	movs	r3, #3
 8000eee:	490c      	ldr	r1, [pc, #48]	; (8000f20 <DataConv+0x64>)
 8000ef0:	f7ff fd46 	bl	8000980 <uint32_TO_charmass>
		SDbufWrite[8+i*4]=',';
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <DataConv+0x64>)
 8000efc:	212c      	movs	r1, #44	; 0x2c
 8000efe:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<38;i++)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	3301      	adds	r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b25      	cmp	r3, #37	; 0x25
 8000f0a:	d9e4      	bls.n	8000ed6 <DataConv+0x1a>
	}
	SDbufWrite[160]='\n';
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <DataConv+0x64>)
 8000f0e:	220a      	movs	r2, #10
 8000f10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000040 	.word	0x20000040
 8000f20:	20000588 	.word	0x20000588
 8000f24:	2000062c 	.word	0x2000062c

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f001 ff19 	bl	8002d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f937 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f36:	f000 fb93 	bl	8001660 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3a:	f000 fb4b 	bl	80015d4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f3e:	f000 f9a3 	bl	8001288 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f42:	f000 faf3 	bl	800152c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f46:	f000 fb1b 	bl	8001580 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000f4a:	f000 fac5 	bl	80014d8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f4e:	f005 fcd5 	bl	80068fc <MX_FATFS_Init>
  MX_SPI3_Init();
 8000f52:	f000 f9cf 	bl	80012f4 <MX_SPI3_Init>
  MX_UART5_Init();
 8000f56:	f000 fa93 	bl	8001480 <MX_UART5_Init>
  MX_TIM6_Init();
 8000f5a:	f000 fa01 	bl	8001360 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000f5e:	f000 fa35 	bl	80013cc <MX_TIM7_Init>
  MX_TIM10_Init();
 8000f62:	f000 fa69 	bl	8001438 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	// Индикация включения УСИ ПРД
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2102      	movs	r1, #2
 8000f6a:	487e      	ldr	r0, [pc, #504]	; (8001164 <main+0x23c>)
 8000f6c:	f002 fe56 	bl	8003c1c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000f70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f74:	f001 ff68 	bl	8002e48 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	4879      	ldr	r0, [pc, #484]	; (8001164 <main+0x23c>)
 8000f7e:	f002 fe4d 	bl	8003c1c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000f82:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f86:	f001 ff5f 	bl	8002e48 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	4875      	ldr	r0, [pc, #468]	; (8001164 <main+0x23c>)
 8000f90:	f002 fe44 	bl	8003c1c <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000f94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f98:	f001 ff56 	bl	8002e48 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4870      	ldr	r0, [pc, #448]	; (8001164 <main+0x23c>)
 8000fa2:	f002 fe3b 	bl	8003c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2104      	movs	r1, #4
 8000faa:	486e      	ldr	r0, [pc, #440]	; (8001164 <main+0x23c>)
 8000fac:	f002 fe36 	bl	8003c1c <HAL_GPIO_WritePin>
	//Проверка SD карты
	CheckSD();
 8000fb0:	f7ff ff24 	bl	8000dfc <CheckSD>
	// Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 8000fb4:	f7ff fc01 	bl	80007ba <Rf96_Lora_init>
	// Режим приема
	Rf96_Lora_RX_mode();
 8000fb8:	f7ff fc46 	bl	8000848 <Rf96_Lora_RX_mode>
	// Запуск приема в дма с аксселерометров
	HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 8000fbc:	222b      	movs	r2, #43	; 0x2b
 8000fbe:	496a      	ldr	r1, [pc, #424]	; (8001168 <main+0x240>)
 8000fc0:	486a      	ldr	r0, [pc, #424]	; (800116c <main+0x244>)
 8000fc2:	f004 fd45 	bl	8005a50 <HAL_UART_Receive_DMA>
    // Запуск таймера с целью определения подключения ЦКТ
    HAL_TIM_Base_Start_IT(&htim10);
 8000fc6:	486a      	ldr	r0, [pc, #424]	; (8001170 <main+0x248>)
 8000fc8:	f004 fa45 	bl	8005456 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Синхронизация с ЦКТ
	    SyncCKT();
 8000fcc:	f7ff fdf8 	bl	8000bc0 <SyncCKT>
	    // Прерывание по приему по радиоканалу
		if(Get_NIRQ_Di0())
 8000fd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd4:	4867      	ldr	r0, [pc, #412]	; (8001174 <main+0x24c>)
 8000fd6:	f002 fe09 	bl	8003bec <HAL_GPIO_ReadPin>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d055      	beq.n	800108c <main+0x164>
		{
			if(ModeRadio==0) // если прерывание по приему
 8000fe0:	4b65      	ldr	r3, [pc, #404]	; (8001178 <main+0x250>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d144      	bne.n	8001072 <main+0x14a>
			{
            // Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8000fe8:	4864      	ldr	r0, [pc, #400]	; (800117c <main+0x254>)
 8000fea:	f7ff fbc9 	bl	8000780 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 8000fee:	4b63      	ldr	r3, [pc, #396]	; (800117c <main+0x254>)
 8000ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b60      	ldr	r3, [pc, #384]	; (800117c <main+0x254>)
 8000ffc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001000:	b29b      	uxth	r3, r3
 8001002:	4413      	add	r3, r2
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <main+0x258>)
 8001008:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 800100a:	f7ff fa7b 	bl	8000504 <Rf96_LoRaClearIrq>
			// Если CRC совпадает
			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2))
 800100e:	2128      	movs	r1, #40	; 0x28
 8001010:	485a      	ldr	r0, [pc, #360]	; (800117c <main+0x254>)
 8001012:	f7ff fc47 	bl	80008a4 <Crc16>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b59      	ldr	r3, [pc, #356]	; (8001180 <main+0x258>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d134      	bne.n	800108c <main+0x164>
			{
				switch(TX_RX_Radio[CommIndex])
 8001022:	4b56      	ldr	r3, [pc, #344]	; (800117c <main+0x254>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	3b01      	subs	r3, #1
 8001028:	2b05      	cmp	r3, #5
 800102a:	d82f      	bhi.n	800108c <main+0x164>
 800102c:	a201      	add	r2, pc, #4	; (adr r2, 8001034 <main+0x10c>)
 800102e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001032:	bf00      	nop
 8001034:	0800104d 	.word	0x0800104d
 8001038:	08001053 	.word	0x08001053
 800103c:	08001059 	.word	0x08001059
 8001040:	0800105f 	.word	0x0800105f
 8001044:	08001065 	.word	0x08001065
 8001048:	0800106b 	.word	0x0800106b
				{
				case 1:   // Команда начала записи: Создаем файл
					RXCommande1();
 800104c:	f7ff fdd4 	bl	8000bf8 <RXCommande1>
					break;
 8001050:	e01c      	b.n	800108c <main+0x164>
				case 2:   // Команда открытия клапана
					RXCommande2();
 8001052:	f7ff fe3b 	bl	8000ccc <RXCommande2>
					break;
 8001056:	e019      	b.n	800108c <main+0x164>
				case 3:   // Команда запуска двигателя
					RXCommande3();
 8001058:	f7ff fe4e 	bl	8000cf8 <RXCommande3>
					break;
 800105c:	e016      	b.n	800108c <main+0x164>
				case 4:   // Команда запроса данных
					RXCommande4();
 800105e:	f7ff fe6b 	bl	8000d38 <RXCommande4>
					break;
 8001062:	e013      	b.n	800108c <main+0x164>
				case 5:   // Команда закрытия файла на SD и запрет записи на SD
					RXCommande5();
 8001064:	f7ff fe74 	bl	8000d50 <RXCommande5>
					break;
 8001068:	e010      	b.n	800108c <main+0x164>
				case 6:    // Команда закрытия клапана
					RXCommande6();
 800106a:	f7ff feb1 	bl	8000dd0 <RXCommande6>
					break;
 800106e:	bf00      	nop
 8001070:	e00c      	b.n	800108c <main+0x164>
				}
			}
			} else if(ModeRadio==1) // если прерывание по передаче
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <main+0x250>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <main+0x164>
			{
				ModeRadio=0;
 800107a:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <main+0x250>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
				// Сбрасываем флаги
				Rf96_LoRaClearIrq();
 8001080:	f7ff fa40 	bl	8000504 <Rf96_LoRaClearIrq>
	            // Заходим в Standby
				Rf96_Standby();
 8001084:	f7ff fa46 	bl	8000514 <Rf96_Standby>
			    // Ожидаем команду
			    Rf96_Lora_RX_mode();
 8001088:	f7ff fbde 	bl	8000848 <Rf96_Lora_RX_mode>

			}
		}

		if(ResolveSDWrite==1 && ReadyToWrite==1) //  Если разрешена запись на Sd карту и если есть что записывать
 800108c:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <main+0x25c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d19b      	bne.n	8000fcc <main+0xa4>
 8001094:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <main+0x260>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d197      	bne.n	8000fcc <main+0xa4>
		{
			// Запись на SD
			DataConv();
 800109c:	f7ff ff0e 	bl	8000ebc <DataConv>
			fres = f_write(&fil, SDbufWrite, 161, &bytesWrote);
 80010a0:	4b3a      	ldr	r3, [pc, #232]	; (800118c <main+0x264>)
 80010a2:	22a1      	movs	r2, #161	; 0xa1
 80010a4:	493a      	ldr	r1, [pc, #232]	; (8001190 <main+0x268>)
 80010a6:	483b      	ldr	r0, [pc, #236]	; (8001194 <main+0x26c>)
 80010a8:	f007 fd11 	bl	8008ace <f_write>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b39      	ldr	r3, [pc, #228]	; (8001198 <main+0x270>)
 80010b2:	701a      	strb	r2, [r3, #0]
			if (fres != FR_OK)
 80010b4:	4b38      	ldr	r3, [pc, #224]	; (8001198 <main+0x270>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <main+0x1a0>
			{
				while(1)
				{
					// Выключение 1 светодиода, если какая-то проблема с записью на SD
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2102      	movs	r1, #2
 80010c0:	4828      	ldr	r0, [pc, #160]	; (8001164 <main+0x23c>)
 80010c2:	f002 fdab 	bl	8003c1c <HAL_GPIO_WritePin>
 80010c6:	e7f9      	b.n	80010bc <main+0x194>

				}
			}
			if(RadioIrq==1)  // Если пришел запрос на отправку измерений по радио
 80010c8:	4b34      	ldr	r3, [pc, #208]	; (800119c <main+0x274>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d13d      	bne.n	800114c <main+0x224>
			{
				for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	e00a      	b.n	80010ec <main+0x1c4>
				{
					TX_RX_Radio[i+1]=BuffMidW[i+4];
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	1d1a      	adds	r2, r3, #4
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3301      	adds	r3, #1
 80010de:	4930      	ldr	r1, [pc, #192]	; (80011a0 <main+0x278>)
 80010e0:	5c89      	ldrb	r1, [r1, r2]
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <main+0x254>)
 80010e4:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	3301      	adds	r3, #1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b26      	cmp	r3, #38	; 0x26
 80010f0:	d9f1      	bls.n	80010d6 <main+0x1ae>
				}
				// заносим в 1 элемент 4 команду
				TX_RX_Radio[0]=4;
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <main+0x254>)
 80010f4:	2204      	movs	r2, #4
 80010f6:	701a      	strb	r2, [r3, #0]
				// Отсылаем ответ
			    Rf96_Lora_TX_mode();
 80010f8:	f7ff fb8b 	bl	8000812 <Rf96_Lora_TX_mode>
				//Подсчет CRC16
				CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 80010fc:	2128      	movs	r1, #40	; 0x28
 80010fe:	481f      	ldr	r0, [pc, #124]	; (800117c <main+0x254>)
 8001100:	f7ff fbd0 	bl	80008a4 <Crc16>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <main+0x258>)
 800110a:	801a      	strh	r2, [r3, #0]
				TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <main+0x258>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b29b      	uxth	r3, r3
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <main+0x254>)
 8001118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <main+0x258>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <main+0x254>)
 8001124:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				// Установка адреса TX в буфере FIFO
				Rf96_TX_FifoAdr(0x80);
 8001128:	2080      	movs	r0, #128	; 0x80
 800112a:	f7ff fadf 	bl	80006ec <Rf96_TX_FifoAdr>
				// Устанавливает указатель на адрес начала массива TX в FIFO
				Rf96_FIFO_point(0x80);
 800112e:	2080      	movs	r0, #128	; 0x80
 8001130:	f7ff faf8 	bl	8000724 <Rf96_FIFO_point>
			    // Очистка флагов
				Rf96_LoRaClearIrq();
 8001134:	f7ff f9e6 	bl	8000504 <Rf96_LoRaClearIrq>
			    // Отправка посылки
				Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8001138:	212a      	movs	r1, #42	; 0x2a
 800113a:	4810      	ldr	r0, [pc, #64]	; (800117c <main+0x254>)
 800113c:	f7ff fba1 	bl	8000882 <Rf96_LoRaTxPacket>
                // Запрещаем передачу по радио
				RadioIrq=0;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <main+0x274>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
				// следующее Прерывание будет по передаче
				ModeRadio=1;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <main+0x250>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
			}
			// Синхронизация файла и sd карты
			fres = f_sync(&fil);
 800114c:	4811      	ldr	r0, [pc, #68]	; (8001194 <main+0x26c>)
 800114e:	f007 fe33 	bl	8008db8 <f_sync>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <main+0x270>)
 8001158:	701a      	strb	r2, [r3, #0]
			ReadyToWrite=0;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <main+0x260>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
	    SyncCKT();
 8001160:	e734      	b.n	8000fcc <main+0xa4>
 8001162:	bf00      	nop
 8001164:	40020800 	.word	0x40020800
 8001168:	200003c4 	.word	0x200003c4
 800116c:	20000448 	.word	0x20000448
 8001170:	20000354 	.word	0x20000354
 8001174:	40020000 	.word	0x40020000
 8001178:	2000004a 	.word	0x2000004a
 800117c:	20000398 	.word	0x20000398
 8001180:	20000044 	.word	0x20000044
 8001184:	20000046 	.word	0x20000046
 8001188:	20000047 	.word	0x20000047
 800118c:	20000394 	.word	0x20000394
 8001190:	20000588 	.word	0x20000588
 8001194:	200007c8 	.word	0x200007c8
 8001198:	200007c4 	.word	0x200007c4
 800119c:	20000048 	.word	0x20000048
 80011a0:	2000062c 	.word	0x2000062c

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	; 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2234      	movs	r2, #52	; 0x34
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f007 ff28 	bl	8009008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <SystemClock_Config+0xdc>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	4a2b      	ldr	r2, [pc, #172]	; (8001280 <SystemClock_Config+0xdc>)
 80011d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d6:	6413      	str	r3, [r2, #64]	; 0x40
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <SystemClock_Config+0xdc>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <SystemClock_Config+0xe0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a25      	ldr	r2, [pc, #148]	; (8001284 <SystemClock_Config+0xe0>)
 80011ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <SystemClock_Config+0xe0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	2310      	movs	r3, #16
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120c:	2302      	movs	r3, #2
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001210:	2300      	movs	r3, #0
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001214:	2308      	movs	r3, #8
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001218:	23b4      	movs	r3, #180	; 0xb4
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800121c:	2302      	movs	r3, #2
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001220:	2302      	movs	r3, #2
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4618      	mov	r0, r3
 800122e:	f003 f819 	bl	8004264 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001238:	f000 fb84 	bl	8001944 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800123c:	f002 fd08 	bl	8003c50 <HAL_PWREx_EnableOverDrive>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001246:	f000 fb7d 	bl	8001944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	2302      	movs	r3, #2
 8001250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001256:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800125a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2105      	movs	r1, #5
 8001268:	4618      	mov	r0, r3
 800126a:	f002 fd41 	bl	8003cf0 <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001274:	f000 fb66 	bl	8001944 <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3750      	adds	r7, #80	; 0x50
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_SPI1_Init+0x64>)
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <MX_SPI1_Init+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_SPI1_Init+0x64>)
 8001294:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001298:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_SPI1_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_SPI1_Init+0x64>)
 80012b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_SPI1_Init+0x64>)
 80012bc:	2210      	movs	r2, #16
 80012be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_SPI1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_SPI1_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_SPI1_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_SPI1_Init+0x64>)
 80012d4:	220a      	movs	r2, #10
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_SPI1_Init+0x64>)
 80012da:	f003 fa1d 	bl	8004718 <HAL_SPI_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012e4:	f000 fb2e 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200006cc 	.word	0x200006cc
 80012f0:	40013000 	.word	0x40013000

080012f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_SPI3_Init+0x64>)
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <MX_SPI3_Init+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_SPI3_Init+0x64>)
 8001300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001304:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_SPI3_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_SPI3_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_SPI3_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_SPI3_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_SPI3_Init+0x64>)
 8001320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001324:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_SPI3_Init+0x64>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_SPI3_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_SPI3_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_SPI3_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_SPI3_Init+0x64>)
 8001340:	220a      	movs	r2, #10
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_SPI3_Init+0x64>)
 8001346:	f003 f9e7 	bl	8004718 <HAL_SPI_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001350:	f000 faf8 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200003f0 	.word	0x200003f0
 800135c:	40003c00 	.word	0x40003c00

08001360 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001366:	463b      	mov	r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_TIM6_Init+0x64>)
 8001370:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <MX_TIM6_Init+0x68>)
 8001372:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_TIM6_Init+0x64>)
 8001376:	f242 3227 	movw	r2, #8999	; 0x2327
 800137a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_TIM6_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_TIM6_Init+0x64>)
 8001384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001388:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_TIM6_Init+0x64>)
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <MX_TIM6_Init+0x64>)
 8001392:	f004 f835 	bl	8005400 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800139c:	f000 fad2 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_TIM6_Init+0x64>)
 80013ae:	f004 fa71 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80013b8:	f000 fac4 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000658 	.word	0x20000658
 80013c8:	40001000 	.word	0x40001000

080013cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_TIM7_Init+0x64>)
 80013dc:	4a15      	ldr	r2, [pc, #84]	; (8001434 <MX_TIM7_Init+0x68>)
 80013de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <MX_TIM7_Init+0x64>)
 80013e2:	f242 3227 	movw	r2, #8999	; 0x2327
 80013e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_TIM7_Init+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_TIM7_Init+0x64>)
 80013f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_TIM7_Init+0x64>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_TIM7_Init+0x64>)
 80013fe:	f003 ffff 	bl	8005400 <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001408:	f000 fa9c 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_TIM7_Init+0x64>)
 800141a:	f004 fa3b 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001424:	f000 fa8e 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200009f8 	.word	0x200009f8
 8001434:	40001400 	.word	0x40001400

08001438 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_TIM10_Init+0x40>)
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <MX_TIM10_Init+0x44>)
 8001440:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_TIM10_Init+0x40>)
 8001444:	f242 3227 	movw	r2, #8999	; 0x2327
 8001448:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_TIM10_Init+0x40>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_TIM10_Init+0x40>)
 8001452:	f242 7210 	movw	r2, #10000	; 0x2710
 8001456:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <MX_TIM10_Init+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_TIM10_Init+0x40>)
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <MX_TIM10_Init+0x40>)
 8001466:	f003 ffcb 	bl	8005400 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001470:	f000 fa68 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000354 	.word	0x20000354
 800147c:	40014400 	.word	0x40014400

08001480 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_UART5_Init+0x50>)
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <MX_UART5_Init+0x54>)
 8001488:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_UART5_Init+0x50>)
 800148c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001490:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_UART5_Init+0x50>)
 8001494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001498:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MX_UART5_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_UART5_Init+0x50>)
 80014a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_UART5_Init+0x50>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_UART5_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_UART5_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_UART5_Init+0x50>)
 80014bc:	f004 fa7a 	bl	80059b4 <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 80014c6:	f000 fa3d 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000448 	.word	0x20000448
 80014d4:	40005000 	.word	0x40005000

080014d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_USART1_UART_Init+0x50>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014e4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80014e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 8001510:	f004 fa50 	bl	80059b4 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800151a:	f000 fa13 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000548 	.word	0x20000548
 8001528:	40011000 	.word	0x40011000

0800152c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_USART2_UART_Init+0x50>)
 8001534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001538:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800153c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001564:	f004 fa26 	bl	80059b4 <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800156e:	f000 f9e9 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000724 	.word	0x20000724
 800157c:	40004400 	.word	0x40004400

08001580 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <MX_USART3_UART_Init+0x50>)
 8001588:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 800158c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001590:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 80015b8:	f004 f9fc 	bl	80059b4 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015c2:	f000 f9bf 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200000e4 	.word	0x200000e4
 80015d0:	40004800 	.word	0x40004800

080015d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_DMA_Init+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a1e      	ldr	r2, [pc, #120]	; (800165c <MX_DMA_Init+0x88>)
 80015e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_DMA_Init+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_DMA_Init+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <MX_DMA_Init+0x88>)
 8001600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_DMA_Init+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200b      	movs	r0, #11
 8001618:	f001 fd13 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800161c:	200b      	movs	r0, #11
 800161e:	f001 fd2c 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	200c      	movs	r0, #12
 8001628:	f001 fd0b 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800162c:	200c      	movs	r0, #12
 800162e:	f001 fd24 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2011      	movs	r0, #17
 8001638:	f001 fd03 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800163c:	2011      	movs	r0, #17
 800163e:	f001 fd1c 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	203a      	movs	r0, #58	; 0x3a
 8001648:	f001 fcfb 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800164c:	203a      	movs	r0, #58	; 0x3a
 800164e:	f001 fd14 	bl	800307a <HAL_NVIC_EnableIRQ>

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b67      	ldr	r3, [pc, #412]	; (8001818 <MX_GPIO_Init+0x1b8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a66      	ldr	r2, [pc, #408]	; (8001818 <MX_GPIO_Init+0x1b8>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b64      	ldr	r3, [pc, #400]	; (8001818 <MX_GPIO_Init+0x1b8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b60      	ldr	r3, [pc, #384]	; (8001818 <MX_GPIO_Init+0x1b8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a5f      	ldr	r2, [pc, #380]	; (8001818 <MX_GPIO_Init+0x1b8>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b5d      	ldr	r3, [pc, #372]	; (8001818 <MX_GPIO_Init+0x1b8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	4b59      	ldr	r3, [pc, #356]	; (8001818 <MX_GPIO_Init+0x1b8>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a58      	ldr	r2, [pc, #352]	; (8001818 <MX_GPIO_Init+0x1b8>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <MX_GPIO_Init+0x1b8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b52      	ldr	r3, [pc, #328]	; (8001818 <MX_GPIO_Init+0x1b8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a51      	ldr	r2, [pc, #324]	; (8001818 <MX_GPIO_Init+0x1b8>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <MX_GPIO_Init+0x1b8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	210e      	movs	r1, #14
 80016ea:	484c      	ldr	r0, [pc, #304]	; (800181c <MX_GPIO_Init+0x1bc>)
 80016ec:	f002 fa96 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	f248 0112 	movw	r1, #32786	; 0x8012
 80016f6:	484a      	ldr	r0, [pc, #296]	; (8001820 <MX_GPIO_Init+0x1c0>)
 80016f8:	f002 fa90 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001702:	4846      	ldr	r0, [pc, #280]	; (800181c <MX_GPIO_Init+0x1bc>)
 8001704:	f002 fa8a 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|SSV_Pin|acel2_Pin|acel2_2_Pin 
 8001708:	2200      	movs	r2, #0
 800170a:	f24f 0142 	movw	r1, #61506	; 0xf042
 800170e:	4845      	ldr	r0, [pc, #276]	; (8001824 <MX_GPIO_Init+0x1c4>)
 8001710:	f002 fa84 	bl	8003c1c <HAL_GPIO_WritePin>
                          |Motor_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <MX_GPIO_Init+0x1c8>)
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	483c      	ldr	r0, [pc, #240]	; (800181c <MX_GPIO_Init+0x1bc>)
 800172a:	f002 f8cd 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800172e:	230e      	movs	r3, #14
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4835      	ldr	r0, [pc, #212]	; (800181c <MX_GPIO_Init+0x1bc>)
 8001746:	f002 f8bf 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 800174a:	f240 4301 	movw	r3, #1025	; 0x401
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4830      	ldr	r0, [pc, #192]	; (8001820 <MX_GPIO_Init+0x1c0>)
 8001760:	f002 f8b2 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001764:	f248 0312 	movw	r3, #32786	; 0x8012
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4828      	ldr	r0, [pc, #160]	; (8001820 <MX_GPIO_Init+0x1c0>)
 800177e:	f002 f8a3 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|acel1_Pin|acel1_1_Pin;
 8001782:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4820      	ldr	r0, [pc, #128]	; (800181c <MX_GPIO_Init+0x1bc>)
 800179c:	f002 f894 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017a0:	2302      	movs	r3, #2
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	481b      	ldr	r0, [pc, #108]	; (8001824 <MX_GPIO_Init+0x1c4>)
 80017b8:	f002 f886 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSV_Pin acel2_2_Pin Motor_Pin PB6 */
  GPIO_InitStruct.Pin = SSV_Pin|acel2_2_Pin|Motor_Pin|GPIO_PIN_6;
 80017bc:	f24d 0340 	movw	r3, #53312	; 0xd040
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <MX_GPIO_Init+0x1c4>)
 80017d6:	f002 f877 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 80017da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <MX_GPIO_Init+0x1c4>)
 80017f4:	f002 f868 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80017f8:	2338      	movs	r3, #56	; 0x38
 80017fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <MX_GPIO_Init+0x1c4>)
 800180c:	f002 f85c 	bl	80038c8 <HAL_GPIO_Init>

}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	40020800 	.word	0x40020800
 8001820:	40020000 	.word	0x40020000
 8001824:	40020400 	.word	0x40020400
 8001828:	10210000 	.word	0x10210000

0800182c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Обработчик прерываний Usartа по приему
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	if(huart==&huart5)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a20      	ldr	r2, [pc, #128]	; (80018b8 <HAL_UART_RxCpltCallback+0x8c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d138      	bne.n	80018ae <HAL_UART_RxCpltCallback+0x82>
	{
		// Остановка таймера, говорящая о том, что ЦКТ подключен
		HAL_TIM_Base_Stop_IT(&htim10);
 800183c:	481f      	ldr	r0, [pc, #124]	; (80018bc <HAL_UART_RxCpltCallback+0x90>)
 800183e:	f003 fe2e 	bl	800549e <HAL_TIM_Base_Stop_IT>
		TIM10->CNT=0;
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <HAL_UART_RxCpltCallback+0x94>)
 8001844:	2200      	movs	r2, #0
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
        // Включение 2 светодиода, если ЦКТ подключен
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2104      	movs	r1, #4
 800184c:	481d      	ldr	r0, [pc, #116]	; (80018c4 <HAL_UART_RxCpltCallback+0x98>)
 800184e:	f002 f9e5 	bl	8003c1c <HAL_GPIO_WritePin>
		// Если данные синхронизированы
		if(BuffCkt[0]==0x7C && BuffCkt[1]==0x6E && BuffCkt[2]==0xA1 && BuffCkt[3]==0x2C )
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_UART_RxCpltCallback+0x9c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b7c      	cmp	r3, #124	; 0x7c
 8001858:	d123      	bne.n	80018a2 <HAL_UART_RxCpltCallback+0x76>
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_UART_RxCpltCallback+0x9c>)
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	2b6e      	cmp	r3, #110	; 0x6e
 8001860:	d11f      	bne.n	80018a2 <HAL_UART_RxCpltCallback+0x76>
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_UART_RxCpltCallback+0x9c>)
 8001864:	789b      	ldrb	r3, [r3, #2]
 8001866:	2ba1      	cmp	r3, #161	; 0xa1
 8001868:	d11b      	bne.n	80018a2 <HAL_UART_RxCpltCallback+0x76>
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_UART_RxCpltCallback+0x9c>)
 800186c:	78db      	ldrb	r3, [r3, #3]
 800186e:	2b2c      	cmp	r3, #44	; 0x2c
 8001870:	d117      	bne.n	80018a2 <HAL_UART_RxCpltCallback+0x76>
		{
			// Готов к записи
			ReadyToWrite=1;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_UART_RxCpltCallback+0xa0>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
			//  Время в мс, когда пришли данные
			reciveTime = HAL_GetTick();
 8001878:	f001 fada 	bl	8002e30 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_UART_RxCpltCallback+0xa4>)
 8001880:	601a      	str	r2, [r3, #0]
			// Перезаписываем данные в массив посредник
			for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	e008      	b.n	800189a <HAL_UART_RxCpltCallback+0x6e>
			{
				BuffMidW[i]=BuffCkt[i];
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	490e      	ldr	r1, [pc, #56]	; (80018c8 <HAL_UART_RxCpltCallback+0x9c>)
 800188e:	5c89      	ldrb	r1, [r1, r2]
 8001890:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <HAL_UART_RxCpltCallback+0xa8>)
 8001892:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	3301      	adds	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	2b2a      	cmp	r3, #42	; 0x2a
 800189e:	d9f3      	bls.n	8001888 <HAL_UART_RxCpltCallback+0x5c>
 80018a0:	e002      	b.n	80018a8 <HAL_UART_RxCpltCallback+0x7c>
			}
		} else  // Если данные не синхронизированы
		{
			readFlag=1;
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_UART_RxCpltCallback+0xac>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
		}
		// стартуем таймер для дальнейшей проверки на подключение ЦКТ
		HAL_TIM_Base_Start_IT(&htim10);
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <HAL_UART_RxCpltCallback+0x90>)
 80018aa:	f003 fdd4 	bl	8005456 <HAL_TIM_Base_Start_IT>
	}

}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000448 	.word	0x20000448
 80018bc:	20000354 	.word	0x20000354
 80018c0:	40014400 	.word	0x40014400
 80018c4:	40020800 	.word	0x40020800
 80018c8:	200003c4 	.word	0x200003c4
 80018cc:	20000047 	.word	0x20000047
 80018d0:	20000040 	.word	0x20000040
 80018d4:	2000062c 	.word	0x2000062c
 80018d8:	200006ca 	.word	0x200006ca

080018dc <HAL_UART_TxCpltCallback>:
// Обработчик прерываний Usartа по передаче
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]


}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	if(htim==&htim10)  // Если на ЦКТ ничего не пришло, выключаем 2 светодиод
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d112      	bne.n	8001926 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		TIM10->CNT=0;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim10);
 8001906:	480a      	ldr	r0, [pc, #40]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001908:	f003 fda5 	bl	8005456 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800190c:	2201      	movs	r2, #1
 800190e:	2104      	movs	r1, #4
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001912:	f002 f983 	bl	8003c1c <HAL_GPIO_WritePin>
		HAL_UART_Abort(&huart5);
 8001916:	4809      	ldr	r0, [pc, #36]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001918:	f004 f91a 	bl	8005b50 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 800191c:	222b      	movs	r2, #43	; 0x2b
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001920:	4806      	ldr	r0, [pc, #24]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001922:	f004 f895 	bl	8005a50 <HAL_UART_Receive_DMA>
	}
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000354 	.word	0x20000354
 8001934:	40014400 	.word	0x40014400
 8001938:	40020800 	.word	0x40020800
 800193c:	20000448 	.word	0x20000448
 8001940:	200003c4 	.word	0x200003c4

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 800195e:	1df9      	adds	r1, r7, #7
 8001960:	230a      	movs	r3, #10
 8001962:	2201      	movs	r2, #1
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <SPICmd8bit+0x20>)
 8001966:	f002 ff3b 	bl	80047e0 <HAL_SPI_Transmit>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200006cc 	.word	0x200006cc

08001978 <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8001982:	1df9      	adds	r1, r7, #7
 8001984:	230a      	movs	r3, #10
 8001986:	2201      	movs	r2, #1
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <SPIRead8bit+0x20>)
 800198a:	f003 f85d 	bl	8004a48 <HAL_SPI_Receive>

  return(RdPara);
 800198e:	79fb      	ldrb	r3, [r7, #7]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200006cc 	.word	0x200006cc

0800199c <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 80019a6:	2200      	movs	r2, #0
 80019a8:	2140      	movs	r1, #64	; 0x40
 80019aa:	480a      	ldr	r0, [pc, #40]	; (80019d4 <SPIRead+0x38>)
 80019ac:	f002 f936 	bl	8003c1c <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ffce 	bl	8001954 <SPICmd8bit>
  tmp = SPIRead8bit();
 80019b8:	f7ff ffde 	bl	8001978 <SPIRead8bit>
 80019bc:	4603      	mov	r3, r0
 80019be:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 80019c0:	2201      	movs	r2, #1
 80019c2:	2140      	movs	r1, #64	; 0x40
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <SPIRead+0x38>)
 80019c6:	f002 f929 	bl	8003c1c <HAL_GPIO_WritePin>
  return(tmp);
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40020400 	.word	0x40020400

080019d8 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	460a      	mov	r2, r1
 80019e2:	71fb      	strb	r3, [r7, #7]
 80019e4:	4613      	mov	r3, r2
 80019e6:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 80019e8:	2200      	movs	r2, #0
 80019ea:	2140      	movs	r1, #64	; 0x40
 80019ec:	480b      	ldr	r0, [pc, #44]	; (8001a1c <SPIWrite+0x44>)
 80019ee:	f002 f915 	bl	8003c1c <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ffaa 	bl	8001954 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ffa6 	bl	8001954 <SPICmd8bit>
	NSS_H();
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2140      	movs	r1, #64	; 0x40
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <SPIWrite+0x44>)
 8001a0e:	f002 f905 	bl	8003c1c <HAL_GPIO_WritePin>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40020400 	.word	0x40020400

08001a20 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d91f      	bls.n	8001a76 <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 8001a36:	2200      	movs	r2, #0
 8001a38:	2140      	movs	r1, #64	; 0x40
 8001a3a:	4811      	ldr	r0, [pc, #68]	; (8001a80 <SPIBurstRead+0x60>)
 8001a3c:	f002 f8ee 	bl	8003c1c <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff86 	bl	8001954 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
 8001a4c:	e009      	b.n	8001a62 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	18d4      	adds	r4, r2, r3
 8001a54:	f7ff ff90 	bl	8001978 <SPIRead8bit>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	79bb      	ldrb	r3, [r7, #6]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d3f1      	bcc.n	8001a4e <SPIBurstRead+0x2e>
      NSS_H();
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2140      	movs	r1, #64	; 0x40
 8001a6e:	4804      	ldr	r0, [pc, #16]	; (8001a80 <SPIBurstRead+0x60>)
 8001a70:	f002 f8d4 	bl	8003c1c <HAL_GPIO_WritePin>
 8001a74:	e000      	b.n	8001a78 <SPIBurstRead+0x58>
    return;
 8001a76:	bf00      	nop
  }
}
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40020400 	.word	0x40020400

08001a84 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
 8001a90:	4613      	mov	r3, r2
 8001a92:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001a94:	79bb      	ldrb	r3, [r7, #6]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d922      	bls.n	8001ae0 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2140      	movs	r1, #64	; 0x40
 8001a9e:	4812      	ldr	r0, [pc, #72]	; (8001ae8 <BurstWrite+0x64>)
 8001aa0:	f002 f8bc 	bl	8003c1c <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff51 	bl	8001954 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	e009      	b.n	8001acc <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff47 	bl	8001954 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	79bb      	ldrb	r3, [r7, #6]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3f1      	bcc.n	8001ab8 <BurstWrite+0x34>
    NSS_H();
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2140      	movs	r1, #64	; 0x40
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <BurstWrite+0x64>)
 8001ada:	f002 f89f 	bl	8003c1c <HAL_GPIO_WritePin>
 8001ade:	e000      	b.n	8001ae2 <BurstWrite+0x5e>
    return;
 8001ae0:	bf00      	nop
  }
}
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40020400 	.word	0x40020400

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_MspInit+0x4c>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a4e      	ldr	r2, [pc, #312]	; (8001c94 <HAL_SPI_MspInit+0x158>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d12c      	bne.n	8001bb8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b4a      	ldr	r3, [pc, #296]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	4b46      	ldr	r3, [pc, #280]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a45      	ldr	r2, [pc, #276]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b96:	23e0      	movs	r3, #224	; 0xe0
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	483a      	ldr	r0, [pc, #232]	; (8001c9c <HAL_SPI_MspInit+0x160>)
 8001bb2:	f001 fe89 	bl	80038c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001bb6:	e068      	b.n	8001c8a <HAL_SPI_MspInit+0x14e>
  else if(hspi->Instance==SPI3)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a38      	ldr	r2, [pc, #224]	; (8001ca0 <HAL_SPI_MspInit+0x164>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d163      	bne.n	8001c8a <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a33      	ldr	r2, [pc, #204]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a2c      	ldr	r2, [pc, #176]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <HAL_SPI_MspInit+0x15c>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c16:	2301      	movs	r3, #1
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c26:	2307      	movs	r3, #7
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	481c      	ldr	r0, [pc, #112]	; (8001ca4 <HAL_SPI_MspInit+0x168>)
 8001c32:	f001 fe49 	bl	80038c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c48:	2306      	movs	r3, #6
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4815      	ldr	r0, [pc, #84]	; (8001ca8 <HAL_SPI_MspInit+0x16c>)
 8001c54:	f001 fe38 	bl	80038c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <HAL_SPI_MspInit+0x16c>)
 8001c76:	f001 fe27 	bl	80038c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2033      	movs	r0, #51	; 0x33
 8001c80:	f001 f9df 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001c84:	2033      	movs	r0, #51	; 0x33
 8001c86:	f001 f9f8 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3730      	adds	r7, #48	; 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40013000 	.word	0x40013000
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	40003c00 	.word	0x40003c00
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800

08001cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2a      	ldr	r2, [pc, #168]	; (8001d64 <HAL_TIM_Base_MspInit+0xb8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d116      	bne.n	8001cec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc8:	f043 0310 	orr.w	r3, r3, #16
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <HAL_TIM_Base_MspInit+0xbc>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2036      	movs	r0, #54	; 0x36
 8001ce0:	f001 f9af 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ce4:	2036      	movs	r0, #54	; 0x36
 8001ce6:	f001 f9c8 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001cea:	e036      	b.n	8001d5a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <HAL_TIM_Base_MspInit+0xc0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d116      	bne.n	8001d24 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_TIM_Base_MspInit+0xbc>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <HAL_TIM_Base_MspInit+0xbc>)
 8001d00:	f043 0320 	orr.w	r3, r3, #32
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_TIM_Base_MspInit+0xbc>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2037      	movs	r0, #55	; 0x37
 8001d18:	f001 f993 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d1c:	2037      	movs	r0, #55	; 0x37
 8001d1e:	f001 f9ac 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 8001d22:	e01a      	b.n	8001d5a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <HAL_TIM_Base_MspInit+0xc4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d115      	bne.n	8001d5a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_TIM_Base_MspInit+0xbc>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <HAL_TIM_Base_MspInit+0xbc>)
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_TIM_Base_MspInit+0xbc>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2019      	movs	r0, #25
 8001d50:	f001 f977 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d54:	2019      	movs	r0, #25
 8001d56:	f001 f990 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40001000 	.word	0x40001000
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40001400 	.word	0x40001400
 8001d70:	40014400 	.word	0x40014400

08001d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b092      	sub	sp, #72	; 0x48
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a87      	ldr	r2, [pc, #540]	; (8001fb0 <HAL_UART_MspInit+0x23c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	f040 8083 	bne.w	8001e9e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d9c:	4b85      	ldr	r3, [pc, #532]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	4a84      	ldr	r2, [pc, #528]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001da6:	6413      	str	r3, [r2, #64]	; 0x40
 8001da8:	4b82      	ldr	r3, [pc, #520]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db8:	4b7e      	ldr	r3, [pc, #504]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4a7d      	ldr	r2, [pc, #500]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc4:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd4:	4b77      	ldr	r3, [pc, #476]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4a76      	ldr	r2, [pc, #472]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001dda:	f043 0308 	orr.w	r3, r3, #8
 8001dde:	6313      	str	r3, [r2, #48]	; 0x30
 8001de0:	4b74      	ldr	r3, [pc, #464]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001dfe:	2308      	movs	r3, #8
 8001e00:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e06:	4619      	mov	r1, r3
 8001e08:	486b      	ldr	r0, [pc, #428]	; (8001fb8 <HAL_UART_MspInit+0x244>)
 8001e0a:	f001 fd5d 	bl	80038c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e1e:	2308      	movs	r3, #8
 8001e20:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e26:	4619      	mov	r1, r3
 8001e28:	4864      	ldr	r0, [pc, #400]	; (8001fbc <HAL_UART_MspInit+0x248>)
 8001e2a:	f001 fd4d 	bl	80038c8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001e2e:	4b64      	ldr	r3, [pc, #400]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e30:	4a64      	ldr	r2, [pc, #400]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001e32:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001e34:	4b62      	ldr	r3, [pc, #392]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e3a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e3c:	4b60      	ldr	r3, [pc, #384]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e42:	4b5f      	ldr	r3, [pc, #380]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e48:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e4e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e50:	4b5b      	ldr	r3, [pc, #364]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e56:	4b5a      	ldr	r3, [pc, #360]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001e5c:	4b58      	ldr	r3, [pc, #352]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e62:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e64:	4b56      	ldr	r3, [pc, #344]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e6a:	4b55      	ldr	r3, [pc, #340]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001e70:	4853      	ldr	r0, [pc, #332]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e72:	f001 f91d 	bl	80030b0 <HAL_DMA_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001e7c:	f7ff fd62 	bl	8001944 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a4f      	ldr	r2, [pc, #316]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34
 8001e86:	4a4e      	ldr	r2, [pc, #312]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2035      	movs	r0, #53	; 0x35
 8001e92:	f001 f8d6 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e96:	2035      	movs	r0, #53	; 0x35
 8001e98:	f001 f8ef 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e9c:	e18e      	b.n	80021bc <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a49      	ldr	r2, [pc, #292]	; (8001fc8 <HAL_UART_MspInit+0x254>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	f040 8099 	bne.w	8001fdc <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001eb4:	f043 0310 	orr.w	r3, r3, #16
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
 8001eca:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a39      	ldr	r2, [pc, #228]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a32      	ldr	r2, [pc, #200]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <HAL_UART_MspInit+0x240>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f10:	2307      	movs	r3, #7
 8001f12:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f18:	4619      	mov	r1, r3
 8001f1a:	482c      	ldr	r0, [pc, #176]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001f1c:	f001 fcd4 	bl	80038c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f30:	2307      	movs	r3, #7
 8001f32:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4825      	ldr	r0, [pc, #148]	; (8001fd0 <HAL_UART_MspInit+0x25c>)
 8001f3c:	f001 fcc4 	bl	80038c8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <HAL_UART_MspInit+0x264>)
 8001f44:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001f46:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f60:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f74:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f82:	4814      	ldr	r0, [pc, #80]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f84:	f001 f894 	bl	80030b0 <HAL_DMA_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001f8e:	f7ff fcd9 	bl	8001944 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2025      	movs	r0, #37	; 0x25
 8001fa4:	f001 f84d 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fa8:	2025      	movs	r0, #37	; 0x25
 8001faa:	f001 f866 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 8001fae:	e105      	b.n	80021bc <HAL_UART_MspInit+0x448>
 8001fb0:	40005000 	.word	0x40005000
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020c00 	.word	0x40020c00
 8001fc0:	20000764 	.word	0x20000764
 8001fc4:	40026010 	.word	0x40026010
 8001fc8:	40011000 	.word	0x40011000
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40020400 	.word	0x40020400
 8001fd4:	20000488 	.word	0x20000488
 8001fd8:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a78      	ldr	r2, [pc, #480]	; (80021c4 <HAL_UART_MspInit+0x450>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d162      	bne.n	80020ac <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	4b77      	ldr	r3, [pc, #476]	; (80021c8 <HAL_UART_MspInit+0x454>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a76      	ldr	r2, [pc, #472]	; (80021c8 <HAL_UART_MspInit+0x454>)
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b74      	ldr	r3, [pc, #464]	; (80021c8 <HAL_UART_MspInit+0x454>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	4b70      	ldr	r3, [pc, #448]	; (80021c8 <HAL_UART_MspInit+0x454>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a6f      	ldr	r2, [pc, #444]	; (80021c8 <HAL_UART_MspInit+0x454>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b6d      	ldr	r3, [pc, #436]	; (80021c8 <HAL_UART_MspInit+0x454>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800201e:	230c      	movs	r3, #12
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800202e:	2307      	movs	r3, #7
 8002030:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002036:	4619      	mov	r1, r3
 8002038:	4864      	ldr	r0, [pc, #400]	; (80021cc <HAL_UART_MspInit+0x458>)
 800203a:	f001 fc45 	bl	80038c8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800203e:	4b64      	ldr	r3, [pc, #400]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 8002040:	4a64      	ldr	r2, [pc, #400]	; (80021d4 <HAL_UART_MspInit+0x460>)
 8002042:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002044:	4b62      	ldr	r3, [pc, #392]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 8002046:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800204a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800204c:	4b60      	ldr	r3, [pc, #384]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 800204e:	2240      	movs	r2, #64	; 0x40
 8002050:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002052:	4b5f      	ldr	r3, [pc, #380]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002058:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 800205a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800205e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002060:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002066:	4b5a      	ldr	r3, [pc, #360]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800206c:	4b58      	ldr	r3, [pc, #352]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002072:	4b57      	ldr	r3, [pc, #348]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002078:	4b55      	ldr	r3, [pc, #340]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800207e:	4854      	ldr	r0, [pc, #336]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 8002080:	f001 f816 	bl	80030b0 <HAL_DMA_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_UART_MspInit+0x31a>
      Error_Handler();
 800208a:	f7ff fc5b 	bl	8001944 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4f      	ldr	r2, [pc, #316]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
 8002094:	4a4e      	ldr	r2, [pc, #312]	; (80021d0 <HAL_UART_MspInit+0x45c>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	2026      	movs	r0, #38	; 0x26
 80020a0:	f000 ffcf 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020a4:	2026      	movs	r0, #38	; 0x26
 80020a6:	f000 ffe8 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 80020aa:	e087      	b.n	80021bc <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a49      	ldr	r2, [pc, #292]	; (80021d8 <HAL_UART_MspInit+0x464>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	f040 8082 	bne.w	80021bc <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	4b42      	ldr	r3, [pc, #264]	; (80021c8 <HAL_UART_MspInit+0x454>)
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	4a41      	ldr	r2, [pc, #260]	; (80021c8 <HAL_UART_MspInit+0x454>)
 80020c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c6:	6413      	str	r3, [r2, #64]	; 0x40
 80020c8:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <HAL_UART_MspInit+0x454>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_UART_MspInit+0x454>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	4a3a      	ldr	r2, [pc, #232]	; (80021c8 <HAL_UART_MspInit+0x454>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6313      	str	r3, [r2, #48]	; 0x30
 80020e4:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <HAL_UART_MspInit+0x454>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <HAL_UART_MspInit+0x454>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a33      	ldr	r2, [pc, #204]	; (80021c8 <HAL_UART_MspInit+0x454>)
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002100:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <HAL_UART_MspInit+0x454>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800210c:	2320      	movs	r3, #32
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800211c:	2307      	movs	r3, #7
 800211e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002120:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002124:	4619      	mov	r1, r3
 8002126:	482d      	ldr	r0, [pc, #180]	; (80021dc <HAL_UART_MspInit+0x468>)
 8002128:	f001 fbce 	bl	80038c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800212c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800213e:	2307      	movs	r3, #7
 8002140:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002142:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002146:	4619      	mov	r1, r3
 8002148:	4825      	ldr	r0, [pc, #148]	; (80021e0 <HAL_UART_MspInit+0x46c>)
 800214a:	f001 fbbd 	bl	80038c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_UART_MspInit+0x470>)
 8002150:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <HAL_UART_MspInit+0x474>)
 8002152:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_UART_MspInit+0x470>)
 8002156:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800215a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_UART_MspInit+0x470>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_UART_MspInit+0x470>)
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <HAL_UART_MspInit+0x470>)
 800216a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002170:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_UART_MspInit+0x470>)
 8002172:	2200      	movs	r2, #0
 8002174:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_UART_MspInit+0x470>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_UART_MspInit+0x470>)
 800217e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002182:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002184:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_UART_MspInit+0x470>)
 8002186:	2200      	movs	r2, #0
 8002188:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_UART_MspInit+0x470>)
 800218c:	2200      	movs	r2, #0
 800218e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002190:	4814      	ldr	r0, [pc, #80]	; (80021e4 <HAL_UART_MspInit+0x470>)
 8002192:	f000 ff8d 	bl	80030b0 <HAL_DMA_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 800219c:	f7ff fbd2 	bl	8001944 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a10      	ldr	r2, [pc, #64]	; (80021e4 <HAL_UART_MspInit+0x470>)
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34
 80021a6:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <HAL_UART_MspInit+0x470>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2027      	movs	r0, #39	; 0x27
 80021b2:	f000 ff46 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021b6:	2027      	movs	r0, #39	; 0x27
 80021b8:	f000 ff5f 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 80021bc:	bf00      	nop
 80021be:	3748      	adds	r7, #72	; 0x48
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40004400 	.word	0x40004400
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	200004e8 	.word	0x200004e8
 80021d4:	400260a0 	.word	0x400260a0
 80021d8:	40004800 	.word	0x40004800
 80021dc:	40020800 	.word	0x40020800
 80021e0:	40020400 	.word	0x40020400
 80021e4:	20000080 	.word	0x20000080
 80021e8:	40026028 	.word	0x40026028

080021ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <HardFault_Handler+0x4>

08002200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <MemManage_Handler+0x4>

08002206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <BusFault_Handler+0x4>

0800220c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <UsageFault_Handler+0x4>

08002212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002240:	f000 fde2 	bl	8002e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}

08002248 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <DMA1_Stream0_IRQHandler+0x10>)
 800224e:	f001 f8c7 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000764 	.word	0x20000764

0800225c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <DMA1_Stream1_IRQHandler+0x10>)
 8002262:	f001 f8bd 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000080 	.word	0x20000080

08002270 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <DMA1_Stream6_IRQHandler+0x10>)
 8002276:	f001 f8b3 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200004e8 	.word	0x200004e8

08002284 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800228a:	f003 f933 	bl	80054f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000354 	.word	0x20000354

08002298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <USART1_IRQHandler+0x10>)
 800229e:	f003 fcd9 	bl	8005c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000548 	.word	0x20000548

080022ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <USART2_IRQHandler+0x10>)
 80022b2:	f003 fccf 	bl	8005c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000724 	.word	0x20000724

080022c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <USART3_IRQHandler+0x10>)
 80022c6:	f003 fcc5 	bl	8005c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200000e4 	.word	0x200000e4

080022d4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <SPI3_IRQHandler+0x10>)
 80022da:	f002 fe61 	bl	8004fa0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200003f0 	.word	0x200003f0

080022e8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <UART5_IRQHandler+0x10>)
 80022ee:	f003 fcb1 	bl	8005c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000448 	.word	0x20000448

080022fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM6_DAC_IRQHandler+0x10>)
 8002302:	f003 f8f7 	bl	80054f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000658 	.word	0x20000658

08002310 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <TIM7_IRQHandler+0x10>)
 8002316:	f003 f8ed 	bl	80054f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200009f8 	.word	0x200009f8

08002324 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <DMA2_Stream2_IRQHandler+0x10>)
 800232a:	f001 f859 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000488 	.word	0x20000488

08002338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <SystemInit+0x28>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	4a07      	ldr	r2, [pc, #28]	; (8002360 <SystemInit+0x28>)
 8002344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <SystemInit+0x28>)
 800234e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002352:	609a      	str	r2, [r3, #8]
#endif
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800236c:	f000 fd60 	bl	8002e30 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <SPI_Timer_On+0x20>)
 8002374:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002376:	4a04      	ldr	r2, [pc, #16]	; (8002388 <SPI_Timer_On+0x24>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000a38 	.word	0x20000a38
 8002388:	20000a3c 	.word	0x20000a3c

0800238c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002390:	f000 fd4e 	bl	8002e30 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <SPI_Timer_Status+0x24>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <SPI_Timer_Status+0x28>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	bf34      	ite	cc
 80023a4:	2301      	movcc	r3, #1
 80023a6:	2300      	movcs	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000a38 	.word	0x20000a38
 80023b4:	20000a3c 	.word	0x20000a3c

080023b8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af02      	add	r7, sp, #8
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;

    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 80023c2:	f107 020f 	add.w	r2, r7, #15
 80023c6:	1df9      	adds	r1, r7, #7
 80023c8:	2332      	movs	r3, #50	; 0x32
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2301      	movs	r3, #1
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <xchg_spi+0x28>)
 80023d0:	f002 fc43 	bl	8004c5a <HAL_SPI_TransmitReceive>
    return rxDat;
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200003f0 	.word	0x200003f0

080023e4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e00a      	b.n	800240a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	18d4      	adds	r4, r2, r3
 80023fa:	20ff      	movs	r0, #255	; 0xff
 80023fc:	f7ff ffdc 	bl	80023b8 <xchg_spi>
 8002400:	4603      	mov	r3, r0
 8002402:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3301      	adds	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d3f0      	bcc.n	80023f4 <rcvr_spi_multi+0x10>
	}
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bd90      	pop	{r4, r7, pc}

0800241a <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	e009      	b.n	800243e <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ffc0 	bl	80023b8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3301      	adds	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d3f1      	bcc.n	800242a <xmit_spi_multi+0x10>
	}
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002456:	f000 fceb 	bl	8002e30 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002460:	20ff      	movs	r0, #255	; 0xff
 8002462:	f7ff ffa9 	bl	80023b8 <xchg_spi>
 8002466:	4603      	mov	r3, r0
 8002468:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2bff      	cmp	r3, #255	; 0xff
 800246e:	d007      	beq.n	8002480 <wait_ready+0x32>
 8002470:	f000 fcde 	bl	8002e30 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	429a      	cmp	r2, r3
 800247e:	d8ef      	bhi.n	8002460 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2bff      	cmp	r3, #255	; 0xff
 8002484:	bf0c      	ite	eq
 8002486:	2301      	moveq	r3, #1
 8002488:	2300      	movne	r3, #0
 800248a:	b2db      	uxtb	r3, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800249e:	4804      	ldr	r0, [pc, #16]	; (80024b0 <despiselect+0x1c>)
 80024a0:	f001 fbbc 	bl	8003c1c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80024a4:	20ff      	movs	r0, #255	; 0xff
 80024a6:	f7ff ff87 	bl	80023b8 <xchg_spi>

}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40020000 	.word	0x40020000

080024b4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80024b8:	2200      	movs	r2, #0
 80024ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024be:	480a      	ldr	r0, [pc, #40]	; (80024e8 <spiselect+0x34>)
 80024c0:	f001 fbac 	bl	8003c1c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80024c4:	20ff      	movs	r0, #255	; 0xff
 80024c6:	f7ff ff77 	bl	80023b8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80024ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ce:	f7ff ffbe 	bl	800244e <wait_ready>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <spiselect+0x28>
 80024d8:	2301      	movs	r3, #1
 80024da:	e002      	b.n	80024e2 <spiselect+0x2e>

	despiselect();
 80024dc:	f7ff ffda 	bl	8002494 <despiselect>
	return 0;	/* Timeout */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40020000 	.word	0x40020000

080024ec <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80024f6:	20c8      	movs	r0, #200	; 0xc8
 80024f8:	f7ff ff34 	bl	8002364 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80024fc:	20ff      	movs	r0, #255	; 0xff
 80024fe:	f7ff ff5b 	bl	80023b8 <xchg_spi>
 8002502:	4603      	mov	r3, r0
 8002504:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2bff      	cmp	r3, #255	; 0xff
 800250a:	d104      	bne.n	8002516 <rcvr_datablock+0x2a>
 800250c:	f7ff ff3e 	bl	800238c <SPI_Timer_Status>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f2      	bne.n	80024fc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	2bfe      	cmp	r3, #254	; 0xfe
 800251a:	d001      	beq.n	8002520 <rcvr_datablock+0x34>
 800251c:	2300      	movs	r3, #0
 800251e:	e00a      	b.n	8002536 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002520:	6839      	ldr	r1, [r7, #0]
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ff5e 	bl	80023e4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002528:	20ff      	movs	r0, #255	; 0xff
 800252a:	f7ff ff45 	bl	80023b8 <xchg_spi>
 800252e:	20ff      	movs	r0, #255	; 0xff
 8002530:	f7ff ff42 	bl	80023b8 <xchg_spi>

	return 1;						/* Function succeeded */
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800254a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800254e:	f7ff ff7e 	bl	800244e <wait_ready>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <xmit_datablock+0x1e>
 8002558:	2300      	movs	r3, #0
 800255a:	e01e      	b.n	800259a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff2a 	bl	80023b8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	2bfd      	cmp	r3, #253	; 0xfd
 8002568:	d016      	beq.n	8002598 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800256a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ff53 	bl	800241a <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002574:	20ff      	movs	r0, #255	; 0xff
 8002576:	f7ff ff1f 	bl	80023b8 <xchg_spi>
 800257a:	20ff      	movs	r0, #255	; 0xff
 800257c:	f7ff ff1c 	bl	80023b8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002580:	20ff      	movs	r0, #255	; 0xff
 8002582:	f7ff ff19 	bl	80023b8 <xchg_spi>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2b05      	cmp	r3, #5
 8002592:	d001      	beq.n	8002598 <xmit_datablock+0x5a>
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <xmit_datablock+0x5c>
	}
	return 1;
 8002598:	2301      	movs	r3, #1
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	6039      	str	r1, [r7, #0]
 80025ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da0e      	bge.n	80025d4 <send_cmd+0x32>
		cmd &= 0x7F;
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025bc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80025be:	2100      	movs	r1, #0
 80025c0:	2037      	movs	r0, #55	; 0x37
 80025c2:	f7ff ffee 	bl	80025a2 <send_cmd>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d901      	bls.n	80025d4 <send_cmd+0x32>
 80025d0:	7bbb      	ldrb	r3, [r7, #14]
 80025d2:	e051      	b.n	8002678 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d008      	beq.n	80025ec <send_cmd+0x4a>
		despiselect();
 80025da:	f7ff ff5b 	bl	8002494 <despiselect>
		if (!spiselect()) return 0xFF;
 80025de:	f7ff ff69 	bl	80024b4 <spiselect>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <send_cmd+0x4a>
 80025e8:	23ff      	movs	r3, #255	; 0xff
 80025ea:	e045      	b.n	8002678 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fedf 	bl	80023b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	0e1b      	lsrs	r3, r3, #24
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fed9 	bl	80023b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	b2db      	uxtb	r3, r3
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fed3 	bl	80023b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	b2db      	uxtb	r3, r3
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fecd 	bl	80023b8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fec8 	bl	80023b8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <send_cmd+0x94>
 8002632:	2395      	movs	r3, #149	; 0x95
 8002634:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d101      	bne.n	8002640 <send_cmd+0x9e>
 800263c:	2387      	movs	r3, #135	; 0x87
 800263e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff feb8 	bl	80023b8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d102      	bne.n	8002654 <send_cmd+0xb2>
 800264e:	20ff      	movs	r0, #255	; 0xff
 8002650:	f7ff feb2 	bl	80023b8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002654:	230a      	movs	r3, #10
 8002656:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002658:	20ff      	movs	r0, #255	; 0xff
 800265a:	f7ff fead 	bl	80023b8 <xchg_spi>
 800265e:	4603      	mov	r3, r0
 8002660:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002666:	2b00      	cmp	r3, #0
 8002668:	da05      	bge.n	8002676 <send_cmd+0xd4>
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	3b01      	subs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002676:	7bbb      	ldrb	r3, [r7, #14]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <USER_SPI_initialize+0x14>
 8002690:	2301      	movs	r3, #1
 8002692:	e0cb      	b.n	800282c <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002694:	4b67      	ldr	r3, [pc, #412]	; (8002834 <USER_SPI_initialize+0x1b4>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <USER_SPI_initialize+0x2a>
 80026a2:	4b64      	ldr	r3, [pc, #400]	; (8002834 <USER_SPI_initialize+0x1b4>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	e0c0      	b.n	800282c <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 80026aa:	4b63      	ldr	r3, [pc, #396]	; (8002838 <USER_SPI_initialize+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b2:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80026b4:	230a      	movs	r3, #10
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e005      	b.n	80026c6 <USER_SPI_initialize+0x46>
 80026ba:	20ff      	movs	r0, #255	; 0xff
 80026bc:	f7ff fe7c 	bl	80023b8 <xchg_spi>
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f6      	bne.n	80026ba <USER_SPI_initialize+0x3a>

	ty = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80026d0:	2100      	movs	r1, #0
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7ff ff65 	bl	80025a2 <send_cmd>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	f040 808b 	bne.w	80027f6 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80026e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026e4:	f7ff fe3e 	bl	8002364 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80026e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80026ec:	2008      	movs	r0, #8
 80026ee:	f7ff ff58 	bl	80025a2 <send_cmd>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d151      	bne.n	800279c <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	e00d      	b.n	800271a <USER_SPI_initialize+0x9a>
 80026fe:	7bfc      	ldrb	r4, [r7, #15]
 8002700:	20ff      	movs	r0, #255	; 0xff
 8002702:	f7ff fe59 	bl	80023b8 <xchg_spi>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	4423      	add	r3, r4
 8002710:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	3301      	adds	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d9ee      	bls.n	80026fe <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002720:	7abb      	ldrb	r3, [r7, #10]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d167      	bne.n	80027f6 <USER_SPI_initialize+0x176>
 8002726:	7afb      	ldrb	r3, [r7, #11]
 8002728:	2baa      	cmp	r3, #170	; 0xaa
 800272a:	d164      	bne.n	80027f6 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800272c:	bf00      	nop
 800272e:	f7ff fe2d 	bl	800238c <SPI_Timer_Status>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <USER_SPI_initialize+0xc8>
 8002738:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800273c:	20a9      	movs	r0, #169	; 0xa9
 800273e:	f7ff ff30 	bl	80025a2 <send_cmd>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f2      	bne.n	800272e <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002748:	f7ff fe20 	bl	800238c <SPI_Timer_Status>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d051      	beq.n	80027f6 <USER_SPI_initialize+0x176>
 8002752:	2100      	movs	r1, #0
 8002754:	203a      	movs	r0, #58	; 0x3a
 8002756:	f7ff ff24 	bl	80025a2 <send_cmd>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d14a      	bne.n	80027f6 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e00d      	b.n	8002782 <USER_SPI_initialize+0x102>
 8002766:	7bfc      	ldrb	r4, [r7, #15]
 8002768:	20ff      	movs	r0, #255	; 0xff
 800276a:	f7ff fe25 	bl	80023b8 <xchg_spi>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	f107 0310 	add.w	r3, r7, #16
 8002776:	4423      	add	r3, r4
 8002778:	f803 2c08 	strb.w	r2, [r3, #-8]
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	3301      	adds	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d9ee      	bls.n	8002766 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002788:	7a3b      	ldrb	r3, [r7, #8]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <USER_SPI_initialize+0x116>
 8002792:	230c      	movs	r3, #12
 8002794:	e000      	b.n	8002798 <USER_SPI_initialize+0x118>
 8002796:	2304      	movs	r3, #4
 8002798:	737b      	strb	r3, [r7, #13]
 800279a:	e02c      	b.n	80027f6 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800279c:	2100      	movs	r1, #0
 800279e:	20a9      	movs	r0, #169	; 0xa9
 80027a0:	f7ff feff 	bl	80025a2 <send_cmd>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d804      	bhi.n	80027b4 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80027aa:	2302      	movs	r3, #2
 80027ac:	737b      	strb	r3, [r7, #13]
 80027ae:	23a9      	movs	r3, #169	; 0xa9
 80027b0:	73bb      	strb	r3, [r7, #14]
 80027b2:	e003      	b.n	80027bc <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80027b4:	2301      	movs	r3, #1
 80027b6:	737b      	strb	r3, [r7, #13]
 80027b8:	2301      	movs	r3, #1
 80027ba:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80027bc:	bf00      	nop
 80027be:	f7ff fde5 	bl	800238c <SPI_Timer_Status>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <USER_SPI_initialize+0x158>
 80027c8:	7bbb      	ldrb	r3, [r7, #14]
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fee8 	bl	80025a2 <send_cmd>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f2      	bne.n	80027be <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80027d8:	f7ff fdd8 	bl	800238c <SPI_Timer_Status>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <USER_SPI_initialize+0x172>
 80027e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027e6:	2010      	movs	r0, #16
 80027e8:	f7ff fedb 	bl	80025a2 <send_cmd>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <USER_SPI_initialize+0x176>
				ty = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 80027f6:	4a11      	ldr	r2, [pc, #68]	; (800283c <USER_SPI_initialize+0x1bc>)
 80027f8:	7b7b      	ldrb	r3, [r7, #13]
 80027fa:	7013      	strb	r3, [r2, #0]
	despiselect();
 80027fc:	f7ff fe4a 	bl	8002494 <despiselect>

	if (ty) {			/* OK */
 8002800:	7b7b      	ldrb	r3, [r7, #13]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00c      	beq.n	8002820 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <USER_SPI_initialize+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2210      	movs	r2, #16
 800280c:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <USER_SPI_initialize+0x1b4>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <USER_SPI_initialize+0x1b4>)
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e002      	b.n	8002826 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <USER_SPI_initialize+0x1b4>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002826:	4b03      	ldr	r3, [pc, #12]	; (8002834 <USER_SPI_initialize+0x1b4>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	b2db      	uxtb	r3, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bd90      	pop	{r4, r7, pc}
 8002834:	20000004 	.word	0x20000004
 8002838:	200003f0 	.word	0x200003f0
 800283c:	2000004b 	.word	0x2000004b

08002840 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <USER_SPI_status+0x14>
 8002850:	2301      	movs	r3, #1
 8002852:	e002      	b.n	800285a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <USER_SPI_status+0x28>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b2db      	uxtb	r3, r3
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000004 	.word	0x20000004

0800286c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	4603      	mov	r3, r0
 800287a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <USER_SPI_read+0x1c>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <USER_SPI_read+0x20>
 8002888:	2304      	movs	r3, #4
 800288a:	e04d      	b.n	8002928 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800288c:	4b28      	ldr	r3, [pc, #160]	; (8002930 <USER_SPI_read+0xc4>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <USER_SPI_read+0x32>
 800289a:	2303      	movs	r3, #3
 800289c:	e044      	b.n	8002928 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800289e:	4b25      	ldr	r3, [pc, #148]	; (8002934 <USER_SPI_read+0xc8>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d102      	bne.n	80028b0 <USER_SPI_read+0x44>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	025b      	lsls	r3, r3, #9
 80028ae:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d111      	bne.n	80028da <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	2011      	movs	r0, #17
 80028ba:	f7ff fe72 	bl	80025a2 <send_cmd>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d129      	bne.n	8002918 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80028c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028c8:	68b8      	ldr	r0, [r7, #8]
 80028ca:	f7ff fe0f 	bl	80024ec <rcvr_datablock>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d021      	beq.n	8002918 <USER_SPI_read+0xac>
			count = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	e01e      	b.n	8002918 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	2012      	movs	r0, #18
 80028de:	f7ff fe60 	bl	80025a2 <send_cmd>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d117      	bne.n	8002918 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80028e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ec:	68b8      	ldr	r0, [r7, #8]
 80028ee:	f7ff fdfd 	bl	80024ec <rcvr_datablock>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <USER_SPI_read+0xa2>
				buff += 512;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80028fe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	3b01      	subs	r3, #1
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ed      	bne.n	80028e8 <USER_SPI_read+0x7c>
 800290c:	e000      	b.n	8002910 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800290e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002910:	2100      	movs	r1, #0
 8002912:	200c      	movs	r0, #12
 8002914:	f7ff fe45 	bl	80025a2 <send_cmd>
		}
	}
	despiselect();
 8002918:	f7ff fdbc 	bl	8002494 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	bf14      	ite	ne
 8002922:	2301      	movne	r3, #1
 8002924:	2300      	moveq	r3, #0
 8002926:	b2db      	uxtb	r3, r3
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000004 	.word	0x20000004
 8002934:	2000004b 	.word	0x2000004b

08002938 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4603      	mov	r3, r0
 8002946:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <USER_SPI_write+0x1c>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <USER_SPI_write+0x20>
 8002954:	2304      	movs	r3, #4
 8002956:	e063      	b.n	8002a20 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002958:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <USER_SPI_write+0xf0>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <USER_SPI_write+0x32>
 8002966:	2303      	movs	r3, #3
 8002968:	e05a      	b.n	8002a20 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <USER_SPI_write+0xf0>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <USER_SPI_write+0x44>
 8002978:	2302      	movs	r3, #2
 800297a:	e051      	b.n	8002a20 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800297c:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <USER_SPI_write+0xf4>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <USER_SPI_write+0x56>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	025b      	lsls	r3, r3, #9
 800298c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d110      	bne.n	80029b6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	2018      	movs	r0, #24
 8002998:	f7ff fe03 	bl	80025a2 <send_cmd>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d136      	bne.n	8002a10 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80029a2:	21fe      	movs	r1, #254	; 0xfe
 80029a4:	68b8      	ldr	r0, [r7, #8]
 80029a6:	f7ff fdca 	bl	800253e <xmit_datablock>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02f      	beq.n	8002a10 <USER_SPI_write+0xd8>
			count = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	e02c      	b.n	8002a10 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <USER_SPI_write+0xf4>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	f003 0306 	and.w	r3, r3, #6
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <USER_SPI_write+0x92>
 80029c2:	6839      	ldr	r1, [r7, #0]
 80029c4:	2097      	movs	r0, #151	; 0x97
 80029c6:	f7ff fdec 	bl	80025a2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	2019      	movs	r0, #25
 80029ce:	f7ff fde8 	bl	80025a2 <send_cmd>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d11b      	bne.n	8002a10 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80029d8:	21fc      	movs	r1, #252	; 0xfc
 80029da:	68b8      	ldr	r0, [r7, #8]
 80029dc:	f7ff fdaf 	bl	800253e <xmit_datablock>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <USER_SPI_write+0xc4>
				buff += 512;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80029ec:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1ee      	bne.n	80029d8 <USER_SPI_write+0xa0>
 80029fa:	e000      	b.n	80029fe <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80029fc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80029fe:	21fd      	movs	r1, #253	; 0xfd
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7ff fd9c 	bl	800253e <xmit_datablock>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <USER_SPI_write+0xd8>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002a10:	f7ff fd40 	bl	8002494 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	2000004b 	.word	0x2000004b

08002a30 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08c      	sub	sp, #48	; 0x30
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	603a      	str	r2, [r7, #0]
 8002a3a:	71fb      	strb	r3, [r7, #7]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <USER_SPI_ioctl+0x1a>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e15a      	b.n	8002d00 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002a4a:	4baf      	ldr	r3, [pc, #700]	; (8002d08 <USER_SPI_ioctl+0x2d8>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <USER_SPI_ioctl+0x2c>
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e151      	b.n	8002d00 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002a62:	79bb      	ldrb	r3, [r7, #6]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	f200 8136 	bhi.w	8002cd6 <USER_SPI_ioctl+0x2a6>
 8002a6a:	a201      	add	r2, pc, #4	; (adr r2, 8002a70 <USER_SPI_ioctl+0x40>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a85 	.word	0x08002a85
 8002a74:	08002a99 	.word	0x08002a99
 8002a78:	08002cd7 	.word	0x08002cd7
 8002a7c:	08002b45 	.word	0x08002b45
 8002a80:	08002c3b 	.word	0x08002c3b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002a84:	f7ff fd16 	bl	80024b4 <spiselect>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8127 	beq.w	8002cde <USER_SPI_ioctl+0x2ae>
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002a96:	e122      	b.n	8002cde <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2009      	movs	r0, #9
 8002a9c:	f7ff fd81 	bl	80025a2 <send_cmd>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 811d 	bne.w	8002ce2 <USER_SPI_ioctl+0x2b2>
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	2110      	movs	r1, #16
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fd1c 	bl	80024ec <rcvr_datablock>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8113 	beq.w	8002ce2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002abc:	7b3b      	ldrb	r3, [r7, #12]
 8002abe:	099b      	lsrs	r3, r3, #6
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d111      	bne.n	8002aea <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002ac6:	7d7b      	ldrb	r3, [r7, #21]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	7d3b      	ldrb	r3, [r7, #20]
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	4413      	add	r3, r2
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002ada:	4413      	add	r3, r2
 8002adc:	3301      	adds	r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	029a      	lsls	r2, r3, #10
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	e028      	b.n	8002b3c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002aea:	7c7b      	ldrb	r3, [r7, #17]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	7dbb      	ldrb	r3, [r7, #22]
 8002af4:	09db      	lsrs	r3, r3, #7
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	7d7b      	ldrb	r3, [r7, #21]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 0306 	and.w	r3, r3, #6
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002b12:	7d3b      	ldrb	r3, [r7, #20]
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	441a      	add	r2, r3
 8002b20:	7cbb      	ldrb	r3, [r7, #18]
 8002b22:	029b      	lsls	r3, r3, #10
 8002b24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b28:	4413      	add	r3, r2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002b2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b32:	3b09      	subs	r3, #9
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	409a      	lsls	r2, r3
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002b42:	e0ce      	b.n	8002ce2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002b44:	4b71      	ldr	r3, [pc, #452]	; (8002d0c <USER_SPI_ioctl+0x2dc>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d031      	beq.n	8002bb4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002b50:	2100      	movs	r1, #0
 8002b52:	208d      	movs	r0, #141	; 0x8d
 8002b54:	f7ff fd25 	bl	80025a2 <send_cmd>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 80c3 	bne.w	8002ce6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002b60:	20ff      	movs	r0, #255	; 0xff
 8002b62:	f7ff fc29 	bl	80023b8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	2110      	movs	r1, #16
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fcbd 	bl	80024ec <rcvr_datablock>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80b6 	beq.w	8002ce6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002b7a:	2330      	movs	r3, #48	; 0x30
 8002b7c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002b80:	e007      	b.n	8002b92 <USER_SPI_ioctl+0x162>
 8002b82:	20ff      	movs	r0, #255	; 0xff
 8002b84:	f7ff fc18 	bl	80023b8 <xchg_spi>
 8002b88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002b92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f3      	bne.n	8002b82 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002b9a:	7dbb      	ldrb	r3, [r7, #22]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2310      	movs	r3, #16
 8002ba4:	fa03 f202 	lsl.w	r2, r3, r2
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002bb2:	e098      	b.n	8002ce6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	2009      	movs	r0, #9
 8002bb8:	f7ff fcf3 	bl	80025a2 <send_cmd>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 8091 	bne.w	8002ce6 <USER_SPI_ioctl+0x2b6>
 8002bc4:	f107 030c 	add.w	r3, r7, #12
 8002bc8:	2110      	movs	r1, #16
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fc8e 	bl	80024ec <rcvr_datablock>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8087 	beq.w	8002ce6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002bd8:	4b4c      	ldr	r3, [pc, #304]	; (8002d0c <USER_SPI_ioctl+0x2dc>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d012      	beq.n	8002c0a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002be4:	7dbb      	ldrb	r3, [r7, #22]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002bec:	7dfa      	ldrb	r2, [r7, #23]
 8002bee:	09d2      	lsrs	r2, r2, #7
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	7e7b      	ldrb	r3, [r7, #25]
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e013      	b.n	8002c32 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002c0a:	7dbb      	ldrb	r3, [r7, #22]
 8002c0c:	109b      	asrs	r3, r3, #2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	3301      	adds	r3, #1
 8002c16:	7dfa      	ldrb	r2, [r7, #23]
 8002c18:	00d2      	lsls	r2, r2, #3
 8002c1a:	f002 0218 	and.w	r2, r2, #24
 8002c1e:	7df9      	ldrb	r1, [r7, #23]
 8002c20:	0949      	lsrs	r1, r1, #5
 8002c22:	b2c9      	uxtb	r1, r1
 8002c24:	440a      	add	r2, r1
 8002c26:	3201      	adds	r2, #1
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002c38:	e055      	b.n	8002ce6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002c3a:	4b34      	ldr	r3, [pc, #208]	; (8002d0c <USER_SPI_ioctl+0x2dc>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	f003 0306 	and.w	r3, r3, #6
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d051      	beq.n	8002cea <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002c46:	f107 020c 	add.w	r2, r7, #12
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	210b      	movs	r1, #11
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff feee 	bl	8002a30 <USER_SPI_ioctl>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d149      	bne.n	8002cee <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002c5a:	7b3b      	ldrb	r3, [r7, #12]
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <USER_SPI_ioctl+0x23e>
 8002c64:	7dbb      	ldrb	r3, [r7, #22]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d041      	beq.n	8002cf2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	623b      	str	r3, [r7, #32]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002c7e:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <USER_SPI_ioctl+0x2dc>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	025b      	lsls	r3, r3, #9
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	025b      	lsls	r3, r3, #9
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002c96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c98:	2020      	movs	r0, #32
 8002c9a:	f7ff fc82 	bl	80025a2 <send_cmd>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d128      	bne.n	8002cf6 <USER_SPI_ioctl+0x2c6>
 8002ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca6:	2021      	movs	r0, #33	; 0x21
 8002ca8:	f7ff fc7b 	bl	80025a2 <send_cmd>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d121      	bne.n	8002cf6 <USER_SPI_ioctl+0x2c6>
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2026      	movs	r0, #38	; 0x26
 8002cb6:	f7ff fc74 	bl	80025a2 <send_cmd>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d11a      	bne.n	8002cf6 <USER_SPI_ioctl+0x2c6>
 8002cc0:	f247 5030 	movw	r0, #30000	; 0x7530
 8002cc4:	f7ff fbc3 	bl	800244e <wait_ready>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d013      	beq.n	8002cf6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002cd4:	e00f      	b.n	8002cf6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002cdc:	e00c      	b.n	8002cf8 <USER_SPI_ioctl+0x2c8>
		break;
 8002cde:	bf00      	nop
 8002ce0:	e00a      	b.n	8002cf8 <USER_SPI_ioctl+0x2c8>
		break;
 8002ce2:	bf00      	nop
 8002ce4:	e008      	b.n	8002cf8 <USER_SPI_ioctl+0x2c8>
		break;
 8002ce6:	bf00      	nop
 8002ce8:	e006      	b.n	8002cf8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002cea:	bf00      	nop
 8002cec:	e004      	b.n	8002cf8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002cee:	bf00      	nop
 8002cf0:	e002      	b.n	8002cf8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <USER_SPI_ioctl+0x2c8>
		break;
 8002cf6:	bf00      	nop
	}

	despiselect();
 8002cf8:	f7ff fbcc 	bl	8002494 <despiselect>

	return res;
 8002cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3730      	adds	r7, #48	; 0x30
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	2000004b 	.word	0x2000004b

08002d10 <Reset_Handler>:
 8002d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d48 <LoopFillZerobss+0x14>
 8002d14:	2100      	movs	r1, #0
 8002d16:	e003      	b.n	8002d20 <LoopCopyDataInit>

08002d18 <CopyDataInit>:
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <LoopFillZerobss+0x18>)
 8002d1a:	585b      	ldr	r3, [r3, r1]
 8002d1c:	5043      	str	r3, [r0, r1]
 8002d1e:	3104      	adds	r1, #4

08002d20 <LoopCopyDataInit>:
 8002d20:	480b      	ldr	r0, [pc, #44]	; (8002d50 <LoopFillZerobss+0x1c>)
 8002d22:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <LoopFillZerobss+0x20>)
 8002d24:	1842      	adds	r2, r0, r1
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3f6      	bcc.n	8002d18 <CopyDataInit>
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <LoopFillZerobss+0x24>)
 8002d2c:	e002      	b.n	8002d34 <LoopFillZerobss>

08002d2e <FillZerobss>:
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f842 3b04 	str.w	r3, [r2], #4

08002d34 <LoopFillZerobss>:
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <LoopFillZerobss+0x28>)
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d3f9      	bcc.n	8002d2e <FillZerobss>
 8002d3a:	f7ff fafd 	bl	8002338 <SystemInit>
 8002d3e:	f006 f93f 	bl	8008fc0 <__libc_init_array>
 8002d42:	f7fe f8f1 	bl	8000f28 <main>
 8002d46:	4770      	bx	lr
 8002d48:	20020000 	.word	0x20020000
 8002d4c:	080093c4 	.word	0x080093c4
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20000024 	.word	0x20000024
 8002d58:	20000024 	.word	0x20000024
 8002d5c:	20000eac 	.word	0x20000eac

08002d60 <ADC_IRQHandler>:
 8002d60:	e7fe      	b.n	8002d60 <ADC_IRQHandler>
	...

08002d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_Init+0x40>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	; (8002da4 <HAL_Init+0x40>)
 8002d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_Init+0x40>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <HAL_Init+0x40>)
 8002d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_Init+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <HAL_Init+0x40>)
 8002d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	f000 f94d 	bl	800302c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d92:	2000      	movs	r0, #0
 8002d94:	f000 f808 	bl	8002da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d98:	f7fe fea8 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023c00 	.word	0x40023c00

08002da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_InitTick+0x54>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_InitTick+0x58>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f965 	bl	8003096 <HAL_SYSTICK_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00e      	b.n	8002df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b0f      	cmp	r3, #15
 8002dda:	d80a      	bhi.n	8002df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002de4:	f000 f92d 	bl	8003042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de8:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <HAL_InitTick+0x5c>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	2000000c 	.word	0x2000000c
 8002e04:	20000008 	.word	0x20000008

08002e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_IncTick+0x20>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_IncTick+0x24>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <HAL_IncTick+0x24>)
 8002e1a:	6013      	str	r3, [r2, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	2000000c 	.word	0x2000000c
 8002e2c:	20000a40 	.word	0x20000a40

08002e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return uwTick;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_GetTick+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000a40 	.word	0x20000a40

08002e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff ffee 	bl	8002e30 <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e60:	d005      	beq.n	8002e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_Delay+0x40>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e6e:	bf00      	nop
 8002e70:	f7ff ffde 	bl	8002e30 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d8f7      	bhi.n	8002e70 <HAL_Delay+0x28>
  {
  }
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	2000000c 	.word	0x2000000c

08002e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ebe:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	60d3      	str	r3, [r2, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <__NVIC_GetPriorityGrouping+0x18>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 0307 	and.w	r3, r3, #7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db0b      	blt.n	8002f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	4907      	ldr	r1, [pc, #28]	; (8002f28 <__NVIC_EnableIRQ+0x38>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2001      	movs	r0, #1
 8002f12:	fa00 f202 	lsl.w	r2, r0, r2
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000e100 	.word	0xe000e100

08002f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db0a      	blt.n	8002f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	490c      	ldr	r1, [pc, #48]	; (8002f78 <__NVIC_SetPriority+0x4c>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f54:	e00a      	b.n	8002f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4908      	ldr	r1, [pc, #32]	; (8002f7c <__NVIC_SetPriority+0x50>)
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3b04      	subs	r3, #4
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	440b      	add	r3, r1
 8002f6a:	761a      	strb	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f1c3 0307 	rsb	r3, r3, #7
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	bf28      	it	cs
 8002f9e:	2304      	movcs	r3, #4
 8002fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d902      	bls.n	8002fb0 <NVIC_EncodePriority+0x30>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3b03      	subs	r3, #3
 8002fae:	e000      	b.n	8002fb2 <NVIC_EncodePriority+0x32>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43d9      	mvns	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	4313      	orrs	r3, r2
         );
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff8:	d301      	bcc.n	8002ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00f      	b.n	800301e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <SysTick_Config+0x40>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003006:	210f      	movs	r1, #15
 8003008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800300c:	f7ff ff8e 	bl	8002f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SysTick_Config+0x40>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <SysTick_Config+0x40>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff29 	bl	8002e8c <__NVIC_SetPriorityGrouping>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003054:	f7ff ff3e 	bl	8002ed4 <__NVIC_GetPriorityGrouping>
 8003058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f7ff ff8e 	bl	8002f80 <NVIC_EncodePriority>
 8003064:	4602      	mov	r2, r0
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff5d 	bl	8002f2c <__NVIC_SetPriority>
}
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff31 	bl	8002ef0 <__NVIC_EnableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ffa2 	bl	8002fe8 <SysTick_Config>
 80030a4:	4603      	mov	r3, r0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030bc:	f7ff feb8 	bl	8002e30 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e099      	b.n	8003200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ec:	e00f      	b.n	800310e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ee:	f7ff fe9f 	bl	8002e30 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d908      	bls.n	800310e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2203      	movs	r2, #3
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e078      	b.n	8003200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e8      	bne.n	80030ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4b38      	ldr	r3, [pc, #224]	; (8003208 <HAL_DMA_Init+0x158>)
 8003128:	4013      	ands	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800313a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2b04      	cmp	r3, #4
 8003166:	d107      	bne.n	8003178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	4313      	orrs	r3, r2
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f023 0307 	bic.w	r3, r3, #7
 800318e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d117      	bne.n	80031d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00e      	beq.n	80031d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fb0d 	bl	80037d4 <DMA_CheckFifoParam>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031ce:	2301      	movs	r3, #1
 80031d0:	e016      	b.n	8003200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fac4 	bl	8003768 <DMA_CalcBaseAndBitshift>
 80031e0:	4603      	mov	r3, r0
 80031e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	223f      	movs	r2, #63	; 0x3f
 80031ea:	409a      	lsls	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	f010803f 	.word	0xf010803f

0800320c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_DMA_Start_IT+0x26>
 800322e:	2302      	movs	r3, #2
 8003230:	e040      	b.n	80032b4 <HAL_DMA_Start_IT+0xa8>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d12f      	bne.n	80032a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fa56 	bl	800370c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	223f      	movs	r2, #63	; 0x3f
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0216 	orr.w	r2, r2, #22
 800327a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0208 	orr.w	r2, r2, #8
 8003292:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e005      	b.n	80032b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032ca:	f7ff fdb1 	bl	8002e30 <HAL_GetTick>
 80032ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d008      	beq.n	80032ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e052      	b.n	8003394 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0216 	bic.w	r2, r2, #22
 80032fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800330c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <HAL_DMA_Abort+0x62>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0208 	bic.w	r2, r2, #8
 800332c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800333e:	e013      	b.n	8003368 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003340:	f7ff fd76 	bl	8002e30 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b05      	cmp	r3, #5
 800334c:	d90c      	bls.n	8003368 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2203      	movs	r2, #3
 8003360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e015      	b.n	8003394 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e4      	bne.n	8003340 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	223f      	movs	r2, #63	; 0x3f
 800337c:	409a      	lsls	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d004      	beq.n	80033ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00c      	b.n	80033d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2205      	movs	r2, #5
 80033be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033ec:	4b92      	ldr	r3, [pc, #584]	; (8003638 <HAL_DMA_IRQHandler+0x258>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a92      	ldr	r2, [pc, #584]	; (800363c <HAL_DMA_IRQHandler+0x25c>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0a9b      	lsrs	r3, r3, #10
 80033f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340a:	2208      	movs	r2, #8
 800340c:	409a      	lsls	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01a      	beq.n	800344c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0204 	bic.w	r2, r2, #4
 8003432:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	2208      	movs	r2, #8
 800343a:	409a      	lsls	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	2201      	movs	r2, #1
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d012      	beq.n	8003482 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	2201      	movs	r2, #1
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	f043 0202 	orr.w	r2, r3, #2
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2204      	movs	r2, #4
 8003488:	409a      	lsls	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4013      	ands	r3, r2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d012      	beq.n	80034b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00b      	beq.n	80034b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	2204      	movs	r2, #4
 80034a6:	409a      	lsls	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f043 0204 	orr.w	r2, r3, #4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	2210      	movs	r2, #16
 80034be:	409a      	lsls	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d043      	beq.n	8003550 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d03c      	beq.n	8003550 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	2210      	movs	r2, #16
 80034dc:	409a      	lsls	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d018      	beq.n	8003522 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d108      	bne.n	8003510 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d024      	beq.n	8003550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
 800350e:	e01f      	b.n	8003550 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01b      	beq.n	8003550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
 8003520:	e016      	b.n	8003550 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d107      	bne.n	8003540 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0208 	bic.w	r2, r2, #8
 800353e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003554:	2220      	movs	r2, #32
 8003556:	409a      	lsls	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 808e 	beq.w	800367e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8086 	beq.w	800367e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	2220      	movs	r2, #32
 8003578:	409a      	lsls	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b05      	cmp	r3, #5
 8003588:	d136      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0216 	bic.w	r2, r2, #22
 8003598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <HAL_DMA_IRQHandler+0x1da>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0208 	bic.w	r2, r2, #8
 80035c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	223f      	movs	r2, #63	; 0x3f
 80035d0:	409a      	lsls	r2, r3
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d07d      	beq.n	80036ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
        }
        return;
 80035f6:	e078      	b.n	80036ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01c      	beq.n	8003640 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d108      	bne.n	8003626 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	2b00      	cmp	r3, #0
 800361a:	d030      	beq.n	800367e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
 8003624:	e02b      	b.n	800367e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d027      	beq.n	800367e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	4798      	blx	r3
 8003636:	e022      	b.n	800367e <HAL_DMA_IRQHandler+0x29e>
 8003638:	20000000 	.word	0x20000000
 800363c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10f      	bne.n	800366e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0210 	bic.w	r2, r2, #16
 800365c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	2b00      	cmp	r3, #0
 8003684:	d032      	beq.n	80036ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d022      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2205      	movs	r2, #5
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	3301      	adds	r3, #1
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d307      	bcc.n	80036c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f2      	bne.n	80036aa <HAL_DMA_IRQHandler+0x2ca>
 80036c4:	e000      	b.n	80036c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
 80036e8:	e000      	b.n	80036ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80036ea:	bf00      	nop
    }
  }
}
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop

080036f4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003728:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d108      	bne.n	800374c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800374a:	e007      	b.n	800375c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	3b10      	subs	r3, #16
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <DMA_CalcBaseAndBitshift+0x64>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003782:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d909      	bls.n	80037aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	1d1a      	adds	r2, r3, #4
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	659a      	str	r2, [r3, #88]	; 0x58
 80037a8:	e007      	b.n	80037ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037b2:	f023 0303 	bic.w	r3, r3, #3
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	aaaaaaab 	.word	0xaaaaaaab
 80037d0:	0800932c 	.word	0x0800932c

080037d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d11f      	bne.n	800382e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d855      	bhi.n	80038a0 <DMA_CheckFifoParam+0xcc>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <DMA_CheckFifoParam+0x28>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	0800381f 	.word	0x0800381f
 8003804:	0800380d 	.word	0x0800380d
 8003808:	080038a1 	.word	0x080038a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d045      	beq.n	80038a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381c:	e042      	b.n	80038a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003826:	d13f      	bne.n	80038a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382c:	e03c      	b.n	80038a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003836:	d121      	bne.n	800387c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d836      	bhi.n	80038ac <DMA_CheckFifoParam+0xd8>
 800383e:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <DMA_CheckFifoParam+0x70>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003855 	.word	0x08003855
 8003848:	0800385b 	.word	0x0800385b
 800384c:	08003855 	.word	0x08003855
 8003850:	0800386d 	.word	0x0800386d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e02f      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d024      	beq.n	80038b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386a:	e021      	b.n	80038b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003874:	d11e      	bne.n	80038b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800387a:	e01b      	b.n	80038b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d902      	bls.n	8003888 <DMA_CheckFifoParam+0xb4>
 8003882:	2b03      	cmp	r3, #3
 8003884:	d003      	beq.n	800388e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003886:	e018      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e015      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00e      	beq.n	80038b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
      break;
 800389e:	e00b      	b.n	80038b8 <DMA_CheckFifoParam+0xe4>
      break;
 80038a0:	bf00      	nop
 80038a2:	e00a      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038a4:	bf00      	nop
 80038a6:	e008      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038a8:	bf00      	nop
 80038aa:	e006      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038ac:	bf00      	nop
 80038ae:	e004      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038b0:	bf00      	nop
 80038b2:	e002      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;   
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038b8:	bf00      	nop
    }
  } 
  
  return status; 
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	e165      	b.n	8003bb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038e4:	2201      	movs	r2, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	f040 8154 	bne.w	8003baa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d00b      	beq.n	8003922 <HAL_GPIO_Init+0x5a>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d007      	beq.n	8003922 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003916:	2b11      	cmp	r3, #17
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b12      	cmp	r3, #18
 8003920:	d130      	bne.n	8003984 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	2203      	movs	r2, #3
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003958:	2201      	movs	r2, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 0201 	and.w	r2, r3, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0xfc>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b12      	cmp	r3, #18
 80039c2:	d123      	bne.n	8003a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	08da      	lsrs	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3208      	adds	r2, #8
 80039cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	220f      	movs	r2, #15
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	08da      	lsrs	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3208      	adds	r2, #8
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0203 	and.w	r2, r3, #3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80ae 	beq.w	8003baa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	4b5c      	ldr	r3, [pc, #368]	; (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	4a5b      	ldr	r2, [pc, #364]	; (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5e:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a6a:	4a57      	ldr	r2, [pc, #348]	; (8003bc8 <HAL_GPIO_Init+0x300>)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	3302      	adds	r3, #2
 8003a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	220f      	movs	r2, #15
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4e      	ldr	r2, [pc, #312]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d025      	beq.n	8003ae2 <HAL_GPIO_Init+0x21a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4d      	ldr	r2, [pc, #308]	; (8003bd0 <HAL_GPIO_Init+0x308>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01f      	beq.n	8003ade <HAL_GPIO_Init+0x216>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4c      	ldr	r2, [pc, #304]	; (8003bd4 <HAL_GPIO_Init+0x30c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d019      	beq.n	8003ada <HAL_GPIO_Init+0x212>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a4b      	ldr	r2, [pc, #300]	; (8003bd8 <HAL_GPIO_Init+0x310>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_GPIO_Init+0x20e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a4a      	ldr	r2, [pc, #296]	; (8003bdc <HAL_GPIO_Init+0x314>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00d      	beq.n	8003ad2 <HAL_GPIO_Init+0x20a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a49      	ldr	r2, [pc, #292]	; (8003be0 <HAL_GPIO_Init+0x318>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <HAL_GPIO_Init+0x206>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a48      	ldr	r2, [pc, #288]	; (8003be4 <HAL_GPIO_Init+0x31c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_GPIO_Init+0x202>
 8003ac6:	2306      	movs	r3, #6
 8003ac8:	e00c      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003aca:	2307      	movs	r3, #7
 8003acc:	e00a      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ace:	2305      	movs	r3, #5
 8003ad0:	e008      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	e006      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e004      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e002      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	f002 0203 	and.w	r2, r2, #3
 8003aea:	0092      	lsls	r2, r2, #2
 8003aec:	4093      	lsls	r3, r2
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af4:	4934      	ldr	r1, [pc, #208]	; (8003bc8 <HAL_GPIO_Init+0x300>)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	3302      	adds	r3, #2
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b02:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b26:	4a30      	ldr	r2, [pc, #192]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b2c:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b50:	4a25      	ldr	r2, [pc, #148]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b7a:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b80:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ba4:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3301      	adds	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	f67f ae96 	bls.w	80038e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bb8:	bf00      	nop
 8003bba:	3724      	adds	r7, #36	; 0x24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40021400 	.word	0x40021400
 8003be4:	40021800 	.word	0x40021800
 8003be8:	40013c00 	.word	0x40013c00

08003bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e001      	b.n	8003c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c2c:	787b      	ldrb	r3, [r7, #1]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c38:	e003      	b.n	8003c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	041a      	lsls	r2, r3, #16
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	619a      	str	r2, [r3, #24]
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c76:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c7c:	f7ff f8d8 	bl	8002e30 <HAL_GetTick>
 8003c80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c82:	e009      	b.n	8003c98 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c84:	f7ff f8d4 	bl	8002e30 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c92:	d901      	bls.n	8003c98 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e01f      	b.n	8003cd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca4:	d1ee      	bne.n	8003c84 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cac:	f7ff f8c0 	bl	8002e30 <HAL_GetTick>
 8003cb0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cb2:	e009      	b.n	8003cc8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cb4:	f7ff f8bc 	bl	8002e30 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc2:	d901      	bls.n	8003cc8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e007      	b.n	8003cd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd4:	d1ee      	bne.n	8003cb4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	420e0040 	.word	0x420e0040
 8003ce8:	40007000 	.word	0x40007000
 8003cec:	420e0044 	.word	0x420e0044

08003cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0cc      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d04:	4b68      	ldr	r3, [pc, #416]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d90c      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b8      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d44:	4b59      	ldr	r3, [pc, #356]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a58      	ldr	r2, [pc, #352]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4a52      	ldr	r2, [pc, #328]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b50      	ldr	r3, [pc, #320]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	494d      	ldr	r1, [pc, #308]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d044      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d119      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dae:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e067      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dce:	4b37      	ldr	r3, [pc, #220]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 0203 	bic.w	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4934      	ldr	r1, [pc, #208]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de0:	f7ff f826 	bl	8002e30 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de8:	f7ff f822 	bl	8002e30 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e04f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 020c 	and.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d1eb      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d20c      	bcs.n	8003e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e032      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4916      	ldr	r1, [pc, #88]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	490e      	ldr	r1, [pc, #56]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e76:	f000 f855 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003e7a:	4601      	mov	r1, r0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe ff86 	bl	8002da8 <HAL_InitTick>

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023c00 	.word	0x40023c00
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	08009314 	.word	0x08009314
 8003eb4:	20000000 	.word	0x20000000
 8003eb8:	20000008 	.word	0x20000008

08003ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000000 	.word	0x20000000

08003ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ed8:	f7ff fff0 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003edc:	4601      	mov	r1, r0
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	0a9b      	lsrs	r3, r3, #10
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	4a03      	ldr	r2, [pc, #12]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eea:	5cd3      	ldrb	r3, [r2, r3]
 8003eec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	08009324 	.word	0x08009324

08003efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f00:	f7ff ffdc 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003f04:	4601      	mov	r1, r0
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	0b5b      	lsrs	r3, r3, #13
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4a03      	ldr	r2, [pc, #12]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f12:	5cd3      	ldrb	r3, [r2, r3]
 8003f14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	08009324 	.word	0x08009324

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f3e:	4bc6      	ldr	r3, [pc, #792]	; (8004258 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b0c      	cmp	r3, #12
 8003f48:	f200 817e 	bhi.w	8004248 <HAL_RCC_GetSysClockFreq+0x324>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <HAL_RCC_GetSysClockFreq+0x30>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f89 	.word	0x08003f89
 8003f58:	08004249 	.word	0x08004249
 8003f5c:	08004249 	.word	0x08004249
 8003f60:	08004249 	.word	0x08004249
 8003f64:	08003f8f 	.word	0x08003f8f
 8003f68:	08004249 	.word	0x08004249
 8003f6c:	08004249 	.word	0x08004249
 8003f70:	08004249 	.word	0x08004249
 8003f74:	08003f95 	.word	0x08003f95
 8003f78:	08004249 	.word	0x08004249
 8003f7c:	08004249 	.word	0x08004249
 8003f80:	08004249 	.word	0x08004249
 8003f84:	080040f1 	.word	0x080040f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f88:	4bb4      	ldr	r3, [pc, #720]	; (800425c <HAL_RCC_GetSysClockFreq+0x338>)
 8003f8a:	613b      	str	r3, [r7, #16]
       break;
 8003f8c:	e15f      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f8e:	4bb4      	ldr	r3, [pc, #720]	; (8004260 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003f90:	613b      	str	r3, [r7, #16]
      break;
 8003f92:	e15c      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f94:	4bb0      	ldr	r3, [pc, #704]	; (8004258 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f9c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f9e:	4bae      	ldr	r3, [pc, #696]	; (8004258 <HAL_RCC_GetSysClockFreq+0x334>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d04a      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003faa:	4bab      	ldr	r3, [pc, #684]	; (8004258 <HAL_RCC_GetSysClockFreq+0x334>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	099b      	lsrs	r3, r3, #6
 8003fb0:	f04f 0400 	mov.w	r4, #0
 8003fb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	ea03 0501 	and.w	r5, r3, r1
 8003fc0:	ea04 0602 	and.w	r6, r4, r2
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	4632      	mov	r2, r6
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	f04f 0400 	mov.w	r4, #0
 8003fd0:	0154      	lsls	r4, r2, #5
 8003fd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fd6:	014b      	lsls	r3, r1, #5
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4622      	mov	r2, r4
 8003fdc:	1b49      	subs	r1, r1, r5
 8003fde:	eb62 0206 	sbc.w	r2, r2, r6
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	f04f 0400 	mov.w	r4, #0
 8003fea:	0194      	lsls	r4, r2, #6
 8003fec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ff0:	018b      	lsls	r3, r1, #6
 8003ff2:	1a5b      	subs	r3, r3, r1
 8003ff4:	eb64 0402 	sbc.w	r4, r4, r2
 8003ff8:	f04f 0100 	mov.w	r1, #0
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	00e2      	lsls	r2, r4, #3
 8004002:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004006:	00d9      	lsls	r1, r3, #3
 8004008:	460b      	mov	r3, r1
 800400a:	4614      	mov	r4, r2
 800400c:	195b      	adds	r3, r3, r5
 800400e:	eb44 0406 	adc.w	r4, r4, r6
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	0262      	lsls	r2, r4, #9
 800401c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004020:	0259      	lsls	r1, r3, #9
 8004022:	460b      	mov	r3, r1
 8004024:	4614      	mov	r4, r2
 8004026:	4618      	mov	r0, r3
 8004028:	4621      	mov	r1, r4
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f04f 0400 	mov.w	r4, #0
 8004030:	461a      	mov	r2, r3
 8004032:	4623      	mov	r3, r4
 8004034:	f7fc f8e6 	bl	8000204 <__aeabi_uldivmod>
 8004038:	4603      	mov	r3, r0
 800403a:	460c      	mov	r4, r1
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e049      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004040:	4b85      	ldr	r3, [pc, #532]	; (8004258 <HAL_RCC_GetSysClockFreq+0x334>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	f04f 0400 	mov.w	r4, #0
 800404a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	ea03 0501 	and.w	r5, r3, r1
 8004056:	ea04 0602 	and.w	r6, r4, r2
 800405a:	4629      	mov	r1, r5
 800405c:	4632      	mov	r2, r6
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	f04f 0400 	mov.w	r4, #0
 8004066:	0154      	lsls	r4, r2, #5
 8004068:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800406c:	014b      	lsls	r3, r1, #5
 800406e:	4619      	mov	r1, r3
 8004070:	4622      	mov	r2, r4
 8004072:	1b49      	subs	r1, r1, r5
 8004074:	eb62 0206 	sbc.w	r2, r2, r6
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	f04f 0400 	mov.w	r4, #0
 8004080:	0194      	lsls	r4, r2, #6
 8004082:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004086:	018b      	lsls	r3, r1, #6
 8004088:	1a5b      	subs	r3, r3, r1
 800408a:	eb64 0402 	sbc.w	r4, r4, r2
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	00e2      	lsls	r2, r4, #3
 8004098:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800409c:	00d9      	lsls	r1, r3, #3
 800409e:	460b      	mov	r3, r1
 80040a0:	4614      	mov	r4, r2
 80040a2:	195b      	adds	r3, r3, r5
 80040a4:	eb44 0406 	adc.w	r4, r4, r6
 80040a8:	f04f 0100 	mov.w	r1, #0
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	02a2      	lsls	r2, r4, #10
 80040b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040b6:	0299      	lsls	r1, r3, #10
 80040b8:	460b      	mov	r3, r1
 80040ba:	4614      	mov	r4, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	4621      	mov	r1, r4
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f04f 0400 	mov.w	r4, #0
 80040c6:	461a      	mov	r2, r3
 80040c8:	4623      	mov	r3, r4
 80040ca:	f7fc f89b 	bl	8000204 <__aeabi_uldivmod>
 80040ce:	4603      	mov	r3, r0
 80040d0:	460c      	mov	r4, r1
 80040d2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d4:	4b60      	ldr	r3, [pc, #384]	; (8004258 <HAL_RCC_GetSysClockFreq+0x334>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	3301      	adds	r3, #1
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	613b      	str	r3, [r7, #16]
      break;
 80040ee:	e0ae      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f0:	4b59      	ldr	r3, [pc, #356]	; (8004258 <HAL_RCC_GetSysClockFreq+0x334>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040fa:	4b57      	ldr	r3, [pc, #348]	; (8004258 <HAL_RCC_GetSysClockFreq+0x334>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d04a      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004106:	4b54      	ldr	r3, [pc, #336]	; (8004258 <HAL_RCC_GetSysClockFreq+0x334>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	099b      	lsrs	r3, r3, #6
 800410c:	f04f 0400 	mov.w	r4, #0
 8004110:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	ea03 0501 	and.w	r5, r3, r1
 800411c:	ea04 0602 	and.w	r6, r4, r2
 8004120:	4629      	mov	r1, r5
 8004122:	4632      	mov	r2, r6
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	f04f 0400 	mov.w	r4, #0
 800412c:	0154      	lsls	r4, r2, #5
 800412e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004132:	014b      	lsls	r3, r1, #5
 8004134:	4619      	mov	r1, r3
 8004136:	4622      	mov	r2, r4
 8004138:	1b49      	subs	r1, r1, r5
 800413a:	eb62 0206 	sbc.w	r2, r2, r6
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	f04f 0400 	mov.w	r4, #0
 8004146:	0194      	lsls	r4, r2, #6
 8004148:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800414c:	018b      	lsls	r3, r1, #6
 800414e:	1a5b      	subs	r3, r3, r1
 8004150:	eb64 0402 	sbc.w	r4, r4, r2
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	00e2      	lsls	r2, r4, #3
 800415e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004162:	00d9      	lsls	r1, r3, #3
 8004164:	460b      	mov	r3, r1
 8004166:	4614      	mov	r4, r2
 8004168:	195b      	adds	r3, r3, r5
 800416a:	eb44 0406 	adc.w	r4, r4, r6
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	0262      	lsls	r2, r4, #9
 8004178:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800417c:	0259      	lsls	r1, r3, #9
 800417e:	460b      	mov	r3, r1
 8004180:	4614      	mov	r4, r2
 8004182:	4618      	mov	r0, r3
 8004184:	4621      	mov	r1, r4
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f04f 0400 	mov.w	r4, #0
 800418c:	461a      	mov	r2, r3
 800418e:	4623      	mov	r3, r4
 8004190:	f7fc f838 	bl	8000204 <__aeabi_uldivmod>
 8004194:	4603      	mov	r3, r0
 8004196:	460c      	mov	r4, r1
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e049      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419c:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_RCC_GetSysClockFreq+0x334>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	099b      	lsrs	r3, r3, #6
 80041a2:	f04f 0400 	mov.w	r4, #0
 80041a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	ea03 0501 	and.w	r5, r3, r1
 80041b2:	ea04 0602 	and.w	r6, r4, r2
 80041b6:	4629      	mov	r1, r5
 80041b8:	4632      	mov	r2, r6
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	f04f 0400 	mov.w	r4, #0
 80041c2:	0154      	lsls	r4, r2, #5
 80041c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041c8:	014b      	lsls	r3, r1, #5
 80041ca:	4619      	mov	r1, r3
 80041cc:	4622      	mov	r2, r4
 80041ce:	1b49      	subs	r1, r1, r5
 80041d0:	eb62 0206 	sbc.w	r2, r2, r6
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	f04f 0400 	mov.w	r4, #0
 80041dc:	0194      	lsls	r4, r2, #6
 80041de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041e2:	018b      	lsls	r3, r1, #6
 80041e4:	1a5b      	subs	r3, r3, r1
 80041e6:	eb64 0402 	sbc.w	r4, r4, r2
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	00e2      	lsls	r2, r4, #3
 80041f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041f8:	00d9      	lsls	r1, r3, #3
 80041fa:	460b      	mov	r3, r1
 80041fc:	4614      	mov	r4, r2
 80041fe:	195b      	adds	r3, r3, r5
 8004200:	eb44 0406 	adc.w	r4, r4, r6
 8004204:	f04f 0100 	mov.w	r1, #0
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	02a2      	lsls	r2, r4, #10
 800420e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004212:	0299      	lsls	r1, r3, #10
 8004214:	460b      	mov	r3, r1
 8004216:	4614      	mov	r4, r2
 8004218:	4618      	mov	r0, r3
 800421a:	4621      	mov	r1, r4
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f04f 0400 	mov.w	r4, #0
 8004222:	461a      	mov	r2, r3
 8004224:	4623      	mov	r3, r4
 8004226:	f7fb ffed 	bl	8000204 <__aeabi_uldivmod>
 800422a:	4603      	mov	r3, r0
 800422c:	460c      	mov	r4, r1
 800422e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004230:	4b09      	ldr	r3, [pc, #36]	; (8004258 <HAL_RCC_GetSysClockFreq+0x334>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	0f1b      	lsrs	r3, r3, #28
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	613b      	str	r3, [r7, #16]
      break;
 8004246:	e002      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <HAL_RCC_GetSysClockFreq+0x338>)
 800424a:	613b      	str	r3, [r7, #16]
      break;
 800424c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424e:	693b      	ldr	r3, [r7, #16]
}
 8004250:	4618      	mov	r0, r3
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	00f42400 	.word	0x00f42400
 8004260:	007a1200 	.word	0x007a1200

08004264 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8083 	beq.w	8004384 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800427e:	4b95      	ldr	r3, [pc, #596]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b04      	cmp	r3, #4
 8004288:	d019      	beq.n	80042be <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800428a:	4b92      	ldr	r3, [pc, #584]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004292:	2b08      	cmp	r3, #8
 8004294:	d106      	bne.n	80042a4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004296:	4b8f      	ldr	r3, [pc, #572]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a2:	d00c      	beq.n	80042be <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a4:	4b8b      	ldr	r3, [pc, #556]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042ac:	2b0c      	cmp	r3, #12
 80042ae:	d112      	bne.n	80042d6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b0:	4b88      	ldr	r3, [pc, #544]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042bc:	d10b      	bne.n	80042d6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042be:	4b85      	ldr	r3, [pc, #532]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d05b      	beq.n	8004382 <HAL_RCC_OscConfig+0x11e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d157      	bne.n	8004382 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e216      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0x8a>
 80042e0:	4b7c      	ldr	r3, [pc, #496]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7b      	ldr	r2, [pc, #492]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80042e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	e01d      	b.n	800432a <HAL_RCC_OscConfig+0xc6>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f6:	d10c      	bne.n	8004312 <HAL_RCC_OscConfig+0xae>
 80042f8:	4b76      	ldr	r3, [pc, #472]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a75      	ldr	r2, [pc, #468]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80042fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4b73      	ldr	r3, [pc, #460]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a72      	ldr	r2, [pc, #456]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 800430a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e00b      	b.n	800432a <HAL_RCC_OscConfig+0xc6>
 8004312:	4b70      	ldr	r3, [pc, #448]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a6f      	ldr	r2, [pc, #444]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	4b6d      	ldr	r3, [pc, #436]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6c      	ldr	r2, [pc, #432]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004328:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d013      	beq.n	800435a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fe fd7d 	bl	8002e30 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800433a:	f7fe fd79 	bl	8002e30 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b64      	cmp	r3, #100	; 0x64
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e1db      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434c:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0xd6>
 8004358:	e014      	b.n	8004384 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fe fd69 	bl	8002e30 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004362:	f7fe fd65 	bl	8002e30 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b64      	cmp	r3, #100	; 0x64
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e1c7      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004374:	4b57      	ldr	r3, [pc, #348]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f0      	bne.n	8004362 <HAL_RCC_OscConfig+0xfe>
 8004380:	e000      	b.n	8004384 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004382:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d06f      	beq.n	8004470 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004390:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	2b00      	cmp	r3, #0
 800439a:	d017      	beq.n	80043cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800439c:	4b4d      	ldr	r3, [pc, #308]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d105      	bne.n	80043b4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043a8:	4b4a      	ldr	r3, [pc, #296]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b4:	4b47      	ldr	r3, [pc, #284]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	d11c      	bne.n	80043fa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c0:	4b44      	ldr	r3, [pc, #272]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d116      	bne.n	80043fa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043cc:	4b41      	ldr	r3, [pc, #260]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_OscConfig+0x180>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e18f      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e4:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4938      	ldr	r1, [pc, #224]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f8:	e03a      	b.n	8004470 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d020      	beq.n	8004444 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004402:	4b35      	ldr	r3, [pc, #212]	; (80044d8 <HAL_RCC_OscConfig+0x274>)
 8004404:	2201      	movs	r2, #1
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fe fd12 	bl	8002e30 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004410:	f7fe fd0e 	bl	8002e30 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e170      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004422:	4b2c      	ldr	r3, [pc, #176]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442e:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4925      	ldr	r1, [pc, #148]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
 8004442:	e015      	b.n	8004470 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004444:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <HAL_RCC_OscConfig+0x274>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fe fcf1 	bl	8002e30 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004452:	f7fe fced 	bl	8002e30 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e14f      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f0      	bne.n	8004452 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d037      	beq.n	80044ec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d016      	beq.n	80044b2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004484:	4b15      	ldr	r3, [pc, #84]	; (80044dc <HAL_RCC_OscConfig+0x278>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448a:	f7fe fcd1 	bl	8002e30 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004492:	f7fe fccd 	bl	8002e30 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e12f      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_RCC_OscConfig+0x270>)
 80044a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x22e>
 80044b0:	e01c      	b.n	80044ec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <HAL_RCC_OscConfig+0x278>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fe fcba 	bl	8002e30 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044be:	e00f      	b.n	80044e0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c0:	f7fe fcb6 	bl	8002e30 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d908      	bls.n	80044e0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e118      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	42470000 	.word	0x42470000
 80044dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e0:	4b8a      	ldr	r3, [pc, #552]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 80044e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e9      	bne.n	80044c0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8097 	beq.w	8004628 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fe:	4b83      	ldr	r3, [pc, #524]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10f      	bne.n	800452a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	4b7f      	ldr	r3, [pc, #508]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	4a7e      	ldr	r2, [pc, #504]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004518:	6413      	str	r3, [r2, #64]	; 0x40
 800451a:	4b7c      	ldr	r3, [pc, #496]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004526:	2301      	movs	r3, #1
 8004528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452a:	4b79      	ldr	r3, [pc, #484]	; (8004710 <HAL_RCC_OscConfig+0x4ac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d118      	bne.n	8004568 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004536:	4b76      	ldr	r3, [pc, #472]	; (8004710 <HAL_RCC_OscConfig+0x4ac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a75      	ldr	r2, [pc, #468]	; (8004710 <HAL_RCC_OscConfig+0x4ac>)
 800453c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004542:	f7fe fc75 	bl	8002e30 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454a:	f7fe fc71 	bl	8002e30 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e0d3      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	4b6c      	ldr	r3, [pc, #432]	; (8004710 <HAL_RCC_OscConfig+0x4ac>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d106      	bne.n	800457e <HAL_RCC_OscConfig+0x31a>
 8004570:	4b66      	ldr	r3, [pc, #408]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	4a65      	ldr	r2, [pc, #404]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6713      	str	r3, [r2, #112]	; 0x70
 800457c:	e01c      	b.n	80045b8 <HAL_RCC_OscConfig+0x354>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b05      	cmp	r3, #5
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x33c>
 8004586:	4b61      	ldr	r3, [pc, #388]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	4a60      	ldr	r2, [pc, #384]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 800458c:	f043 0304 	orr.w	r3, r3, #4
 8004590:	6713      	str	r3, [r2, #112]	; 0x70
 8004592:	4b5e      	ldr	r3, [pc, #376]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a5d      	ldr	r2, [pc, #372]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
 800459e:	e00b      	b.n	80045b8 <HAL_RCC_OscConfig+0x354>
 80045a0:	4b5a      	ldr	r3, [pc, #360]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	4a59      	ldr	r2, [pc, #356]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 80045a6:	f023 0301 	bic.w	r3, r3, #1
 80045aa:	6713      	str	r3, [r2, #112]	; 0x70
 80045ac:	4b57      	ldr	r3, [pc, #348]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4a56      	ldr	r2, [pc, #344]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 80045b2:	f023 0304 	bic.w	r3, r3, #4
 80045b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d015      	beq.n	80045ec <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c0:	f7fe fc36 	bl	8002e30 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c6:	e00a      	b.n	80045de <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c8:	f7fe fc32 	bl	8002e30 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e092      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045de:	4b4b      	ldr	r3, [pc, #300]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0ee      	beq.n	80045c8 <HAL_RCC_OscConfig+0x364>
 80045ea:	e014      	b.n	8004616 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fe fc20 	bl	8002e30 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f7fe fc1c 	bl	8002e30 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e07c      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460a:	4b40      	ldr	r3, [pc, #256]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1ee      	bne.n	80045f4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004616:	7dfb      	ldrb	r3, [r7, #23]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d105      	bne.n	8004628 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461c:	4b3b      	ldr	r3, [pc, #236]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	4a3a      	ldr	r2, [pc, #232]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 8004622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004626:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d068      	beq.n	8004702 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004630:	4b36      	ldr	r3, [pc, #216]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b08      	cmp	r3, #8
 800463a:	d060      	beq.n	80046fe <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d145      	bne.n	80046d0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004644:	4b33      	ldr	r3, [pc, #204]	; (8004714 <HAL_RCC_OscConfig+0x4b0>)
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fe fbf1 	bl	8002e30 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004652:	f7fe fbed 	bl	8002e30 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e04f      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004664:	4b29      	ldr	r3, [pc, #164]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f0      	bne.n	8004652 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	019b      	lsls	r3, r3, #6
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	3b01      	subs	r3, #1
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	061b      	lsls	r3, r3, #24
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	071b      	lsls	r3, r3, #28
 800469c:	491b      	ldr	r1, [pc, #108]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a2:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <HAL_RCC_OscConfig+0x4b0>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fe fbc2 	bl	8002e30 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b0:	f7fe fbbe 	bl	8002e30 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e020      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	4b12      	ldr	r3, [pc, #72]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x44c>
 80046ce:	e018      	b.n	8004702 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d0:	4b10      	ldr	r3, [pc, #64]	; (8004714 <HAL_RCC_OscConfig+0x4b0>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fe fbab 	bl	8002e30 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046de:	f7fe fba7 	bl	8002e30 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e009      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCC_OscConfig+0x4a8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f0      	bne.n	80046de <HAL_RCC_OscConfig+0x47a>
 80046fc:	e001      	b.n	8004702 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	40007000 	.word	0x40007000
 8004714:	42470060 	.word	0x42470060

08004718 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e056      	b.n	80047d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fd f9f9 	bl	8001b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004760:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	ea42 0103 	orr.w	r1, r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	0c1b      	lsrs	r3, r3, #16
 80047a8:	f003 0104 	and.w	r1, r3, #4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69da      	ldr	r2, [r3, #28]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_SPI_Transmit+0x22>
 80047fe:	2302      	movs	r3, #2
 8004800:	e11e      	b.n	8004a40 <HAL_SPI_Transmit+0x260>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800480a:	f7fe fb11 	bl	8002e30 <HAL_GetTick>
 800480e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004810:	88fb      	ldrh	r3, [r7, #6]
 8004812:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d002      	beq.n	8004826 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004820:	2302      	movs	r3, #2
 8004822:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004824:	e103      	b.n	8004a2e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_SPI_Transmit+0x52>
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004836:	e0fa      	b.n	8004a2e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2203      	movs	r2, #3
 800483c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	88fa      	ldrh	r2, [r7, #6]
 8004856:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487e:	d107      	bne.n	8004890 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800488e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	d007      	beq.n	80048ae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b6:	d14b      	bne.n	8004950 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_SPI_Transmit+0xe6>
 80048c0:	8afb      	ldrh	r3, [r7, #22]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d13e      	bne.n	8004944 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	881a      	ldrh	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	1c9a      	adds	r2, r3, #2
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048ea:	e02b      	b.n	8004944 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d112      	bne.n	8004920 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	881a      	ldrh	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	1c9a      	adds	r2, r3, #2
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	86da      	strh	r2, [r3, #54]	; 0x36
 800491e:	e011      	b.n	8004944 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004920:	f7fe fa86 	bl	8002e30 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d803      	bhi.n	8004938 <HAL_SPI_Transmit+0x158>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004936:	d102      	bne.n	800493e <HAL_SPI_Transmit+0x15e>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d102      	bne.n	8004944 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004942:	e074      	b.n	8004a2e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1ce      	bne.n	80048ec <HAL_SPI_Transmit+0x10c>
 800494e:	e04c      	b.n	80049ea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_SPI_Transmit+0x17e>
 8004958:	8afb      	ldrh	r3, [r7, #22]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d140      	bne.n	80049e0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004984:	e02c      	b.n	80049e0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b02      	cmp	r3, #2
 8004992:	d113      	bne.n	80049bc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80049ba:	e011      	b.n	80049e0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049bc:	f7fe fa38 	bl	8002e30 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d803      	bhi.n	80049d4 <HAL_SPI_Transmit+0x1f4>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049d2:	d102      	bne.n	80049da <HAL_SPI_Transmit+0x1fa>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049de:	e026      	b.n	8004a2e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1cd      	bne.n	8004986 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	6839      	ldr	r1, [r7, #0]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fcc4 	bl	800537c <SPI_EndRxTxTransaction>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e000      	b.n	8004a2e <HAL_SPI_Transmit+0x24e>
  }

error:
 8004a2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a64:	d112      	bne.n	8004a8c <HAL_SPI_Receive+0x44>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10e      	bne.n	8004a8c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2204      	movs	r2, #4
 8004a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f8e9 	bl	8004c5a <HAL_SPI_TransmitReceive>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	e0e2      	b.n	8004c52 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_SPI_Receive+0x52>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e0db      	b.n	8004c52 <HAL_SPI_Receive+0x20a>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aa2:	f7fe f9c5 	bl	8002e30 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d002      	beq.n	8004aba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ab8:	e0c2      	b.n	8004c40 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_SPI_Receive+0x7e>
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004aca:	e0b9      	b.n	8004c40 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b12:	d107      	bne.n	8004b24 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b22:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d007      	beq.n	8004b42 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b40:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d162      	bne.n	8004c10 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b4a:	e02e      	b.n	8004baa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d115      	bne.n	8004b86 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f103 020c 	add.w	r2, r3, #12
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	7812      	ldrb	r2, [r2, #0]
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b84:	e011      	b.n	8004baa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b86:	f7fe f953 	bl	8002e30 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d803      	bhi.n	8004b9e <HAL_SPI_Receive+0x156>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b9c:	d102      	bne.n	8004ba4 <HAL_SPI_Receive+0x15c>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ba8:	e04a      	b.n	8004c40 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1cb      	bne.n	8004b4c <HAL_SPI_Receive+0x104>
 8004bb4:	e031      	b.n	8004c1a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d113      	bne.n	8004bec <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	b292      	uxth	r2, r2
 8004bd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	1c9a      	adds	r2, r3, #2
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bea:	e011      	b.n	8004c10 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bec:	f7fe f920 	bl	8002e30 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d803      	bhi.n	8004c04 <HAL_SPI_Receive+0x1bc>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c02:	d102      	bne.n	8004c0a <HAL_SPI_Receive+0x1c2>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d102      	bne.n	8004c10 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c0e:	e017      	b.n	8004c40 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1cd      	bne.n	8004bb6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fb46 	bl	80052b0 <SPI_EndRxTransaction>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	75fb      	strb	r3, [r7, #23]
 8004c3c:	e000      	b.n	8004c40 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004c3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b08c      	sub	sp, #48	; 0x30
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x26>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e18a      	b.n	8004f96 <HAL_SPI_TransmitReceive+0x33c>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c88:	f7fe f8d2 	bl	8002e30 <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c9e:	887b      	ldrh	r3, [r7, #2]
 8004ca0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d00f      	beq.n	8004cca <HAL_SPI_TransmitReceive+0x70>
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb0:	d107      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x68>
 8004cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d003      	beq.n	8004cca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cc8:	e15b      	b.n	8004f82 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_SPI_TransmitReceive+0x82>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_SPI_TransmitReceive+0x82>
 8004cd6:	887b      	ldrh	r3, [r7, #2]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d103      	bne.n	8004ce4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ce2:	e14e      	b.n	8004f82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d003      	beq.n	8004cf8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2205      	movs	r2, #5
 8004cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	887a      	ldrh	r2, [r7, #2]
 8004d08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	887a      	ldrh	r2, [r7, #2]
 8004d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	887a      	ldrh	r2, [r7, #2]
 8004d1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d007      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d54:	d178      	bne.n	8004e48 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x10a>
 8004d5e:	8b7b      	ldrh	r3, [r7, #26]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d166      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	881a      	ldrh	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	1c9a      	adds	r2, r3, #2
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d88:	e053      	b.n	8004e32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d11b      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x176>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d016      	beq.n	8004dd0 <HAL_SPI_TransmitReceive+0x176>
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d113      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	881a      	ldrh	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	1c9a      	adds	r2, r3, #2
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d119      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x1b8>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d014      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	b292      	uxth	r2, r2
 8004df4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	1c9a      	adds	r2, r3, #2
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e12:	f7fe f80d 	bl	8002e30 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d807      	bhi.n	8004e32 <HAL_SPI_TransmitReceive+0x1d8>
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e28:	d003      	beq.n	8004e32 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e30:	e0a7      	b.n	8004f82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1a6      	bne.n	8004d8a <HAL_SPI_TransmitReceive+0x130>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1a1      	bne.n	8004d8a <HAL_SPI_TransmitReceive+0x130>
 8004e46:	e07c      	b.n	8004f42 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_SPI_TransmitReceive+0x1fc>
 8004e50:	8b7b      	ldrh	r3, [r7, #26]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d16b      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e7c:	e057      	b.n	8004f2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d11c      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x26c>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d017      	beq.n	8004ec6 <HAL_SPI_TransmitReceive+0x26c>
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d114      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	330c      	adds	r3, #12
 8004ea6:	7812      	ldrb	r2, [r2, #0]
 8004ea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d119      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x2ae>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d014      	beq.n	8004f08 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f04:	2301      	movs	r3, #1
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f08:	f7fd ff92 	bl	8002e30 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d803      	bhi.n	8004f20 <HAL_SPI_TransmitReceive+0x2c6>
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f1e:	d102      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x2cc>
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d103      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f2c:	e029      	b.n	8004f82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1a2      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x224>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d19d      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 fa18 	bl	800537c <SPI_EndRxTxTransaction>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d006      	beq.n	8004f60 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f5e:	e010      	b.n	8004f82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	e000      	b.n	8004f82 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3730      	adds	r7, #48	; 0x30
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	099b      	lsrs	r3, r3, #6
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10f      	bne.n	8004fe4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	099b      	lsrs	r3, r3, #6
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
    return;
 8004fe2:	e0d8      	b.n	8005196 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	085b      	lsrs	r3, r3, #1
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_SPI_IRQHandler+0x66>
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	09db      	lsrs	r3, r3, #7
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
    return;
 8005004:	e0c7      	b.n	8005196 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10c      	bne.n	800502c <HAL_SPI_IRQHandler+0x8c>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	099b      	lsrs	r3, r3, #6
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 80b5 	beq.w	8005196 <HAL_SPI_IRQHandler+0x1f6>
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80ae 	beq.w	8005196 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	099b      	lsrs	r3, r3, #6
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d023      	beq.n	800508e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b03      	cmp	r3, #3
 8005050:	d011      	beq.n	8005076 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	f043 0204 	orr.w	r2, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	e00b      	b.n	800508e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	693b      	ldr	r3, [r7, #16]
        return;
 800508c:	e083      	b.n	8005196 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d014      	beq.n	80050c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f043 0201 	orr.w	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00c      	beq.n	80050ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d4:	f043 0208 	orr.w	r2, r3, #8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80050dc:	2300      	movs	r3, #0
 80050de:	60bb      	str	r3, [r7, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d050      	beq.n	8005194 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005100:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <HAL_SPI_IRQHandler+0x17e>
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d034      	beq.n	8005188 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0203 	bic.w	r2, r2, #3
 800512c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d011      	beq.n	800515a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	4a18      	ldr	r2, [pc, #96]	; (800519c <HAL_SPI_IRQHandler+0x1fc>)
 800513c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe f92a 	bl	800339c <HAL_DMA_Abort_IT>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005152:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515e:	2b00      	cmp	r3, #0
 8005160:	d016      	beq.n	8005190 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005166:	4a0d      	ldr	r2, [pc, #52]	; (800519c <HAL_SPI_IRQHandler+0x1fc>)
 8005168:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe f914 	bl	800339c <HAL_DMA_Abort_IT>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005186:	e003      	b.n	8005190 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f809 	bl	80051a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800518e:	e000      	b.n	8005192 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005190:	bf00      	nop
    return;
 8005192:	bf00      	nop
 8005194:	bf00      	nop
  }
}
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	080051b5 	.word	0x080051b5

080051a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff ffe6 	bl	80051a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	4613      	mov	r3, r2
 80051ea:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ec:	e04c      	b.n	8005288 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f4:	d048      	beq.n	8005288 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80051f6:	f7fd fe1b 	bl	8002e30 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d902      	bls.n	800520c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d13d      	bne.n	8005288 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800521a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005224:	d111      	bne.n	800524a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522e:	d004      	beq.n	800523a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005238:	d107      	bne.n	800524a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005248:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005252:	d10f      	bne.n	8005274 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005272:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e00f      	b.n	80052a8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4013      	ands	r3, r2
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d1a3      	bne.n	80051ee <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c4:	d111      	bne.n	80052ea <SPI_EndRxTransaction+0x3a>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ce:	d004      	beq.n	80052da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d8:	d107      	bne.n	80052ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052f2:	d12a      	bne.n	800534a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fc:	d012      	beq.n	8005324 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2200      	movs	r2, #0
 8005306:	2180      	movs	r1, #128	; 0x80
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7ff ff67 	bl	80051dc <SPI_WaitFlagStateUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d02d      	beq.n	8005370 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	f043 0220 	orr.w	r2, r3, #32
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e026      	b.n	8005372 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2200      	movs	r2, #0
 800532c:	2101      	movs	r1, #1
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff ff54 	bl	80051dc <SPI_WaitFlagStateUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01a      	beq.n	8005370 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e013      	b.n	8005372 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2200      	movs	r2, #0
 8005352:	2101      	movs	r1, #1
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff ff41 	bl	80051dc <SPI_WaitFlagStateUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005364:	f043 0220 	orr.w	r2, r3, #32
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e000      	b.n	8005372 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af02      	add	r7, sp, #8
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005388:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <SPI_EndRxTxTransaction+0x7c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <SPI_EndRxTxTransaction+0x80>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	0d5b      	lsrs	r3, r3, #21
 8005394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a6:	d112      	bne.n	80053ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2200      	movs	r2, #0
 80053b0:	2180      	movs	r1, #128	; 0x80
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff ff12 	bl	80051dc <SPI_WaitFlagStateUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d016      	beq.n	80053ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	f043 0220 	orr.w	r2, r3, #32
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e00f      	b.n	80053ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e4:	2b80      	cmp	r3, #128	; 0x80
 80053e6:	d0f2      	beq.n	80053ce <SPI_EndRxTxTransaction+0x52>
 80053e8:	e000      	b.n	80053ec <SPI_EndRxTxTransaction+0x70>
        break;
 80053ea:	bf00      	nop
  }

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000000 	.word	0x20000000
 80053fc:	165e9f81 	.word	0x165e9f81

08005400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e01d      	b.n	800544e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fc fc40 	bl	8001cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3304      	adds	r3, #4
 800543c:	4619      	mov	r1, r3
 800543e:	4610      	mov	r0, r2
 8005440:	f000 f988 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0201 	orr.w	r2, r2, #1
 800546c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b06      	cmp	r3, #6
 800547e:	d007      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a1a      	ldr	r2, [r3, #32]
 80054bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10f      	bne.n	80054e6 <HAL_TIM_Base_Stop_IT+0x48>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	f240 4344 	movw	r3, #1092	; 0x444
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <HAL_TIM_Base_Stop_IT+0x48>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b02      	cmp	r3, #2
 8005508:	d122      	bne.n	8005550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b02      	cmp	r3, #2
 8005516:	d11b      	bne.n	8005550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0202 	mvn.w	r2, #2
 8005520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f8ee 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 800553c:	e005      	b.n	800554a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f8e0 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f8f1 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b04      	cmp	r3, #4
 800555c:	d122      	bne.n	80055a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b04      	cmp	r3, #4
 800556a:	d11b      	bne.n	80055a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0204 	mvn.w	r2, #4
 8005574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2202      	movs	r2, #2
 800557a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f8c4 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8b6 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f8c7 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d122      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d11b      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0208 	mvn.w	r2, #8
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2204      	movs	r2, #4
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f89a 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f88c 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f89d 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b10      	cmp	r3, #16
 8005604:	d122      	bne.n	800564c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b10      	cmp	r3, #16
 8005612:	d11b      	bne.n	800564c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0210 	mvn.w	r2, #16
 800561c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2208      	movs	r2, #8
 8005622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f870 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 8005638:	e005      	b.n	8005646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f862 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f873 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b01      	cmp	r3, #1
 8005658:	d10e      	bne.n	8005678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b01      	cmp	r3, #1
 8005666:	d107      	bne.n	8005678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0201 	mvn.w	r2, #1
 8005670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fc f93c 	bl	80018f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005682:	2b80      	cmp	r3, #128	; 0x80
 8005684:	d10e      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005690:	2b80      	cmp	r3, #128	; 0x80
 8005692:	d107      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800569c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f97e 	bl	80059a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d10e      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	d107      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f838 	bl	8005740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d10e      	bne.n	80056fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d107      	bne.n	80056fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0220 	mvn.w	r2, #32
 80056f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f948 	bl	800598c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a40      	ldr	r2, [pc, #256]	; (8005868 <TIM_Base_SetConfig+0x114>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d013      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005772:	d00f      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a3d      	ldr	r2, [pc, #244]	; (800586c <TIM_Base_SetConfig+0x118>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00b      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a3c      	ldr	r2, [pc, #240]	; (8005870 <TIM_Base_SetConfig+0x11c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d007      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a3b      	ldr	r2, [pc, #236]	; (8005874 <TIM_Base_SetConfig+0x120>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d003      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a3a      	ldr	r2, [pc, #232]	; (8005878 <TIM_Base_SetConfig+0x124>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d108      	bne.n	80057a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2f      	ldr	r2, [pc, #188]	; (8005868 <TIM_Base_SetConfig+0x114>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d02b      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b4:	d027      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a2c      	ldr	r2, [pc, #176]	; (800586c <TIM_Base_SetConfig+0x118>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d023      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2b      	ldr	r2, [pc, #172]	; (8005870 <TIM_Base_SetConfig+0x11c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01f      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a2a      	ldr	r2, [pc, #168]	; (8005874 <TIM_Base_SetConfig+0x120>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01b      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a29      	ldr	r2, [pc, #164]	; (8005878 <TIM_Base_SetConfig+0x124>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d017      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a28      	ldr	r2, [pc, #160]	; (800587c <TIM_Base_SetConfig+0x128>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a27      	ldr	r2, [pc, #156]	; (8005880 <TIM_Base_SetConfig+0x12c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00f      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a26      	ldr	r2, [pc, #152]	; (8005884 <TIM_Base_SetConfig+0x130>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00b      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a25      	ldr	r2, [pc, #148]	; (8005888 <TIM_Base_SetConfig+0x134>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a24      	ldr	r2, [pc, #144]	; (800588c <TIM_Base_SetConfig+0x138>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a23      	ldr	r2, [pc, #140]	; (8005890 <TIM_Base_SetConfig+0x13c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d108      	bne.n	8005818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <TIM_Base_SetConfig+0x114>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_Base_SetConfig+0xf8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <TIM_Base_SetConfig+0x124>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d103      	bne.n	8005854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	615a      	str	r2, [r3, #20]
}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40010000 	.word	0x40010000
 800586c:	40000400 	.word	0x40000400
 8005870:	40000800 	.word	0x40000800
 8005874:	40000c00 	.word	0x40000c00
 8005878:	40010400 	.word	0x40010400
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800
 8005888:	40001800 	.word	0x40001800
 800588c:	40001c00 	.word	0x40001c00
 8005890:	40002000 	.word	0x40002000

08005894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e05a      	b.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a21      	ldr	r2, [pc, #132]	; (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d022      	beq.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f8:	d01d      	beq.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d018      	beq.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1b      	ldr	r2, [pc, #108]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d013      	beq.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1a      	ldr	r2, [pc, #104]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00e      	beq.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a18      	ldr	r2, [pc, #96]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d009      	beq.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a17      	ldr	r2, [pc, #92]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d004      	beq.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a15      	ldr	r2, [pc, #84]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d10c      	bne.n	8005950 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	4313      	orrs	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40010000 	.word	0x40010000
 8005974:	40000400 	.word	0x40000400
 8005978:	40000800 	.word	0x40000800
 800597c:	40000c00 	.word	0x40000c00
 8005980:	40010400 	.word	0x40010400
 8005984:	40014000 	.word	0x40014000
 8005988:	40001800 	.word	0x40001800

0800598c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e03f      	b.n	8005a46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fc f9ca 	bl	8001d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2224      	movs	r2, #36	; 0x24
 80059e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fc03 	bl	8006204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695a      	ldr	r2, [r3, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d166      	bne.n	8005b38 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_UART_Receive_DMA+0x26>
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e05f      	b.n	8005b3a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_UART_Receive_DMA+0x38>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e058      	b.n	8005b3a <HAL_UART_Receive_DMA+0xea>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2222      	movs	r2, #34	; 0x22
 8005aa6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aae:	4a25      	ldr	r2, [pc, #148]	; (8005b44 <HAL_UART_Receive_DMA+0xf4>)
 8005ab0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	4a24      	ldr	r2, [pc, #144]	; (8005b48 <HAL_UART_Receive_DMA+0xf8>)
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	4a23      	ldr	r2, [pc, #140]	; (8005b4c <HAL_UART_Receive_DMA+0xfc>)
 8005ac0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005aca:	f107 0308 	add.w	r3, r7, #8
 8005ace:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	4619      	mov	r1, r3
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	f7fd fb93 	bl	800320c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b12:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b32:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e000      	b.n	8005b3a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	08005e7d 	.word	0x08005e7d
 8005b48:	08005ee5 	.word	0x08005ee5
 8005b4c:	08005f01 	.word	0x08005f01

08005b50 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005b66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	2b80      	cmp	r3, #128	; 0x80
 8005b84:	d124      	bne.n	8005bd0 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b94:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d018      	beq.n	8005bd0 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fd fb86 	bl	80032bc <HAL_DMA_Abort>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00c      	beq.n	8005bd0 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fd fd9a 	bl	80036f4 <HAL_DMA_GetError>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b20      	cmp	r3, #32
 8005bc4:	d104      	bne.n	8005bd0 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2210      	movs	r2, #16
 8005bca:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e03d      	b.n	8005c4c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	d124      	bne.n	8005c28 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bec:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d018      	beq.n	8005c28 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fd fb5a 	bl	80032bc <HAL_DMA_Abort>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00c      	beq.n	8005c28 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fd fd6e 	bl	80036f4 <HAL_DMA_GetError>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d104      	bne.n	8005c28 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2210      	movs	r2, #16
 8005c22:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e011      	b.n	8005c4c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x52>
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa2e 	bl	8006100 <UART_Receive_IT>
      return;
 8005ca4:	e0d1      	b.n	8005e4a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80b0 	beq.w	8005e0e <HAL_UART_IRQHandler+0x1ba>
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <HAL_UART_IRQHandler+0x70>
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 80a5 	beq.w	8005e0e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x90>
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cdc:	f043 0201 	orr.w	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_UART_IRQHandler+0xb0>
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfc:	f043 0202 	orr.w	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_UART_IRQHandler+0xd0>
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1c:	f043 0204 	orr.w	r2, r3, #4
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00f      	beq.n	8005d4e <HAL_UART_IRQHandler+0xfa>
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <HAL_UART_IRQHandler+0xee>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	f043 0208 	orr.w	r2, r3, #8
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d078      	beq.n	8005e48 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <HAL_UART_IRQHandler+0x11c>
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f9c8 	bl	8006100 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7a:	2b40      	cmp	r3, #64	; 0x40
 8005d7c:	bf0c      	ite	eq
 8005d7e:	2301      	moveq	r3, #1
 8005d80:	2300      	movne	r3, #0
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <HAL_UART_IRQHandler+0x144>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d031      	beq.n	8005dfc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f911 	bl	8005fc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d123      	bne.n	8005df4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d013      	beq.n	8005dec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc8:	4a21      	ldr	r2, [pc, #132]	; (8005e50 <HAL_UART_IRQHandler+0x1fc>)
 8005dca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fd fae3 	bl	800339c <HAL_DMA_Abort_IT>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d016      	beq.n	8005e0a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005de6:	4610      	mov	r0, r2
 8005de8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dea:	e00e      	b.n	8005e0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f83b 	bl	8005e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df2:	e00a      	b.n	8005e0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f837 	bl	8005e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfa:	e006      	b.n	8005e0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f833 	bl	8005e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005e08:	e01e      	b.n	8005e48 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0a:	bf00      	nop
    return;
 8005e0c:	e01c      	b.n	8005e48 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_UART_IRQHandler+0x1d6>
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f8fe 	bl	8006024 <UART_Transmit_IT>
    return;
 8005e28:	e00f      	b.n	8005e4a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <HAL_UART_IRQHandler+0x1f6>
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f946 	bl	80060d0 <UART_EndTransmit_IT>
    return;
 8005e44:	bf00      	nop
 8005e46:	e000      	b.n	8005e4a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005e48:	bf00      	nop
  }
}
 8005e4a:	3720      	adds	r7, #32
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	08005ffd 	.word	0x08005ffd

08005e54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11e      	bne.n	8005ed6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eac:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695a      	ldr	r2, [r3, #20]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ecc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7fb fca8 	bl	800182c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f7ff ffae 	bl	8005e54 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ef8:	bf00      	nop
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1c:	2b80      	cmp	r3, #128	; 0x80
 8005f1e:	bf0c      	ite	eq
 8005f20:	2301      	moveq	r3, #1
 8005f22:	2300      	movne	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b21      	cmp	r3, #33	; 0x21
 8005f32:	d108      	bne.n	8005f46 <UART_DMAError+0x46>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f40:	68b8      	ldr	r0, [r7, #8]
 8005f42:	f000 f827 	bl	8005f94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	2b40      	cmp	r3, #64	; 0x40
 8005f52:	bf0c      	ite	eq
 8005f54:	2301      	moveq	r3, #1
 8005f56:	2300      	movne	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b22      	cmp	r3, #34	; 0x22
 8005f66:	d108      	bne.n	8005f7a <UART_DMAError+0x7a>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2200      	movs	r2, #0
 8005f72:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005f74:	68b8      	ldr	r0, [r7, #8]
 8005f76:	f000 f823 	bl	8005fc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	f043 0210 	orr.w	r2, r3, #16
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f86:	68b8      	ldr	r0, [r7, #8]
 8005f88:	f7ff ff6e 	bl	8005e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005faa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fd6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7ff ff26 	bl	8005e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b21      	cmp	r3, #33	; 0x21
 8006036:	d144      	bne.n	80060c2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006040:	d11a      	bne.n	8006078 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006056:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	1c9a      	adds	r2, r3, #2
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	621a      	str	r2, [r3, #32]
 800606a:	e00e      	b.n	800608a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	621a      	str	r2, [r3, #32]
 8006076:	e008      	b.n	800608a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	1c59      	adds	r1, r3, #1
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6211      	str	r1, [r2, #32]
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29b      	uxth	r3, r3
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4619      	mov	r1, r3
 8006098:	84d1      	strh	r1, [r2, #38]	; 0x26
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10f      	bne.n	80060be <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	e000      	b.n	80060c4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80060c2:	2302      	movs	r3, #2
  }
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7fb fbf3 	bl	80018dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b22      	cmp	r3, #34	; 0x22
 8006112:	d171      	bne.n	80061f8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611c:	d123      	bne.n	8006166 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10e      	bne.n	800614a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	1c9a      	adds	r2, r3, #2
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28
 8006148:	e029      	b.n	800619e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	b29b      	uxth	r3, r3
 8006152:	b2db      	uxtb	r3, r3
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	629a      	str	r2, [r3, #40]	; 0x28
 8006164:	e01b      	b.n	800619e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10a      	bne.n	8006184 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6858      	ldr	r0, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	1c59      	adds	r1, r3, #1
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6291      	str	r1, [r2, #40]	; 0x28
 800617e:	b2c2      	uxtb	r2, r0
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	e00c      	b.n	800619e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	b2da      	uxtb	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	1c58      	adds	r0, r3, #1
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	6288      	str	r0, [r1, #40]	; 0x28
 8006196:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4619      	mov	r1, r3
 80061ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d120      	bne.n	80061f4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0220 	bic.w	r2, r2, #32
 80061c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695a      	ldr	r2, [r3, #20]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0201 	bic.w	r2, r2, #1
 80061e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fb fb1e 	bl	800182c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e002      	b.n	80061fa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	e000      	b.n	80061fa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80061f8:	2302      	movs	r3, #2
  }
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006246:	f023 030c 	bic.w	r3, r3, #12
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	68f9      	ldr	r1, [r7, #12]
 8006250:	430b      	orrs	r3, r1
 8006252:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006272:	f040 818b 	bne.w	800658c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4ac1      	ldr	r2, [pc, #772]	; (8006580 <UART_SetConfig+0x37c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d005      	beq.n	800628c <UART_SetConfig+0x88>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4abf      	ldr	r2, [pc, #764]	; (8006584 <UART_SetConfig+0x380>)
 8006286:	4293      	cmp	r3, r2
 8006288:	f040 80bd 	bne.w	8006406 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800628c:	f7fd fe36 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 8006290:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	461d      	mov	r5, r3
 8006296:	f04f 0600 	mov.w	r6, #0
 800629a:	46a8      	mov	r8, r5
 800629c:	46b1      	mov	r9, r6
 800629e:	eb18 0308 	adds.w	r3, r8, r8
 80062a2:	eb49 0409 	adc.w	r4, r9, r9
 80062a6:	4698      	mov	r8, r3
 80062a8:	46a1      	mov	r9, r4
 80062aa:	eb18 0805 	adds.w	r8, r8, r5
 80062ae:	eb49 0906 	adc.w	r9, r9, r6
 80062b2:	f04f 0100 	mov.w	r1, #0
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062c6:	4688      	mov	r8, r1
 80062c8:	4691      	mov	r9, r2
 80062ca:	eb18 0005 	adds.w	r0, r8, r5
 80062ce:	eb49 0106 	adc.w	r1, r9, r6
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	461d      	mov	r5, r3
 80062d8:	f04f 0600 	mov.w	r6, #0
 80062dc:	196b      	adds	r3, r5, r5
 80062de:	eb46 0406 	adc.w	r4, r6, r6
 80062e2:	461a      	mov	r2, r3
 80062e4:	4623      	mov	r3, r4
 80062e6:	f7f9 ff8d 	bl	8000204 <__aeabi_uldivmod>
 80062ea:	4603      	mov	r3, r0
 80062ec:	460c      	mov	r4, r1
 80062ee:	461a      	mov	r2, r3
 80062f0:	4ba5      	ldr	r3, [pc, #660]	; (8006588 <UART_SetConfig+0x384>)
 80062f2:	fba3 2302 	umull	r2, r3, r3, r2
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	461d      	mov	r5, r3
 8006300:	f04f 0600 	mov.w	r6, #0
 8006304:	46a9      	mov	r9, r5
 8006306:	46b2      	mov	sl, r6
 8006308:	eb19 0309 	adds.w	r3, r9, r9
 800630c:	eb4a 040a 	adc.w	r4, sl, sl
 8006310:	4699      	mov	r9, r3
 8006312:	46a2      	mov	sl, r4
 8006314:	eb19 0905 	adds.w	r9, r9, r5
 8006318:	eb4a 0a06 	adc.w	sl, sl, r6
 800631c:	f04f 0100 	mov.w	r1, #0
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006328:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800632c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006330:	4689      	mov	r9, r1
 8006332:	4692      	mov	sl, r2
 8006334:	eb19 0005 	adds.w	r0, r9, r5
 8006338:	eb4a 0106 	adc.w	r1, sl, r6
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	461d      	mov	r5, r3
 8006342:	f04f 0600 	mov.w	r6, #0
 8006346:	196b      	adds	r3, r5, r5
 8006348:	eb46 0406 	adc.w	r4, r6, r6
 800634c:	461a      	mov	r2, r3
 800634e:	4623      	mov	r3, r4
 8006350:	f7f9 ff58 	bl	8000204 <__aeabi_uldivmod>
 8006354:	4603      	mov	r3, r0
 8006356:	460c      	mov	r4, r1
 8006358:	461a      	mov	r2, r3
 800635a:	4b8b      	ldr	r3, [pc, #556]	; (8006588 <UART_SetConfig+0x384>)
 800635c:	fba3 1302 	umull	r1, r3, r3, r2
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	2164      	movs	r1, #100	; 0x64
 8006364:	fb01 f303 	mul.w	r3, r1, r3
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	3332      	adds	r3, #50	; 0x32
 800636e:	4a86      	ldr	r2, [pc, #536]	; (8006588 <UART_SetConfig+0x384>)
 8006370:	fba2 2303 	umull	r2, r3, r2, r3
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800637c:	4498      	add	r8, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	461d      	mov	r5, r3
 8006382:	f04f 0600 	mov.w	r6, #0
 8006386:	46a9      	mov	r9, r5
 8006388:	46b2      	mov	sl, r6
 800638a:	eb19 0309 	adds.w	r3, r9, r9
 800638e:	eb4a 040a 	adc.w	r4, sl, sl
 8006392:	4699      	mov	r9, r3
 8006394:	46a2      	mov	sl, r4
 8006396:	eb19 0905 	adds.w	r9, r9, r5
 800639a:	eb4a 0a06 	adc.w	sl, sl, r6
 800639e:	f04f 0100 	mov.w	r1, #0
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063b2:	4689      	mov	r9, r1
 80063b4:	4692      	mov	sl, r2
 80063b6:	eb19 0005 	adds.w	r0, r9, r5
 80063ba:	eb4a 0106 	adc.w	r1, sl, r6
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	461d      	mov	r5, r3
 80063c4:	f04f 0600 	mov.w	r6, #0
 80063c8:	196b      	adds	r3, r5, r5
 80063ca:	eb46 0406 	adc.w	r4, r6, r6
 80063ce:	461a      	mov	r2, r3
 80063d0:	4623      	mov	r3, r4
 80063d2:	f7f9 ff17 	bl	8000204 <__aeabi_uldivmod>
 80063d6:	4603      	mov	r3, r0
 80063d8:	460c      	mov	r4, r1
 80063da:	461a      	mov	r2, r3
 80063dc:	4b6a      	ldr	r3, [pc, #424]	; (8006588 <UART_SetConfig+0x384>)
 80063de:	fba3 1302 	umull	r1, r3, r3, r2
 80063e2:	095b      	lsrs	r3, r3, #5
 80063e4:	2164      	movs	r1, #100	; 0x64
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	3332      	adds	r3, #50	; 0x32
 80063f0:	4a65      	ldr	r2, [pc, #404]	; (8006588 <UART_SetConfig+0x384>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	f003 0207 	and.w	r2, r3, #7
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4442      	add	r2, r8
 8006402:	609a      	str	r2, [r3, #8]
 8006404:	e26f      	b.n	80068e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006406:	f7fd fd65 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 800640a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	461d      	mov	r5, r3
 8006410:	f04f 0600 	mov.w	r6, #0
 8006414:	46a8      	mov	r8, r5
 8006416:	46b1      	mov	r9, r6
 8006418:	eb18 0308 	adds.w	r3, r8, r8
 800641c:	eb49 0409 	adc.w	r4, r9, r9
 8006420:	4698      	mov	r8, r3
 8006422:	46a1      	mov	r9, r4
 8006424:	eb18 0805 	adds.w	r8, r8, r5
 8006428:	eb49 0906 	adc.w	r9, r9, r6
 800642c:	f04f 0100 	mov.w	r1, #0
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006438:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800643c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006440:	4688      	mov	r8, r1
 8006442:	4691      	mov	r9, r2
 8006444:	eb18 0005 	adds.w	r0, r8, r5
 8006448:	eb49 0106 	adc.w	r1, r9, r6
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	461d      	mov	r5, r3
 8006452:	f04f 0600 	mov.w	r6, #0
 8006456:	196b      	adds	r3, r5, r5
 8006458:	eb46 0406 	adc.w	r4, r6, r6
 800645c:	461a      	mov	r2, r3
 800645e:	4623      	mov	r3, r4
 8006460:	f7f9 fed0 	bl	8000204 <__aeabi_uldivmod>
 8006464:	4603      	mov	r3, r0
 8006466:	460c      	mov	r4, r1
 8006468:	461a      	mov	r2, r3
 800646a:	4b47      	ldr	r3, [pc, #284]	; (8006588 <UART_SetConfig+0x384>)
 800646c:	fba3 2302 	umull	r2, r3, r3, r2
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	461d      	mov	r5, r3
 800647a:	f04f 0600 	mov.w	r6, #0
 800647e:	46a9      	mov	r9, r5
 8006480:	46b2      	mov	sl, r6
 8006482:	eb19 0309 	adds.w	r3, r9, r9
 8006486:	eb4a 040a 	adc.w	r4, sl, sl
 800648a:	4699      	mov	r9, r3
 800648c:	46a2      	mov	sl, r4
 800648e:	eb19 0905 	adds.w	r9, r9, r5
 8006492:	eb4a 0a06 	adc.w	sl, sl, r6
 8006496:	f04f 0100 	mov.w	r1, #0
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064aa:	4689      	mov	r9, r1
 80064ac:	4692      	mov	sl, r2
 80064ae:	eb19 0005 	adds.w	r0, r9, r5
 80064b2:	eb4a 0106 	adc.w	r1, sl, r6
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	461d      	mov	r5, r3
 80064bc:	f04f 0600 	mov.w	r6, #0
 80064c0:	196b      	adds	r3, r5, r5
 80064c2:	eb46 0406 	adc.w	r4, r6, r6
 80064c6:	461a      	mov	r2, r3
 80064c8:	4623      	mov	r3, r4
 80064ca:	f7f9 fe9b 	bl	8000204 <__aeabi_uldivmod>
 80064ce:	4603      	mov	r3, r0
 80064d0:	460c      	mov	r4, r1
 80064d2:	461a      	mov	r2, r3
 80064d4:	4b2c      	ldr	r3, [pc, #176]	; (8006588 <UART_SetConfig+0x384>)
 80064d6:	fba3 1302 	umull	r1, r3, r3, r2
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	2164      	movs	r1, #100	; 0x64
 80064de:	fb01 f303 	mul.w	r3, r1, r3
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	3332      	adds	r3, #50	; 0x32
 80064e8:	4a27      	ldr	r2, [pc, #156]	; (8006588 <UART_SetConfig+0x384>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064f6:	4498      	add	r8, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	461d      	mov	r5, r3
 80064fc:	f04f 0600 	mov.w	r6, #0
 8006500:	46a9      	mov	r9, r5
 8006502:	46b2      	mov	sl, r6
 8006504:	eb19 0309 	adds.w	r3, r9, r9
 8006508:	eb4a 040a 	adc.w	r4, sl, sl
 800650c:	4699      	mov	r9, r3
 800650e:	46a2      	mov	sl, r4
 8006510:	eb19 0905 	adds.w	r9, r9, r5
 8006514:	eb4a 0a06 	adc.w	sl, sl, r6
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006524:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006528:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800652c:	4689      	mov	r9, r1
 800652e:	4692      	mov	sl, r2
 8006530:	eb19 0005 	adds.w	r0, r9, r5
 8006534:	eb4a 0106 	adc.w	r1, sl, r6
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	461d      	mov	r5, r3
 800653e:	f04f 0600 	mov.w	r6, #0
 8006542:	196b      	adds	r3, r5, r5
 8006544:	eb46 0406 	adc.w	r4, r6, r6
 8006548:	461a      	mov	r2, r3
 800654a:	4623      	mov	r3, r4
 800654c:	f7f9 fe5a 	bl	8000204 <__aeabi_uldivmod>
 8006550:	4603      	mov	r3, r0
 8006552:	460c      	mov	r4, r1
 8006554:	461a      	mov	r2, r3
 8006556:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <UART_SetConfig+0x384>)
 8006558:	fba3 1302 	umull	r1, r3, r3, r2
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	2164      	movs	r1, #100	; 0x64
 8006560:	fb01 f303 	mul.w	r3, r1, r3
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	3332      	adds	r3, #50	; 0x32
 800656a:	4a07      	ldr	r2, [pc, #28]	; (8006588 <UART_SetConfig+0x384>)
 800656c:	fba2 2303 	umull	r2, r3, r2, r3
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	f003 0207 	and.w	r2, r3, #7
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4442      	add	r2, r8
 800657c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800657e:	e1b2      	b.n	80068e6 <UART_SetConfig+0x6e2>
 8006580:	40011000 	.word	0x40011000
 8006584:	40011400 	.word	0x40011400
 8006588:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4ad7      	ldr	r2, [pc, #860]	; (80068f0 <UART_SetConfig+0x6ec>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d005      	beq.n	80065a2 <UART_SetConfig+0x39e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4ad6      	ldr	r2, [pc, #856]	; (80068f4 <UART_SetConfig+0x6f0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	f040 80d1 	bne.w	8006744 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80065a2:	f7fd fcab 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 80065a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	469a      	mov	sl, r3
 80065ac:	f04f 0b00 	mov.w	fp, #0
 80065b0:	46d0      	mov	r8, sl
 80065b2:	46d9      	mov	r9, fp
 80065b4:	eb18 0308 	adds.w	r3, r8, r8
 80065b8:	eb49 0409 	adc.w	r4, r9, r9
 80065bc:	4698      	mov	r8, r3
 80065be:	46a1      	mov	r9, r4
 80065c0:	eb18 080a 	adds.w	r8, r8, sl
 80065c4:	eb49 090b 	adc.w	r9, r9, fp
 80065c8:	f04f 0100 	mov.w	r1, #0
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065dc:	4688      	mov	r8, r1
 80065de:	4691      	mov	r9, r2
 80065e0:	eb1a 0508 	adds.w	r5, sl, r8
 80065e4:	eb4b 0609 	adc.w	r6, fp, r9
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	4619      	mov	r1, r3
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	f04f 0400 	mov.w	r4, #0
 80065fa:	0094      	lsls	r4, r2, #2
 80065fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006600:	008b      	lsls	r3, r1, #2
 8006602:	461a      	mov	r2, r3
 8006604:	4623      	mov	r3, r4
 8006606:	4628      	mov	r0, r5
 8006608:	4631      	mov	r1, r6
 800660a:	f7f9 fdfb 	bl	8000204 <__aeabi_uldivmod>
 800660e:	4603      	mov	r3, r0
 8006610:	460c      	mov	r4, r1
 8006612:	461a      	mov	r2, r3
 8006614:	4bb8      	ldr	r3, [pc, #736]	; (80068f8 <UART_SetConfig+0x6f4>)
 8006616:	fba3 2302 	umull	r2, r3, r3, r2
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	469b      	mov	fp, r3
 8006624:	f04f 0c00 	mov.w	ip, #0
 8006628:	46d9      	mov	r9, fp
 800662a:	46e2      	mov	sl, ip
 800662c:	eb19 0309 	adds.w	r3, r9, r9
 8006630:	eb4a 040a 	adc.w	r4, sl, sl
 8006634:	4699      	mov	r9, r3
 8006636:	46a2      	mov	sl, r4
 8006638:	eb19 090b 	adds.w	r9, r9, fp
 800663c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006640:	f04f 0100 	mov.w	r1, #0
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800664c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006650:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006654:	4689      	mov	r9, r1
 8006656:	4692      	mov	sl, r2
 8006658:	eb1b 0509 	adds.w	r5, fp, r9
 800665c:	eb4c 060a 	adc.w	r6, ip, sl
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	4619      	mov	r1, r3
 8006666:	f04f 0200 	mov.w	r2, #0
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	f04f 0400 	mov.w	r4, #0
 8006672:	0094      	lsls	r4, r2, #2
 8006674:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006678:	008b      	lsls	r3, r1, #2
 800667a:	461a      	mov	r2, r3
 800667c:	4623      	mov	r3, r4
 800667e:	4628      	mov	r0, r5
 8006680:	4631      	mov	r1, r6
 8006682:	f7f9 fdbf 	bl	8000204 <__aeabi_uldivmod>
 8006686:	4603      	mov	r3, r0
 8006688:	460c      	mov	r4, r1
 800668a:	461a      	mov	r2, r3
 800668c:	4b9a      	ldr	r3, [pc, #616]	; (80068f8 <UART_SetConfig+0x6f4>)
 800668e:	fba3 1302 	umull	r1, r3, r3, r2
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	2164      	movs	r1, #100	; 0x64
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	3332      	adds	r3, #50	; 0x32
 80066a0:	4a95      	ldr	r2, [pc, #596]	; (80068f8 <UART_SetConfig+0x6f4>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066ac:	4498      	add	r8, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	469b      	mov	fp, r3
 80066b2:	f04f 0c00 	mov.w	ip, #0
 80066b6:	46d9      	mov	r9, fp
 80066b8:	46e2      	mov	sl, ip
 80066ba:	eb19 0309 	adds.w	r3, r9, r9
 80066be:	eb4a 040a 	adc.w	r4, sl, sl
 80066c2:	4699      	mov	r9, r3
 80066c4:	46a2      	mov	sl, r4
 80066c6:	eb19 090b 	adds.w	r9, r9, fp
 80066ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066ce:	f04f 0100 	mov.w	r1, #0
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066e2:	4689      	mov	r9, r1
 80066e4:	4692      	mov	sl, r2
 80066e6:	eb1b 0509 	adds.w	r5, fp, r9
 80066ea:	eb4c 060a 	adc.w	r6, ip, sl
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	4619      	mov	r1, r3
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	f04f 0400 	mov.w	r4, #0
 8006700:	0094      	lsls	r4, r2, #2
 8006702:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006706:	008b      	lsls	r3, r1, #2
 8006708:	461a      	mov	r2, r3
 800670a:	4623      	mov	r3, r4
 800670c:	4628      	mov	r0, r5
 800670e:	4631      	mov	r1, r6
 8006710:	f7f9 fd78 	bl	8000204 <__aeabi_uldivmod>
 8006714:	4603      	mov	r3, r0
 8006716:	460c      	mov	r4, r1
 8006718:	461a      	mov	r2, r3
 800671a:	4b77      	ldr	r3, [pc, #476]	; (80068f8 <UART_SetConfig+0x6f4>)
 800671c:	fba3 1302 	umull	r1, r3, r3, r2
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	2164      	movs	r1, #100	; 0x64
 8006724:	fb01 f303 	mul.w	r3, r1, r3
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	3332      	adds	r3, #50	; 0x32
 800672e:	4a72      	ldr	r2, [pc, #456]	; (80068f8 <UART_SetConfig+0x6f4>)
 8006730:	fba2 2303 	umull	r2, r3, r2, r3
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	f003 020f 	and.w	r2, r3, #15
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4442      	add	r2, r8
 8006740:	609a      	str	r2, [r3, #8]
 8006742:	e0d0      	b.n	80068e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006744:	f7fd fbc6 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 8006748:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	469a      	mov	sl, r3
 800674e:	f04f 0b00 	mov.w	fp, #0
 8006752:	46d0      	mov	r8, sl
 8006754:	46d9      	mov	r9, fp
 8006756:	eb18 0308 	adds.w	r3, r8, r8
 800675a:	eb49 0409 	adc.w	r4, r9, r9
 800675e:	4698      	mov	r8, r3
 8006760:	46a1      	mov	r9, r4
 8006762:	eb18 080a 	adds.w	r8, r8, sl
 8006766:	eb49 090b 	adc.w	r9, r9, fp
 800676a:	f04f 0100 	mov.w	r1, #0
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006776:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800677a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800677e:	4688      	mov	r8, r1
 8006780:	4691      	mov	r9, r2
 8006782:	eb1a 0508 	adds.w	r5, sl, r8
 8006786:	eb4b 0609 	adc.w	r6, fp, r9
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	4619      	mov	r1, r3
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	f04f 0400 	mov.w	r4, #0
 800679c:	0094      	lsls	r4, r2, #2
 800679e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067a2:	008b      	lsls	r3, r1, #2
 80067a4:	461a      	mov	r2, r3
 80067a6:	4623      	mov	r3, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	4631      	mov	r1, r6
 80067ac:	f7f9 fd2a 	bl	8000204 <__aeabi_uldivmod>
 80067b0:	4603      	mov	r3, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	461a      	mov	r2, r3
 80067b6:	4b50      	ldr	r3, [pc, #320]	; (80068f8 <UART_SetConfig+0x6f4>)
 80067b8:	fba3 2302 	umull	r2, r3, r3, r2
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	469b      	mov	fp, r3
 80067c6:	f04f 0c00 	mov.w	ip, #0
 80067ca:	46d9      	mov	r9, fp
 80067cc:	46e2      	mov	sl, ip
 80067ce:	eb19 0309 	adds.w	r3, r9, r9
 80067d2:	eb4a 040a 	adc.w	r4, sl, sl
 80067d6:	4699      	mov	r9, r3
 80067d8:	46a2      	mov	sl, r4
 80067da:	eb19 090b 	adds.w	r9, r9, fp
 80067de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067e2:	f04f 0100 	mov.w	r1, #0
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067f6:	4689      	mov	r9, r1
 80067f8:	4692      	mov	sl, r2
 80067fa:	eb1b 0509 	adds.w	r5, fp, r9
 80067fe:	eb4c 060a 	adc.w	r6, ip, sl
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	4619      	mov	r1, r3
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	f04f 0400 	mov.w	r4, #0
 8006814:	0094      	lsls	r4, r2, #2
 8006816:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800681a:	008b      	lsls	r3, r1, #2
 800681c:	461a      	mov	r2, r3
 800681e:	4623      	mov	r3, r4
 8006820:	4628      	mov	r0, r5
 8006822:	4631      	mov	r1, r6
 8006824:	f7f9 fcee 	bl	8000204 <__aeabi_uldivmod>
 8006828:	4603      	mov	r3, r0
 800682a:	460c      	mov	r4, r1
 800682c:	461a      	mov	r2, r3
 800682e:	4b32      	ldr	r3, [pc, #200]	; (80068f8 <UART_SetConfig+0x6f4>)
 8006830:	fba3 1302 	umull	r1, r3, r3, r2
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	2164      	movs	r1, #100	; 0x64
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	3332      	adds	r3, #50	; 0x32
 8006842:	4a2d      	ldr	r2, [pc, #180]	; (80068f8 <UART_SetConfig+0x6f4>)
 8006844:	fba2 2303 	umull	r2, r3, r2, r3
 8006848:	095b      	lsrs	r3, r3, #5
 800684a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800684e:	4498      	add	r8, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	469b      	mov	fp, r3
 8006854:	f04f 0c00 	mov.w	ip, #0
 8006858:	46d9      	mov	r9, fp
 800685a:	46e2      	mov	sl, ip
 800685c:	eb19 0309 	adds.w	r3, r9, r9
 8006860:	eb4a 040a 	adc.w	r4, sl, sl
 8006864:	4699      	mov	r9, r3
 8006866:	46a2      	mov	sl, r4
 8006868:	eb19 090b 	adds.w	r9, r9, fp
 800686c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006870:	f04f 0100 	mov.w	r1, #0
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800687c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006880:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006884:	4689      	mov	r9, r1
 8006886:	4692      	mov	sl, r2
 8006888:	eb1b 0509 	adds.w	r5, fp, r9
 800688c:	eb4c 060a 	adc.w	r6, ip, sl
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	4619      	mov	r1, r3
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	f04f 0400 	mov.w	r4, #0
 80068a2:	0094      	lsls	r4, r2, #2
 80068a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068a8:	008b      	lsls	r3, r1, #2
 80068aa:	461a      	mov	r2, r3
 80068ac:	4623      	mov	r3, r4
 80068ae:	4628      	mov	r0, r5
 80068b0:	4631      	mov	r1, r6
 80068b2:	f7f9 fca7 	bl	8000204 <__aeabi_uldivmod>
 80068b6:	4603      	mov	r3, r0
 80068b8:	460c      	mov	r4, r1
 80068ba:	461a      	mov	r2, r3
 80068bc:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <UART_SetConfig+0x6f4>)
 80068be:	fba3 1302 	umull	r1, r3, r3, r2
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	2164      	movs	r1, #100	; 0x64
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	3332      	adds	r3, #50	; 0x32
 80068d0:	4a09      	ldr	r2, [pc, #36]	; (80068f8 <UART_SetConfig+0x6f4>)
 80068d2:	fba2 2303 	umull	r2, r3, r2, r3
 80068d6:	095b      	lsrs	r3, r3, #5
 80068d8:	f003 020f 	and.w	r2, r3, #15
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4442      	add	r2, r8
 80068e2:	609a      	str	r2, [r3, #8]
}
 80068e4:	e7ff      	b.n	80068e6 <UART_SetConfig+0x6e2>
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f0:	40011000 	.word	0x40011000
 80068f4:	40011400 	.word	0x40011400
 80068f8:	51eb851f 	.word	0x51eb851f

080068fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006900:	4904      	ldr	r1, [pc, #16]	; (8006914 <MX_FATFS_Init+0x18>)
 8006902:	4805      	ldr	r0, [pc, #20]	; (8006918 <MX_FATFS_Init+0x1c>)
 8006904:	f002 fb4c 	bl	8008fa0 <FATFS_LinkDriver>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	4b03      	ldr	r3, [pc, #12]	; (800691c <MX_FATFS_Init+0x20>)
 800690e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006910:	bf00      	nop
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20000a44 	.word	0x20000a44
 8006918:	20000010 	.word	0x20000010
 800691c:	20000a48 	.word	0x20000a48

08006920 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006924:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006926:	4618      	mov	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	4618      	mov	r0, r3
 800693e:	f7fb fe9f 	bl	8002680 <USER_SPI_initialize>
 8006942:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	4618      	mov	r0, r3
 800695a:	f7fb ff71 	bl	8002840 <USER_SPI_status>
 800695e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006978:	7bf8      	ldrb	r0, [r7, #15]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	f7fb ff74 	bl	800286c <USER_SPI_read>
 8006984:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
 800699a:	4603      	mov	r3, r0
 800699c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */


    return USER_SPI_write(pdrv, buff, sector, count);
 800699e:	7bf8      	ldrb	r0, [r7, #15]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	f7fb ffc7 	bl	8002938 <USER_SPI_write>
 80069aa:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	603a      	str	r2, [r7, #0]
 80069be:	71fb      	strb	r3, [r7, #7]
 80069c0:	460b      	mov	r3, r1
 80069c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80069c4:	79b9      	ldrb	r1, [r7, #6]
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fc f830 	bl	8002a30 <USER_SPI_ioctl>
 80069d0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <disk_status+0x30>)
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	79fa      	ldrb	r2, [r7, #7]
 80069f4:	4905      	ldr	r1, [pc, #20]	; (8006a0c <disk_status+0x30>)
 80069f6:	440a      	add	r2, r1
 80069f8:	7a12      	ldrb	r2, [r2, #8]
 80069fa:	4610      	mov	r0, r2
 80069fc:	4798      	blx	r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20000074 	.word	0x20000074

08006a10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	4a0d      	ldr	r2, [pc, #52]	; (8006a58 <disk_initialize+0x48>)
 8006a22:	5cd3      	ldrb	r3, [r2, r3]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d111      	bne.n	8006a4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	4a0b      	ldr	r2, [pc, #44]	; (8006a58 <disk_initialize+0x48>)
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	4a09      	ldr	r2, [pc, #36]	; (8006a58 <disk_initialize+0x48>)
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	79fa      	ldrb	r2, [r7, #7]
 8006a3e:	4906      	ldr	r1, [pc, #24]	; (8006a58 <disk_initialize+0x48>)
 8006a40:	440a      	add	r2, r1
 8006a42:	7a12      	ldrb	r2, [r2, #8]
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000074 	.word	0x20000074

08006a5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006a5c:	b590      	push	{r4, r7, lr}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	607a      	str	r2, [r7, #4]
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	4a0a      	ldr	r2, [pc, #40]	; (8006a98 <disk_read+0x3c>)
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	689c      	ldr	r4, [r3, #8]
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	4a07      	ldr	r2, [pc, #28]	; (8006a98 <disk_read+0x3c>)
 8006a7c:	4413      	add	r3, r2
 8006a7e:	7a18      	ldrb	r0, [r3, #8]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	47a0      	blx	r4
 8006a88:	4603      	mov	r3, r0
 8006a8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd90      	pop	{r4, r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000074 	.word	0x20000074

08006a9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006a9c:	b590      	push	{r4, r7, lr}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <disk_write+0x3c>)
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	68dc      	ldr	r4, [r3, #12]
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	4a07      	ldr	r2, [pc, #28]	; (8006ad8 <disk_write+0x3c>)
 8006abc:	4413      	add	r3, r2
 8006abe:	7a18      	ldrb	r0, [r3, #8]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	47a0      	blx	r4
 8006ac8:	4603      	mov	r3, r0
 8006aca:	75fb      	strb	r3, [r7, #23]
  return res;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd90      	pop	{r4, r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000074 	.word	0x20000074

08006adc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	603a      	str	r2, [r7, #0]
 8006ae6:	71fb      	strb	r3, [r7, #7]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <disk_ioctl+0x38>)
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	79fa      	ldrb	r2, [r7, #7]
 8006afa:	4906      	ldr	r1, [pc, #24]	; (8006b14 <disk_ioctl+0x38>)
 8006afc:	440a      	add	r2, r1
 8006afe:	7a10      	ldrb	r0, [r2, #8]
 8006b00:	79b9      	ldrb	r1, [r7, #6]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	4798      	blx	r3
 8006b06:	4603      	mov	r3, r0
 8006b08:	73fb      	strb	r3, [r7, #15]
  return res;
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20000074 	.word	0x20000074

08006b18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3301      	adds	r3, #1
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006b28:	89fb      	ldrh	r3, [r7, #14]
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	b21a      	sxth	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	b21b      	sxth	r3, r3
 8006b34:	4313      	orrs	r3, r2
 8006b36:	b21b      	sxth	r3, r3
 8006b38:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006b3a:	89fb      	ldrh	r3, [r7, #14]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3303      	adds	r3, #3
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	021b      	lsls	r3, r3, #8
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	3202      	adds	r2, #2
 8006b60:	7812      	ldrb	r2, [r2, #0]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	3201      	adds	r2, #1
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006b80:	68fb      	ldr	r3, [r7, #12]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	887a      	ldrh	r2, [r7, #2]
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	887b      	ldrh	r3, [r7, #2]
 8006ba8:	0a1b      	lsrs	r3, r3, #8
 8006baa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	887a      	ldrh	r2, [r7, #2]
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	701a      	strb	r2, [r3, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	0a1b      	lsrs	r3, r3, #8
 8006bde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	607a      	str	r2, [r7, #4]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00d      	beq.n	8006c52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	1c53      	adds	r3, r2, #1
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	1c59      	adds	r1, r3, #1
 8006c40:	6179      	str	r1, [r7, #20]
 8006c42:	7812      	ldrb	r2, [r2, #0]
 8006c44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	607b      	str	r3, [r7, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f1      	bne.n	8006c36 <mem_cpy+0x1a>
	}
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006c5e:	b480      	push	{r7}
 8006c60:	b087      	sub	sp, #28
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	617a      	str	r2, [r7, #20]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	607b      	str	r3, [r7, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f3      	bne.n	8006c6e <mem_set+0x10>
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006c92:	b480      	push	{r7}
 8006c94:	b089      	sub	sp, #36	; 0x24
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	61fb      	str	r3, [r7, #28]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	61fa      	str	r2, [r7, #28]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	61ba      	str	r2, [r7, #24]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	1acb      	subs	r3, r1, r3
 8006cbe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	607b      	str	r3, [r7, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <mem_cmp+0x40>
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0eb      	beq.n	8006caa <mem_cmp+0x18>

	return r;
 8006cd2:	697b      	ldr	r3, [r7, #20]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3724      	adds	r7, #36	; 0x24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006cea:	e002      	b.n	8006cf2 <chk_chr+0x12>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d005      	beq.n	8006d06 <chk_chr+0x26>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d1f2      	bne.n	8006cec <chk_chr+0xc>
	return *str;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	781b      	ldrb	r3, [r3, #0]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
	...

08006d18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d22:	2300      	movs	r3, #0
 8006d24:	60bb      	str	r3, [r7, #8]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	e029      	b.n	8006d80 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006d2c:	4a27      	ldr	r2, [pc, #156]	; (8006dcc <chk_lock+0xb4>)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	4413      	add	r3, r2
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01d      	beq.n	8006d76 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d3a:	4a24      	ldr	r2, [pc, #144]	; (8006dcc <chk_lock+0xb4>)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	4413      	add	r3, r2
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d116      	bne.n	8006d7a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006d4c:	4a1f      	ldr	r2, [pc, #124]	; (8006dcc <chk_lock+0xb4>)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	4413      	add	r3, r2
 8006d54:	3304      	adds	r3, #4
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d10c      	bne.n	8006d7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d60:	4a1a      	ldr	r2, [pc, #104]	; (8006dcc <chk_lock+0xb4>)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	4413      	add	r3, r2
 8006d68:	3308      	adds	r3, #8
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d102      	bne.n	8006d7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d74:	e007      	b.n	8006d86 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006d76:	2301      	movs	r3, #1
 8006d78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d9d2      	bls.n	8006d2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d109      	bne.n	8006da0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <chk_lock+0x80>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d101      	bne.n	8006d9c <chk_lock+0x84>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e010      	b.n	8006dbe <chk_lock+0xa6>
 8006d9c:	2312      	movs	r3, #18
 8006d9e:	e00e      	b.n	8006dbe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d108      	bne.n	8006db8 <chk_lock+0xa0>
 8006da6:	4a09      	ldr	r2, [pc, #36]	; (8006dcc <chk_lock+0xb4>)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	4413      	add	r3, r2
 8006dae:	330c      	adds	r3, #12
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db6:	d101      	bne.n	8006dbc <chk_lock+0xa4>
 8006db8:	2310      	movs	r3, #16
 8006dba:	e000      	b.n	8006dbe <chk_lock+0xa6>
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20000054 	.word	0x20000054

08006dd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	e002      	b.n	8006de2 <enq_lock+0x12>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3301      	adds	r3, #1
 8006de0:	607b      	str	r3, [r7, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d806      	bhi.n	8006df6 <enq_lock+0x26>
 8006de8:	4a09      	ldr	r2, [pc, #36]	; (8006e10 <enq_lock+0x40>)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	4413      	add	r3, r2
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1f2      	bne.n	8006ddc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	bf14      	ite	ne
 8006dfc:	2301      	movne	r3, #1
 8006dfe:	2300      	moveq	r3, #0
 8006e00:	b2db      	uxtb	r3, r3
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	20000054 	.word	0x20000054

08006e14 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e01f      	b.n	8006e64 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006e24:	4a41      	ldr	r2, [pc, #260]	; (8006f2c <inc_lock+0x118>)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	4413      	add	r3, r2
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d113      	bne.n	8006e5e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006e36:	4a3d      	ldr	r2, [pc, #244]	; (8006f2c <inc_lock+0x118>)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	4413      	add	r3, r2
 8006e3e:	3304      	adds	r3, #4
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d109      	bne.n	8006e5e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006e4a:	4a38      	ldr	r2, [pc, #224]	; (8006f2c <inc_lock+0x118>)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	4413      	add	r3, r2
 8006e52:	3308      	adds	r3, #8
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d006      	beq.n	8006e6c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3301      	adds	r3, #1
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d9dc      	bls.n	8006e24 <inc_lock+0x10>
 8006e6a:	e000      	b.n	8006e6e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006e6c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d132      	bne.n	8006eda <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e002      	b.n	8006e80 <inc_lock+0x6c>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d806      	bhi.n	8006e94 <inc_lock+0x80>
 8006e86:	4a29      	ldr	r2, [pc, #164]	; (8006f2c <inc_lock+0x118>)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	4413      	add	r3, r2
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f2      	bne.n	8006e7a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d101      	bne.n	8006e9e <inc_lock+0x8a>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e040      	b.n	8006f20 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4922      	ldr	r1, [pc, #136]	; (8006f2c <inc_lock+0x118>)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	440b      	add	r3, r1
 8006eaa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	491e      	ldr	r1, [pc, #120]	; (8006f2c <inc_lock+0x118>)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	011b      	lsls	r3, r3, #4
 8006eb6:	440b      	add	r3, r1
 8006eb8:	3304      	adds	r3, #4
 8006eba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	695a      	ldr	r2, [r3, #20]
 8006ec0:	491a      	ldr	r1, [pc, #104]	; (8006f2c <inc_lock+0x118>)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3308      	adds	r3, #8
 8006eca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006ecc:	4a17      	ldr	r2, [pc, #92]	; (8006f2c <inc_lock+0x118>)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	011b      	lsls	r3, r3, #4
 8006ed2:	4413      	add	r3, r2
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d009      	beq.n	8006ef4 <inc_lock+0xe0>
 8006ee0:	4a12      	ldr	r2, [pc, #72]	; (8006f2c <inc_lock+0x118>)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	4413      	add	r3, r2
 8006ee8:	330c      	adds	r3, #12
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <inc_lock+0xe0>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e015      	b.n	8006f20 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d108      	bne.n	8006f0c <inc_lock+0xf8>
 8006efa:	4a0c      	ldr	r2, [pc, #48]	; (8006f2c <inc_lock+0x118>)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	4413      	add	r3, r2
 8006f02:	330c      	adds	r3, #12
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	3301      	adds	r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	e001      	b.n	8006f10 <inc_lock+0xfc>
 8006f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f10:	4906      	ldr	r1, [pc, #24]	; (8006f2c <inc_lock+0x118>)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	440b      	add	r3, r1
 8006f18:	330c      	adds	r3, #12
 8006f1a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3301      	adds	r3, #1
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	20000054 	.word	0x20000054

08006f30 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	607b      	str	r3, [r7, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d825      	bhi.n	8006f90 <dec_lock+0x60>
		n = Files[i].ctr;
 8006f44:	4a17      	ldr	r2, [pc, #92]	; (8006fa4 <dec_lock+0x74>)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	4413      	add	r3, r2
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006f52:	89fb      	ldrh	r3, [r7, #14]
 8006f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f58:	d101      	bne.n	8006f5e <dec_lock+0x2e>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006f5e:	89fb      	ldrh	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <dec_lock+0x3a>
 8006f64:	89fb      	ldrh	r3, [r7, #14]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006f6a:	4a0e      	ldr	r2, [pc, #56]	; (8006fa4 <dec_lock+0x74>)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	4413      	add	r3, r2
 8006f72:	330c      	adds	r3, #12
 8006f74:	89fa      	ldrh	r2, [r7, #14]
 8006f76:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006f78:	89fb      	ldrh	r3, [r7, #14]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <dec_lock+0x5a>
 8006f7e:	4a09      	ldr	r2, [pc, #36]	; (8006fa4 <dec_lock+0x74>)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	4413      	add	r3, r2
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	737b      	strb	r3, [r7, #13]
 8006f8e:	e001      	b.n	8006f94 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006f90:	2302      	movs	r3, #2
 8006f92:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006f94:	7b7b      	ldrb	r3, [r7, #13]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20000054 	.word	0x20000054

08006fa8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e010      	b.n	8006fd8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006fb6:	4a0d      	ldr	r2, [pc, #52]	; (8006fec <clear_lock+0x44>)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	4413      	add	r3, r2
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d105      	bne.n	8006fd2 <clear_lock+0x2a>
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <clear_lock+0x44>)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	4413      	add	r3, r2
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d9eb      	bls.n	8006fb6 <clear_lock+0xe>
	}
}
 8006fde:	bf00      	nop
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	20000054 	.word	0x20000054

08006ff0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	78db      	ldrb	r3, [r3, #3]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d034      	beq.n	800706e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	7858      	ldrb	r0, [r3, #1]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007014:	2301      	movs	r3, #1
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	f7ff fd40 	bl	8006a9c <disk_write>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007022:	2301      	movs	r3, #1
 8007024:	73fb      	strb	r3, [r7, #15]
 8007026:	e022      	b.n	800706e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	1ad2      	subs	r2, r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	429a      	cmp	r2, r3
 800703c:	d217      	bcs.n	800706e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	789b      	ldrb	r3, [r3, #2]
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	e010      	b.n	8007068 <sync_window+0x78>
					wsect += fs->fsize;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4413      	add	r3, r2
 800704e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	7858      	ldrb	r0, [r3, #1]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800705a:	2301      	movs	r3, #1
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	f7ff fd1d 	bl	8006a9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	3b01      	subs	r3, #1
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d8eb      	bhi.n	8007046 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800706e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d01b      	beq.n	80070c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff ffad 	bl	8006ff0 <sync_window>
 8007096:	4603      	mov	r3, r0
 8007098:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d113      	bne.n	80070c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	7858      	ldrb	r0, [r3, #1]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070aa:	2301      	movs	r3, #1
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	f7ff fcd5 	bl	8006a5c <disk_read>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80070b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80070be:	2301      	movs	r3, #1
 80070c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff ff87 	bl	8006ff0 <sync_window>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d158      	bne.n	800719e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d148      	bne.n	8007186 <sync_fs+0xb2>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	791b      	ldrb	r3, [r3, #4]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d144      	bne.n	8007186 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3330      	adds	r3, #48	; 0x30
 8007100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff fda9 	bl	8006c5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3330      	adds	r3, #48	; 0x30
 8007110:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007114:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff fd38 	bl	8006b8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3330      	adds	r3, #48	; 0x30
 8007122:	4921      	ldr	r1, [pc, #132]	; (80071a8 <sync_fs+0xd4>)
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fd4d 	bl	8006bc4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3330      	adds	r3, #48	; 0x30
 800712e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007132:	491e      	ldr	r1, [pc, #120]	; (80071ac <sync_fs+0xd8>)
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff fd45 	bl	8006bc4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3330      	adds	r3, #48	; 0x30
 800713e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	4619      	mov	r1, r3
 8007148:	4610      	mov	r0, r2
 800714a:	f7ff fd3b 	bl	8006bc4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3330      	adds	r3, #48	; 0x30
 8007152:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	4619      	mov	r1, r3
 800715c:	4610      	mov	r0, r2
 800715e:	f7ff fd31 	bl	8006bc4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7858      	ldrb	r0, [r3, #1]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717a:	2301      	movs	r3, #1
 800717c:	f7ff fc8e 	bl	8006a9c <disk_write>
			fs->fsi_flag = 0;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2200      	movs	r2, #0
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f7ff fca4 	bl	8006adc <disk_ioctl>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <sync_fs+0xca>
 800719a:	2301      	movs	r3, #1
 800719c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	41615252 	.word	0x41615252
 80071ac:	61417272 	.word	0x61417272

080071b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	3b02      	subs	r3, #2
 80071be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	3b02      	subs	r3, #2
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d301      	bcc.n	80071d0 <clust2sect+0x20>
 80071cc:	2300      	movs	r3, #0
 80071ce:	e008      	b.n	80071e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	895b      	ldrh	r3, [r3, #10]
 80071d4:	461a      	mov	r2, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	fb03 f202 	mul.w	r2, r3, r2
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e0:	4413      	add	r3, r2
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d904      	bls.n	800720e <get_fat+0x20>
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d302      	bcc.n	8007214 <get_fat+0x26>
		val = 1;	/* Internal error */
 800720e:	2301      	movs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e08c      	b.n	800732e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007218:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b02      	cmp	r3, #2
 8007220:	d045      	beq.n	80072ae <get_fat+0xc0>
 8007222:	2b03      	cmp	r3, #3
 8007224:	d05d      	beq.n	80072e2 <get_fat+0xf4>
 8007226:	2b01      	cmp	r3, #1
 8007228:	d177      	bne.n	800731a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4413      	add	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	6a1a      	ldr	r2, [r3, #32]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	0a5b      	lsrs	r3, r3, #9
 8007240:	4413      	add	r3, r2
 8007242:	4619      	mov	r1, r3
 8007244:	6938      	ldr	r0, [r7, #16]
 8007246:	f7ff ff17 	bl	8007078 <move_window>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d167      	bne.n	8007320 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	60fa      	str	r2, [r7, #12]
 8007256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	4413      	add	r3, r2
 800725e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007262:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	6a1a      	ldr	r2, [r3, #32]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	0a5b      	lsrs	r3, r3, #9
 800726c:	4413      	add	r3, r2
 800726e:	4619      	mov	r1, r3
 8007270:	6938      	ldr	r0, [r7, #16]
 8007272:	f7ff ff01 	bl	8007078 <move_window>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d153      	bne.n	8007324 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4413      	add	r3, r2
 8007286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800728a:	021b      	lsls	r3, r3, #8
 800728c:	461a      	mov	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	4313      	orrs	r3, r2
 8007292:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <get_fat+0xb6>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	091b      	lsrs	r3, r3, #4
 80072a2:	e002      	b.n	80072aa <get_fat+0xbc>
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072aa:	617b      	str	r3, [r7, #20]
			break;
 80072ac:	e03f      	b.n	800732e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	6a1a      	ldr	r2, [r3, #32]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	0a1b      	lsrs	r3, r3, #8
 80072b6:	4413      	add	r3, r2
 80072b8:	4619      	mov	r1, r3
 80072ba:	6938      	ldr	r0, [r7, #16]
 80072bc:	f7ff fedc 	bl	8007078 <move_window>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d130      	bne.n	8007328 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80072d4:	4413      	add	r3, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff fc1e 	bl	8006b18 <ld_word>
 80072dc:	4603      	mov	r3, r0
 80072de:	617b      	str	r3, [r7, #20]
			break;
 80072e0:	e025      	b.n	800732e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	6a1a      	ldr	r2, [r3, #32]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	09db      	lsrs	r3, r3, #7
 80072ea:	4413      	add	r3, r2
 80072ec:	4619      	mov	r1, r3
 80072ee:	6938      	ldr	r0, [r7, #16]
 80072f0:	f7ff fec2 	bl	8007078 <move_window>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d118      	bne.n	800732c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007308:	4413      	add	r3, r2
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff fc1c 	bl	8006b48 <ld_dword>
 8007310:	4603      	mov	r3, r0
 8007312:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007316:	617b      	str	r3, [r7, #20]
			break;
 8007318:	e009      	b.n	800732e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800731a:	2301      	movs	r3, #1
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	e006      	b.n	800732e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007320:	bf00      	nop
 8007322:	e004      	b.n	800732e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007324:	bf00      	nop
 8007326:	e002      	b.n	800732e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007328:	bf00      	nop
 800732a:	e000      	b.n	800732e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800732c:	bf00      	nop
		}
	}

	return val;
 800732e:	697b      	ldr	r3, [r7, #20]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007338:	b590      	push	{r4, r7, lr}
 800733a:	b089      	sub	sp, #36	; 0x24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007344:	2302      	movs	r3, #2
 8007346:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b01      	cmp	r3, #1
 800734c:	f240 80d6 	bls.w	80074fc <put_fat+0x1c4>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	429a      	cmp	r2, r3
 8007358:	f080 80d0 	bcs.w	80074fc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d073      	beq.n	800744c <put_fat+0x114>
 8007364:	2b03      	cmp	r3, #3
 8007366:	f000 8091 	beq.w	800748c <put_fat+0x154>
 800736a:	2b01      	cmp	r3, #1
 800736c:	f040 80c6 	bne.w	80074fc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	085b      	lsrs	r3, r3, #1
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	4413      	add	r3, r2
 800737c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	0a5b      	lsrs	r3, r3, #9
 8007386:	4413      	add	r3, r2
 8007388:	4619      	mov	r1, r3
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f7ff fe74 	bl	8007078 <move_window>
 8007390:	4603      	mov	r3, r0
 8007392:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007394:	7ffb      	ldrb	r3, [r7, #31]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f040 80a9 	bne.w	80074ee <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	1c59      	adds	r1, r3, #1
 80073a6:	61b9      	str	r1, [r7, #24]
 80073a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ac:	4413      	add	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00d      	beq.n	80073d6 <put_fat+0x9e>
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b25b      	sxtb	r3, r3
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	b25a      	sxtb	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	b25b      	sxtb	r3, r3
 80073ce:	4313      	orrs	r3, r2
 80073d0:	b25b      	sxtb	r3, r3
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	e001      	b.n	80073da <put_fat+0xa2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a1a      	ldr	r2, [r3, #32]
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	0a5b      	lsrs	r3, r3, #9
 80073ec:	4413      	add	r3, r2
 80073ee:	4619      	mov	r1, r3
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f7ff fe41 	bl	8007078 <move_window>
 80073f6:	4603      	mov	r3, r0
 80073f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073fa:	7ffb      	ldrb	r3, [r7, #31]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d178      	bne.n	80074f2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740c:	4413      	add	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <put_fat+0xea>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	091b      	lsrs	r3, r3, #4
 800741e:	b2db      	uxtb	r3, r3
 8007420:	e00e      	b.n	8007440 <put_fat+0x108>
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b25b      	sxtb	r3, r3
 8007428:	f023 030f 	bic.w	r3, r3, #15
 800742c:	b25a      	sxtb	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	0a1b      	lsrs	r3, r3, #8
 8007432:	b25b      	sxtb	r3, r3
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	b25b      	sxtb	r3, r3
 800743a:	4313      	orrs	r3, r2
 800743c:	b25b      	sxtb	r3, r3
 800743e:	b2db      	uxtb	r3, r3
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	70da      	strb	r2, [r3, #3]
			break;
 800744a:	e057      	b.n	80074fc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a1a      	ldr	r2, [r3, #32]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	0a1b      	lsrs	r3, r3, #8
 8007454:	4413      	add	r3, r2
 8007456:	4619      	mov	r1, r3
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7ff fe0d 	bl	8007078 <move_window>
 800745e:	4603      	mov	r3, r0
 8007460:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007462:	7ffb      	ldrb	r3, [r7, #31]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d146      	bne.n	80074f6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007476:	4413      	add	r3, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	b292      	uxth	r2, r2
 800747c:	4611      	mov	r1, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff fb85 	bl	8006b8e <st_word>
			fs->wflag = 1;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	70da      	strb	r2, [r3, #3]
			break;
 800748a:	e037      	b.n	80074fc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a1a      	ldr	r2, [r3, #32]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	09db      	lsrs	r3, r3, #7
 8007494:	4413      	add	r3, r2
 8007496:	4619      	mov	r1, r3
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f7ff fded 	bl	8007078 <move_window>
 800749e:	4603      	mov	r3, r0
 80074a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074a2:	7ffb      	ldrb	r3, [r7, #31]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d128      	bne.n	80074fa <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80074bc:	4413      	add	r3, r2
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff fb42 	bl	8006b48 <ld_dword>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80074ca:	4323      	orrs	r3, r4
 80074cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80074dc:	4413      	add	r3, r2
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fb6f 	bl	8006bc4 <st_dword>
			fs->wflag = 1;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2201      	movs	r2, #1
 80074ea:	70da      	strb	r2, [r3, #3]
			break;
 80074ec:	e006      	b.n	80074fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80074ee:	bf00      	nop
 80074f0:	e004      	b.n	80074fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80074f2:	bf00      	nop
 80074f4:	e002      	b.n	80074fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80074f6:	bf00      	nop
 80074f8:	e000      	b.n	80074fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80074fa:	bf00      	nop
		}
	}
	return res;
 80074fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3724      	adds	r7, #36	; 0x24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd90      	pop	{r4, r7, pc}

08007506 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b088      	sub	sp, #32
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d904      	bls.n	800752c <remove_chain+0x26>
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	429a      	cmp	r2, r3
 800752a:	d301      	bcc.n	8007530 <remove_chain+0x2a>
 800752c:	2302      	movs	r3, #2
 800752e:	e04b      	b.n	80075c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00c      	beq.n	8007550 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	69b8      	ldr	r0, [r7, #24]
 800753e:	f7ff fefb 	bl	8007338 <put_fat>
 8007542:	4603      	mov	r3, r0
 8007544:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007546:	7ffb      	ldrb	r3, [r7, #31]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <remove_chain+0x4a>
 800754c:	7ffb      	ldrb	r3, [r7, #31]
 800754e:	e03b      	b.n	80075c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7ff fe4b 	bl	80071ee <get_fat>
 8007558:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d031      	beq.n	80075c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <remove_chain+0x64>
 8007566:	2302      	movs	r3, #2
 8007568:	e02e      	b.n	80075c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007570:	d101      	bne.n	8007576 <remove_chain+0x70>
 8007572:	2301      	movs	r3, #1
 8007574:	e028      	b.n	80075c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007576:	2200      	movs	r2, #0
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	69b8      	ldr	r0, [r7, #24]
 800757c:	f7ff fedc 	bl	8007338 <put_fat>
 8007580:	4603      	mov	r3, r0
 8007582:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007584:	7ffb      	ldrb	r3, [r7, #31]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <remove_chain+0x88>
 800758a:	7ffb      	ldrb	r3, [r7, #31]
 800758c:	e01c      	b.n	80075c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	3b02      	subs	r3, #2
 8007598:	429a      	cmp	r2, r3
 800759a:	d20b      	bcs.n	80075b4 <remove_chain+0xae>
			fs->free_clst++;
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	791b      	ldrb	r3, [r3, #4]
 80075aa:	f043 0301 	orr.w	r3, r3, #1
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d3c6      	bcc.n	8007550 <remove_chain+0x4a>
 80075c2:	e000      	b.n	80075c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80075c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3720      	adds	r7, #32
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10d      	bne.n	8007602 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d004      	beq.n	80075fc <create_chain+0x2c>
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d31b      	bcc.n	8007634 <create_chain+0x64>
 80075fc:	2301      	movs	r3, #1
 80075fe:	61bb      	str	r3, [r7, #24]
 8007600:	e018      	b.n	8007634 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fdf2 	bl	80071ee <get_fat>
 800760a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d801      	bhi.n	8007616 <create_chain+0x46>
 8007612:	2301      	movs	r3, #1
 8007614:	e070      	b.n	80076f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800761c:	d101      	bne.n	8007622 <create_chain+0x52>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	e06a      	b.n	80076f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	429a      	cmp	r2, r3
 800762a:	d201      	bcs.n	8007630 <create_chain+0x60>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	e063      	b.n	80076f8 <create_chain+0x128>
		scl = clst;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	3301      	adds	r3, #1
 800763c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	429a      	cmp	r2, r3
 8007646:	d307      	bcc.n	8007658 <create_chain+0x88>
				ncl = 2;
 8007648:	2302      	movs	r3, #2
 800764a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	429a      	cmp	r2, r3
 8007652:	d901      	bls.n	8007658 <create_chain+0x88>
 8007654:	2300      	movs	r3, #0
 8007656:	e04f      	b.n	80076f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007658:	69f9      	ldr	r1, [r7, #28]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff fdc7 	bl	80071ee <get_fat>
 8007660:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00e      	beq.n	8007686 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d003      	beq.n	8007676 <create_chain+0xa6>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007674:	d101      	bne.n	800767a <create_chain+0xaa>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	e03e      	b.n	80076f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	429a      	cmp	r2, r3
 8007680:	d1da      	bne.n	8007638 <create_chain+0x68>
 8007682:	2300      	movs	r3, #0
 8007684:	e038      	b.n	80076f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007686:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800768c:	69f9      	ldr	r1, [r7, #28]
 800768e:	6938      	ldr	r0, [r7, #16]
 8007690:	f7ff fe52 	bl	8007338 <put_fat>
 8007694:	4603      	mov	r3, r0
 8007696:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <create_chain+0xe2>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d006      	beq.n	80076b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6938      	ldr	r0, [r7, #16]
 80076aa:	f7ff fe45 	bl	8007338 <put_fat>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d116      	bne.n	80076e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	3b02      	subs	r3, #2
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d804      	bhi.n	80076d6 <create_chain+0x106>
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	1e5a      	subs	r2, r3, #1
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	791b      	ldrb	r3, [r3, #4]
 80076da:	f043 0301 	orr.w	r3, r3, #1
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	711a      	strb	r2, [r3, #4]
 80076e4:	e007      	b.n	80076f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d102      	bne.n	80076f2 <create_chain+0x122>
 80076ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076f0:	e000      	b.n	80076f4 <create_chain+0x124>
 80076f2:	2301      	movs	r3, #1
 80076f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80076f6:	69fb      	ldr	r3, [r7, #28]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	3304      	adds	r3, #4
 8007716:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	0a5b      	lsrs	r3, r3, #9
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	8952      	ldrh	r2, [r2, #10]
 8007720:	fbb3 f3f2 	udiv	r3, r3, r2
 8007724:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1d1a      	adds	r2, r3, #4
 800772a:	613a      	str	r2, [r7, #16]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <clmt_clust+0x3a>
 8007736:	2300      	movs	r3, #0
 8007738:	e010      	b.n	800775c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	429a      	cmp	r2, r3
 8007740:	d307      	bcc.n	8007752 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	3304      	adds	r3, #4
 800774e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007750:	e7e9      	b.n	8007726 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007752:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	4413      	add	r3, r2
}
 800775c:	4618      	mov	r0, r3
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800777e:	d204      	bcs.n	800778a <dir_sdi+0x22>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	f003 031f 	and.w	r3, r3, #31
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <dir_sdi+0x26>
		return FR_INT_ERR;
 800778a:	2302      	movs	r3, #2
 800778c:	e063      	b.n	8007856 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d106      	bne.n	80077ae <dir_sdi+0x46>
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d902      	bls.n	80077ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10c      	bne.n	80077ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	095b      	lsrs	r3, r3, #5
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	8912      	ldrh	r2, [r2, #8]
 80077bc:	4293      	cmp	r3, r2
 80077be:	d301      	bcc.n	80077c4 <dir_sdi+0x5c>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e048      	b.n	8007856 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	61da      	str	r2, [r3, #28]
 80077cc:	e029      	b.n	8007822 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	895b      	ldrh	r3, [r3, #10]
 80077d2:	025b      	lsls	r3, r3, #9
 80077d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80077d6:	e019      	b.n	800780c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6979      	ldr	r1, [r7, #20]
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff fd06 	bl	80071ee <get_fat>
 80077e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ea:	d101      	bne.n	80077f0 <dir_sdi+0x88>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e032      	b.n	8007856 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d904      	bls.n	8007800 <dir_sdi+0x98>
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d301      	bcc.n	8007804 <dir_sdi+0x9c>
 8007800:	2302      	movs	r3, #2
 8007802:	e028      	b.n	8007856 <dir_sdi+0xee>
			ofs -= csz;
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	429a      	cmp	r2, r3
 8007812:	d2e1      	bcs.n	80077d8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007814:	6979      	ldr	r1, [r7, #20]
 8007816:	6938      	ldr	r0, [r7, #16]
 8007818:	f7ff fcca 	bl	80071b0 <clust2sect>
 800781c:	4602      	mov	r2, r0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <dir_sdi+0xcc>
 8007830:	2302      	movs	r3, #2
 8007832:	e010      	b.n	8007856 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	69da      	ldr	r2, [r3, #28]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	0a5b      	lsrs	r3, r3, #9
 800783c:	441a      	add	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784e:	441a      	add	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b086      	sub	sp, #24
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	3320      	adds	r3, #32
 8007874:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <dir_next+0x28>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007884:	d301      	bcc.n	800788a <dir_next+0x2c>
 8007886:	2304      	movs	r3, #4
 8007888:	e0aa      	b.n	80079e0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007890:	2b00      	cmp	r3, #0
 8007892:	f040 8098 	bne.w	80079c6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10b      	bne.n	80078c0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	095b      	lsrs	r3, r3, #5
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	8912      	ldrh	r2, [r2, #8]
 80078b0:	4293      	cmp	r3, r2
 80078b2:	f0c0 8088 	bcc.w	80079c6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	61da      	str	r2, [r3, #28]
 80078bc:	2304      	movs	r3, #4
 80078be:	e08f      	b.n	80079e0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	0a5b      	lsrs	r3, r3, #9
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	8952      	ldrh	r2, [r2, #10]
 80078c8:	3a01      	subs	r2, #1
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d17a      	bne.n	80079c6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7ff fc88 	bl	80071ee <get_fat>
 80078de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d801      	bhi.n	80078ea <dir_next+0x8c>
 80078e6:	2302      	movs	r3, #2
 80078e8:	e07a      	b.n	80079e0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078f0:	d101      	bne.n	80078f6 <dir_next+0x98>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e074      	b.n	80079e0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d358      	bcc.n	80079b2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d104      	bne.n	8007910 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	61da      	str	r2, [r3, #28]
 800790c:	2304      	movs	r3, #4
 800790e:	e067      	b.n	80079e0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	4619      	mov	r1, r3
 8007918:	4610      	mov	r0, r2
 800791a:	f7ff fe59 	bl	80075d0 <create_chain>
 800791e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <dir_next+0xcc>
 8007926:	2307      	movs	r3, #7
 8007928:	e05a      	b.n	80079e0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <dir_next+0xd6>
 8007930:	2302      	movs	r3, #2
 8007932:	e055      	b.n	80079e0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800793a:	d101      	bne.n	8007940 <dir_next+0xe2>
 800793c:	2301      	movs	r3, #1
 800793e:	e04f      	b.n	80079e0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f7ff fb55 	bl	8006ff0 <sync_window>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <dir_next+0xf2>
 800794c:	2301      	movs	r3, #1
 800794e:	e047      	b.n	80079e0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3330      	adds	r3, #48	; 0x30
 8007954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007958:	2100      	movs	r1, #0
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff f97f 	bl	8006c5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007960:	2300      	movs	r3, #0
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	6979      	ldr	r1, [r7, #20]
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7ff fc22 	bl	80071b0 <clust2sect>
 800796c:	4602      	mov	r2, r0
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	62da      	str	r2, [r3, #44]	; 0x2c
 8007972:	e012      	b.n	800799a <dir_next+0x13c>
						fs->wflag = 1;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2201      	movs	r2, #1
 8007978:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7ff fb38 	bl	8006ff0 <sync_window>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <dir_next+0x12c>
 8007986:	2301      	movs	r3, #1
 8007988:	e02a      	b.n	80079e0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	3301      	adds	r3, #1
 800798e:	613b      	str	r3, [r7, #16]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	62da      	str	r2, [r3, #44]	; 0x2c
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	895b      	ldrh	r3, [r3, #10]
 800799e:	461a      	mov	r2, r3
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d3e6      	bcc.n	8007974 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad2      	subs	r2, r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80079b8:	6979      	ldr	r1, [r7, #20]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff fbf8 	bl	80071b0 <clust2sect>
 80079c0:	4602      	mov	r2, r0
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d8:	441a      	add	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80079f8:	2100      	movs	r1, #0
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff feb4 	bl	8007768 <dir_sdi>
 8007a00:	4603      	mov	r3, r0
 8007a02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d12b      	bne.n	8007a62 <dir_alloc+0x7a>
		n = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	4619      	mov	r1, r3
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f7ff fb2f 	bl	8007078 <move_window>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d11d      	bne.n	8007a60 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2be5      	cmp	r3, #229	; 0xe5
 8007a2c:	d004      	beq.n	8007a38 <dir_alloc+0x50>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d107      	bne.n	8007a48 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	613b      	str	r3, [r7, #16]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d102      	bne.n	8007a4c <dir_alloc+0x64>
 8007a46:	e00c      	b.n	8007a62 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007a48:	2300      	movs	r3, #0
 8007a4a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff ff05 	bl	800785e <dir_next>
 8007a54:	4603      	mov	r3, r0
 8007a56:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007a58:	7dfb      	ldrb	r3, [r7, #23]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0d7      	beq.n	8007a0e <dir_alloc+0x26>
 8007a5e:	e000      	b.n	8007a62 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007a60:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d101      	bne.n	8007a6c <dir_alloc+0x84>
 8007a68:	2307      	movs	r3, #7
 8007a6a:	75fb      	strb	r3, [r7, #23]
	return res;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	331a      	adds	r3, #26
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff f847 	bl	8006b18 <ld_word>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d109      	bne.n	8007aaa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	3314      	adds	r3, #20
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff f83c 	bl	8006b18 <ld_word>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	041b      	lsls	r3, r3, #16
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	331a      	adds	r3, #26
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	b292      	uxth	r2, r2
 8007ac8:	4611      	mov	r1, r2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff f85f 	bl	8006b8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d109      	bne.n	8007aec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f103 0214 	add.w	r2, r3, #20
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	0c1b      	lsrs	r3, r3, #16
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f7ff f851 	bl	8006b8e <st_word>
	}
}
 8007aec:	bf00      	nop
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007b02:	2100      	movs	r1, #0
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff fe2f 	bl	8007768 <dir_sdi>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <dir_find+0x24>
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	e03e      	b.n	8007b96 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6938      	ldr	r0, [r7, #16]
 8007b20:	f7ff faaa 	bl	8007078 <move_window>
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d12f      	bne.n	8007b8e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d102      	bne.n	8007b42 <dir_find+0x4e>
 8007b3c:	2304      	movs	r3, #4
 8007b3e:	75fb      	strb	r3, [r7, #23]
 8007b40:	e028      	b.n	8007b94 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	330b      	adds	r3, #11
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	330b      	adds	r3, #11
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <dir_find+0x86>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a18      	ldr	r0, [r3, #32]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3324      	adds	r3, #36	; 0x24
 8007b6c:	220b      	movs	r2, #11
 8007b6e:	4619      	mov	r1, r3
 8007b70:	f7ff f88f 	bl	8006c92 <mem_cmp>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00b      	beq.n	8007b92 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff fe6e 	bl	800785e <dir_next>
 8007b82:	4603      	mov	r3, r0
 8007b84:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0c5      	beq.n	8007b18 <dir_find+0x24>
 8007b8c:	e002      	b.n	8007b94 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007b8e:	bf00      	nop
 8007b90:	e000      	b.n	8007b94 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b92:	bf00      	nop

	return res;
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007bac:	2101      	movs	r1, #1
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff ff1a 	bl	80079e8 <dir_alloc>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d11c      	bne.n	8007bf8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	68b8      	ldr	r0, [r7, #8]
 8007bc6:	f7ff fa57 	bl	8007078 <move_window>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d111      	bne.n	8007bf8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff f83e 	bl	8006c5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a18      	ldr	r0, [r3, #32]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3324      	adds	r3, #36	; 0x24
 8007bea:	220b      	movs	r2, #11
 8007bec:	4619      	mov	r1, r3
 8007bee:	f7ff f815 	bl	8006c1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3324      	adds	r3, #36	; 0x24
 8007c18:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007c1a:	220b      	movs	r2, #11
 8007c1c:	2120      	movs	r1, #32
 8007c1e:	68b8      	ldr	r0, [r7, #8]
 8007c20:	f7ff f81d 	bl	8006c5e <mem_set>
	si = i = 0; ni = 8;
 8007c24:	2300      	movs	r3, #0
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	2308      	movs	r3, #8
 8007c2e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	617a      	str	r2, [r7, #20]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	4413      	add	r3, r2
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007c3e:	7ffb      	ldrb	r3, [r7, #31]
 8007c40:	2b20      	cmp	r3, #32
 8007c42:	d94e      	bls.n	8007ce2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007c44:	7ffb      	ldrb	r3, [r7, #31]
 8007c46:	2b2f      	cmp	r3, #47	; 0x2f
 8007c48:	d006      	beq.n	8007c58 <create_name+0x54>
 8007c4a:	7ffb      	ldrb	r3, [r7, #31]
 8007c4c:	2b5c      	cmp	r3, #92	; 0x5c
 8007c4e:	d110      	bne.n	8007c72 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007c50:	e002      	b.n	8007c58 <create_name+0x54>
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	3301      	adds	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b2f      	cmp	r3, #47	; 0x2f
 8007c62:	d0f6      	beq.n	8007c52 <create_name+0x4e>
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	4413      	add	r3, r2
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b5c      	cmp	r3, #92	; 0x5c
 8007c6e:	d0f0      	beq.n	8007c52 <create_name+0x4e>
			break;
 8007c70:	e038      	b.n	8007ce4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007c72:	7ffb      	ldrb	r3, [r7, #31]
 8007c74:	2b2e      	cmp	r3, #46	; 0x2e
 8007c76:	d003      	beq.n	8007c80 <create_name+0x7c>
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d30c      	bcc.n	8007c9a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	2b0b      	cmp	r3, #11
 8007c84:	d002      	beq.n	8007c8c <create_name+0x88>
 8007c86:	7ffb      	ldrb	r3, [r7, #31]
 8007c88:	2b2e      	cmp	r3, #46	; 0x2e
 8007c8a:	d001      	beq.n	8007c90 <create_name+0x8c>
 8007c8c:	2306      	movs	r3, #6
 8007c8e:	e044      	b.n	8007d1a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007c90:	2308      	movs	r3, #8
 8007c92:	613b      	str	r3, [r7, #16]
 8007c94:	230b      	movs	r3, #11
 8007c96:	61bb      	str	r3, [r7, #24]
			continue;
 8007c98:	e022      	b.n	8007ce0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007c9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	da04      	bge.n	8007cac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007ca2:	7ffb      	ldrb	r3, [r7, #31]
 8007ca4:	3b80      	subs	r3, #128	; 0x80
 8007ca6:	4a1f      	ldr	r2, [pc, #124]	; (8007d24 <create_name+0x120>)
 8007ca8:	5cd3      	ldrb	r3, [r2, r3]
 8007caa:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007cac:	7ffb      	ldrb	r3, [r7, #31]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	481d      	ldr	r0, [pc, #116]	; (8007d28 <create_name+0x124>)
 8007cb2:	f7ff f815 	bl	8006ce0 <chk_chr>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <create_name+0xbc>
 8007cbc:	2306      	movs	r3, #6
 8007cbe:	e02c      	b.n	8007d1a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007cc0:	7ffb      	ldrb	r3, [r7, #31]
 8007cc2:	2b60      	cmp	r3, #96	; 0x60
 8007cc4:	d905      	bls.n	8007cd2 <create_name+0xce>
 8007cc6:	7ffb      	ldrb	r3, [r7, #31]
 8007cc8:	2b7a      	cmp	r3, #122	; 0x7a
 8007cca:	d802      	bhi.n	8007cd2 <create_name+0xce>
 8007ccc:	7ffb      	ldrb	r3, [r7, #31]
 8007cce:	3b20      	subs	r3, #32
 8007cd0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	613a      	str	r2, [r7, #16]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	4413      	add	r3, r2
 8007cdc:	7ffa      	ldrb	r2, [r7, #31]
 8007cde:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007ce0:	e7a6      	b.n	8007c30 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007ce2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	441a      	add	r2, r3
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <create_name+0xf4>
 8007cf4:	2306      	movs	r3, #6
 8007cf6:	e010      	b.n	8007d1a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2be5      	cmp	r3, #229	; 0xe5
 8007cfe:	d102      	bne.n	8007d06 <create_name+0x102>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2205      	movs	r2, #5
 8007d04:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007d06:	7ffb      	ldrb	r3, [r7, #31]
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d801      	bhi.n	8007d10 <create_name+0x10c>
 8007d0c:	2204      	movs	r2, #4
 8007d0e:	e000      	b.n	8007d12 <create_name+0x10e>
 8007d10:	2200      	movs	r2, #0
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	330b      	adds	r3, #11
 8007d16:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007d18:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3720      	adds	r7, #32
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	08009334 	.word	0x08009334
 8007d28:	08009054 	.word	0x08009054

08007d2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007d40:	e002      	b.n	8007d48 <follow_path+0x1c>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b2f      	cmp	r3, #47	; 0x2f
 8007d4e:	d0f8      	beq.n	8007d42 <follow_path+0x16>
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b5c      	cmp	r3, #92	; 0x5c
 8007d56:	d0f4      	beq.n	8007d42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b1f      	cmp	r3, #31
 8007d64:	d80a      	bhi.n	8007d7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2280      	movs	r2, #128	; 0x80
 8007d6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007d6e:	2100      	movs	r1, #0
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fcf9 	bl	8007768 <dir_sdi>
 8007d76:	4603      	mov	r3, r0
 8007d78:	75fb      	strb	r3, [r7, #23]
 8007d7a:	e043      	b.n	8007e04 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d7c:	463b      	mov	r3, r7
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff ff3f 	bl	8007c04 <create_name>
 8007d86:	4603      	mov	r3, r0
 8007d88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d134      	bne.n	8007dfa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff feaf 	bl	8007af4 <dir_find>
 8007d96:	4603      	mov	r3, r0
 8007d98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007da0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b04      	cmp	r3, #4
 8007dac:	d127      	bne.n	8007dfe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007dae:	7afb      	ldrb	r3, [r7, #11]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d122      	bne.n	8007dfe <follow_path+0xd2>
 8007db8:	2305      	movs	r3, #5
 8007dba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007dbc:	e01f      	b.n	8007dfe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d11c      	bne.n	8007e02 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	799b      	ldrb	r3, [r3, #6]
 8007dcc:	f003 0310 	and.w	r3, r3, #16
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007dd4:	2305      	movs	r3, #5
 8007dd6:	75fb      	strb	r3, [r7, #23]
 8007dd8:	e014      	b.n	8007e04 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de8:	4413      	add	r3, r2
 8007dea:	4619      	mov	r1, r3
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff fe42 	bl	8007a76 <ld_clust>
 8007df2:	4602      	mov	r2, r0
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007df8:	e7c0      	b.n	8007d7c <follow_path+0x50>
			if (res != FR_OK) break;
 8007dfa:	bf00      	nop
 8007dfc:	e002      	b.n	8007e04 <follow_path+0xd8>
				break;
 8007dfe:	bf00      	nop
 8007e00:	e000      	b.n	8007e04 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e02:	bf00      	nop
			}
		}
	}

	return res;
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b087      	sub	sp, #28
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e1a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d031      	beq.n	8007e88 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	e002      	b.n	8007e32 <get_ldnumber+0x24>
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	617b      	str	r3, [r7, #20]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d903      	bls.n	8007e42 <get_ldnumber+0x34>
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	2b3a      	cmp	r3, #58	; 0x3a
 8007e40:	d1f4      	bne.n	8007e2c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b3a      	cmp	r3, #58	; 0x3a
 8007e48:	d11c      	bne.n	8007e84 <get_ldnumber+0x76>
			tp = *path;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	60fa      	str	r2, [r7, #12]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	3b30      	subs	r3, #48	; 0x30
 8007e5a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b09      	cmp	r3, #9
 8007e60:	d80e      	bhi.n	8007e80 <get_ldnumber+0x72>
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d10a      	bne.n	8007e80 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d107      	bne.n	8007e80 <get_ldnumber+0x72>
					vol = (int)i;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	3301      	adds	r3, #1
 8007e78:	617b      	str	r3, [r7, #20]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	e002      	b.n	8007e8a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007e84:	2300      	movs	r3, #0
 8007e86:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007e88:	693b      	ldr	r3, [r7, #16]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
	...

08007e98 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	70da      	strb	r2, [r3, #3]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7ff f8e0 	bl	8007078 <move_window>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <check_fs+0x2a>
 8007ebe:	2304      	movs	r3, #4
 8007ec0:	e038      	b.n	8007f34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3330      	adds	r3, #48	; 0x30
 8007ec6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fe24 	bl	8006b18 <ld_word>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d001      	beq.n	8007ee0 <check_fs+0x48>
 8007edc:	2303      	movs	r3, #3
 8007ede:	e029      	b.n	8007f34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ee6:	2be9      	cmp	r3, #233	; 0xe9
 8007ee8:	d009      	beq.n	8007efe <check_fs+0x66>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ef0:	2beb      	cmp	r3, #235	; 0xeb
 8007ef2:	d11e      	bne.n	8007f32 <check_fs+0x9a>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007efa:	2b90      	cmp	r3, #144	; 0x90
 8007efc:	d119      	bne.n	8007f32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3330      	adds	r3, #48	; 0x30
 8007f02:	3336      	adds	r3, #54	; 0x36
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fe1f 	bl	8006b48 <ld_dword>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f10:	4a0a      	ldr	r2, [pc, #40]	; (8007f3c <check_fs+0xa4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d101      	bne.n	8007f1a <check_fs+0x82>
 8007f16:	2300      	movs	r3, #0
 8007f18:	e00c      	b.n	8007f34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3330      	adds	r3, #48	; 0x30
 8007f1e:	3352      	adds	r3, #82	; 0x52
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe fe11 	bl	8006b48 <ld_dword>
 8007f26:	4602      	mov	r2, r0
 8007f28:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <check_fs+0xa8>)
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d101      	bne.n	8007f32 <check_fs+0x9a>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e000      	b.n	8007f34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007f32:	2302      	movs	r3, #2
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	00544146 	.word	0x00544146
 8007f40:	33544146 	.word	0x33544146

08007f44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b096      	sub	sp, #88	; 0x58
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7ff ff58 	bl	8007e0e <get_ldnumber>
 8007f5e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da01      	bge.n	8007f6a <find_volume+0x26>
 8007f66:	230b      	movs	r3, #11
 8007f68:	e22e      	b.n	80083c8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f6a:	4aa8      	ldr	r2, [pc, #672]	; (800820c <find_volume+0x2c8>)
 8007f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f72:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <find_volume+0x3a>
 8007f7a:	230c      	movs	r3, #12
 8007f7c:	e224      	b.n	80083c8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f82:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007f84:	79fb      	ldrb	r3, [r7, #7]
 8007f86:	f023 0301 	bic.w	r3, r3, #1
 8007f8a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d01a      	beq.n	8007fca <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	785b      	ldrb	r3, [r3, #1]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe fd1f 	bl	80069dc <disk_status>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007fa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10c      	bne.n	8007fca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d007      	beq.n	8007fc6 <find_volume+0x82>
 8007fb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007fc2:	230a      	movs	r3, #10
 8007fc4:	e200      	b.n	80083c8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e1fe      	b.n	80083c8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	2200      	movs	r2, #0
 8007fce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	785b      	ldrb	r3, [r3, #1]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe fd17 	bl	8006a10 <disk_initialize>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007fe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e1e7      	b.n	80083c8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007ff8:	79fb      	ldrb	r3, [r7, #7]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <find_volume+0xca>
 8007ffe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800800a:	230a      	movs	r3, #10
 800800c:	e1dc      	b.n	80083c8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008012:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008014:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008016:	f7ff ff3f 	bl	8007e98 <check_fs>
 800801a:	4603      	mov	r3, r0
 800801c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008024:	2b02      	cmp	r3, #2
 8008026:	d14b      	bne.n	80080c0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008028:	2300      	movs	r3, #0
 800802a:	643b      	str	r3, [r7, #64]	; 0x40
 800802c:	e01f      	b.n	800806e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800803c:	4413      	add	r3, r2
 800803e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	3304      	adds	r3, #4
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d006      	beq.n	8008058 <find_volume+0x114>
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	3308      	adds	r3, #8
 800804e:	4618      	mov	r0, r3
 8008050:	f7fe fd7a 	bl	8006b48 <ld_dword>
 8008054:	4602      	mov	r2, r0
 8008056:	e000      	b.n	800805a <find_volume+0x116>
 8008058:	2200      	movs	r2, #0
 800805a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008062:	440b      	add	r3, r1
 8008064:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800806a:	3301      	adds	r3, #1
 800806c:	643b      	str	r3, [r7, #64]	; 0x40
 800806e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008070:	2b03      	cmp	r3, #3
 8008072:	d9dc      	bls.n	800802e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008074:	2300      	movs	r3, #0
 8008076:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <find_volume+0x140>
 800807e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008080:	3b01      	subs	r3, #1
 8008082:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800808c:	4413      	add	r3, r2
 800808e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008092:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <find_volume+0x162>
 800809a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800809c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800809e:	f7ff fefb 	bl	8007e98 <check_fs>
 80080a2:	4603      	mov	r3, r0
 80080a4:	e000      	b.n	80080a8 <find_volume+0x164>
 80080a6:	2303      	movs	r3, #3
 80080a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80080ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d905      	bls.n	80080c0 <find_volume+0x17c>
 80080b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b6:	3301      	adds	r3, #1
 80080b8:	643b      	str	r3, [r7, #64]	; 0x40
 80080ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d9e1      	bls.n	8008084 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80080c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d101      	bne.n	80080cc <find_volume+0x188>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e17d      	b.n	80083c8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80080cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d901      	bls.n	80080d8 <find_volume+0x194>
 80080d4:	230d      	movs	r3, #13
 80080d6:	e177      	b.n	80083c8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	3330      	adds	r3, #48	; 0x30
 80080dc:	330b      	adds	r3, #11
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fd1a 	bl	8006b18 <ld_word>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ea:	d001      	beq.n	80080f0 <find_volume+0x1ac>
 80080ec:	230d      	movs	r3, #13
 80080ee:	e16b      	b.n	80083c8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	3330      	adds	r3, #48	; 0x30
 80080f4:	3316      	adds	r3, #22
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fd0e 	bl	8006b18 <ld_word>
 80080fc:	4603      	mov	r3, r0
 80080fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <find_volume+0x1d0>
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	3330      	adds	r3, #48	; 0x30
 800810a:	3324      	adds	r3, #36	; 0x24
 800810c:	4618      	mov	r0, r3
 800810e:	f7fe fd1b 	bl	8006b48 <ld_dword>
 8008112:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008118:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	789b      	ldrb	r3, [r3, #2]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d005      	beq.n	8008138 <find_volume+0x1f4>
 800812c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812e:	789b      	ldrb	r3, [r3, #2]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d001      	beq.n	8008138 <find_volume+0x1f4>
 8008134:	230d      	movs	r3, #13
 8008136:	e147      	b.n	80083c8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	789b      	ldrb	r3, [r3, #2]
 800813c:	461a      	mov	r2, r3
 800813e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008140:	fb02 f303 	mul.w	r3, r2, r3
 8008144:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814c:	b29a      	uxth	r2, r3
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	895b      	ldrh	r3, [r3, #10]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d008      	beq.n	800816c <find_volume+0x228>
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	895b      	ldrh	r3, [r3, #10]
 800815e:	461a      	mov	r2, r3
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	895b      	ldrh	r3, [r3, #10]
 8008164:	3b01      	subs	r3, #1
 8008166:	4013      	ands	r3, r2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <find_volume+0x22c>
 800816c:	230d      	movs	r3, #13
 800816e:	e12b      	b.n	80083c8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	3330      	adds	r3, #48	; 0x30
 8008174:	3311      	adds	r3, #17
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fcce 	bl	8006b18 <ld_word>
 800817c:	4603      	mov	r3, r0
 800817e:	461a      	mov	r2, r3
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	891b      	ldrh	r3, [r3, #8]
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	b29b      	uxth	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <find_volume+0x252>
 8008192:	230d      	movs	r3, #13
 8008194:	e118      	b.n	80083c8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	3330      	adds	r3, #48	; 0x30
 800819a:	3313      	adds	r3, #19
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe fcbb 	bl	8006b18 <ld_word>
 80081a2:	4603      	mov	r3, r0
 80081a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80081a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d106      	bne.n	80081ba <find_volume+0x276>
 80081ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ae:	3330      	adds	r3, #48	; 0x30
 80081b0:	3320      	adds	r3, #32
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fcc8 	bl	8006b48 <ld_dword>
 80081b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	3330      	adds	r3, #48	; 0x30
 80081be:	330e      	adds	r3, #14
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fca9 	bl	8006b18 <ld_word>
 80081c6:	4603      	mov	r3, r0
 80081c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80081ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <find_volume+0x290>
 80081d0:	230d      	movs	r3, #13
 80081d2:	e0f9      	b.n	80083c8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80081d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80081d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d8:	4413      	add	r3, r2
 80081da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081dc:	8912      	ldrh	r2, [r2, #8]
 80081de:	0912      	lsrs	r2, r2, #4
 80081e0:	b292      	uxth	r2, r2
 80081e2:	4413      	add	r3, r2
 80081e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80081e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d201      	bcs.n	80081f2 <find_volume+0x2ae>
 80081ee:	230d      	movs	r3, #13
 80081f0:	e0ea      	b.n	80083c8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80081f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081fa:	8952      	ldrh	r2, [r2, #10]
 80081fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	2b00      	cmp	r3, #0
 8008206:	d103      	bne.n	8008210 <find_volume+0x2cc>
 8008208:	230d      	movs	r3, #13
 800820a:	e0dd      	b.n	80083c8 <find_volume+0x484>
 800820c:	2000004c 	.word	0x2000004c
		fmt = FS_FAT32;
 8008210:	2303      	movs	r3, #3
 8008212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800821c:	4293      	cmp	r3, r2
 800821e:	d802      	bhi.n	8008226 <find_volume+0x2e2>
 8008220:	2302      	movs	r3, #2
 8008222:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	f640 72f5 	movw	r2, #4085	; 0xff5
 800822c:	4293      	cmp	r3, r2
 800822e:	d802      	bhi.n	8008236 <find_volume+0x2f2>
 8008230:	2301      	movs	r3, #1
 8008232:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	1c9a      	adds	r2, r3, #2
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008242:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008244:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008248:	441a      	add	r2, r3
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800824e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	441a      	add	r2, r3
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008258:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800825c:	2b03      	cmp	r3, #3
 800825e:	d11e      	bne.n	800829e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	3330      	adds	r3, #48	; 0x30
 8008264:	332a      	adds	r3, #42	; 0x2a
 8008266:	4618      	mov	r0, r3
 8008268:	f7fe fc56 	bl	8006b18 <ld_word>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <find_volume+0x332>
 8008272:	230d      	movs	r3, #13
 8008274:	e0a8      	b.n	80083c8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	891b      	ldrh	r3, [r3, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <find_volume+0x33e>
 800827e:	230d      	movs	r3, #13
 8008280:	e0a2      	b.n	80083c8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008284:	3330      	adds	r3, #48	; 0x30
 8008286:	332c      	adds	r3, #44	; 0x2c
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fc5d 	bl	8006b48 <ld_dword>
 800828e:	4602      	mov	r2, r0
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	647b      	str	r3, [r7, #68]	; 0x44
 800829c:	e01f      	b.n	80082de <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800829e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a0:	891b      	ldrh	r3, [r3, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <find_volume+0x366>
 80082a6:	230d      	movs	r3, #13
 80082a8:	e08e      	b.n	80083c8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	6a1a      	ldr	r2, [r3, #32]
 80082ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b0:	441a      	add	r2, r3
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80082b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d103      	bne.n	80082c6 <find_volume+0x382>
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	e00a      	b.n	80082dc <find_volume+0x398>
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	695a      	ldr	r2, [r3, #20]
 80082ca:	4613      	mov	r3, r2
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	4413      	add	r3, r2
 80082d0:	085a      	lsrs	r2, r3, #1
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80082dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	699a      	ldr	r2, [r3, #24]
 80082e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80082e8:	0a5b      	lsrs	r3, r3, #9
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d201      	bcs.n	80082f2 <find_volume+0x3ae>
 80082ee:	230d      	movs	r3, #13
 80082f0:	e06a      	b.n	80083c8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082f8:	611a      	str	r2, [r3, #16]
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	691a      	ldr	r2, [r3, #16]
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008304:	2280      	movs	r2, #128	; 0x80
 8008306:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800830c:	2b03      	cmp	r3, #3
 800830e:	d149      	bne.n	80083a4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	3330      	adds	r3, #48	; 0x30
 8008314:	3330      	adds	r3, #48	; 0x30
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fbfe 	bl	8006b18 <ld_word>
 800831c:	4603      	mov	r3, r0
 800831e:	2b01      	cmp	r3, #1
 8008320:	d140      	bne.n	80083a4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008324:	3301      	adds	r3, #1
 8008326:	4619      	mov	r1, r3
 8008328:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800832a:	f7fe fea5 	bl	8007078 <move_window>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d137      	bne.n	80083a4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	2200      	movs	r2, #0
 8008338:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	3330      	adds	r3, #48	; 0x30
 800833e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fbe8 	bl	8006b18 <ld_word>
 8008348:	4603      	mov	r3, r0
 800834a:	461a      	mov	r2, r3
 800834c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008350:	429a      	cmp	r2, r3
 8008352:	d127      	bne.n	80083a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	3330      	adds	r3, #48	; 0x30
 8008358:	4618      	mov	r0, r3
 800835a:	f7fe fbf5 	bl	8006b48 <ld_dword>
 800835e:	4602      	mov	r2, r0
 8008360:	4b1b      	ldr	r3, [pc, #108]	; (80083d0 <find_volume+0x48c>)
 8008362:	429a      	cmp	r2, r3
 8008364:	d11e      	bne.n	80083a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	3330      	adds	r3, #48	; 0x30
 800836a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe fbea 	bl	8006b48 <ld_dword>
 8008374:	4602      	mov	r2, r0
 8008376:	4b17      	ldr	r3, [pc, #92]	; (80083d4 <find_volume+0x490>)
 8008378:	429a      	cmp	r2, r3
 800837a:	d113      	bne.n	80083a4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	3330      	adds	r3, #48	; 0x30
 8008380:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008384:	4618      	mov	r0, r3
 8008386:	f7fe fbdf 	bl	8006b48 <ld_dword>
 800838a:	4602      	mov	r2, r0
 800838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	3330      	adds	r3, #48	; 0x30
 8008394:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fbd5 	bl	8006b48 <ld_dword>
 800839e:	4602      	mov	r2, r0
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80083aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80083ac:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <find_volume+0x494>)
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	4b08      	ldr	r3, [pc, #32]	; (80083d8 <find_volume+0x494>)
 80083b6:	801a      	strh	r2, [r3, #0]
 80083b8:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <find_volume+0x494>)
 80083ba:	881a      	ldrh	r2, [r3, #0]
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80083c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083c2:	f7fe fdf1 	bl	8006fa8 <clear_lock>
#endif
	return FR_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3758      	adds	r7, #88	; 0x58
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	41615252 	.word	0x41615252
 80083d4:	61417272 	.word	0x61417272
 80083d8:	20000050 	.word	0x20000050

080083dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80083e6:	2309      	movs	r3, #9
 80083e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01c      	beq.n	800842a <validate+0x4e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d018      	beq.n	800842a <validate+0x4e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d013      	beq.n	800842a <validate+0x4e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	889a      	ldrh	r2, [r3, #4]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	88db      	ldrh	r3, [r3, #6]
 800840c:	429a      	cmp	r2, r3
 800840e:	d10c      	bne.n	800842a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe fae0 	bl	80069dc <disk_status>
 800841c:	4603      	mov	r3, r0
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <validate+0x4e>
			res = FR_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d102      	bne.n	8008436 <validate+0x5a>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	e000      	b.n	8008438 <validate+0x5c>
 8008436:	2300      	movs	r3, #0
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	6013      	str	r3, [r2, #0]
	return res;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
	...

08008448 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800845a:	f107 0310 	add.w	r3, r7, #16
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff fcd5 	bl	8007e0e <get_ldnumber>
 8008464:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	2b00      	cmp	r3, #0
 800846a:	da01      	bge.n	8008470 <f_mount+0x28>
 800846c:	230b      	movs	r3, #11
 800846e:	e02b      	b.n	80084c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008470:	4a17      	ldr	r2, [pc, #92]	; (80084d0 <f_mount+0x88>)
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008478:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d005      	beq.n	800848c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008480:	69b8      	ldr	r0, [r7, #24]
 8008482:	f7fe fd91 	bl	8006fa8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	2200      	movs	r2, #0
 800848a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	490d      	ldr	r1, [pc, #52]	; (80084d0 <f_mount+0x88>)
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <f_mount+0x66>
 80084a8:	79fb      	ldrb	r3, [r7, #7]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d001      	beq.n	80084b2 <f_mount+0x6a>
 80084ae:	2300      	movs	r3, #0
 80084b0:	e00a      	b.n	80084c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80084b2:	f107 010c 	add.w	r1, r7, #12
 80084b6:	f107 0308 	add.w	r3, r7, #8
 80084ba:	2200      	movs	r2, #0
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff fd41 	bl	8007f44 <find_volume>
 80084c2:	4603      	mov	r3, r0
 80084c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3720      	adds	r7, #32
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	2000004c 	.word	0x2000004c

080084d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b098      	sub	sp, #96	; 0x60
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <f_open+0x18>
 80084e8:	2309      	movs	r3, #9
 80084ea:	e1ad      	b.n	8008848 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80084ec:	79fb      	ldrb	r3, [r7, #7]
 80084ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80084f4:	79fa      	ldrb	r2, [r7, #7]
 80084f6:	f107 0110 	add.w	r1, r7, #16
 80084fa:	f107 0308 	add.w	r3, r7, #8
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff fd20 	bl	8007f44 <find_volume>
 8008504:	4603      	mov	r3, r0
 8008506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800850a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800850e:	2b00      	cmp	r3, #0
 8008510:	f040 8191 	bne.w	8008836 <f_open+0x362>
		dj.obj.fs = fs;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	f107 0314 	add.w	r3, r7, #20
 800851e:	4611      	mov	r1, r2
 8008520:	4618      	mov	r0, r3
 8008522:	f7ff fc03 	bl	8007d2c <follow_path>
 8008526:	4603      	mov	r3, r0
 8008528:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800852c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008530:	2b00      	cmp	r3, #0
 8008532:	d11a      	bne.n	800856a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008534:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008538:	b25b      	sxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	da03      	bge.n	8008546 <f_open+0x72>
				res = FR_INVALID_NAME;
 800853e:	2306      	movs	r3, #6
 8008540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008544:	e011      	b.n	800856a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	f023 0301 	bic.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	bf14      	ite	ne
 8008550:	2301      	movne	r3, #1
 8008552:	2300      	moveq	r3, #0
 8008554:	b2db      	uxtb	r3, r3
 8008556:	461a      	mov	r2, r3
 8008558:	f107 0314 	add.w	r3, r7, #20
 800855c:	4611      	mov	r1, r2
 800855e:	4618      	mov	r0, r3
 8008560:	f7fe fbda 	bl	8006d18 <chk_lock>
 8008564:	4603      	mov	r3, r0
 8008566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800856a:	79fb      	ldrb	r3, [r7, #7]
 800856c:	f003 031c 	and.w	r3, r3, #28
 8008570:	2b00      	cmp	r3, #0
 8008572:	d07f      	beq.n	8008674 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008578:	2b00      	cmp	r3, #0
 800857a:	d017      	beq.n	80085ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800857c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008580:	2b04      	cmp	r3, #4
 8008582:	d10e      	bne.n	80085a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008584:	f7fe fc24 	bl	8006dd0 <enq_lock>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d006      	beq.n	800859c <f_open+0xc8>
 800858e:	f107 0314 	add.w	r3, r7, #20
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff fb03 	bl	8007b9e <dir_register>
 8008598:	4603      	mov	r3, r0
 800859a:	e000      	b.n	800859e <f_open+0xca>
 800859c:	2312      	movs	r3, #18
 800859e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	f043 0308 	orr.w	r3, r3, #8
 80085a8:	71fb      	strb	r3, [r7, #7]
 80085aa:	e010      	b.n	80085ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80085ac:	7ebb      	ldrb	r3, [r7, #26]
 80085ae:	f003 0311 	and.w	r3, r3, #17
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <f_open+0xea>
					res = FR_DENIED;
 80085b6:	2307      	movs	r3, #7
 80085b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80085bc:	e007      	b.n	80085ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <f_open+0xfa>
 80085c8:	2308      	movs	r3, #8
 80085ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80085ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d168      	bne.n	80086a8 <f_open+0x1d4>
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d063      	beq.n	80086a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80085e0:	f7fe f99e 	bl	8006920 <get_fattime>
 80085e4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80085e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e8:	330e      	adds	r3, #14
 80085ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fe fae9 	bl	8006bc4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80085f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f4:	3316      	adds	r3, #22
 80085f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fe fae3 	bl	8006bc4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80085fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008600:	330b      	adds	r3, #11
 8008602:	2220      	movs	r2, #32
 8008604:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800860a:	4611      	mov	r1, r2
 800860c:	4618      	mov	r0, r3
 800860e:	f7ff fa32 	bl	8007a76 <ld_clust>
 8008612:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008618:	2200      	movs	r2, #0
 800861a:	4618      	mov	r0, r3
 800861c:	f7ff fa4a 	bl	8007ab4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008622:	331c      	adds	r3, #28
 8008624:	2100      	movs	r1, #0
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe facc 	bl	8006bc4 <st_dword>
					fs->wflag = 1;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	2201      	movs	r2, #1
 8008630:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008634:	2b00      	cmp	r3, #0
 8008636:	d037      	beq.n	80086a8 <f_open+0x1d4>
						dw = fs->winsect;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800863e:	f107 0314 	add.w	r3, r7, #20
 8008642:	2200      	movs	r2, #0
 8008644:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe ff5d 	bl	8007506 <remove_chain>
 800864c:	4603      	mov	r3, r0
 800864e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008656:	2b00      	cmp	r3, #0
 8008658:	d126      	bne.n	80086a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe fd0a 	bl	8007078 <move_window>
 8008664:	4603      	mov	r3, r0
 8008666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800866e:	3a01      	subs	r2, #1
 8008670:	60da      	str	r2, [r3, #12]
 8008672:	e019      	b.n	80086a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008678:	2b00      	cmp	r3, #0
 800867a:	d115      	bne.n	80086a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800867c:	7ebb      	ldrb	r3, [r7, #26]
 800867e:	f003 0310 	and.w	r3, r3, #16
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008686:	2304      	movs	r3, #4
 8008688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800868c:	e00c      	b.n	80086a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d007      	beq.n	80086a8 <f_open+0x1d4>
 8008698:	7ebb      	ldrb	r3, [r7, #26]
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <f_open+0x1d4>
						res = FR_DENIED;
 80086a2:	2307      	movs	r3, #7
 80086a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80086a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d128      	bne.n	8008702 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	f003 0308 	and.w	r3, r3, #8
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80086ba:	79fb      	ldrb	r3, [r7, #7]
 80086bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80086ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	f023 0301 	bic.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bf14      	ite	ne
 80086da:	2301      	movne	r3, #1
 80086dc:	2300      	moveq	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	f107 0314 	add.w	r3, r7, #20
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe fb93 	bl	8006e14 <inc_lock>
 80086ee:	4602      	mov	r2, r0
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <f_open+0x22e>
 80086fc:	2302      	movs	r3, #2
 80086fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 8095 	bne.w	8008836 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff f9af 	bl	8007a76 <ld_clust>
 8008718:	4602      	mov	r2, r0
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800871e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008720:	331c      	adds	r3, #28
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fa10 	bl	8006b48 <ld_dword>
 8008728:	4602      	mov	r2, r0
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	88da      	ldrh	r2, [r3, #6]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	79fa      	ldrb	r2, [r7, #7]
 8008746:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3330      	adds	r3, #48	; 0x30
 800875e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f7fe fa7a 	bl	8006c5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	f003 0320 	and.w	r3, r3, #32
 8008770:	2b00      	cmp	r3, #0
 8008772:	d060      	beq.n	8008836 <f_open+0x362>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d05c      	beq.n	8008836 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	895b      	ldrh	r3, [r3, #10]
 8008788:	025b      	lsls	r3, r3, #9
 800878a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	657b      	str	r3, [r7, #84]	; 0x54
 8008798:	e016      	b.n	80087c8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fd25 	bl	80071ee <get_fat>
 80087a4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80087a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d802      	bhi.n	80087b2 <f_open+0x2de>
 80087ac:	2302      	movs	r3, #2
 80087ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80087b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087b8:	d102      	bne.n	80087c0 <f_open+0x2ec>
 80087ba:	2301      	movs	r3, #1
 80087bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	657b      	str	r3, [r7, #84]	; 0x54
 80087c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d103      	bne.n	80087d8 <f_open+0x304>
 80087d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d8e0      	bhi.n	800879a <f_open+0x2c6>
				}
				fp->clust = clst;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80087de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d127      	bne.n	8008836 <f_open+0x362>
 80087e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d022      	beq.n	8008836 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe fcdb 	bl	80071b0 <clust2sect>
 80087fa:	6478      	str	r0, [r7, #68]	; 0x44
 80087fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d103      	bne.n	800880a <f_open+0x336>
						res = FR_INT_ERR;
 8008802:	2302      	movs	r3, #2
 8008804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008808:	e015      	b.n	8008836 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800880a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800880c:	0a5a      	lsrs	r2, r3, #9
 800880e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008810:	441a      	add	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	7858      	ldrb	r0, [r3, #1]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6a1a      	ldr	r2, [r3, #32]
 8008824:	2301      	movs	r3, #1
 8008826:	f7fe f919 	bl	8006a5c <disk_read>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <f_open+0x362>
 8008830:	2301      	movs	r3, #1
 8008832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <f_open+0x370>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008844:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008848:	4618      	mov	r0, r3
 800884a:	3760      	adds	r7, #96	; 0x60
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08e      	sub	sp, #56	; 0x38
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2200      	movs	r2, #0
 8008866:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f107 0214 	add.w	r2, r7, #20
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fdb3 	bl	80083dc <validate>
 8008876:	4603      	mov	r3, r0
 8008878:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800887c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008880:	2b00      	cmp	r3, #0
 8008882:	d107      	bne.n	8008894 <f_read+0x44>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	7d5b      	ldrb	r3, [r3, #21]
 8008888:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800888c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <f_read+0x4a>
 8008894:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008898:	e115      	b.n	8008ac6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	7d1b      	ldrb	r3, [r3, #20]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <f_read+0x5a>
 80088a6:	2307      	movs	r3, #7
 80088a8:	e10d      	b.n	8008ac6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	68da      	ldr	r2, [r3, #12]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	f240 80fe 	bls.w	8008abc <f_read+0x26c>
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80088c4:	e0fa      	b.n	8008abc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f040 80c6 	bne.w	8008a60 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	0a5b      	lsrs	r3, r3, #9
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	8952      	ldrh	r2, [r2, #10]
 80088de:	3a01      	subs	r2, #1
 80088e0:	4013      	ands	r3, r2
 80088e2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d12f      	bne.n	800894a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d103      	bne.n	80088fa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	633b      	str	r3, [r7, #48]	; 0x30
 80088f8:	e013      	b.n	8008922 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	4619      	mov	r1, r3
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f7fe fef9 	bl	8007700 <clmt_clust>
 800890e:	6338      	str	r0, [r7, #48]	; 0x30
 8008910:	e007      	b.n	8008922 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	4619      	mov	r1, r3
 800891a:	4610      	mov	r0, r2
 800891c:	f7fe fc67 	bl	80071ee <get_fat>
 8008920:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	2b01      	cmp	r3, #1
 8008926:	d804      	bhi.n	8008932 <f_read+0xe2>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2202      	movs	r2, #2
 800892c:	755a      	strb	r2, [r3, #21]
 800892e:	2302      	movs	r3, #2
 8008930:	e0c9      	b.n	8008ac6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008938:	d104      	bne.n	8008944 <f_read+0xf4>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	755a      	strb	r2, [r3, #21]
 8008940:	2301      	movs	r3, #1
 8008942:	e0c0      	b.n	8008ac6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008948:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f7fe fc2c 	bl	80071b0 <clust2sect>
 8008958:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d104      	bne.n	800896a <f_read+0x11a>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2202      	movs	r2, #2
 8008964:	755a      	strb	r2, [r3, #21]
 8008966:	2302      	movs	r3, #2
 8008968:	e0ad      	b.n	8008ac6 <f_read+0x276>
			sect += csect;
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	4413      	add	r3, r2
 8008970:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	0a5b      	lsrs	r3, r3, #9
 8008976:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	2b00      	cmp	r3, #0
 800897c:	d039      	beq.n	80089f2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	4413      	add	r3, r2
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	8952      	ldrh	r2, [r2, #10]
 8008988:	4293      	cmp	r3, r2
 800898a:	d905      	bls.n	8008998 <f_read+0x148>
					cc = fs->csize - csect;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	895b      	ldrh	r3, [r3, #10]
 8008990:	461a      	mov	r2, r3
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	7858      	ldrb	r0, [r3, #1]
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089a2:	f7fe f85b 	bl	8006a5c <disk_read>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <f_read+0x166>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2201      	movs	r2, #1
 80089b0:	755a      	strb	r2, [r3, #21]
 80089b2:	2301      	movs	r3, #1
 80089b4:	e087      	b.n	8008ac6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	7d1b      	ldrb	r3, [r3, #20]
 80089ba:	b25b      	sxtb	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	da14      	bge.n	80089ea <f_read+0x19a>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6a1a      	ldr	r2, [r3, #32]
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d90d      	bls.n	80089ea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6a1a      	ldr	r2, [r3, #32]
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	025b      	lsls	r3, r3, #9
 80089d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089da:	18d0      	adds	r0, r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3330      	adds	r3, #48	; 0x30
 80089e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089e4:	4619      	mov	r1, r3
 80089e6:	f7fe f919 	bl	8006c1c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ec:	025b      	lsls	r3, r3, #9
 80089ee:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80089f0:	e050      	b.n	8008a94 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d02e      	beq.n	8008a5a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	7d1b      	ldrb	r3, [r3, #20]
 8008a00:	b25b      	sxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	da18      	bge.n	8008a38 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	7858      	ldrb	r0, [r3, #1]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6a1a      	ldr	r2, [r3, #32]
 8008a14:	2301      	movs	r3, #1
 8008a16:	f7fe f841 	bl	8006a9c <disk_write>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d004      	beq.n	8008a2a <f_read+0x1da>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	755a      	strb	r2, [r3, #21]
 8008a26:	2301      	movs	r3, #1
 8008a28:	e04d      	b.n	8008ac6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	7d1b      	ldrb	r3, [r3, #20]
 8008a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	7858      	ldrb	r0, [r3, #1]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a42:	2301      	movs	r3, #1
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	f7fe f809 	bl	8006a5c <disk_read>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d004      	beq.n	8008a5a <f_read+0x20a>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2201      	movs	r2, #1
 8008a54:	755a      	strb	r2, [r3, #21]
 8008a56:	2301      	movs	r3, #1
 8008a58:	e035      	b.n	8008ac6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d901      	bls.n	8008a7a <f_read+0x22a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a88:	4413      	add	r3, r2
 8008a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a90:	f7fe f8c4 	bl	8006c1c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a98:	4413      	add	r3, r2
 8008a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	699a      	ldr	r2, [r3, #24]
 8008aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa2:	441a      	add	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	619a      	str	r2, [r3, #24]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aae:	441a      	add	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f47f af01 	bne.w	80088c6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3738      	adds	r7, #56	; 0x38
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b08c      	sub	sp, #48	; 0x30
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	60f8      	str	r0, [r7, #12]
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	607a      	str	r2, [r7, #4]
 8008ada:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f107 0210 	add.w	r2, r7, #16
 8008aec:	4611      	mov	r1, r2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff fc74 	bl	80083dc <validate>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008afa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d107      	bne.n	8008b12 <f_write+0x44>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	7d5b      	ldrb	r3, [r3, #21]
 8008b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <f_write+0x4a>
 8008b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b16:	e14b      	b.n	8008db0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	7d1b      	ldrb	r3, [r3, #20]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <f_write+0x5a>
 8008b24:	2307      	movs	r3, #7
 8008b26:	e143      	b.n	8008db0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	441a      	add	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	f080 812d 	bcs.w	8008d94 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008b42:	e127      	b.n	8008d94 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f040 80e3 	bne.w	8008d18 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	0a5b      	lsrs	r3, r3, #9
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	8952      	ldrh	r2, [r2, #10]
 8008b5c:	3a01      	subs	r2, #1
 8008b5e:	4013      	ands	r3, r2
 8008b60:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d143      	bne.n	8008bf0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10c      	bne.n	8008b8a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d11a      	bne.n	8008bb2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fe fd25 	bl	80075d0 <create_chain>
 8008b86:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b88:	e013      	b.n	8008bb2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d007      	beq.n	8008ba2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	4619      	mov	r1, r3
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7fe fdb1 	bl	8007700 <clmt_clust>
 8008b9e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008ba0:	e007      	b.n	8008bb2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f7fe fd10 	bl	80075d0 <create_chain>
 8008bb0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 80f2 	beq.w	8008d9e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d104      	bne.n	8008bca <f_write+0xfc>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	755a      	strb	r2, [r3, #21]
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e0f2      	b.n	8008db0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bd0:	d104      	bne.n	8008bdc <f_write+0x10e>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	755a      	strb	r2, [r3, #21]
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e0e9      	b.n	8008db0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008be0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d102      	bne.n	8008bf0 <f_write+0x122>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	7d1b      	ldrb	r3, [r3, #20]
 8008bf4:	b25b      	sxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	da18      	bge.n	8008c2c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	7858      	ldrb	r0, [r3, #1]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6a1a      	ldr	r2, [r3, #32]
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f7fd ff47 	bl	8006a9c <disk_write>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d004      	beq.n	8008c1e <f_write+0x150>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	755a      	strb	r2, [r3, #21]
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e0c8      	b.n	8008db0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	7d1b      	ldrb	r3, [r3, #20]
 8008c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	4619      	mov	r1, r3
 8008c34:	4610      	mov	r0, r2
 8008c36:	f7fe fabb 	bl	80071b0 <clust2sect>
 8008c3a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d104      	bne.n	8008c4c <f_write+0x17e>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2202      	movs	r2, #2
 8008c46:	755a      	strb	r2, [r3, #21]
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e0b1      	b.n	8008db0 <f_write+0x2e2>
			sect += csect;
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	4413      	add	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	0a5b      	lsrs	r3, r3, #9
 8008c58:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d03c      	beq.n	8008cda <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	4413      	add	r3, r2
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	8952      	ldrh	r2, [r2, #10]
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d905      	bls.n	8008c7a <f_write+0x1ac>
					cc = fs->csize - csect;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	895b      	ldrh	r3, [r3, #10]
 8008c72:	461a      	mov	r2, r3
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	7858      	ldrb	r0, [r3, #1]
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	69f9      	ldr	r1, [r7, #28]
 8008c84:	f7fd ff0a 	bl	8006a9c <disk_write>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d004      	beq.n	8008c98 <f_write+0x1ca>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2201      	movs	r2, #1
 8008c92:	755a      	strb	r2, [r3, #21]
 8008c94:	2301      	movs	r3, #1
 8008c96:	e08b      	b.n	8008db0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6a1a      	ldr	r2, [r3, #32]
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	6a3a      	ldr	r2, [r7, #32]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d915      	bls.n	8008cd2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6a1a      	ldr	r2, [r3, #32]
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	025b      	lsls	r3, r3, #9
 8008cb6:	69fa      	ldr	r2, [r7, #28]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	f7fd ffac 	bl	8006c1c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	7d1b      	ldrb	r3, [r3, #20]
 8008cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	025b      	lsls	r3, r3, #9
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008cd8:	e03f      	b.n	8008d5a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d016      	beq.n	8008d12 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	699a      	ldr	r2, [r3, #24]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d210      	bcs.n	8008d12 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	7858      	ldrb	r0, [r3, #1]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	f7fd fead 	bl	8006a5c <disk_read>
 8008d02:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	755a      	strb	r2, [r3, #21]
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e04e      	b.n	8008db0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d20:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008d24:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d901      	bls.n	8008d32 <f_write+0x264>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d40:	4413      	add	r3, r2
 8008d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d44:	69f9      	ldr	r1, [r7, #28]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fd ff68 	bl	8006c1c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	7d1b      	ldrb	r3, [r3, #20]
 8008d50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008d5a:	69fa      	ldr	r2, [r7, #28]
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	4413      	add	r3, r2
 8008d60:	61fb      	str	r3, [r7, #28]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	699a      	ldr	r2, [r3, #24]
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	441a      	add	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	619a      	str	r2, [r3, #24]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	68da      	ldr	r2, [r3, #12]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	bf38      	it	cc
 8008d7a:	461a      	movcc	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	60da      	str	r2, [r3, #12]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	441a      	add	r2, r3
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f47f aed4 	bne.w	8008b44 <f_write+0x76>
 8008d9c:	e000      	b.n	8008da0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d9e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	7d1b      	ldrb	r3, [r3, #20]
 8008da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3730      	adds	r7, #48	; 0x30
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f107 0208 	add.w	r2, r7, #8
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff fb07 	bl	80083dc <validate>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d168      	bne.n	8008eaa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	7d1b      	ldrb	r3, [r3, #20]
 8008ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d062      	beq.n	8008eaa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	7d1b      	ldrb	r3, [r3, #20]
 8008de8:	b25b      	sxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	da15      	bge.n	8008e1a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	7858      	ldrb	r0, [r3, #1]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a1a      	ldr	r2, [r3, #32]
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f7fd fe4d 	bl	8006a9c <disk_write>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <f_sync+0x54>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e04f      	b.n	8008eac <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	7d1b      	ldrb	r3, [r3, #20]
 8008e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008e1a:	f7fd fd81 	bl	8006920 <get_fattime>
 8008e1e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e26:	4619      	mov	r1, r3
 8008e28:	4610      	mov	r0, r2
 8008e2a:	f7fe f925 	bl	8007078 <move_window>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d138      	bne.n	8008eaa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	330b      	adds	r3, #11
 8008e42:	781a      	ldrb	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	330b      	adds	r3, #11
 8008e48:	f042 0220 	orr.w	r2, r2, #32
 8008e4c:	b2d2      	uxtb	r2, r2
 8008e4e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	68f9      	ldr	r1, [r7, #12]
 8008e5c:	f7fe fe2a 	bl	8007ab4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f103 021c 	add.w	r2, r3, #28
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	f7fd fea9 	bl	8006bc4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3316      	adds	r3, #22
 8008e76:	6939      	ldr	r1, [r7, #16]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fd fea3 	bl	8006bc4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3312      	adds	r3, #18
 8008e82:	2100      	movs	r1, #0
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fd fe82 	bl	8006b8e <st_word>
					fs->wflag = 1;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe f91e 	bl	80070d4 <sync_fs>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	7d1b      	ldrb	r3, [r3, #20]
 8008ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff ff7b 	bl	8008db8 <f_sync>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d118      	bne.n	8008efe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f107 0208 	add.w	r2, r7, #8
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff fa81 	bl	80083dc <validate>
 8008eda:	4603      	mov	r3, r0
 8008edc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10c      	bne.n	8008efe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fe f821 	bl	8006f30 <dec_lock>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008f16:	2301      	movs	r3, #1
 8008f18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008f1e:	4b1f      	ldr	r3, [pc, #124]	; (8008f9c <FATFS_LinkDriverEx+0x94>)
 8008f20:	7a5b      	ldrb	r3, [r3, #9]
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d131      	bne.n	8008f8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008f28:	4b1c      	ldr	r3, [pc, #112]	; (8008f9c <FATFS_LinkDriverEx+0x94>)
 8008f2a:	7a5b      	ldrb	r3, [r3, #9]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	461a      	mov	r2, r3
 8008f30:	4b1a      	ldr	r3, [pc, #104]	; (8008f9c <FATFS_LinkDriverEx+0x94>)
 8008f32:	2100      	movs	r1, #0
 8008f34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008f36:	4b19      	ldr	r3, [pc, #100]	; (8008f9c <FATFS_LinkDriverEx+0x94>)
 8008f38:	7a5b      	ldrb	r3, [r3, #9]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	4a17      	ldr	r2, [pc, #92]	; (8008f9c <FATFS_LinkDriverEx+0x94>)
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008f46:	4b15      	ldr	r3, [pc, #84]	; (8008f9c <FATFS_LinkDriverEx+0x94>)
 8008f48:	7a5b      	ldrb	r3, [r3, #9]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <FATFS_LinkDriverEx+0x94>)
 8008f50:	4413      	add	r3, r2
 8008f52:	79fa      	ldrb	r2, [r7, #7]
 8008f54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008f56:	4b11      	ldr	r3, [pc, #68]	; (8008f9c <FATFS_LinkDriverEx+0x94>)
 8008f58:	7a5b      	ldrb	r3, [r3, #9]
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	b2d1      	uxtb	r1, r2
 8008f60:	4a0e      	ldr	r2, [pc, #56]	; (8008f9c <FATFS_LinkDriverEx+0x94>)
 8008f62:	7251      	strb	r1, [r2, #9]
 8008f64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008f66:	7dbb      	ldrb	r3, [r7, #22]
 8008f68:	3330      	adds	r3, #48	; 0x30
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	3301      	adds	r3, #1
 8008f74:	223a      	movs	r2, #58	; 0x3a
 8008f76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	3302      	adds	r3, #2
 8008f7c:	222f      	movs	r2, #47	; 0x2f
 8008f7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	3303      	adds	r3, #3
 8008f84:	2200      	movs	r2, #0
 8008f86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	20000074 	.word	0x20000074

08008fa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008faa:	2200      	movs	r2, #0
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7ff ffaa 	bl	8008f08 <FATFS_LinkDriverEx>
 8008fb4:	4603      	mov	r3, r0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <__libc_init_array>:
 8008fc0:	b570      	push	{r4, r5, r6, lr}
 8008fc2:	4e0d      	ldr	r6, [pc, #52]	; (8008ff8 <__libc_init_array+0x38>)
 8008fc4:	4c0d      	ldr	r4, [pc, #52]	; (8008ffc <__libc_init_array+0x3c>)
 8008fc6:	1ba4      	subs	r4, r4, r6
 8008fc8:	10a4      	asrs	r4, r4, #2
 8008fca:	2500      	movs	r5, #0
 8008fcc:	42a5      	cmp	r5, r4
 8008fce:	d109      	bne.n	8008fe4 <__libc_init_array+0x24>
 8008fd0:	4e0b      	ldr	r6, [pc, #44]	; (8009000 <__libc_init_array+0x40>)
 8008fd2:	4c0c      	ldr	r4, [pc, #48]	; (8009004 <__libc_init_array+0x44>)
 8008fd4:	f000 f820 	bl	8009018 <_init>
 8008fd8:	1ba4      	subs	r4, r4, r6
 8008fda:	10a4      	asrs	r4, r4, #2
 8008fdc:	2500      	movs	r5, #0
 8008fde:	42a5      	cmp	r5, r4
 8008fe0:	d105      	bne.n	8008fee <__libc_init_array+0x2e>
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fe8:	4798      	blx	r3
 8008fea:	3501      	adds	r5, #1
 8008fec:	e7ee      	b.n	8008fcc <__libc_init_array+0xc>
 8008fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ff2:	4798      	blx	r3
 8008ff4:	3501      	adds	r5, #1
 8008ff6:	e7f2      	b.n	8008fde <__libc_init_array+0x1e>
 8008ff8:	080093bc 	.word	0x080093bc
 8008ffc:	080093bc 	.word	0x080093bc
 8009000:	080093bc 	.word	0x080093bc
 8009004:	080093c0 	.word	0x080093c0

08009008 <memset>:
 8009008:	4402      	add	r2, r0
 800900a:	4603      	mov	r3, r0
 800900c:	4293      	cmp	r3, r2
 800900e:	d100      	bne.n	8009012 <memset+0xa>
 8009010:	4770      	bx	lr
 8009012:	f803 1b01 	strb.w	r1, [r3], #1
 8009016:	e7f9      	b.n	800900c <memset+0x4>

08009018 <_init>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	bf00      	nop
 800901c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901e:	bc08      	pop	{r3}
 8009020:	469e      	mov	lr, r3
 8009022:	4770      	bx	lr

08009024 <_fini>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	bf00      	nop
 8009028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902a:	bc08      	pop	{r3}
 800902c:	469e      	mov	lr, r3
 800902e:	4770      	bx	lr
