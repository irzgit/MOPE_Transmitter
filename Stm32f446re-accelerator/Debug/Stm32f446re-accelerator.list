
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009484  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b4  080097b4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080097b4  080097b4  000197b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097bc  080097bc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097c0  080097c0  000197c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080097c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001474  20000088  0800984c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014fc  0800984c  000214fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b828  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000345a  00000000  00000000  0003b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001408  00000000  00000000  0003ed40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  00040148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002499b  00000000  00000000  000413c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000111cb  00000000  00000000  00065d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4180  00000000  00000000  00076f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b0ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d0  00000000  00000000  0014b12c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800963c 	.word	0x0800963c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800963c 	.word	0x0800963c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 80005b4:	21ff      	movs	r1, #255	; 0xff
 80005b6:	2012      	movs	r0, #18
 80005b8:	f001 fd5e 	bl	8002078 <SPIWrite>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 80005c4:	2101      	movs	r1, #1
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 fd56 	bl	8002078 <SPIWrite>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 80005d4:	2100      	movs	r1, #0
 80005d6:	2001      	movs	r0, #1
 80005d8:	f001 fd4e 	bl	8002078 <SPIWrite>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	2001      	movs	r0, #1
 80005e8:	f001 fd46 	bl	8002078 <SPIWrite>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <Rf96_FreqChoose+0x28>)
 8000604:	4413      	add	r3, r2
 8000606:	2203      	movs	r2, #3
 8000608:	4619      	mov	r1, r3
 800060a:	2006      	movs	r0, #6
 800060c:	f001 fd58 	bl	80020c0 <BurstWrite>

}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	080096c8 	.word	0x080096c8

0800061c <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <Rf96_OutPower+0x28>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	4619      	mov	r1, r3
 800062e:	2009      	movs	r0, #9
 8000630:	f001 fd22 	bl	8002078 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000634:	2187      	movs	r1, #135	; 0x87
 8000636:	205a      	movs	r0, #90	; 0x5a
 8000638:	f001 fd1e 	bl	8002078 <SPIWrite>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	080096d4 	.word	0x080096d4

08000648 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <Rf96_OCP+0x20>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	4619      	mov	r1, r3
 800065a:	200b      	movs	r0, #11
 800065c:	f001 fd0c 	bl	8002078 <SPIWrite>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	080096d8 	.word	0x080096d8

0800066c <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <Rf96_LNA+0x20>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	4619      	mov	r1, r3
 800067e:	200c      	movs	r0, #12
 8000680:	f001 fcfa 	bl	8002078 <SPIWrite>

}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	080096dc 	.word	0x080096dc

08000690 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	460b      	mov	r3, r1
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	4613      	mov	r3, r2
 80006a0:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x8C);
	SPIWrite(LR_RegModemConfig1,0x8E);
 80006a2:	218e      	movs	r1, #142	; 0x8e
 80006a4:	201d      	movs	r0, #29
 80006a6:	f001 fce7 	bl	8002078 <SPIWrite>
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	460b      	mov	r3, r1
 80006be:	71bb      	strb	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0x77);
 80006c4:	2177      	movs	r1, #119	; 0x77
 80006c6:	201e      	movs	r0, #30
 80006c8:	f001 fcd6 	bl	8002078 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	201f      	movs	r0, #31
 80006d4:	f001 fcd0 	bl	8002078 <SPIWrite>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	2020      	movs	r0, #32
 80006f6:	f001 fcbf 	bl	8002078 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	2021      	movs	r0, #33	; 0x21
 8000702:	f001 fcb9 	bl	8002078 <SPIWrite>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Rf96_PinOut_Di0_Di1>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1(uint8_t Di0_value, uint8_t Di1_value)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	460a      	mov	r2, r1
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	4613      	mov	r3, r2
 800071c:	71bb      	strb	r3, [r7, #6]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	b2da      	uxtb	r2, r3
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4413      	add	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	2040      	movs	r0, #64	; 0x40
 8000732:	f001 fca1 	bl	8002078 <SPIWrite>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 8000742:	21f7      	movs	r1, #247	; 0xf7
 8000744:	2011      	movs	r0, #17
 8000746:	f001 fc97 	bl	8002078 <SPIWrite>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}

0800074e <Rf96_PayloadLength>:
{
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
}
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4619      	mov	r1, r3
 800075c:	2022      	movs	r0, #34	; 0x22
 800075e:	f001 fc8b 	bl	8002078 <SPIWrite>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	4619      	mov	r1, r3
 8000778:	200e      	movs	r0, #14
 800077a:	f001 fc7d 	bl	8002078 <SPIWrite>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <Rf96_FIFO_point>:
{
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
}
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4619      	mov	r1, r3
 8000794:	200d      	movs	r0, #13
 8000796:	f001 fc6f 	bl	8002078 <SPIWrite>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Rf96_TX_mode>:
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
}
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 80007a6:	2183      	movs	r1, #131	; 0x83
 80007a8:	2001      	movs	r0, #1
 80007aa:	f001 fc65 	bl	8002078 <SPIWrite>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	461a      	mov	r2, r3
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 fc7b 	bl	80020c0 <BurstWrite>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <Rf96_Lora_init>:
	packet_size = SPIRead(LR_RegRxNbBytes);
	SPIBurstRead(LR_RegFifo, str, packet_size);
}
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007d6:	f7ff fefb 	bl	80005d0 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007da:	f7ff ff01 	bl	80005e0 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff06 	bl	80005f0 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff19 	bl	800061c <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff2c 	bl	8000648 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ff3b 	bl	800066c <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2104      	movs	r1, #4
 80007fa:	2007      	movs	r0, #7
 80007fc:	f7ff ff48 	bl	8000690 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x3FF);
 8000800:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000804:	2101      	movs	r1, #1
 8000806:	2006      	movs	r0, #6
 8000808:	f7ff ff53 	bl	80006b2 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 800080c:	2008      	movs	r0, #8
 800080e:	f7ff ff67 	bl	80006e0 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 8000812:	f7ff fed5 	bl	80005c0 <Rf96_Standby>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}

0800081a <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  // Настройка вывода Di0 на прерывание по отправке
	Rf96_PinOut_Di0_Di1(1,0);
 800081e:	2100      	movs	r1, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff ff74 	bl	800070e <Rf96_PinOut_Di0_Di1>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000826:	f7ff fec3 	bl	80005b0 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800082a:	f7ff ff88 	bl	800073e <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(27);
 800082e:	201b      	movs	r0, #27
 8000830:	f7ff ff8d 	bl	800074e <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000834:	2080      	movs	r0, #128	; 0x80
 8000836:	f7ff ff98 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	f7ff ffa3 	bl	8000786 <Rf96_FIFO_point>

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <Rf96_LoRaTxPacket>:

}

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ffac 	bl	80007b2 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 800085a:	f7ff ffa2 	bl	80007a2 <Rf96_TX_mode>
			break;
		}
	}
*/

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <PacketToRadio>:
uint8_t accelSelect[3][5] = {{0x68, 0x04, 0x32, 0x04, 0x3a},{0x68, 0x04, 0x64, 0x04, 0x6c},{0x68, 0x04, 0x96, 0x04, 0x9e}};

uint32_t countT=0;

void PacketToRadio(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0

	for(uint8_t j=0;j<3;j++)
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e01c      	b.n	80008ae <PacketToRadio+0x46>
	{
		for(uint8_t i=0;i<9;i++)
 8000874:	2300      	movs	r3, #0
 8000876:	71bb      	strb	r3, [r7, #6]
 8000878:	e013      	b.n	80008a2 <PacketToRadio+0x3a>
		   RadioBuff[i+j*9]=packageCut[j][i];
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	79b8      	ldrb	r0, [r7, #6]
 800087e:	79bc      	ldrb	r4, [r7, #6]
 8000880:	79f9      	ldrb	r1, [r7, #7]
 8000882:	460b      	mov	r3, r1
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	440b      	add	r3, r1
 8000888:	18e1      	adds	r1, r4, r3
 800088a:	4c12      	ldr	r4, [pc, #72]	; (80008d4 <PacketToRadio+0x6c>)
 800088c:	4613      	mov	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	4413      	add	r3, r2
 8000892:	4423      	add	r3, r4
 8000894:	4403      	add	r3, r0
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <PacketToRadio+0x70>)
 800089a:	545a      	strb	r2, [r3, r1]
		for(uint8_t i=0;i<9;i++)
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	3301      	adds	r3, #1
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	d9e8      	bls.n	800087a <PacketToRadio+0x12>
	for(uint8_t j=0;j<3;j++)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	3301      	adds	r3, #1
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d9df      	bls.n	8000874 <PacketToRadio+0xc>
	}
	//RadioBuff[27]=Crc8(RadioBuff,27);
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 80008b4:	2080      	movs	r0, #128	; 0x80
 80008b6:	f7ff ff58 	bl	800076a <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	f7ff ff63 	bl	8000786 <Rf96_FIFO_point>

	  Rf96_LoRaClearIrq();
 80008c0:	f7ff fe76 	bl	80005b0 <Rf96_LoRaClearIrq>

	  Rf96_LoRaTxPacket((char*)RadioBuff,27);
 80008c4:	211b      	movs	r1, #27
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <PacketToRadio+0x70>)
 80008c8:	f7ff ffbc 	bl	8000844 <Rf96_LoRaTxPacket>

}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	200000d0 	.word	0x200000d0
 80008d8:	200009d0 	.word	0x200009d0

080008dc <transmit>:

void transmit(uint8_t* str, uint8_t* str2)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af08      	add	r7, sp, #32
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]

	for(uint8_t i=0;i<NumofPacket;i++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	f000 bc50 	b.w	800118e <transmit+0x8b2>
	{


		        // первый акселерометр
			    // Ось Х
				xIntSumFirst = (str[1+8+i*36] & 0x0F) * 10 + (str[1+9+i*36] >> 4); // целочисленная сумма X
 80008ee:	7bfa      	ldrb	r2, [r7, #15]
 80008f0:	4613      	mov	r3, r2
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	4413      	add	r3, r2
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	3309      	adds	r3, #9
 80008fa:	461a      	mov	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f003 020f 	and.w	r2, r3, #15
 8000906:	4613      	mov	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4619      	mov	r1, r3
 8000910:	7bfa      	ldrb	r2, [r7, #15]
 8000912:	4613      	mov	r3, r2
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	4413      	add	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	330a      	adds	r3, #10
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	091b      	lsrs	r3, r3, #4
 8000926:	b2db      	uxtb	r3, r3
 8000928:	440b      	add	r3, r1
 800092a:	4ab6      	ldr	r2, [pc, #728]	; (8000c04 <transmit+0x328>)
 800092c:	6013      	str	r3, [r2, #0]
				x5First = str[1+9+i*36] & 0x0F; //перевод правого бита 5го байта
 800092e:	7bfa      	ldrb	r2, [r7, #15]
 8000930:	4613      	mov	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	4413      	add	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	330a      	adds	r3, #10
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	4ab0      	ldr	r2, [pc, #704]	; (8000c08 <transmit+0x32c>)
 8000948:	6013      	str	r3, [r2, #0]
				x60First = str[1+10+i*36] >> 4; //перевод левого бита 6го байта
 800094a:	7bfa      	ldrb	r2, [r7, #15]
 800094c:	4613      	mov	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	330b      	adds	r3, #11
 8000956:	461a      	mov	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	091b      	lsrs	r3, r3, #4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	4ba9      	ldr	r3, [pc, #676]	; (8000c0c <transmit+0x330>)
 8000966:	601a      	str	r2, [r3, #0]
				x65First = str[1+10+i*36] & 0x0F; //перевод правого бита 6го байта
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	4613      	mov	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	330b      	adds	r3, #11
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f003 030f 	and.w	r3, r3, #15
 8000980:	4aa3      	ldr	r2, [pc, #652]	; (8000c10 <transmit+0x334>)
 8000982:	6013      	str	r3, [r2, #0]
				sprintf(xvalFirst, "+%02d.%d%d;",xIntSumFirst, x5First, x60First);
 8000984:	4b9f      	ldr	r3, [pc, #636]	; (8000c04 <transmit+0x328>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b9f      	ldr	r3, [pc, #636]	; (8000c08 <transmit+0x32c>)
 800098a:	6819      	ldr	r1, [r3, #0]
 800098c:	4b9f      	ldr	r3, [pc, #636]	; (8000c0c <transmit+0x330>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	460b      	mov	r3, r1
 8000994:	499f      	ldr	r1, [pc, #636]	; (8000c14 <transmit+0x338>)
 8000996:	48a0      	ldr	r0, [pc, #640]	; (8000c18 <transmit+0x33c>)
 8000998:	f008 fa4a 	bl	8008e30 <siprintf>
				if((str[1+8+i*36] >> 4) == 0x01)
 800099c:	7bfa      	ldrb	r2, [r7, #15]
 800099e:	4613      	mov	r3, r2
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	3309      	adds	r3, #9
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d102      	bne.n	80009be <transmit+0xe2>
					xvalFirst[0] = '-';
 80009b8:	4b97      	ldr	r3, [pc, #604]	; (8000c18 <transmit+0x33c>)
 80009ba:	222d      	movs	r2, #45	; 0x2d
 80009bc:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumFirst = (str[1+11+i*36] & 0x0F) * 10 + (str[1+12+i*36] >> 4);	// целочисленная сумма Y
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	4613      	mov	r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	330c      	adds	r3, #12
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	f003 020f 	and.w	r2, r3, #15
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4619      	mov	r1, r3
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	4613      	mov	r3, r2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	330d      	adds	r3, #13
 80009ec:	461a      	mov	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	091b      	lsrs	r3, r3, #4
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	440b      	add	r3, r1
 80009fa:	4a88      	ldr	r2, [pc, #544]	; (8000c1c <transmit+0x340>)
 80009fc:	6013      	str	r3, [r2, #0]
				y8First = str[1+12+i*36] & 0x0F; //перевод правого бита 8го байта
 80009fe:	7bfa      	ldrb	r2, [r7, #15]
 8000a00:	4613      	mov	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	330d      	adds	r3, #13
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	4a82      	ldr	r2, [pc, #520]	; (8000c20 <transmit+0x344>)
 8000a18:	6013      	str	r3, [r2, #0]
				y90First = str[1+13+i*36] >> 4; //перевод левого бита 9го байта
 8000a1a:	7bfa      	ldrb	r2, [r7, #15]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	4413      	add	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	330e      	adds	r3, #14
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b7b      	ldr	r3, [pc, #492]	; (8000c24 <transmit+0x348>)
 8000a36:	601a      	str	r2, [r3, #0]
				y95First = str[1+13+i*36] & 0x0F; //перевод правого бита 9го байта
 8000a38:	7bfa      	ldrb	r2, [r7, #15]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	4413      	add	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	330e      	adds	r3, #14
 8000a44:	461a      	mov	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	f003 030f 	and.w	r3, r3, #15
 8000a50:	4a75      	ldr	r2, [pc, #468]	; (8000c28 <transmit+0x34c>)
 8000a52:	6013      	str	r3, [r2, #0]
				sprintf(yvalFirst, "+%02d.%d%d;", yIntSumFirst, y8First, y90First);
 8000a54:	4b71      	ldr	r3, [pc, #452]	; (8000c1c <transmit+0x340>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b71      	ldr	r3, [pc, #452]	; (8000c20 <transmit+0x344>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b71      	ldr	r3, [pc, #452]	; (8000c24 <transmit+0x348>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	460b      	mov	r3, r1
 8000a64:	496b      	ldr	r1, [pc, #428]	; (8000c14 <transmit+0x338>)
 8000a66:	4871      	ldr	r0, [pc, #452]	; (8000c2c <transmit+0x350>)
 8000a68:	f008 f9e2 	bl	8008e30 <siprintf>
				if((str[1+11+i*36] >> 4) == 0x01)
 8000a6c:	7bfa      	ldrb	r2, [r7, #15]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	330c      	adds	r3, #12
 8000a78:	461a      	mov	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	091b      	lsrs	r3, r3, #4
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d102      	bne.n	8000a8e <transmit+0x1b2>
					yvalFirst[0] = '-';
 8000a88:	4b68      	ldr	r3, [pc, #416]	; (8000c2c <transmit+0x350>)
 8000a8a:	222d      	movs	r2, #45	; 0x2d
 8000a8c:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumFirst = (str[1+14+i*36] & 0x0F) * 10 + (str[1+15+i*36] >> 4); //целочисленная сумма Z
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	4613      	mov	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	4413      	add	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	330f      	adds	r3, #15
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f003 020f 	and.w	r2, r3, #15
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	7bfa      	ldrb	r2, [r7, #15]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	4413      	add	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	3310      	adds	r3, #16
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	440b      	add	r3, r1
 8000aca:	4a59      	ldr	r2, [pc, #356]	; (8000c30 <transmit+0x354>)
 8000acc:	6013      	str	r3, [r2, #0]
				z11First = str[1+15+i*36] & 0x0F; //перевод правого бита 11го байта
 8000ace:	7bfa      	ldrb	r2, [r7, #15]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	3310      	adds	r3, #16
 8000ada:	461a      	mov	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	4a53      	ldr	r2, [pc, #332]	; (8000c34 <transmit+0x358>)
 8000ae8:	6013      	str	r3, [r2, #0]
				z120First = str[1+16+i*36] >> 4; //перевод левого бита 12го байта
 8000aea:	7bfa      	ldrb	r2, [r7, #15]
 8000aec:	4613      	mov	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	3311      	adds	r3, #17
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <transmit+0x35c>)
 8000b06:	601a      	str	r2, [r3, #0]
				z125First = str[1+16+i*36] & 0x0F; //перевод правого бита 12го байта
 8000b08:	7bfa      	ldrb	r2, [r7, #15]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4413      	add	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	3311      	adds	r3, #17
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	4a46      	ldr	r2, [pc, #280]	; (8000c3c <transmit+0x360>)
 8000b22:	6013      	str	r3, [r2, #0]
				sprintf(zvalFirst, "+%02d.%d%d;", zIntSumFirst, z11First, z120First);
 8000b24:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <transmit+0x354>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <transmit+0x358>)
 8000b2a:	6819      	ldr	r1, [r3, #0]
 8000b2c:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <transmit+0x35c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	460b      	mov	r3, r1
 8000b34:	4937      	ldr	r1, [pc, #220]	; (8000c14 <transmit+0x338>)
 8000b36:	4842      	ldr	r0, [pc, #264]	; (8000c40 <transmit+0x364>)
 8000b38:	f008 f97a 	bl	8008e30 <siprintf>
				if((str[1+14+i*36] >> 4) == 0x01)
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	330f      	adds	r3, #15
 8000b48:	461a      	mov	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d102      	bne.n	8000b5e <transmit+0x282>
					zvalFirst[0] = '-';
 8000b58:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <transmit+0x364>)
 8000b5a:	222d      	movs	r2, #45	; 0x2d
 8000b5c:	701a      	strb	r2, [r3, #0]

				// второй акселерометр
				// Ось Х
				xIntSumSecond = (str[1+17+i*36] & 0x0F) * 10 + (str[1+18+i*36] >> 4); // целочисленная сумма X
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	4613      	mov	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	3312      	adds	r3, #18
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f003 020f 	and.w	r2, r3, #15
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	4613      	mov	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	3313      	adds	r3, #19
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	440b      	add	r3, r1
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <transmit+0x368>)
 8000b9c:	6013      	str	r3, [r2, #0]
				x5Second = str[1+18+i*36] & 0x0F; //перевод правого бита 5го байта
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	3313      	adds	r3, #19
 8000baa:	461a      	mov	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <transmit+0x36c>)
 8000bb8:	6013      	str	r3, [r2, #0]
				x60Second = str[1+19+i*36] >> 4; //перевод левого бита 6го байта
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	3314      	adds	r3, #20
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <transmit+0x370>)
 8000bd6:	601a      	str	r2, [r3, #0]
				x65Second = str[1+19+i*36] & 0x0F; //перевод правого бита 6го байта
 8000bd8:	7bfa      	ldrb	r2, [r7, #15]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	3314      	adds	r3, #20
 8000be4:	461a      	mov	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	f003 030f 	and.w	r3, r3, #15
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <transmit+0x374>)
 8000bf2:	6013      	str	r3, [r2, #0]
				sprintf(xvalSecond, "+%02d.%d%d;",xIntSumSecond, x5Second, x60Second);
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <transmit+0x368>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <transmit+0x36c>)
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <transmit+0x370>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	e028      	b.n	8000c54 <transmit+0x378>
 8000c02:	bf00      	nop
 8000c04:	20000e08 	.word	0x20000e08
 8000c08:	2000096c 	.word	0x2000096c
 8000c0c:	20000bf8 	.word	0x20000bf8
 8000c10:	20000978 	.word	0x20000978
 8000c14:	08009654 	.word	0x08009654
 8000c18:	200001bc 	.word	0x200001bc
 8000c1c:	20000950 	.word	0x20000950
 8000c20:	20000954 	.word	0x20000954
 8000c24:	2000057c 	.word	0x2000057c
 8000c28:	20000840 	.word	0x20000840
 8000c2c:	20000580 	.word	0x20000580
 8000c30:	200009c0 	.word	0x200009c0
 8000c34:	20000790 	.word	0x20000790
 8000c38:	2000078c 	.word	0x2000078c
 8000c3c:	20000974 	.word	0x20000974
 8000c40:	200009c8 	.word	0x200009c8
 8000c44:	2000094c 	.word	0x2000094c
 8000c48:	20000bfc 	.word	0x20000bfc
 8000c4c:	20000588 	.word	0x20000588
 8000c50:	20000948 	.word	0x20000948
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	460b      	mov	r3, r1
 8000c58:	49b9      	ldr	r1, [pc, #740]	; (8000f40 <transmit+0x664>)
 8000c5a:	48ba      	ldr	r0, [pc, #744]	; (8000f44 <transmit+0x668>)
 8000c5c:	f008 f8e8 	bl	8008e30 <siprintf>
				if((str[1+17+i*36] >> 4) == 0x01)
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	3312      	adds	r3, #18
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	091b      	lsrs	r3, r3, #4
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d102      	bne.n	8000c82 <transmit+0x3a6>
					xvalSecond[0] = '-';
 8000c7c:	4bb1      	ldr	r3, [pc, #708]	; (8000f44 <transmit+0x668>)
 8000c7e:	222d      	movs	r2, #45	; 0x2d
 8000c80:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumSecond = (str[1+20+i*36] & 0x0F) * 10 + (str[1+21+i*36] >> 4);	// целочисленная сумма Y
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	3315      	adds	r3, #21
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	f003 020f 	and.w	r2, r3, #15
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	7bfa      	ldrb	r2, [r7, #15]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	4413      	add	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	3316      	adds	r3, #22
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	4aa2      	ldr	r2, [pc, #648]	; (8000f48 <transmit+0x66c>)
 8000cc0:	6013      	str	r3, [r2, #0]
				y8Second = str[1+21+i*36] & 0x0F; //перевод правого бита 8го байта
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4413      	add	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	3316      	adds	r3, #22
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	4a9c      	ldr	r2, [pc, #624]	; (8000f4c <transmit+0x670>)
 8000cdc:	6013      	str	r3, [r2, #0]
				y90Second = str[1+22+i*36] >> 4; //перевод левого бита 9го байта
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	3317      	adds	r3, #23
 8000cea:	461a      	mov	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b95      	ldr	r3, [pc, #596]	; (8000f50 <transmit+0x674>)
 8000cfa:	601a      	str	r2, [r3, #0]
				y95Second = str[1+22+i*36] & 0x0F; //перевод правого бита 9го байта
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4413      	add	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	3317      	adds	r3, #23
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	4a8f      	ldr	r2, [pc, #572]	; (8000f54 <transmit+0x678>)
 8000d16:	6013      	str	r3, [r2, #0]
				sprintf(yvalSecond, "+%02d.%d%d;", yIntSumSecond, y8Second, y90Second);
 8000d18:	4b8b      	ldr	r3, [pc, #556]	; (8000f48 <transmit+0x66c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b8b      	ldr	r3, [pc, #556]	; (8000f4c <transmit+0x670>)
 8000d1e:	6819      	ldr	r1, [r3, #0]
 8000d20:	4b8b      	ldr	r3, [pc, #556]	; (8000f50 <transmit+0x674>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	460b      	mov	r3, r1
 8000d28:	4985      	ldr	r1, [pc, #532]	; (8000f40 <transmit+0x664>)
 8000d2a:	488b      	ldr	r0, [pc, #556]	; (8000f58 <transmit+0x67c>)
 8000d2c:	f008 f880 	bl	8008e30 <siprintf>
				if((str[1+20+i*36] >> 4) == 0x01)
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	4613      	mov	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	3315      	adds	r3, #21
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d102      	bne.n	8000d52 <transmit+0x476>
					yvalSecond[0] = '-';
 8000d4c:	4b82      	ldr	r3, [pc, #520]	; (8000f58 <transmit+0x67c>)
 8000d4e:	222d      	movs	r2, #45	; 0x2d
 8000d50:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumSecond = (str[1+23+i*36] & 0x0F) * 10 + (str[1+24+i*36] >> 4); //целочисленная сумма Z
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	4613      	mov	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	4413      	add	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	3318      	adds	r3, #24
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f003 020f 	and.w	r2, r3, #15
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4619      	mov	r1, r3
 8000d74:	7bfa      	ldrb	r2, [r7, #15]
 8000d76:	4613      	mov	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	3319      	adds	r3, #25
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	091b      	lsrs	r3, r3, #4
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	4a73      	ldr	r2, [pc, #460]	; (8000f5c <transmit+0x680>)
 8000d90:	6013      	str	r3, [r2, #0]
				z11Second = str[1+24+i*36] & 0x0F; //перевод правого бита 11го байта
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	4613      	mov	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	3319      	adds	r3, #25
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	4a6d      	ldr	r2, [pc, #436]	; (8000f60 <transmit+0x684>)
 8000dac:	6013      	str	r3, [r2, #0]
				z120Second = str[1+25+i*36] >> 4; //перевод левого бита 12го байта
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	4613      	mov	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	4413      	add	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	331a      	adds	r3, #26
 8000dba:	461a      	mov	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b66      	ldr	r3, [pc, #408]	; (8000f64 <transmit+0x688>)
 8000dca:	601a      	str	r2, [r3, #0]
				z125Second = str[1+25+i*36] & 0x0F; //перевод правого бита 12го байта
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	331a      	adds	r3, #26
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	4a60      	ldr	r2, [pc, #384]	; (8000f68 <transmit+0x68c>)
 8000de6:	6013      	str	r3, [r2, #0]
				sprintf(zvalSecond, "+%02d.%d%d;", zIntSumSecond, z11Second, z120Second);
 8000de8:	4b5c      	ldr	r3, [pc, #368]	; (8000f5c <transmit+0x680>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b5c      	ldr	r3, [pc, #368]	; (8000f60 <transmit+0x684>)
 8000dee:	6819      	ldr	r1, [r3, #0]
 8000df0:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <transmit+0x688>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	460b      	mov	r3, r1
 8000df8:	4951      	ldr	r1, [pc, #324]	; (8000f40 <transmit+0x664>)
 8000dfa:	485c      	ldr	r0, [pc, #368]	; (8000f6c <transmit+0x690>)
 8000dfc:	f008 f818 	bl	8008e30 <siprintf>
				if((str[1+23+i*36] >> 4) == 0x01)
 8000e00:	7bfa      	ldrb	r2, [r7, #15]
 8000e02:	4613      	mov	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	3318      	adds	r3, #24
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d102      	bne.n	8000e22 <transmit+0x546>
					zvalSecond[0] = '-';
 8000e1c:	4b53      	ldr	r3, [pc, #332]	; (8000f6c <transmit+0x690>)
 8000e1e:	222d      	movs	r2, #45	; 0x2d
 8000e20:	701a      	strb	r2, [r3, #0]

				// третий акселерометр
				// Ось Х
				xIntSumThird = (str[1+26+i*36] & 0x0F) * 10 + (str[1+27+i*36] >> 4); // целочисленная сумма X
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	4613      	mov	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4413      	add	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	331b      	adds	r3, #27
 8000e2e:	461a      	mov	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	f003 020f 	and.w	r2, r3, #15
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	4613      	mov	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	331c      	adds	r3, #28
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	440b      	add	r3, r1
 8000e5e:	4a44      	ldr	r2, [pc, #272]	; (8000f70 <transmit+0x694>)
 8000e60:	6013      	str	r3, [r2, #0]
				x5Third = str[1+27+i*36] & 0x0F; //перевод правого бита 5го байта
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	331c      	adds	r3, #28
 8000e6e:	461a      	mov	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	4a3e      	ldr	r2, [pc, #248]	; (8000f74 <transmit+0x698>)
 8000e7c:	6013      	str	r3, [r2, #0]
				x60Third = str[1+28+i*36] >> 4; //перевод левого бита 6го байта
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	4613      	mov	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	331d      	adds	r3, #29
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <transmit+0x69c>)
 8000e9a:	601a      	str	r2, [r3, #0]
				x65Third = str[1+28+i*36] & 0x0F; //перевод правого бита 6го байта
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	331d      	adds	r3, #29
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	f003 030f 	and.w	r3, r3, #15
 8000eb4:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <transmit+0x6a0>)
 8000eb6:	6013      	str	r3, [r2, #0]
				sprintf(xvalThird, "+%02d.%d%d;",xIntSumThird, x5Third, x60Third);
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <transmit+0x694>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <transmit+0x698>)
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <transmit+0x69c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	491d      	ldr	r1, [pc, #116]	; (8000f40 <transmit+0x664>)
 8000eca:	482d      	ldr	r0, [pc, #180]	; (8000f80 <transmit+0x6a4>)
 8000ecc:	f007 ffb0 	bl	8008e30 <siprintf>
				if((str[1+26+i*36] >> 4) == 0x01)
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	331b      	adds	r3, #27
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <transmit+0x616>
					xvalThird[0] = '-';
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <transmit+0x6a4>)
 8000eee:	222d      	movs	r2, #45	; 0x2d
 8000ef0:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumThird = (str[1+29+i*36] & 0x0F) * 10 + (str[1+30+i*36] >> 4);	// целочисленная сумма Y
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	331e      	adds	r3, #30
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	f003 020f 	and.w	r2, r3, #15
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4619      	mov	r1, r3
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	4613      	mov	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	331f      	adds	r3, #31
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <transmit+0x6a8>)
 8000f30:	6013      	str	r3, [r2, #0]
				y8Third = str[1+30+i*36] & 0x0F; //перевод правого бита 8го байта
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	e024      	b.n	8000f88 <transmit+0x6ac>
 8000f3e:	bf00      	nop
 8000f40:	08009654 	.word	0x08009654
 8000f44:	20000140 	.word	0x20000140
 8000f48:	200007fc 	.word	0x200007fc
 8000f4c:	20000970 	.word	0x20000970
 8000f50:	20000b4c 	.word	0x20000b4c
 8000f54:	20000138 	.word	0x20000138
 8000f58:	20000958 	.word	0x20000958
 8000f5c:	20000134 	.word	0x20000134
 8000f60:	20001080 	.word	0x20001080
 8000f64:	20000794 	.word	0x20000794
 8000f68:	20000148 	.word	0x20000148
 8000f6c:	20000798 	.word	0x20000798
 8000f70:	2000107c 	.word	0x2000107c
 8000f74:	20000904 	.word	0x20000904
 8000f78:	20000574 	.word	0x20000574
 8000f7c:	20000960 	.word	0x20000960
 8000f80:	20000b50 	.word	0x20000b50
 8000f84:	200009bc 	.word	0x200009bc
 8000f88:	331f      	adds	r3, #31
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	4a82      	ldr	r2, [pc, #520]	; (80011a0 <transmit+0x8c4>)
 8000f98:	6013      	str	r3, [r2, #0]
				y90Third = str[1+31+i*36] >> 4; //перевод левого бита 9го байта
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	3320      	adds	r3, #32
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b7b      	ldr	r3, [pc, #492]	; (80011a4 <transmit+0x8c8>)
 8000fb6:	601a      	str	r2, [r3, #0]
				y95Third = str[1+31+i*36] & 0x0F; //перевод правого бита 9го байта
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	3320      	adds	r3, #32
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <transmit+0x8cc>)
 8000fd2:	6013      	str	r3, [r2, #0]
				sprintf(yvalThird, "+%02d.%d%d;", yIntSumThird, y8Third, y90Third);
 8000fd4:	4b75      	ldr	r3, [pc, #468]	; (80011ac <transmit+0x8d0>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b71      	ldr	r3, [pc, #452]	; (80011a0 <transmit+0x8c4>)
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <transmit+0x8c8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4972      	ldr	r1, [pc, #456]	; (80011b0 <transmit+0x8d4>)
 8000fe6:	4873      	ldr	r0, [pc, #460]	; (80011b4 <transmit+0x8d8>)
 8000fe8:	f007 ff22 	bl	8008e30 <siprintf>
				if((str[1+29+i*36] >> 4) == 0x01)
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	331e      	adds	r3, #30
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d102      	bne.n	800100e <transmit+0x732>
					yvalThird[0] = '-';
 8001008:	4b6a      	ldr	r3, [pc, #424]	; (80011b4 <transmit+0x8d8>)
 800100a:	222d      	movs	r2, #45	; 0x2d
 800100c:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumThird = (str[1+32+i*36] & 0x0F) * 10 + (str[1+33+i*36] >> 4); //целочисленная сумма Z
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	3321      	adds	r3, #33	; 0x21
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	f003 020f 	and.w	r2, r3, #15
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4619      	mov	r1, r3
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	3322      	adds	r3, #34	; 0x22
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	b2db      	uxtb	r3, r3
 8001048:	440b      	add	r3, r1
 800104a:	4a5b      	ldr	r2, [pc, #364]	; (80011b8 <transmit+0x8dc>)
 800104c:	6013      	str	r3, [r2, #0]
				z11Third = str[1+33+i*36] & 0x0F; //перевод правого бита 11го байта
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	3322      	adds	r3, #34	; 0x22
 800105a:	461a      	mov	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	4a55      	ldr	r2, [pc, #340]	; (80011bc <transmit+0x8e0>)
 8001068:	6013      	str	r3, [r2, #0]
				z120Third = str[1+34+i*36] >> 4; //перевод левого бита 12го байта
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	3323      	adds	r3, #35	; 0x23
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <transmit+0x8e4>)
 8001086:	601a      	str	r2, [r3, #0]
				z125Third = str[1+34+i*36] & 0x0F; //перевод правого бита 12го байта
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	3323      	adds	r3, #35	; 0x23
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <transmit+0x8e8>)
 80010a2:	6013      	str	r3, [r2, #0]
				sprintf(zvalThird, "+%02d.%d%d;", zIntSumThird, z11Third, z120Third);
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <transmit+0x8dc>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b44      	ldr	r3, [pc, #272]	; (80011bc <transmit+0x8e0>)
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <transmit+0x8e4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	460b      	mov	r3, r1
 80010b4:	493e      	ldr	r1, [pc, #248]	; (80011b0 <transmit+0x8d4>)
 80010b6:	4844      	ldr	r0, [pc, #272]	; (80011c8 <transmit+0x8ec>)
 80010b8:	f007 feba 	bl	8008e30 <siprintf>
				if((str[1+32+i*36] >> 4) == 0x01)
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	3321      	adds	r3, #33	; 0x21
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d102      	bne.n	80010de <transmit+0x802>
					zvalThird[0] = '-';
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <transmit+0x8ec>)
 80010da:	222d      	movs	r2, #45	; 0x2d
 80010dc:	701a      	strb	r2, [r3, #0]


				for(uint8_t j=0;j<8;j++)
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	e019      	b.n	8001118 <transmit+0x83c>
				{

					str2[j+i*73]=str[j+i*36];
 80010e4:	7bb9      	ldrb	r1, [r7, #14]
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1899      	adds	r1, r3, r2
 80010f8:	7bb8      	ldrb	r0, [r7, #14]
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	4403      	add	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	4413      	add	r3, r2
 800110e:	780a      	ldrb	r2, [r1, #0]
 8001110:	701a      	strb	r2, [r3, #0]
				for(uint8_t j=0;j<8;j++)
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	3301      	adds	r3, #1
 8001116:	73bb      	strb	r3, [r7, #14]
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	2b07      	cmp	r3, #7
 800111c:	d9e2      	bls.n	80010e4 <transmit+0x808>
				}
				for(uint8_t j=0;j<8;j++)
 800111e:	2300      	movs	r3, #0
 8001120:	737b      	strb	r3, [r7, #13]
 8001122:	e011      	b.n	8001148 <transmit+0x86c>
				{

					str2[j+8+i*73]=';';
 8001124:	7b7b      	ldrb	r3, [r7, #13]
 8001126:	f103 0108 	add.w	r1, r3, #8
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	440b      	add	r3, r1
 8001138:	461a      	mov	r2, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	223b      	movs	r2, #59	; 0x3b
 8001140:	701a      	strb	r2, [r3, #0]
				for(uint8_t j=0;j<8;j++)
 8001142:	7b7b      	ldrb	r3, [r7, #13]
 8001144:	3301      	adds	r3, #1
 8001146:	737b      	strb	r3, [r7, #13]
 8001148:	7b7b      	ldrb	r3, [r7, #13]
 800114a:	2b07      	cmp	r3, #7
 800114c:	d9ea      	bls.n	8001124 <transmit+0x848>
				}


				sprintf(&str2[1+8+i*73], "%s%s%s%s%s%s%s%s%s\n", xvalFirst, yvalFirst, zvalFirst, xvalSecond, yvalSecond, zvalSecond, xvalThird, yvalThird, zvalThird);
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	3309      	adds	r3, #9
 800115c:	461a      	mov	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	1898      	adds	r0, r3, r2
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <transmit+0x8ec>)
 8001164:	9306      	str	r3, [sp, #24]
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <transmit+0x8d8>)
 8001168:	9305      	str	r3, [sp, #20]
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <transmit+0x8f0>)
 800116c:	9304      	str	r3, [sp, #16]
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <transmit+0x8f4>)
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <transmit+0x8f8>)
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <transmit+0x8fc>)
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <transmit+0x900>)
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <transmit+0x904>)
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <transmit+0x908>)
 8001182:	4919      	ldr	r1, [pc, #100]	; (80011e8 <transmit+0x90c>)
 8001184:	f007 fe54 	bl	8008e30 <siprintf>
	for(uint8_t i=0;i<NumofPacket;i++)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3301      	adds	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b06      	cmp	r3, #6
 8001192:	f67f abac 	bls.w	80008ee <transmit+0x12>

	}

}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200007f8 	.word	0x200007f8
 80011a4:	20000154 	.word	0x20000154
 80011a8:	20000570 	.word	0x20000570
 80011ac:	200009bc 	.word	0x200009bc
 80011b0:	08009654 	.word	0x08009654
 80011b4:	2000014c 	.word	0x2000014c
 80011b8:	20000c00 	.word	0x20000c00
 80011bc:	20000158 	.word	0x20000158
 80011c0:	200009f0 	.word	0x200009f0
 80011c4:	20000578 	.word	0x20000578
 80011c8:	20000964 	.word	0x20000964
 80011cc:	20000b50 	.word	0x20000b50
 80011d0:	20000798 	.word	0x20000798
 80011d4:	20000958 	.word	0x20000958
 80011d8:	20000140 	.word	0x20000140
 80011dc:	200009c8 	.word	0x200009c8
 80011e0:	20000580 	.word	0x20000580
 80011e4:	200001bc 	.word	0x200001bc
 80011e8:	08009660 	.word	0x08009660

080011ec <uint32_TO_charmass>:
mass - массив, в которй число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	4611      	mov	r1, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	460b      	mov	r3, r1
 80011fc:	80fb      	strh	r3, [r7, #6]
 80011fe:	4613      	mov	r3, r2
 8001200:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	82fb      	strh	r3, [r7, #22]
 8001206:	e01f      	b.n	8001248 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <uint32_TO_charmass+0x70>)
 800120c:	fba3 2301 	umull	r2, r3, r3, r1
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	1aca      	subs	r2, r1, r3
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	1e59      	subs	r1, r3, #1
 8001222:	8afb      	ldrh	r3, [r7, #22]
 8001224:	1ac9      	subs	r1, r1, r3
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	440b      	add	r3, r1
 800122a:	4619      	mov	r1, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	440b      	add	r3, r1
 8001230:	3230      	adds	r2, #48	; 0x30
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4a08      	ldr	r2, [pc, #32]	; (800125c <uint32_TO_charmass+0x70>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	08db      	lsrs	r3, r3, #3
 8001240:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8001242:	8afb      	ldrh	r3, [r7, #22]
 8001244:	3301      	adds	r3, #1
 8001246:	82fb      	strh	r3, [r7, #22]
 8001248:	8afa      	ldrh	r2, [r7, #22]
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3db      	bcc.n	8001208 <uint32_TO_charmass+0x1c>

	}
}
 8001250:	bf00      	nop
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	cccccccd 	.word	0xcccccccd

08001260 <SyncAccel>:


// Функция синхронизации

void SyncAccel(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	  // Синхронизация
	  if(readFlag==1)
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <SyncAccel+0x88>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d110      	bne.n	800128e <SyncAccel+0x2e>
	  {
		UsartCount=0;
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <SyncAccel+0x8c>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
	  	readFlag=0;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <SyncAccel+0x88>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8001278:	2001      	movs	r0, #1
 800127a:	f002 f91d 	bl	80034b8 <HAL_Delay>
	  	HAL_UART_Abort(&huart3);
 800127e:	481c      	ldr	r0, [pc, #112]	; (80012f0 <SyncAccel+0x90>)
 8001280:	f004 fd10 	bl	8005ca4 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8001284:	220e      	movs	r2, #14
 8001286:	491b      	ldr	r1, [pc, #108]	; (80012f4 <SyncAccel+0x94>)
 8001288:	4819      	ldr	r0, [pc, #100]	; (80012f0 <SyncAccel+0x90>)
 800128a:	f004 fc8b 	bl	8005ba4 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag2==1)
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <SyncAccel+0x98>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d110      	bne.n	80012b8 <SyncAccel+0x58>
	  {
		UsartCount=0;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <SyncAccel+0x8c>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
	  	readFlag2=0;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <SyncAccel+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f002 f908 	bl	80034b8 <HAL_Delay>
	  	HAL_UART_Abort(&huart1);
 80012a8:	4814      	ldr	r0, [pc, #80]	; (80012fc <SyncAccel+0x9c>)
 80012aa:	f004 fcfb 	bl	8005ca4 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 80012ae:	220e      	movs	r2, #14
 80012b0:	4913      	ldr	r1, [pc, #76]	; (8001300 <SyncAccel+0xa0>)
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <SyncAccel+0x9c>)
 80012b4:	f004 fc76 	bl	8005ba4 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag3==1)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <SyncAccel+0xa4>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d110      	bne.n	80012e2 <SyncAccel+0x82>
	  {
		UsartCount=0;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <SyncAccel+0x8c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	  	readFlag3=0;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <SyncAccel+0xa4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f002 f8f3 	bl	80034b8 <HAL_Delay>
	  	HAL_UART_Abort(&huart5);
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <SyncAccel+0xa8>)
 80012d4:	f004 fce6 	bl	8005ca4 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 80012d8:	220e      	movs	r2, #14
 80012da:	490c      	ldr	r1, [pc, #48]	; (800130c <SyncAccel+0xac>)
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <SyncAccel+0xa8>)
 80012de:	f004 fc61 	bl	8005ba4 <HAL_UART_Receive_DMA>
	  }


}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200009ec 	.word	0x200009ec
 80012ec:	200000eb 	.word	0x200000eb
 80012f0:	200001c4 	.word	0x200001c4
 80012f4:	200000a4 	.word	0x200000a4
 80012f8:	200009c4 	.word	0x200009c4
 80012fc:	20000908 	.word	0x20000908
 8001300:	200000c0 	.word	0x200000c0
 8001304:	2000013c 	.word	0x2000013c
 8001308:	20000800 	.word	0x20000800
 800130c:	200000b2 	.word	0x200000b2

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f002 f85d 	bl	80033d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f8fb 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f000 fb55 	bl	80019cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001322:	f000 fb0d 	bl	8001940 <MX_DMA_Init>
  MX_SPI1_Init();
 8001326:	f000 f967 	bl	80015f8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800132a:	f000 fab5 	bl	8001898 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800132e:	f000 fadd 	bl	80018ec <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001332:	f000 fa87 	bl	8001844 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001336:	f005 fb8b 	bl	8006a50 <MX_FATFS_Init>
  MX_SPI3_Init();
 800133a:	f000 f993 	bl	8001664 <MX_SPI3_Init>
  MX_UART5_Init();
 800133e:	f000 fa57 	bl	80017f0 <MX_UART5_Init>
  MX_TIM6_Init();
 8001342:	f000 f9c5 	bl	80016d0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001346:	f000 f9f9 	bl	800173c <MX_TIM7_Init>
  MX_TIM10_Init();
 800134a:	f000 fa2d 	bl	80017a8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */


    // Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 800134e:	f7ff fa40 	bl	80007d2 <Rf96_Lora_init>
	Rf96_Lora_TX_mode();
 8001352:	f7ff fa62 	bl	800081a <Rf96_Lora_TX_mode>

    // Запуск приема в дма с аксселерометров
    HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8001356:	220e      	movs	r2, #14
 8001358:	4957      	ldr	r1, [pc, #348]	; (80014b8 <main+0x1a8>)
 800135a:	4858      	ldr	r0, [pc, #352]	; (80014bc <main+0x1ac>)
 800135c:	f004 fc22 	bl	8005ba4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8001360:	220e      	movs	r2, #14
 8001362:	4957      	ldr	r1, [pc, #348]	; (80014c0 <main+0x1b0>)
 8001364:	4857      	ldr	r0, [pc, #348]	; (80014c4 <main+0x1b4>)
 8001366:	f004 fc1d 	bl	8005ba4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 800136a:	220e      	movs	r2, #14
 800136c:	4956      	ldr	r1, [pc, #344]	; (80014c8 <main+0x1b8>)
 800136e:	4857      	ldr	r0, [pc, #348]	; (80014cc <main+0x1bc>)
 8001370:	f004 fc18 	bl	8005ba4 <HAL_UART_Receive_DMA>

    // Отправка первого нулевого пакета
	PacketToRadio();
 8001374:	f7ff fa78 	bl	8000868 <PacketToRadio>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2101      	movs	r1, #1
 800137c:	4854      	ldr	r0, [pc, #336]	; (80014d0 <main+0x1c0>)
 800137e:	f002 ff85 	bl	800428c <HAL_GPIO_WritePin>



	///ФЛЕШКА
	UINT bytesWrote;
    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001382:	2201      	movs	r2, #1
 8001384:	4953      	ldr	r1, [pc, #332]	; (80014d4 <main+0x1c4>)
 8001386:	4854      	ldr	r0, [pc, #336]	; (80014d8 <main+0x1c8>)
 8001388:	f007 f8cc 	bl	8008524 <f_mount>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b52      	ldr	r3, [pc, #328]	; (80014dc <main+0x1cc>)
 8001392:	701a      	strb	r2, [r3, #0]

	  if (fres != FR_OK) {
 8001394:	4b51      	ldr	r3, [pc, #324]	; (80014dc <main+0x1cc>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d000      	beq.n	800139e <main+0x8e>
		while(1);
 800139c:	e7fe      	b.n	800139c <main+0x8c>
	  }
	  fres = f_open(&fil, "Data.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800139e:	220a      	movs	r2, #10
 80013a0:	494f      	ldr	r1, [pc, #316]	; (80014e0 <main+0x1d0>)
 80013a2:	4850      	ldr	r0, [pc, #320]	; (80014e4 <main+0x1d4>)
 80013a4:	f007 f904 	bl	80085b0 <f_open>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b4b      	ldr	r3, [pc, #300]	; (80014dc <main+0x1cc>)
 80013ae:	701a      	strb	r2, [r3, #0]

    if(fres == FR_OK) {
 80013b0:	4b4a      	ldr	r3, [pc, #296]	; (80014dc <main+0x1cc>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d000      	beq.n	80013ba <main+0xaa>

    } else {
		while(1);
 80013b8:	e7fe      	b.n	80013b8 <main+0xa8>
    }
    HAL_TIM_Base_Start_IT(&htim6);
 80013ba:	484b      	ldr	r0, [pc, #300]	; (80014e8 <main+0x1d8>)
 80013bc:	f004 f8f5 	bl	80055aa <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 80013c0:	484a      	ldr	r0, [pc, #296]	; (80014ec <main+0x1dc>)
 80013c2:	f004 f8f2 	bl	80055aa <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim10);
 80013c6:	484a      	ldr	r0, [pc, #296]	; (80014f0 <main+0x1e0>)
 80013c8:	f004 f8ef 	bl	80055aa <HAL_TIM_Base_Start_IT>
  {



	  // Синхронизация
	    SyncAccel();
 80013cc:	f7ff ff48 	bl	8001260 <SyncAccel>

	  // отправка по радиоканалу
		if(Get_NIRQ_Di0())
 80013d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d4:	4847      	ldr	r0, [pc, #284]	; (80014f4 <main+0x1e4>)
 80013d6:	f002 ff41 	bl	800425c <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <main+0xd4>
		{
			PacketToRadio();
 80013e0:	f7ff fa42 	bl	8000868 <PacketToRadio>
		}

		// Запись на SD карту
		if(metka==1)
 80013e4:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <main+0x1e8>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d1ef      	bne.n	80013cc <main+0xbc>
		{
			//HAL_UART_Transmit_IT(&huart2, "\n", 1);

			metka=0;
 80013ec:	4b42      	ldr	r3, [pc, #264]	; (80014f8 <main+0x1e8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
			if(pr==1)
 80013f2:	4b42      	ldr	r3, [pc, #264]	; (80014fc <main+0x1ec>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d13f      	bne.n	800147a <main+0x16a>
			{

				if(z==0)
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <main+0x1f0>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d11c      	bne.n	800143c <main+0x12c>
				{
					z=1;
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <main+0x1f0>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]

					memset(Buff_Mid,0,sizeof(Buff_Mid));
 8001408:	22fc      	movs	r2, #252	; 0xfc
 800140a:	2100      	movs	r1, #0
 800140c:	483d      	ldr	r0, [pc, #244]	; (8001504 <main+0x1f4>)
 800140e:	f007 fd07 	bl	8008e20 <memset>
					for(uint8_t i=0;i<NumofPacket;i++)
 8001412:	2300      	movs	r3, #0
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	e00e      	b.n	8001436 <main+0x126>
					{
						uint32_TO_charmass(0, Buff_Mid, i*36, 8);
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	00d2      	lsls	r2, r2, #3
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	b29a      	uxth	r2, r3
 8001426:	2308      	movs	r3, #8
 8001428:	4936      	ldr	r1, [pc, #216]	; (8001504 <main+0x1f4>)
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fede 	bl	80011ec <uint32_TO_charmass>
					for(uint8_t i=0;i<NumofPacket;i++)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	3301      	adds	r3, #1
 8001434:	71fb      	strb	r3, [r7, #7]
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b06      	cmp	r3, #6
 800143a:	d9ed      	bls.n	8001418 <main+0x108>

					}

				}
				transmit(Buff_Mid,Buff_str1);
 800143c:	4932      	ldr	r1, [pc, #200]	; (8001508 <main+0x1f8>)
 800143e:	4831      	ldr	r0, [pc, #196]	; (8001504 <main+0x1f4>)
 8001440:	f7ff fa4c 	bl	80008dc <transmit>


				Buff_str1[510]=';';
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <main+0x1f8>)
 8001446:	223b      	movs	r2, #59	; 0x3b
 8001448:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
				Buff_str1[511]='\n';
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <main+0x1f8>)
 800144e:	220a      	movs	r2, #10
 8001450:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff

				// Запись на SD 1 буфера
				 fres = f_write(&fil, &Buff_str1, sizeof(Buff_str1), &bytesWrote);
 8001454:	463b      	mov	r3, r7
 8001456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145a:	492b      	ldr	r1, [pc, #172]	; (8001508 <main+0x1f8>)
 800145c:	4821      	ldr	r0, [pc, #132]	; (80014e4 <main+0x1d4>)
 800145e:	f007 fa65 	bl	800892c <f_write>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <main+0x1cc>)
 8001468:	701a      	strb	r2, [r3, #0]

				  if(fres == FR_OK) {
				  } else {

				  }
				 fres= f_sync(&fil);
 800146a:	481e      	ldr	r0, [pc, #120]	; (80014e4 <main+0x1d4>)
 800146c:	f007 fbd3 	bl	8008c16 <f_sync>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <main+0x1cc>)
 8001476:	701a      	strb	r2, [r3, #0]
 8001478:	e7a8      	b.n	80013cc <main+0xbc>
			}
			else
			{

				transmit(Buff_Top,Buff_str2);
 800147a:	4924      	ldr	r1, [pc, #144]	; (800150c <main+0x1fc>)
 800147c:	4824      	ldr	r0, [pc, #144]	; (8001510 <main+0x200>)
 800147e:	f7ff fa2d 	bl	80008dc <transmit>

				Buff_str2[510]=';';
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <main+0x1fc>)
 8001484:	223b      	movs	r2, #59	; 0x3b
 8001486:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
				Buff_str2[511]='\n';
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <main+0x1fc>)
 800148c:	220a      	movs	r2, #10
 800148e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
				// Запись на SD 2 буфера
				 fres = f_write(&fil, &Buff_str2, sizeof(Buff_str2), &bytesWrote);
 8001492:	463b      	mov	r3, r7
 8001494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001498:	491c      	ldr	r1, [pc, #112]	; (800150c <main+0x1fc>)
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <main+0x1d4>)
 800149c:	f007 fa46 	bl	800892c <f_write>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <main+0x1cc>)
 80014a6:	701a      	strb	r2, [r3, #0]
				  if(fres == FR_OK)
				  {
				  } else
				  {
				  }
				 fres= f_sync(&fil);
 80014a8:	480e      	ldr	r0, [pc, #56]	; (80014e4 <main+0x1d4>)
 80014aa:	f007 fbb4 	bl	8008c16 <f_sync>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <main+0x1cc>)
 80014b4:	701a      	strb	r2, [r3, #0]
	    SyncAccel();
 80014b6:	e789      	b.n	80013cc <main+0xbc>
 80014b8:	200000a4 	.word	0x200000a4
 80014bc:	200001c4 	.word	0x200001c4
 80014c0:	200000b2 	.word	0x200000b2
 80014c4:	20000800 	.word	0x20000800
 80014c8:	200000c0 	.word	0x200000c0
 80014cc:	20000908 	.word	0x20000908
 80014d0:	40020800 	.word	0x40020800
 80014d4:	08009674 	.word	0x08009674
 80014d8:	20000204 	.word	0x20000204
 80014dc:	20000c04 	.word	0x20000c04
 80014e0:	08009678 	.word	0x08009678
 80014e4:	20000e0c 	.word	0x20000e0c
 80014e8:	2000097c 	.word	0x2000097c
 80014ec:	2000103c 	.word	0x2000103c
 80014f0:	20000434 	.word	0x20000434
 80014f4:	40020000 	.word	0x40020000
 80014f8:	200000ee 	.word	0x200000ee
 80014fc:	200000ed 	.word	0x200000ed
 8001500:	200000ef 	.word	0x200000ef
 8001504:	20000474 	.word	0x20000474
 8001508:	20000c08 	.word	0x20000c08
 800150c:	2000058c 	.word	0x2000058c
 8001510:	200009f4 	.word	0x200009f4

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	2234      	movs	r2, #52	; 0x34
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f007 fc7c 	bl	8008e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <SystemClock_Config+0xdc>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a2b      	ldr	r2, [pc, #172]	; (80015f0 <SystemClock_Config+0xdc>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <SystemClock_Config+0xdc>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	2300      	movs	r3, #0
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <SystemClock_Config+0xe0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a25      	ldr	r2, [pc, #148]	; (80015f4 <SystemClock_Config+0xe0>)
 800155e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <SystemClock_Config+0xe0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001570:	2302      	movs	r3, #2
 8001572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001574:	2301      	movs	r3, #1
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001578:	2310      	movs	r3, #16
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2302      	movs	r3, #2
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001580:	2300      	movs	r3, #0
 8001582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001584:	2308      	movs	r3, #8
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001588:	23b4      	movs	r3, #180	; 0xb4
 800158a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001590:	2302      	movs	r3, #2
 8001592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001594:	2302      	movs	r3, #2
 8001596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4618      	mov	r0, r3
 800159e:	f003 f999 	bl	80048d4 <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015a8:	f000 fd4c 	bl	8002044 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015ac:	f002 fe88 	bl	80042c0 <HAL_PWREx_EnableOverDrive>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015b6:	f000 fd45 	bl	8002044 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ba:	230f      	movs	r3, #15
 80015bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015be:	2302      	movs	r3, #2
 80015c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	2105      	movs	r1, #5
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 fec1 	bl	8004360 <HAL_RCC_ClockConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80015e4:	f000 fd2e 	bl	8002044 <Error_Handler>
  }
}
 80015e8:	bf00      	nop
 80015ea:	3750      	adds	r7, #80	; 0x50
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40007000 	.word	0x40007000

080015f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_SPI1_Init+0x64>)
 80015fe:	4a18      	ldr	r2, [pc, #96]	; (8001660 <MX_SPI1_Init+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_SPI1_Init+0x64>)
 8001604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001608:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_SPI1_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_SPI1_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_SPI1_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_SPI1_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_SPI1_Init+0x64>)
 8001624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001628:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_SPI1_Init+0x64>)
 800162c:	2210      	movs	r2, #16
 800162e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <MX_SPI1_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_SPI1_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_SPI1_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_SPI1_Init+0x64>)
 8001644:	220a      	movs	r2, #10
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_SPI1_Init+0x64>)
 800164a:	f003 fb9d 	bl	8004d88 <HAL_SPI_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001654:	f000 fcf6 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000af4 	.word	0x20000af4
 8001660:	40013000 	.word	0x40013000

08001664 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_SPI3_Init+0x64>)
 800166a:	4a18      	ldr	r2, [pc, #96]	; (80016cc <MX_SPI3_Init+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_SPI3_Init+0x64>)
 8001670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001674:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_SPI3_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_SPI3_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_SPI3_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_SPI3_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_SPI3_Init+0x64>)
 8001690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001694:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_SPI3_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <MX_SPI3_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_SPI3_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <MX_SPI3_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_SPI3_Init+0x64>)
 80016b0:	220a      	movs	r2, #10
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MX_SPI3_Init+0x64>)
 80016b6:	f003 fb67 	bl	8004d88 <HAL_SPI_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80016c0:	f000 fcc0 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200007a0 	.word	0x200007a0
 80016cc:	40003c00 	.word	0x40003c00

080016d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d6:	463b      	mov	r3, r7
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_TIM6_Init+0x64>)
 80016e0:	4a15      	ldr	r2, [pc, #84]	; (8001738 <MX_TIM6_Init+0x68>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <MX_TIM6_Init+0x64>)
 80016e6:	f242 3227 	movw	r2, #8999	; 0x2327
 80016ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_TIM6_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <MX_TIM6_Init+0x64>)
 80016f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_TIM6_Init+0x64>)
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <MX_TIM6_Init+0x64>)
 8001702:	f003 ff27 	bl	8005554 <HAL_TIM_Base_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800170c:	f000 fc9a 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_TIM6_Init+0x64>)
 800171e:	f004 f963 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001728:	f000 fc8c 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000097c 	.word	0x2000097c
 8001738:	40001000 	.word	0x40001000

0800173c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001742:	463b      	mov	r3, r7
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_TIM7_Init+0x64>)
 800174c:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <MX_TIM7_Init+0x68>)
 800174e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <MX_TIM7_Init+0x64>)
 8001752:	f242 3227 	movw	r2, #8999	; 0x2327
 8001756:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_TIM7_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <MX_TIM7_Init+0x64>)
 8001760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001764:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_TIM7_Init+0x64>)
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <MX_TIM7_Init+0x64>)
 800176e:	f003 fef1 	bl	8005554 <HAL_TIM_Base_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001778:	f000 fc64 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_TIM7_Init+0x64>)
 800178a:	f004 f92d 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 fc56 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000103c 	.word	0x2000103c
 80017a4:	40001400 	.word	0x40001400

080017a8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_TIM10_Init+0x40>)
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <MX_TIM10_Init+0x44>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <MX_TIM10_Init+0x40>)
 80017b4:	f242 3227 	movw	r2, #8999	; 0x2327
 80017b8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <MX_TIM10_Init+0x40>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_TIM10_Init+0x40>)
 80017c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_TIM10_Init+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_TIM10_Init+0x40>)
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_TIM10_Init+0x40>)
 80017d6:	f003 febd 	bl	8005554 <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80017e0:	f000 fc30 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000434 	.word	0x20000434
 80017ec:	40014400 	.word	0x40014400

080017f0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_UART5_Init+0x4c>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <MX_UART5_Init+0x50>)
 80017f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_UART5_Init+0x4c>)
 80017fc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001800:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_UART5_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_UART5_Init+0x4c>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_UART5_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_UART5_Init+0x4c>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_UART5_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_UART5_Init+0x4c>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_UART5_Init+0x4c>)
 8001828:	f004 f96e 	bl	8005b08 <HAL_UART_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001832:	f000 fc07 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000800 	.word	0x20000800
 8001840:	40005000 	.word	0x40005000

08001844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <MX_USART1_UART_Init+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001850:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800187c:	f004 f944 	bl	8005b08 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001886:	f000 fbdd 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000908 	.word	0x20000908
 8001894:	40011000 	.word	0x40011000

08001898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART2_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018a4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80018a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018d0:	f004 f91a 	bl	8005b08 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f000 fbb3 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000b58 	.word	0x20000b58
 80018e8:	40004400 	.word	0x40004400

080018ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <MX_USART3_UART_Init+0x50>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 80018f8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80018fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART3_UART_Init+0x4c>)
 8001924:	f004 f8f0 	bl	8005b08 <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800192e:	f000 fb89 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200001c4 	.word	0x200001c4
 800193c:	40004800 	.word	0x40004800

08001940 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <MX_DMA_Init+0x88>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <MX_DMA_Init+0x88>)
 8001950:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <MX_DMA_Init+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <MX_DMA_Init+0x88>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <MX_DMA_Init+0x88>)
 800196c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_DMA_Init+0x88>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	200b      	movs	r0, #11
 8001984:	f001 fe95 	bl	80036b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001988:	200b      	movs	r0, #11
 800198a:	f001 feae 	bl	80036ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	200c      	movs	r0, #12
 8001994:	f001 fe8d 	bl	80036b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001998:	200c      	movs	r0, #12
 800199a:	f001 fea6 	bl	80036ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2011      	movs	r0, #17
 80019a4:	f001 fe85 	bl	80036b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019a8:	2011      	movs	r0, #17
 80019aa:	f001 fe9e 	bl	80036ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	203a      	movs	r0, #58	; 0x3a
 80019b4:	f001 fe7d 	bl	80036b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80019b8:	203a      	movs	r0, #58	; 0x3a
 80019ba:	f001 fe96 	bl	80036ea <HAL_NVIC_EnableIRQ>

}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800

080019cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b5e      	ldr	r3, [pc, #376]	; (8001b60 <MX_GPIO_Init+0x194>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a5d      	ldr	r2, [pc, #372]	; (8001b60 <MX_GPIO_Init+0x194>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b5b      	ldr	r3, [pc, #364]	; (8001b60 <MX_GPIO_Init+0x194>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b57      	ldr	r3, [pc, #348]	; (8001b60 <MX_GPIO_Init+0x194>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a56      	ldr	r2, [pc, #344]	; (8001b60 <MX_GPIO_Init+0x194>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b54      	ldr	r3, [pc, #336]	; (8001b60 <MX_GPIO_Init+0x194>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <MX_GPIO_Init+0x194>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a4f      	ldr	r2, [pc, #316]	; (8001b60 <MX_GPIO_Init+0x194>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <MX_GPIO_Init+0x194>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <MX_GPIO_Init+0x194>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a48      	ldr	r2, [pc, #288]	; (8001b60 <MX_GPIO_Init+0x194>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <MX_GPIO_Init+0x194>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001a52:	2200      	movs	r2, #0
 8001a54:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001a58:	4842      	ldr	r0, [pc, #264]	; (8001b64 <MX_GPIO_Init+0x198>)
 8001a5a:	f002 fc17 	bl	800428c <HAL_GPIO_WritePin>
                          |acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f248 0112 	movw	r1, #32786	; 0x8012
 8001a64:	4840      	ldr	r0, [pc, #256]	; (8001b68 <MX_GPIO_Init+0x19c>)
 8001a66:	f002 fc11 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|acel2_Pin|acel2_2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f246 0142 	movw	r1, #24642	; 0x6042
 8001a70:	483e      	ldr	r0, [pc, #248]	; (8001b6c <MX_GPIO_Init+0x1a0>)
 8001a72:	f002 fc0b 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <MX_GPIO_Init+0x1a4>)
 8001a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4836      	ldr	r0, [pc, #216]	; (8001b64 <MX_GPIO_Init+0x198>)
 8001a8c:	f002 fa54 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4 
                           acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001a90:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001a94:	617b      	str	r3, [r7, #20]
                          |acel1_Pin|acel1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	482e      	ldr	r0, [pc, #184]	; (8001b64 <MX_GPIO_Init+0x198>)
 8001aaa:	f002 fa45 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8001aae:	f240 4301 	movw	r3, #1025	; 0x401
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4829      	ldr	r0, [pc, #164]	; (8001b68 <MX_GPIO_Init+0x19c>)
 8001ac4:	f002 fa38 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001ac8:	f248 0312 	movw	r3, #32786	; 0x8012
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4821      	ldr	r0, [pc, #132]	; (8001b68 <MX_GPIO_Init+0x19c>)
 8001ae2:	f002 fa29 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	481b      	ldr	r0, [pc, #108]	; (8001b6c <MX_GPIO_Init+0x1a0>)
 8001afe:	f002 fa1b 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 8001b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4814      	ldr	r0, [pc, #80]	; (8001b6c <MX_GPIO_Init+0x1a0>)
 8001b1c:	f002 fa0c 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel2_2_Pin PB6 */
  GPIO_InitStruct.Pin = acel2_2_Pin|GPIO_PIN_6;
 8001b20:	f244 0340 	movw	r3, #16448	; 0x4040
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <MX_GPIO_Init+0x1a0>)
 8001b3a:	f002 f9fd 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b3e:	2338      	movs	r3, #56	; 0x38
 8001b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4806      	ldr	r0, [pc, #24]	; (8001b6c <MX_GPIO_Init+0x1a0>)
 8001b52:	f002 f9f1 	bl	8003f38 <HAL_GPIO_Init>

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020800 	.word	0x40020800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	10210000 	.word	0x10210000

08001b74 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]


if(huart==&huart3)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4aa2      	ldr	r2, [pc, #648]	; (8001e08 <HAL_UART_RxCpltCallback+0x294>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d12e      	bne.n	8001be2 <HAL_UART_RxCpltCallback+0x6e>
{
	HAL_TIM_Base_Stop_IT(&htim6);
 8001b84:	48a1      	ldr	r0, [pc, #644]	; (8001e0c <HAL_UART_RxCpltCallback+0x298>)
 8001b86:	f003 fd34 	bl	80055f2 <HAL_TIM_Base_Stop_IT>
	TIM6->CNT=0;
 8001b8a:	4ba1      	ldr	r3, [pc, #644]	; (8001e10 <HAL_UART_RxCpltCallback+0x29c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2102      	movs	r1, #2
 8001b94:	489f      	ldr	r0, [pc, #636]	; (8001e14 <HAL_UART_RxCpltCallback+0x2a0>)
 8001b96:	f002 fb79 	bl	800428c <HAL_GPIO_WritePin>
if(package[0][0]!=0x68)
 8001b9a:	4b9f      	ldr	r3, [pc, #636]	; (8001e18 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b68      	cmp	r3, #104	; 0x68
 8001ba0:	d006      	beq.n	8001bb0 <HAL_UART_RxCpltCallback+0x3c>
{
	readFlag=1;
 8001ba2:	4b9e      	ldr	r3, [pc, #632]	; (8001e1c <HAL_UART_RxCpltCallback+0x2a8>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
	UsartCount=0;
 8001ba8:	4b9d      	ldr	r3, [pc, #628]	; (8001e20 <HAL_UART_RxCpltCallback+0x2ac>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	e015      	b.n	8001bdc <HAL_UART_RxCpltCallback+0x68>

}else
{
	for(uint8_t i=0;i<9;i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	75fb      	strb	r3, [r7, #23]
 8001bb4:	e009      	b.n	8001bca <HAL_UART_RxCpltCallback+0x56>
	{
		packageCut[0][i]=package[0][i+4];
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	1d1a      	adds	r2, r3, #4
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	4996      	ldr	r1, [pc, #600]	; (8001e18 <HAL_UART_RxCpltCallback+0x2a4>)
 8001bbe:	5c89      	ldrb	r1, [r1, r2]
 8001bc0:	4a98      	ldr	r2, [pc, #608]	; (8001e24 <HAL_UART_RxCpltCallback+0x2b0>)
 8001bc2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d9f2      	bls.n	8001bb6 <HAL_UART_RxCpltCallback+0x42>
	}
	UsartCount++;
 8001bd0:	4b93      	ldr	r3, [pc, #588]	; (8001e20 <HAL_UART_RxCpltCallback+0x2ac>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b91      	ldr	r3, [pc, #580]	; (8001e20 <HAL_UART_RxCpltCallback+0x2ac>)
 8001bda:	701a      	strb	r2, [r3, #0]

}
HAL_TIM_Base_Start_IT(&htim6);
 8001bdc:	488b      	ldr	r0, [pc, #556]	; (8001e0c <HAL_UART_RxCpltCallback+0x298>)
 8001bde:	f003 fce4 	bl	80055aa <HAL_TIM_Base_Start_IT>
}
if(huart==&huart1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a90      	ldr	r2, [pc, #576]	; (8001e28 <HAL_UART_RxCpltCallback+0x2b4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d131      	bne.n	8001c4e <HAL_UART_RxCpltCallback+0xda>
{
	HAL_TIM_Base_Stop_IT(&htim7);
 8001bea:	4890      	ldr	r0, [pc, #576]	; (8001e2c <HAL_UART_RxCpltCallback+0x2b8>)
 8001bec:	f003 fd01 	bl	80055f2 <HAL_TIM_Base_Stop_IT>
	TIM7->CNT=0;
 8001bf0:	4b8f      	ldr	r3, [pc, #572]	; (8001e30 <HAL_UART_RxCpltCallback+0x2bc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	4886      	ldr	r0, [pc, #536]	; (8001e14 <HAL_UART_RxCpltCallback+0x2a0>)
 8001bfc:	f002 fb46 	bl	800428c <HAL_GPIO_WritePin>
	if(package[2][0]!=0x68)
 8001c00:	4b85      	ldr	r3, [pc, #532]	; (8001e18 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c02:	7f1b      	ldrb	r3, [r3, #28]
 8001c04:	2b68      	cmp	r3, #104	; 0x68
 8001c06:	d006      	beq.n	8001c16 <HAL_UART_RxCpltCallback+0xa2>
	{
		readFlag2=1;
 8001c08:	4b8a      	ldr	r3, [pc, #552]	; (8001e34 <HAL_UART_RxCpltCallback+0x2c0>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001c0e:	4b84      	ldr	r3, [pc, #528]	; (8001e20 <HAL_UART_RxCpltCallback+0x2ac>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	e018      	b.n	8001c48 <HAL_UART_RxCpltCallback+0xd4>

	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	75bb      	strb	r3, [r7, #22]
 8001c1a:	e00c      	b.n	8001c36 <HAL_UART_RxCpltCallback+0xc2>
		{
			packageCut[2][i]=package[2][i+4];
 8001c1c:	7dbb      	ldrb	r3, [r7, #22]
 8001c1e:	1d1a      	adds	r2, r3, #4
 8001c20:	7dbb      	ldrb	r3, [r7, #22]
 8001c22:	497d      	ldr	r1, [pc, #500]	; (8001e18 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c24:	440a      	add	r2, r1
 8001c26:	7f11      	ldrb	r1, [r2, #28]
 8001c28:	4a7e      	ldr	r2, [pc, #504]	; (8001e24 <HAL_UART_RxCpltCallback+0x2b0>)
 8001c2a:	4413      	add	r3, r2
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	749a      	strb	r2, [r3, #18]
		for(uint8_t i=0;i<9;i++)
 8001c30:	7dbb      	ldrb	r3, [r7, #22]
 8001c32:	3301      	adds	r3, #1
 8001c34:	75bb      	strb	r3, [r7, #22]
 8001c36:	7dbb      	ldrb	r3, [r7, #22]
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d9ef      	bls.n	8001c1c <HAL_UART_RxCpltCallback+0xa8>
		}
		UsartCount++;
 8001c3c:	4b78      	ldr	r3, [pc, #480]	; (8001e20 <HAL_UART_RxCpltCallback+0x2ac>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <HAL_UART_RxCpltCallback+0x2ac>)
 8001c46:	701a      	strb	r2, [r3, #0]
	}
	HAL_TIM_Base_Start_IT(&htim7);
 8001c48:	4878      	ldr	r0, [pc, #480]	; (8001e2c <HAL_UART_RxCpltCallback+0x2b8>)
 8001c4a:	f003 fcae 	bl	80055aa <HAL_TIM_Base_Start_IT>

}

if(huart==&huart5)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a79      	ldr	r2, [pc, #484]	; (8001e38 <HAL_UART_RxCpltCallback+0x2c4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d131      	bne.n	8001cba <HAL_UART_RxCpltCallback+0x146>
{
	HAL_TIM_Base_Stop_IT(&htim10);
 8001c56:	4879      	ldr	r0, [pc, #484]	; (8001e3c <HAL_UART_RxCpltCallback+0x2c8>)
 8001c58:	f003 fccb 	bl	80055f2 <HAL_TIM_Base_Stop_IT>
	TIM10->CNT=0;
 8001c5c:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <HAL_UART_RxCpltCallback+0x2cc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2108      	movs	r1, #8
 8001c66:	486b      	ldr	r0, [pc, #428]	; (8001e14 <HAL_UART_RxCpltCallback+0x2a0>)
 8001c68:	f002 fb10 	bl	800428c <HAL_GPIO_WritePin>
	if(package[1][0]!=0x68)
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c6e:	7b9b      	ldrb	r3, [r3, #14]
 8001c70:	2b68      	cmp	r3, #104	; 0x68
 8001c72:	d006      	beq.n	8001c82 <HAL_UART_RxCpltCallback+0x10e>
	{
		readFlag3=1;
 8001c74:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <HAL_UART_RxCpltCallback+0x2d0>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001c7a:	4b69      	ldr	r3, [pc, #420]	; (8001e20 <HAL_UART_RxCpltCallback+0x2ac>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	e018      	b.n	8001cb4 <HAL_UART_RxCpltCallback+0x140>

	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	757b      	strb	r3, [r7, #21]
 8001c86:	e00c      	b.n	8001ca2 <HAL_UART_RxCpltCallback+0x12e>
		{
			packageCut[1][i]=package[1][i+4];
 8001c88:	7d7b      	ldrb	r3, [r7, #21]
 8001c8a:	1d1a      	adds	r2, r3, #4
 8001c8c:	7d7b      	ldrb	r3, [r7, #21]
 8001c8e:	4962      	ldr	r1, [pc, #392]	; (8001e18 <HAL_UART_RxCpltCallback+0x2a4>)
 8001c90:	440a      	add	r2, r1
 8001c92:	7b91      	ldrb	r1, [r2, #14]
 8001c94:	4a63      	ldr	r2, [pc, #396]	; (8001e24 <HAL_UART_RxCpltCallback+0x2b0>)
 8001c96:	4413      	add	r3, r2
 8001c98:	460a      	mov	r2, r1
 8001c9a:	725a      	strb	r2, [r3, #9]
		for(uint8_t i=0;i<9;i++)
 8001c9c:	7d7b      	ldrb	r3, [r7, #21]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	757b      	strb	r3, [r7, #21]
 8001ca2:	7d7b      	ldrb	r3, [r7, #21]
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d9ef      	bls.n	8001c88 <HAL_UART_RxCpltCallback+0x114>
		}
		UsartCount++;
 8001ca8:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <HAL_UART_RxCpltCallback+0x2ac>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <HAL_UART_RxCpltCallback+0x2ac>)
 8001cb2:	701a      	strb	r2, [r3, #0]

	}
	HAL_TIM_Base_Start_IT(&htim10);
 8001cb4:	4861      	ldr	r0, [pc, #388]	; (8001e3c <HAL_UART_RxCpltCallback+0x2c8>)
 8001cb6:	f003 fc78 	bl	80055aa <HAL_TIM_Base_Start_IT>
}
if(UsartCount==3 && readFlag==0 && readFlag2==0 && readFlag3==0)  // Получено 1 измерение с каждого датчика
 8001cba:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <HAL_UART_RxCpltCallback+0x2ac>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	f040 812b 	bne.w	8001f1a <HAL_UART_RxCpltCallback+0x3a6>
 8001cc4:	4b55      	ldr	r3, [pc, #340]	; (8001e1c <HAL_UART_RxCpltCallback+0x2a8>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f040 8126 	bne.w	8001f1a <HAL_UART_RxCpltCallback+0x3a6>
 8001cce:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_UART_RxCpltCallback+0x2c0>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 8121 	bne.w	8001f1a <HAL_UART_RxCpltCallback+0x3a6>
 8001cd8:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <HAL_UART_RxCpltCallback+0x2d0>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 811c 	bne.w	8001f1a <HAL_UART_RxCpltCallback+0x3a6>
{
	UsartCount=0;
 8001ce2:	4b4f      	ldr	r3, [pc, #316]	; (8001e20 <HAL_UART_RxCpltCallback+0x2ac>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]


if(pr==0)
 8001ce8:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <HAL_UART_RxCpltCallback+0x2d4>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d174      	bne.n	8001dda <HAL_UART_RxCpltCallback+0x266>
{



	reciveTime = HAL_GetTick();
 8001cf0:	f001 fbd6 	bl	80034a0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b55      	ldr	r3, [pc, #340]	; (8001e4c <HAL_UART_RxCpltCallback+0x2d8>)
 8001cf8:	601a      	str	r2, [r3, #0]

	uint32_TO_charmass(reciveTime, Buff_Mid, CountOfAccel*36, 8);
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <HAL_UART_RxCpltCallback+0x2d8>)
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	4b54      	ldr	r3, [pc, #336]	; (8001e50 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	00d2      	lsls	r2, r2, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	2308      	movs	r3, #8
 8001d10:	4950      	ldr	r1, [pc, #320]	; (8001e54 <HAL_UART_RxCpltCallback+0x2e0>)
 8001d12:	f7ff fa6b 	bl	80011ec <uint32_TO_charmass>
	for(uint8_t i=0;i<9;i++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	753b      	strb	r3, [r7, #20]
 8001d1a:	e012      	b.n	8001d42 <HAL_UART_RxCpltCallback+0x1ce>
	{
		Buff_Mid[i+9+36*CountOfAccel]=packageCut[0][i];
 8001d1c:	7d3a      	ldrb	r2, [r7, #20]
 8001d1e:	7d3b      	ldrb	r3, [r7, #20]
 8001d20:	f103 0109 	add.w	r1, r3, #9
 8001d24:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4403      	add	r3, r0
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	493b      	ldr	r1, [pc, #236]	; (8001e24 <HAL_UART_RxCpltCallback+0x2b0>)
 8001d36:	5c89      	ldrb	r1, [r1, r2]
 8001d38:	4a46      	ldr	r2, [pc, #280]	; (8001e54 <HAL_UART_RxCpltCallback+0x2e0>)
 8001d3a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001d3c:	7d3b      	ldrb	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	753b      	strb	r3, [r7, #20]
 8001d42:	7d3b      	ldrb	r3, [r7, #20]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d9e9      	bls.n	8001d1c <HAL_UART_RxCpltCallback+0x1a8>

	}
	for(uint8_t i=0;i<9;i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	74fb      	strb	r3, [r7, #19]
 8001d4c:	e013      	b.n	8001d76 <HAL_UART_RxCpltCallback+0x202>
	{
		Buff_Mid[i+18+36*CountOfAccel]=packageCut[1][i];
 8001d4e:	7cfa      	ldrb	r2, [r7, #19]
 8001d50:	7cfb      	ldrb	r3, [r7, #19]
 8001d52:	f103 0112 	add.w	r1, r3, #18
 8001d56:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4403      	add	r3, r0
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	492f      	ldr	r1, [pc, #188]	; (8001e24 <HAL_UART_RxCpltCallback+0x2b0>)
 8001d68:	440a      	add	r2, r1
 8001d6a:	7a51      	ldrb	r1, [r2, #9]
 8001d6c:	4a39      	ldr	r2, [pc, #228]	; (8001e54 <HAL_UART_RxCpltCallback+0x2e0>)
 8001d6e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001d70:	7cfb      	ldrb	r3, [r7, #19]
 8001d72:	3301      	adds	r3, #1
 8001d74:	74fb      	strb	r3, [r7, #19]
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d9e8      	bls.n	8001d4e <HAL_UART_RxCpltCallback+0x1da>

	}
	for(uint8_t i=0;i<9;i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	74bb      	strb	r3, [r7, #18]
 8001d80:	e013      	b.n	8001daa <HAL_UART_RxCpltCallback+0x236>
	{
		Buff_Mid[i+27+36*CountOfAccel]=packageCut[2][i];
 8001d82:	7cba      	ldrb	r2, [r7, #18]
 8001d84:	7cbb      	ldrb	r3, [r7, #18]
 8001d86:	f103 011b 	add.w	r1, r3, #27
 8001d8a:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4403      	add	r3, r0
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	4922      	ldr	r1, [pc, #136]	; (8001e24 <HAL_UART_RxCpltCallback+0x2b0>)
 8001d9c:	440a      	add	r2, r1
 8001d9e:	7c91      	ldrb	r1, [r2, #18]
 8001da0:	4a2c      	ldr	r2, [pc, #176]	; (8001e54 <HAL_UART_RxCpltCallback+0x2e0>)
 8001da2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001da4:	7cbb      	ldrb	r3, [r7, #18]
 8001da6:	3301      	adds	r3, #1
 8001da8:	74bb      	strb	r3, [r7, #18]
 8001daa:	7cbb      	ldrb	r3, [r7, #18]
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d9e8      	bls.n	8001d82 <HAL_UART_RxCpltCallback+0x20e>

	}



	CountOfAccel++;
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_UART_RxCpltCallback+0x2dc>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <HAL_UART_RxCpltCallback+0x2dc>)
 8001dba:	701a      	strb	r2, [r3, #0]


	if(CountOfAccel==NumofPacket)  // Считано 7 измерений с каждого датчика
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_UART_RxCpltCallback+0x2dc>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b07      	cmp	r3, #7
 8001dc2:	f040 80aa 	bne.w	8001f1a <HAL_UART_RxCpltCallback+0x3a6>
	{
		CountOfAccel=0;
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_UART_RxCpltCallback+0x2dc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
		metka=1;
 8001dcc:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <HAL_UART_RxCpltCallback+0x2e4>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
		pr=1;
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_UART_RxCpltCallback+0x2d4>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
}


}

}
 8001dd8:	e09f      	b.n	8001f1a <HAL_UART_RxCpltCallback+0x3a6>
	reciveTime = HAL_GetTick();
 8001dda:	f001 fb61 	bl	80034a0 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_UART_RxCpltCallback+0x2d8>)
 8001de2:	601a      	str	r2, [r3, #0]
	uint32_TO_charmass(reciveTime, Buff_Top, CountOfAccel*36, 8);
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_UART_RxCpltCallback+0x2d8>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_UART_RxCpltCallback+0x2dc>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	00d2      	lsls	r2, r2, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	2308      	movs	r3, #8
 8001dfa:	4918      	ldr	r1, [pc, #96]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001dfc:	f7ff f9f6 	bl	80011ec <uint32_TO_charmass>
	for(uint8_t i=0;i<9;i++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	747b      	strb	r3, [r7, #17]
 8001e04:	e03f      	b.n	8001e86 <HAL_UART_RxCpltCallback+0x312>
 8001e06:	bf00      	nop
 8001e08:	200001c4 	.word	0x200001c4
 8001e0c:	2000097c 	.word	0x2000097c
 8001e10:	40001000 	.word	0x40001000
 8001e14:	40020800 	.word	0x40020800
 8001e18:	200000a4 	.word	0x200000a4
 8001e1c:	200009ec 	.word	0x200009ec
 8001e20:	200000eb 	.word	0x200000eb
 8001e24:	200000d0 	.word	0x200000d0
 8001e28:	20000908 	.word	0x20000908
 8001e2c:	2000103c 	.word	0x2000103c
 8001e30:	40001400 	.word	0x40001400
 8001e34:	200009c4 	.word	0x200009c4
 8001e38:	20000800 	.word	0x20000800
 8001e3c:	20000434 	.word	0x20000434
 8001e40:	40014400 	.word	0x40014400
 8001e44:	2000013c 	.word	0x2000013c
 8001e48:	200000ed 	.word	0x200000ed
 8001e4c:	20000af0 	.word	0x20000af0
 8001e50:	200000ec 	.word	0x200000ec
 8001e54:	20000474 	.word	0x20000474
 8001e58:	200000ee 	.word	0x200000ee
 8001e5c:	200009f4 	.word	0x200009f4
		Buff_Top[i+9+36*CountOfAccel]=packageCut[0][i];
 8001e60:	7c7a      	ldrb	r2, [r7, #17]
 8001e62:	7c7b      	ldrb	r3, [r7, #17]
 8001e64:	f103 0109 	add.w	r1, r3, #9
 8001e68:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <HAL_UART_RxCpltCallback+0x3b0>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4403      	add	r3, r0
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	492b      	ldr	r1, [pc, #172]	; (8001f28 <HAL_UART_RxCpltCallback+0x3b4>)
 8001e7a:	5c89      	ldrb	r1, [r1, r2]
 8001e7c:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <HAL_UART_RxCpltCallback+0x3b8>)
 8001e7e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001e80:	7c7b      	ldrb	r3, [r7, #17]
 8001e82:	3301      	adds	r3, #1
 8001e84:	747b      	strb	r3, [r7, #17]
 8001e86:	7c7b      	ldrb	r3, [r7, #17]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d9e9      	bls.n	8001e60 <HAL_UART_RxCpltCallback+0x2ec>
	for(uint8_t i=0;i<9;i++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	743b      	strb	r3, [r7, #16]
 8001e90:	e013      	b.n	8001eba <HAL_UART_RxCpltCallback+0x346>
		Buff_Top[i+18+36*CountOfAccel]=packageCut[1][i];
 8001e92:	7c3a      	ldrb	r2, [r7, #16]
 8001e94:	7c3b      	ldrb	r3, [r7, #16]
 8001e96:	f103 0112 	add.w	r1, r3, #18
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <HAL_UART_RxCpltCallback+0x3b0>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4403      	add	r3, r0
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	491f      	ldr	r1, [pc, #124]	; (8001f28 <HAL_UART_RxCpltCallback+0x3b4>)
 8001eac:	440a      	add	r2, r1
 8001eae:	7a51      	ldrb	r1, [r2, #9]
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_UART_RxCpltCallback+0x3b8>)
 8001eb2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001eb4:	7c3b      	ldrb	r3, [r7, #16]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	743b      	strb	r3, [r7, #16]
 8001eba:	7c3b      	ldrb	r3, [r7, #16]
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d9e8      	bls.n	8001e92 <HAL_UART_RxCpltCallback+0x31e>
	for(uint8_t i=0;i<9;i++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e013      	b.n	8001eee <HAL_UART_RxCpltCallback+0x37a>
		Buff_Top[i+27+36*CountOfAccel]=packageCut[2][i];
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	f103 011b 	add.w	r1, r3, #27
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_UART_RxCpltCallback+0x3b0>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4403      	add	r3, r0
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	4912      	ldr	r1, [pc, #72]	; (8001f28 <HAL_UART_RxCpltCallback+0x3b4>)
 8001ee0:	440a      	add	r2, r1
 8001ee2:	7c91      	ldrb	r1, [r2, #18]
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <HAL_UART_RxCpltCallback+0x3b8>)
 8001ee6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<9;i++)
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	3301      	adds	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d9e8      	bls.n	8001ec6 <HAL_UART_RxCpltCallback+0x352>
	CountOfAccel++;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_UART_RxCpltCallback+0x3b0>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_UART_RxCpltCallback+0x3b0>)
 8001efe:	701a      	strb	r2, [r3, #0]
	if(CountOfAccel==NumofPacket)  // Считано 7 измерений с каждого датчика
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_UART_RxCpltCallback+0x3b0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b07      	cmp	r3, #7
 8001f06:	d108      	bne.n	8001f1a <HAL_UART_RxCpltCallback+0x3a6>
		CountOfAccel=0;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_UART_RxCpltCallback+0x3b0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
		metka=1;
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_UART_RxCpltCallback+0x3bc>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
		pr=0;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_UART_RxCpltCallback+0x3c0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200000ec 	.word	0x200000ec
 8001f28:	200000d0 	.word	0x200000d0
 8001f2c:	200009f4 	.word	0x200009f4
 8001f30:	200000ee 	.word	0x200000ee
 8001f34:	200000ed 	.word	0x200000ed

08001f38 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]


}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

	if(htim==&htim6)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a2b      	ldr	r2, [pc, #172]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d117      	bne.n	8001f8c <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		TIM6->CNT=0;
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[0],0,9);
 8001f62:	2209      	movs	r2, #9
 8001f64:	2100      	movs	r1, #0
 8001f66:	4829      	ldr	r0, [pc, #164]	; (800200c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001f68:	f006 ff5a 	bl	8008e20 <memset>
		HAL_TIM_Base_Start_IT(&htim6);
 8001f6c:	4825      	ldr	r0, [pc, #148]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001f6e:	f003 fb1c 	bl	80055aa <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	2102      	movs	r1, #2
 8001f76:	4826      	ldr	r0, [pc, #152]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f78:	f002 f988 	bl	800428c <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart3);
 8001f7c:	4825      	ldr	r0, [pc, #148]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f7e:	f003 fe91 	bl	8005ca4 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 8001f82:	220e      	movs	r2, #14
 8001f84:	4924      	ldr	r1, [pc, #144]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001f86:	4823      	ldr	r0, [pc, #140]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f88:	f003 fe0c 	bl	8005ba4 <HAL_UART_Receive_DMA>
	}
	if(htim==&htim7)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a23      	ldr	r2, [pc, #140]	; (800201c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d117      	bne.n	8001fc4 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		TIM7->CNT=0;
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[2],0,9);
 8001f9a:	2209      	movs	r2, #9
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4821      	ldr	r0, [pc, #132]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001fa0:	f006 ff3e 	bl	8008e20 <memset>
		HAL_TIM_Base_Start_IT(&htim7);
 8001fa4:	481d      	ldr	r0, [pc, #116]	; (800201c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001fa6:	f003 fb00 	bl	80055aa <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	2104      	movs	r1, #4
 8001fae:	4818      	ldr	r0, [pc, #96]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001fb0:	f002 f96c 	bl	800428c <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart1);
 8001fb4:	481c      	ldr	r0, [pc, #112]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001fb6:	f003 fe75 	bl	8005ca4 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 8001fba:	220e      	movs	r2, #14
 8001fbc:	491b      	ldr	r1, [pc, #108]	; (800202c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001fbe:	481a      	ldr	r0, [pc, #104]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001fc0:	f003 fdf0 	bl	8005ba4 <HAL_UART_Receive_DMA>
	}
	if(htim==&htim10)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d117      	bne.n	8001ffc <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		TIM10->CNT=0;
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[1],0,9);
 8001fd2:	2209      	movs	r2, #9
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4818      	ldr	r0, [pc, #96]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001fd8:	f006 ff22 	bl	8008e20 <memset>
		HAL_TIM_Base_Start_IT(&htim10);
 8001fdc:	4814      	ldr	r0, [pc, #80]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001fde:	f003 fae4 	bl	80055aa <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	2108      	movs	r1, #8
 8001fe6:	480a      	ldr	r0, [pc, #40]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001fe8:	f002 f950 	bl	800428c <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart5);
 8001fec:	4813      	ldr	r0, [pc, #76]	; (800203c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001fee:	f003 fe59 	bl	8005ca4 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8001ff2:	220e      	movs	r2, #14
 8001ff4:	4912      	ldr	r1, [pc, #72]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001ff6:	4811      	ldr	r0, [pc, #68]	; (800203c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001ff8:	f003 fdd4 	bl	8005ba4 <HAL_UART_Receive_DMA>
	}



}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	2000097c 	.word	0x2000097c
 8002008:	40001000 	.word	0x40001000
 800200c:	200000d0 	.word	0x200000d0
 8002010:	40020800 	.word	0x40020800
 8002014:	200001c4 	.word	0x200001c4
 8002018:	200000a4 	.word	0x200000a4
 800201c:	2000103c 	.word	0x2000103c
 8002020:	40001400 	.word	0x40001400
 8002024:	200000e2 	.word	0x200000e2
 8002028:	20000908 	.word	0x20000908
 800202c:	200000c0 	.word	0x200000c0
 8002030:	20000434 	.word	0x20000434
 8002034:	40014400 	.word	0x40014400
 8002038:	200000d9 	.word	0x200000d9
 800203c:	20000800 	.word	0x20000800
 8002040:	200000b2 	.word	0x200000b2

08002044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 800205e:	1df9      	adds	r1, r7, #7
 8002060:	230a      	movs	r3, #10
 8002062:	2201      	movs	r2, #1
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <SPICmd8bit+0x20>)
 8002066:	f002 fef3 	bl	8004e50 <HAL_SPI_Transmit>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000af4 	.word	0x20000af4

08002078 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	460a      	mov	r2, r1
 8002082:	71fb      	strb	r3, [r7, #7]
 8002084:	4613      	mov	r3, r2
 8002086:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 8002088:	2200      	movs	r2, #0
 800208a:	2140      	movs	r1, #64	; 0x40
 800208c:	480b      	ldr	r0, [pc, #44]	; (80020bc <SPIWrite+0x44>)
 800208e:	f002 f8fd 	bl	800428c <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ffda 	bl	8002054 <SPICmd8bit>
	SPICmd8bit(WrPara);
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ffd6 	bl	8002054 <SPICmd8bit>
	NSS_H();
 80020a8:	2201      	movs	r2, #1
 80020aa:	2140      	movs	r1, #64	; 0x40
 80020ac:	4803      	ldr	r0, [pc, #12]	; (80020bc <SPIWrite+0x44>)
 80020ae:	f002 f8ed 	bl	800428c <HAL_GPIO_WritePin>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40020400 	.word	0x40020400

080020c0 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 80020d0:	79bb      	ldrb	r3, [r7, #6]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d922      	bls.n	800211c <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 80020d6:	2200      	movs	r2, #0
 80020d8:	2140      	movs	r1, #64	; 0x40
 80020da:	4812      	ldr	r0, [pc, #72]	; (8002124 <BurstWrite+0x64>)
 80020dc:	f002 f8d6 	bl	800428c <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ffb3 	bl	8002054 <SPICmd8bit>
    for(i=0;i<length;i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	e009      	b.n	8002108 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ffa9 	bl	8002054 <SPICmd8bit>
    for(i=0;i<length;i++)
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	3301      	adds	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	79bb      	ldrb	r3, [r7, #6]
 800210c:	429a      	cmp	r2, r3
 800210e:	d3f1      	bcc.n	80020f4 <BurstWrite+0x34>
    NSS_H();
 8002110:	2201      	movs	r2, #1
 8002112:	2140      	movs	r1, #64	; 0x40
 8002114:	4803      	ldr	r0, [pc, #12]	; (8002124 <BurstWrite+0x64>)
 8002116:	f002 f8b9 	bl	800428c <HAL_GPIO_WritePin>
 800211a:	e000      	b.n	800211e <BurstWrite+0x5e>
    return;
 800211c:	bf00      	nop
  }
}
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40020400 	.word	0x40020400

08002128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_MspInit+0x4c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_MspInit+0x4c>)
 8002138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_MspInit+0x4c>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_MspInit+0x4c>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a08      	ldr	r2, [pc, #32]	; (8002174 <HAL_MspInit+0x4c>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_MspInit+0x4c>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800

08002178 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08c      	sub	sp, #48	; 0x30
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a4a      	ldr	r2, [pc, #296]	; (80022c0 <HAL_SPI_MspInit+0x148>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d12c      	bne.n	80021f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	4b49      	ldr	r3, [pc, #292]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a48      	ldr	r2, [pc, #288]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 80021a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b46      	ldr	r3, [pc, #280]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	4b42      	ldr	r3, [pc, #264]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a41      	ldr	r2, [pc, #260]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b3f      	ldr	r3, [pc, #252]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021d2:	23e0      	movs	r3, #224	; 0xe0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021e2:	2305      	movs	r3, #5
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	4619      	mov	r1, r3
 80021ec:	4836      	ldr	r0, [pc, #216]	; (80022c8 <HAL_SPI_MspInit+0x150>)
 80021ee:	f001 fea3 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021f2:	e060      	b.n	80022b6 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a34      	ldr	r2, [pc, #208]	; (80022cc <HAL_SPI_MspInit+0x154>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d15b      	bne.n	80022b6 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a2f      	ldr	r2, [pc, #188]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 8002208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a28      	ldr	r2, [pc, #160]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <HAL_SPI_MspInit+0x14c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002252:	2301      	movs	r3, #1
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800225a:	2301      	movs	r3, #1
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002262:	2307      	movs	r3, #7
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	4619      	mov	r1, r3
 800226c:	4818      	ldr	r0, [pc, #96]	; (80022d0 <HAL_SPI_MspInit+0x158>)
 800226e:	f001 fe63 	bl	8003f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002284:	2306      	movs	r3, #6
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	4619      	mov	r1, r3
 800228e:	4811      	ldr	r0, [pc, #68]	; (80022d4 <HAL_SPI_MspInit+0x15c>)
 8002290:	f001 fe52 	bl	8003f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800229e:	2301      	movs	r3, #1
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022a6:	2306      	movs	r3, #6
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	4619      	mov	r1, r3
 80022b0:	4808      	ldr	r0, [pc, #32]	; (80022d4 <HAL_SPI_MspInit+0x15c>)
 80022b2:	f001 fe41 	bl	8003f38 <HAL_GPIO_Init>
}
 80022b6:	bf00      	nop
 80022b8:	3730      	adds	r7, #48	; 0x30
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40013000 	.word	0x40013000
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40003c00 	.word	0x40003c00
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020800 	.word	0x40020800

080022d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2a      	ldr	r2, [pc, #168]	; (8002390 <HAL_TIM_Base_MspInit+0xb8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d116      	bne.n	8002318 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <HAL_TIM_Base_MspInit+0xbc>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_TIM_Base_MspInit+0xbc>)
 80022f4:	f043 0310 	orr.w	r3, r3, #16
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <HAL_TIM_Base_MspInit+0xbc>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2036      	movs	r0, #54	; 0x36
 800230c:	f001 f9d1 	bl	80036b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002310:	2036      	movs	r0, #54	; 0x36
 8002312:	f001 f9ea 	bl	80036ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002316:	e036      	b.n	8002386 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <HAL_TIM_Base_MspInit+0xc0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d116      	bne.n	8002350 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_TIM_Base_MspInit+0xbc>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a1a      	ldr	r2, [pc, #104]	; (8002394 <HAL_TIM_Base_MspInit+0xbc>)
 800232c:	f043 0320 	orr.w	r3, r3, #32
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_TIM_Base_MspInit+0xbc>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2037      	movs	r0, #55	; 0x37
 8002344:	f001 f9b5 	bl	80036b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002348:	2037      	movs	r0, #55	; 0x37
 800234a:	f001 f9ce 	bl	80036ea <HAL_NVIC_EnableIRQ>
}
 800234e:	e01a      	b.n	8002386 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a11      	ldr	r2, [pc, #68]	; (800239c <HAL_TIM_Base_MspInit+0xc4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d115      	bne.n	8002386 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_TIM_Base_MspInit+0xbc>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <HAL_TIM_Base_MspInit+0xbc>)
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_TIM_Base_MspInit+0xbc>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2019      	movs	r0, #25
 800237c:	f001 f999 	bl	80036b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002380:	2019      	movs	r0, #25
 8002382:	f001 f9b2 	bl	80036ea <HAL_NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40001000 	.word	0x40001000
 8002394:	40023800 	.word	0x40023800
 8002398:	40001400 	.word	0x40001400
 800239c:	40014400 	.word	0x40014400

080023a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b092      	sub	sp, #72	; 0x48
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a87      	ldr	r2, [pc, #540]	; (80025dc <HAL_UART_MspInit+0x23c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	f040 8083 	bne.w	80024ca <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80023c4:	2300      	movs	r3, #0
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
 80023c8:	4b85      	ldr	r3, [pc, #532]	; (80025e0 <HAL_UART_MspInit+0x240>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	4a84      	ldr	r2, [pc, #528]	; (80025e0 <HAL_UART_MspInit+0x240>)
 80023ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d2:	6413      	str	r3, [r2, #64]	; 0x40
 80023d4:	4b82      	ldr	r3, [pc, #520]	; (80025e0 <HAL_UART_MspInit+0x240>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
 80023de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e4:	4b7e      	ldr	r3, [pc, #504]	; (80025e0 <HAL_UART_MspInit+0x240>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	4a7d      	ldr	r2, [pc, #500]	; (80025e0 <HAL_UART_MspInit+0x240>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6313      	str	r3, [r2, #48]	; 0x30
 80023f0:	4b7b      	ldr	r3, [pc, #492]	; (80025e0 <HAL_UART_MspInit+0x240>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002400:	4b77      	ldr	r3, [pc, #476]	; (80025e0 <HAL_UART_MspInit+0x240>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	4a76      	ldr	r2, [pc, #472]	; (80025e0 <HAL_UART_MspInit+0x240>)
 8002406:	f043 0308 	orr.w	r3, r3, #8
 800240a:	6313      	str	r3, [r2, #48]	; 0x30
 800240c:	4b74      	ldr	r3, [pc, #464]	; (80025e0 <HAL_UART_MspInit+0x240>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002422:	2301      	movs	r3, #1
 8002424:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800242a:	2308      	movs	r3, #8
 800242c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002432:	4619      	mov	r1, r3
 8002434:	486b      	ldr	r0, [pc, #428]	; (80025e4 <HAL_UART_MspInit+0x244>)
 8002436:	f001 fd7f 	bl	8003f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800243a:	2304      	movs	r3, #4
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002442:	2301      	movs	r3, #1
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800244a:	2308      	movs	r3, #8
 800244c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002452:	4619      	mov	r1, r3
 8002454:	4864      	ldr	r0, [pc, #400]	; (80025e8 <HAL_UART_MspInit+0x248>)
 8002456:	f001 fd6f 	bl	8003f38 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800245a:	4b64      	ldr	r3, [pc, #400]	; (80025ec <HAL_UART_MspInit+0x24c>)
 800245c:	4a64      	ldr	r2, [pc, #400]	; (80025f0 <HAL_UART_MspInit+0x250>)
 800245e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002460:	4b62      	ldr	r3, [pc, #392]	; (80025ec <HAL_UART_MspInit+0x24c>)
 8002462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002466:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002468:	4b60      	ldr	r3, [pc, #384]	; (80025ec <HAL_UART_MspInit+0x24c>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800246e:	4b5f      	ldr	r3, [pc, #380]	; (80025ec <HAL_UART_MspInit+0x24c>)
 8002470:	2200      	movs	r2, #0
 8002472:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002474:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <HAL_UART_MspInit+0x24c>)
 8002476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800247a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800247c:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <HAL_UART_MspInit+0x24c>)
 800247e:	2200      	movs	r2, #0
 8002480:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002482:	4b5a      	ldr	r3, [pc, #360]	; (80025ec <HAL_UART_MspInit+0x24c>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002488:	4b58      	ldr	r3, [pc, #352]	; (80025ec <HAL_UART_MspInit+0x24c>)
 800248a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800248e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002490:	4b56      	ldr	r3, [pc, #344]	; (80025ec <HAL_UART_MspInit+0x24c>)
 8002492:	2200      	movs	r2, #0
 8002494:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002496:	4b55      	ldr	r3, [pc, #340]	; (80025ec <HAL_UART_MspInit+0x24c>)
 8002498:	2200      	movs	r2, #0
 800249a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800249c:	4853      	ldr	r0, [pc, #332]	; (80025ec <HAL_UART_MspInit+0x24c>)
 800249e:	f001 f93f 	bl	8003720 <HAL_DMA_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80024a8:	f7ff fdcc 	bl	8002044 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a4f      	ldr	r2, [pc, #316]	; (80025ec <HAL_UART_MspInit+0x24c>)
 80024b0:	635a      	str	r2, [r3, #52]	; 0x34
 80024b2:	4a4e      	ldr	r2, [pc, #312]	; (80025ec <HAL_UART_MspInit+0x24c>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2100      	movs	r1, #0
 80024bc:	2035      	movs	r0, #53	; 0x35
 80024be:	f001 f8f8 	bl	80036b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80024c2:	2035      	movs	r0, #53	; 0x35
 80024c4:	f001 f911 	bl	80036ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024c8:	e18e      	b.n	80027e8 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a49      	ldr	r2, [pc, #292]	; (80025f4 <HAL_UART_MspInit+0x254>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	f040 8099 	bne.w	8002608 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <HAL_UART_MspInit+0x240>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a40      	ldr	r2, [pc, #256]	; (80025e0 <HAL_UART_MspInit+0x240>)
 80024e0:	f043 0310 	orr.w	r3, r3, #16
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <HAL_UART_MspInit+0x240>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
 80024f6:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <HAL_UART_MspInit+0x240>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <HAL_UART_MspInit+0x240>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <HAL_UART_MspInit+0x240>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <HAL_UART_MspInit+0x240>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <HAL_UART_MspInit+0x240>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_UART_MspInit+0x240>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800252a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800253c:	2307      	movs	r3, #7
 800253e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002544:	4619      	mov	r1, r3
 8002546:	482c      	ldr	r0, [pc, #176]	; (80025f8 <HAL_UART_MspInit+0x258>)
 8002548:	f001 fcf6 	bl	8003f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800255c:	2307      	movs	r3, #7
 800255e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002560:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002564:	4619      	mov	r1, r3
 8002566:	4825      	ldr	r0, [pc, #148]	; (80025fc <HAL_UART_MspInit+0x25c>)
 8002568:	f001 fce6 	bl	8003f38 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800256c:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_UART_MspInit+0x260>)
 800256e:	4a25      	ldr	r2, [pc, #148]	; (8002604 <HAL_UART_MspInit+0x264>)
 8002570:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002572:	4b23      	ldr	r3, [pc, #140]	; (8002600 <HAL_UART_MspInit+0x260>)
 8002574:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002578:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800257a:	4b21      	ldr	r3, [pc, #132]	; (8002600 <HAL_UART_MspInit+0x260>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002580:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <HAL_UART_MspInit+0x260>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <HAL_UART_MspInit+0x260>)
 8002588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800258c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <HAL_UART_MspInit+0x260>)
 8002590:	2200      	movs	r2, #0
 8002592:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_UART_MspInit+0x260>)
 8002596:	2200      	movs	r2, #0
 8002598:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_UART_MspInit+0x260>)
 800259c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_UART_MspInit+0x260>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <HAL_UART_MspInit+0x260>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025ae:	4814      	ldr	r0, [pc, #80]	; (8002600 <HAL_UART_MspInit+0x260>)
 80025b0:	f001 f8b6 	bl	8003720 <HAL_DMA_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_UART_MspInit+0x21e>
      Error_Handler();
 80025ba:	f7ff fd43 	bl	8002044 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <HAL_UART_MspInit+0x260>)
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34
 80025c4:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <HAL_UART_MspInit+0x260>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	2025      	movs	r0, #37	; 0x25
 80025d0:	f001 f86f 	bl	80036b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025d4:	2025      	movs	r0, #37	; 0x25
 80025d6:	f001 f888 	bl	80036ea <HAL_NVIC_EnableIRQ>
}
 80025da:	e105      	b.n	80027e8 <HAL_UART_MspInit+0x448>
 80025dc:	40005000 	.word	0x40005000
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020800 	.word	0x40020800
 80025e8:	40020c00 	.word	0x40020c00
 80025ec:	20000b98 	.word	0x20000b98
 80025f0:	40026010 	.word	0x40026010
 80025f4:	40011000 	.word	0x40011000
 80025f8:	40020000 	.word	0x40020000
 80025fc:	40020400 	.word	0x40020400
 8002600:	20000844 	.word	0x20000844
 8002604:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a78      	ldr	r2, [pc, #480]	; (80027f0 <HAL_UART_MspInit+0x450>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d162      	bne.n	80026d8 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	4b77      	ldr	r3, [pc, #476]	; (80027f4 <HAL_UART_MspInit+0x454>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a76      	ldr	r2, [pc, #472]	; (80027f4 <HAL_UART_MspInit+0x454>)
 800261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b74      	ldr	r3, [pc, #464]	; (80027f4 <HAL_UART_MspInit+0x454>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	4b70      	ldr	r3, [pc, #448]	; (80027f4 <HAL_UART_MspInit+0x454>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a6f      	ldr	r2, [pc, #444]	; (80027f4 <HAL_UART_MspInit+0x454>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b6d      	ldr	r3, [pc, #436]	; (80027f4 <HAL_UART_MspInit+0x454>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800264a:	230c      	movs	r3, #12
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800265a:	2307      	movs	r3, #7
 800265c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002662:	4619      	mov	r1, r3
 8002664:	4864      	ldr	r0, [pc, #400]	; (80027f8 <HAL_UART_MspInit+0x458>)
 8002666:	f001 fc67 	bl	8003f38 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800266a:	4b64      	ldr	r3, [pc, #400]	; (80027fc <HAL_UART_MspInit+0x45c>)
 800266c:	4a64      	ldr	r2, [pc, #400]	; (8002800 <HAL_UART_MspInit+0x460>)
 800266e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002670:	4b62      	ldr	r3, [pc, #392]	; (80027fc <HAL_UART_MspInit+0x45c>)
 8002672:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002676:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002678:	4b60      	ldr	r3, [pc, #384]	; (80027fc <HAL_UART_MspInit+0x45c>)
 800267a:	2240      	movs	r2, #64	; 0x40
 800267c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800267e:	4b5f      	ldr	r3, [pc, #380]	; (80027fc <HAL_UART_MspInit+0x45c>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002684:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <HAL_UART_MspInit+0x45c>)
 8002686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800268a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800268c:	4b5b      	ldr	r3, [pc, #364]	; (80027fc <HAL_UART_MspInit+0x45c>)
 800268e:	2200      	movs	r2, #0
 8002690:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002692:	4b5a      	ldr	r3, [pc, #360]	; (80027fc <HAL_UART_MspInit+0x45c>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002698:	4b58      	ldr	r3, [pc, #352]	; (80027fc <HAL_UART_MspInit+0x45c>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800269e:	4b57      	ldr	r3, [pc, #348]	; (80027fc <HAL_UART_MspInit+0x45c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026a4:	4b55      	ldr	r3, [pc, #340]	; (80027fc <HAL_UART_MspInit+0x45c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80026aa:	4854      	ldr	r0, [pc, #336]	; (80027fc <HAL_UART_MspInit+0x45c>)
 80026ac:	f001 f838 	bl	8003720 <HAL_DMA_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_UART_MspInit+0x31a>
      Error_Handler();
 80026b6:	f7ff fcc5 	bl	8002044 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4f      	ldr	r2, [pc, #316]	; (80027fc <HAL_UART_MspInit+0x45c>)
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
 80026c0:	4a4e      	ldr	r2, [pc, #312]	; (80027fc <HAL_UART_MspInit+0x45c>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	2026      	movs	r0, #38	; 0x26
 80026cc:	f000 fff1 	bl	80036b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026d0:	2026      	movs	r0, #38	; 0x26
 80026d2:	f001 f80a 	bl	80036ea <HAL_NVIC_EnableIRQ>
}
 80026d6:	e087      	b.n	80027e8 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a49      	ldr	r2, [pc, #292]	; (8002804 <HAL_UART_MspInit+0x464>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	f040 8082 	bne.w	80027e8 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_UART_MspInit+0x454>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	4a41      	ldr	r2, [pc, #260]	; (80027f4 <HAL_UART_MspInit+0x454>)
 80026ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f2:	6413      	str	r3, [r2, #64]	; 0x40
 80026f4:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_UART_MspInit+0x454>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <HAL_UART_MspInit+0x454>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	4a3a      	ldr	r2, [pc, #232]	; (80027f4 <HAL_UART_MspInit+0x454>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6313      	str	r3, [r2, #48]	; 0x30
 8002710:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <HAL_UART_MspInit+0x454>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <HAL_UART_MspInit+0x454>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <HAL_UART_MspInit+0x454>)
 8002726:	f043 0302 	orr.w	r3, r3, #2
 800272a:	6313      	str	r3, [r2, #48]	; 0x30
 800272c:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <HAL_UART_MspInit+0x454>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002738:	2320      	movs	r3, #32
 800273a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002748:	2307      	movs	r3, #7
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002750:	4619      	mov	r1, r3
 8002752:	482d      	ldr	r0, [pc, #180]	; (8002808 <HAL_UART_MspInit+0x468>)
 8002754:	f001 fbf0 	bl	8003f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800276a:	2307      	movs	r3, #7
 800276c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002772:	4619      	mov	r1, r3
 8002774:	4825      	ldr	r0, [pc, #148]	; (800280c <HAL_UART_MspInit+0x46c>)
 8002776:	f001 fbdf 	bl	8003f38 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800277a:	4b25      	ldr	r3, [pc, #148]	; (8002810 <HAL_UART_MspInit+0x470>)
 800277c:	4a25      	ldr	r2, [pc, #148]	; (8002814 <HAL_UART_MspInit+0x474>)
 800277e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_UART_MspInit+0x470>)
 8002782:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002786:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_UART_MspInit+0x470>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_UART_MspInit+0x470>)
 8002790:	2200      	movs	r2, #0
 8002792:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002794:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <HAL_UART_MspInit+0x470>)
 8002796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800279a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800279c:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_UART_MspInit+0x470>)
 800279e:	2200      	movs	r2, #0
 80027a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_UART_MspInit+0x470>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_UART_MspInit+0x470>)
 80027aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ae:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_UART_MspInit+0x470>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_UART_MspInit+0x470>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80027bc:	4814      	ldr	r0, [pc, #80]	; (8002810 <HAL_UART_MspInit+0x470>)
 80027be:	f000 ffaf 	bl	8003720 <HAL_DMA_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_UART_MspInit+0x42c>
      Error_Handler();
 80027c8:	f7ff fc3c 	bl	8002044 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a10      	ldr	r2, [pc, #64]	; (8002810 <HAL_UART_MspInit+0x470>)
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34
 80027d2:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <HAL_UART_MspInit+0x470>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027d8:	2200      	movs	r2, #0
 80027da:	2100      	movs	r1, #0
 80027dc:	2027      	movs	r0, #39	; 0x27
 80027de:	f000 ff68 	bl	80036b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027e2:	2027      	movs	r0, #39	; 0x27
 80027e4:	f000 ff81 	bl	80036ea <HAL_NVIC_EnableIRQ>
}
 80027e8:	bf00      	nop
 80027ea:	3748      	adds	r7, #72	; 0x48
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40004400 	.word	0x40004400
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	200008a4 	.word	0x200008a4
 8002800:	400260a0 	.word	0x400260a0
 8002804:	40004800 	.word	0x40004800
 8002808:	40020800 	.word	0x40020800
 800280c:	40020400 	.word	0x40020400
 8002810:	2000015c 	.word	0x2000015c
 8002814:	40026028 	.word	0x40026028

08002818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282a:	e7fe      	b.n	800282a <HardFault_Handler+0x4>

0800282c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <MemManage_Handler+0x4>

08002832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002836:	e7fe      	b.n	8002836 <BusFault_Handler+0x4>

08002838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800283c:	e7fe      	b.n	800283c <UsageFault_Handler+0x4>

0800283e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800286c:	f000 fe04 	bl	8003478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}

08002874 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <DMA1_Stream0_IRQHandler+0x10>)
 800287a:	f001 f8e9 	bl	8003a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000b98 	.word	0x20000b98

08002888 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <DMA1_Stream1_IRQHandler+0x10>)
 800288e:	f001 f8df 	bl	8003a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000015c 	.word	0x2000015c

0800289c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <DMA1_Stream6_IRQHandler+0x10>)
 80028a2:	f001 f8d5 	bl	8003a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200008a4 	.word	0x200008a4

080028b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028b6:	f002 fec7 	bl	8005648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000434 	.word	0x20000434

080028c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <USART1_IRQHandler+0x10>)
 80028ca:	f003 fa6d 	bl	8005da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000908 	.word	0x20000908

080028d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <USART2_IRQHandler+0x10>)
 80028de:	f003 fa63 	bl	8005da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000b58 	.word	0x20000b58

080028ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <USART3_IRQHandler+0x10>)
 80028f2:	f003 fa59 	bl	8005da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200001c4 	.word	0x200001c4

08002900 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <UART5_IRQHandler+0x10>)
 8002906:	f003 fa4f 	bl	8005da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000800 	.word	0x20000800

08002914 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <TIM6_DAC_IRQHandler+0x10>)
 800291a:	f002 fe95 	bl	8005648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000097c 	.word	0x2000097c

08002928 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <TIM7_IRQHandler+0x10>)
 800292e:	f002 fe8b 	bl	8005648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000103c 	.word	0x2000103c

0800293c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <DMA2_Stream2_IRQHandler+0x10>)
 8002942:	f001 f885 	bl	8003a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000844 	.word	0x20000844

08002950 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <_sbrk+0x50>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <_sbrk+0x16>
		heap_end = &end;
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <_sbrk+0x50>)
 8002962:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <_sbrk+0x54>)
 8002964:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <_sbrk+0x50>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <_sbrk+0x50>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	466a      	mov	r2, sp
 8002976:	4293      	cmp	r3, r2
 8002978:	d907      	bls.n	800298a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800297a:	f006 fa27 	bl	8008dcc <__errno>
 800297e:	4602      	mov	r2, r0
 8002980:	230c      	movs	r3, #12
 8002982:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002988:	e006      	b.n	8002998 <_sbrk+0x48>
	}

	heap_end += incr;
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <_sbrk+0x50>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	4a03      	ldr	r2, [pc, #12]	; (80029a0 <_sbrk+0x50>)
 8002994:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002996:	68fb      	ldr	r3, [r7, #12]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200000f0 	.word	0x200000f0
 80029a4:	20001500 	.word	0x20001500

080029a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <SystemInit+0x28>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <SystemInit+0x28>)
 80029b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <SystemInit+0x28>)
 80029be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029c2:	609a      	str	r2, [r3, #8]
#endif
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80029dc:	f000 fd60 	bl	80034a0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SPI_Timer_On+0x20>)
 80029e4:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80029e6:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <SPI_Timer_On+0x24>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20001084 	.word	0x20001084
 80029f8:	20001088 	.word	0x20001088

080029fc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002a00:	f000 fd4e 	bl	80034a0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <SPI_Timer_Status+0x24>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1ad2      	subs	r2, r2, r3
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <SPI_Timer_Status+0x28>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	bf34      	ite	cc
 8002a14:	2301      	movcc	r3, #1
 8002a16:	2300      	movcs	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20001084 	.word	0x20001084
 8002a24:	20001088 	.word	0x20001088

08002a28 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 8002a32:	f107 020f 	add.w	r2, r7, #15
 8002a36:	1df9      	adds	r1, r7, #7
 8002a38:	2332      	movs	r3, #50	; 0x32
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	4804      	ldr	r0, [pc, #16]	; (8002a50 <xchg_spi+0x28>)
 8002a40:	f002 fb3a 	bl	80050b8 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200007a0 	.word	0x200007a0

08002a54 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e00a      	b.n	8002a7a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	18d4      	adds	r4, r2, r3
 8002a6a:	20ff      	movs	r0, #255	; 0xff
 8002a6c:	f7ff ffdc 	bl	8002a28 <xchg_spi>
 8002a70:	4603      	mov	r3, r0
 8002a72:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3301      	adds	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d3f0      	bcc.n	8002a64 <rcvr_spi_multi+0x10>
	}
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}

08002a8a <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e009      	b.n	8002aae <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ffc0 	bl	8002a28 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d3f1      	bcc.n	8002a9a <xmit_spi_multi+0x10>
	}
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002ac6:	f000 fceb 	bl	80034a0 <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002ad0:	20ff      	movs	r0, #255	; 0xff
 8002ad2:	f7ff ffa9 	bl	8002a28 <xchg_spi>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	2bff      	cmp	r3, #255	; 0xff
 8002ade:	d007      	beq.n	8002af0 <wait_ready+0x32>
 8002ae0:	f000 fcde 	bl	80034a0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8ef      	bhi.n	8002ad0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2bff      	cmp	r3, #255	; 0xff
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b0e:	4804      	ldr	r0, [pc, #16]	; (8002b20 <despiselect+0x1c>)
 8002b10:	f001 fbbc 	bl	800428c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002b14:	20ff      	movs	r0, #255	; 0xff
 8002b16:	f7ff ff87 	bl	8002a28 <xchg_spi>

}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40020000 	.word	0x40020000

08002b24 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b2e:	480a      	ldr	r0, [pc, #40]	; (8002b58 <spiselect+0x34>)
 8002b30:	f001 fbac 	bl	800428c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002b34:	20ff      	movs	r0, #255	; 0xff
 8002b36:	f7ff ff77 	bl	8002a28 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b3e:	f7ff ffbe 	bl	8002abe <wait_ready>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <spiselect+0x28>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e002      	b.n	8002b52 <spiselect+0x2e>

	despiselect();
 8002b4c:	f7ff ffda 	bl	8002b04 <despiselect>
	return 0;	/* Timeout */
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40020000 	.word	0x40020000

08002b5c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002b66:	20c8      	movs	r0, #200	; 0xc8
 8002b68:	f7ff ff34 	bl	80029d4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002b6c:	20ff      	movs	r0, #255	; 0xff
 8002b6e:	f7ff ff5b 	bl	8002a28 <xchg_spi>
 8002b72:	4603      	mov	r3, r0
 8002b74:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2bff      	cmp	r3, #255	; 0xff
 8002b7a:	d104      	bne.n	8002b86 <rcvr_datablock+0x2a>
 8002b7c:	f7ff ff3e 	bl	80029fc <SPI_Timer_Status>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f2      	bne.n	8002b6c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2bfe      	cmp	r3, #254	; 0xfe
 8002b8a:	d001      	beq.n	8002b90 <rcvr_datablock+0x34>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e00a      	b.n	8002ba6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002b90:	6839      	ldr	r1, [r7, #0]
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff5e 	bl	8002a54 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002b98:	20ff      	movs	r0, #255	; 0xff
 8002b9a:	f7ff ff45 	bl	8002a28 <xchg_spi>
 8002b9e:	20ff      	movs	r0, #255	; 0xff
 8002ba0:	f7ff ff42 	bl	8002a28 <xchg_spi>

	return 1;						/* Function succeeded */
 8002ba4:	2301      	movs	r3, #1
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002bba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bbe:	f7ff ff7e 	bl	8002abe <wait_ready>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <xmit_datablock+0x1e>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e01e      	b.n	8002c0a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff2a 	bl	8002a28 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	2bfd      	cmp	r3, #253	; 0xfd
 8002bd8:	d016      	beq.n	8002c08 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002bda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ff53 	bl	8002a8a <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002be4:	20ff      	movs	r0, #255	; 0xff
 8002be6:	f7ff ff1f 	bl	8002a28 <xchg_spi>
 8002bea:	20ff      	movs	r0, #255	; 0xff
 8002bec:	f7ff ff1c 	bl	8002a28 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002bf0:	20ff      	movs	r0, #255	; 0xff
 8002bf2:	f7ff ff19 	bl	8002a28 <xchg_spi>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d001      	beq.n	8002c08 <xmit_datablock+0x5a>
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <xmit_datablock+0x5c>
	}
	return 1;
 8002c08:	2301      	movs	r3, #1
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	6039      	str	r1, [r7, #0]
 8002c1c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da0e      	bge.n	8002c44 <send_cmd+0x32>
		cmd &= 0x7F;
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c2c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002c2e:	2100      	movs	r1, #0
 8002c30:	2037      	movs	r0, #55	; 0x37
 8002c32:	f7ff ffee 	bl	8002c12 <send_cmd>
 8002c36:	4603      	mov	r3, r0
 8002c38:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002c3a:	7bbb      	ldrb	r3, [r7, #14]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d901      	bls.n	8002c44 <send_cmd+0x32>
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	e051      	b.n	8002ce8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d008      	beq.n	8002c5c <send_cmd+0x4a>
		despiselect();
 8002c4a:	f7ff ff5b 	bl	8002b04 <despiselect>
		if (!spiselect()) return 0xFF;
 8002c4e:	f7ff ff69 	bl	8002b24 <spiselect>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <send_cmd+0x4a>
 8002c58:	23ff      	movs	r3, #255	; 0xff
 8002c5a:	e045      	b.n	8002ce8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fedf 	bl	8002a28 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	0e1b      	lsrs	r3, r3, #24
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fed9 	bl	8002a28 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fed3 	bl	8002a28 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fecd 	bl	8002a28 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fec8 	bl	8002a28 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <send_cmd+0x94>
 8002ca2:	2395      	movs	r3, #149	; 0x95
 8002ca4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d101      	bne.n	8002cb0 <send_cmd+0x9e>
 8002cac:	2387      	movs	r3, #135	; 0x87
 8002cae:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff feb8 	bl	8002a28 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d102      	bne.n	8002cc4 <send_cmd+0xb2>
 8002cbe:	20ff      	movs	r0, #255	; 0xff
 8002cc0:	f7ff feb2 	bl	8002a28 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002cc4:	230a      	movs	r3, #10
 8002cc6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002cc8:	20ff      	movs	r0, #255	; 0xff
 8002cca:	f7ff fead 	bl	8002a28 <xchg_spi>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002cd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da05      	bge.n	8002ce6 <send_cmd+0xd4>
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002ce6:	7bbb      	ldrb	r3, [r7, #14]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <USER_SPI_initialize+0x14>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0cb      	b.n	8002e9c <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002d04:	4b67      	ldr	r3, [pc, #412]	; (8002ea4 <USER_SPI_initialize+0x1b4>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <USER_SPI_initialize+0x2a>
 8002d12:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <USER_SPI_initialize+0x1b4>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	e0c0      	b.n	8002e9c <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <USER_SPI_initialize+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d22:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002d24:	230a      	movs	r3, #10
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	e005      	b.n	8002d36 <USER_SPI_initialize+0x46>
 8002d2a:	20ff      	movs	r0, #255	; 0xff
 8002d2c:	f7ff fe7c 	bl	8002a28 <xchg_spi>
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f6      	bne.n	8002d2a <USER_SPI_initialize+0x3a>

	ty = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002d40:	2100      	movs	r1, #0
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7ff ff65 	bl	8002c12 <send_cmd>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	f040 808b 	bne.w	8002e66 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002d50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d54:	f7ff fe3e 	bl	80029d4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002d58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002d5c:	2008      	movs	r0, #8
 8002d5e:	f7ff ff58 	bl	8002c12 <send_cmd>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d151      	bne.n	8002e0c <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	e00d      	b.n	8002d8a <USER_SPI_initialize+0x9a>
 8002d6e:	7bfc      	ldrb	r4, [r7, #15]
 8002d70:	20ff      	movs	r0, #255	; 0xff
 8002d72:	f7ff fe59 	bl	8002a28 <xchg_spi>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f107 0310 	add.w	r3, r7, #16
 8002d7e:	4423      	add	r3, r4
 8002d80:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	3301      	adds	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d9ee      	bls.n	8002d6e <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002d90:	7abb      	ldrb	r3, [r7, #10]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d167      	bne.n	8002e66 <USER_SPI_initialize+0x176>
 8002d96:	7afb      	ldrb	r3, [r7, #11]
 8002d98:	2baa      	cmp	r3, #170	; 0xaa
 8002d9a:	d164      	bne.n	8002e66 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002d9c:	bf00      	nop
 8002d9e:	f7ff fe2d 	bl	80029fc <SPI_Timer_Status>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <USER_SPI_initialize+0xc8>
 8002da8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002dac:	20a9      	movs	r0, #169	; 0xa9
 8002dae:	f7ff ff30 	bl	8002c12 <send_cmd>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f2      	bne.n	8002d9e <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002db8:	f7ff fe20 	bl	80029fc <SPI_Timer_Status>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d051      	beq.n	8002e66 <USER_SPI_initialize+0x176>
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	203a      	movs	r0, #58	; 0x3a
 8002dc6:	f7ff ff24 	bl	8002c12 <send_cmd>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d14a      	bne.n	8002e66 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e00d      	b.n	8002df2 <USER_SPI_initialize+0x102>
 8002dd6:	7bfc      	ldrb	r4, [r7, #15]
 8002dd8:	20ff      	movs	r0, #255	; 0xff
 8002dda:	f7ff fe25 	bl	8002a28 <xchg_spi>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	f107 0310 	add.w	r3, r7, #16
 8002de6:	4423      	add	r3, r4
 8002de8:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	3301      	adds	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d9ee      	bls.n	8002dd6 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002df8:	7a3b      	ldrb	r3, [r7, #8]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <USER_SPI_initialize+0x116>
 8002e02:	230c      	movs	r3, #12
 8002e04:	e000      	b.n	8002e08 <USER_SPI_initialize+0x118>
 8002e06:	2304      	movs	r3, #4
 8002e08:	737b      	strb	r3, [r7, #13]
 8002e0a:	e02c      	b.n	8002e66 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	20a9      	movs	r0, #169	; 0xa9
 8002e10:	f7ff feff 	bl	8002c12 <send_cmd>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d804      	bhi.n	8002e24 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	737b      	strb	r3, [r7, #13]
 8002e1e:	23a9      	movs	r3, #169	; 0xa9
 8002e20:	73bb      	strb	r3, [r7, #14]
 8002e22:	e003      	b.n	8002e2c <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002e24:	2301      	movs	r3, #1
 8002e26:	737b      	strb	r3, [r7, #13]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002e2c:	bf00      	nop
 8002e2e:	f7ff fde5 	bl	80029fc <SPI_Timer_Status>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <USER_SPI_initialize+0x158>
 8002e38:	7bbb      	ldrb	r3, [r7, #14]
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fee8 	bl	8002c12 <send_cmd>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f2      	bne.n	8002e2e <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002e48:	f7ff fdd8 	bl	80029fc <SPI_Timer_Status>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <USER_SPI_initialize+0x172>
 8002e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e56:	2010      	movs	r0, #16
 8002e58:	f7ff fedb 	bl	8002c12 <send_cmd>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <USER_SPI_initialize+0x176>
				ty = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 8002e66:	4a11      	ldr	r2, [pc, #68]	; (8002eac <USER_SPI_initialize+0x1bc>)
 8002e68:	7b7b      	ldrb	r3, [r7, #13]
 8002e6a:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002e6c:	f7ff fe4a 	bl	8002b04 <despiselect>

	if (ty) {			/* OK */
 8002e70:	7b7b      	ldrb	r3, [r7, #13]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <USER_SPI_initialize+0x1b8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <USER_SPI_initialize+0x1b4>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <USER_SPI_initialize+0x1b4>)
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e002      	b.n	8002e96 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <USER_SPI_initialize+0x1b4>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002e96:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <USER_SPI_initialize+0x1b4>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b2db      	uxtb	r3, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd90      	pop	{r4, r7, pc}
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	200007a0 	.word	0x200007a0
 8002eac:	200000f4 	.word	0x200000f4

08002eb0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <USER_SPI_status+0x14>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e002      	b.n	8002eca <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <USER_SPI_status+0x28>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	b2db      	uxtb	r3, r3
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000004 	.word	0x20000004

08002edc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	4603      	mov	r3, r0
 8002eea:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <USER_SPI_read+0x1c>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <USER_SPI_read+0x20>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e04d      	b.n	8002f98 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002efc:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <USER_SPI_read+0xc4>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <USER_SPI_read+0x32>
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e044      	b.n	8002f98 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002f0e:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <USER_SPI_read+0xc8>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <USER_SPI_read+0x44>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	025b      	lsls	r3, r3, #9
 8002f1e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d111      	bne.n	8002f4a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	2011      	movs	r0, #17
 8002f2a:	f7ff fe72 	bl	8002c12 <send_cmd>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d129      	bne.n	8002f88 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f38:	68b8      	ldr	r0, [r7, #8]
 8002f3a:	f7ff fe0f 	bl	8002b5c <rcvr_datablock>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d021      	beq.n	8002f88 <USER_SPI_read+0xac>
			count = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	e01e      	b.n	8002f88 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	2012      	movs	r0, #18
 8002f4e:	f7ff fe60 	bl	8002c12 <send_cmd>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d117      	bne.n	8002f88 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f5c:	68b8      	ldr	r0, [r7, #8]
 8002f5e:	f7ff fdfd 	bl	8002b5c <rcvr_datablock>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <USER_SPI_read+0xa2>
				buff += 512;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f6e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ed      	bne.n	8002f58 <USER_SPI_read+0x7c>
 8002f7c:	e000      	b.n	8002f80 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002f7e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002f80:	2100      	movs	r1, #0
 8002f82:	200c      	movs	r0, #12
 8002f84:	f7ff fe45 	bl	8002c12 <send_cmd>
		}
	}
	despiselect();
 8002f88:	f7ff fdbc 	bl	8002b04 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf14      	ite	ne
 8002f92:	2301      	movne	r3, #1
 8002f94:	2300      	moveq	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	200000f4 	.word	0x200000f4

08002fa8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <USER_SPI_write+0x1c>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <USER_SPI_write+0x20>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	e063      	b.n	8003090 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002fc8:	4b33      	ldr	r3, [pc, #204]	; (8003098 <USER_SPI_write+0xf0>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <USER_SPI_write+0x32>
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e05a      	b.n	8003090 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002fda:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <USER_SPI_write+0xf0>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <USER_SPI_write+0x44>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e051      	b.n	8003090 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <USER_SPI_write+0xf4>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d102      	bne.n	8002ffe <USER_SPI_write+0x56>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	025b      	lsls	r3, r3, #9
 8002ffc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d110      	bne.n	8003026 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	2018      	movs	r0, #24
 8003008:	f7ff fe03 	bl	8002c12 <send_cmd>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d136      	bne.n	8003080 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003012:	21fe      	movs	r1, #254	; 0xfe
 8003014:	68b8      	ldr	r0, [r7, #8]
 8003016:	f7ff fdca 	bl	8002bae <xmit_datablock>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02f      	beq.n	8003080 <USER_SPI_write+0xd8>
			count = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	e02c      	b.n	8003080 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003026:	4b1d      	ldr	r3, [pc, #116]	; (800309c <USER_SPI_write+0xf4>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	f003 0306 	and.w	r3, r3, #6
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <USER_SPI_write+0x92>
 8003032:	6839      	ldr	r1, [r7, #0]
 8003034:	2097      	movs	r0, #151	; 0x97
 8003036:	f7ff fdec 	bl	8002c12 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	2019      	movs	r0, #25
 800303e:	f7ff fde8 	bl	8002c12 <send_cmd>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d11b      	bne.n	8003080 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003048:	21fc      	movs	r1, #252	; 0xfc
 800304a:	68b8      	ldr	r0, [r7, #8]
 800304c:	f7ff fdaf 	bl	8002bae <xmit_datablock>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <USER_SPI_write+0xc4>
				buff += 512;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800305c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	3b01      	subs	r3, #1
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ee      	bne.n	8003048 <USER_SPI_write+0xa0>
 800306a:	e000      	b.n	800306e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800306c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800306e:	21fd      	movs	r1, #253	; 0xfd
 8003070:	2000      	movs	r0, #0
 8003072:	f7ff fd9c 	bl	8002bae <xmit_datablock>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <USER_SPI_write+0xd8>
 800307c:	2301      	movs	r3, #1
 800307e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003080:	f7ff fd40 	bl	8002b04 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000004 	.word	0x20000004
 800309c:	200000f4 	.word	0x200000f4

080030a0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	; 0x30
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	603a      	str	r2, [r7, #0]
 80030aa:	71fb      	strb	r3, [r7, #7]
 80030ac:	460b      	mov	r3, r1
 80030ae:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <USER_SPI_ioctl+0x1a>
 80030b6:	2304      	movs	r3, #4
 80030b8:	e15a      	b.n	8003370 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80030ba:	4baf      	ldr	r3, [pc, #700]	; (8003378 <USER_SPI_ioctl+0x2d8>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <USER_SPI_ioctl+0x2c>
 80030c8:	2303      	movs	r3, #3
 80030ca:	e151      	b.n	8003370 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80030d2:	79bb      	ldrb	r3, [r7, #6]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	f200 8136 	bhi.w	8003346 <USER_SPI_ioctl+0x2a6>
 80030da:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <USER_SPI_ioctl+0x40>)
 80030dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e0:	080030f5 	.word	0x080030f5
 80030e4:	08003109 	.word	0x08003109
 80030e8:	08003347 	.word	0x08003347
 80030ec:	080031b5 	.word	0x080031b5
 80030f0:	080032ab 	.word	0x080032ab
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80030f4:	f7ff fd16 	bl	8002b24 <spiselect>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8127 	beq.w	800334e <USER_SPI_ioctl+0x2ae>
 8003100:	2300      	movs	r3, #0
 8003102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003106:	e122      	b.n	800334e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003108:	2100      	movs	r1, #0
 800310a:	2009      	movs	r0, #9
 800310c:	f7ff fd81 	bl	8002c12 <send_cmd>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 811d 	bne.w	8003352 <USER_SPI_ioctl+0x2b2>
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	2110      	movs	r1, #16
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fd1c 	bl	8002b5c <rcvr_datablock>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8113 	beq.w	8003352 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800312c:	7b3b      	ldrb	r3, [r7, #12]
 800312e:	099b      	lsrs	r3, r3, #6
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d111      	bne.n	800315a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003136:	7d7b      	ldrb	r3, [r7, #21]
 8003138:	461a      	mov	r2, r3
 800313a:	7d3b      	ldrb	r3, [r7, #20]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	4413      	add	r3, r2
 8003140:	461a      	mov	r2, r3
 8003142:	7cfb      	ldrb	r3, [r7, #19]
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800314a:	4413      	add	r3, r2
 800314c:	3301      	adds	r3, #1
 800314e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	029a      	lsls	r2, r3, #10
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e028      	b.n	80031ac <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800315a:	7c7b      	ldrb	r3, [r7, #17]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	b2da      	uxtb	r2, r3
 8003162:	7dbb      	ldrb	r3, [r7, #22]
 8003164:	09db      	lsrs	r3, r3, #7
 8003166:	b2db      	uxtb	r3, r3
 8003168:	4413      	add	r3, r2
 800316a:	b2da      	uxtb	r2, r3
 800316c:	7d7b      	ldrb	r3, [r7, #21]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f003 0306 	and.w	r3, r3, #6
 8003176:	b2db      	uxtb	r3, r3
 8003178:	4413      	add	r3, r2
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3302      	adds	r3, #2
 800317e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003182:	7d3b      	ldrb	r3, [r7, #20]
 8003184:	099b      	lsrs	r3, r3, #6
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	441a      	add	r2, r3
 8003190:	7cbb      	ldrb	r3, [r7, #18]
 8003192:	029b      	lsls	r3, r3, #10
 8003194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003198:	4413      	add	r3, r2
 800319a:	3301      	adds	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800319e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031a2:	3b09      	subs	r3, #9
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	409a      	lsls	r2, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80031b2:	e0ce      	b.n	8003352 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80031b4:	4b71      	ldr	r3, [pc, #452]	; (800337c <USER_SPI_ioctl+0x2dc>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d031      	beq.n	8003224 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80031c0:	2100      	movs	r1, #0
 80031c2:	208d      	movs	r0, #141	; 0x8d
 80031c4:	f7ff fd25 	bl	8002c12 <send_cmd>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f040 80c3 	bne.w	8003356 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80031d0:	20ff      	movs	r0, #255	; 0xff
 80031d2:	f7ff fc29 	bl	8002a28 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	2110      	movs	r1, #16
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fcbd 	bl	8002b5c <rcvr_datablock>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80b6 	beq.w	8003356 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80031ea:	2330      	movs	r3, #48	; 0x30
 80031ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80031f0:	e007      	b.n	8003202 <USER_SPI_ioctl+0x162>
 80031f2:	20ff      	movs	r0, #255	; 0xff
 80031f4:	f7ff fc18 	bl	8002a28 <xchg_spi>
 80031f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031fc:	3b01      	subs	r3, #1
 80031fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003202:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f3      	bne.n	80031f2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800320a:	7dbb      	ldrb	r3, [r7, #22]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	2310      	movs	r3, #16
 8003214:	fa03 f202 	lsl.w	r2, r3, r2
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003222:	e098      	b.n	8003356 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003224:	2100      	movs	r1, #0
 8003226:	2009      	movs	r0, #9
 8003228:	f7ff fcf3 	bl	8002c12 <send_cmd>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 8091 	bne.w	8003356 <USER_SPI_ioctl+0x2b6>
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	2110      	movs	r1, #16
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fc8e 	bl	8002b5c <rcvr_datablock>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8087 	beq.w	8003356 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003248:	4b4c      	ldr	r3, [pc, #304]	; (800337c <USER_SPI_ioctl+0x2dc>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d012      	beq.n	800327a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003254:	7dbb      	ldrb	r3, [r7, #22]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800325c:	7dfa      	ldrb	r2, [r7, #23]
 800325e:	09d2      	lsrs	r2, r2, #7
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	4413      	add	r3, r2
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	7e7b      	ldrb	r3, [r7, #25]
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	b2db      	uxtb	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	461a      	mov	r2, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e013      	b.n	80032a2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800327a:	7dbb      	ldrb	r3, [r7, #22]
 800327c:	109b      	asrs	r3, r3, #2
 800327e:	b29b      	uxth	r3, r3
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	3301      	adds	r3, #1
 8003286:	7dfa      	ldrb	r2, [r7, #23]
 8003288:	00d2      	lsls	r2, r2, #3
 800328a:	f002 0218 	and.w	r2, r2, #24
 800328e:	7df9      	ldrb	r1, [r7, #23]
 8003290:	0949      	lsrs	r1, r1, #5
 8003292:	b2c9      	uxtb	r1, r1
 8003294:	440a      	add	r2, r1
 8003296:	3201      	adds	r2, #1
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	461a      	mov	r2, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80032a8:	e055      	b.n	8003356 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80032aa:	4b34      	ldr	r3, [pc, #208]	; (800337c <USER_SPI_ioctl+0x2dc>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	f003 0306 	and.w	r3, r3, #6
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d051      	beq.n	800335a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80032b6:	f107 020c 	add.w	r2, r7, #12
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	210b      	movs	r1, #11
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff feee 	bl	80030a0 <USER_SPI_ioctl>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d149      	bne.n	800335e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80032ca:	7b3b      	ldrb	r3, [r7, #12]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <USER_SPI_ioctl+0x23e>
 80032d4:	7dbb      	ldrb	r3, [r7, #22]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d041      	beq.n	8003362 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	623b      	str	r3, [r7, #32]
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80032ee:	4b23      	ldr	r3, [pc, #140]	; (800337c <USER_SPI_ioctl+0x2dc>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d105      	bne.n	8003306 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	025b      	lsls	r3, r3, #9
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	025b      	lsls	r3, r3, #9
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003308:	2020      	movs	r0, #32
 800330a:	f7ff fc82 	bl	8002c12 <send_cmd>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d128      	bne.n	8003366 <USER_SPI_ioctl+0x2c6>
 8003314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003316:	2021      	movs	r0, #33	; 0x21
 8003318:	f7ff fc7b 	bl	8002c12 <send_cmd>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d121      	bne.n	8003366 <USER_SPI_ioctl+0x2c6>
 8003322:	2100      	movs	r1, #0
 8003324:	2026      	movs	r0, #38	; 0x26
 8003326:	f7ff fc74 	bl	8002c12 <send_cmd>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d11a      	bne.n	8003366 <USER_SPI_ioctl+0x2c6>
 8003330:	f247 5030 	movw	r0, #30000	; 0x7530
 8003334:	f7ff fbc3 	bl	8002abe <wait_ready>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d013      	beq.n	8003366 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800333e:	2300      	movs	r3, #0
 8003340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003344:	e00f      	b.n	8003366 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003346:	2304      	movs	r3, #4
 8003348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800334c:	e00c      	b.n	8003368 <USER_SPI_ioctl+0x2c8>
		break;
 800334e:	bf00      	nop
 8003350:	e00a      	b.n	8003368 <USER_SPI_ioctl+0x2c8>
		break;
 8003352:	bf00      	nop
 8003354:	e008      	b.n	8003368 <USER_SPI_ioctl+0x2c8>
		break;
 8003356:	bf00      	nop
 8003358:	e006      	b.n	8003368 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800335a:	bf00      	nop
 800335c:	e004      	b.n	8003368 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800335e:	bf00      	nop
 8003360:	e002      	b.n	8003368 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003362:	bf00      	nop
 8003364:	e000      	b.n	8003368 <USER_SPI_ioctl+0x2c8>
		break;
 8003366:	bf00      	nop
	}

	despiselect();
 8003368:	f7ff fbcc 	bl	8002b04 <despiselect>

	return res;
 800336c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003370:	4618      	mov	r0, r3
 8003372:	3730      	adds	r7, #48	; 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000004 	.word	0x20000004
 800337c:	200000f4 	.word	0x200000f4

08003380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003386:	e003      	b.n	8003390 <LoopCopyDataInit>

08003388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800338a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800338c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800338e:	3104      	adds	r1, #4

08003390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003390:	480b      	ldr	r0, [pc, #44]	; (80033c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003398:	d3f6      	bcc.n	8003388 <CopyDataInit>
  ldr  r2, =_sbss
 800339a:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800339c:	e002      	b.n	80033a4 <LoopFillZerobss>

0800339e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800339e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80033a0:	f842 3b04 	str.w	r3, [r2], #4

080033a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80033a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80033a8:	d3f9      	bcc.n	800339e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033aa:	f7ff fafd 	bl	80029a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ae:	f005 fd13 	bl	8008dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033b2:	f7fd ffad 	bl	8001310 <main>
  bx  lr    
 80033b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80033bc:	080097c4 	.word	0x080097c4
  ldr  r0, =_sdata
 80033c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80033c4:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80033c8:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80033cc:	200014fc 	.word	0x200014fc

080033d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033d0:	e7fe      	b.n	80033d0 <ADC_IRQHandler>
	...

080033d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033d8:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <HAL_Init+0x40>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <HAL_Init+0x40>)
 80033de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_Init+0x40>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <HAL_Init+0x40>)
 80033ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <HAL_Init+0x40>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a07      	ldr	r2, [pc, #28]	; (8003414 <HAL_Init+0x40>)
 80033f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033fc:	2003      	movs	r0, #3
 80033fe:	f000 f94d 	bl	800369c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003402:	2000      	movs	r0, #0
 8003404:	f000 f808 	bl	8003418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003408:	f7fe fe8e 	bl	8002128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023c00 	.word	0x40023c00

08003418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_InitTick+0x54>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_InitTick+0x58>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4619      	mov	r1, r3
 800342a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800342e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003432:	fbb2 f3f3 	udiv	r3, r2, r3
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f965 	bl	8003706 <HAL_SYSTICK_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e00e      	b.n	8003464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b0f      	cmp	r3, #15
 800344a:	d80a      	bhi.n	8003462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800344c:	2200      	movs	r2, #0
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003454:	f000 f92d 	bl	80036b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003458:	4a06      	ldr	r2, [pc, #24]	; (8003474 <HAL_InitTick+0x5c>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000000 	.word	0x20000000
 8003470:	2000000c 	.word	0x2000000c
 8003474:	20000008 	.word	0x20000008

08003478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_IncTick+0x20>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_IncTick+0x24>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4413      	add	r3, r2
 8003488:	4a04      	ldr	r2, [pc, #16]	; (800349c <HAL_IncTick+0x24>)
 800348a:	6013      	str	r3, [r2, #0]
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	2000000c 	.word	0x2000000c
 800349c:	2000108c 	.word	0x2000108c

080034a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return uwTick;
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_GetTick+0x14>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2000108c 	.word	0x2000108c

080034b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c0:	f7ff ffee 	bl	80034a0 <HAL_GetTick>
 80034c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d0:	d005      	beq.n	80034de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_Delay+0x40>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034de:	bf00      	nop
 80034e0:	f7ff ffde 	bl	80034a0 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d8f7      	bhi.n	80034e0 <HAL_Delay+0x28>
  {
  }
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	2000000c 	.word	0x2000000c

080034fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003518:	4013      	ands	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352e:	4a04      	ldr	r2, [pc, #16]	; (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	60d3      	str	r3, [r2, #12]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <__NVIC_GetPriorityGrouping+0x18>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	f003 0307 	and.w	r3, r3, #7
}
 8003552:	4618      	mov	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	2b00      	cmp	r3, #0
 8003570:	db0b      	blt.n	800358a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	f003 021f 	and.w	r2, r3, #31
 8003578:	4907      	ldr	r1, [pc, #28]	; (8003598 <__NVIC_EnableIRQ+0x38>)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2001      	movs	r0, #1
 8003582:	fa00 f202 	lsl.w	r2, r0, r2
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000e100 	.word	0xe000e100

0800359c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	6039      	str	r1, [r7, #0]
 80035a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db0a      	blt.n	80035c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	490c      	ldr	r1, [pc, #48]	; (80035e8 <__NVIC_SetPriority+0x4c>)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	0112      	lsls	r2, r2, #4
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	440b      	add	r3, r1
 80035c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c4:	e00a      	b.n	80035dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4908      	ldr	r1, [pc, #32]	; (80035ec <__NVIC_SetPriority+0x50>)
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	3b04      	subs	r3, #4
 80035d4:	0112      	lsls	r2, r2, #4
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	440b      	add	r3, r1
 80035da:	761a      	strb	r2, [r3, #24]
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	e000e100 	.word	0xe000e100
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b089      	sub	sp, #36	; 0x24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f1c3 0307 	rsb	r3, r3, #7
 800360a:	2b04      	cmp	r3, #4
 800360c:	bf28      	it	cs
 800360e:	2304      	movcs	r3, #4
 8003610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3304      	adds	r3, #4
 8003616:	2b06      	cmp	r3, #6
 8003618:	d902      	bls.n	8003620 <NVIC_EncodePriority+0x30>
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3b03      	subs	r3, #3
 800361e:	e000      	b.n	8003622 <NVIC_EncodePriority+0x32>
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43da      	mvns	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	401a      	ands	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003638:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	43d9      	mvns	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003648:	4313      	orrs	r3, r2
         );
}
 800364a:	4618      	mov	r0, r3
 800364c:	3724      	adds	r7, #36	; 0x24
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
	...

08003658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003668:	d301      	bcc.n	800366e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800366a:	2301      	movs	r3, #1
 800366c:	e00f      	b.n	800368e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <SysTick_Config+0x40>)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003676:	210f      	movs	r1, #15
 8003678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800367c:	f7ff ff8e 	bl	800359c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <SysTick_Config+0x40>)
 8003682:	2200      	movs	r2, #0
 8003684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003686:	4b04      	ldr	r3, [pc, #16]	; (8003698 <SysTick_Config+0x40>)
 8003688:	2207      	movs	r2, #7
 800368a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	e000e010 	.word	0xe000e010

0800369c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ff29 	bl	80034fc <__NVIC_SetPriorityGrouping>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b086      	sub	sp, #24
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	4603      	mov	r3, r0
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036c4:	f7ff ff3e 	bl	8003544 <__NVIC_GetPriorityGrouping>
 80036c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	6978      	ldr	r0, [r7, #20]
 80036d0:	f7ff ff8e 	bl	80035f0 <NVIC_EncodePriority>
 80036d4:	4602      	mov	r2, r0
 80036d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff ff5d 	bl	800359c <__NVIC_SetPriority>
}
 80036e2:	bf00      	nop
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	4603      	mov	r3, r0
 80036f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ff31 	bl	8003560 <__NVIC_EnableIRQ>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff ffa2 	bl	8003658 <SysTick_Config>
 8003714:	4603      	mov	r3, r0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800372c:	f7ff feb8 	bl	80034a0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e099      	b.n	8003870 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800375c:	e00f      	b.n	800377e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800375e:	f7ff fe9f 	bl	80034a0 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b05      	cmp	r3, #5
 800376a:	d908      	bls.n	800377e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2203      	movs	r2, #3
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e078      	b.n	8003870 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e8      	bne.n	800375e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4b38      	ldr	r3, [pc, #224]	; (8003878 <HAL_DMA_Init+0x158>)
 8003798:	4013      	ands	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d107      	bne.n	80037e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	4313      	orrs	r3, r2
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0307 	bic.w	r3, r3, #7
 80037fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	2b04      	cmp	r3, #4
 8003810:	d117      	bne.n	8003842 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00e      	beq.n	8003842 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fb0d 	bl	8003e44 <DMA_CheckFifoParam>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2240      	movs	r2, #64	; 0x40
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800383e:	2301      	movs	r3, #1
 8003840:	e016      	b.n	8003870 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fac4 	bl	8003dd8 <DMA_CalcBaseAndBitshift>
 8003850:	4603      	mov	r3, r0
 8003852:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003858:	223f      	movs	r2, #63	; 0x3f
 800385a:	409a      	lsls	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	f010803f 	.word	0xf010803f

0800387c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_DMA_Start_IT+0x26>
 800389e:	2302      	movs	r3, #2
 80038a0:	e040      	b.n	8003924 <HAL_DMA_Start_IT+0xa8>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d12f      	bne.n	8003916 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fa56 	bl	8003d7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d4:	223f      	movs	r2, #63	; 0x3f
 80038d6:	409a      	lsls	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0216 	orr.w	r2, r2, #22
 80038ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0208 	orr.w	r2, r2, #8
 8003902:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e005      	b.n	8003922 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800391e:	2302      	movs	r3, #2
 8003920:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003922:	7dfb      	ldrb	r3, [r7, #23]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800393a:	f7ff fdb1 	bl	80034a0 <HAL_GetTick>
 800393e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d008      	beq.n	800395e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e052      	b.n	8003a04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0216 	bic.w	r2, r2, #22
 800396c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800397c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <HAL_DMA_Abort+0x62>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0208 	bic.w	r2, r2, #8
 800399c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ae:	e013      	b.n	80039d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039b0:	f7ff fd76 	bl	80034a0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d90c      	bls.n	80039d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2203      	movs	r2, #3
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e015      	b.n	8003a04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e4      	bne.n	80039b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	223f      	movs	r2, #63	; 0x3f
 80039ec:	409a      	lsls	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d004      	beq.n	8003a2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2280      	movs	r2, #128	; 0x80
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00c      	b.n	8003a44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2205      	movs	r2, #5
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0201 	bic.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a5c:	4b92      	ldr	r3, [pc, #584]	; (8003ca8 <HAL_DMA_IRQHandler+0x258>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a92      	ldr	r2, [pc, #584]	; (8003cac <HAL_DMA_IRQHandler+0x25c>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	0a9b      	lsrs	r3, r3, #10
 8003a68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	2208      	movs	r2, #8
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01a      	beq.n	8003abc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d013      	beq.n	8003abc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0204 	bic.w	r2, r2, #4
 8003aa2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	f043 0201 	orr.w	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d012      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	2201      	movs	r2, #1
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	2204      	movs	r2, #4
 8003af8:	409a      	lsls	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d012      	beq.n	8003b28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	2204      	movs	r2, #4
 8003b16:	409a      	lsls	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f043 0204 	orr.w	r2, r3, #4
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d043      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d03c      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d018      	beq.n	8003b92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d108      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d024      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
 8003b7e:	e01f      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01b      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	4798      	blx	r3
 8003b90:	e016      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d107      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0208 	bic.w	r2, r2, #8
 8003bae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 808e 	beq.w	8003cee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8086 	beq.w	8003cee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	2220      	movs	r2, #32
 8003be8:	409a      	lsls	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d136      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0216 	bic.w	r2, r2, #22
 8003c08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <HAL_DMA_IRQHandler+0x1da>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0208 	bic.w	r2, r2, #8
 8003c38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3e:	223f      	movs	r2, #63	; 0x3f
 8003c40:	409a      	lsls	r2, r3
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d07d      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
        }
        return;
 8003c66:	e078      	b.n	8003d5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01c      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d108      	bne.n	8003c96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d030      	beq.n	8003cee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
 8003c94:	e02b      	b.n	8003cee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d027      	beq.n	8003cee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	4798      	blx	r3
 8003ca6:	e022      	b.n	8003cee <HAL_DMA_IRQHandler+0x29e>
 8003ca8:	20000000 	.word	0x20000000
 8003cac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0210 	bic.w	r2, r2, #16
 8003ccc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d032      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d022      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2205      	movs	r2, #5
 8003d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d307      	bcc.n	8003d36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f2      	bne.n	8003d1a <HAL_DMA_IRQHandler+0x2ca>
 8003d34:	e000      	b.n	8003d38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d36:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4798      	blx	r3
 8003d58:	e000      	b.n	8003d5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d5a:	bf00      	nop
    }
  }
}
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop

08003d64 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d108      	bne.n	8003dbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dba:	e007      	b.n	8003dcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	60da      	str	r2, [r3, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	3b10      	subs	r3, #16
 8003de8:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <DMA_CalcBaseAndBitshift+0x64>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003df2:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <DMA_CalcBaseAndBitshift+0x68>)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d909      	bls.n	8003e1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e0e:	f023 0303 	bic.w	r3, r3, #3
 8003e12:	1d1a      	adds	r2, r3, #4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	659a      	str	r2, [r3, #88]	; 0x58
 8003e18:	e007      	b.n	8003e2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	aaaaaaab 	.word	0xaaaaaaab
 8003e40:	080096f8 	.word	0x080096f8

08003e44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11f      	bne.n	8003e9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d855      	bhi.n	8003f10 <DMA_CheckFifoParam+0xcc>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <DMA_CheckFifoParam+0x28>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e7d 	.word	0x08003e7d
 8003e70:	08003e8f 	.word	0x08003e8f
 8003e74:	08003e7d 	.word	0x08003e7d
 8003e78:	08003f11 	.word	0x08003f11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d045      	beq.n	8003f14 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8c:	e042      	b.n	8003f14 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e96:	d13f      	bne.n	8003f18 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e9c:	e03c      	b.n	8003f18 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea6:	d121      	bne.n	8003eec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d836      	bhi.n	8003f1c <DMA_CheckFifoParam+0xd8>
 8003eae:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <DMA_CheckFifoParam+0x70>)
 8003eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb4:	08003ec5 	.word	0x08003ec5
 8003eb8:	08003ecb 	.word	0x08003ecb
 8003ebc:	08003ec5 	.word	0x08003ec5
 8003ec0:	08003edd 	.word	0x08003edd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec8:	e02f      	b.n	8003f2a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d024      	beq.n	8003f20 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eda:	e021      	b.n	8003f20 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ee4:	d11e      	bne.n	8003f24 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003eea:	e01b      	b.n	8003f24 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d902      	bls.n	8003ef8 <DMA_CheckFifoParam+0xb4>
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d003      	beq.n	8003efe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ef6:	e018      	b.n	8003f2a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
      break;
 8003efc:	e015      	b.n	8003f2a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00e      	beq.n	8003f28 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f0e:	e00b      	b.n	8003f28 <DMA_CheckFifoParam+0xe4>
      break;
 8003f10:	bf00      	nop
 8003f12:	e00a      	b.n	8003f2a <DMA_CheckFifoParam+0xe6>
      break;
 8003f14:	bf00      	nop
 8003f16:	e008      	b.n	8003f2a <DMA_CheckFifoParam+0xe6>
      break;
 8003f18:	bf00      	nop
 8003f1a:	e006      	b.n	8003f2a <DMA_CheckFifoParam+0xe6>
      break;
 8003f1c:	bf00      	nop
 8003f1e:	e004      	b.n	8003f2a <DMA_CheckFifoParam+0xe6>
      break;
 8003f20:	bf00      	nop
 8003f22:	e002      	b.n	8003f2a <DMA_CheckFifoParam+0xe6>
      break;   
 8003f24:	bf00      	nop
 8003f26:	e000      	b.n	8003f2a <DMA_CheckFifoParam+0xe6>
      break;
 8003f28:	bf00      	nop
    }
  } 
  
  return status; 
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	; 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	e165      	b.n	8004220 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f54:	2201      	movs	r2, #1
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	f040 8154 	bne.w	800421a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d00b      	beq.n	8003f92 <HAL_GPIO_Init+0x5a>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d007      	beq.n	8003f92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f86:	2b11      	cmp	r3, #17
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b12      	cmp	r3, #18
 8003f90:	d130      	bne.n	8003ff4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fc8:	2201      	movs	r2, #1
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 0201 	and.w	r2, r3, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	2203      	movs	r2, #3
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d003      	beq.n	8004034 <HAL_GPIO_Init+0xfc>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b12      	cmp	r3, #18
 8004032:	d123      	bne.n	800407c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	08da      	lsrs	r2, r3, #3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3208      	adds	r2, #8
 800403c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	220f      	movs	r2, #15
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4013      	ands	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	08da      	lsrs	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3208      	adds	r2, #8
 8004076:	69b9      	ldr	r1, [r7, #24]
 8004078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	2203      	movs	r2, #3
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0203 	and.w	r2, r3, #3
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80ae 	beq.w	800421a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	4b5c      	ldr	r3, [pc, #368]	; (8004234 <HAL_GPIO_Init+0x2fc>)
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	4a5b      	ldr	r2, [pc, #364]	; (8004234 <HAL_GPIO_Init+0x2fc>)
 80040c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040cc:	6453      	str	r3, [r2, #68]	; 0x44
 80040ce:	4b59      	ldr	r3, [pc, #356]	; (8004234 <HAL_GPIO_Init+0x2fc>)
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040da:	4a57      	ldr	r2, [pc, #348]	; (8004238 <HAL_GPIO_Init+0x300>)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	3302      	adds	r3, #2
 80040e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	220f      	movs	r2, #15
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4013      	ands	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a4e      	ldr	r2, [pc, #312]	; (800423c <HAL_GPIO_Init+0x304>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d025      	beq.n	8004152 <HAL_GPIO_Init+0x21a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4d      	ldr	r2, [pc, #308]	; (8004240 <HAL_GPIO_Init+0x308>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01f      	beq.n	800414e <HAL_GPIO_Init+0x216>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4c      	ldr	r2, [pc, #304]	; (8004244 <HAL_GPIO_Init+0x30c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d019      	beq.n	800414a <HAL_GPIO_Init+0x212>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4b      	ldr	r2, [pc, #300]	; (8004248 <HAL_GPIO_Init+0x310>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_GPIO_Init+0x20e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4a      	ldr	r2, [pc, #296]	; (800424c <HAL_GPIO_Init+0x314>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00d      	beq.n	8004142 <HAL_GPIO_Init+0x20a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a49      	ldr	r2, [pc, #292]	; (8004250 <HAL_GPIO_Init+0x318>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <HAL_GPIO_Init+0x206>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a48      	ldr	r2, [pc, #288]	; (8004254 <HAL_GPIO_Init+0x31c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_GPIO_Init+0x202>
 8004136:	2306      	movs	r3, #6
 8004138:	e00c      	b.n	8004154 <HAL_GPIO_Init+0x21c>
 800413a:	2307      	movs	r3, #7
 800413c:	e00a      	b.n	8004154 <HAL_GPIO_Init+0x21c>
 800413e:	2305      	movs	r3, #5
 8004140:	e008      	b.n	8004154 <HAL_GPIO_Init+0x21c>
 8004142:	2304      	movs	r3, #4
 8004144:	e006      	b.n	8004154 <HAL_GPIO_Init+0x21c>
 8004146:	2303      	movs	r3, #3
 8004148:	e004      	b.n	8004154 <HAL_GPIO_Init+0x21c>
 800414a:	2302      	movs	r3, #2
 800414c:	e002      	b.n	8004154 <HAL_GPIO_Init+0x21c>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_GPIO_Init+0x21c>
 8004152:	2300      	movs	r3, #0
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	f002 0203 	and.w	r2, r2, #3
 800415a:	0092      	lsls	r2, r2, #2
 800415c:	4093      	lsls	r3, r2
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004164:	4934      	ldr	r1, [pc, #208]	; (8004238 <HAL_GPIO_Init+0x300>)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	3302      	adds	r3, #2
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004172:	4b39      	ldr	r3, [pc, #228]	; (8004258 <HAL_GPIO_Init+0x320>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004196:	4a30      	ldr	r2, [pc, #192]	; (8004258 <HAL_GPIO_Init+0x320>)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800419c:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_GPIO_Init+0x320>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041c0:	4a25      	ldr	r2, [pc, #148]	; (8004258 <HAL_GPIO_Init+0x320>)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_GPIO_Init+0x320>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4013      	ands	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ea:	4a1b      	ldr	r2, [pc, #108]	; (8004258 <HAL_GPIO_Init+0x320>)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041f0:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_GPIO_Init+0x320>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4013      	ands	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004214:	4a10      	ldr	r2, [pc, #64]	; (8004258 <HAL_GPIO_Init+0x320>)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3301      	adds	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	f67f ae96 	bls.w	8003f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004228:	bf00      	nop
 800422a:	3724      	adds	r7, #36	; 0x24
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40023800 	.word	0x40023800
 8004238:	40013800 	.word	0x40013800
 800423c:	40020000 	.word	0x40020000
 8004240:	40020400 	.word	0x40020400
 8004244:	40020800 	.word	0x40020800
 8004248:	40020c00 	.word	0x40020c00
 800424c:	40021000 	.word	0x40021000
 8004250:	40021400 	.word	0x40021400
 8004254:	40021800 	.word	0x40021800
 8004258:	40013c00 	.word	0x40013c00

0800425c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	887b      	ldrh	r3, [r7, #2]
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
 8004278:	e001      	b.n	800427e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
 8004298:	4613      	mov	r3, r2
 800429a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800429c:	787b      	ldrb	r3, [r7, #1]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042a8:	e003      	b.n	80042b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	041a      	lsls	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	619a      	str	r2, [r3, #24]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <HAL_PWREx_EnableOverDrive+0x90>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	4a1f      	ldr	r2, [pc, #124]	; (8004350 <HAL_PWREx_EnableOverDrive+0x90>)
 80042d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d8:	6413      	str	r3, [r2, #64]	; 0x40
 80042da:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <HAL_PWREx_EnableOverDrive+0x90>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042e6:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <HAL_PWREx_EnableOverDrive+0x94>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042ec:	f7ff f8d8 	bl	80034a0 <HAL_GetTick>
 80042f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042f2:	e009      	b.n	8004308 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042f4:	f7ff f8d4 	bl	80034a0 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004302:	d901      	bls.n	8004308 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e01f      	b.n	8004348 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_PWREx_EnableOverDrive+0x98>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004314:	d1ee      	bne.n	80042f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004316:	4b11      	ldr	r3, [pc, #68]	; (800435c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004318:	2201      	movs	r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800431c:	f7ff f8c0 	bl	80034a0 <HAL_GetTick>
 8004320:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004322:	e009      	b.n	8004338 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004324:	f7ff f8bc 	bl	80034a0 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004332:	d901      	bls.n	8004338 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e007      	b.n	8004348 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004338:	4b07      	ldr	r3, [pc, #28]	; (8004358 <HAL_PWREx_EnableOverDrive+0x98>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004344:	d1ee      	bne.n	8004324 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40023800 	.word	0x40023800
 8004354:	420e0040 	.word	0x420e0040
 8004358:	40007000 	.word	0x40007000
 800435c:	420e0044 	.word	0x420e0044

08004360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0cc      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004374:	4b68      	ldr	r3, [pc, #416]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d90c      	bls.n	800439c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004382:	4b65      	ldr	r3, [pc, #404]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b63      	ldr	r3, [pc, #396]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0b8      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b4:	4b59      	ldr	r3, [pc, #356]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a58      	ldr	r2, [pc, #352]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043cc:	4b53      	ldr	r3, [pc, #332]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4a52      	ldr	r2, [pc, #328]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d8:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	494d      	ldr	r1, [pc, #308]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d044      	beq.n	8004480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b47      	ldr	r3, [pc, #284]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d119      	bne.n	800443e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e07f      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d003      	beq.n	800441e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800441a:	2b03      	cmp	r3, #3
 800441c:	d107      	bne.n	800442e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441e:	4b3f      	ldr	r3, [pc, #252]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e06f      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442e:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e067      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800443e:	4b37      	ldr	r3, [pc, #220]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f023 0203 	bic.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4934      	ldr	r1, [pc, #208]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004450:	f7ff f826 	bl	80034a0 <HAL_GetTick>
 8004454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	e00a      	b.n	800446e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004458:	f7ff f822 	bl	80034a0 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e04f      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	4b2b      	ldr	r3, [pc, #172]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 020c 	and.w	r2, r3, #12
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	429a      	cmp	r2, r3
 800447e:	d1eb      	bne.n	8004458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d20c      	bcs.n	80044a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448e:	4b22      	ldr	r3, [pc, #136]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e032      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4916      	ldr	r1, [pc, #88]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	490e      	ldr	r1, [pc, #56]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044e6:	f000 f855 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 80044ea:	4601      	mov	r1, r0
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <HAL_RCC_ClockConfig+0x1c0>)
 80044f8:	5cd3      	ldrb	r3, [r2, r3]
 80044fa:	fa21 f303 	lsr.w	r3, r1, r3
 80044fe:	4a09      	ldr	r2, [pc, #36]	; (8004524 <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe ff86 	bl	8003418 <HAL_InitTick>

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023c00 	.word	0x40023c00
 800451c:	40023800 	.word	0x40023800
 8004520:	080096e0 	.word	0x080096e0
 8004524:	20000000 	.word	0x20000000
 8004528:	20000008 	.word	0x20000008

0800452c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <HAL_RCC_GetHCLKFreq+0x14>)
 8004532:	681b      	ldr	r3, [r3, #0]
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000000 	.word	0x20000000

08004544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004548:	f7ff fff0 	bl	800452c <HAL_RCC_GetHCLKFreq>
 800454c:	4601      	mov	r1, r0
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	0a9b      	lsrs	r3, r3, #10
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	4a03      	ldr	r2, [pc, #12]	; (8004568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800455a:	5cd3      	ldrb	r3, [r2, r3]
 800455c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004560:	4618      	mov	r0, r3
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40023800 	.word	0x40023800
 8004568:	080096f0 	.word	0x080096f0

0800456c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004570:	f7ff ffdc 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004574:	4601      	mov	r1, r0
 8004576:	4b05      	ldr	r3, [pc, #20]	; (800458c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	0b5b      	lsrs	r3, r3, #13
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	4a03      	ldr	r2, [pc, #12]	; (8004590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004582:	5cd3      	ldrb	r3, [r2, r3]
 8004584:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40023800 	.word	0x40023800
 8004590:	080096f0 	.word	0x080096f0

08004594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ae:	4bc6      	ldr	r3, [pc, #792]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x334>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b0c      	cmp	r3, #12
 80045b8:	f200 817e 	bhi.w	80048b8 <HAL_RCC_GetSysClockFreq+0x324>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <HAL_RCC_GetSysClockFreq+0x30>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045f9 	.word	0x080045f9
 80045c8:	080048b9 	.word	0x080048b9
 80045cc:	080048b9 	.word	0x080048b9
 80045d0:	080048b9 	.word	0x080048b9
 80045d4:	080045ff 	.word	0x080045ff
 80045d8:	080048b9 	.word	0x080048b9
 80045dc:	080048b9 	.word	0x080048b9
 80045e0:	080048b9 	.word	0x080048b9
 80045e4:	08004605 	.word	0x08004605
 80045e8:	080048b9 	.word	0x080048b9
 80045ec:	080048b9 	.word	0x080048b9
 80045f0:	080048b9 	.word	0x080048b9
 80045f4:	08004761 	.word	0x08004761
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4bb4      	ldr	r3, [pc, #720]	; (80048cc <HAL_RCC_GetSysClockFreq+0x338>)
 80045fa:	613b      	str	r3, [r7, #16]
       break;
 80045fc:	e15f      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045fe:	4bb4      	ldr	r3, [pc, #720]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004600:	613b      	str	r3, [r7, #16]
      break;
 8004602:	e15c      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004604:	4bb0      	ldr	r3, [pc, #704]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800460c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800460e:	4bae      	ldr	r3, [pc, #696]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d04a      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461a:	4bab      	ldr	r3, [pc, #684]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x334>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	099b      	lsrs	r3, r3, #6
 8004620:	f04f 0400 	mov.w	r4, #0
 8004624:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	ea03 0501 	and.w	r5, r3, r1
 8004630:	ea04 0602 	and.w	r6, r4, r2
 8004634:	4629      	mov	r1, r5
 8004636:	4632      	mov	r2, r6
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	f04f 0400 	mov.w	r4, #0
 8004640:	0154      	lsls	r4, r2, #5
 8004642:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004646:	014b      	lsls	r3, r1, #5
 8004648:	4619      	mov	r1, r3
 800464a:	4622      	mov	r2, r4
 800464c:	1b49      	subs	r1, r1, r5
 800464e:	eb62 0206 	sbc.w	r2, r2, r6
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	f04f 0400 	mov.w	r4, #0
 800465a:	0194      	lsls	r4, r2, #6
 800465c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004660:	018b      	lsls	r3, r1, #6
 8004662:	1a5b      	subs	r3, r3, r1
 8004664:	eb64 0402 	sbc.w	r4, r4, r2
 8004668:	f04f 0100 	mov.w	r1, #0
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	00e2      	lsls	r2, r4, #3
 8004672:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004676:	00d9      	lsls	r1, r3, #3
 8004678:	460b      	mov	r3, r1
 800467a:	4614      	mov	r4, r2
 800467c:	195b      	adds	r3, r3, r5
 800467e:	eb44 0406 	adc.w	r4, r4, r6
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	0262      	lsls	r2, r4, #9
 800468c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004690:	0259      	lsls	r1, r3, #9
 8004692:	460b      	mov	r3, r1
 8004694:	4614      	mov	r4, r2
 8004696:	4618      	mov	r0, r3
 8004698:	4621      	mov	r1, r4
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f04f 0400 	mov.w	r4, #0
 80046a0:	461a      	mov	r2, r3
 80046a2:	4623      	mov	r3, r4
 80046a4:	f7fb fe04 	bl	80002b0 <__aeabi_uldivmod>
 80046a8:	4603      	mov	r3, r0
 80046aa:	460c      	mov	r4, r1
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	e049      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b0:	4b85      	ldr	r3, [pc, #532]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x334>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	099b      	lsrs	r3, r3, #6
 80046b6:	f04f 0400 	mov.w	r4, #0
 80046ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	ea03 0501 	and.w	r5, r3, r1
 80046c6:	ea04 0602 	and.w	r6, r4, r2
 80046ca:	4629      	mov	r1, r5
 80046cc:	4632      	mov	r2, r6
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	f04f 0400 	mov.w	r4, #0
 80046d6:	0154      	lsls	r4, r2, #5
 80046d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046dc:	014b      	lsls	r3, r1, #5
 80046de:	4619      	mov	r1, r3
 80046e0:	4622      	mov	r2, r4
 80046e2:	1b49      	subs	r1, r1, r5
 80046e4:	eb62 0206 	sbc.w	r2, r2, r6
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	f04f 0400 	mov.w	r4, #0
 80046f0:	0194      	lsls	r4, r2, #6
 80046f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046f6:	018b      	lsls	r3, r1, #6
 80046f8:	1a5b      	subs	r3, r3, r1
 80046fa:	eb64 0402 	sbc.w	r4, r4, r2
 80046fe:	f04f 0100 	mov.w	r1, #0
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	00e2      	lsls	r2, r4, #3
 8004708:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800470c:	00d9      	lsls	r1, r3, #3
 800470e:	460b      	mov	r3, r1
 8004710:	4614      	mov	r4, r2
 8004712:	195b      	adds	r3, r3, r5
 8004714:	eb44 0406 	adc.w	r4, r4, r6
 8004718:	f04f 0100 	mov.w	r1, #0
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	02a2      	lsls	r2, r4, #10
 8004722:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004726:	0299      	lsls	r1, r3, #10
 8004728:	460b      	mov	r3, r1
 800472a:	4614      	mov	r4, r2
 800472c:	4618      	mov	r0, r3
 800472e:	4621      	mov	r1, r4
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f04f 0400 	mov.w	r4, #0
 8004736:	461a      	mov	r2, r3
 8004738:	4623      	mov	r3, r4
 800473a:	f7fb fdb9 	bl	80002b0 <__aeabi_uldivmod>
 800473e:	4603      	mov	r3, r0
 8004740:	460c      	mov	r4, r1
 8004742:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004744:	4b60      	ldr	r3, [pc, #384]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	3301      	adds	r3, #1
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	613b      	str	r3, [r7, #16]
      break;
 800475e:	e0ae      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004760:	4b59      	ldr	r3, [pc, #356]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004768:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800476a:	4b57      	ldr	r3, [pc, #348]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x334>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d04a      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004776:	4b54      	ldr	r3, [pc, #336]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	099b      	lsrs	r3, r3, #6
 800477c:	f04f 0400 	mov.w	r4, #0
 8004780:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	ea03 0501 	and.w	r5, r3, r1
 800478c:	ea04 0602 	and.w	r6, r4, r2
 8004790:	4629      	mov	r1, r5
 8004792:	4632      	mov	r2, r6
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	f04f 0400 	mov.w	r4, #0
 800479c:	0154      	lsls	r4, r2, #5
 800479e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047a2:	014b      	lsls	r3, r1, #5
 80047a4:	4619      	mov	r1, r3
 80047a6:	4622      	mov	r2, r4
 80047a8:	1b49      	subs	r1, r1, r5
 80047aa:	eb62 0206 	sbc.w	r2, r2, r6
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	f04f 0400 	mov.w	r4, #0
 80047b6:	0194      	lsls	r4, r2, #6
 80047b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047bc:	018b      	lsls	r3, r1, #6
 80047be:	1a5b      	subs	r3, r3, r1
 80047c0:	eb64 0402 	sbc.w	r4, r4, r2
 80047c4:	f04f 0100 	mov.w	r1, #0
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	00e2      	lsls	r2, r4, #3
 80047ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047d2:	00d9      	lsls	r1, r3, #3
 80047d4:	460b      	mov	r3, r1
 80047d6:	4614      	mov	r4, r2
 80047d8:	195b      	adds	r3, r3, r5
 80047da:	eb44 0406 	adc.w	r4, r4, r6
 80047de:	f04f 0100 	mov.w	r1, #0
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	0262      	lsls	r2, r4, #9
 80047e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80047ec:	0259      	lsls	r1, r3, #9
 80047ee:	460b      	mov	r3, r1
 80047f0:	4614      	mov	r4, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	4621      	mov	r1, r4
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f04f 0400 	mov.w	r4, #0
 80047fc:	461a      	mov	r2, r3
 80047fe:	4623      	mov	r3, r4
 8004800:	f7fb fd56 	bl	80002b0 <__aeabi_uldivmod>
 8004804:	4603      	mov	r3, r0
 8004806:	460c      	mov	r4, r1
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e049      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480c:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x334>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	f04f 0400 	mov.w	r4, #0
 8004816:	f240 11ff 	movw	r1, #511	; 0x1ff
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	ea03 0501 	and.w	r5, r3, r1
 8004822:	ea04 0602 	and.w	r6, r4, r2
 8004826:	4629      	mov	r1, r5
 8004828:	4632      	mov	r2, r6
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	f04f 0400 	mov.w	r4, #0
 8004832:	0154      	lsls	r4, r2, #5
 8004834:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004838:	014b      	lsls	r3, r1, #5
 800483a:	4619      	mov	r1, r3
 800483c:	4622      	mov	r2, r4
 800483e:	1b49      	subs	r1, r1, r5
 8004840:	eb62 0206 	sbc.w	r2, r2, r6
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	f04f 0400 	mov.w	r4, #0
 800484c:	0194      	lsls	r4, r2, #6
 800484e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004852:	018b      	lsls	r3, r1, #6
 8004854:	1a5b      	subs	r3, r3, r1
 8004856:	eb64 0402 	sbc.w	r4, r4, r2
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	00e2      	lsls	r2, r4, #3
 8004864:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004868:	00d9      	lsls	r1, r3, #3
 800486a:	460b      	mov	r3, r1
 800486c:	4614      	mov	r4, r2
 800486e:	195b      	adds	r3, r3, r5
 8004870:	eb44 0406 	adc.w	r4, r4, r6
 8004874:	f04f 0100 	mov.w	r1, #0
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	02a2      	lsls	r2, r4, #10
 800487e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004882:	0299      	lsls	r1, r3, #10
 8004884:	460b      	mov	r3, r1
 8004886:	4614      	mov	r4, r2
 8004888:	4618      	mov	r0, r3
 800488a:	4621      	mov	r1, r4
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f04f 0400 	mov.w	r4, #0
 8004892:	461a      	mov	r2, r3
 8004894:	4623      	mov	r3, r4
 8004896:	f7fb fd0b 	bl	80002b0 <__aeabi_uldivmod>
 800489a:	4603      	mov	r3, r0
 800489c:	460c      	mov	r4, r1
 800489e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x334>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	0f1b      	lsrs	r3, r3, #28
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	613b      	str	r3, [r7, #16]
      break;
 80048b6:	e002      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <HAL_RCC_GetSysClockFreq+0x338>)
 80048ba:	613b      	str	r3, [r7, #16]
      break;
 80048bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048be:	693b      	ldr	r3, [r7, #16]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c8:	40023800 	.word	0x40023800
 80048cc:	00f42400 	.word	0x00f42400
 80048d0:	007a1200 	.word	0x007a1200

080048d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8083 	beq.w	80049f4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048ee:	4b95      	ldr	r3, [pc, #596]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d019      	beq.n	800492e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048fa:	4b92      	ldr	r3, [pc, #584]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004902:	2b08      	cmp	r3, #8
 8004904:	d106      	bne.n	8004914 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004906:	4b8f      	ldr	r3, [pc, #572]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004912:	d00c      	beq.n	800492e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004914:	4b8b      	ldr	r3, [pc, #556]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800491c:	2b0c      	cmp	r3, #12
 800491e:	d112      	bne.n	8004946 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004920:	4b88      	ldr	r3, [pc, #544]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800492c:	d10b      	bne.n	8004946 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492e:	4b85      	ldr	r3, [pc, #532]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d05b      	beq.n	80049f2 <HAL_RCC_OscConfig+0x11e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d157      	bne.n	80049f2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e216      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494e:	d106      	bne.n	800495e <HAL_RCC_OscConfig+0x8a>
 8004950:	4b7c      	ldr	r3, [pc, #496]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a7b      	ldr	r2, [pc, #492]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e01d      	b.n	800499a <HAL_RCC_OscConfig+0xc6>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004966:	d10c      	bne.n	8004982 <HAL_RCC_OscConfig+0xae>
 8004968:	4b76      	ldr	r3, [pc, #472]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a75      	ldr	r2, [pc, #468]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 800496e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b73      	ldr	r3, [pc, #460]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a72      	ldr	r2, [pc, #456]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 800497a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	e00b      	b.n	800499a <HAL_RCC_OscConfig+0xc6>
 8004982:	4b70      	ldr	r3, [pc, #448]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a6f      	ldr	r2, [pc, #444]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	4b6d      	ldr	r3, [pc, #436]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a6c      	ldr	r2, [pc, #432]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004998:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d013      	beq.n	80049ca <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a2:	f7fe fd7d 	bl	80034a0 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049aa:	f7fe fd79 	bl	80034a0 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b64      	cmp	r3, #100	; 0x64
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e1db      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049bc:	4b61      	ldr	r3, [pc, #388]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0xd6>
 80049c8:	e014      	b.n	80049f4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ca:	f7fe fd69 	bl	80034a0 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d2:	f7fe fd65 	bl	80034a0 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b64      	cmp	r3, #100	; 0x64
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e1c7      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e4:	4b57      	ldr	r3, [pc, #348]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1f0      	bne.n	80049d2 <HAL_RCC_OscConfig+0xfe>
 80049f0:	e000      	b.n	80049f4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d06f      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a00:	4b50      	ldr	r3, [pc, #320]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d017      	beq.n	8004a3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a0c:	4b4d      	ldr	r3, [pc, #308]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d105      	bne.n	8004a24 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a18:	4b4a      	ldr	r3, [pc, #296]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00b      	beq.n	8004a3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a24:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a2c:	2b0c      	cmp	r3, #12
 8004a2e:	d11c      	bne.n	8004a6a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a30:	4b44      	ldr	r3, [pc, #272]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d116      	bne.n	8004a6a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3c:	4b41      	ldr	r3, [pc, #260]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_OscConfig+0x180>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e18f      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a54:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4938      	ldr	r1, [pc, #224]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a68:	e03a      	b.n	8004ae0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d020      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a72:	4b35      	ldr	r3, [pc, #212]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fe fd12 	bl	80034a0 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fe fd0e 	bl	80034a0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e170      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a92:	4b2c      	ldr	r3, [pc, #176]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9e:	4b29      	ldr	r3, [pc, #164]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4925      	ldr	r1, [pc, #148]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]
 8004ab2:	e015      	b.n	8004ae0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ab4:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fe fcf1 	bl	80034a0 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac2:	f7fe fced 	bl	80034a0 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e14f      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad4:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d037      	beq.n	8004b5c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d016      	beq.n	8004b22 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004af4:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <HAL_RCC_OscConfig+0x278>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fe fcd1 	bl	80034a0 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b02:	f7fe fccd 	bl	80034a0 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e12f      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x22e>
 8004b20:	e01c      	b.n	8004b5c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <HAL_RCC_OscConfig+0x278>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fe fcba 	bl	80034a0 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b2e:	e00f      	b.n	8004b50 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b30:	f7fe fcb6 	bl	80034a0 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d908      	bls.n	8004b50 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e118      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	42470000 	.word	0x42470000
 8004b4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b50:	4b8a      	ldr	r3, [pc, #552]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e9      	bne.n	8004b30 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8097 	beq.w	8004c98 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b6e:	4b83      	ldr	r3, [pc, #524]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	4b7f      	ldr	r3, [pc, #508]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	4a7e      	ldr	r2, [pc, #504]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8a:	4b7c      	ldr	r3, [pc, #496]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9a:	4b79      	ldr	r3, [pc, #484]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d118      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ba6:	4b76      	ldr	r3, [pc, #472]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a75      	ldr	r2, [pc, #468]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb2:	f7fe fc75 	bl	80034a0 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bba:	f7fe fc71 	bl	80034a0 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e0d3      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bcc:	4b6c      	ldr	r3, [pc, #432]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0f0      	beq.n	8004bba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d106      	bne.n	8004bee <HAL_RCC_OscConfig+0x31a>
 8004be0:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	4a65      	ldr	r2, [pc, #404]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	6713      	str	r3, [r2, #112]	; 0x70
 8004bec:	e01c      	b.n	8004c28 <HAL_RCC_OscConfig+0x354>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	d10c      	bne.n	8004c10 <HAL_RCC_OscConfig+0x33c>
 8004bf6:	4b61      	ldr	r3, [pc, #388]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	4a60      	ldr	r2, [pc, #384]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004bfc:	f043 0304 	orr.w	r3, r3, #4
 8004c00:	6713      	str	r3, [r2, #112]	; 0x70
 8004c02:	4b5e      	ldr	r3, [pc, #376]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	4a5d      	ldr	r2, [pc, #372]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0e:	e00b      	b.n	8004c28 <HAL_RCC_OscConfig+0x354>
 8004c10:	4b5a      	ldr	r3, [pc, #360]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	4a59      	ldr	r2, [pc, #356]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1c:	4b57      	ldr	r3, [pc, #348]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	4a56      	ldr	r2, [pc, #344]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004c22:	f023 0304 	bic.w	r3, r3, #4
 8004c26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d015      	beq.n	8004c5c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c30:	f7fe fc36 	bl	80034a0 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c38:	f7fe fc32 	bl	80034a0 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e092      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4e:	4b4b      	ldr	r3, [pc, #300]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0ee      	beq.n	8004c38 <HAL_RCC_OscConfig+0x364>
 8004c5a:	e014      	b.n	8004c86 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5c:	f7fe fc20 	bl	80034a0 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c62:	e00a      	b.n	8004c7a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c64:	f7fe fc1c 	bl	80034a0 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e07c      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c7a:	4b40      	ldr	r3, [pc, #256]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1ee      	bne.n	8004c64 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d105      	bne.n	8004c98 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8c:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	4a3a      	ldr	r2, [pc, #232]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d068      	beq.n	8004d72 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ca0:	4b36      	ldr	r3, [pc, #216]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d060      	beq.n	8004d6e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d145      	bne.n	8004d40 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb4:	4b33      	ldr	r3, [pc, #204]	; (8004d84 <HAL_RCC_OscConfig+0x4b0>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cba:	f7fe fbf1 	bl	80034a0 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc2:	f7fe fbed 	bl	80034a0 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e04f      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd4:	4b29      	ldr	r3, [pc, #164]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	019b      	lsls	r3, r3, #6
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	071b      	lsls	r3, r3, #28
 8004d0c:	491b      	ldr	r1, [pc, #108]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d12:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <HAL_RCC_OscConfig+0x4b0>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fe fbc2 	bl	80034a0 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fe fbbe 	bl	80034a0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e020      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d32:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0x44c>
 8004d3e:	e018      	b.n	8004d72 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d40:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <HAL_RCC_OscConfig+0x4b0>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d46:	f7fe fbab 	bl	80034a0 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d4e:	f7fe fba7 	bl	80034a0 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e009      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCC_OscConfig+0x4a8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f0      	bne.n	8004d4e <HAL_RCC_OscConfig+0x47a>
 8004d6c:	e001      	b.n	8004d72 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	40007000 	.word	0x40007000
 8004d84:	42470060 	.word	0x42470060

08004d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e056      	b.n	8004e48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fd f9df 	bl	8002178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	ea42 0103 	orr.w	r1, r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	0c1b      	lsrs	r3, r3, #16
 8004e18:	f003 0104 	and.w	r1, r3, #4
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_SPI_Transmit+0x22>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e11e      	b.n	80050b0 <HAL_SPI_Transmit+0x260>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e7a:	f7fe fb11 	bl	80034a0 <HAL_GetTick>
 8004e7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d002      	beq.n	8004e96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
 8004e92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e94:	e103      	b.n	800509e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_SPI_Transmit+0x52>
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ea6:	e0fa      	b.n	800509e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eee:	d107      	bne.n	8004f00 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004efe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d007      	beq.n	8004f1e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f26:	d14b      	bne.n	8004fc0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_SPI_Transmit+0xe6>
 8004f30:	8afb      	ldrh	r3, [r7, #22]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d13e      	bne.n	8004fb4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	1c9a      	adds	r2, r3, #2
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f5a:	e02b      	b.n	8004fb4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d112      	bne.n	8004f90 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	1c9a      	adds	r2, r3, #2
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f8e:	e011      	b.n	8004fb4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f90:	f7fe fa86 	bl	80034a0 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d803      	bhi.n	8004fa8 <HAL_SPI_Transmit+0x158>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa6:	d102      	bne.n	8004fae <HAL_SPI_Transmit+0x15e>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fb2:	e074      	b.n	800509e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1ce      	bne.n	8004f5c <HAL_SPI_Transmit+0x10c>
 8004fbe:	e04c      	b.n	800505a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <HAL_SPI_Transmit+0x17e>
 8004fc8:	8afb      	ldrh	r3, [r7, #22]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d140      	bne.n	8005050 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	7812      	ldrb	r2, [r2, #0]
 8004fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ff4:	e02c      	b.n	8005050 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	d113      	bne.n	800502c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	330c      	adds	r3, #12
 800500e:	7812      	ldrb	r2, [r2, #0]
 8005010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	86da      	strh	r2, [r3, #54]	; 0x36
 800502a:	e011      	b.n	8005050 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800502c:	f7fe fa38 	bl	80034a0 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d803      	bhi.n	8005044 <HAL_SPI_Transmit+0x1f4>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005042:	d102      	bne.n	800504a <HAL_SPI_Transmit+0x1fa>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d102      	bne.n	8005050 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800504e:	e026      	b.n	800509e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1cd      	bne.n	8004ff6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fa36 	bl	80054d0 <SPI_EndRxTxTransaction>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e000      	b.n	800509e <HAL_SPI_Transmit+0x24e>
  }

error:
 800509c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08c      	sub	sp, #48	; 0x30
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050c6:	2301      	movs	r3, #1
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_SPI_TransmitReceive+0x26>
 80050da:	2302      	movs	r3, #2
 80050dc:	e18a      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x33c>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050e6:	f7fe f9db 	bl	80034a0 <HAL_GetTick>
 80050ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050fc:	887b      	ldrh	r3, [r7, #2]
 80050fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005104:	2b01      	cmp	r3, #1
 8005106:	d00f      	beq.n	8005128 <HAL_SPI_TransmitReceive+0x70>
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510e:	d107      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d103      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x68>
 8005118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800511c:	2b04      	cmp	r3, #4
 800511e:	d003      	beq.n	8005128 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005120:	2302      	movs	r3, #2
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005126:	e15b      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_SPI_TransmitReceive+0x82>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_SPI_TransmitReceive+0x82>
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005140:	e14e      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b04      	cmp	r3, #4
 800514c:	d003      	beq.n	8005156 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2205      	movs	r2, #5
 8005152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	887a      	ldrh	r2, [r7, #2]
 8005166:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	887a      	ldrh	r2, [r7, #2]
 800516c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	887a      	ldrh	r2, [r7, #2]
 8005178:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	887a      	ldrh	r2, [r7, #2]
 800517e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d007      	beq.n	80051aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b2:	d178      	bne.n	80052a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_SPI_TransmitReceive+0x10a>
 80051bc:	8b7b      	ldrh	r3, [r7, #26]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d166      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	881a      	ldrh	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	1c9a      	adds	r2, r3, #2
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e6:	e053      	b.n	8005290 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d11b      	bne.n	800522e <HAL_SPI_TransmitReceive+0x176>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d016      	beq.n	800522e <HAL_SPI_TransmitReceive+0x176>
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	2b01      	cmp	r3, #1
 8005204:	d113      	bne.n	800522e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	881a      	ldrh	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	1c9a      	adds	r2, r3, #2
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b01      	cmp	r3, #1
 800523a:	d119      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x1b8>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d014      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	b292      	uxth	r2, r2
 8005252:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	1c9a      	adds	r2, r3, #2
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800526c:	2301      	movs	r3, #1
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005270:	f7fe f916 	bl	80034a0 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800527c:	429a      	cmp	r2, r3
 800527e:	d807      	bhi.n	8005290 <HAL_SPI_TransmitReceive+0x1d8>
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005286:	d003      	beq.n	8005290 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800528e:	e0a7      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1a6      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x130>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1a1      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x130>
 80052a4:	e07c      	b.n	80053a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0x1fc>
 80052ae:	8b7b      	ldrh	r3, [r7, #26]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d16b      	bne.n	800538c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052da:	e057      	b.n	800538c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d11c      	bne.n	8005324 <HAL_SPI_TransmitReceive+0x26c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <HAL_SPI_TransmitReceive+0x26c>
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d114      	bne.n	8005324 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	330c      	adds	r3, #12
 8005304:	7812      	ldrb	r2, [r2, #0]
 8005306:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b01      	cmp	r3, #1
 8005330:	d119      	bne.n	8005366 <HAL_SPI_TransmitReceive+0x2ae>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d014      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005362:	2301      	movs	r3, #1
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005366:	f7fe f89b 	bl	80034a0 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005372:	429a      	cmp	r2, r3
 8005374:	d803      	bhi.n	800537e <HAL_SPI_TransmitReceive+0x2c6>
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800537c:	d102      	bne.n	8005384 <HAL_SPI_TransmitReceive+0x2cc>
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800538a:	e029      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1a2      	bne.n	80052dc <HAL_SPI_TransmitReceive+0x224>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d19d      	bne.n	80052dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f893 	bl	80054d0 <SPI_EndRxTxTransaction>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d006      	beq.n	80053be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053bc:	e010      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10b      	bne.n	80053de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	e000      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3730      	adds	r7, #48	; 0x30
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800540c:	e04c      	b.n	80054a8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005414:	d048      	beq.n	80054a8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005416:	f7fe f843 	bl	80034a0 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d902      	bls.n	800542c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d13d      	bne.n	80054a8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800543a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005444:	d111      	bne.n	800546a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544e:	d004      	beq.n	800545a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005458:	d107      	bne.n	800546a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005468:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005472:	d10f      	bne.n	8005494 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005492:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e00f      	b.n	80054c8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4013      	ands	r3, r2
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	bf0c      	ite	eq
 80054b8:	2301      	moveq	r3, #1
 80054ba:	2300      	movne	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d1a3      	bne.n	800540e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054dc:	4b1b      	ldr	r3, [pc, #108]	; (800554c <SPI_EndRxTxTransaction+0x7c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1b      	ldr	r2, [pc, #108]	; (8005550 <SPI_EndRxTxTransaction+0x80>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	0d5b      	lsrs	r3, r3, #21
 80054e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054ec:	fb02 f303 	mul.w	r3, r2, r3
 80054f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054fa:	d112      	bne.n	8005522 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2200      	movs	r2, #0
 8005504:	2180      	movs	r1, #128	; 0x80
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7ff ff78 	bl	80053fc <SPI_WaitFlagStateUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e00f      	b.n	8005542 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3b01      	subs	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005538:	2b80      	cmp	r3, #128	; 0x80
 800553a:	d0f2      	beq.n	8005522 <SPI_EndRxTxTransaction+0x52>
 800553c:	e000      	b.n	8005540 <SPI_EndRxTxTransaction+0x70>
        break;
 800553e:	bf00      	nop
  }

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20000000 	.word	0x20000000
 8005550:	165e9f81 	.word	0x165e9f81

08005554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e01d      	b.n	80055a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fc feac 	bl	80022d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f000 f988 	bl	80058a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b06      	cmp	r3, #6
 80055d2:	d007      	beq.n	80055e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6a1a      	ldr	r2, [r3, #32]
 8005610:	f241 1311 	movw	r3, #4369	; 0x1111
 8005614:	4013      	ands	r3, r2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <HAL_TIM_Base_Stop_IT+0x48>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6a1a      	ldr	r2, [r3, #32]
 8005620:	f240 4344 	movw	r3, #1092	; 0x444
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d107      	bne.n	800563a <HAL_TIM_Base_Stop_IT+0x48>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b02      	cmp	r3, #2
 800565c:	d122      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d11b      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0202 	mvn.w	r2, #2
 8005674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f8ee 	bl	800586c <HAL_TIM_IC_CaptureCallback>
 8005690:	e005      	b.n	800569e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f8e0 	bl	8005858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f8f1 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d122      	bne.n	80056f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d11b      	bne.n	80056f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0204 	mvn.w	r2, #4
 80056c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f8c4 	bl	800586c <HAL_TIM_IC_CaptureCallback>
 80056e4:	e005      	b.n	80056f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8b6 	bl	8005858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f8c7 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b08      	cmp	r3, #8
 8005704:	d122      	bne.n	800574c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b08      	cmp	r3, #8
 8005712:	d11b      	bne.n	800574c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0208 	mvn.w	r2, #8
 800571c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2204      	movs	r2, #4
 8005722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f89a 	bl	800586c <HAL_TIM_IC_CaptureCallback>
 8005738:	e005      	b.n	8005746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f88c 	bl	8005858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f89d 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b10      	cmp	r3, #16
 8005758:	d122      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b10      	cmp	r3, #16
 8005766:	d11b      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0210 	mvn.w	r2, #16
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2208      	movs	r2, #8
 8005776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f870 	bl	800586c <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f862 	bl	8005858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f873 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0201 	mvn.w	r2, #1
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fc fbc0 	bl	8001f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b80      	cmp	r3, #128	; 0x80
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b80      	cmp	r3, #128	; 0x80
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f97e 	bl	8005af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f838 	bl	8005894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b20      	cmp	r3, #32
 8005830:	d10e      	bne.n	8005850 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b20      	cmp	r3, #32
 800583e:	d107      	bne.n	8005850 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0220 	mvn.w	r2, #32
 8005848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f948 	bl	8005ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005850:	bf00      	nop
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a40      	ldr	r2, [pc, #256]	; (80059bc <TIM_Base_SetConfig+0x114>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c6:	d00f      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a3d      	ldr	r2, [pc, #244]	; (80059c0 <TIM_Base_SetConfig+0x118>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a3c      	ldr	r2, [pc, #240]	; (80059c4 <TIM_Base_SetConfig+0x11c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a3b      	ldr	r2, [pc, #236]	; (80059c8 <TIM_Base_SetConfig+0x120>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a3a      	ldr	r2, [pc, #232]	; (80059cc <TIM_Base_SetConfig+0x124>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d108      	bne.n	80058fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2f      	ldr	r2, [pc, #188]	; (80059bc <TIM_Base_SetConfig+0x114>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d02b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005908:	d027      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2c      	ldr	r2, [pc, #176]	; (80059c0 <TIM_Base_SetConfig+0x118>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d023      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2b      	ldr	r2, [pc, #172]	; (80059c4 <TIM_Base_SetConfig+0x11c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01f      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a2a      	ldr	r2, [pc, #168]	; (80059c8 <TIM_Base_SetConfig+0x120>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a29      	ldr	r2, [pc, #164]	; (80059cc <TIM_Base_SetConfig+0x124>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d017      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a28      	ldr	r2, [pc, #160]	; (80059d0 <TIM_Base_SetConfig+0x128>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a27      	ldr	r2, [pc, #156]	; (80059d4 <TIM_Base_SetConfig+0x12c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00f      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <TIM_Base_SetConfig+0x130>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00b      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a25      	ldr	r2, [pc, #148]	; (80059dc <TIM_Base_SetConfig+0x134>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a24      	ldr	r2, [pc, #144]	; (80059e0 <TIM_Base_SetConfig+0x138>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <TIM_Base_SetConfig+0x13c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d108      	bne.n	800596c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <TIM_Base_SetConfig+0x114>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_Base_SetConfig+0xf8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a0c      	ldr	r2, [pc, #48]	; (80059cc <TIM_Base_SetConfig+0x124>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d103      	bne.n	80059a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	615a      	str	r2, [r3, #20]
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40010400 	.word	0x40010400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40014400 	.word	0x40014400
 80059d8:	40014800 	.word	0x40014800
 80059dc:	40001800 	.word	0x40001800
 80059e0:	40001c00 	.word	0x40001c00
 80059e4:	40002000 	.word	0x40002000

080059e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e05a      	b.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a21      	ldr	r2, [pc, #132]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d022      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d01d      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1d      	ldr	r2, [pc, #116]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d018      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1a      	ldr	r2, [pc, #104]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00e      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a17      	ldr	r2, [pc, #92]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d10c      	bne.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40010400 	.word	0x40010400
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	40001800 	.word	0x40001800

08005ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e03f      	b.n	8005b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fc fc36 	bl	80023a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2224      	movs	r2, #36	; 0x24
 8005b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fc03 	bl	8006358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695a      	ldr	r2, [r3, #20]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d166      	bne.n	8005c8c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_UART_Receive_DMA+0x26>
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e05f      	b.n	8005c8e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_UART_Receive_DMA+0x38>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e058      	b.n	8005c8e <HAL_UART_Receive_DMA+0xea>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	88fa      	ldrh	r2, [r7, #6]
 8005bee:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2222      	movs	r2, #34	; 0x22
 8005bfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c02:	4a25      	ldr	r2, [pc, #148]	; (8005c98 <HAL_UART_Receive_DMA+0xf4>)
 8005c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0a:	4a24      	ldr	r2, [pc, #144]	; (8005c9c <HAL_UART_Receive_DMA+0xf8>)
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	4a23      	ldr	r2, [pc, #140]	; (8005ca0 <HAL_UART_Receive_DMA+0xfc>)
 8005c14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005c1e:	f107 0308 	add.w	r3, r7, #8
 8005c22:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4619      	mov	r1, r3
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	88fb      	ldrh	r3, [r7, #6]
 8005c36:	f7fd fe21 	bl	800387c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c66:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695a      	ldr	r2, [r3, #20]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c86:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e000      	b.n	8005c8e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005c8c:	2302      	movs	r3, #2
  }
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	08005fd1 	.word	0x08005fd1
 8005c9c:	08006039 	.word	0x08006039
 8005ca0:	08006055 	.word	0x08006055

08005ca4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005cba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695a      	ldr	r2, [r3, #20]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	2b80      	cmp	r3, #128	; 0x80
 8005cd8:	d124      	bne.n	8005d24 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695a      	ldr	r2, [r3, #20]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ce8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fd fe14 	bl	800392c <HAL_DMA_Abort>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe f828 	bl	8003d64 <HAL_DMA_GetError>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d104      	bne.n	8005d24 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e03d      	b.n	8005da0 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d124      	bne.n	8005d7c <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695a      	ldr	r2, [r3, #20]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d40:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d018      	beq.n	8005d7c <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	2200      	movs	r2, #0
 8005d50:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fd fde8 	bl	800392c <HAL_DMA_Abort>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00c      	beq.n	8005d7c <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fd fffc 	bl	8003d64 <HAL_DMA_GetError>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d104      	bne.n	8005d7c <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2210      	movs	r2, #16
 8005d76:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e011      	b.n	8005da0 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10d      	bne.n	8005dfa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d008      	beq.n	8005dfa <HAL_UART_IRQHandler+0x52>
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa2e 	bl	8006254 <UART_Receive_IT>
      return;
 8005df8:	e0d1      	b.n	8005f9e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80b0 	beq.w	8005f62 <HAL_UART_IRQHandler+0x1ba>
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <HAL_UART_IRQHandler+0x70>
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80a5 	beq.w	8005f62 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <HAL_UART_IRQHandler+0x90>
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	f043 0201 	orr.w	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_UART_IRQHandler+0xb0>
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e50:	f043 0202 	orr.w	r2, r3, #2
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <HAL_UART_IRQHandler+0xd0>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e70:	f043 0204 	orr.w	r2, r3, #4
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00f      	beq.n	8005ea2 <HAL_UART_IRQHandler+0xfa>
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <HAL_UART_IRQHandler+0xee>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9a:	f043 0208 	orr.w	r2, r3, #8
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d078      	beq.n	8005f9c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d007      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x11c>
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f9c8 	bl	8006254 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	bf0c      	ite	eq
 8005ed2:	2301      	moveq	r3, #1
 8005ed4:	2300      	movne	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d102      	bne.n	8005eec <HAL_UART_IRQHandler+0x144>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d031      	beq.n	8005f50 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f911 	bl	8006114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efc:	2b40      	cmp	r3, #64	; 0x40
 8005efe:	d123      	bne.n	8005f48 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d013      	beq.n	8005f40 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1c:	4a21      	ldr	r2, [pc, #132]	; (8005fa4 <HAL_UART_IRQHandler+0x1fc>)
 8005f1e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fd fd71 	bl	8003a0c <HAL_DMA_Abort_IT>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d016      	beq.n	8005f5e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3e:	e00e      	b.n	8005f5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f83b 	bl	8005fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f46:	e00a      	b.n	8005f5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f837 	bl	8005fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4e:	e006      	b.n	8005f5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f833 	bl	8005fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f5c:	e01e      	b.n	8005f9c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5e:	bf00      	nop
    return;
 8005f60:	e01c      	b.n	8005f9c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_UART_IRQHandler+0x1d6>
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f8fe 	bl	8006178 <UART_Transmit_IT>
    return;
 8005f7c:	e00f      	b.n	8005f9e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1f6>
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f946 	bl	8006224 <UART_EndTransmit_IT>
    return;
 8005f98:	bf00      	nop
 8005f9a:	e000      	b.n	8005f9e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005f9c:	bf00      	nop
  }
}
 8005f9e:	3720      	adds	r7, #32
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	08006151 	.word	0x08006151

08005fa8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fdc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d11e      	bne.n	800602a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006000:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695a      	ldr	r2, [r3, #20]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006020:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7fb fda2 	bl	8001b74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff ffae 	bl	8005fa8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006070:	2b80      	cmp	r3, #128	; 0x80
 8006072:	bf0c      	ite	eq
 8006074:	2301      	moveq	r3, #1
 8006076:	2300      	movne	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b21      	cmp	r3, #33	; 0x21
 8006086:	d108      	bne.n	800609a <UART_DMAError+0x46>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2200      	movs	r2, #0
 8006092:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006094:	68b8      	ldr	r0, [r7, #8]
 8006096:	f000 f827 	bl	80060e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	bf0c      	ite	eq
 80060a8:	2301      	moveq	r3, #1
 80060aa:	2300      	movne	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b22      	cmp	r3, #34	; 0x22
 80060ba:	d108      	bne.n	80060ce <UART_DMAError+0x7a>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2200      	movs	r2, #0
 80060c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80060c8:	68b8      	ldr	r0, [r7, #8]
 80060ca:	f000 f823 	bl	8006114 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	f043 0210 	orr.w	r2, r3, #16
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060da:	68b8      	ldr	r0, [r7, #8]
 80060dc:	f7ff ff6e 	bl	8005fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80060fe:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800612a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff ff26 	bl	8005fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006170:	bf00      	nop
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b21      	cmp	r3, #33	; 0x21
 800618a:	d144      	bne.n	8006216 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006194:	d11a      	bne.n	80061cc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061aa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	1c9a      	adds	r2, r3, #2
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]
 80061be:	e00e      	b.n	80061de <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	621a      	str	r2, [r3, #32]
 80061ca:	e008      	b.n	80061de <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	1c59      	adds	r1, r3, #1
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6211      	str	r1, [r2, #32]
 80061d6:	781a      	ldrb	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4619      	mov	r1, r3
 80061ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10f      	bne.n	8006212 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006200:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006210:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e000      	b.n	8006218 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006216:	2302      	movs	r3, #2
  }
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7fb fe77 	bl	8001f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b22      	cmp	r3, #34	; 0x22
 8006266:	d171      	bne.n	800634c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006270:	d123      	bne.n	80062ba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10e      	bne.n	800629e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	1c9a      	adds	r2, r3, #2
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	629a      	str	r2, [r3, #40]	; 0x28
 800629c:	e029      	b.n	80062f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	629a      	str	r2, [r3, #40]	; 0x28
 80062b8:	e01b      	b.n	80062f2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6858      	ldr	r0, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	1c59      	adds	r1, r3, #1
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6291      	str	r1, [r2, #40]	; 0x28
 80062d2:	b2c2      	uxtb	r2, r0
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	e00c      	b.n	80062f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	1c58      	adds	r0, r3, #1
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	6288      	str	r0, [r1, #40]	; 0x28
 80062ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	4619      	mov	r1, r3
 8006300:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006302:	2b00      	cmp	r3, #0
 8006304:	d120      	bne.n	8006348 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0220 	bic.w	r2, r2, #32
 8006314:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006324:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695a      	ldr	r2, [r3, #20]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0201 	bic.w	r2, r2, #1
 8006334:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fb fc18 	bl	8001b74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	e002      	b.n	800634e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	e000      	b.n	800634e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800634c:	2302      	movs	r3, #2
  }
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800639a:	f023 030c 	bic.w	r3, r3, #12
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6812      	ldr	r2, [r2, #0]
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	430b      	orrs	r3, r1
 80063a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c6:	f040 818b 	bne.w	80066e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4ac1      	ldr	r2, [pc, #772]	; (80066d4 <UART_SetConfig+0x37c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d005      	beq.n	80063e0 <UART_SetConfig+0x88>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4abf      	ldr	r2, [pc, #764]	; (80066d8 <UART_SetConfig+0x380>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	f040 80bd 	bne.w	800655a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063e0:	f7fe f8c4 	bl	800456c <HAL_RCC_GetPCLK2Freq>
 80063e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	461d      	mov	r5, r3
 80063ea:	f04f 0600 	mov.w	r6, #0
 80063ee:	46a8      	mov	r8, r5
 80063f0:	46b1      	mov	r9, r6
 80063f2:	eb18 0308 	adds.w	r3, r8, r8
 80063f6:	eb49 0409 	adc.w	r4, r9, r9
 80063fa:	4698      	mov	r8, r3
 80063fc:	46a1      	mov	r9, r4
 80063fe:	eb18 0805 	adds.w	r8, r8, r5
 8006402:	eb49 0906 	adc.w	r9, r9, r6
 8006406:	f04f 0100 	mov.w	r1, #0
 800640a:	f04f 0200 	mov.w	r2, #0
 800640e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006412:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006416:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800641a:	4688      	mov	r8, r1
 800641c:	4691      	mov	r9, r2
 800641e:	eb18 0005 	adds.w	r0, r8, r5
 8006422:	eb49 0106 	adc.w	r1, r9, r6
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	461d      	mov	r5, r3
 800642c:	f04f 0600 	mov.w	r6, #0
 8006430:	196b      	adds	r3, r5, r5
 8006432:	eb46 0406 	adc.w	r4, r6, r6
 8006436:	461a      	mov	r2, r3
 8006438:	4623      	mov	r3, r4
 800643a:	f7f9 ff39 	bl	80002b0 <__aeabi_uldivmod>
 800643e:	4603      	mov	r3, r0
 8006440:	460c      	mov	r4, r1
 8006442:	461a      	mov	r2, r3
 8006444:	4ba5      	ldr	r3, [pc, #660]	; (80066dc <UART_SetConfig+0x384>)
 8006446:	fba3 2302 	umull	r2, r3, r3, r2
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	461d      	mov	r5, r3
 8006454:	f04f 0600 	mov.w	r6, #0
 8006458:	46a9      	mov	r9, r5
 800645a:	46b2      	mov	sl, r6
 800645c:	eb19 0309 	adds.w	r3, r9, r9
 8006460:	eb4a 040a 	adc.w	r4, sl, sl
 8006464:	4699      	mov	r9, r3
 8006466:	46a2      	mov	sl, r4
 8006468:	eb19 0905 	adds.w	r9, r9, r5
 800646c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006470:	f04f 0100 	mov.w	r1, #0
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800647c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006480:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006484:	4689      	mov	r9, r1
 8006486:	4692      	mov	sl, r2
 8006488:	eb19 0005 	adds.w	r0, r9, r5
 800648c:	eb4a 0106 	adc.w	r1, sl, r6
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	461d      	mov	r5, r3
 8006496:	f04f 0600 	mov.w	r6, #0
 800649a:	196b      	adds	r3, r5, r5
 800649c:	eb46 0406 	adc.w	r4, r6, r6
 80064a0:	461a      	mov	r2, r3
 80064a2:	4623      	mov	r3, r4
 80064a4:	f7f9 ff04 	bl	80002b0 <__aeabi_uldivmod>
 80064a8:	4603      	mov	r3, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	461a      	mov	r2, r3
 80064ae:	4b8b      	ldr	r3, [pc, #556]	; (80066dc <UART_SetConfig+0x384>)
 80064b0:	fba3 1302 	umull	r1, r3, r3, r2
 80064b4:	095b      	lsrs	r3, r3, #5
 80064b6:	2164      	movs	r1, #100	; 0x64
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	3332      	adds	r3, #50	; 0x32
 80064c2:	4a86      	ldr	r2, [pc, #536]	; (80066dc <UART_SetConfig+0x384>)
 80064c4:	fba2 2303 	umull	r2, r3, r2, r3
 80064c8:	095b      	lsrs	r3, r3, #5
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064d0:	4498      	add	r8, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	461d      	mov	r5, r3
 80064d6:	f04f 0600 	mov.w	r6, #0
 80064da:	46a9      	mov	r9, r5
 80064dc:	46b2      	mov	sl, r6
 80064de:	eb19 0309 	adds.w	r3, r9, r9
 80064e2:	eb4a 040a 	adc.w	r4, sl, sl
 80064e6:	4699      	mov	r9, r3
 80064e8:	46a2      	mov	sl, r4
 80064ea:	eb19 0905 	adds.w	r9, r9, r5
 80064ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80064f2:	f04f 0100 	mov.w	r1, #0
 80064f6:	f04f 0200 	mov.w	r2, #0
 80064fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006502:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006506:	4689      	mov	r9, r1
 8006508:	4692      	mov	sl, r2
 800650a:	eb19 0005 	adds.w	r0, r9, r5
 800650e:	eb4a 0106 	adc.w	r1, sl, r6
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	461d      	mov	r5, r3
 8006518:	f04f 0600 	mov.w	r6, #0
 800651c:	196b      	adds	r3, r5, r5
 800651e:	eb46 0406 	adc.w	r4, r6, r6
 8006522:	461a      	mov	r2, r3
 8006524:	4623      	mov	r3, r4
 8006526:	f7f9 fec3 	bl	80002b0 <__aeabi_uldivmod>
 800652a:	4603      	mov	r3, r0
 800652c:	460c      	mov	r4, r1
 800652e:	461a      	mov	r2, r3
 8006530:	4b6a      	ldr	r3, [pc, #424]	; (80066dc <UART_SetConfig+0x384>)
 8006532:	fba3 1302 	umull	r1, r3, r3, r2
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	2164      	movs	r1, #100	; 0x64
 800653a:	fb01 f303 	mul.w	r3, r1, r3
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	3332      	adds	r3, #50	; 0x32
 8006544:	4a65      	ldr	r2, [pc, #404]	; (80066dc <UART_SetConfig+0x384>)
 8006546:	fba2 2303 	umull	r2, r3, r2, r3
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	f003 0207 	and.w	r2, r3, #7
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4442      	add	r2, r8
 8006556:	609a      	str	r2, [r3, #8]
 8006558:	e26f      	b.n	8006a3a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800655a:	f7fd fff3 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 800655e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	461d      	mov	r5, r3
 8006564:	f04f 0600 	mov.w	r6, #0
 8006568:	46a8      	mov	r8, r5
 800656a:	46b1      	mov	r9, r6
 800656c:	eb18 0308 	adds.w	r3, r8, r8
 8006570:	eb49 0409 	adc.w	r4, r9, r9
 8006574:	4698      	mov	r8, r3
 8006576:	46a1      	mov	r9, r4
 8006578:	eb18 0805 	adds.w	r8, r8, r5
 800657c:	eb49 0906 	adc.w	r9, r9, r6
 8006580:	f04f 0100 	mov.w	r1, #0
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800658c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006590:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006594:	4688      	mov	r8, r1
 8006596:	4691      	mov	r9, r2
 8006598:	eb18 0005 	adds.w	r0, r8, r5
 800659c:	eb49 0106 	adc.w	r1, r9, r6
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	461d      	mov	r5, r3
 80065a6:	f04f 0600 	mov.w	r6, #0
 80065aa:	196b      	adds	r3, r5, r5
 80065ac:	eb46 0406 	adc.w	r4, r6, r6
 80065b0:	461a      	mov	r2, r3
 80065b2:	4623      	mov	r3, r4
 80065b4:	f7f9 fe7c 	bl	80002b0 <__aeabi_uldivmod>
 80065b8:	4603      	mov	r3, r0
 80065ba:	460c      	mov	r4, r1
 80065bc:	461a      	mov	r2, r3
 80065be:	4b47      	ldr	r3, [pc, #284]	; (80066dc <UART_SetConfig+0x384>)
 80065c0:	fba3 2302 	umull	r2, r3, r3, r2
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	461d      	mov	r5, r3
 80065ce:	f04f 0600 	mov.w	r6, #0
 80065d2:	46a9      	mov	r9, r5
 80065d4:	46b2      	mov	sl, r6
 80065d6:	eb19 0309 	adds.w	r3, r9, r9
 80065da:	eb4a 040a 	adc.w	r4, sl, sl
 80065de:	4699      	mov	r9, r3
 80065e0:	46a2      	mov	sl, r4
 80065e2:	eb19 0905 	adds.w	r9, r9, r5
 80065e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80065ea:	f04f 0100 	mov.w	r1, #0
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065fe:	4689      	mov	r9, r1
 8006600:	4692      	mov	sl, r2
 8006602:	eb19 0005 	adds.w	r0, r9, r5
 8006606:	eb4a 0106 	adc.w	r1, sl, r6
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	461d      	mov	r5, r3
 8006610:	f04f 0600 	mov.w	r6, #0
 8006614:	196b      	adds	r3, r5, r5
 8006616:	eb46 0406 	adc.w	r4, r6, r6
 800661a:	461a      	mov	r2, r3
 800661c:	4623      	mov	r3, r4
 800661e:	f7f9 fe47 	bl	80002b0 <__aeabi_uldivmod>
 8006622:	4603      	mov	r3, r0
 8006624:	460c      	mov	r4, r1
 8006626:	461a      	mov	r2, r3
 8006628:	4b2c      	ldr	r3, [pc, #176]	; (80066dc <UART_SetConfig+0x384>)
 800662a:	fba3 1302 	umull	r1, r3, r3, r2
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	2164      	movs	r1, #100	; 0x64
 8006632:	fb01 f303 	mul.w	r3, r1, r3
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	3332      	adds	r3, #50	; 0x32
 800663c:	4a27      	ldr	r2, [pc, #156]	; (80066dc <UART_SetConfig+0x384>)
 800663e:	fba2 2303 	umull	r2, r3, r2, r3
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800664a:	4498      	add	r8, r3
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	461d      	mov	r5, r3
 8006650:	f04f 0600 	mov.w	r6, #0
 8006654:	46a9      	mov	r9, r5
 8006656:	46b2      	mov	sl, r6
 8006658:	eb19 0309 	adds.w	r3, r9, r9
 800665c:	eb4a 040a 	adc.w	r4, sl, sl
 8006660:	4699      	mov	r9, r3
 8006662:	46a2      	mov	sl, r4
 8006664:	eb19 0905 	adds.w	r9, r9, r5
 8006668:	eb4a 0a06 	adc.w	sl, sl, r6
 800666c:	f04f 0100 	mov.w	r1, #0
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006678:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800667c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006680:	4689      	mov	r9, r1
 8006682:	4692      	mov	sl, r2
 8006684:	eb19 0005 	adds.w	r0, r9, r5
 8006688:	eb4a 0106 	adc.w	r1, sl, r6
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	461d      	mov	r5, r3
 8006692:	f04f 0600 	mov.w	r6, #0
 8006696:	196b      	adds	r3, r5, r5
 8006698:	eb46 0406 	adc.w	r4, r6, r6
 800669c:	461a      	mov	r2, r3
 800669e:	4623      	mov	r3, r4
 80066a0:	f7f9 fe06 	bl	80002b0 <__aeabi_uldivmod>
 80066a4:	4603      	mov	r3, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	461a      	mov	r2, r3
 80066aa:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <UART_SetConfig+0x384>)
 80066ac:	fba3 1302 	umull	r1, r3, r3, r2
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	2164      	movs	r1, #100	; 0x64
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	3332      	adds	r3, #50	; 0x32
 80066be:	4a07      	ldr	r2, [pc, #28]	; (80066dc <UART_SetConfig+0x384>)
 80066c0:	fba2 2303 	umull	r2, r3, r2, r3
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f003 0207 	and.w	r2, r3, #7
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4442      	add	r2, r8
 80066d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80066d2:	e1b2      	b.n	8006a3a <UART_SetConfig+0x6e2>
 80066d4:	40011000 	.word	0x40011000
 80066d8:	40011400 	.word	0x40011400
 80066dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4ad7      	ldr	r2, [pc, #860]	; (8006a44 <UART_SetConfig+0x6ec>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d005      	beq.n	80066f6 <UART_SetConfig+0x39e>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4ad6      	ldr	r2, [pc, #856]	; (8006a48 <UART_SetConfig+0x6f0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	f040 80d1 	bne.w	8006898 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80066f6:	f7fd ff39 	bl	800456c <HAL_RCC_GetPCLK2Freq>
 80066fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	469a      	mov	sl, r3
 8006700:	f04f 0b00 	mov.w	fp, #0
 8006704:	46d0      	mov	r8, sl
 8006706:	46d9      	mov	r9, fp
 8006708:	eb18 0308 	adds.w	r3, r8, r8
 800670c:	eb49 0409 	adc.w	r4, r9, r9
 8006710:	4698      	mov	r8, r3
 8006712:	46a1      	mov	r9, r4
 8006714:	eb18 080a 	adds.w	r8, r8, sl
 8006718:	eb49 090b 	adc.w	r9, r9, fp
 800671c:	f04f 0100 	mov.w	r1, #0
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006728:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800672c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006730:	4688      	mov	r8, r1
 8006732:	4691      	mov	r9, r2
 8006734:	eb1a 0508 	adds.w	r5, sl, r8
 8006738:	eb4b 0609 	adc.w	r6, fp, r9
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	4619      	mov	r1, r3
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	f04f 0400 	mov.w	r4, #0
 800674e:	0094      	lsls	r4, r2, #2
 8006750:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006754:	008b      	lsls	r3, r1, #2
 8006756:	461a      	mov	r2, r3
 8006758:	4623      	mov	r3, r4
 800675a:	4628      	mov	r0, r5
 800675c:	4631      	mov	r1, r6
 800675e:	f7f9 fda7 	bl	80002b0 <__aeabi_uldivmod>
 8006762:	4603      	mov	r3, r0
 8006764:	460c      	mov	r4, r1
 8006766:	461a      	mov	r2, r3
 8006768:	4bb8      	ldr	r3, [pc, #736]	; (8006a4c <UART_SetConfig+0x6f4>)
 800676a:	fba3 2302 	umull	r2, r3, r3, r2
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	469b      	mov	fp, r3
 8006778:	f04f 0c00 	mov.w	ip, #0
 800677c:	46d9      	mov	r9, fp
 800677e:	46e2      	mov	sl, ip
 8006780:	eb19 0309 	adds.w	r3, r9, r9
 8006784:	eb4a 040a 	adc.w	r4, sl, sl
 8006788:	4699      	mov	r9, r3
 800678a:	46a2      	mov	sl, r4
 800678c:	eb19 090b 	adds.w	r9, r9, fp
 8006790:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006794:	f04f 0100 	mov.w	r1, #0
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067a8:	4689      	mov	r9, r1
 80067aa:	4692      	mov	sl, r2
 80067ac:	eb1b 0509 	adds.w	r5, fp, r9
 80067b0:	eb4c 060a 	adc.w	r6, ip, sl
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4619      	mov	r1, r3
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	f04f 0300 	mov.w	r3, #0
 80067c2:	f04f 0400 	mov.w	r4, #0
 80067c6:	0094      	lsls	r4, r2, #2
 80067c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067cc:	008b      	lsls	r3, r1, #2
 80067ce:	461a      	mov	r2, r3
 80067d0:	4623      	mov	r3, r4
 80067d2:	4628      	mov	r0, r5
 80067d4:	4631      	mov	r1, r6
 80067d6:	f7f9 fd6b 	bl	80002b0 <__aeabi_uldivmod>
 80067da:	4603      	mov	r3, r0
 80067dc:	460c      	mov	r4, r1
 80067de:	461a      	mov	r2, r3
 80067e0:	4b9a      	ldr	r3, [pc, #616]	; (8006a4c <UART_SetConfig+0x6f4>)
 80067e2:	fba3 1302 	umull	r1, r3, r3, r2
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	2164      	movs	r1, #100	; 0x64
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	3332      	adds	r3, #50	; 0x32
 80067f4:	4a95      	ldr	r2, [pc, #596]	; (8006a4c <UART_SetConfig+0x6f4>)
 80067f6:	fba2 2303 	umull	r2, r3, r2, r3
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006800:	4498      	add	r8, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	469b      	mov	fp, r3
 8006806:	f04f 0c00 	mov.w	ip, #0
 800680a:	46d9      	mov	r9, fp
 800680c:	46e2      	mov	sl, ip
 800680e:	eb19 0309 	adds.w	r3, r9, r9
 8006812:	eb4a 040a 	adc.w	r4, sl, sl
 8006816:	4699      	mov	r9, r3
 8006818:	46a2      	mov	sl, r4
 800681a:	eb19 090b 	adds.w	r9, r9, fp
 800681e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006822:	f04f 0100 	mov.w	r1, #0
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800682e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006832:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006836:	4689      	mov	r9, r1
 8006838:	4692      	mov	sl, r2
 800683a:	eb1b 0509 	adds.w	r5, fp, r9
 800683e:	eb4c 060a 	adc.w	r6, ip, sl
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	4619      	mov	r1, r3
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	f04f 0400 	mov.w	r4, #0
 8006854:	0094      	lsls	r4, r2, #2
 8006856:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800685a:	008b      	lsls	r3, r1, #2
 800685c:	461a      	mov	r2, r3
 800685e:	4623      	mov	r3, r4
 8006860:	4628      	mov	r0, r5
 8006862:	4631      	mov	r1, r6
 8006864:	f7f9 fd24 	bl	80002b0 <__aeabi_uldivmod>
 8006868:	4603      	mov	r3, r0
 800686a:	460c      	mov	r4, r1
 800686c:	461a      	mov	r2, r3
 800686e:	4b77      	ldr	r3, [pc, #476]	; (8006a4c <UART_SetConfig+0x6f4>)
 8006870:	fba3 1302 	umull	r1, r3, r3, r2
 8006874:	095b      	lsrs	r3, r3, #5
 8006876:	2164      	movs	r1, #100	; 0x64
 8006878:	fb01 f303 	mul.w	r3, r1, r3
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	3332      	adds	r3, #50	; 0x32
 8006882:	4a72      	ldr	r2, [pc, #456]	; (8006a4c <UART_SetConfig+0x6f4>)
 8006884:	fba2 2303 	umull	r2, r3, r2, r3
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	f003 020f 	and.w	r2, r3, #15
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4442      	add	r2, r8
 8006894:	609a      	str	r2, [r3, #8]
 8006896:	e0d0      	b.n	8006a3a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006898:	f7fd fe54 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 800689c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	469a      	mov	sl, r3
 80068a2:	f04f 0b00 	mov.w	fp, #0
 80068a6:	46d0      	mov	r8, sl
 80068a8:	46d9      	mov	r9, fp
 80068aa:	eb18 0308 	adds.w	r3, r8, r8
 80068ae:	eb49 0409 	adc.w	r4, r9, r9
 80068b2:	4698      	mov	r8, r3
 80068b4:	46a1      	mov	r9, r4
 80068b6:	eb18 080a 	adds.w	r8, r8, sl
 80068ba:	eb49 090b 	adc.w	r9, r9, fp
 80068be:	f04f 0100 	mov.w	r1, #0
 80068c2:	f04f 0200 	mov.w	r2, #0
 80068c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068d2:	4688      	mov	r8, r1
 80068d4:	4691      	mov	r9, r2
 80068d6:	eb1a 0508 	adds.w	r5, sl, r8
 80068da:	eb4b 0609 	adc.w	r6, fp, r9
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	4619      	mov	r1, r3
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	f04f 0400 	mov.w	r4, #0
 80068f0:	0094      	lsls	r4, r2, #2
 80068f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068f6:	008b      	lsls	r3, r1, #2
 80068f8:	461a      	mov	r2, r3
 80068fa:	4623      	mov	r3, r4
 80068fc:	4628      	mov	r0, r5
 80068fe:	4631      	mov	r1, r6
 8006900:	f7f9 fcd6 	bl	80002b0 <__aeabi_uldivmod>
 8006904:	4603      	mov	r3, r0
 8006906:	460c      	mov	r4, r1
 8006908:	461a      	mov	r2, r3
 800690a:	4b50      	ldr	r3, [pc, #320]	; (8006a4c <UART_SetConfig+0x6f4>)
 800690c:	fba3 2302 	umull	r2, r3, r3, r2
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	469b      	mov	fp, r3
 800691a:	f04f 0c00 	mov.w	ip, #0
 800691e:	46d9      	mov	r9, fp
 8006920:	46e2      	mov	sl, ip
 8006922:	eb19 0309 	adds.w	r3, r9, r9
 8006926:	eb4a 040a 	adc.w	r4, sl, sl
 800692a:	4699      	mov	r9, r3
 800692c:	46a2      	mov	sl, r4
 800692e:	eb19 090b 	adds.w	r9, r9, fp
 8006932:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006936:	f04f 0100 	mov.w	r1, #0
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006942:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006946:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800694a:	4689      	mov	r9, r1
 800694c:	4692      	mov	sl, r2
 800694e:	eb1b 0509 	adds.w	r5, fp, r9
 8006952:	eb4c 060a 	adc.w	r6, ip, sl
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	4619      	mov	r1, r3
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	f04f 0400 	mov.w	r4, #0
 8006968:	0094      	lsls	r4, r2, #2
 800696a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800696e:	008b      	lsls	r3, r1, #2
 8006970:	461a      	mov	r2, r3
 8006972:	4623      	mov	r3, r4
 8006974:	4628      	mov	r0, r5
 8006976:	4631      	mov	r1, r6
 8006978:	f7f9 fc9a 	bl	80002b0 <__aeabi_uldivmod>
 800697c:	4603      	mov	r3, r0
 800697e:	460c      	mov	r4, r1
 8006980:	461a      	mov	r2, r3
 8006982:	4b32      	ldr	r3, [pc, #200]	; (8006a4c <UART_SetConfig+0x6f4>)
 8006984:	fba3 1302 	umull	r1, r3, r3, r2
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	2164      	movs	r1, #100	; 0x64
 800698c:	fb01 f303 	mul.w	r3, r1, r3
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	3332      	adds	r3, #50	; 0x32
 8006996:	4a2d      	ldr	r2, [pc, #180]	; (8006a4c <UART_SetConfig+0x6f4>)
 8006998:	fba2 2303 	umull	r2, r3, r2, r3
 800699c:	095b      	lsrs	r3, r3, #5
 800699e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069a2:	4498      	add	r8, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	469b      	mov	fp, r3
 80069a8:	f04f 0c00 	mov.w	ip, #0
 80069ac:	46d9      	mov	r9, fp
 80069ae:	46e2      	mov	sl, ip
 80069b0:	eb19 0309 	adds.w	r3, r9, r9
 80069b4:	eb4a 040a 	adc.w	r4, sl, sl
 80069b8:	4699      	mov	r9, r3
 80069ba:	46a2      	mov	sl, r4
 80069bc:	eb19 090b 	adds.w	r9, r9, fp
 80069c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069c4:	f04f 0100 	mov.w	r1, #0
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069d8:	4689      	mov	r9, r1
 80069da:	4692      	mov	sl, r2
 80069dc:	eb1b 0509 	adds.w	r5, fp, r9
 80069e0:	eb4c 060a 	adc.w	r6, ip, sl
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4619      	mov	r1, r3
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	f04f 0400 	mov.w	r4, #0
 80069f6:	0094      	lsls	r4, r2, #2
 80069f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069fc:	008b      	lsls	r3, r1, #2
 80069fe:	461a      	mov	r2, r3
 8006a00:	4623      	mov	r3, r4
 8006a02:	4628      	mov	r0, r5
 8006a04:	4631      	mov	r1, r6
 8006a06:	f7f9 fc53 	bl	80002b0 <__aeabi_uldivmod>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <UART_SetConfig+0x6f4>)
 8006a12:	fba3 1302 	umull	r1, r3, r3, r2
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	2164      	movs	r1, #100	; 0x64
 8006a1a:	fb01 f303 	mul.w	r3, r1, r3
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	3332      	adds	r3, #50	; 0x32
 8006a24:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <UART_SetConfig+0x6f4>)
 8006a26:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4442      	add	r2, r8
 8006a36:	609a      	str	r2, [r3, #8]
}
 8006a38:	e7ff      	b.n	8006a3a <UART_SetConfig+0x6e2>
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a44:	40011000 	.word	0x40011000
 8006a48:	40011400 	.word	0x40011400
 8006a4c:	51eb851f 	.word	0x51eb851f

08006a50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a54:	4904      	ldr	r1, [pc, #16]	; (8006a68 <MX_FATFS_Init+0x18>)
 8006a56:	4805      	ldr	r0, [pc, #20]	; (8006a6c <MX_FATFS_Init+0x1c>)
 8006a58:	f002 f9a8 	bl	8008dac <FATFS_LinkDriver>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	461a      	mov	r2, r3
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <MX_FATFS_Init+0x20>)
 8006a62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006a64:	bf00      	nop
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20001090 	.word	0x20001090
 8006a6c:	20000010 	.word	0x20000010
 8006a70:	20001094 	.word	0x20001094

08006a74 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fc f92d 	bl	8002cf0 <USER_SPI_initialize>
 8006a96:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fc f9ff 	bl	8002eb0 <USER_SPI_status>
 8006ab2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006acc:	7bf8      	ldrb	r0, [r7, #15]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	f7fc fa02 	bl	8002edc <USER_SPI_read>
 8006ad8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006af2:	7bf8      	ldrb	r0, [r7, #15]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	f7fc fa55 	bl	8002fa8 <USER_SPI_write>
 8006afe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	603a      	str	r2, [r7, #0]
 8006b12:	71fb      	strb	r3, [r7, #7]
 8006b14:	460b      	mov	r3, r1
 8006b16:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006b18:	79b9      	ldrb	r1, [r7, #6]
 8006b1a:	79fb      	ldrb	r3, [r7, #7]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fc fabe 	bl	80030a0 <USER_SPI_ioctl>
 8006b24:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
	...

08006b30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <disk_status+0x30>)
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	79fa      	ldrb	r2, [r7, #7]
 8006b48:	4905      	ldr	r1, [pc, #20]	; (8006b60 <disk_status+0x30>)
 8006b4a:	440a      	add	r2, r1
 8006b4c:	7a12      	ldrb	r2, [r2, #8]
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4798      	blx	r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20000120 	.word	0x20000120

08006b64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006b72:	79fb      	ldrb	r3, [r7, #7]
 8006b74:	4a0d      	ldr	r2, [pc, #52]	; (8006bac <disk_initialize+0x48>)
 8006b76:	5cd3      	ldrb	r3, [r2, r3]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d111      	bne.n	8006ba0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	4a0b      	ldr	r2, [pc, #44]	; (8006bac <disk_initialize+0x48>)
 8006b80:	2101      	movs	r1, #1
 8006b82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	4a09      	ldr	r2, [pc, #36]	; (8006bac <disk_initialize+0x48>)
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	79fa      	ldrb	r2, [r7, #7]
 8006b92:	4906      	ldr	r1, [pc, #24]	; (8006bac <disk_initialize+0x48>)
 8006b94:	440a      	add	r2, r1
 8006b96:	7a12      	ldrb	r2, [r2, #8]
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4798      	blx	r3
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000120 	.word	0x20000120

08006bb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006bb0:	b590      	push	{r4, r7, lr}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <disk_read+0x3c>)
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	689c      	ldr	r4, [r3, #8]
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	4a07      	ldr	r2, [pc, #28]	; (8006bec <disk_read+0x3c>)
 8006bd0:	4413      	add	r3, r2
 8006bd2:	7a18      	ldrb	r0, [r3, #8]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	47a0      	blx	r4
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75fb      	strb	r3, [r7, #23]
  return res;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd90      	pop	{r4, r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000120 	.word	0x20000120

08006bf0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006bf0:	b590      	push	{r4, r7, lr}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	4a0a      	ldr	r2, [pc, #40]	; (8006c2c <disk_write+0x3c>)
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	68dc      	ldr	r4, [r3, #12]
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	4a07      	ldr	r2, [pc, #28]	; (8006c2c <disk_write+0x3c>)
 8006c10:	4413      	add	r3, r2
 8006c12:	7a18      	ldrb	r0, [r3, #8]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	47a0      	blx	r4
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd90      	pop	{r4, r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000120 	.word	0x20000120

08006c30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	603a      	str	r2, [r7, #0]
 8006c3a:	71fb      	strb	r3, [r7, #7]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006c40:	79fb      	ldrb	r3, [r7, #7]
 8006c42:	4a09      	ldr	r2, [pc, #36]	; (8006c68 <disk_ioctl+0x38>)
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	79fa      	ldrb	r2, [r7, #7]
 8006c4e:	4906      	ldr	r1, [pc, #24]	; (8006c68 <disk_ioctl+0x38>)
 8006c50:	440a      	add	r2, r1
 8006c52:	7a10      	ldrb	r0, [r2, #8]
 8006c54:	79b9      	ldrb	r1, [r7, #6]
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	4798      	blx	r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20000120 	.word	0x20000120

08006c6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3301      	adds	r3, #1
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006c7c:	89fb      	ldrh	r3, [r7, #14]
 8006c7e:	021b      	lsls	r3, r3, #8
 8006c80:	b21a      	sxth	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	b21b      	sxth	r3, r3
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	b21b      	sxth	r3, r3
 8006c8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006c8e:	89fb      	ldrh	r3, [r7, #14]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3303      	adds	r3, #3
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	021b      	lsls	r3, r3, #8
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	3202      	adds	r2, #2
 8006cb4:	7812      	ldrb	r2, [r2, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	3201      	adds	r2, #1
 8006cc2:	7812      	ldrb	r2, [r2, #0]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	021b      	lsls	r3, r3, #8
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
	return rv;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	887a      	ldrh	r2, [r7, #2]
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	887b      	ldrh	r3, [r7, #2]
 8006cfc:	0a1b      	lsrs	r3, r3, #8
 8006cfe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	607a      	str	r2, [r7, #4]
 8006d06:	887a      	ldrh	r2, [r7, #2]
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	701a      	strb	r2, [r3, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	0a1b      	lsrs	r3, r3, #8
 8006d32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	607a      	str	r2, [r7, #4]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	0a1b      	lsrs	r3, r3, #8
 8006d44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	0a1b      	lsrs	r3, r3, #8
 8006d56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	701a      	strb	r2, [r3, #0]
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	1c53      	adds	r3, r2, #1
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	1c59      	adds	r1, r3, #1
 8006d94:	6179      	str	r1, [r7, #20]
 8006d96:	7812      	ldrb	r2, [r2, #0]
 8006d98:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	607b      	str	r3, [r7, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1f1      	bne.n	8006d8a <mem_cpy+0x1a>
	}
}
 8006da6:	bf00      	nop
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006db2:	b480      	push	{r7}
 8006db4:	b087      	sub	sp, #28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	617a      	str	r2, [r7, #20]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	607b      	str	r3, [r7, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f3      	bne.n	8006dc2 <mem_set+0x10>
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006de6:	b480      	push	{r7}
 8006de8:	b089      	sub	sp, #36	; 0x24
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	61fa      	str	r2, [r7, #28]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	4619      	mov	r1, r3
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	61ba      	str	r2, [r7, #24]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	1acb      	subs	r3, r1, r3
 8006e12:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	607b      	str	r3, [r7, #4]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <mem_cmp+0x40>
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0eb      	beq.n	8006dfe <mem_cmp+0x18>

	return r;
 8006e26:	697b      	ldr	r3, [r7, #20]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3724      	adds	r7, #36	; 0x24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006e3e:	e002      	b.n	8006e46 <chk_chr+0x12>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3301      	adds	r3, #1
 8006e44:	607b      	str	r3, [r7, #4]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <chk_chr+0x26>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d1f2      	bne.n	8006e40 <chk_chr+0xc>
	return *str;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e76:	2300      	movs	r3, #0
 8006e78:	60bb      	str	r3, [r7, #8]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	e029      	b.n	8006ed4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006e80:	4a27      	ldr	r2, [pc, #156]	; (8006f20 <chk_lock+0xb4>)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	4413      	add	r3, r2
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d01d      	beq.n	8006eca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e8e:	4a24      	ldr	r2, [pc, #144]	; (8006f20 <chk_lock+0xb4>)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	4413      	add	r3, r2
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d116      	bne.n	8006ece <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006ea0:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <chk_lock+0xb4>)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	4413      	add	r3, r2
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d10c      	bne.n	8006ece <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006eb4:	4a1a      	ldr	r2, [pc, #104]	; (8006f20 <chk_lock+0xb4>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	4413      	add	r3, r2
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d102      	bne.n	8006ece <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ec8:	e007      	b.n	8006eda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d9d2      	bls.n	8006e80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d109      	bne.n	8006ef4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d102      	bne.n	8006eec <chk_lock+0x80>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d101      	bne.n	8006ef0 <chk_lock+0x84>
 8006eec:	2300      	movs	r3, #0
 8006eee:	e010      	b.n	8006f12 <chk_lock+0xa6>
 8006ef0:	2312      	movs	r3, #18
 8006ef2:	e00e      	b.n	8006f12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d108      	bne.n	8006f0c <chk_lock+0xa0>
 8006efa:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <chk_lock+0xb4>)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	4413      	add	r3, r2
 8006f02:	330c      	adds	r3, #12
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0a:	d101      	bne.n	8006f10 <chk_lock+0xa4>
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	e000      	b.n	8006f12 <chk_lock+0xa6>
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	20000100 	.word	0x20000100

08006f24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	607b      	str	r3, [r7, #4]
 8006f2e:	e002      	b.n	8006f36 <enq_lock+0x12>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3301      	adds	r3, #1
 8006f34:	607b      	str	r3, [r7, #4]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d806      	bhi.n	8006f4a <enq_lock+0x26>
 8006f3c:	4a09      	ldr	r2, [pc, #36]	; (8006f64 <enq_lock+0x40>)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	4413      	add	r3, r2
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1f2      	bne.n	8006f30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	bf14      	ite	ne
 8006f50:	2301      	movne	r3, #1
 8006f52:	2300      	moveq	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000100 	.word	0x20000100

08006f68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f72:	2300      	movs	r3, #0
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	e01f      	b.n	8006fb8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006f78:	4a41      	ldr	r2, [pc, #260]	; (8007080 <inc_lock+0x118>)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	4413      	add	r3, r2
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d113      	bne.n	8006fb2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006f8a:	4a3d      	ldr	r2, [pc, #244]	; (8007080 <inc_lock+0x118>)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	4413      	add	r3, r2
 8006f92:	3304      	adds	r3, #4
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d109      	bne.n	8006fb2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006f9e:	4a38      	ldr	r2, [pc, #224]	; (8007080 <inc_lock+0x118>)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	4413      	add	r3, r2
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d006      	beq.n	8006fc0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d9dc      	bls.n	8006f78 <inc_lock+0x10>
 8006fbe:	e000      	b.n	8006fc2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006fc0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d132      	bne.n	800702e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	e002      	b.n	8006fd4 <inc_lock+0x6c>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d806      	bhi.n	8006fe8 <inc_lock+0x80>
 8006fda:	4a29      	ldr	r2, [pc, #164]	; (8007080 <inc_lock+0x118>)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	4413      	add	r3, r2
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1f2      	bne.n	8006fce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d101      	bne.n	8006ff2 <inc_lock+0x8a>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e040      	b.n	8007074 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	4922      	ldr	r1, [pc, #136]	; (8007080 <inc_lock+0x118>)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	440b      	add	r3, r1
 8006ffe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	491e      	ldr	r1, [pc, #120]	; (8007080 <inc_lock+0x118>)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	011b      	lsls	r3, r3, #4
 800700a:	440b      	add	r3, r1
 800700c:	3304      	adds	r3, #4
 800700e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	695a      	ldr	r2, [r3, #20]
 8007014:	491a      	ldr	r1, [pc, #104]	; (8007080 <inc_lock+0x118>)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	440b      	add	r3, r1
 800701c:	3308      	adds	r3, #8
 800701e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007020:	4a17      	ldr	r2, [pc, #92]	; (8007080 <inc_lock+0x118>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	4413      	add	r3, r2
 8007028:	330c      	adds	r3, #12
 800702a:	2200      	movs	r2, #0
 800702c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <inc_lock+0xe0>
 8007034:	4a12      	ldr	r2, [pc, #72]	; (8007080 <inc_lock+0x118>)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	4413      	add	r3, r2
 800703c:	330c      	adds	r3, #12
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <inc_lock+0xe0>
 8007044:	2300      	movs	r3, #0
 8007046:	e015      	b.n	8007074 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d108      	bne.n	8007060 <inc_lock+0xf8>
 800704e:	4a0c      	ldr	r2, [pc, #48]	; (8007080 <inc_lock+0x118>)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	4413      	add	r3, r2
 8007056:	330c      	adds	r3, #12
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	3301      	adds	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	e001      	b.n	8007064 <inc_lock+0xfc>
 8007060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007064:	4906      	ldr	r1, [pc, #24]	; (8007080 <inc_lock+0x118>)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	011b      	lsls	r3, r3, #4
 800706a:	440b      	add	r3, r1
 800706c:	330c      	adds	r3, #12
 800706e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20000100 	.word	0x20000100

08007084 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e010      	b.n	80070b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007092:	4a0d      	ldr	r2, [pc, #52]	; (80070c8 <clear_lock+0x44>)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	4413      	add	r3, r2
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d105      	bne.n	80070ae <clear_lock+0x2a>
 80070a2:	4a09      	ldr	r2, [pc, #36]	; (80070c8 <clear_lock+0x44>)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	4413      	add	r3, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3301      	adds	r3, #1
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d9eb      	bls.n	8007092 <clear_lock+0xe>
	}
}
 80070ba:	bf00      	nop
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	20000100 	.word	0x20000100

080070cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	78db      	ldrb	r3, [r3, #3]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d034      	beq.n	800714a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	7858      	ldrb	r0, [r3, #1]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070f0:	2301      	movs	r3, #1
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	f7ff fd7c 	bl	8006bf0 <disk_write>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <sync_window+0x38>
			res = FR_DISK_ERR;
 80070fe:	2301      	movs	r3, #1
 8007100:	73fb      	strb	r3, [r7, #15]
 8007102:	e022      	b.n	800714a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	1ad2      	subs	r2, r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	429a      	cmp	r2, r3
 8007118:	d217      	bcs.n	800714a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	789b      	ldrb	r3, [r3, #2]
 800711e:	613b      	str	r3, [r7, #16]
 8007120:	e010      	b.n	8007144 <sync_window+0x78>
					wsect += fs->fsize;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	4413      	add	r3, r2
 800712a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	7858      	ldrb	r0, [r3, #1]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007136:	2301      	movs	r3, #1
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	f7ff fd59 	bl	8006bf0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	3b01      	subs	r3, #1
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d8eb      	bhi.n	8007122 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800714a:	7bfb      	ldrb	r3, [r7, #15]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d01b      	beq.n	80071a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff ffad 	bl	80070cc <sync_window>
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d113      	bne.n	80071a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	7858      	ldrb	r0, [r3, #1]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007186:	2301      	movs	r3, #1
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	f7ff fd11 	bl	8006bb0 <disk_read>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d004      	beq.n	800719e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007198:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800719a:	2301      	movs	r3, #1
 800719c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7ff ff87 	bl	80070cc <sync_window>
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d158      	bne.n	800727a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d148      	bne.n	8007262 <sync_fs+0xb2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	791b      	ldrb	r3, [r3, #4]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d144      	bne.n	8007262 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3330      	adds	r3, #48	; 0x30
 80071dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff fde5 	bl	8006db2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3330      	adds	r3, #48	; 0x30
 80071ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071f0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff fd74 	bl	8006ce2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3330      	adds	r3, #48	; 0x30
 80071fe:	4921      	ldr	r1, [pc, #132]	; (8007284 <sync_fs+0xd4>)
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff fd89 	bl	8006d18 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3330      	adds	r3, #48	; 0x30
 800720a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800720e:	491e      	ldr	r1, [pc, #120]	; (8007288 <sync_fs+0xd8>)
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff fd81 	bl	8006d18 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3330      	adds	r3, #48	; 0x30
 800721a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	4619      	mov	r1, r3
 8007224:	4610      	mov	r0, r2
 8007226:	f7ff fd77 	bl	8006d18 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3330      	adds	r3, #48	; 0x30
 800722e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	4619      	mov	r1, r3
 8007238:	4610      	mov	r0, r2
 800723a:	f7ff fd6d 	bl	8006d18 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7858      	ldrb	r0, [r3, #1]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007256:	2301      	movs	r3, #1
 8007258:	f7ff fcca 	bl	8006bf0 <disk_write>
			fs->fsi_flag = 0;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	2200      	movs	r2, #0
 8007268:	2100      	movs	r1, #0
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fce0 	bl	8006c30 <disk_ioctl>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <sync_fs+0xca>
 8007276:	2301      	movs	r3, #1
 8007278:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	41615252 	.word	0x41615252
 8007288:	61417272 	.word	0x61417272

0800728c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	3b02      	subs	r3, #2
 800729a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	3b02      	subs	r3, #2
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d301      	bcc.n	80072ac <clust2sect+0x20>
 80072a8:	2300      	movs	r3, #0
 80072aa:	e008      	b.n	80072be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	895b      	ldrh	r3, [r3, #10]
 80072b0:	461a      	mov	r2, r3
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	fb03 f202 	mul.w	r2, r3, r2
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	4413      	add	r3, r2
}
 80072be:	4618      	mov	r0, r3
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b086      	sub	sp, #24
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d904      	bls.n	80072ea <get_fat+0x20>
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d302      	bcc.n	80072f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80072ea:	2301      	movs	r3, #1
 80072ec:	617b      	str	r3, [r7, #20]
 80072ee:	e08c      	b.n	800740a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80072f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d045      	beq.n	800738a <get_fat+0xc0>
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d05d      	beq.n	80073be <get_fat+0xf4>
 8007302:	2b01      	cmp	r3, #1
 8007304:	d177      	bne.n	80073f6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	085b      	lsrs	r3, r3, #1
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	6a1a      	ldr	r2, [r3, #32]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	0a5b      	lsrs	r3, r3, #9
 800731c:	4413      	add	r3, r2
 800731e:	4619      	mov	r1, r3
 8007320:	6938      	ldr	r0, [r7, #16]
 8007322:	f7ff ff17 	bl	8007154 <move_window>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d167      	bne.n	80073fc <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	60fa      	str	r2, [r7, #12]
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4413      	add	r3, r2
 800733a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800733e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	6a1a      	ldr	r2, [r3, #32]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	0a5b      	lsrs	r3, r3, #9
 8007348:	4413      	add	r3, r2
 800734a:	4619      	mov	r1, r3
 800734c:	6938      	ldr	r0, [r7, #16]
 800734e:	f7ff ff01 	bl	8007154 <move_window>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d153      	bne.n	8007400 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4413      	add	r3, r2
 8007362:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007366:	021b      	lsls	r3, r3, #8
 8007368:	461a      	mov	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	4313      	orrs	r3, r2
 800736e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <get_fat+0xb6>
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	091b      	lsrs	r3, r3, #4
 800737e:	e002      	b.n	8007386 <get_fat+0xbc>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007386:	617b      	str	r3, [r7, #20]
			break;
 8007388:	e03f      	b.n	800740a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	6a1a      	ldr	r2, [r3, #32]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	0a1b      	lsrs	r3, r3, #8
 8007392:	4413      	add	r3, r2
 8007394:	4619      	mov	r1, r3
 8007396:	6938      	ldr	r0, [r7, #16]
 8007398:	f7ff fedc 	bl	8007154 <move_window>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d130      	bne.n	8007404 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80073b0:	4413      	add	r3, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff fc5a 	bl	8006c6c <ld_word>
 80073b8:	4603      	mov	r3, r0
 80073ba:	617b      	str	r3, [r7, #20]
			break;
 80073bc:	e025      	b.n	800740a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	6a1a      	ldr	r2, [r3, #32]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	09db      	lsrs	r3, r3, #7
 80073c6:	4413      	add	r3, r2
 80073c8:	4619      	mov	r1, r3
 80073ca:	6938      	ldr	r0, [r7, #16]
 80073cc:	f7ff fec2 	bl	8007154 <move_window>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d118      	bne.n	8007408 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80073e4:	4413      	add	r3, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff fc58 	bl	8006c9c <ld_dword>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073f2:	617b      	str	r3, [r7, #20]
			break;
 80073f4:	e009      	b.n	800740a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80073f6:	2301      	movs	r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e006      	b.n	800740a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073fc:	bf00      	nop
 80073fe:	e004      	b.n	800740a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007400:	bf00      	nop
 8007402:	e002      	b.n	800740a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007404:	bf00      	nop
 8007406:	e000      	b.n	800740a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007408:	bf00      	nop
		}
	}

	return val;
 800740a:	697b      	ldr	r3, [r7, #20]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007414:	b590      	push	{r4, r7, lr}
 8007416:	b089      	sub	sp, #36	; 0x24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007420:	2302      	movs	r3, #2
 8007422:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b01      	cmp	r3, #1
 8007428:	f240 80d6 	bls.w	80075d8 <put_fat+0x1c4>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	f080 80d0 	bcs.w	80075d8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d073      	beq.n	8007528 <put_fat+0x114>
 8007440:	2b03      	cmp	r3, #3
 8007442:	f000 8091 	beq.w	8007568 <put_fat+0x154>
 8007446:	2b01      	cmp	r3, #1
 8007448:	f040 80c6 	bne.w	80075d8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	61bb      	str	r3, [r7, #24]
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	4413      	add	r3, r2
 8007458:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	0a5b      	lsrs	r3, r3, #9
 8007462:	4413      	add	r3, r2
 8007464:	4619      	mov	r1, r3
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f7ff fe74 	bl	8007154 <move_window>
 800746c:	4603      	mov	r3, r0
 800746e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007470:	7ffb      	ldrb	r3, [r7, #31]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f040 80a9 	bne.w	80075ca <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	1c59      	adds	r1, r3, #1
 8007482:	61b9      	str	r1, [r7, #24]
 8007484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007488:	4413      	add	r3, r2
 800748a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00d      	beq.n	80074b2 <put_fat+0x9e>
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	b25b      	sxtb	r3, r3
 800749c:	f003 030f 	and.w	r3, r3, #15
 80074a0:	b25a      	sxtb	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	b25b      	sxtb	r3, r3
 80074aa:	4313      	orrs	r3, r2
 80074ac:	b25b      	sxtb	r3, r3
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	e001      	b.n	80074b6 <put_fat+0xa2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6a1a      	ldr	r2, [r3, #32]
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	0a5b      	lsrs	r3, r3, #9
 80074c8:	4413      	add	r3, r2
 80074ca:	4619      	mov	r1, r3
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f7ff fe41 	bl	8007154 <move_window>
 80074d2:	4603      	mov	r3, r0
 80074d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074d6:	7ffb      	ldrb	r3, [r7, #31]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d178      	bne.n	80075ce <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e8:	4413      	add	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <put_fat+0xea>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	091b      	lsrs	r3, r3, #4
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	e00e      	b.n	800751c <put_fat+0x108>
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	b25b      	sxtb	r3, r3
 8007504:	f023 030f 	bic.w	r3, r3, #15
 8007508:	b25a      	sxtb	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	0a1b      	lsrs	r3, r3, #8
 800750e:	b25b      	sxtb	r3, r3
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	b25b      	sxtb	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b25b      	sxtb	r3, r3
 800751a:	b2db      	uxtb	r3, r3
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	70da      	strb	r2, [r3, #3]
			break;
 8007526:	e057      	b.n	80075d8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1a      	ldr	r2, [r3, #32]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	0a1b      	lsrs	r3, r3, #8
 8007530:	4413      	add	r3, r2
 8007532:	4619      	mov	r1, r3
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff fe0d 	bl	8007154 <move_window>
 800753a:	4603      	mov	r3, r0
 800753c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800753e:	7ffb      	ldrb	r3, [r7, #31]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d146      	bne.n	80075d2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007552:	4413      	add	r3, r2
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	b292      	uxth	r2, r2
 8007558:	4611      	mov	r1, r2
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fbc1 	bl	8006ce2 <st_word>
			fs->wflag = 1;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	70da      	strb	r2, [r3, #3]
			break;
 8007566:	e037      	b.n	80075d8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a1a      	ldr	r2, [r3, #32]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	09db      	lsrs	r3, r3, #7
 8007570:	4413      	add	r3, r2
 8007572:	4619      	mov	r1, r3
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff fded 	bl	8007154 <move_window>
 800757a:	4603      	mov	r3, r0
 800757c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800757e:	7ffb      	ldrb	r3, [r7, #31]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d128      	bne.n	80075d6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007598:	4413      	add	r3, r2
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fb7e 	bl	8006c9c <ld_dword>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80075a6:	4323      	orrs	r3, r4
 80075a8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80075b8:	4413      	add	r3, r2
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	4618      	mov	r0, r3
 80075be:	f7ff fbab 	bl	8006d18 <st_dword>
			fs->wflag = 1;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	70da      	strb	r2, [r3, #3]
			break;
 80075c8:	e006      	b.n	80075d8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075ca:	bf00      	nop
 80075cc:	e004      	b.n	80075d8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075ce:	bf00      	nop
 80075d0:	e002      	b.n	80075d8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075d2:	bf00      	nop
 80075d4:	e000      	b.n	80075d8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80075d6:	bf00      	nop
		}
	}
	return res;
 80075d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3724      	adds	r7, #36	; 0x24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd90      	pop	{r4, r7, pc}

080075e2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b088      	sub	sp, #32
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d904      	bls.n	8007608 <remove_chain+0x26>
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	429a      	cmp	r2, r3
 8007606:	d301      	bcc.n	800760c <remove_chain+0x2a>
 8007608:	2302      	movs	r3, #2
 800760a:	e04b      	b.n	80076a4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00c      	beq.n	800762c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	69b8      	ldr	r0, [r7, #24]
 800761a:	f7ff fefb 	bl	8007414 <put_fat>
 800761e:	4603      	mov	r3, r0
 8007620:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007622:	7ffb      	ldrb	r3, [r7, #31]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <remove_chain+0x4a>
 8007628:	7ffb      	ldrb	r3, [r7, #31]
 800762a:	e03b      	b.n	80076a4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7ff fe4b 	bl	80072ca <get_fat>
 8007634:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d031      	beq.n	80076a0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d101      	bne.n	8007646 <remove_chain+0x64>
 8007642:	2302      	movs	r3, #2
 8007644:	e02e      	b.n	80076a4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800764c:	d101      	bne.n	8007652 <remove_chain+0x70>
 800764e:	2301      	movs	r3, #1
 8007650:	e028      	b.n	80076a4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007652:	2200      	movs	r2, #0
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	69b8      	ldr	r0, [r7, #24]
 8007658:	f7ff fedc 	bl	8007414 <put_fat>
 800765c:	4603      	mov	r3, r0
 800765e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007660:	7ffb      	ldrb	r3, [r7, #31]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <remove_chain+0x88>
 8007666:	7ffb      	ldrb	r3, [r7, #31]
 8007668:	e01c      	b.n	80076a4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	691a      	ldr	r2, [r3, #16]
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	3b02      	subs	r3, #2
 8007674:	429a      	cmp	r2, r3
 8007676:	d20b      	bcs.n	8007690 <remove_chain+0xae>
			fs->free_clst++;
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	791b      	ldrb	r3, [r3, #4]
 8007686:	f043 0301 	orr.w	r3, r3, #1
 800768a:	b2da      	uxtb	r2, r3
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	429a      	cmp	r2, r3
 800769c:	d3c6      	bcc.n	800762c <remove_chain+0x4a>
 800769e:	e000      	b.n	80076a2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80076a0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3720      	adds	r7, #32
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10d      	bne.n	80076de <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d004      	beq.n	80076d8 <create_chain+0x2c>
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d31b      	bcc.n	8007710 <create_chain+0x64>
 80076d8:	2301      	movs	r3, #1
 80076da:	61bb      	str	r3, [r7, #24]
 80076dc:	e018      	b.n	8007710 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff fdf2 	bl	80072ca <get_fat>
 80076e6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d801      	bhi.n	80076f2 <create_chain+0x46>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e070      	b.n	80077d4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f8:	d101      	bne.n	80076fe <create_chain+0x52>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	e06a      	b.n	80077d4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	429a      	cmp	r2, r3
 8007706:	d201      	bcs.n	800770c <create_chain+0x60>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	e063      	b.n	80077d4 <create_chain+0x128>
		scl = clst;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	3301      	adds	r3, #1
 8007718:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	429a      	cmp	r2, r3
 8007722:	d307      	bcc.n	8007734 <create_chain+0x88>
				ncl = 2;
 8007724:	2302      	movs	r3, #2
 8007726:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	429a      	cmp	r2, r3
 800772e:	d901      	bls.n	8007734 <create_chain+0x88>
 8007730:	2300      	movs	r3, #0
 8007732:	e04f      	b.n	80077d4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007734:	69f9      	ldr	r1, [r7, #28]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff fdc7 	bl	80072ca <get_fat>
 800773c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00e      	beq.n	8007762 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d003      	beq.n	8007752 <create_chain+0xa6>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007750:	d101      	bne.n	8007756 <create_chain+0xaa>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	e03e      	b.n	80077d4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	429a      	cmp	r2, r3
 800775c:	d1da      	bne.n	8007714 <create_chain+0x68>
 800775e:	2300      	movs	r3, #0
 8007760:	e038      	b.n	80077d4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007762:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007768:	69f9      	ldr	r1, [r7, #28]
 800776a:	6938      	ldr	r0, [r7, #16]
 800776c:	f7ff fe52 	bl	8007414 <put_fat>
 8007770:	4603      	mov	r3, r0
 8007772:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007774:	7dfb      	ldrb	r3, [r7, #23]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <create_chain+0xe2>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007780:	69fa      	ldr	r2, [r7, #28]
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6938      	ldr	r0, [r7, #16]
 8007786:	f7ff fe45 	bl	8007414 <put_fat>
 800778a:	4603      	mov	r3, r0
 800778c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d116      	bne.n	80077c2 <create_chain+0x116>
		fs->last_clst = ncl;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	3b02      	subs	r3, #2
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d804      	bhi.n	80077b2 <create_chain+0x106>
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	1e5a      	subs	r2, r3, #1
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	791b      	ldrb	r3, [r3, #4]
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	711a      	strb	r2, [r3, #4]
 80077c0:	e007      	b.n	80077d2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d102      	bne.n	80077ce <create_chain+0x122>
 80077c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077cc:	e000      	b.n	80077d0 <create_chain+0x124>
 80077ce:	2301      	movs	r3, #1
 80077d0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80077d2:	69fb      	ldr	r3, [r7, #28]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3720      	adds	r7, #32
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	3304      	adds	r3, #4
 80077f2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	0a5b      	lsrs	r3, r3, #9
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	8952      	ldrh	r2, [r2, #10]
 80077fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007800:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1d1a      	adds	r2, r3, #4
 8007806:	613a      	str	r2, [r7, #16]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <clmt_clust+0x3a>
 8007812:	2300      	movs	r3, #0
 8007814:	e010      	b.n	8007838 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	429a      	cmp	r2, r3
 800781c:	d307      	bcc.n	800782e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	617b      	str	r3, [r7, #20]
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	3304      	adds	r3, #4
 800782a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800782c:	e7e9      	b.n	8007802 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800782e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	4413      	add	r3, r2
}
 8007838:	4618      	mov	r0, r3
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800785a:	d204      	bcs.n	8007866 <dir_sdi+0x22>
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007866:	2302      	movs	r3, #2
 8007868:	e063      	b.n	8007932 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d106      	bne.n	800788a <dir_sdi+0x46>
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b02      	cmp	r3, #2
 8007882:	d902      	bls.n	800788a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10c      	bne.n	80078aa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	8912      	ldrh	r2, [r2, #8]
 8007898:	4293      	cmp	r3, r2
 800789a:	d301      	bcc.n	80078a0 <dir_sdi+0x5c>
 800789c:	2302      	movs	r3, #2
 800789e:	e048      	b.n	8007932 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	61da      	str	r2, [r3, #28]
 80078a8:	e029      	b.n	80078fe <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	895b      	ldrh	r3, [r3, #10]
 80078ae:	025b      	lsls	r3, r3, #9
 80078b0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80078b2:	e019      	b.n	80078e8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6979      	ldr	r1, [r7, #20]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff fd06 	bl	80072ca <get_fat>
 80078be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c6:	d101      	bne.n	80078cc <dir_sdi+0x88>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e032      	b.n	8007932 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d904      	bls.n	80078dc <dir_sdi+0x98>
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d301      	bcc.n	80078e0 <dir_sdi+0x9c>
 80078dc:	2302      	movs	r3, #2
 80078de:	e028      	b.n	8007932 <dir_sdi+0xee>
			ofs -= csz;
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d2e1      	bcs.n	80078b4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80078f0:	6979      	ldr	r1, [r7, #20]
 80078f2:	6938      	ldr	r0, [r7, #16]
 80078f4:	f7ff fcca 	bl	800728c <clust2sect>
 80078f8:	4602      	mov	r2, r0
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <dir_sdi+0xcc>
 800790c:	2302      	movs	r3, #2
 800790e:	e010      	b.n	8007932 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	69da      	ldr	r2, [r3, #28]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	0a5b      	lsrs	r3, r3, #9
 8007918:	441a      	add	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792a:	441a      	add	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	3320      	adds	r3, #32
 8007950:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <dir_next+0x28>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007960:	d301      	bcc.n	8007966 <dir_next+0x2c>
 8007962:	2304      	movs	r3, #4
 8007964:	e0aa      	b.n	8007abc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796c:	2b00      	cmp	r3, #0
 800796e:	f040 8098 	bne.w	8007aa2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10b      	bne.n	800799c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	095b      	lsrs	r3, r3, #5
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	8912      	ldrh	r2, [r2, #8]
 800798c:	4293      	cmp	r3, r2
 800798e:	f0c0 8088 	bcc.w	8007aa2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	61da      	str	r2, [r3, #28]
 8007998:	2304      	movs	r3, #4
 800799a:	e08f      	b.n	8007abc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	0a5b      	lsrs	r3, r3, #9
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	8952      	ldrh	r2, [r2, #10]
 80079a4:	3a01      	subs	r2, #1
 80079a6:	4013      	ands	r3, r2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d17a      	bne.n	8007aa2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	4619      	mov	r1, r3
 80079b4:	4610      	mov	r0, r2
 80079b6:	f7ff fc88 	bl	80072ca <get_fat>
 80079ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d801      	bhi.n	80079c6 <dir_next+0x8c>
 80079c2:	2302      	movs	r3, #2
 80079c4:	e07a      	b.n	8007abc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079cc:	d101      	bne.n	80079d2 <dir_next+0x98>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e074      	b.n	8007abc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d358      	bcc.n	8007a8e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d104      	bne.n	80079ec <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	61da      	str	r2, [r3, #28]
 80079e8:	2304      	movs	r3, #4
 80079ea:	e067      	b.n	8007abc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	4619      	mov	r1, r3
 80079f4:	4610      	mov	r0, r2
 80079f6:	f7ff fe59 	bl	80076ac <create_chain>
 80079fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <dir_next+0xcc>
 8007a02:	2307      	movs	r3, #7
 8007a04:	e05a      	b.n	8007abc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d101      	bne.n	8007a10 <dir_next+0xd6>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e055      	b.n	8007abc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a16:	d101      	bne.n	8007a1c <dir_next+0xe2>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e04f      	b.n	8007abc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f7ff fb55 	bl	80070cc <sync_window>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <dir_next+0xf2>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e047      	b.n	8007abc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3330      	adds	r3, #48	; 0x30
 8007a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a34:	2100      	movs	r1, #0
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff f9bb 	bl	8006db2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	613b      	str	r3, [r7, #16]
 8007a40:	6979      	ldr	r1, [r7, #20]
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f7ff fc22 	bl	800728c <clust2sect>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a4e:	e012      	b.n	8007a76 <dir_next+0x13c>
						fs->wflag = 1;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff fb38 	bl	80070cc <sync_window>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <dir_next+0x12c>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e02a      	b.n	8007abc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	613b      	str	r3, [r7, #16]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	895b      	ldrh	r3, [r3, #10]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d3e6      	bcc.n	8007a50 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	1ad2      	subs	r2, r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007a94:	6979      	ldr	r1, [r7, #20]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7ff fbf8 	bl	800728c <clust2sect>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab4:	441a      	add	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff feb4 	bl	8007844 <dir_sdi>
 8007adc:	4603      	mov	r3, r0
 8007ade:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d12b      	bne.n	8007b3e <dir_alloc+0x7a>
		n = 0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	4619      	mov	r1, r3
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f7ff fb2f 	bl	8007154 <move_window>
 8007af6:	4603      	mov	r3, r0
 8007af8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d11d      	bne.n	8007b3c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2be5      	cmp	r3, #229	; 0xe5
 8007b08:	d004      	beq.n	8007b14 <dir_alloc+0x50>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d107      	bne.n	8007b24 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	3301      	adds	r3, #1
 8007b18:	613b      	str	r3, [r7, #16]
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d102      	bne.n	8007b28 <dir_alloc+0x64>
 8007b22:	e00c      	b.n	8007b3e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007b24:	2300      	movs	r3, #0
 8007b26:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007b28:	2101      	movs	r1, #1
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff ff05 	bl	800793a <dir_next>
 8007b30:	4603      	mov	r3, r0
 8007b32:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0d7      	beq.n	8007aea <dir_alloc+0x26>
 8007b3a:	e000      	b.n	8007b3e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007b3c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d101      	bne.n	8007b48 <dir_alloc+0x84>
 8007b44:	2307      	movs	r3, #7
 8007b46:	75fb      	strb	r3, [r7, #23]
	return res;
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	331a      	adds	r3, #26
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff f883 	bl	8006c6c <ld_word>
 8007b66:	4603      	mov	r3, r0
 8007b68:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d109      	bne.n	8007b86 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	3314      	adds	r3, #20
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff f878 	bl	8006c6c <ld_word>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	041b      	lsls	r3, r3, #16
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007b86:	68fb      	ldr	r3, [r7, #12]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	331a      	adds	r3, #26
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	b292      	uxth	r2, r2
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff f89b 	bl	8006ce2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d109      	bne.n	8007bc8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f103 0214 	add.w	r2, r3, #20
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	0c1b      	lsrs	r3, r3, #16
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	f7ff f88d 	bl	8006ce2 <st_word>
	}
}
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007bde:	2100      	movs	r1, #0
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fe2f 	bl	8007844 <dir_sdi>
 8007be6:	4603      	mov	r3, r0
 8007be8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <dir_find+0x24>
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	e03e      	b.n	8007c72 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6938      	ldr	r0, [r7, #16]
 8007bfc:	f7ff faaa 	bl	8007154 <move_window>
 8007c00:	4603      	mov	r3, r0
 8007c02:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d12f      	bne.n	8007c6a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <dir_find+0x4e>
 8007c18:	2304      	movs	r3, #4
 8007c1a:	75fb      	strb	r3, [r7, #23]
 8007c1c:	e028      	b.n	8007c70 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	330b      	adds	r3, #11
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	330b      	adds	r3, #11
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <dir_find+0x86>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a18      	ldr	r0, [r3, #32]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3324      	adds	r3, #36	; 0x24
 8007c48:	220b      	movs	r2, #11
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	f7ff f8cb 	bl	8006de6 <mem_cmp>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00b      	beq.n	8007c6e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007c56:	2100      	movs	r1, #0
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff fe6e 	bl	800793a <dir_next>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0c5      	beq.n	8007bf4 <dir_find+0x24>
 8007c68:	e002      	b.n	8007c70 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007c6a:	bf00      	nop
 8007c6c:	e000      	b.n	8007c70 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c6e:	bf00      	nop

	return res;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007c88:	2101      	movs	r1, #1
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff ff1a 	bl	8007ac4 <dir_alloc>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d11c      	bne.n	8007cd4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68b8      	ldr	r0, [r7, #8]
 8007ca2:	f7ff fa57 	bl	8007154 <move_window>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d111      	bne.n	8007cd4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff f87a 	bl	8006db2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a18      	ldr	r0, [r3, #32]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3324      	adds	r3, #36	; 0x24
 8007cc6:	220b      	movs	r2, #11
 8007cc8:	4619      	mov	r1, r3
 8007cca:	f7ff f851 	bl	8006d70 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3324      	adds	r3, #36	; 0x24
 8007cf4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007cf6:	220b      	movs	r2, #11
 8007cf8:	2120      	movs	r1, #32
 8007cfa:	68b8      	ldr	r0, [r7, #8]
 8007cfc:	f7ff f859 	bl	8006db2 <mem_set>
	si = i = 0; ni = 8;
 8007d00:	2300      	movs	r3, #0
 8007d02:	613b      	str	r3, [r7, #16]
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	2308      	movs	r3, #8
 8007d0a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	617a      	str	r2, [r7, #20]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007d1a:	7ffb      	ldrb	r3, [r7, #31]
 8007d1c:	2b20      	cmp	r3, #32
 8007d1e:	d94e      	bls.n	8007dbe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007d20:	7ffb      	ldrb	r3, [r7, #31]
 8007d22:	2b2f      	cmp	r3, #47	; 0x2f
 8007d24:	d006      	beq.n	8007d34 <create_name+0x54>
 8007d26:	7ffb      	ldrb	r3, [r7, #31]
 8007d28:	2b5c      	cmp	r3, #92	; 0x5c
 8007d2a:	d110      	bne.n	8007d4e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d2c:	e002      	b.n	8007d34 <create_name+0x54>
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	3301      	adds	r3, #1
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	4413      	add	r3, r2
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b2f      	cmp	r3, #47	; 0x2f
 8007d3e:	d0f6      	beq.n	8007d2e <create_name+0x4e>
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	4413      	add	r3, r2
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b5c      	cmp	r3, #92	; 0x5c
 8007d4a:	d0f0      	beq.n	8007d2e <create_name+0x4e>
			break;
 8007d4c:	e038      	b.n	8007dc0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007d4e:	7ffb      	ldrb	r3, [r7, #31]
 8007d50:	2b2e      	cmp	r3, #46	; 0x2e
 8007d52:	d003      	beq.n	8007d5c <create_name+0x7c>
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d30c      	bcc.n	8007d76 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b0b      	cmp	r3, #11
 8007d60:	d002      	beq.n	8007d68 <create_name+0x88>
 8007d62:	7ffb      	ldrb	r3, [r7, #31]
 8007d64:	2b2e      	cmp	r3, #46	; 0x2e
 8007d66:	d001      	beq.n	8007d6c <create_name+0x8c>
 8007d68:	2306      	movs	r3, #6
 8007d6a:	e044      	b.n	8007df6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007d6c:	2308      	movs	r3, #8
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	230b      	movs	r3, #11
 8007d72:	61bb      	str	r3, [r7, #24]
			continue;
 8007d74:	e022      	b.n	8007dbc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007d76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	da04      	bge.n	8007d88 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007d7e:	7ffb      	ldrb	r3, [r7, #31]
 8007d80:	3b80      	subs	r3, #128	; 0x80
 8007d82:	4a1f      	ldr	r2, [pc, #124]	; (8007e00 <create_name+0x120>)
 8007d84:	5cd3      	ldrb	r3, [r2, r3]
 8007d86:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007d88:	7ffb      	ldrb	r3, [r7, #31]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	481d      	ldr	r0, [pc, #116]	; (8007e04 <create_name+0x124>)
 8007d8e:	f7ff f851 	bl	8006e34 <chk_chr>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <create_name+0xbc>
 8007d98:	2306      	movs	r3, #6
 8007d9a:	e02c      	b.n	8007df6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007d9c:	7ffb      	ldrb	r3, [r7, #31]
 8007d9e:	2b60      	cmp	r3, #96	; 0x60
 8007da0:	d905      	bls.n	8007dae <create_name+0xce>
 8007da2:	7ffb      	ldrb	r3, [r7, #31]
 8007da4:	2b7a      	cmp	r3, #122	; 0x7a
 8007da6:	d802      	bhi.n	8007dae <create_name+0xce>
 8007da8:	7ffb      	ldrb	r3, [r7, #31]
 8007daa:	3b20      	subs	r3, #32
 8007dac:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	613a      	str	r2, [r7, #16]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	4413      	add	r3, r2
 8007db8:	7ffa      	ldrb	r2, [r7, #31]
 8007dba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007dbc:	e7a6      	b.n	8007d0c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007dbe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	441a      	add	r2, r3
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <create_name+0xf4>
 8007dd0:	2306      	movs	r3, #6
 8007dd2:	e010      	b.n	8007df6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2be5      	cmp	r3, #229	; 0xe5
 8007dda:	d102      	bne.n	8007de2 <create_name+0x102>
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2205      	movs	r2, #5
 8007de0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007de2:	7ffb      	ldrb	r3, [r7, #31]
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d801      	bhi.n	8007dec <create_name+0x10c>
 8007de8:	2204      	movs	r2, #4
 8007dea:	e000      	b.n	8007dee <create_name+0x10e>
 8007dec:	2200      	movs	r2, #0
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	330b      	adds	r3, #11
 8007df2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007df4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	08009700 	.word	0x08009700
 8007e04:	08009684 	.word	0x08009684

08007e08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007e1c:	e002      	b.n	8007e24 <follow_path+0x1c>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	3301      	adds	r3, #1
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	2b2f      	cmp	r3, #47	; 0x2f
 8007e2a:	d0f8      	beq.n	8007e1e <follow_path+0x16>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2b5c      	cmp	r3, #92	; 0x5c
 8007e32:	d0f4      	beq.n	8007e1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2200      	movs	r2, #0
 8007e38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	2b1f      	cmp	r3, #31
 8007e40:	d80a      	bhi.n	8007e58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2280      	movs	r2, #128	; 0x80
 8007e46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff fcf9 	bl	8007844 <dir_sdi>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]
 8007e56:	e043      	b.n	8007ee0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e58:	463b      	mov	r3, r7
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ff3f 	bl	8007ce0 <create_name>
 8007e62:	4603      	mov	r3, r0
 8007e64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d134      	bne.n	8007ed6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff feaf 	bl	8007bd0 <dir_find>
 8007e72:	4603      	mov	r3, r0
 8007e74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007e7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007e7e:	7dfb      	ldrb	r3, [r7, #23]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d127      	bne.n	8007eda <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007e8a:	7afb      	ldrb	r3, [r7, #11]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d122      	bne.n	8007eda <follow_path+0xd2>
 8007e94:	2305      	movs	r3, #5
 8007e96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007e98:	e01f      	b.n	8007eda <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e9a:	7afb      	ldrb	r3, [r7, #11]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d11c      	bne.n	8007ede <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	799b      	ldrb	r3, [r3, #6]
 8007ea8:	f003 0310 	and.w	r3, r3, #16
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d102      	bne.n	8007eb6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007eb0:	2305      	movs	r3, #5
 8007eb2:	75fb      	strb	r3, [r7, #23]
 8007eb4:	e014      	b.n	8007ee0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec4:	4413      	add	r3, r2
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7ff fe42 	bl	8007b52 <ld_clust>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ed4:	e7c0      	b.n	8007e58 <follow_path+0x50>
			if (res != FR_OK) break;
 8007ed6:	bf00      	nop
 8007ed8:	e002      	b.n	8007ee0 <follow_path+0xd8>
				break;
 8007eda:	bf00      	nop
 8007edc:	e000      	b.n	8007ee0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ede:	bf00      	nop
			}
		}
	}

	return res;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b087      	sub	sp, #28
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ef6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d031      	beq.n	8007f64 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	617b      	str	r3, [r7, #20]
 8007f06:	e002      	b.n	8007f0e <get_ldnumber+0x24>
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	617b      	str	r3, [r7, #20]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	d903      	bls.n	8007f1e <get_ldnumber+0x34>
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b3a      	cmp	r3, #58	; 0x3a
 8007f1c:	d1f4      	bne.n	8007f08 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b3a      	cmp	r3, #58	; 0x3a
 8007f24:	d11c      	bne.n	8007f60 <get_ldnumber+0x76>
			tp = *path;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	60fa      	str	r2, [r7, #12]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	3b30      	subs	r3, #48	; 0x30
 8007f36:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b09      	cmp	r3, #9
 8007f3c:	d80e      	bhi.n	8007f5c <get_ldnumber+0x72>
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d10a      	bne.n	8007f5c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d107      	bne.n	8007f5c <get_ldnumber+0x72>
					vol = (int)i;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	3301      	adds	r3, #1
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	e002      	b.n	8007f66 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007f60:	2300      	movs	r3, #0
 8007f62:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007f64:	693b      	ldr	r3, [r7, #16]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
	...

08007f74 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	70da      	strb	r2, [r3, #3]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff f8e0 	bl	8007154 <move_window>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <check_fs+0x2a>
 8007f9a:	2304      	movs	r3, #4
 8007f9c:	e038      	b.n	8008010 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3330      	adds	r3, #48	; 0x30
 8007fa2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fe60 	bl	8006c6c <ld_word>
 8007fac:	4603      	mov	r3, r0
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d001      	beq.n	8007fbc <check_fs+0x48>
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e029      	b.n	8008010 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fc2:	2be9      	cmp	r3, #233	; 0xe9
 8007fc4:	d009      	beq.n	8007fda <check_fs+0x66>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fcc:	2beb      	cmp	r3, #235	; 0xeb
 8007fce:	d11e      	bne.n	800800e <check_fs+0x9a>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007fd6:	2b90      	cmp	r3, #144	; 0x90
 8007fd8:	d119      	bne.n	800800e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3330      	adds	r3, #48	; 0x30
 8007fde:	3336      	adds	r3, #54	; 0x36
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe fe5b 	bl	8006c9c <ld_dword>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007fec:	4a0a      	ldr	r2, [pc, #40]	; (8008018 <check_fs+0xa4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d101      	bne.n	8007ff6 <check_fs+0x82>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e00c      	b.n	8008010 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3330      	adds	r3, #48	; 0x30
 8007ffa:	3352      	adds	r3, #82	; 0x52
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fe fe4d 	bl	8006c9c <ld_dword>
 8008002:	4602      	mov	r2, r0
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <check_fs+0xa8>)
 8008006:	429a      	cmp	r2, r3
 8008008:	d101      	bne.n	800800e <check_fs+0x9a>
 800800a:	2300      	movs	r3, #0
 800800c:	e000      	b.n	8008010 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800800e:	2302      	movs	r3, #2
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	00544146 	.word	0x00544146
 800801c:	33544146 	.word	0x33544146

08008020 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b096      	sub	sp, #88	; 0x58
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	4613      	mov	r3, r2
 800802c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f7ff ff58 	bl	8007eea <get_ldnumber>
 800803a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800803c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803e:	2b00      	cmp	r3, #0
 8008040:	da01      	bge.n	8008046 <find_volume+0x26>
 8008042:	230b      	movs	r3, #11
 8008044:	e22e      	b.n	80084a4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008046:	4aa8      	ldr	r2, [pc, #672]	; (80082e8 <find_volume+0x2c8>)
 8008048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800804e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <find_volume+0x3a>
 8008056:	230c      	movs	r3, #12
 8008058:	e224      	b.n	80084a4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800805e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	f023 0301 	bic.w	r3, r3, #1
 8008066:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d01a      	beq.n	80080a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	785b      	ldrb	r3, [r3, #1]
 8008074:	4618      	mov	r0, r3
 8008076:	f7fe fd5b 	bl	8006b30 <disk_status>
 800807a:	4603      	mov	r3, r0
 800807c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10c      	bne.n	80080a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d007      	beq.n	80080a2 <find_volume+0x82>
 8008092:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008096:	f003 0304 	and.w	r3, r3, #4
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800809e:	230a      	movs	r3, #10
 80080a0:	e200      	b.n	80084a4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80080a2:	2300      	movs	r3, #0
 80080a4:	e1fe      	b.n	80084a4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	2200      	movs	r2, #0
 80080aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80080ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	785b      	ldrb	r3, [r3, #1]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fe fd53 	bl	8006b64 <disk_initialize>
 80080be:	4603      	mov	r3, r0
 80080c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80080c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80080d0:	2303      	movs	r3, #3
 80080d2:	e1e7      	b.n	80084a4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d007      	beq.n	80080ea <find_volume+0xca>
 80080da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80080e6:	230a      	movs	r3, #10
 80080e8:	e1dc      	b.n	80084a4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80080ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080f2:	f7ff ff3f 	bl	8007f74 <check_fs>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80080fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008100:	2b02      	cmp	r3, #2
 8008102:	d14b      	bne.n	800819c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008104:	2300      	movs	r3, #0
 8008106:	643b      	str	r3, [r7, #64]	; 0x40
 8008108:	e01f      	b.n	800814a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008118:	4413      	add	r3, r2
 800811a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	3304      	adds	r3, #4
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d006      	beq.n	8008134 <find_volume+0x114>
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	3308      	adds	r3, #8
 800812a:	4618      	mov	r0, r3
 800812c:	f7fe fdb6 	bl	8006c9c <ld_dword>
 8008130:	4602      	mov	r2, r0
 8008132:	e000      	b.n	8008136 <find_volume+0x116>
 8008134:	2200      	movs	r2, #0
 8008136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800813e:	440b      	add	r3, r1
 8008140:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008146:	3301      	adds	r3, #1
 8008148:	643b      	str	r3, [r7, #64]	; 0x40
 800814a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800814c:	2b03      	cmp	r3, #3
 800814e:	d9dc      	bls.n	800810a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008150:	2300      	movs	r3, #0
 8008152:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <find_volume+0x140>
 800815a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800815c:	3b01      	subs	r3, #1
 800815e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008168:	4413      	add	r3, r2
 800816a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800816e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <find_volume+0x162>
 8008176:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008178:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800817a:	f7ff fefb 	bl	8007f74 <check_fs>
 800817e:	4603      	mov	r3, r0
 8008180:	e000      	b.n	8008184 <find_volume+0x164>
 8008182:	2303      	movs	r3, #3
 8008184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800818c:	2b01      	cmp	r3, #1
 800818e:	d905      	bls.n	800819c <find_volume+0x17c>
 8008190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008192:	3301      	adds	r3, #1
 8008194:	643b      	str	r3, [r7, #64]	; 0x40
 8008196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008198:	2b03      	cmp	r3, #3
 800819a:	d9e1      	bls.n	8008160 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800819c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d101      	bne.n	80081a8 <find_volume+0x188>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e17d      	b.n	80084a4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80081a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d901      	bls.n	80081b4 <find_volume+0x194>
 80081b0:	230d      	movs	r3, #13
 80081b2:	e177      	b.n	80084a4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	3330      	adds	r3, #48	; 0x30
 80081b8:	330b      	adds	r3, #11
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe fd56 	bl	8006c6c <ld_word>
 80081c0:	4603      	mov	r3, r0
 80081c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c6:	d001      	beq.n	80081cc <find_volume+0x1ac>
 80081c8:	230d      	movs	r3, #13
 80081ca:	e16b      	b.n	80084a4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	3330      	adds	r3, #48	; 0x30
 80081d0:	3316      	adds	r3, #22
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fd4a 	bl	8006c6c <ld_word>
 80081d8:	4603      	mov	r3, r0
 80081da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80081dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <find_volume+0x1d0>
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	3330      	adds	r3, #48	; 0x30
 80081e6:	3324      	adds	r3, #36	; 0x24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe fd57 	bl	8006c9c <ld_dword>
 80081ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081f4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80081fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	789b      	ldrb	r3, [r3, #2]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d005      	beq.n	8008214 <find_volume+0x1f4>
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	789b      	ldrb	r3, [r3, #2]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d001      	beq.n	8008214 <find_volume+0x1f4>
 8008210:	230d      	movs	r3, #13
 8008212:	e147      	b.n	80084a4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008216:	789b      	ldrb	r3, [r3, #2]
 8008218:	461a      	mov	r2, r3
 800821a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800821c:	fb02 f303 	mul.w	r3, r2, r3
 8008220:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008228:	b29a      	uxth	r2, r3
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	895b      	ldrh	r3, [r3, #10]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d008      	beq.n	8008248 <find_volume+0x228>
 8008236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008238:	895b      	ldrh	r3, [r3, #10]
 800823a:	461a      	mov	r2, r3
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	895b      	ldrh	r3, [r3, #10]
 8008240:	3b01      	subs	r3, #1
 8008242:	4013      	ands	r3, r2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <find_volume+0x22c>
 8008248:	230d      	movs	r3, #13
 800824a:	e12b      	b.n	80084a4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	3330      	adds	r3, #48	; 0x30
 8008250:	3311      	adds	r3, #17
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe fd0a 	bl	8006c6c <ld_word>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	891b      	ldrh	r3, [r3, #8]
 8008264:	f003 030f 	and.w	r3, r3, #15
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <find_volume+0x252>
 800826e:	230d      	movs	r3, #13
 8008270:	e118      	b.n	80084a4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	3330      	adds	r3, #48	; 0x30
 8008276:	3313      	adds	r3, #19
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fcf7 	bl	8006c6c <ld_word>
 800827e:	4603      	mov	r3, r0
 8008280:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008284:	2b00      	cmp	r3, #0
 8008286:	d106      	bne.n	8008296 <find_volume+0x276>
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	3330      	adds	r3, #48	; 0x30
 800828c:	3320      	adds	r3, #32
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fd04 	bl	8006c9c <ld_dword>
 8008294:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	3330      	adds	r3, #48	; 0x30
 800829a:	330e      	adds	r3, #14
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe fce5 	bl	8006c6c <ld_word>
 80082a2:	4603      	mov	r3, r0
 80082a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80082a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <find_volume+0x290>
 80082ac:	230d      	movs	r3, #13
 80082ae:	e0f9      	b.n	80084a4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80082b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b4:	4413      	add	r3, r2
 80082b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082b8:	8912      	ldrh	r2, [r2, #8]
 80082ba:	0912      	lsrs	r2, r2, #4
 80082bc:	b292      	uxth	r2, r2
 80082be:	4413      	add	r3, r2
 80082c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80082c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d201      	bcs.n	80082ce <find_volume+0x2ae>
 80082ca:	230d      	movs	r3, #13
 80082cc:	e0ea      	b.n	80084a4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80082ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082d6:	8952      	ldrh	r2, [r2, #10]
 80082d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d103      	bne.n	80082ec <find_volume+0x2cc>
 80082e4:	230d      	movs	r3, #13
 80082e6:	e0dd      	b.n	80084a4 <find_volume+0x484>
 80082e8:	200000f8 	.word	0x200000f8
		fmt = FS_FAT32;
 80082ec:	2303      	movs	r3, #3
 80082ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d802      	bhi.n	8008302 <find_volume+0x2e2>
 80082fc:	2302      	movs	r3, #2
 80082fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008308:	4293      	cmp	r3, r2
 800830a:	d802      	bhi.n	8008312 <find_volume+0x2f2>
 800830c:	2301      	movs	r3, #1
 800830e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	1c9a      	adds	r2, r3, #2
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800831e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008320:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008324:	441a      	add	r2, r3
 8008326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008328:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800832a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	441a      	add	r2, r3
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008338:	2b03      	cmp	r3, #3
 800833a:	d11e      	bne.n	800837a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	3330      	adds	r3, #48	; 0x30
 8008340:	332a      	adds	r3, #42	; 0x2a
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fc92 	bl	8006c6c <ld_word>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <find_volume+0x332>
 800834e:	230d      	movs	r3, #13
 8008350:	e0a8      	b.n	80084a4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	891b      	ldrh	r3, [r3, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <find_volume+0x33e>
 800835a:	230d      	movs	r3, #13
 800835c:	e0a2      	b.n	80084a4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	3330      	adds	r3, #48	; 0x30
 8008362:	332c      	adds	r3, #44	; 0x2c
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe fc99 	bl	8006c9c <ld_dword>
 800836a:	4602      	mov	r2, r0
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	647b      	str	r3, [r7, #68]	; 0x44
 8008378:	e01f      	b.n	80083ba <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	891b      	ldrh	r3, [r3, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <find_volume+0x366>
 8008382:	230d      	movs	r3, #13
 8008384:	e08e      	b.n	80084a4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	6a1a      	ldr	r2, [r3, #32]
 800838a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838c:	441a      	add	r2, r3
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008392:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008396:	2b02      	cmp	r3, #2
 8008398:	d103      	bne.n	80083a2 <find_volume+0x382>
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	e00a      	b.n	80083b8 <find_volume+0x398>
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	695a      	ldr	r2, [r3, #20]
 80083a6:	4613      	mov	r3, r2
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	4413      	add	r3, r2
 80083ac:	085a      	lsrs	r2, r3, #1
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80083b8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	699a      	ldr	r2, [r3, #24]
 80083be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80083c4:	0a5b      	lsrs	r3, r3, #9
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d201      	bcs.n	80083ce <find_volume+0x3ae>
 80083ca:	230d      	movs	r3, #13
 80083cc:	e06a      	b.n	80084a4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083d4:	611a      	str	r2, [r3, #16]
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	2280      	movs	r2, #128	; 0x80
 80083e2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80083e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d149      	bne.n	8008480 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	3330      	adds	r3, #48	; 0x30
 80083f0:	3330      	adds	r3, #48	; 0x30
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fc3a 	bl	8006c6c <ld_word>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d140      	bne.n	8008480 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80083fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008400:	3301      	adds	r3, #1
 8008402:	4619      	mov	r1, r3
 8008404:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008406:	f7fe fea5 	bl	8007154 <move_window>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d137      	bne.n	8008480 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008412:	2200      	movs	r2, #0
 8008414:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	3330      	adds	r3, #48	; 0x30
 800841a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fc24 	bl	8006c6c <ld_word>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800842c:	429a      	cmp	r2, r3
 800842e:	d127      	bne.n	8008480 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	3330      	adds	r3, #48	; 0x30
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fc31 	bl	8006c9c <ld_dword>
 800843a:	4602      	mov	r2, r0
 800843c:	4b1b      	ldr	r3, [pc, #108]	; (80084ac <find_volume+0x48c>)
 800843e:	429a      	cmp	r2, r3
 8008440:	d11e      	bne.n	8008480 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	3330      	adds	r3, #48	; 0x30
 8008446:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe fc26 	bl	8006c9c <ld_dword>
 8008450:	4602      	mov	r2, r0
 8008452:	4b17      	ldr	r3, [pc, #92]	; (80084b0 <find_volume+0x490>)
 8008454:	429a      	cmp	r2, r3
 8008456:	d113      	bne.n	8008480 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	3330      	adds	r3, #48	; 0x30
 800845c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe fc1b 	bl	8006c9c <ld_dword>
 8008466:	4602      	mov	r2, r0
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	3330      	adds	r3, #48	; 0x30
 8008470:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe fc11 	bl	8006c9c <ld_dword>
 800847a:	4602      	mov	r2, r0
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008486:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008488:	4b0a      	ldr	r3, [pc, #40]	; (80084b4 <find_volume+0x494>)
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	3301      	adds	r3, #1
 800848e:	b29a      	uxth	r2, r3
 8008490:	4b08      	ldr	r3, [pc, #32]	; (80084b4 <find_volume+0x494>)
 8008492:	801a      	strh	r2, [r3, #0]
 8008494:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <find_volume+0x494>)
 8008496:	881a      	ldrh	r2, [r3, #0]
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800849c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800849e:	f7fe fdf1 	bl	8007084 <clear_lock>
#endif
	return FR_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3758      	adds	r7, #88	; 0x58
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	41615252 	.word	0x41615252
 80084b0:	61417272 	.word	0x61417272
 80084b4:	200000fc 	.word	0x200000fc

080084b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80084c2:	2309      	movs	r3, #9
 80084c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d01c      	beq.n	8008506 <validate+0x4e>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d018      	beq.n	8008506 <validate+0x4e>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d013      	beq.n	8008506 <validate+0x4e>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	889a      	ldrh	r2, [r3, #4]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	88db      	ldrh	r3, [r3, #6]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d10c      	bne.n	8008506 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	785b      	ldrb	r3, [r3, #1]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe fb1c 	bl	8006b30 <disk_status>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <validate+0x4e>
			res = FR_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <validate+0x5a>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	e000      	b.n	8008514 <validate+0x5c>
 8008512:	2300      	movs	r3, #0
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	6013      	str	r3, [r2, #0]
	return res;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	4613      	mov	r3, r2
 8008530:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008536:	f107 0310 	add.w	r3, r7, #16
 800853a:	4618      	mov	r0, r3
 800853c:	f7ff fcd5 	bl	8007eea <get_ldnumber>
 8008540:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	2b00      	cmp	r3, #0
 8008546:	da01      	bge.n	800854c <f_mount+0x28>
 8008548:	230b      	movs	r3, #11
 800854a:	e02b      	b.n	80085a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800854c:	4a17      	ldr	r2, [pc, #92]	; (80085ac <f_mount+0x88>)
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008554:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800855c:	69b8      	ldr	r0, [r7, #24]
 800855e:	f7fe fd91 	bl	8007084 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2200      	movs	r2, #0
 8008566:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	490d      	ldr	r1, [pc, #52]	; (80085ac <f_mount+0x88>)
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <f_mount+0x66>
 8008584:	79fb      	ldrb	r3, [r7, #7]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d001      	beq.n	800858e <f_mount+0x6a>
 800858a:	2300      	movs	r3, #0
 800858c:	e00a      	b.n	80085a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800858e:	f107 010c 	add.w	r1, r7, #12
 8008592:	f107 0308 	add.w	r3, r7, #8
 8008596:	2200      	movs	r2, #0
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff fd41 	bl	8008020 <find_volume>
 800859e:	4603      	mov	r3, r0
 80085a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	200000f8 	.word	0x200000f8

080085b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b098      	sub	sp, #96	; 0x60
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4613      	mov	r3, r2
 80085bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <f_open+0x18>
 80085c4:	2309      	movs	r3, #9
 80085c6:	e1ad      	b.n	8008924 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80085d0:	79fa      	ldrb	r2, [r7, #7]
 80085d2:	f107 0110 	add.w	r1, r7, #16
 80085d6:	f107 0308 	add.w	r3, r7, #8
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff fd20 	bl	8008020 <find_volume>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80085e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f040 8191 	bne.w	8008912 <f_open+0x362>
		dj.obj.fs = fs;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	f107 0314 	add.w	r3, r7, #20
 80085fa:	4611      	mov	r1, r2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff fc03 	bl	8007e08 <follow_path>
 8008602:	4603      	mov	r3, r0
 8008604:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008608:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800860c:	2b00      	cmp	r3, #0
 800860e:	d11a      	bne.n	8008646 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008610:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008614:	b25b      	sxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	da03      	bge.n	8008622 <f_open+0x72>
				res = FR_INVALID_NAME;
 800861a:	2306      	movs	r3, #6
 800861c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008620:	e011      	b.n	8008646 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	2b00      	cmp	r3, #0
 800862a:	bf14      	ite	ne
 800862c:	2301      	movne	r3, #1
 800862e:	2300      	moveq	r3, #0
 8008630:	b2db      	uxtb	r3, r3
 8008632:	461a      	mov	r2, r3
 8008634:	f107 0314 	add.w	r3, r7, #20
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fc16 	bl	8006e6c <chk_lock>
 8008640:	4603      	mov	r3, r0
 8008642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	f003 031c 	and.w	r3, r3, #28
 800864c:	2b00      	cmp	r3, #0
 800864e:	d07f      	beq.n	8008750 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008650:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008654:	2b00      	cmp	r3, #0
 8008656:	d017      	beq.n	8008688 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008658:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800865c:	2b04      	cmp	r3, #4
 800865e:	d10e      	bne.n	800867e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008660:	f7fe fc60 	bl	8006f24 <enq_lock>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d006      	beq.n	8008678 <f_open+0xc8>
 800866a:	f107 0314 	add.w	r3, r7, #20
 800866e:	4618      	mov	r0, r3
 8008670:	f7ff fb03 	bl	8007c7a <dir_register>
 8008674:	4603      	mov	r3, r0
 8008676:	e000      	b.n	800867a <f_open+0xca>
 8008678:	2312      	movs	r3, #18
 800867a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	f043 0308 	orr.w	r3, r3, #8
 8008684:	71fb      	strb	r3, [r7, #7]
 8008686:	e010      	b.n	80086aa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008688:	7ebb      	ldrb	r3, [r7, #26]
 800868a:	f003 0311 	and.w	r3, r3, #17
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <f_open+0xea>
					res = FR_DENIED;
 8008692:	2307      	movs	r3, #7
 8008694:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008698:	e007      	b.n	80086aa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	f003 0304 	and.w	r3, r3, #4
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <f_open+0xfa>
 80086a4:	2308      	movs	r3, #8
 80086a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80086aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d168      	bne.n	8008784 <f_open+0x1d4>
 80086b2:	79fb      	ldrb	r3, [r7, #7]
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d063      	beq.n	8008784 <f_open+0x1d4>
				dw = GET_FATTIME();
 80086bc:	f7fe f9da 	bl	8006a74 <get_fattime>
 80086c0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80086c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c4:	330e      	adds	r3, #14
 80086c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe fb25 	bl	8006d18 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	3316      	adds	r3, #22
 80086d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe fb1f 	bl	8006d18 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	330b      	adds	r3, #11
 80086de:	2220      	movs	r2, #32
 80086e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff fa32 	bl	8007b52 <ld_clust>
 80086ee:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086f4:	2200      	movs	r2, #0
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff fa4a 	bl	8007b90 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80086fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fe:	331c      	adds	r3, #28
 8008700:	2100      	movs	r1, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe fb08 	bl	8006d18 <st_dword>
					fs->wflag = 1;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2201      	movs	r2, #1
 800870c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800870e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d037      	beq.n	8008784 <f_open+0x1d4>
						dw = fs->winsect;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800871a:	f107 0314 	add.w	r3, r7, #20
 800871e:	2200      	movs	r2, #0
 8008720:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe ff5d 	bl	80075e2 <remove_chain>
 8008728:	4603      	mov	r3, r0
 800872a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800872e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008732:	2b00      	cmp	r3, #0
 8008734:	d126      	bne.n	8008784 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe fd0a 	bl	8007154 <move_window>
 8008740:	4603      	mov	r3, r0
 8008742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800874a:	3a01      	subs	r2, #1
 800874c:	60da      	str	r2, [r3, #12]
 800874e:	e019      	b.n	8008784 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008754:	2b00      	cmp	r3, #0
 8008756:	d115      	bne.n	8008784 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008758:	7ebb      	ldrb	r3, [r7, #26]
 800875a:	f003 0310 	and.w	r3, r3, #16
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008762:	2304      	movs	r3, #4
 8008764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008768:	e00c      	b.n	8008784 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	2b00      	cmp	r3, #0
 8008772:	d007      	beq.n	8008784 <f_open+0x1d4>
 8008774:	7ebb      	ldrb	r3, [r7, #26]
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <f_open+0x1d4>
						res = FR_DENIED;
 800877e:	2307      	movs	r3, #7
 8008780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008784:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008788:	2b00      	cmp	r3, #0
 800878a:	d128      	bne.n	80087de <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	f003 0308 	and.w	r3, r3, #8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008796:	79fb      	ldrb	r3, [r7, #7]
 8008798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800879c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80087a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	f023 0301 	bic.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bf14      	ite	ne
 80087b6:	2301      	movne	r3, #1
 80087b8:	2300      	moveq	r3, #0
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	461a      	mov	r2, r3
 80087be:	f107 0314 	add.w	r3, r7, #20
 80087c2:	4611      	mov	r1, r2
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fbcf 	bl	8006f68 <inc_lock>
 80087ca:	4602      	mov	r2, r0
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <f_open+0x22e>
 80087d8:	2302      	movs	r3, #2
 80087da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80087de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f040 8095 	bne.w	8008912 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff f9af 	bl	8007b52 <ld_clust>
 80087f4:	4602      	mov	r2, r0
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80087fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fc:	331c      	adds	r3, #28
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe fa4c 	bl	8006c9c <ld_dword>
 8008804:	4602      	mov	r2, r0
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	88da      	ldrh	r2, [r3, #6]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	79fa      	ldrb	r2, [r7, #7]
 8008822:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3330      	adds	r3, #48	; 0x30
 800883a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe fab6 	bl	8006db2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008846:	79fb      	ldrb	r3, [r7, #7]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b00      	cmp	r3, #0
 800884e:	d060      	beq.n	8008912 <f_open+0x362>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d05c      	beq.n	8008912 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	895b      	ldrh	r3, [r3, #10]
 8008864:	025b      	lsls	r3, r3, #9
 8008866:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	657b      	str	r3, [r7, #84]	; 0x54
 8008874:	e016      	b.n	80088a4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe fd25 	bl	80072ca <get_fat>
 8008880:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008884:	2b01      	cmp	r3, #1
 8008886:	d802      	bhi.n	800888e <f_open+0x2de>
 8008888:	2302      	movs	r3, #2
 800888a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800888e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008894:	d102      	bne.n	800889c <f_open+0x2ec>
 8008896:	2301      	movs	r3, #1
 8008898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800889c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800889e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	657b      	str	r3, [r7, #84]	; 0x54
 80088a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d103      	bne.n	80088b4 <f_open+0x304>
 80088ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d8e0      	bhi.n	8008876 <f_open+0x2c6>
				}
				fp->clust = clst;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80088ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d127      	bne.n	8008912 <f_open+0x362>
 80088c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d022      	beq.n	8008912 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fcdb 	bl	800728c <clust2sect>
 80088d6:	6478      	str	r0, [r7, #68]	; 0x44
 80088d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d103      	bne.n	80088e6 <f_open+0x336>
						res = FR_INT_ERR;
 80088de:	2302      	movs	r3, #2
 80088e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80088e4:	e015      	b.n	8008912 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80088e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e8:	0a5a      	lsrs	r2, r3, #9
 80088ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ec:	441a      	add	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	7858      	ldrb	r0, [r3, #1]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a1a      	ldr	r2, [r3, #32]
 8008900:	2301      	movs	r3, #1
 8008902:	f7fe f955 	bl	8006bb0 <disk_read>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <f_open+0x362>
 800890c:	2301      	movs	r3, #1
 800890e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <f_open+0x370>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008924:	4618      	mov	r0, r3
 8008926:	3760      	adds	r7, #96	; 0x60
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08c      	sub	sp, #48	; 0x30
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f107 0210 	add.w	r2, r7, #16
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fdb3 	bl	80084b8 <validate>
 8008952:	4603      	mov	r3, r0
 8008954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800895c:	2b00      	cmp	r3, #0
 800895e:	d107      	bne.n	8008970 <f_write+0x44>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	7d5b      	ldrb	r3, [r3, #21]
 8008964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <f_write+0x4a>
 8008970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008974:	e14b      	b.n	8008c0e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	7d1b      	ldrb	r3, [r3, #20]
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <f_write+0x5a>
 8008982:	2307      	movs	r3, #7
 8008984:	e143      	b.n	8008c0e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	699a      	ldr	r2, [r3, #24]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	441a      	add	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	429a      	cmp	r2, r3
 8008994:	f080 812d 	bcs.w	8008bf2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	43db      	mvns	r3, r3
 800899e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80089a0:	e127      	b.n	8008bf2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f040 80e3 	bne.w	8008b76 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	0a5b      	lsrs	r3, r3, #9
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	8952      	ldrh	r2, [r2, #10]
 80089ba:	3a01      	subs	r2, #1
 80089bc:	4013      	ands	r3, r2
 80089be:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d143      	bne.n	8008a4e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10c      	bne.n	80089e8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d11a      	bne.n	8008a10 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2100      	movs	r1, #0
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe fe64 	bl	80076ac <create_chain>
 80089e4:	62b8      	str	r0, [r7, #40]	; 0x28
 80089e6:	e013      	b.n	8008a10 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d007      	beq.n	8008a00 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	4619      	mov	r1, r3
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f7fe fef0 	bl	80077dc <clmt_clust>
 80089fc:	62b8      	str	r0, [r7, #40]	; 0x28
 80089fe:	e007      	b.n	8008a10 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	4619      	mov	r1, r3
 8008a08:	4610      	mov	r0, r2
 8008a0a:	f7fe fe4f 	bl	80076ac <create_chain>
 8008a0e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 80f2 	beq.w	8008bfc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d104      	bne.n	8008a28 <f_write+0xfc>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2202      	movs	r2, #2
 8008a22:	755a      	strb	r2, [r3, #21]
 8008a24:	2302      	movs	r3, #2
 8008a26:	e0f2      	b.n	8008c0e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a2e:	d104      	bne.n	8008a3a <f_write+0x10e>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	755a      	strb	r2, [r3, #21]
 8008a36:	2301      	movs	r3, #1
 8008a38:	e0e9      	b.n	8008c0e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a3e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d102      	bne.n	8008a4e <f_write+0x122>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a4c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	7d1b      	ldrb	r3, [r3, #20]
 8008a52:	b25b      	sxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	da18      	bge.n	8008a8a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	7858      	ldrb	r0, [r3, #1]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a1a      	ldr	r2, [r3, #32]
 8008a66:	2301      	movs	r3, #1
 8008a68:	f7fe f8c2 	bl	8006bf0 <disk_write>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d004      	beq.n	8008a7c <f_write+0x150>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	755a      	strb	r2, [r3, #21]
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e0c8      	b.n	8008c0e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	7d1b      	ldrb	r3, [r3, #20]
 8008a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f7fe fbfa 	bl	800728c <clust2sect>
 8008a98:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d104      	bne.n	8008aaa <f_write+0x17e>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	755a      	strb	r2, [r3, #21]
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	e0b1      	b.n	8008c0e <f_write+0x2e2>
			sect += csect;
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	4413      	add	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	0a5b      	lsrs	r3, r3, #9
 8008ab6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d03c      	beq.n	8008b38 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	8952      	ldrh	r2, [r2, #10]
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d905      	bls.n	8008ad8 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	895b      	ldrh	r3, [r3, #10]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	7858      	ldrb	r0, [r3, #1]
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	69f9      	ldr	r1, [r7, #28]
 8008ae2:	f7fe f885 	bl	8006bf0 <disk_write>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d004      	beq.n	8008af6 <f_write+0x1ca>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	755a      	strb	r2, [r3, #21]
 8008af2:	2301      	movs	r3, #1
 8008af4:	e08b      	b.n	8008c0e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6a1a      	ldr	r2, [r3, #32]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	6a3a      	ldr	r2, [r7, #32]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d915      	bls.n	8008b30 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6a1a      	ldr	r2, [r3, #32]
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	025b      	lsls	r3, r3, #9
 8008b14:	69fa      	ldr	r2, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	f7fe f927 	bl	8006d70 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	7d1b      	ldrb	r3, [r3, #20]
 8008b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	025b      	lsls	r3, r3, #9
 8008b34:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008b36:	e03f      	b.n	8008bb8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6a1b      	ldr	r3, [r3, #32]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d016      	beq.n	8008b70 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	699a      	ldr	r2, [r3, #24]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d210      	bcs.n	8008b70 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	7858      	ldrb	r0, [r3, #1]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b58:	2301      	movs	r3, #1
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	f7fe f828 	bl	8006bb0 <disk_read>
 8008b60:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d004      	beq.n	8008b70 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	755a      	strb	r2, [r3, #21]
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e04e      	b.n	8008c0e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d901      	bls.n	8008b90 <f_write+0x264>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	4413      	add	r3, r2
 8008ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba2:	69f9      	ldr	r1, [r7, #28]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fe f8e3 	bl	8006d70 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	7d1b      	ldrb	r3, [r3, #20]
 8008bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	4413      	add	r3, r2
 8008bbe:	61fb      	str	r3, [r7, #28]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	699a      	ldr	r2, [r3, #24]
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	441a      	add	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	619a      	str	r2, [r3, #24]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	bf38      	it	cc
 8008bd8:	461a      	movcc	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	60da      	str	r2, [r3, #12]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	441a      	add	r2, r3
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f47f aed4 	bne.w	80089a2 <f_write+0x76>
 8008bfa:	e000      	b.n	8008bfe <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bfc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	7d1b      	ldrb	r3, [r3, #20]
 8008c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3730      	adds	r7, #48	; 0x30
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b086      	sub	sp, #24
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f107 0208 	add.w	r2, r7, #8
 8008c24:	4611      	mov	r1, r2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7ff fc46 	bl	80084b8 <validate>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d168      	bne.n	8008d08 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	7d1b      	ldrb	r3, [r3, #20]
 8008c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d062      	beq.n	8008d08 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7d1b      	ldrb	r3, [r3, #20]
 8008c46:	b25b      	sxtb	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	da15      	bge.n	8008c78 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	7858      	ldrb	r0, [r3, #1]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a1a      	ldr	r2, [r3, #32]
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f7fd ffc8 	bl	8006bf0 <disk_write>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <f_sync+0x54>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e04f      	b.n	8008d0a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7d1b      	ldrb	r3, [r3, #20]
 8008c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008c78:	f7fd fefc 	bl	8006a74 <get_fattime>
 8008c7c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	4619      	mov	r1, r3
 8008c86:	4610      	mov	r0, r2
 8008c88:	f7fe fa64 	bl	8007154 <move_window>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d138      	bne.n	8008d08 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	330b      	adds	r3, #11
 8008ca0:	781a      	ldrb	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	330b      	adds	r3, #11
 8008ca6:	f042 0220 	orr.w	r2, r2, #32
 8008caa:	b2d2      	uxtb	r2, r2
 8008cac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	68f9      	ldr	r1, [r7, #12]
 8008cba:	f7fe ff69 	bl	8007b90 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f103 021c 	add.w	r2, r3, #28
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	f7fe f824 	bl	8006d18 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3316      	adds	r3, #22
 8008cd4:	6939      	ldr	r1, [r7, #16]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe f81e 	bl	8006d18 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3312      	adds	r3, #18
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fd fffd 	bl	8006ce2 <st_word>
					fs->wflag = 1;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2201      	movs	r2, #1
 8008cec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fe fa5d 	bl	80071b0 <sync_fs>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	7d1b      	ldrb	r3, [r3, #20]
 8008cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d22:	2301      	movs	r3, #1
 8008d24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008d2a:	4b1f      	ldr	r3, [pc, #124]	; (8008da8 <FATFS_LinkDriverEx+0x94>)
 8008d2c:	7a5b      	ldrb	r3, [r3, #9]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d131      	bne.n	8008d98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d34:	4b1c      	ldr	r3, [pc, #112]	; (8008da8 <FATFS_LinkDriverEx+0x94>)
 8008d36:	7a5b      	ldrb	r3, [r3, #9]
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	4b1a      	ldr	r3, [pc, #104]	; (8008da8 <FATFS_LinkDriverEx+0x94>)
 8008d3e:	2100      	movs	r1, #0
 8008d40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008d42:	4b19      	ldr	r3, [pc, #100]	; (8008da8 <FATFS_LinkDriverEx+0x94>)
 8008d44:	7a5b      	ldrb	r3, [r3, #9]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	4a17      	ldr	r2, [pc, #92]	; (8008da8 <FATFS_LinkDriverEx+0x94>)
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008d52:	4b15      	ldr	r3, [pc, #84]	; (8008da8 <FATFS_LinkDriverEx+0x94>)
 8008d54:	7a5b      	ldrb	r3, [r3, #9]
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4b13      	ldr	r3, [pc, #76]	; (8008da8 <FATFS_LinkDriverEx+0x94>)
 8008d5c:	4413      	add	r3, r2
 8008d5e:	79fa      	ldrb	r2, [r7, #7]
 8008d60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d62:	4b11      	ldr	r3, [pc, #68]	; (8008da8 <FATFS_LinkDriverEx+0x94>)
 8008d64:	7a5b      	ldrb	r3, [r3, #9]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	b2d1      	uxtb	r1, r2
 8008d6c:	4a0e      	ldr	r2, [pc, #56]	; (8008da8 <FATFS_LinkDriverEx+0x94>)
 8008d6e:	7251      	strb	r1, [r2, #9]
 8008d70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d72:	7dbb      	ldrb	r3, [r7, #22]
 8008d74:	3330      	adds	r3, #48	; 0x30
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	223a      	movs	r2, #58	; 0x3a
 8008d82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	3302      	adds	r3, #2
 8008d88:	222f      	movs	r2, #47	; 0x2f
 8008d8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	3303      	adds	r3, #3
 8008d90:	2200      	movs	r2, #0
 8008d92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	20000120 	.word	0x20000120

08008dac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008db6:	2200      	movs	r2, #0
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff ffaa 	bl	8008d14 <FATFS_LinkDriverEx>
 8008dc0:	4603      	mov	r3, r0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <__errno>:
 8008dcc:	4b01      	ldr	r3, [pc, #4]	; (8008dd4 <__errno+0x8>)
 8008dce:	6818      	ldr	r0, [r3, #0]
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20000024 	.word	0x20000024

08008dd8 <__libc_init_array>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	4e0d      	ldr	r6, [pc, #52]	; (8008e10 <__libc_init_array+0x38>)
 8008ddc:	4c0d      	ldr	r4, [pc, #52]	; (8008e14 <__libc_init_array+0x3c>)
 8008dde:	1ba4      	subs	r4, r4, r6
 8008de0:	10a4      	asrs	r4, r4, #2
 8008de2:	2500      	movs	r5, #0
 8008de4:	42a5      	cmp	r5, r4
 8008de6:	d109      	bne.n	8008dfc <__libc_init_array+0x24>
 8008de8:	4e0b      	ldr	r6, [pc, #44]	; (8008e18 <__libc_init_array+0x40>)
 8008dea:	4c0c      	ldr	r4, [pc, #48]	; (8008e1c <__libc_init_array+0x44>)
 8008dec:	f000 fc26 	bl	800963c <_init>
 8008df0:	1ba4      	subs	r4, r4, r6
 8008df2:	10a4      	asrs	r4, r4, #2
 8008df4:	2500      	movs	r5, #0
 8008df6:	42a5      	cmp	r5, r4
 8008df8:	d105      	bne.n	8008e06 <__libc_init_array+0x2e>
 8008dfa:	bd70      	pop	{r4, r5, r6, pc}
 8008dfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e00:	4798      	blx	r3
 8008e02:	3501      	adds	r5, #1
 8008e04:	e7ee      	b.n	8008de4 <__libc_init_array+0xc>
 8008e06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e0a:	4798      	blx	r3
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	e7f2      	b.n	8008df6 <__libc_init_array+0x1e>
 8008e10:	080097bc 	.word	0x080097bc
 8008e14:	080097bc 	.word	0x080097bc
 8008e18:	080097bc 	.word	0x080097bc
 8008e1c:	080097c0 	.word	0x080097c0

08008e20 <memset>:
 8008e20:	4402      	add	r2, r0
 8008e22:	4603      	mov	r3, r0
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d100      	bne.n	8008e2a <memset+0xa>
 8008e28:	4770      	bx	lr
 8008e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e2e:	e7f9      	b.n	8008e24 <memset+0x4>

08008e30 <siprintf>:
 8008e30:	b40e      	push	{r1, r2, r3}
 8008e32:	b500      	push	{lr}
 8008e34:	b09c      	sub	sp, #112	; 0x70
 8008e36:	ab1d      	add	r3, sp, #116	; 0x74
 8008e38:	9002      	str	r0, [sp, #8]
 8008e3a:	9006      	str	r0, [sp, #24]
 8008e3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e40:	4809      	ldr	r0, [pc, #36]	; (8008e68 <siprintf+0x38>)
 8008e42:	9107      	str	r1, [sp, #28]
 8008e44:	9104      	str	r1, [sp, #16]
 8008e46:	4909      	ldr	r1, [pc, #36]	; (8008e6c <siprintf+0x3c>)
 8008e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4c:	9105      	str	r1, [sp, #20]
 8008e4e:	6800      	ldr	r0, [r0, #0]
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	a902      	add	r1, sp, #8
 8008e54:	f000 f866 	bl	8008f24 <_svfiprintf_r>
 8008e58:	9b02      	ldr	r3, [sp, #8]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	b01c      	add	sp, #112	; 0x70
 8008e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e64:	b003      	add	sp, #12
 8008e66:	4770      	bx	lr
 8008e68:	20000024 	.word	0x20000024
 8008e6c:	ffff0208 	.word	0xffff0208

08008e70 <__ssputs_r>:
 8008e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e74:	688e      	ldr	r6, [r1, #8]
 8008e76:	429e      	cmp	r6, r3
 8008e78:	4682      	mov	sl, r0
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	4690      	mov	r8, r2
 8008e7e:	4699      	mov	r9, r3
 8008e80:	d837      	bhi.n	8008ef2 <__ssputs_r+0x82>
 8008e82:	898a      	ldrh	r2, [r1, #12]
 8008e84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e88:	d031      	beq.n	8008eee <__ssputs_r+0x7e>
 8008e8a:	6825      	ldr	r5, [r4, #0]
 8008e8c:	6909      	ldr	r1, [r1, #16]
 8008e8e:	1a6f      	subs	r7, r5, r1
 8008e90:	6965      	ldr	r5, [r4, #20]
 8008e92:	2302      	movs	r3, #2
 8008e94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e98:	fb95 f5f3 	sdiv	r5, r5, r3
 8008e9c:	f109 0301 	add.w	r3, r9, #1
 8008ea0:	443b      	add	r3, r7
 8008ea2:	429d      	cmp	r5, r3
 8008ea4:	bf38      	it	cc
 8008ea6:	461d      	movcc	r5, r3
 8008ea8:	0553      	lsls	r3, r2, #21
 8008eaa:	d530      	bpl.n	8008f0e <__ssputs_r+0x9e>
 8008eac:	4629      	mov	r1, r5
 8008eae:	f000 fb2b 	bl	8009508 <_malloc_r>
 8008eb2:	4606      	mov	r6, r0
 8008eb4:	b950      	cbnz	r0, 8008ecc <__ssputs_r+0x5c>
 8008eb6:	230c      	movs	r3, #12
 8008eb8:	f8ca 3000 	str.w	r3, [sl]
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec2:	81a3      	strh	r3, [r4, #12]
 8008ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ecc:	463a      	mov	r2, r7
 8008ece:	6921      	ldr	r1, [r4, #16]
 8008ed0:	f000 faa8 	bl	8009424 <memcpy>
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ede:	81a3      	strh	r3, [r4, #12]
 8008ee0:	6126      	str	r6, [r4, #16]
 8008ee2:	6165      	str	r5, [r4, #20]
 8008ee4:	443e      	add	r6, r7
 8008ee6:	1bed      	subs	r5, r5, r7
 8008ee8:	6026      	str	r6, [r4, #0]
 8008eea:	60a5      	str	r5, [r4, #8]
 8008eec:	464e      	mov	r6, r9
 8008eee:	454e      	cmp	r6, r9
 8008ef0:	d900      	bls.n	8008ef4 <__ssputs_r+0x84>
 8008ef2:	464e      	mov	r6, r9
 8008ef4:	4632      	mov	r2, r6
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	6820      	ldr	r0, [r4, #0]
 8008efa:	f000 fa9e 	bl	800943a <memmove>
 8008efe:	68a3      	ldr	r3, [r4, #8]
 8008f00:	1b9b      	subs	r3, r3, r6
 8008f02:	60a3      	str	r3, [r4, #8]
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	441e      	add	r6, r3
 8008f08:	6026      	str	r6, [r4, #0]
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	e7dc      	b.n	8008ec8 <__ssputs_r+0x58>
 8008f0e:	462a      	mov	r2, r5
 8008f10:	f000 fb54 	bl	80095bc <_realloc_r>
 8008f14:	4606      	mov	r6, r0
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d1e2      	bne.n	8008ee0 <__ssputs_r+0x70>
 8008f1a:	6921      	ldr	r1, [r4, #16]
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	f000 faa5 	bl	800946c <_free_r>
 8008f22:	e7c8      	b.n	8008eb6 <__ssputs_r+0x46>

08008f24 <_svfiprintf_r>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	461d      	mov	r5, r3
 8008f2a:	898b      	ldrh	r3, [r1, #12]
 8008f2c:	061f      	lsls	r7, r3, #24
 8008f2e:	b09d      	sub	sp, #116	; 0x74
 8008f30:	4680      	mov	r8, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	4616      	mov	r6, r2
 8008f36:	d50f      	bpl.n	8008f58 <_svfiprintf_r+0x34>
 8008f38:	690b      	ldr	r3, [r1, #16]
 8008f3a:	b96b      	cbnz	r3, 8008f58 <_svfiprintf_r+0x34>
 8008f3c:	2140      	movs	r1, #64	; 0x40
 8008f3e:	f000 fae3 	bl	8009508 <_malloc_r>
 8008f42:	6020      	str	r0, [r4, #0]
 8008f44:	6120      	str	r0, [r4, #16]
 8008f46:	b928      	cbnz	r0, 8008f54 <_svfiprintf_r+0x30>
 8008f48:	230c      	movs	r3, #12
 8008f4a:	f8c8 3000 	str.w	r3, [r8]
 8008f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f52:	e0c8      	b.n	80090e6 <_svfiprintf_r+0x1c2>
 8008f54:	2340      	movs	r3, #64	; 0x40
 8008f56:	6163      	str	r3, [r4, #20]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f5c:	2320      	movs	r3, #32
 8008f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f62:	2330      	movs	r3, #48	; 0x30
 8008f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f68:	9503      	str	r5, [sp, #12]
 8008f6a:	f04f 0b01 	mov.w	fp, #1
 8008f6e:	4637      	mov	r7, r6
 8008f70:	463d      	mov	r5, r7
 8008f72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f76:	b10b      	cbz	r3, 8008f7c <_svfiprintf_r+0x58>
 8008f78:	2b25      	cmp	r3, #37	; 0x25
 8008f7a:	d13e      	bne.n	8008ffa <_svfiprintf_r+0xd6>
 8008f7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008f80:	d00b      	beq.n	8008f9a <_svfiprintf_r+0x76>
 8008f82:	4653      	mov	r3, sl
 8008f84:	4632      	mov	r2, r6
 8008f86:	4621      	mov	r1, r4
 8008f88:	4640      	mov	r0, r8
 8008f8a:	f7ff ff71 	bl	8008e70 <__ssputs_r>
 8008f8e:	3001      	adds	r0, #1
 8008f90:	f000 80a4 	beq.w	80090dc <_svfiprintf_r+0x1b8>
 8008f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f96:	4453      	add	r3, sl
 8008f98:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9a:	783b      	ldrb	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 809d 	beq.w	80090dc <_svfiprintf_r+0x1b8>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	9307      	str	r3, [sp, #28]
 8008fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fb6:	462f      	mov	r7, r5
 8008fb8:	2205      	movs	r2, #5
 8008fba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008fbe:	4850      	ldr	r0, [pc, #320]	; (8009100 <_svfiprintf_r+0x1dc>)
 8008fc0:	f7f7 f926 	bl	8000210 <memchr>
 8008fc4:	9b04      	ldr	r3, [sp, #16]
 8008fc6:	b9d0      	cbnz	r0, 8008ffe <_svfiprintf_r+0xda>
 8008fc8:	06d9      	lsls	r1, r3, #27
 8008fca:	bf44      	itt	mi
 8008fcc:	2220      	movmi	r2, #32
 8008fce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fd2:	071a      	lsls	r2, r3, #28
 8008fd4:	bf44      	itt	mi
 8008fd6:	222b      	movmi	r2, #43	; 0x2b
 8008fd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fdc:	782a      	ldrb	r2, [r5, #0]
 8008fde:	2a2a      	cmp	r2, #42	; 0x2a
 8008fe0:	d015      	beq.n	800900e <_svfiprintf_r+0xea>
 8008fe2:	9a07      	ldr	r2, [sp, #28]
 8008fe4:	462f      	mov	r7, r5
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	250a      	movs	r5, #10
 8008fea:	4639      	mov	r1, r7
 8008fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ff0:	3b30      	subs	r3, #48	; 0x30
 8008ff2:	2b09      	cmp	r3, #9
 8008ff4:	d94d      	bls.n	8009092 <_svfiprintf_r+0x16e>
 8008ff6:	b1b8      	cbz	r0, 8009028 <_svfiprintf_r+0x104>
 8008ff8:	e00f      	b.n	800901a <_svfiprintf_r+0xf6>
 8008ffa:	462f      	mov	r7, r5
 8008ffc:	e7b8      	b.n	8008f70 <_svfiprintf_r+0x4c>
 8008ffe:	4a40      	ldr	r2, [pc, #256]	; (8009100 <_svfiprintf_r+0x1dc>)
 8009000:	1a80      	subs	r0, r0, r2
 8009002:	fa0b f000 	lsl.w	r0, fp, r0
 8009006:	4318      	orrs	r0, r3
 8009008:	9004      	str	r0, [sp, #16]
 800900a:	463d      	mov	r5, r7
 800900c:	e7d3      	b.n	8008fb6 <_svfiprintf_r+0x92>
 800900e:	9a03      	ldr	r2, [sp, #12]
 8009010:	1d11      	adds	r1, r2, #4
 8009012:	6812      	ldr	r2, [r2, #0]
 8009014:	9103      	str	r1, [sp, #12]
 8009016:	2a00      	cmp	r2, #0
 8009018:	db01      	blt.n	800901e <_svfiprintf_r+0xfa>
 800901a:	9207      	str	r2, [sp, #28]
 800901c:	e004      	b.n	8009028 <_svfiprintf_r+0x104>
 800901e:	4252      	negs	r2, r2
 8009020:	f043 0302 	orr.w	r3, r3, #2
 8009024:	9207      	str	r2, [sp, #28]
 8009026:	9304      	str	r3, [sp, #16]
 8009028:	783b      	ldrb	r3, [r7, #0]
 800902a:	2b2e      	cmp	r3, #46	; 0x2e
 800902c:	d10c      	bne.n	8009048 <_svfiprintf_r+0x124>
 800902e:	787b      	ldrb	r3, [r7, #1]
 8009030:	2b2a      	cmp	r3, #42	; 0x2a
 8009032:	d133      	bne.n	800909c <_svfiprintf_r+0x178>
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	1d1a      	adds	r2, r3, #4
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	9203      	str	r2, [sp, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	bfb8      	it	lt
 8009040:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009044:	3702      	adds	r7, #2
 8009046:	9305      	str	r3, [sp, #20]
 8009048:	4d2e      	ldr	r5, [pc, #184]	; (8009104 <_svfiprintf_r+0x1e0>)
 800904a:	7839      	ldrb	r1, [r7, #0]
 800904c:	2203      	movs	r2, #3
 800904e:	4628      	mov	r0, r5
 8009050:	f7f7 f8de 	bl	8000210 <memchr>
 8009054:	b138      	cbz	r0, 8009066 <_svfiprintf_r+0x142>
 8009056:	2340      	movs	r3, #64	; 0x40
 8009058:	1b40      	subs	r0, r0, r5
 800905a:	fa03 f000 	lsl.w	r0, r3, r0
 800905e:	9b04      	ldr	r3, [sp, #16]
 8009060:	4303      	orrs	r3, r0
 8009062:	3701      	adds	r7, #1
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	7839      	ldrb	r1, [r7, #0]
 8009068:	4827      	ldr	r0, [pc, #156]	; (8009108 <_svfiprintf_r+0x1e4>)
 800906a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800906e:	2206      	movs	r2, #6
 8009070:	1c7e      	adds	r6, r7, #1
 8009072:	f7f7 f8cd 	bl	8000210 <memchr>
 8009076:	2800      	cmp	r0, #0
 8009078:	d038      	beq.n	80090ec <_svfiprintf_r+0x1c8>
 800907a:	4b24      	ldr	r3, [pc, #144]	; (800910c <_svfiprintf_r+0x1e8>)
 800907c:	bb13      	cbnz	r3, 80090c4 <_svfiprintf_r+0x1a0>
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	3307      	adds	r3, #7
 8009082:	f023 0307 	bic.w	r3, r3, #7
 8009086:	3308      	adds	r3, #8
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800908c:	444b      	add	r3, r9
 800908e:	9309      	str	r3, [sp, #36]	; 0x24
 8009090:	e76d      	b.n	8008f6e <_svfiprintf_r+0x4a>
 8009092:	fb05 3202 	mla	r2, r5, r2, r3
 8009096:	2001      	movs	r0, #1
 8009098:	460f      	mov	r7, r1
 800909a:	e7a6      	b.n	8008fea <_svfiprintf_r+0xc6>
 800909c:	2300      	movs	r3, #0
 800909e:	3701      	adds	r7, #1
 80090a0:	9305      	str	r3, [sp, #20]
 80090a2:	4619      	mov	r1, r3
 80090a4:	250a      	movs	r5, #10
 80090a6:	4638      	mov	r0, r7
 80090a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ac:	3a30      	subs	r2, #48	; 0x30
 80090ae:	2a09      	cmp	r2, #9
 80090b0:	d903      	bls.n	80090ba <_svfiprintf_r+0x196>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0c8      	beq.n	8009048 <_svfiprintf_r+0x124>
 80090b6:	9105      	str	r1, [sp, #20]
 80090b8:	e7c6      	b.n	8009048 <_svfiprintf_r+0x124>
 80090ba:	fb05 2101 	mla	r1, r5, r1, r2
 80090be:	2301      	movs	r3, #1
 80090c0:	4607      	mov	r7, r0
 80090c2:	e7f0      	b.n	80090a6 <_svfiprintf_r+0x182>
 80090c4:	ab03      	add	r3, sp, #12
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	4622      	mov	r2, r4
 80090ca:	4b11      	ldr	r3, [pc, #68]	; (8009110 <_svfiprintf_r+0x1ec>)
 80090cc:	a904      	add	r1, sp, #16
 80090ce:	4640      	mov	r0, r8
 80090d0:	f3af 8000 	nop.w
 80090d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80090d8:	4681      	mov	r9, r0
 80090da:	d1d6      	bne.n	800908a <_svfiprintf_r+0x166>
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	065b      	lsls	r3, r3, #25
 80090e0:	f53f af35 	bmi.w	8008f4e <_svfiprintf_r+0x2a>
 80090e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090e6:	b01d      	add	sp, #116	; 0x74
 80090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ec:	ab03      	add	r3, sp, #12
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	4622      	mov	r2, r4
 80090f2:	4b07      	ldr	r3, [pc, #28]	; (8009110 <_svfiprintf_r+0x1ec>)
 80090f4:	a904      	add	r1, sp, #16
 80090f6:	4640      	mov	r0, r8
 80090f8:	f000 f882 	bl	8009200 <_printf_i>
 80090fc:	e7ea      	b.n	80090d4 <_svfiprintf_r+0x1b0>
 80090fe:	bf00      	nop
 8009100:	08009780 	.word	0x08009780
 8009104:	08009786 	.word	0x08009786
 8009108:	0800978a 	.word	0x0800978a
 800910c:	00000000 	.word	0x00000000
 8009110:	08008e71 	.word	0x08008e71

08009114 <_printf_common>:
 8009114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009118:	4691      	mov	r9, r2
 800911a:	461f      	mov	r7, r3
 800911c:	688a      	ldr	r2, [r1, #8]
 800911e:	690b      	ldr	r3, [r1, #16]
 8009120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009124:	4293      	cmp	r3, r2
 8009126:	bfb8      	it	lt
 8009128:	4613      	movlt	r3, r2
 800912a:	f8c9 3000 	str.w	r3, [r9]
 800912e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009132:	4606      	mov	r6, r0
 8009134:	460c      	mov	r4, r1
 8009136:	b112      	cbz	r2, 800913e <_printf_common+0x2a>
 8009138:	3301      	adds	r3, #1
 800913a:	f8c9 3000 	str.w	r3, [r9]
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	0699      	lsls	r1, r3, #26
 8009142:	bf42      	ittt	mi
 8009144:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009148:	3302      	addmi	r3, #2
 800914a:	f8c9 3000 	strmi.w	r3, [r9]
 800914e:	6825      	ldr	r5, [r4, #0]
 8009150:	f015 0506 	ands.w	r5, r5, #6
 8009154:	d107      	bne.n	8009166 <_printf_common+0x52>
 8009156:	f104 0a19 	add.w	sl, r4, #25
 800915a:	68e3      	ldr	r3, [r4, #12]
 800915c:	f8d9 2000 	ldr.w	r2, [r9]
 8009160:	1a9b      	subs	r3, r3, r2
 8009162:	42ab      	cmp	r3, r5
 8009164:	dc28      	bgt.n	80091b8 <_printf_common+0xa4>
 8009166:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800916a:	6822      	ldr	r2, [r4, #0]
 800916c:	3300      	adds	r3, #0
 800916e:	bf18      	it	ne
 8009170:	2301      	movne	r3, #1
 8009172:	0692      	lsls	r2, r2, #26
 8009174:	d42d      	bmi.n	80091d2 <_printf_common+0xbe>
 8009176:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800917a:	4639      	mov	r1, r7
 800917c:	4630      	mov	r0, r6
 800917e:	47c0      	blx	r8
 8009180:	3001      	adds	r0, #1
 8009182:	d020      	beq.n	80091c6 <_printf_common+0xb2>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	68e5      	ldr	r5, [r4, #12]
 8009188:	f8d9 2000 	ldr.w	r2, [r9]
 800918c:	f003 0306 	and.w	r3, r3, #6
 8009190:	2b04      	cmp	r3, #4
 8009192:	bf08      	it	eq
 8009194:	1aad      	subeq	r5, r5, r2
 8009196:	68a3      	ldr	r3, [r4, #8]
 8009198:	6922      	ldr	r2, [r4, #16]
 800919a:	bf0c      	ite	eq
 800919c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091a0:	2500      	movne	r5, #0
 80091a2:	4293      	cmp	r3, r2
 80091a4:	bfc4      	itt	gt
 80091a6:	1a9b      	subgt	r3, r3, r2
 80091a8:	18ed      	addgt	r5, r5, r3
 80091aa:	f04f 0900 	mov.w	r9, #0
 80091ae:	341a      	adds	r4, #26
 80091b0:	454d      	cmp	r5, r9
 80091b2:	d11a      	bne.n	80091ea <_printf_common+0xd6>
 80091b4:	2000      	movs	r0, #0
 80091b6:	e008      	b.n	80091ca <_printf_common+0xb6>
 80091b8:	2301      	movs	r3, #1
 80091ba:	4652      	mov	r2, sl
 80091bc:	4639      	mov	r1, r7
 80091be:	4630      	mov	r0, r6
 80091c0:	47c0      	blx	r8
 80091c2:	3001      	adds	r0, #1
 80091c4:	d103      	bne.n	80091ce <_printf_common+0xba>
 80091c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ce:	3501      	adds	r5, #1
 80091d0:	e7c3      	b.n	800915a <_printf_common+0x46>
 80091d2:	18e1      	adds	r1, r4, r3
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	2030      	movs	r0, #48	; 0x30
 80091d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091dc:	4422      	add	r2, r4
 80091de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091e6:	3302      	adds	r3, #2
 80091e8:	e7c5      	b.n	8009176 <_printf_common+0x62>
 80091ea:	2301      	movs	r3, #1
 80091ec:	4622      	mov	r2, r4
 80091ee:	4639      	mov	r1, r7
 80091f0:	4630      	mov	r0, r6
 80091f2:	47c0      	blx	r8
 80091f4:	3001      	adds	r0, #1
 80091f6:	d0e6      	beq.n	80091c6 <_printf_common+0xb2>
 80091f8:	f109 0901 	add.w	r9, r9, #1
 80091fc:	e7d8      	b.n	80091b0 <_printf_common+0x9c>
	...

08009200 <_printf_i>:
 8009200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009204:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009208:	460c      	mov	r4, r1
 800920a:	7e09      	ldrb	r1, [r1, #24]
 800920c:	b085      	sub	sp, #20
 800920e:	296e      	cmp	r1, #110	; 0x6e
 8009210:	4617      	mov	r7, r2
 8009212:	4606      	mov	r6, r0
 8009214:	4698      	mov	r8, r3
 8009216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009218:	f000 80b3 	beq.w	8009382 <_printf_i+0x182>
 800921c:	d822      	bhi.n	8009264 <_printf_i+0x64>
 800921e:	2963      	cmp	r1, #99	; 0x63
 8009220:	d036      	beq.n	8009290 <_printf_i+0x90>
 8009222:	d80a      	bhi.n	800923a <_printf_i+0x3a>
 8009224:	2900      	cmp	r1, #0
 8009226:	f000 80b9 	beq.w	800939c <_printf_i+0x19c>
 800922a:	2958      	cmp	r1, #88	; 0x58
 800922c:	f000 8083 	beq.w	8009336 <_printf_i+0x136>
 8009230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009234:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009238:	e032      	b.n	80092a0 <_printf_i+0xa0>
 800923a:	2964      	cmp	r1, #100	; 0x64
 800923c:	d001      	beq.n	8009242 <_printf_i+0x42>
 800923e:	2969      	cmp	r1, #105	; 0x69
 8009240:	d1f6      	bne.n	8009230 <_printf_i+0x30>
 8009242:	6820      	ldr	r0, [r4, #0]
 8009244:	6813      	ldr	r3, [r2, #0]
 8009246:	0605      	lsls	r5, r0, #24
 8009248:	f103 0104 	add.w	r1, r3, #4
 800924c:	d52a      	bpl.n	80092a4 <_printf_i+0xa4>
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6011      	str	r1, [r2, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	da03      	bge.n	800925e <_printf_i+0x5e>
 8009256:	222d      	movs	r2, #45	; 0x2d
 8009258:	425b      	negs	r3, r3
 800925a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800925e:	486f      	ldr	r0, [pc, #444]	; (800941c <_printf_i+0x21c>)
 8009260:	220a      	movs	r2, #10
 8009262:	e039      	b.n	80092d8 <_printf_i+0xd8>
 8009264:	2973      	cmp	r1, #115	; 0x73
 8009266:	f000 809d 	beq.w	80093a4 <_printf_i+0x1a4>
 800926a:	d808      	bhi.n	800927e <_printf_i+0x7e>
 800926c:	296f      	cmp	r1, #111	; 0x6f
 800926e:	d020      	beq.n	80092b2 <_printf_i+0xb2>
 8009270:	2970      	cmp	r1, #112	; 0x70
 8009272:	d1dd      	bne.n	8009230 <_printf_i+0x30>
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	f043 0320 	orr.w	r3, r3, #32
 800927a:	6023      	str	r3, [r4, #0]
 800927c:	e003      	b.n	8009286 <_printf_i+0x86>
 800927e:	2975      	cmp	r1, #117	; 0x75
 8009280:	d017      	beq.n	80092b2 <_printf_i+0xb2>
 8009282:	2978      	cmp	r1, #120	; 0x78
 8009284:	d1d4      	bne.n	8009230 <_printf_i+0x30>
 8009286:	2378      	movs	r3, #120	; 0x78
 8009288:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800928c:	4864      	ldr	r0, [pc, #400]	; (8009420 <_printf_i+0x220>)
 800928e:	e055      	b.n	800933c <_printf_i+0x13c>
 8009290:	6813      	ldr	r3, [r2, #0]
 8009292:	1d19      	adds	r1, r3, #4
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6011      	str	r1, [r2, #0]
 8009298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800929c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092a0:	2301      	movs	r3, #1
 80092a2:	e08c      	b.n	80093be <_printf_i+0x1be>
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6011      	str	r1, [r2, #0]
 80092a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092ac:	bf18      	it	ne
 80092ae:	b21b      	sxthne	r3, r3
 80092b0:	e7cf      	b.n	8009252 <_printf_i+0x52>
 80092b2:	6813      	ldr	r3, [r2, #0]
 80092b4:	6825      	ldr	r5, [r4, #0]
 80092b6:	1d18      	adds	r0, r3, #4
 80092b8:	6010      	str	r0, [r2, #0]
 80092ba:	0628      	lsls	r0, r5, #24
 80092bc:	d501      	bpl.n	80092c2 <_printf_i+0xc2>
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	e002      	b.n	80092c8 <_printf_i+0xc8>
 80092c2:	0668      	lsls	r0, r5, #25
 80092c4:	d5fb      	bpl.n	80092be <_printf_i+0xbe>
 80092c6:	881b      	ldrh	r3, [r3, #0]
 80092c8:	4854      	ldr	r0, [pc, #336]	; (800941c <_printf_i+0x21c>)
 80092ca:	296f      	cmp	r1, #111	; 0x6f
 80092cc:	bf14      	ite	ne
 80092ce:	220a      	movne	r2, #10
 80092d0:	2208      	moveq	r2, #8
 80092d2:	2100      	movs	r1, #0
 80092d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092d8:	6865      	ldr	r5, [r4, #4]
 80092da:	60a5      	str	r5, [r4, #8]
 80092dc:	2d00      	cmp	r5, #0
 80092de:	f2c0 8095 	blt.w	800940c <_printf_i+0x20c>
 80092e2:	6821      	ldr	r1, [r4, #0]
 80092e4:	f021 0104 	bic.w	r1, r1, #4
 80092e8:	6021      	str	r1, [r4, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d13d      	bne.n	800936a <_printf_i+0x16a>
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	f040 808e 	bne.w	8009410 <_printf_i+0x210>
 80092f4:	4665      	mov	r5, ip
 80092f6:	2a08      	cmp	r2, #8
 80092f8:	d10b      	bne.n	8009312 <_printf_i+0x112>
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	07db      	lsls	r3, r3, #31
 80092fe:	d508      	bpl.n	8009312 <_printf_i+0x112>
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	6862      	ldr	r2, [r4, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	bfde      	ittt	le
 8009308:	2330      	movle	r3, #48	; 0x30
 800930a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800930e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009312:	ebac 0305 	sub.w	r3, ip, r5
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	f8cd 8000 	str.w	r8, [sp]
 800931c:	463b      	mov	r3, r7
 800931e:	aa03      	add	r2, sp, #12
 8009320:	4621      	mov	r1, r4
 8009322:	4630      	mov	r0, r6
 8009324:	f7ff fef6 	bl	8009114 <_printf_common>
 8009328:	3001      	adds	r0, #1
 800932a:	d14d      	bne.n	80093c8 <_printf_i+0x1c8>
 800932c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009330:	b005      	add	sp, #20
 8009332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009336:	4839      	ldr	r0, [pc, #228]	; (800941c <_printf_i+0x21c>)
 8009338:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800933c:	6813      	ldr	r3, [r2, #0]
 800933e:	6821      	ldr	r1, [r4, #0]
 8009340:	1d1d      	adds	r5, r3, #4
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6015      	str	r5, [r2, #0]
 8009346:	060a      	lsls	r2, r1, #24
 8009348:	d50b      	bpl.n	8009362 <_printf_i+0x162>
 800934a:	07ca      	lsls	r2, r1, #31
 800934c:	bf44      	itt	mi
 800934e:	f041 0120 	orrmi.w	r1, r1, #32
 8009352:	6021      	strmi	r1, [r4, #0]
 8009354:	b91b      	cbnz	r3, 800935e <_printf_i+0x15e>
 8009356:	6822      	ldr	r2, [r4, #0]
 8009358:	f022 0220 	bic.w	r2, r2, #32
 800935c:	6022      	str	r2, [r4, #0]
 800935e:	2210      	movs	r2, #16
 8009360:	e7b7      	b.n	80092d2 <_printf_i+0xd2>
 8009362:	064d      	lsls	r5, r1, #25
 8009364:	bf48      	it	mi
 8009366:	b29b      	uxthmi	r3, r3
 8009368:	e7ef      	b.n	800934a <_printf_i+0x14a>
 800936a:	4665      	mov	r5, ip
 800936c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009370:	fb02 3311 	mls	r3, r2, r1, r3
 8009374:	5cc3      	ldrb	r3, [r0, r3]
 8009376:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800937a:	460b      	mov	r3, r1
 800937c:	2900      	cmp	r1, #0
 800937e:	d1f5      	bne.n	800936c <_printf_i+0x16c>
 8009380:	e7b9      	b.n	80092f6 <_printf_i+0xf6>
 8009382:	6813      	ldr	r3, [r2, #0]
 8009384:	6825      	ldr	r5, [r4, #0]
 8009386:	6961      	ldr	r1, [r4, #20]
 8009388:	1d18      	adds	r0, r3, #4
 800938a:	6010      	str	r0, [r2, #0]
 800938c:	0628      	lsls	r0, r5, #24
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	d501      	bpl.n	8009396 <_printf_i+0x196>
 8009392:	6019      	str	r1, [r3, #0]
 8009394:	e002      	b.n	800939c <_printf_i+0x19c>
 8009396:	066a      	lsls	r2, r5, #25
 8009398:	d5fb      	bpl.n	8009392 <_printf_i+0x192>
 800939a:	8019      	strh	r1, [r3, #0]
 800939c:	2300      	movs	r3, #0
 800939e:	6123      	str	r3, [r4, #16]
 80093a0:	4665      	mov	r5, ip
 80093a2:	e7b9      	b.n	8009318 <_printf_i+0x118>
 80093a4:	6813      	ldr	r3, [r2, #0]
 80093a6:	1d19      	adds	r1, r3, #4
 80093a8:	6011      	str	r1, [r2, #0]
 80093aa:	681d      	ldr	r5, [r3, #0]
 80093ac:	6862      	ldr	r2, [r4, #4]
 80093ae:	2100      	movs	r1, #0
 80093b0:	4628      	mov	r0, r5
 80093b2:	f7f6 ff2d 	bl	8000210 <memchr>
 80093b6:	b108      	cbz	r0, 80093bc <_printf_i+0x1bc>
 80093b8:	1b40      	subs	r0, r0, r5
 80093ba:	6060      	str	r0, [r4, #4]
 80093bc:	6863      	ldr	r3, [r4, #4]
 80093be:	6123      	str	r3, [r4, #16]
 80093c0:	2300      	movs	r3, #0
 80093c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093c6:	e7a7      	b.n	8009318 <_printf_i+0x118>
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	462a      	mov	r2, r5
 80093cc:	4639      	mov	r1, r7
 80093ce:	4630      	mov	r0, r6
 80093d0:	47c0      	blx	r8
 80093d2:	3001      	adds	r0, #1
 80093d4:	d0aa      	beq.n	800932c <_printf_i+0x12c>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	079b      	lsls	r3, r3, #30
 80093da:	d413      	bmi.n	8009404 <_printf_i+0x204>
 80093dc:	68e0      	ldr	r0, [r4, #12]
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	4298      	cmp	r0, r3
 80093e2:	bfb8      	it	lt
 80093e4:	4618      	movlt	r0, r3
 80093e6:	e7a3      	b.n	8009330 <_printf_i+0x130>
 80093e8:	2301      	movs	r3, #1
 80093ea:	464a      	mov	r2, r9
 80093ec:	4639      	mov	r1, r7
 80093ee:	4630      	mov	r0, r6
 80093f0:	47c0      	blx	r8
 80093f2:	3001      	adds	r0, #1
 80093f4:	d09a      	beq.n	800932c <_printf_i+0x12c>
 80093f6:	3501      	adds	r5, #1
 80093f8:	68e3      	ldr	r3, [r4, #12]
 80093fa:	9a03      	ldr	r2, [sp, #12]
 80093fc:	1a9b      	subs	r3, r3, r2
 80093fe:	42ab      	cmp	r3, r5
 8009400:	dcf2      	bgt.n	80093e8 <_printf_i+0x1e8>
 8009402:	e7eb      	b.n	80093dc <_printf_i+0x1dc>
 8009404:	2500      	movs	r5, #0
 8009406:	f104 0919 	add.w	r9, r4, #25
 800940a:	e7f5      	b.n	80093f8 <_printf_i+0x1f8>
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1ac      	bne.n	800936a <_printf_i+0x16a>
 8009410:	7803      	ldrb	r3, [r0, #0]
 8009412:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009416:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800941a:	e76c      	b.n	80092f6 <_printf_i+0xf6>
 800941c:	08009791 	.word	0x08009791
 8009420:	080097a2 	.word	0x080097a2

08009424 <memcpy>:
 8009424:	b510      	push	{r4, lr}
 8009426:	1e43      	subs	r3, r0, #1
 8009428:	440a      	add	r2, r1
 800942a:	4291      	cmp	r1, r2
 800942c:	d100      	bne.n	8009430 <memcpy+0xc>
 800942e:	bd10      	pop	{r4, pc}
 8009430:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009438:	e7f7      	b.n	800942a <memcpy+0x6>

0800943a <memmove>:
 800943a:	4288      	cmp	r0, r1
 800943c:	b510      	push	{r4, lr}
 800943e:	eb01 0302 	add.w	r3, r1, r2
 8009442:	d807      	bhi.n	8009454 <memmove+0x1a>
 8009444:	1e42      	subs	r2, r0, #1
 8009446:	4299      	cmp	r1, r3
 8009448:	d00a      	beq.n	8009460 <memmove+0x26>
 800944a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800944e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009452:	e7f8      	b.n	8009446 <memmove+0xc>
 8009454:	4283      	cmp	r3, r0
 8009456:	d9f5      	bls.n	8009444 <memmove+0xa>
 8009458:	1881      	adds	r1, r0, r2
 800945a:	1ad2      	subs	r2, r2, r3
 800945c:	42d3      	cmn	r3, r2
 800945e:	d100      	bne.n	8009462 <memmove+0x28>
 8009460:	bd10      	pop	{r4, pc}
 8009462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009466:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800946a:	e7f7      	b.n	800945c <memmove+0x22>

0800946c <_free_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4605      	mov	r5, r0
 8009470:	2900      	cmp	r1, #0
 8009472:	d045      	beq.n	8009500 <_free_r+0x94>
 8009474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009478:	1f0c      	subs	r4, r1, #4
 800947a:	2b00      	cmp	r3, #0
 800947c:	bfb8      	it	lt
 800947e:	18e4      	addlt	r4, r4, r3
 8009480:	f000 f8d2 	bl	8009628 <__malloc_lock>
 8009484:	4a1f      	ldr	r2, [pc, #124]	; (8009504 <_free_r+0x98>)
 8009486:	6813      	ldr	r3, [r2, #0]
 8009488:	4610      	mov	r0, r2
 800948a:	b933      	cbnz	r3, 800949a <_free_r+0x2e>
 800948c:	6063      	str	r3, [r4, #4]
 800948e:	6014      	str	r4, [r2, #0]
 8009490:	4628      	mov	r0, r5
 8009492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009496:	f000 b8c8 	b.w	800962a <__malloc_unlock>
 800949a:	42a3      	cmp	r3, r4
 800949c:	d90c      	bls.n	80094b8 <_free_r+0x4c>
 800949e:	6821      	ldr	r1, [r4, #0]
 80094a0:	1862      	adds	r2, r4, r1
 80094a2:	4293      	cmp	r3, r2
 80094a4:	bf04      	itt	eq
 80094a6:	681a      	ldreq	r2, [r3, #0]
 80094a8:	685b      	ldreq	r3, [r3, #4]
 80094aa:	6063      	str	r3, [r4, #4]
 80094ac:	bf04      	itt	eq
 80094ae:	1852      	addeq	r2, r2, r1
 80094b0:	6022      	streq	r2, [r4, #0]
 80094b2:	6004      	str	r4, [r0, #0]
 80094b4:	e7ec      	b.n	8009490 <_free_r+0x24>
 80094b6:	4613      	mov	r3, r2
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	b10a      	cbz	r2, 80094c0 <_free_r+0x54>
 80094bc:	42a2      	cmp	r2, r4
 80094be:	d9fa      	bls.n	80094b6 <_free_r+0x4a>
 80094c0:	6819      	ldr	r1, [r3, #0]
 80094c2:	1858      	adds	r0, r3, r1
 80094c4:	42a0      	cmp	r0, r4
 80094c6:	d10b      	bne.n	80094e0 <_free_r+0x74>
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	4401      	add	r1, r0
 80094cc:	1858      	adds	r0, r3, r1
 80094ce:	4282      	cmp	r2, r0
 80094d0:	6019      	str	r1, [r3, #0]
 80094d2:	d1dd      	bne.n	8009490 <_free_r+0x24>
 80094d4:	6810      	ldr	r0, [r2, #0]
 80094d6:	6852      	ldr	r2, [r2, #4]
 80094d8:	605a      	str	r2, [r3, #4]
 80094da:	4401      	add	r1, r0
 80094dc:	6019      	str	r1, [r3, #0]
 80094de:	e7d7      	b.n	8009490 <_free_r+0x24>
 80094e0:	d902      	bls.n	80094e8 <_free_r+0x7c>
 80094e2:	230c      	movs	r3, #12
 80094e4:	602b      	str	r3, [r5, #0]
 80094e6:	e7d3      	b.n	8009490 <_free_r+0x24>
 80094e8:	6820      	ldr	r0, [r4, #0]
 80094ea:	1821      	adds	r1, r4, r0
 80094ec:	428a      	cmp	r2, r1
 80094ee:	bf04      	itt	eq
 80094f0:	6811      	ldreq	r1, [r2, #0]
 80094f2:	6852      	ldreq	r2, [r2, #4]
 80094f4:	6062      	str	r2, [r4, #4]
 80094f6:	bf04      	itt	eq
 80094f8:	1809      	addeq	r1, r1, r0
 80094fa:	6021      	streq	r1, [r4, #0]
 80094fc:	605c      	str	r4, [r3, #4]
 80094fe:	e7c7      	b.n	8009490 <_free_r+0x24>
 8009500:	bd38      	pop	{r3, r4, r5, pc}
 8009502:	bf00      	nop
 8009504:	2000012c 	.word	0x2000012c

08009508 <_malloc_r>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	1ccd      	adds	r5, r1, #3
 800950c:	f025 0503 	bic.w	r5, r5, #3
 8009510:	3508      	adds	r5, #8
 8009512:	2d0c      	cmp	r5, #12
 8009514:	bf38      	it	cc
 8009516:	250c      	movcc	r5, #12
 8009518:	2d00      	cmp	r5, #0
 800951a:	4606      	mov	r6, r0
 800951c:	db01      	blt.n	8009522 <_malloc_r+0x1a>
 800951e:	42a9      	cmp	r1, r5
 8009520:	d903      	bls.n	800952a <_malloc_r+0x22>
 8009522:	230c      	movs	r3, #12
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	2000      	movs	r0, #0
 8009528:	bd70      	pop	{r4, r5, r6, pc}
 800952a:	f000 f87d 	bl	8009628 <__malloc_lock>
 800952e:	4a21      	ldr	r2, [pc, #132]	; (80095b4 <_malloc_r+0xac>)
 8009530:	6814      	ldr	r4, [r2, #0]
 8009532:	4621      	mov	r1, r4
 8009534:	b991      	cbnz	r1, 800955c <_malloc_r+0x54>
 8009536:	4c20      	ldr	r4, [pc, #128]	; (80095b8 <_malloc_r+0xb0>)
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	b91b      	cbnz	r3, 8009544 <_malloc_r+0x3c>
 800953c:	4630      	mov	r0, r6
 800953e:	f000 f863 	bl	8009608 <_sbrk_r>
 8009542:	6020      	str	r0, [r4, #0]
 8009544:	4629      	mov	r1, r5
 8009546:	4630      	mov	r0, r6
 8009548:	f000 f85e 	bl	8009608 <_sbrk_r>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d124      	bne.n	800959a <_malloc_r+0x92>
 8009550:	230c      	movs	r3, #12
 8009552:	6033      	str	r3, [r6, #0]
 8009554:	4630      	mov	r0, r6
 8009556:	f000 f868 	bl	800962a <__malloc_unlock>
 800955a:	e7e4      	b.n	8009526 <_malloc_r+0x1e>
 800955c:	680b      	ldr	r3, [r1, #0]
 800955e:	1b5b      	subs	r3, r3, r5
 8009560:	d418      	bmi.n	8009594 <_malloc_r+0x8c>
 8009562:	2b0b      	cmp	r3, #11
 8009564:	d90f      	bls.n	8009586 <_malloc_r+0x7e>
 8009566:	600b      	str	r3, [r1, #0]
 8009568:	50cd      	str	r5, [r1, r3]
 800956a:	18cc      	adds	r4, r1, r3
 800956c:	4630      	mov	r0, r6
 800956e:	f000 f85c 	bl	800962a <__malloc_unlock>
 8009572:	f104 000b 	add.w	r0, r4, #11
 8009576:	1d23      	adds	r3, r4, #4
 8009578:	f020 0007 	bic.w	r0, r0, #7
 800957c:	1ac3      	subs	r3, r0, r3
 800957e:	d0d3      	beq.n	8009528 <_malloc_r+0x20>
 8009580:	425a      	negs	r2, r3
 8009582:	50e2      	str	r2, [r4, r3]
 8009584:	e7d0      	b.n	8009528 <_malloc_r+0x20>
 8009586:	428c      	cmp	r4, r1
 8009588:	684b      	ldr	r3, [r1, #4]
 800958a:	bf16      	itet	ne
 800958c:	6063      	strne	r3, [r4, #4]
 800958e:	6013      	streq	r3, [r2, #0]
 8009590:	460c      	movne	r4, r1
 8009592:	e7eb      	b.n	800956c <_malloc_r+0x64>
 8009594:	460c      	mov	r4, r1
 8009596:	6849      	ldr	r1, [r1, #4]
 8009598:	e7cc      	b.n	8009534 <_malloc_r+0x2c>
 800959a:	1cc4      	adds	r4, r0, #3
 800959c:	f024 0403 	bic.w	r4, r4, #3
 80095a0:	42a0      	cmp	r0, r4
 80095a2:	d005      	beq.n	80095b0 <_malloc_r+0xa8>
 80095a4:	1a21      	subs	r1, r4, r0
 80095a6:	4630      	mov	r0, r6
 80095a8:	f000 f82e 	bl	8009608 <_sbrk_r>
 80095ac:	3001      	adds	r0, #1
 80095ae:	d0cf      	beq.n	8009550 <_malloc_r+0x48>
 80095b0:	6025      	str	r5, [r4, #0]
 80095b2:	e7db      	b.n	800956c <_malloc_r+0x64>
 80095b4:	2000012c 	.word	0x2000012c
 80095b8:	20000130 	.word	0x20000130

080095bc <_realloc_r>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	4607      	mov	r7, r0
 80095c0:	4614      	mov	r4, r2
 80095c2:	460e      	mov	r6, r1
 80095c4:	b921      	cbnz	r1, 80095d0 <_realloc_r+0x14>
 80095c6:	4611      	mov	r1, r2
 80095c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80095cc:	f7ff bf9c 	b.w	8009508 <_malloc_r>
 80095d0:	b922      	cbnz	r2, 80095dc <_realloc_r+0x20>
 80095d2:	f7ff ff4b 	bl	800946c <_free_r>
 80095d6:	4625      	mov	r5, r4
 80095d8:	4628      	mov	r0, r5
 80095da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095dc:	f000 f826 	bl	800962c <_malloc_usable_size_r>
 80095e0:	42a0      	cmp	r0, r4
 80095e2:	d20f      	bcs.n	8009604 <_realloc_r+0x48>
 80095e4:	4621      	mov	r1, r4
 80095e6:	4638      	mov	r0, r7
 80095e8:	f7ff ff8e 	bl	8009508 <_malloc_r>
 80095ec:	4605      	mov	r5, r0
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d0f2      	beq.n	80095d8 <_realloc_r+0x1c>
 80095f2:	4631      	mov	r1, r6
 80095f4:	4622      	mov	r2, r4
 80095f6:	f7ff ff15 	bl	8009424 <memcpy>
 80095fa:	4631      	mov	r1, r6
 80095fc:	4638      	mov	r0, r7
 80095fe:	f7ff ff35 	bl	800946c <_free_r>
 8009602:	e7e9      	b.n	80095d8 <_realloc_r+0x1c>
 8009604:	4635      	mov	r5, r6
 8009606:	e7e7      	b.n	80095d8 <_realloc_r+0x1c>

08009608 <_sbrk_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4c06      	ldr	r4, [pc, #24]	; (8009624 <_sbrk_r+0x1c>)
 800960c:	2300      	movs	r3, #0
 800960e:	4605      	mov	r5, r0
 8009610:	4608      	mov	r0, r1
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	f7f9 f99c 	bl	8002950 <_sbrk>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_sbrk_r+0x1a>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	b103      	cbz	r3, 8009622 <_sbrk_r+0x1a>
 8009620:	602b      	str	r3, [r5, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	200014f8 	.word	0x200014f8

08009628 <__malloc_lock>:
 8009628:	4770      	bx	lr

0800962a <__malloc_unlock>:
 800962a:	4770      	bx	lr

0800962c <_malloc_usable_size_r>:
 800962c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009630:	1f18      	subs	r0, r3, #4
 8009632:	2b00      	cmp	r3, #0
 8009634:	bfbc      	itt	lt
 8009636:	580b      	ldrlt	r3, [r1, r0]
 8009638:	18c0      	addlt	r0, r0, r3
 800963a:	4770      	bx	lr

0800963c <_init>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	bf00      	nop
 8009640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009642:	bc08      	pop	{r3}
 8009644:	469e      	mov	lr, r3
 8009646:	4770      	bx	lr

08009648 <_fini>:
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	bf00      	nop
 800964c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964e:	bc08      	pop	{r3}
 8009650:	469e      	mov	lr, r3
 8009652:	4770      	bx	lr
