
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009028  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800955c  0800955c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009564  08009564  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009564  08009564  00019564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009568  08009568  00019568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800956c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e48  20000024  08009590  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e6c  08009590  00020e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba77  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003725  00000000  00000000  0003bacb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  0003f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001410  00000000  00000000  00040798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002499a  00000000  00000000  00041ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e16  00000000  00000000  00066542  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d310d  00000000  00000000  00078358  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b465  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005950  00000000  00000000  0014b4e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080091d4 	.word	0x080091d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	080091d4 	.word	0x080091d4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f001 f99a 	bl	8001844 <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f001 f992 	bl	8001844 <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f001 f98a 	bl	8001844 <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f001 f982 	bl	8001844 <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f001 f9c6 	bl	80018f0 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	08009240 	.word	0x08009240

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <Rf96_OutPower+0x28>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	4619      	mov	r1, r3
 8000582:	2009      	movs	r0, #9
 8000584:	f001 f95e 	bl	8001844 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000588:	2187      	movs	r1, #135	; 0x87
 800058a:	205a      	movs	r0, #90	; 0x5a
 800058c:	f001 f95a 	bl	8001844 <SPIWrite>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	0800924c 	.word	0x0800924c

0800059c <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <Rf96_OCP+0x20>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	4619      	mov	r1, r3
 80005ae:	200b      	movs	r0, #11
 80005b0:	f001 f948 	bl	8001844 <SPIWrite>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	08009250 	.word	0x08009250

080005c0 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <Rf96_LNA+0x20>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	4619      	mov	r1, r3
 80005d2:	200c      	movs	r0, #12
 80005d4:	f001 f936 	bl	8001844 <SPIWrite>

}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08009254 	.word	0x08009254

080005e4 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	460b      	mov	r3, r1
 80005f0:	71bb      	strb	r3, [r7, #6]
 80005f2:	4613      	mov	r3, r2
 80005f4:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005f6:	210e      	movs	r1, #14
 80005f8:	201d      	movs	r0, #29
 80005fa:	f001 f923 	bl	8001844 <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // С CRC16
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	460b      	mov	r3, r1
 8000612:	71bb      	strb	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xC4);  // SF=12
 8000618:	21c4      	movs	r1, #196	; 0xc4
 800061a:	201e      	movs	r0, #30
 800061c:	f001 f912 	bl	8001844 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	201f      	movs	r0, #31
 8000628:	f001 f90c 	bl	8001844 <SPIWrite>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b29b      	uxth	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	2020      	movs	r0, #32
 800064a:	f001 f8fb 	bl	8001844 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	2021      	movs	r0, #33	; 0x21
 8000656:	f001 f8f5 	bl	8001844 <SPIWrite>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 8000662:	b590      	push	{r4, r7, lr}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	4604      	mov	r4, r0
 800066a:	4608      	mov	r0, r1
 800066c:	4611      	mov	r1, r2
 800066e:	461a      	mov	r2, r3
 8000670:	4623      	mov	r3, r4
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4603      	mov	r3, r0
 8000676:	71bb      	strb	r3, [r7, #6]
 8000678:	460b      	mov	r3, r1
 800067a:	717b      	strb	r3, [r7, #5]
 800067c:	4613      	mov	r3, r2
 800067e:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	b2da      	uxtb	r2, r3
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4413      	add	r3, r2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4413      	add	r3, r2
 8000698:	b2da      	uxtb	r2, r3
 800069a:	793b      	ldrb	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	2040      	movs	r0, #64	; 0x40
 80006a4:	f001 f8ce 	bl	8001844 <SPIWrite>
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd90      	pop	{r4, r7, pc}

080006b0 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006b4:	21f7      	movs	r1, #247	; 0xf7
 80006b6:	2011      	movs	r0, #17
 80006b8:	f001 f8c4 	bl	8001844 <SPIWrite>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
 80006c4:	213f      	movs	r1, #63	; 0x3f
 80006c6:	2011      	movs	r0, #17
 80006c8:	f001 f8bc 	bl	8001844 <SPIWrite>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4619      	mov	r1, r3
 80006de:	2022      	movs	r0, #34	; 0x22
 80006e0:	f001 f8b0 	bl	8001844 <SPIWrite>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4619      	mov	r1, r3
 80006fa:	200e      	movs	r0, #14
 80006fc:	f001 f8a2 	bl	8001844 <SPIWrite>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4619      	mov	r1, r3
 8000716:	200f      	movs	r0, #15
 8000718:	f001 f894 	bl	8001844 <SPIWrite>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4619      	mov	r1, r3
 8000732:	200d      	movs	r0, #13
 8000734:	f001 f886 	bl	8001844 <SPIWrite>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 8000744:	2185      	movs	r1, #133	; 0x85
 8000746:	2001      	movs	r0, #1
 8000748:	f001 f87c 	bl	8001844 <SPIWrite>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <Rf96_TX_mode>:
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 8000754:	2183      	movs	r1, #131	; 0x83
 8000756:	2001      	movs	r0, #1
 8000758:	f001 f874 	bl	8001844 <SPIWrite>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	461a      	mov	r2, r3
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	2000      	movs	r0, #0
 8000774:	f001 f8bc 	bl	80018f0 <BurstWrite>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000788:	2010      	movs	r0, #16
 800078a:	f001 f83d 	bl	8001808 <SPIRead>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	4619      	mov	r1, r3
 8000796:	200d      	movs	r0, #13
 8000798:	f001 f854 	bl	8001844 <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 800079c:	2013      	movs	r0, #19
 800079e:	f001 f833 	bl	8001808 <SPIRead>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	461a      	mov	r2, r3
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	2000      	movs	r0, #0
 80007ae:	f001 f86d 	bl	800188c <SPIBurstRead>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007be:	f7ff feb1 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007c2:	f7ff feb7 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff febc 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fecf 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fee2 	bl	800059c <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fef1 	bl	80005c0 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2104      	movs	r1, #4
 80007e2:	2007      	movs	r0, #7
 80007e4:	f7ff fefe 	bl	80005e4 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x0FF);
 80007e8:	22ff      	movs	r2, #255	; 0xff
 80007ea:	2101      	movs	r1, #1
 80007ec:	2006      	movs	r0, #6
 80007ee:	f7ff ff0a 	bl	8000606 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007f2:	2008      	movs	r0, #8
 80007f4:	f7ff ff1e 	bl	8000634 <Rf96_Preamble>
	SPIWrite(0x37,0x0A);
 80007f8:	210a      	movs	r1, #10
 80007fa:	2037      	movs	r0, #55	; 0x37
 80007fc:	f001 f822 	bl	8001844 <SPIWrite>
	SPIWrite(0x31,0xA3);
 8000800:	21a3      	movs	r1, #163	; 0xa3
 8000802:	2031      	movs	r0, #49	; 0x31
 8000804:	f001 f81e 	bl	8001844 <SPIWrite>
	// Заходим в StandBy
	Rf96_Standby();
 8000808:	f7ff fe84 	bl	8000514 <Rf96_Standby>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  SPIWrite(LR_RegHopPeriod,0x0);
 8000814:	2100      	movs	r1, #0
 8000816:	2024      	movs	r0, #36	; 0x24
 8000818:	f001 f814 	bl	8001844 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по отправке
	  Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 800081c:	2302      	movs	r3, #2
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff ff1d 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000828:	f7ff fe6c 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800082c:	f7ff ff40 	bl	80006b0 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000830:	202a      	movs	r0, #42	; 0x2a
 8000832:	f7ff ff4d 	bl	80006d0 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000836:	2080      	movs	r0, #128	; 0x80
 8000838:	f7ff ff58 	bl	80006ec <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800083c:	2080      	movs	r0, #128	; 0x80
 800083e:	f7ff ff71 	bl	8000724 <Rf96_FIFO_point>

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}

08000846 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 800084a:	2100      	movs	r1, #0
 800084c:	2024      	movs	r0, #36	; 0x24
 800084e:	f000 fff9 	bl	8001844 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 8000852:	2302      	movs	r3, #2
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff ff02 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 800085e:	f7ff ff2f 	bl	80006c0 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000862:	f7ff fe4f 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000866:	202a      	movs	r0, #42	; 0x2a
 8000868:	f7ff ff32 	bl	80006d0 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ff4b 	bl	8000708 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff ff56 	bl	8000724 <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 8000878:	f7ff ff62 	bl	8000740 <Rf96_RX_Continuous_mode>

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	4619      	mov	r1, r3
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff65 	bl	8000760 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 8000896:	f7ff ff5b 	bl	8000750 <Rf96_TX_mode>

	// Ждем пока появится прерывание

	while(1)
	{
		if(Get_NIRQ_Di0())
 800089a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <Rf96_LoRaTxPacket+0x3c>)
 80008a0:	f003 fbc0 	bl	8004024 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0f7      	beq.n	800089a <Rf96_LoRaTxPacket+0x1a>
		{
			// Сбрасываем флаги
			Rf96_LoRaClearIrq();
 80008aa:	f7ff fe2b 	bl	8000504 <Rf96_LoRaClearIrq>
            // Заходим в Standby
			Rf96_Standby();
 80008ae:	f7ff fe31 	bl	8000514 <Rf96_Standby>

			break;
 80008b2:	bf00      	nop
		}
	}


}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40020000 	.word	0x40020000

080008c0 <Flash_Read_single8bit>:
	{"Data9.txt\0"}};
const char mass[10]={"Data0.txt\0"};

// Функция чтения слова (8 бита) из памяти по адресу
uint32_t Flash_Read_single8bit(uint32_t Adr)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	return *(uint8_t*)Adr;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	781b      	ldrb	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <Flash_Write_single8bit>:

// Функция записи слова(8 бита) в память
void Flash_Write_single8bit(uint32_t Adr, uint32_t Data)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
     HAL_FLASH_Unlock();
 80008e2:	f002 ff7b 	bl	80037dc <HAL_FLASH_Unlock>
	 HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,Adr,Data);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	f04f 0400 	mov.w	r4, #0
 80008ec:	461a      	mov	r2, r3
 80008ee:	4623      	mov	r3, r4
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	2000      	movs	r0, #0
 80008f4:	f002 ff1e 	bl	8003734 <HAL_FLASH_Program>
	 HAL_FLASH_Lock();
 80008f8:	f002 ff92 	bl	8003820 <HAL_FLASH_Lock>

}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <flashErasePage>:
// Функция очистки Flash памяти
void flashErasePage(uint32_t sector)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

	uint32_t secError = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS ;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.Sector   = sector;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbSectors = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	617b      	str	r3, [r7, #20]
     HAL_FLASH_Unlock();
 800091c:	f002 ff5e 	bl	80037dc <HAL_FLASH_Unlock>
     HAL_FLASHEx_Erase(&EraseInitStruct, &secError);
 8000920:	f107 021c 	add.w	r2, r7, #28
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f003 f8c6 	bl	8003abc <HAL_FLASHEx_Erase>
	 HAL_FLASH_Lock();
 8000930:	f002 ff76 	bl	8003820 <HAL_FLASH_Lock>
}
 8000934:	bf00      	nop
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800094c:	81fb      	strh	r3, [r7, #14]

    while (len--)
 800094e:	e012      	b.n	8000976 <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 8000950:	89fb      	ldrh	r3, [r7, #14]
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	b21a      	sxth	r2, r3
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b29b      	uxth	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	1c59      	adds	r1, r3, #1
 8000962:	6079      	str	r1, [r7, #4]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4043      	eors	r3, r0
 8000968:	4909      	ldr	r1, [pc, #36]	; (8000990 <Crc16+0x54>)
 800096a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800096e:	b21b      	sxth	r3, r3
 8000970:	4053      	eors	r3, r2
 8000972:	b21b      	sxth	r3, r3
 8000974:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8000976:	887b      	ldrh	r3, [r7, #2]
 8000978:	1e5a      	subs	r2, r3, #1
 800097a:	807a      	strh	r2, [r7, #2]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1e7      	bne.n	8000950 <Crc16+0x14>

    return crc;
 8000980:	89fb      	ldrh	r3, [r7, #14]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	080092bc 	.word	0x080092bc

08000994 <CommandToRadio>:

// Функция передачи по радиоканалу
void CommandToRadio(uint8_t command)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	// Вход в режим передачи
	 Rf96_Lora_TX_mode();
 800099e:	f7ff ff37 	bl	8000810 <Rf96_Lora_TX_mode>
	// Обнуляем массив
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	e006      	b.n	80009b6 <CommandToRadio+0x22>
	{
		TX_RX_Radio[i]=0;
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <CommandToRadio+0x7c>)
 80009ac:	2100      	movs	r1, #0
 80009ae:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	3301      	adds	r3, #1
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b29      	cmp	r3, #41	; 0x29
 80009ba:	d9f5      	bls.n	80009a8 <CommandToRadio+0x14>
	}
    // Заносим команду
	TX_RX_Radio[CommIndex]=command;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <CommandToRadio+0x7c>)
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	7013      	strb	r3, [r2, #0]
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 80009c2:	2128      	movs	r1, #40	; 0x28
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <CommandToRadio+0x7c>)
 80009c6:	f7ff ffb9 	bl	800093c <Crc16>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <CommandToRadio+0x80>)
 80009d0:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <CommandToRadio+0x80>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	0a1b      	lsrs	r3, r3, #8
 80009d8:	b29b      	uxth	r3, r3
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <CommandToRadio+0x7c>)
 80009de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <CommandToRadio+0x80>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <CommandToRadio+0x7c>)
 80009ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 80009ee:	2080      	movs	r0, #128	; 0x80
 80009f0:	f7ff fe7c 	bl	80006ec <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 80009f4:	2080      	movs	r0, #128	; 0x80
 80009f6:	f7ff fe95 	bl	8000724 <Rf96_FIFO_point>
    // Очистка флагов
	Rf96_LoRaClearIrq();
 80009fa:	f7ff fd83 	bl	8000504 <Rf96_LoRaClearIrq>
    // Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 80009fe:	212a      	movs	r1, #42	; 0x2a
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <CommandToRadio+0x7c>)
 8000a02:	f7ff ff3d 	bl	8000880 <Rf96_LoRaTxPacket>
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000394 	.word	0x20000394
 8000a14:	20000044 	.word	0x20000044

08000a18 <uint32_TO_charmass>:
mass - массив, в который число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b087      	sub	sp, #28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	4611      	mov	r1, r2
 8000a24:	461a      	mov	r2, r3
 8000a26:	460b      	mov	r3, r1
 8000a28:	80fb      	strh	r3, [r7, #6]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	82fb      	strh	r3, [r7, #22]
 8000a32:	e01f      	b.n	8000a74 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8000a34:	68f9      	ldr	r1, [r7, #12]
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <uint32_TO_charmass+0x70>)
 8000a38:	fba3 2301 	umull	r2, r3, r3, r1
 8000a3c:	08da      	lsrs	r2, r3, #3
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	1aca      	subs	r2, r1, r3
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	1e59      	subs	r1, r3, #1
 8000a4e:	8afb      	ldrh	r3, [r7, #22]
 8000a50:	1ac9      	subs	r1, r1, r3
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	440b      	add	r3, r1
 8000a56:	4619      	mov	r1, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	440b      	add	r3, r1
 8000a5c:	3230      	adds	r2, #48	; 0x30
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <uint32_TO_charmass+0x70>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	08db      	lsrs	r3, r3, #3
 8000a6c:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8000a6e:	8afb      	ldrh	r3, [r7, #22]
 8000a70:	3301      	adds	r3, #1
 8000a72:	82fb      	strh	r3, [r7, #22]
 8000a74:	8afa      	ldrh	r2, [r7, #22]
 8000a76:	88bb      	ldrh	r3, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d3db      	bcc.n	8000a34 <uint32_TO_charmass+0x1c>
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	371c      	adds	r7, #28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	cccccccd 	.word	0xcccccccd

08000a8c <SyncCKT>:


// Функция синхронизации Usartа с ЦКТ
void SyncCKT(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	// Синхронизация
	if(readFlag==1)
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <SyncCKT+0x2c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d10d      	bne.n	8000ab4 <SyncCKT+0x28>
	{
		readFlag=0;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <SyncCKT+0x2c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f002 f908 	bl	8002cb4 <HAL_Delay>
		HAL_UART_Abort(&huart5);
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <SyncCKT+0x30>)
 8000aa6:	f005 fa6f 	bl	8005f88 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5,BuffCkt, MaxBuffOfCKT);
 8000aaa:	222b      	movs	r2, #43	; 0x2b
 8000aac:	4904      	ldr	r1, [pc, #16]	; (8000ac0 <SyncCKT+0x34>)
 8000aae:	4803      	ldr	r0, [pc, #12]	; (8000abc <SyncCKT+0x30>)
 8000ab0:	f005 f9ea 	bl	8005e88 <HAL_UART_Receive_DMA>
	}
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000668 	.word	0x20000668
 8000abc:	20000444 	.word	0x20000444
 8000ac0:	200003c0 	.word	0x200003c0

08000ac4 <RXCommande1>:
// Команда начала записи на SD карту
void RXCommande1(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    // Запись в память номера файла, на котором мы находимся
	CountFileNow=Flash_Read_single8bit(FilesAdr);
 8000ac8:	4830      	ldr	r0, [pc, #192]	; (8000b8c <RXCommande1+0xc8>)
 8000aca:	f7ff fef9 	bl	80008c0 <Flash_Read_single8bit>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <RXCommande1+0xcc>)
 8000ad4:	701a      	strb	r2, [r3, #0]
	if(CountFileNow==0xFF || CountFileNow>=9 ) // Максимальное количество создаваемых файлов =9
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <RXCommande1+0xcc>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2bff      	cmp	r3, #255	; 0xff
 8000adc:	d003      	beq.n	8000ae6 <RXCommande1+0x22>
 8000ade:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <RXCommande1+0xcc>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b08      	cmp	r3, #8
 8000ae4:	d902      	bls.n	8000aec <RXCommande1+0x28>
	{
		CountFileNow=0;
 8000ae6:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <RXCommande1+0xcc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
	}
	CountFileNow++;
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <RXCommande1+0xcc>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <RXCommande1+0xcc>)
 8000af6:	701a      	strb	r2, [r3, #0]
	flashErasePage(7);
 8000af8:	2007      	movs	r0, #7
 8000afa:	f7ff ff03 	bl	8000904 <flashErasePage>
	Flash_Write_single8bit(FilesAdr,CountFileNow);
 8000afe:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <RXCommande1+0xcc>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4821      	ldr	r0, [pc, #132]	; (8000b8c <RXCommande1+0xc8>)
 8000b06:	f7ff fee7 	bl	80008d8 <Flash_Write_single8bit>
	///ФЛЕШКА
	///  Создание файла
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4921      	ldr	r1, [pc, #132]	; (8000b94 <RXCommande1+0xd0>)
 8000b0e:	4822      	ldr	r0, [pc, #136]	; (8000b98 <RXCommande1+0xd4>)
 8000b10:	f007 feb6 	bl	8008880 <f_mount>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <RXCommande1+0xd8>)
 8000b1a:	701a      	strb	r2, [r3, #0]

		if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <RXCommande1+0xd8>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d005      	beq.n	8000b30 <RXCommande1+0x6c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2102      	movs	r1, #2
 8000b28:	481d      	ldr	r0, [pc, #116]	; (8000ba0 <RXCommande1+0xdc>)
 8000b2a:	f003 fa93 	bl	8004054 <HAL_GPIO_WritePin>
			while(1);
 8000b2e:	e7fe      	b.n	8000b2e <RXCommande1+0x6a>
		}
		// Открываем или создаем новый файл
		fres = f_open(&fil, &(MassFileName[CountFileNow][0]), FA_CREATE_ALWAYS | FA_WRITE);
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <RXCommande1+0xcc>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4613      	mov	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <RXCommande1+0xe0>)
 8000b40:	4413      	add	r3, r2
 8000b42:	220a      	movs	r2, #10
 8000b44:	4619      	mov	r1, r3
 8000b46:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <RXCommande1+0xe4>)
 8000b48:	f007 fee0 	bl	800890c <f_open>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <RXCommande1+0xd8>)
 8000b52:	701a      	strb	r2, [r3, #0]

		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <RXCommande1+0xd8>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d005      	beq.n	8000b68 <RXCommande1+0xa4>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2102      	movs	r1, #2
 8000b60:	480f      	ldr	r0, [pc, #60]	; (8000ba0 <RXCommande1+0xdc>)
 8000b62:	f003 fa77 	bl	8004054 <HAL_GPIO_WritePin>
			while(1);
 8000b66:	e7fe      	b.n	8000b66 <RXCommande1+0xa2>
		}
		fres=f_close(&fil);
 8000b68:	480f      	ldr	r0, [pc, #60]	; (8000ba8 <RXCommande1+0xe4>)
 8000b6a:	f008 fa80 	bl	800906e <f_close>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <RXCommande1+0xd8>)
 8000b74:	701a      	strb	r2, [r3, #0]
	    ResolveSDWrite=1; // Открываем доступ к записи на SD
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <RXCommande1+0xe8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
    // Отсылаем ответ
    CommandToRadio(1);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff ff09 	bl	8000994 <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000b82:	f7ff fe60 	bl	8000846 <Rf96_Lora_RX_mode>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	08060000 	.word	0x08060000
 8000b90:	20000049 	.word	0x20000049
 8000b94:	080091ec 	.word	0x080091ec
 8000b98:	20000120 	.word	0x20000120
 8000b9c:	20000764 	.word	0x20000764
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	08009258 	.word	0x08009258
 8000ba8:	20000768 	.word	0x20000768
 8000bac:	20000046 	.word	0x20000046

08000bb0 <RXCommande2>:
// Команда включения клапаном
void RXCommande2(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <RXCommande2+0x20>)
 8000bbc:	f003 fa4a 	bl	8004054 <HAL_GPIO_WritePin>
	// Отсылаем ответ
    CommandToRadio(2);
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f7ff fee7 	bl	8000994 <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000bc6:	f7ff fe3e 	bl	8000846 <Rf96_Lora_RX_mode>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40020400 	.word	0x40020400

08000bd4 <RXCommande3>:

// Команда включения двигателя
void RXCommande3(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	// Подаем единицу на двигатель
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bde:	480a      	ldr	r0, [pc, #40]	; (8000c08 <RXCommande3+0x34>)
 8000be0:	f003 fa38 	bl	8004054 <HAL_GPIO_WritePin>
	// Ждем 5 секунд
	HAL_Delay(5000);
 8000be4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000be8:	f002 f864 	bl	8002cb4 <HAL_Delay>
	// Убираем единицу с двигателя
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <RXCommande3+0x34>)
 8000bf4:	f003 fa2e 	bl	8004054 <HAL_GPIO_WritePin>
	// Отсылаем ответ
    CommandToRadio(3);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f7ff fecb 	bl	8000994 <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000bfe:	f7ff fe22 	bl	8000846 <Rf96_Lora_RX_mode>
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40020400 	.word	0x40020400

08000c0c <RXCommande4>:
// Команда - запрос на отправку данных
void RXCommande4(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

	RadioIrq=1;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <RXCommande4+0x14>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]

}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000048 	.word	0x20000048

08000c24 <RXCommande5>:
// Команда начала закрытия файла на SD карте
void RXCommande5(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	///ФЛЕШКА
    // Закрываем файл
	fres=f_close(&fil);
 8000c28:	4816      	ldr	r0, [pc, #88]	; (8000c84 <RXCommande5+0x60>)
 8000c2a:	f008 fa20 	bl	800906e <f_close>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <RXCommande5+0x64>)
 8000c34:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <RXCommande5+0x64>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d005      	beq.n	8000c4a <RXCommande5+0x26>

	} else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2102      	movs	r1, #2
 8000c42:	4812      	ldr	r0, [pc, #72]	; (8000c8c <RXCommande5+0x68>)
 8000c44:	f003 fa06 	bl	8004054 <HAL_GPIO_WritePin>
		while(1);
 8000c48:	e7fe      	b.n	8000c48 <RXCommande5+0x24>
	}
	fres=f_mount(NULL, "", 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4910      	ldr	r1, [pc, #64]	; (8000c90 <RXCommande5+0x6c>)
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f007 fe16 	bl	8008880 <f_mount>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <RXCommande5+0x64>)
 8000c5a:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <RXCommande5+0x64>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d005      	beq.n	8000c70 <RXCommande5+0x4c>

	} else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2102      	movs	r1, #2
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <RXCommande5+0x68>)
 8000c6a:	f003 f9f3 	bl	8004054 <HAL_GPIO_WritePin>
		while(1);
 8000c6e:	e7fe      	b.n	8000c6e <RXCommande5+0x4a>
	}
    ResolveSDWrite=0; // Закрываем доступ к записи на SD
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <RXCommande5+0x70>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
    // Отсылаем ответ
    CommandToRadio(5);
 8000c76:	2005      	movs	r0, #5
 8000c78:	f7ff fe8c 	bl	8000994 <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000c7c:	f7ff fde3 	bl	8000846 <Rf96_Lora_RX_mode>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000768 	.word	0x20000768
 8000c88:	20000764 	.word	0x20000764
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	080091ec 	.word	0x080091ec
 8000c94:	20000046 	.word	0x20000046

08000c98 <RXCommande6>:
// Команда закрытия клапана
void RXCommande6(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <RXCommande6+0x20>)
 8000ca4:	f003 f9d6 	bl	8004054 <HAL_GPIO_WritePin>
	// Отсылаем ответ
    CommandToRadio(6);
 8000ca8:	2006      	movs	r0, #6
 8000caa:	f7ff fe73 	bl	8000994 <CommandToRadio>
    // Ожидаем команду
    Rf96_Lora_RX_mode();
 8000cae:	f7ff fdca 	bl	8000846 <Rf96_Lora_RX_mode>
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40020400 	.word	0x40020400

08000cbc <CheckSD>:

// Проверка SD карты на работоспособность
void CheckSD(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	///  Создание файла
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4928      	ldr	r1, [pc, #160]	; (8000d64 <CheckSD+0xa8>)
 8000cc4:	4828      	ldr	r0, [pc, #160]	; (8000d68 <CheckSD+0xac>)
 8000cc6:	f007 fddb 	bl	8008880 <f_mount>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <CheckSD+0xb0>)
 8000cd0:	701a      	strb	r2, [r3, #0]

		if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <CheckSD+0xb0>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d005      	beq.n	8000ce6 <CheckSD+0x2a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4824      	ldr	r0, [pc, #144]	; (8000d70 <CheckSD+0xb4>)
 8000ce0:	f003 f9b8 	bl	8004054 <HAL_GPIO_WritePin>
			while(1);
 8000ce4:	e7fe      	b.n	8000ce4 <CheckSD+0x28>
		}
		// Открываем или создаем новый файл
		fres = f_open(&fil, "CheckSD.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000ce6:	220a      	movs	r2, #10
 8000ce8:	4922      	ldr	r1, [pc, #136]	; (8000d74 <CheckSD+0xb8>)
 8000cea:	4823      	ldr	r0, [pc, #140]	; (8000d78 <CheckSD+0xbc>)
 8000cec:	f007 fe0e 	bl	800890c <f_open>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <CheckSD+0xb0>)
 8000cf6:	701a      	strb	r2, [r3, #0]

		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <CheckSD+0xb0>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d005      	beq.n	8000d0c <CheckSD+0x50>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2102      	movs	r1, #2
 8000d04:	481a      	ldr	r0, [pc, #104]	; (8000d70 <CheckSD+0xb4>)
 8000d06:	f003 f9a5 	bl	8004054 <HAL_GPIO_WritePin>
			while(1);
 8000d0a:	e7fe      	b.n	8000d0a <CheckSD+0x4e>
		}
	    fres=f_close(&fil);
 8000d0c:	481a      	ldr	r0, [pc, #104]	; (8000d78 <CheckSD+0xbc>)
 8000d0e:	f008 f9ae 	bl	800906e <f_close>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <CheckSD+0xb0>)
 8000d18:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <CheckSD+0xb0>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <CheckSD+0x72>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2102      	movs	r1, #2
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <CheckSD+0xb4>)
 8000d28:	f003 f994 	bl	8004054 <HAL_GPIO_WritePin>
			while(1);
 8000d2c:	e7fe      	b.n	8000d2c <CheckSD+0x70>
		}
	    fres=f_mount(NULL, "", 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <CheckSD+0xa8>)
 8000d32:	2000      	movs	r0, #0
 8000d34:	f007 fda4 	bl	8008880 <f_mount>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <CheckSD+0xb0>)
 8000d3e:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <CheckSD+0xb0>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d005      	beq.n	8000d54 <CheckSD+0x98>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4808      	ldr	r0, [pc, #32]	; (8000d70 <CheckSD+0xb4>)
 8000d4e:	f003 f981 	bl	8004054 <HAL_GPIO_WritePin>
			while(1);
 8000d52:	e7fe      	b.n	8000d52 <CheckSD+0x96>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2102      	movs	r1, #2
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <CheckSD+0xb4>)
 8000d5a:	f003 f97b 	bl	8004054 <HAL_GPIO_WritePin>

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	080091ec 	.word	0x080091ec
 8000d68:	20000120 	.word	0x20000120
 8000d6c:	20000764 	.word	0x20000764
 8000d70:	40020800 	.word	0x40020800
 8000d74:	080091f0 	.word	0x080091f0
 8000d78:	20000768 	.word	0x20000768

08000d7c <DataConv>:

// Парсер
void DataConv(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	// Запись времени в буфер
	uint32_TO_charmass(reciveTime, SDbufWrite, 0, 8);
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <DataConv+0x60>)
 8000d84:	6818      	ldr	r0, [r3, #0]
 8000d86:	2308      	movs	r3, #8
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4915      	ldr	r1, [pc, #84]	; (8000de0 <DataConv+0x64>)
 8000d8c:	f7ff fe44 	bl	8000a18 <uint32_TO_charmass>
	for(uint8_t i=0;i<38;i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	e017      	b.n	8000dc6 <DataConv+0x4a>
	{
		uint32_TO_charmass(&BuffCkt[i+4], SDbufWrite, 9+i*4, 3);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <DataConv+0x68>)
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3309      	adds	r3, #9
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	2303      	movs	r3, #3
 8000dae:	490c      	ldr	r1, [pc, #48]	; (8000de0 <DataConv+0x64>)
 8000db0:	f7ff fe32 	bl	8000a18 <uint32_TO_charmass>
		SDbufWrite[8+i*4]=',';
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	3302      	adds	r3, #2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <DataConv+0x64>)
 8000dbc:	212c      	movs	r1, #44	; 0x2c
 8000dbe:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<38;i++)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b25      	cmp	r3, #37	; 0x25
 8000dca:	d9e4      	bls.n	8000d96 <DataConv+0x1a>
	}
	SDbufWrite[162]='\n';
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <DataConv+0x64>)
 8000dce:	220a      	movs	r2, #10
 8000dd0:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000040 	.word	0x20000040
 8000de0:	20000584 	.word	0x20000584
 8000de4:	200003c0 	.word	0x200003c0

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dee:	f001 feef 	bl	8002bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df2:	f000 f91f 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f000 fb7b 	bl	80014f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dfa:	f000 fb33 	bl	8001464 <MX_DMA_Init>
  MX_SPI1_Init();
 8000dfe:	f000 f98b 	bl	8001118 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000e02:	f000 fadb 	bl	80013bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e06:	f000 fb03 	bl	8001410 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000e0a:	f000 faad 	bl	8001368 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000e0e:	f005 ff91 	bl	8006d34 <MX_FATFS_Init>
  MX_SPI3_Init();
 8000e12:	f000 f9b7 	bl	8001184 <MX_SPI3_Init>
  MX_UART5_Init();
 8000e16:	f000 fa7b 	bl	8001310 <MX_UART5_Init>
  MX_TIM6_Init();
 8000e1a:	f000 f9e9 	bl	80011f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000e1e:	f000 fa1d 	bl	800125c <MX_TIM7_Init>
  MX_TIM10_Init();
 8000e22:	f000 fa51 	bl	80012c8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	// Индикация включения УСИ ПРД
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4874      	ldr	r0, [pc, #464]	; (8000ffc <main+0x214>)
 8000e2c:	f003 f912 	bl	8004054 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000e30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e34:	f001 ff3e 	bl	8002cb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	486f      	ldr	r0, [pc, #444]	; (8000ffc <main+0x214>)
 8000e3e:	f003 f909 	bl	8004054 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000e42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e46:	f001 ff35 	bl	8002cb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	486b      	ldr	r0, [pc, #428]	; (8000ffc <main+0x214>)
 8000e50:	f003 f900 	bl	8004054 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000e54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e58:	f001 ff2c 	bl	8002cb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4866      	ldr	r0, [pc, #408]	; (8000ffc <main+0x214>)
 8000e62:	f003 f8f7 	bl	8004054 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4864      	ldr	r0, [pc, #400]	; (8000ffc <main+0x214>)
 8000e6c:	f003 f8f2 	bl	8004054 <HAL_GPIO_WritePin>
	//Проверка SD карты
	CheckSD();
 8000e70:	f7ff ff24 	bl	8000cbc <CheckSD>
	// Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 8000e74:	f7ff fca1 	bl	80007ba <Rf96_Lora_init>
	// Режим приема
	Rf96_Lora_RX_mode();
 8000e78:	f7ff fce5 	bl	8000846 <Rf96_Lora_RX_mode>
	// Запуск приема в дма с аксселерометров
	HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 8000e7c:	222b      	movs	r2, #43	; 0x2b
 8000e7e:	4960      	ldr	r1, [pc, #384]	; (8001000 <main+0x218>)
 8000e80:	4860      	ldr	r0, [pc, #384]	; (8001004 <main+0x21c>)
 8000e82:	f005 f801 	bl	8005e88 <HAL_UART_Receive_DMA>
    // Запуск таймера с целью определения подключения ЦКТ
    HAL_TIM_Base_Start_IT(&htim10);
 8000e86:	4860      	ldr	r0, [pc, #384]	; (8001008 <main+0x220>)
 8000e88:	f004 fd01 	bl	800588e <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Синхронизация с ЦКТ
	    SyncCKT();
 8000e8c:	f7ff fdfe 	bl	8000a8c <SyncCKT>
	    // Прерывание по приему по радиоканалу
		if(Get_NIRQ_Di0())
 8000e90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e94:	485d      	ldr	r0, [pc, #372]	; (800100c <main+0x224>)
 8000e96:	f003 f8c5 	bl	8004024 <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d043      	beq.n	8000f28 <main+0x140>
		{
            // Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8000ea0:	485b      	ldr	r0, [pc, #364]	; (8001010 <main+0x228>)
 8000ea2:	f7ff fc6d 	bl	8000780 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <main+0x228>)
 8000ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b57      	ldr	r3, [pc, #348]	; (8001010 <main+0x228>)
 8000eb4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b55      	ldr	r3, [pc, #340]	; (8001014 <main+0x22c>)
 8000ec0:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 8000ec2:	f7ff fb1f 	bl	8000504 <Rf96_LoRaClearIrq>
			// Если CRC совпадает
			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2))
 8000ec6:	2128      	movs	r1, #40	; 0x28
 8000ec8:	4851      	ldr	r0, [pc, #324]	; (8001010 <main+0x228>)
 8000eca:	f7ff fd37 	bl	800093c <Crc16>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b50      	ldr	r3, [pc, #320]	; (8001014 <main+0x22c>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d126      	bne.n	8000f28 <main+0x140>
			{
				switch(TX_RX_Radio[CommIndex])
 8000eda:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <main+0x228>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	d821      	bhi.n	8000f28 <main+0x140>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <main+0x104>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	08000f05 	.word	0x08000f05
 8000ef0:	08000f0b 	.word	0x08000f0b
 8000ef4:	08000f11 	.word	0x08000f11
 8000ef8:	08000f17 	.word	0x08000f17
 8000efc:	08000f1d 	.word	0x08000f1d
 8000f00:	08000f23 	.word	0x08000f23
				{
				case 1:   // Команда начала записи: Создаем файл
					RXCommande1();
 8000f04:	f7ff fdde 	bl	8000ac4 <RXCommande1>
					break;
 8000f08:	e00e      	b.n	8000f28 <main+0x140>
				case 2:   // Команда открытия клапана
					RXCommande2();
 8000f0a:	f7ff fe51 	bl	8000bb0 <RXCommande2>
					break;
 8000f0e:	e00b      	b.n	8000f28 <main+0x140>
				case 3:   // Команда запуска двигателя
					RXCommande3();
 8000f10:	f7ff fe60 	bl	8000bd4 <RXCommande3>
					break;
 8000f14:	e008      	b.n	8000f28 <main+0x140>
				case 4:   // Команда запроса данных
					RXCommande4();
 8000f16:	f7ff fe79 	bl	8000c0c <RXCommande4>
					break;
 8000f1a:	e005      	b.n	8000f28 <main+0x140>
				case 5:   // Команда закрытия файла на SD и запрет записи на SD
					RXCommande5();
 8000f1c:	f7ff fe82 	bl	8000c24 <RXCommande5>
					break;
 8000f20:	e002      	b.n	8000f28 <main+0x140>
				case 6:    // Команда закрытия клапана
					RXCommande6();
 8000f22:	f7ff feb9 	bl	8000c98 <RXCommande6>
					break;
 8000f26:	bf00      	nop
				}
			}
		}

		if(ResolveSDWrite==1 && ReadyToWrite==1) //  Если разрешена запись на Sd карту и если есть что записывать
 8000f28:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <main+0x230>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d1ad      	bne.n	8000e8c <main+0xa4>
 8000f30:	4b3a      	ldr	r3, [pc, #232]	; (800101c <main+0x234>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d1a9      	bne.n	8000e8c <main+0xa4>
		{
			// Запись на SD
			DataConv();
 8000f38:	f7ff ff20 	bl	8000d7c <DataConv>
			fres = f_write(&fil, SDbufWrite, 163, &bytesWrote);
 8000f3c:	4b38      	ldr	r3, [pc, #224]	; (8001020 <main+0x238>)
 8000f3e:	22a3      	movs	r2, #163	; 0xa3
 8000f40:	4938      	ldr	r1, [pc, #224]	; (8001024 <main+0x23c>)
 8000f42:	4839      	ldr	r0, [pc, #228]	; (8001028 <main+0x240>)
 8000f44:	f007 fea0 	bl	8008c88 <f_write>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b37      	ldr	r3, [pc, #220]	; (800102c <main+0x244>)
 8000f4e:	701a      	strb	r2, [r3, #0]
			if (fres != FR_OK)
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <main+0x244>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <main+0x17c>
			{
				while(1)
				{
					// Выключение 1 светодиода, если какая-то проблема с записью на SD
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	4827      	ldr	r0, [pc, #156]	; (8000ffc <main+0x214>)
 8000f5e:	f003 f879 	bl	8004054 <HAL_GPIO_WritePin>
 8000f62:	e7f9      	b.n	8000f58 <main+0x170>

				}
			}
			if(RadioIrq==1)  // Если пришел запрос на отправку измерений по радио
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <main+0x248>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d13c      	bne.n	8000fe6 <main+0x1fe>
			{
				for(uint8_t i=0;i<RadioMaxBuff-2;i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	e00a      	b.n	8000f88 <main+0x1a0>
				{
					TX_RX_Radio[i+1]=BuffCkt[i+4];
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	1d1a      	adds	r2, r3, #4
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4921      	ldr	r1, [pc, #132]	; (8001000 <main+0x218>)
 8000f7c:	5c89      	ldrb	r1, [r1, r2]
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <main+0x228>)
 8000f80:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0;i<RadioMaxBuff-2;i++)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	3301      	adds	r3, #1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b27      	cmp	r3, #39	; 0x27
 8000f8c:	d9f1      	bls.n	8000f72 <main+0x18a>
				}
				// заносим в 1 элемент 4 команду
				TX_RX_Radio[0]=4;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <main+0x228>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	701a      	strb	r2, [r3, #0]
				// Отсылаем ответ
			    Rf96_Lora_TX_mode();
 8000f94:	f7ff fc3c 	bl	8000810 <Rf96_Lora_TX_mode>
				//Подсчет CRC16
				CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 8000f98:	2128      	movs	r1, #40	; 0x28
 8000f9a:	481d      	ldr	r0, [pc, #116]	; (8001010 <main+0x228>)
 8000f9c:	f7ff fcce 	bl	800093c <Crc16>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <main+0x22c>)
 8000fa6:	801a      	strh	r2, [r3, #0]
				TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <main+0x22c>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <main+0x228>)
 8000fb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <main+0x22c>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <main+0x228>)
 8000fc0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				// Установка адреса TX в буфере FIFO
				Rf96_TX_FifoAdr(0x80);
 8000fc4:	2080      	movs	r0, #128	; 0x80
 8000fc6:	f7ff fb91 	bl	80006ec <Rf96_TX_FifoAdr>
				// Устанавливает указатель на адрес начала массива TX в FIFO
				Rf96_FIFO_point(0x80);
 8000fca:	2080      	movs	r0, #128	; 0x80
 8000fcc:	f7ff fbaa 	bl	8000724 <Rf96_FIFO_point>
			    // Очистка флагов
				Rf96_LoRaClearIrq();
 8000fd0:	f7ff fa98 	bl	8000504 <Rf96_LoRaClearIrq>
			    // Отправка посылки
				Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8000fd4:	212a      	movs	r1, #42	; 0x2a
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <main+0x228>)
 8000fd8:	f7ff fc52 	bl	8000880 <Rf96_LoRaTxPacket>
			    // Ожидаем команду
			    Rf96_Lora_RX_mode();
 8000fdc:	f7ff fc33 	bl	8000846 <Rf96_Lora_RX_mode>
				RadioIrq=0;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <main+0x248>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
			}
			// Синхронизация файла и sd карты
			fres = f_sync(&fil);
 8000fe6:	4810      	ldr	r0, [pc, #64]	; (8001028 <main+0x240>)
 8000fe8:	f007 ffc3 	bl	8008f72 <f_sync>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <main+0x244>)
 8000ff2:	701a      	strb	r2, [r3, #0]
			ReadyToWrite=0;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <main+0x234>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	    SyncCKT();
 8000ffa:	e747      	b.n	8000e8c <main+0xa4>
 8000ffc:	40020800 	.word	0x40020800
 8001000:	200003c0 	.word	0x200003c0
 8001004:	20000444 	.word	0x20000444
 8001008:	20000350 	.word	0x20000350
 800100c:	40020000 	.word	0x40020000
 8001010:	20000394 	.word	0x20000394
 8001014:	20000044 	.word	0x20000044
 8001018:	20000046 	.word	0x20000046
 800101c:	20000047 	.word	0x20000047
 8001020:	20000390 	.word	0x20000390
 8001024:	20000584 	.word	0x20000584
 8001028:	20000768 	.word	0x20000768
 800102c:	20000764 	.word	0x20000764
 8001030:	20000048 	.word	0x20000048

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2234      	movs	r2, #52	; 0x34
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f008 f8be 	bl	80091c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <SystemClock_Config+0xdc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <SystemClock_Config+0xdc>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <SystemClock_Config+0xdc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <SystemClock_Config+0xe0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a25      	ldr	r2, [pc, #148]	; (8001114 <SystemClock_Config+0xe0>)
 800107e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <SystemClock_Config+0xe0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001098:	2310      	movs	r3, #16
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a4:	2308      	movs	r3, #8
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010a8:	23b4      	movs	r3, #180	; 0xb4
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4618      	mov	r0, r3
 80010be:	f003 faed 	bl	800469c <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010c8:	f000 fb72 	bl	80017b0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010cc:	f002 ffdc 	bl	8004088 <HAL_PWREx_EnableOverDrive>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010d6:	f000 fb6b 	bl	80017b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2302      	movs	r3, #2
 80010e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	2105      	movs	r1, #5
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 f815 	bl	8004128 <HAL_RCC_ClockConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001104:	f000 fb54 	bl	80017b0 <Error_Handler>
  }
}
 8001108:	bf00      	nop
 800110a:	3750      	adds	r7, #80	; 0x50
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	40007000 	.word	0x40007000

08001118 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_SPI1_Init+0x64>)
 800111e:	4a18      	ldr	r2, [pc, #96]	; (8001180 <MX_SPI1_Init+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_SPI1_Init+0x64>)
 8001124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_SPI1_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_SPI1_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_SPI1_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_SPI1_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_SPI1_Init+0x64>)
 8001144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001148:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_SPI1_Init+0x64>)
 800114c:	2210      	movs	r2, #16
 800114e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_SPI1_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_SPI1_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_SPI1_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_SPI1_Init+0x64>)
 8001164:	220a      	movs	r2, #10
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_SPI1_Init+0x64>)
 800116a:	f003 fcf1 	bl	8004b50 <HAL_SPI_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001174:	f000 fb1c 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000066c 	.word	0x2000066c
 8001180:	40013000 	.word	0x40013000

08001184 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_SPI3_Init+0x64>)
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <MX_SPI3_Init+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_SPI3_Init+0x64>)
 8001190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001194:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_SPI3_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_SPI3_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_SPI3_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_SPI3_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_SPI3_Init+0x64>)
 80011b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_SPI3_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_SPI3_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_SPI3_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_SPI3_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_SPI3_Init+0x64>)
 80011d0:	220a      	movs	r2, #10
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_SPI3_Init+0x64>)
 80011d6:	f003 fcbb 	bl	8004b50 <HAL_SPI_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80011e0:	f000 fae6 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200003ec 	.word	0x200003ec
 80011ec:	40003c00 	.word	0x40003c00

080011f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	463b      	mov	r3, r7
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_TIM6_Init+0x64>)
 8001200:	4a15      	ldr	r2, [pc, #84]	; (8001258 <MX_TIM6_Init+0x68>)
 8001202:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_TIM6_Init+0x64>)
 8001206:	f242 3227 	movw	r2, #8999	; 0x2327
 800120a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_TIM6_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_TIM6_Init+0x64>)
 8001214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001218:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_TIM6_Init+0x64>)
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_TIM6_Init+0x64>)
 8001222:	f004 fb09 	bl	8005838 <HAL_TIM_Base_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800122c:	f000 fac0 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_TIM6_Init+0x64>)
 800123e:	f004 fd45 	bl	8005ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001248:	f000 fab2 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000628 	.word	0x20000628
 8001258:	40001000 	.word	0x40001000

0800125c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_TIM7_Init+0x64>)
 800126c:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <MX_TIM7_Init+0x68>)
 800126e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <MX_TIM7_Init+0x64>)
 8001272:	f242 3227 	movw	r2, #8999	; 0x2327
 8001276:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_TIM7_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_TIM7_Init+0x64>)
 8001280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001284:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_TIM7_Init+0x64>)
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_TIM7_Init+0x64>)
 800128e:	f004 fad3 	bl	8005838 <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001298:	f000 fa8a 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_TIM7_Init+0x64>)
 80012aa:	f004 fd0f 	bl	8005ccc <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80012b4:	f000 fa7c 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000998 	.word	0x20000998
 80012c4:	40001400 	.word	0x40001400

080012c8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_TIM10_Init+0x40>)
 80012ce:	4a0f      	ldr	r2, [pc, #60]	; (800130c <MX_TIM10_Init+0x44>)
 80012d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <MX_TIM10_Init+0x40>)
 80012d4:	f242 3227 	movw	r2, #8999	; 0x2327
 80012d8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_TIM10_Init+0x40>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_TIM10_Init+0x40>)
 80012e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012e6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <MX_TIM10_Init+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_TIM10_Init+0x40>)
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_TIM10_Init+0x40>)
 80012f6:	f004 fa9f 	bl	8005838 <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001300:	f000 fa56 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000350 	.word	0x20000350
 800130c:	40014400 	.word	0x40014400

08001310 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_UART5_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <MX_UART5_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_UART5_Init+0x50>)
 800131c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001320:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_UART5_Init+0x50>)
 8001324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001328:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <MX_UART5_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_UART5_Init+0x50>)
 8001332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001336:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_UART5_Init+0x50>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_UART5_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_UART5_Init+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_UART5_Init+0x50>)
 800134c:	f004 fd4e 	bl	8005dec <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 8001356:	f000 fa2b 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000444 	.word	0x20000444
 8001364:	40005000 	.word	0x40005000

08001368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_USART1_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001374:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 80013a0:	f004 fd24 	bl	8005dec <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 fa01 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000544 	.word	0x20000544
 80013b8:	40011000 	.word	0x40011000

080013bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_USART2_UART_Init+0x50>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013c8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80013cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013f4:	f004 fcfa 	bl	8005dec <HAL_UART_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013fe:	f000 f9d7 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200006c4 	.word	0x200006c4
 800140c:	40004400 	.word	0x40004400

08001410 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_USART3_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800141c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001420:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001448:	f004 fcd0 	bl	8005dec <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f000 f9ad 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200000e0 	.word	0x200000e0
 8001460:	40004800 	.word	0x40004800

08001464 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <MX_DMA_Init+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <MX_DMA_Init+0x88>)
 8001474:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_DMA_Init+0x88>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_DMA_Init+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a17      	ldr	r2, [pc, #92]	; (80014ec <MX_DMA_Init+0x88>)
 8001490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_DMA_Init+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	200b      	movs	r0, #11
 80014a8:	f001 fd01 	bl	8002eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014ac:	200b      	movs	r0, #11
 80014ae:	f001 fd1a 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	200c      	movs	r0, #12
 80014b8:	f001 fcf9 	bl	8002eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014bc:	200c      	movs	r0, #12
 80014be:	f001 fd12 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2011      	movs	r0, #17
 80014c8:	f001 fcf1 	bl	8002eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014cc:	2011      	movs	r0, #17
 80014ce:	f001 fd0a 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	203a      	movs	r0, #58	; 0x3a
 80014d8:	f001 fce9 	bl	8002eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014dc:	203a      	movs	r0, #58	; 0x3a
 80014de:	f001 fd02 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a66      	ldr	r2, [pc, #408]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a58      	ldr	r2, [pc, #352]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a51      	ldr	r2, [pc, #324]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	210e      	movs	r1, #14
 800157a:	484c      	ldr	r0, [pc, #304]	; (80016ac <MX_GPIO_Init+0x1bc>)
 800157c:	f002 fd6a 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f248 0112 	movw	r1, #32786	; 0x8012
 8001586:	484a      	ldr	r0, [pc, #296]	; (80016b0 <MX_GPIO_Init+0x1c0>)
 8001588:	f002 fd64 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001592:	4846      	ldr	r0, [pc, #280]	; (80016ac <MX_GPIO_Init+0x1bc>)
 8001594:	f002 fd5e 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|SSV_Pin|acel2_Pin|acel2_2_Pin 
 8001598:	2200      	movs	r2, #0
 800159a:	f24f 0142 	movw	r1, #61506	; 0xf042
 800159e:	4845      	ldr	r0, [pc, #276]	; (80016b4 <MX_GPIO_Init+0x1c4>)
 80015a0:	f002 fd58 	bl	8004054 <HAL_GPIO_WritePin>
                          |Motor_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015aa:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <MX_GPIO_Init+0x1c8>)
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	483c      	ldr	r0, [pc, #240]	; (80016ac <MX_GPIO_Init+0x1bc>)
 80015ba:	f002 fba1 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015be:	230e      	movs	r3, #14
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4835      	ldr	r0, [pc, #212]	; (80016ac <MX_GPIO_Init+0x1bc>)
 80015d6:	f002 fb93 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 80015da:	f240 4301 	movw	r3, #1025	; 0x401
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4830      	ldr	r0, [pc, #192]	; (80016b0 <MX_GPIO_Init+0x1c0>)
 80015f0:	f002 fb86 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 80015f4:	f248 0312 	movw	r3, #32786	; 0x8012
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4828      	ldr	r0, [pc, #160]	; (80016b0 <MX_GPIO_Init+0x1c0>)
 800160e:	f002 fb77 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|acel1_Pin|acel1_1_Pin;
 8001612:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4820      	ldr	r0, [pc, #128]	; (80016ac <MX_GPIO_Init+0x1bc>)
 800162c:	f002 fb68 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001630:	2302      	movs	r3, #2
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001638:	2301      	movs	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	481b      	ldr	r0, [pc, #108]	; (80016b4 <MX_GPIO_Init+0x1c4>)
 8001648:	f002 fb5a 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSV_Pin acel2_2_Pin Motor_Pin PB6 */
  GPIO_InitStruct.Pin = SSV_Pin|acel2_2_Pin|Motor_Pin|GPIO_PIN_6;
 800164c:	f24d 0340 	movw	r3, #53312	; 0xd040
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <MX_GPIO_Init+0x1c4>)
 8001666:	f002 fb4b 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 800166a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <MX_GPIO_Init+0x1c4>)
 8001684:	f002 fb3c 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001688:	2338      	movs	r3, #56	; 0x38
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_GPIO_Init+0x1c4>)
 800169c:	f002 fb30 	bl	8003d00 <HAL_GPIO_Init>

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400
 80016b8:	10210000 	.word	0x10210000

080016bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Обработчик прерываний Usartа по приему
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	if(huart==&huart5)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a18      	ldr	r2, [pc, #96]	; (8001728 <HAL_UART_RxCpltCallback+0x6c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d129      	bne.n	8001720 <HAL_UART_RxCpltCallback+0x64>
	{
		// Остановка таймера, говорящая о том, что ЦКТ подключен
		HAL_TIM_Base_Stop_IT(&htim10);
 80016cc:	4817      	ldr	r0, [pc, #92]	; (800172c <HAL_UART_RxCpltCallback+0x70>)
 80016ce:	f004 f902 	bl	80058d6 <HAL_TIM_Base_Stop_IT>
		TIM10->CNT=0;
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_UART_RxCpltCallback+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
        // Включение 2 светодиода, если ЦКТ подключен
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2104      	movs	r1, #4
 80016dc:	4815      	ldr	r0, [pc, #84]	; (8001734 <HAL_UART_RxCpltCallback+0x78>)
 80016de:	f002 fcb9 	bl	8004054 <HAL_GPIO_WritePin>
		// Если данные синхронизированы
		if(BuffCkt[0]==0x7C && BuffCkt[1]==0x6E && BuffCkt[2]==0xA1 && BuffCkt[3]==0x2C )
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_UART_RxCpltCallback+0x7c>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b7c      	cmp	r3, #124	; 0x7c
 80016e8:	d114      	bne.n	8001714 <HAL_UART_RxCpltCallback+0x58>
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_UART_RxCpltCallback+0x7c>)
 80016ec:	785b      	ldrb	r3, [r3, #1]
 80016ee:	2b6e      	cmp	r3, #110	; 0x6e
 80016f0:	d110      	bne.n	8001714 <HAL_UART_RxCpltCallback+0x58>
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_UART_RxCpltCallback+0x7c>)
 80016f4:	789b      	ldrb	r3, [r3, #2]
 80016f6:	2ba1      	cmp	r3, #161	; 0xa1
 80016f8:	d10c      	bne.n	8001714 <HAL_UART_RxCpltCallback+0x58>
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_UART_RxCpltCallback+0x7c>)
 80016fc:	78db      	ldrb	r3, [r3, #3]
 80016fe:	2b2c      	cmp	r3, #44	; 0x2c
 8001700:	d108      	bne.n	8001714 <HAL_UART_RxCpltCallback+0x58>
		{
			// Готов к записи
			ReadyToWrite=1;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_UART_RxCpltCallback+0x80>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
			//  Время в мс, когда пришли данные
			reciveTime = HAL_GetTick();
 8001708:	f001 fac8 	bl	8002c9c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_UART_RxCpltCallback+0x84>)
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e002      	b.n	800171a <HAL_UART_RxCpltCallback+0x5e>
		} else  // Если данные не синхронизированы
		{
			readFlag=1;
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_UART_RxCpltCallback+0x88>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
		}
		// стартуем таймер для дальнейшей проверки на подключение ЦКТ
		HAL_TIM_Base_Start_IT(&htim10);
 800171a:	4804      	ldr	r0, [pc, #16]	; (800172c <HAL_UART_RxCpltCallback+0x70>)
 800171c:	f004 f8b7 	bl	800588e <HAL_TIM_Base_Start_IT>
	}

}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000444 	.word	0x20000444
 800172c:	20000350 	.word	0x20000350
 8001730:	40014400 	.word	0x40014400
 8001734:	40020800 	.word	0x40020800
 8001738:	200003c0 	.word	0x200003c0
 800173c:	20000047 	.word	0x20000047
 8001740:	20000040 	.word	0x20000040
 8001744:	20000668 	.word	0x20000668

08001748 <HAL_UART_TxCpltCallback>:
// Обработчик прерываний Usartа по передаче
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]


}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	if(htim==&htim10)  // Если на ЦКТ ничего не пришло, выключаем 2 светодиод
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a0d      	ldr	r2, [pc, #52]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d112      	bne.n	8001792 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		TIM10->CNT=0;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim10);
 8001772:	480a      	ldr	r0, [pc, #40]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001774:	f004 f88b 	bl	800588e <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2104      	movs	r1, #4
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800177e:	f002 fc69 	bl	8004054 <HAL_GPIO_WritePin>
		HAL_UART_Abort(&huart5);
 8001782:	4809      	ldr	r0, [pc, #36]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001784:	f004 fc00 	bl	8005f88 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 8001788:	222b      	movs	r2, #43	; 0x2b
 800178a:	4908      	ldr	r1, [pc, #32]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800178e:	f004 fb7b 	bl	8005e88 <HAL_UART_Receive_DMA>
	}
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000350 	.word	0x20000350
 80017a0:	40014400 	.word	0x40014400
 80017a4:	40020800 	.word	0x40020800
 80017a8:	20000444 	.word	0x20000444
 80017ac:	200003c0 	.word	0x200003c0

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 80017ca:	1df9      	adds	r1, r7, #7
 80017cc:	230a      	movs	r3, #10
 80017ce:	2201      	movs	r2, #1
 80017d0:	4803      	ldr	r0, [pc, #12]	; (80017e0 <SPICmd8bit+0x20>)
 80017d2:	f003 fa21 	bl	8004c18 <HAL_SPI_Transmit>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000066c 	.word	0x2000066c

080017e4 <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 80017ee:	1df9      	adds	r1, r7, #7
 80017f0:	230a      	movs	r3, #10
 80017f2:	2201      	movs	r2, #1
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <SPIRead8bit+0x20>)
 80017f6:	f003 fb43 	bl	8004e80 <HAL_SPI_Receive>

  return(RdPara);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000066c 	.word	0x2000066c

08001808 <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 8001812:	2200      	movs	r2, #0
 8001814:	2140      	movs	r1, #64	; 0x40
 8001816:	480a      	ldr	r0, [pc, #40]	; (8001840 <SPIRead+0x38>)
 8001818:	f002 fc1c 	bl	8004054 <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ffce 	bl	80017c0 <SPICmd8bit>
  tmp = SPIRead8bit();
 8001824:	f7ff ffde 	bl	80017e4 <SPIRead8bit>
 8001828:	4603      	mov	r3, r0
 800182a:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 800182c:	2201      	movs	r2, #1
 800182e:	2140      	movs	r1, #64	; 0x40
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <SPIRead+0x38>)
 8001832:	f002 fc0f 	bl	8004054 <HAL_GPIO_WritePin>
  return(tmp);
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40020400 	.word	0x40020400

08001844 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 8001854:	2200      	movs	r2, #0
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	480b      	ldr	r0, [pc, #44]	; (8001888 <SPIWrite+0x44>)
 800185a:	f002 fbfb 	bl	8004054 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001864:	b2db      	uxtb	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ffaa 	bl	80017c0 <SPICmd8bit>
	SPICmd8bit(WrPara);
 800186c:	79bb      	ldrb	r3, [r7, #6]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ffa6 	bl	80017c0 <SPICmd8bit>
	NSS_H();
 8001874:	2201      	movs	r2, #1
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	4803      	ldr	r0, [pc, #12]	; (8001888 <SPIWrite+0x44>)
 800187a:	f002 fbeb 	bl	8004054 <HAL_GPIO_WritePin>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40020400 	.word	0x40020400

0800188c <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	4613      	mov	r3, r2
 800189a:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 800189c:	79bb      	ldrb	r3, [r7, #6]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d91f      	bls.n	80018e2 <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 80018a2:	2200      	movs	r2, #0
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	4811      	ldr	r0, [pc, #68]	; (80018ec <SPIBurstRead+0x60>)
 80018a8:	f002 fbd4 	bl	8004054 <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff86 	bl	80017c0 <SPICmd8bit>
    for(i=0;i<length;i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e009      	b.n	80018ce <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	18d4      	adds	r4, r2, r3
 80018c0:	f7ff ff90 	bl	80017e4 <SPIRead8bit>
 80018c4:	4603      	mov	r3, r0
 80018c6:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	3301      	adds	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	79bb      	ldrb	r3, [r7, #6]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3f1      	bcc.n	80018ba <SPIBurstRead+0x2e>
      NSS_H();
 80018d6:	2201      	movs	r2, #1
 80018d8:	2140      	movs	r1, #64	; 0x40
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <SPIBurstRead+0x60>)
 80018dc:	f002 fbba 	bl	8004054 <HAL_GPIO_WritePin>
 80018e0:	e000      	b.n	80018e4 <SPIBurstRead+0x58>
    return;
 80018e2:	bf00      	nop
  }
}
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd90      	pop	{r4, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40020400 	.word	0x40020400

080018f0 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d922      	bls.n	800194c <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 8001906:	2200      	movs	r2, #0
 8001908:	2140      	movs	r1, #64	; 0x40
 800190a:	4812      	ldr	r0, [pc, #72]	; (8001954 <BurstWrite+0x64>)
 800190c:	f002 fba2 	bl	8004054 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff51 	bl	80017c0 <SPICmd8bit>
    for(i=0;i<length;i++)
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	e009      	b.n	8001938 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff47 	bl	80017c0 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	3301      	adds	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	79bb      	ldrb	r3, [r7, #6]
 800193c:	429a      	cmp	r2, r3
 800193e:	d3f1      	bcc.n	8001924 <BurstWrite+0x34>
    NSS_H();
 8001940:	2201      	movs	r2, #1
 8001942:	2140      	movs	r1, #64	; 0x40
 8001944:	4803      	ldr	r0, [pc, #12]	; (8001954 <BurstWrite+0x64>)
 8001946:	f002 fb85 	bl	8004054 <HAL_GPIO_WritePin>
 800194a:	e000      	b.n	800194e <BurstWrite+0x5e>
    return;
 800194c:	bf00      	nop
  }
}
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40020400 	.word	0x40020400

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_MspInit+0x4c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_MspInit+0x4c>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a4e      	ldr	r2, [pc, #312]	; (8001b00 <HAL_SPI_MspInit+0x158>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d12c      	bne.n	8001a24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a4c      	ldr	r2, [pc, #304]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 80019d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a45      	ldr	r2, [pc, #276]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a02:	23e0      	movs	r3, #224	; 0xe0
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a12:	2305      	movs	r3, #5
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	483a      	ldr	r0, [pc, #232]	; (8001b08 <HAL_SPI_MspInit+0x160>)
 8001a1e:	f002 f96f 	bl	8003d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a22:	e068      	b.n	8001af6 <HAL_SPI_MspInit+0x14e>
  else if(hspi->Instance==SPI3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a38      	ldr	r2, [pc, #224]	; (8001b0c <HAL_SPI_MspInit+0x164>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d163      	bne.n	8001af6 <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a33      	ldr	r2, [pc, #204]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 8001a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a2c      	ldr	r2, [pc, #176]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_SPI_MspInit+0x15c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001a92:	2307      	movs	r3, #7
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	481c      	ldr	r0, [pc, #112]	; (8001b10 <HAL_SPI_MspInit+0x168>)
 8001a9e:	f002 f92f 	bl	8003d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ab4:	2306      	movs	r3, #6
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	4619      	mov	r1, r3
 8001abe:	4815      	ldr	r0, [pc, #84]	; (8001b14 <HAL_SPI_MspInit+0x16c>)
 8001ac0:	f002 f91e 	bl	8003d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <HAL_SPI_MspInit+0x16c>)
 8001ae2:	f002 f90d 	bl	8003d00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2033      	movs	r0, #51	; 0x33
 8001aec:	f001 f9df 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001af0:	2033      	movs	r0, #51	; 0x33
 8001af2:	f001 f9f8 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3730      	adds	r7, #48	; 0x30
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40013000 	.word	0x40013000
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	40003c00 	.word	0x40003c00
 8001b10:	40020400 	.word	0x40020400
 8001b14:	40020800 	.word	0x40020800

08001b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2a      	ldr	r2, [pc, #168]	; (8001bd0 <HAL_TIM_Base_MspInit+0xb8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d116      	bne.n	8001b58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2036      	movs	r0, #54	; 0x36
 8001b4c:	f001 f9af 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b50:	2036      	movs	r0, #54	; 0x36
 8001b52:	f001 f9c8 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001b56:	e036      	b.n	8001bc6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d116      	bne.n	8001b90 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	2037      	movs	r0, #55	; 0x37
 8001b84:	f001 f993 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b88:	2037      	movs	r0, #55	; 0x37
 8001b8a:	f001 f9ac 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 8001b8e:	e01a      	b.n	8001bc6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <HAL_TIM_Base_MspInit+0xc4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d115      	bne.n	8001bc6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_TIM_Base_MspInit+0xbc>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <HAL_TIM_Base_MspInit+0xbc>)
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_TIM_Base_MspInit+0xbc>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2019      	movs	r0, #25
 8001bbc:	f001 f977 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bc0:	2019      	movs	r0, #25
 8001bc2:	f001 f990 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40001000 	.word	0x40001000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40001400 	.word	0x40001400
 8001bdc:	40014400 	.word	0x40014400

08001be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b092      	sub	sp, #72	; 0x48
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a87      	ldr	r2, [pc, #540]	; (8001e1c <HAL_UART_MspInit+0x23c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	f040 8083 	bne.w	8001d0a <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
 8001c08:	4b85      	ldr	r3, [pc, #532]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a84      	ldr	r2, [pc, #528]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c12:	6413      	str	r3, [r2, #64]	; 0x40
 8001c14:	4b82      	ldr	r3, [pc, #520]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c24:	4b7e      	ldr	r3, [pc, #504]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	4a7d      	ldr	r2, [pc, #500]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c30:	4b7b      	ldr	r3, [pc, #492]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c40:	4b77      	ldr	r3, [pc, #476]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4a76      	ldr	r2, [pc, #472]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4c:	4b74      	ldr	r3, [pc, #464]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c72:	4619      	mov	r1, r3
 8001c74:	486b      	ldr	r0, [pc, #428]	; (8001e24 <HAL_UART_MspInit+0x244>)
 8001c76:	f002 f843 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c92:	4619      	mov	r1, r3
 8001c94:	4864      	ldr	r0, [pc, #400]	; (8001e28 <HAL_UART_MspInit+0x248>)
 8001c96:	f002 f833 	bl	8003d00 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001c9a:	4b64      	ldr	r3, [pc, #400]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001c9c:	4a64      	ldr	r2, [pc, #400]	; (8001e30 <HAL_UART_MspInit+0x250>)
 8001c9e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001ca0:	4b62      	ldr	r3, [pc, #392]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca8:	4b60      	ldr	r3, [pc, #384]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cae:	4b5f      	ldr	r3, [pc, #380]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb4:	4b5d      	ldr	r3, [pc, #372]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cba:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cbc:	4b5b      	ldr	r3, [pc, #364]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc2:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001cc8:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cce:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd0:	4b56      	ldr	r3, [pc, #344]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd6:	4b55      	ldr	r3, [pc, #340]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001cdc:	4853      	ldr	r0, [pc, #332]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001cde:	f001 f91d 	bl	8002f1c <HAL_DMA_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001ce8:	f7ff fd62 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a4f      	ldr	r2, [pc, #316]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cf2:	4a4e      	ldr	r2, [pc, #312]	; (8001e2c <HAL_UART_MspInit+0x24c>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	2035      	movs	r0, #53	; 0x35
 8001cfe:	f001 f8d6 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d02:	2035      	movs	r0, #53	; 0x35
 8001d04:	f001 f8ef 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d08:	e18e      	b.n	8002028 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a49      	ldr	r2, [pc, #292]	; (8001e34 <HAL_UART_MspInit+0x254>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f040 8099 	bne.w	8001e48 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1a:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a40      	ldr	r2, [pc, #256]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001d20:	f043 0310 	orr.w	r3, r3, #16
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a39      	ldr	r2, [pc, #228]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b37      	ldr	r3, [pc, #220]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	623b      	str	r3, [r7, #32]
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a32      	ldr	r2, [pc, #200]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_UART_MspInit+0x240>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d84:	4619      	mov	r1, r3
 8001d86:	482c      	ldr	r0, [pc, #176]	; (8001e38 <HAL_UART_MspInit+0x258>)
 8001d88:	f001 ffba 	bl	8003d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001da4:	4619      	mov	r1, r3
 8001da6:	4825      	ldr	r0, [pc, #148]	; (8001e3c <HAL_UART_MspInit+0x25c>)
 8001da8:	f001 ffaa 	bl	8003d00 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001dae:	4a25      	ldr	r2, [pc, #148]	; (8001e44 <HAL_UART_MspInit+0x264>)
 8001db0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001db4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001db8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dcc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001dee:	4814      	ldr	r0, [pc, #80]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001df0:	f001 f894 	bl	8002f1c <HAL_DMA_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001dfa:	f7ff fcd9 	bl	80017b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a0f      	ldr	r2, [pc, #60]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <HAL_UART_MspInit+0x260>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2025      	movs	r0, #37	; 0x25
 8001e10:	f001 f84d 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e14:	2025      	movs	r0, #37	; 0x25
 8001e16:	f001 f866 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 8001e1a:	e105      	b.n	8002028 <HAL_UART_MspInit+0x448>
 8001e1c:	40005000 	.word	0x40005000
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40020c00 	.word	0x40020c00
 8001e2c:	20000704 	.word	0x20000704
 8001e30:	40026010 	.word	0x40026010
 8001e34:	40011000 	.word	0x40011000
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	20000484 	.word	0x20000484
 8001e44:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a78      	ldr	r2, [pc, #480]	; (8002030 <HAL_UART_MspInit+0x450>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d162      	bne.n	8001f18 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	4b77      	ldr	r3, [pc, #476]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a76      	ldr	r2, [pc, #472]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b74      	ldr	r3, [pc, #464]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	4b70      	ldr	r3, [pc, #448]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a6f      	ldr	r2, [pc, #444]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b6d      	ldr	r3, [pc, #436]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e8a:	230c      	movs	r3, #12
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4864      	ldr	r0, [pc, #400]	; (8002038 <HAL_UART_MspInit+0x458>)
 8001ea6:	f001 ff2b 	bl	8003d00 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001eaa:	4b64      	ldr	r3, [pc, #400]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001eac:	4a64      	ldr	r2, [pc, #400]	; (8002040 <HAL_UART_MspInit+0x460>)
 8001eae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001eb0:	4b62      	ldr	r3, [pc, #392]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001eb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eb6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eb8:	4b60      	ldr	r3, [pc, #384]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001eba:	2240      	movs	r2, #64	; 0x40
 8001ebc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ec4:	4b5d      	ldr	r3, [pc, #372]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ecc:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed2:	4b5a      	ldr	r3, [pc, #360]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ed8:	4b58      	ldr	r3, [pc, #352]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ede:	4b57      	ldr	r3, [pc, #348]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ee4:	4b55      	ldr	r3, [pc, #340]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001eea:	4854      	ldr	r0, [pc, #336]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001eec:	f001 f816 	bl	8002f1c <HAL_DMA_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8001ef6:	f7ff fc5b 	bl	80017b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30
 8001f00:	4a4e      	ldr	r2, [pc, #312]	; (800203c <HAL_UART_MspInit+0x45c>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2026      	movs	r0, #38	; 0x26
 8001f0c:	f000 ffcf 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f10:	2026      	movs	r0, #38	; 0x26
 8001f12:	f000 ffe8 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 8001f16:	e087      	b.n	8002028 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a49      	ldr	r2, [pc, #292]	; (8002044 <HAL_UART_MspInit+0x464>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	f040 8082 	bne.w	8002028 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	4a41      	ldr	r2, [pc, #260]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f32:	6413      	str	r3, [r2, #64]	; 0x40
 8001f34:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	4a3a      	ldr	r2, [pc, #232]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f50:	4b38      	ldr	r3, [pc, #224]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4a33      	ldr	r2, [pc, #204]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6c:	4b31      	ldr	r3, [pc, #196]	; (8002034 <HAL_UART_MspInit+0x454>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f78:	2320      	movs	r3, #32
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f90:	4619      	mov	r1, r3
 8001f92:	482d      	ldr	r0, [pc, #180]	; (8002048 <HAL_UART_MspInit+0x468>)
 8001f94:	f001 feb4 	bl	8003d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001faa:	2307      	movs	r3, #7
 8001fac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4825      	ldr	r0, [pc, #148]	; (800204c <HAL_UART_MspInit+0x46c>)
 8001fb6:	f001 fea3 	bl	8003d00 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_UART_MspInit+0x470>)
 8001fbc:	4a25      	ldr	r2, [pc, #148]	; (8002054 <HAL_UART_MspInit+0x474>)
 8001fbe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001fc0:	4b23      	ldr	r3, [pc, #140]	; (8002050 <HAL_UART_MspInit+0x470>)
 8001fc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fc6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_UART_MspInit+0x470>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_UART_MspInit+0x470>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_UART_MspInit+0x470>)
 8001fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fda:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <HAL_UART_MspInit+0x470>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_UART_MspInit+0x470>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_UART_MspInit+0x470>)
 8001fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fee:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_UART_MspInit+0x470>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_UART_MspInit+0x470>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ffc:	4814      	ldr	r0, [pc, #80]	; (8002050 <HAL_UART_MspInit+0x470>)
 8001ffe:	f000 ff8d 	bl	8002f1c <HAL_DMA_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8002008:	f7ff fbd2 	bl	80017b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a10      	ldr	r2, [pc, #64]	; (8002050 <HAL_UART_MspInit+0x470>)
 8002010:	635a      	str	r2, [r3, #52]	; 0x34
 8002012:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <HAL_UART_MspInit+0x470>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	2027      	movs	r0, #39	; 0x27
 800201e:	f000 ff46 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002022:	2027      	movs	r0, #39	; 0x27
 8002024:	f000 ff5f 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 8002028:	bf00      	nop
 800202a:	3748      	adds	r7, #72	; 0x48
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40004400 	.word	0x40004400
 8002034:	40023800 	.word	0x40023800
 8002038:	40020000 	.word	0x40020000
 800203c:	200004e4 	.word	0x200004e4
 8002040:	400260a0 	.word	0x400260a0
 8002044:	40004800 	.word	0x40004800
 8002048:	40020800 	.word	0x40020800
 800204c:	40020400 	.word	0x40020400
 8002050:	20000080 	.word	0x20000080
 8002054:	40026028 	.word	0x40026028

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <MemManage_Handler+0x4>

08002072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <UsageFault_Handler+0x4>

0800207e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ac:	f000 fde2 	bl	8002c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <DMA1_Stream0_IRQHandler+0x10>)
 80020ba:	f001 f8c7 	bl	800324c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000704 	.word	0x20000704

080020c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <DMA1_Stream1_IRQHandler+0x10>)
 80020ce:	f001 f8bd 	bl	800324c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000080 	.word	0x20000080

080020dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <DMA1_Stream6_IRQHandler+0x10>)
 80020e2:	f001 f8b3 	bl	800324c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200004e4 	.word	0x200004e4

080020f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020f6:	f003 fc19 	bl	800592c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000350 	.word	0x20000350

08002104 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <USART1_IRQHandler+0x10>)
 800210a:	f003 ffbf 	bl	800608c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000544 	.word	0x20000544

08002118 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <USART2_IRQHandler+0x10>)
 800211e:	f003 ffb5 	bl	800608c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200006c4 	.word	0x200006c4

0800212c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <USART3_IRQHandler+0x10>)
 8002132:	f003 ffab 	bl	800608c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200000e0 	.word	0x200000e0

08002140 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <SPI3_IRQHandler+0x10>)
 8002146:	f003 f947 	bl	80053d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200003ec 	.word	0x200003ec

08002154 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <UART5_IRQHandler+0x10>)
 800215a:	f003 ff97 	bl	800608c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000444 	.word	0x20000444

08002168 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM6_DAC_IRQHandler+0x10>)
 800216e:	f003 fbdd 	bl	800592c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000628 	.word	0x20000628

0800217c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM7_IRQHandler+0x10>)
 8002182:	f003 fbd3 	bl	800592c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000998 	.word	0x20000998

08002190 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <DMA2_Stream2_IRQHandler+0x10>)
 8002196:	f001 f859 	bl	800324c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000484 	.word	0x20000484

080021a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <SystemInit+0x28>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	4a07      	ldr	r2, [pc, #28]	; (80021cc <SystemInit+0x28>)
 80021b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <SystemInit+0x28>)
 80021ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021be:	609a      	str	r2, [r3, #8]
#endif
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80021d8:	f000 fd60 	bl	8002c9c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <SPI_Timer_On+0x20>)
 80021e0:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <SPI_Timer_On+0x24>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	200009d8 	.word	0x200009d8
 80021f4:	200009dc 	.word	0x200009dc

080021f8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80021fc:	f000 fd4e 	bl	8002c9c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <SPI_Timer_Status+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	1ad2      	subs	r2, r2, r3
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <SPI_Timer_Status+0x28>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	bf34      	ite	cc
 8002210:	2301      	movcc	r3, #1
 8002212:	2300      	movcs	r3, #0
 8002214:	b2db      	uxtb	r3, r3
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200009d8 	.word	0x200009d8
 8002220:	200009dc 	.word	0x200009dc

08002224 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af02      	add	r7, sp, #8
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;

    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 800222e:	f107 020f 	add.w	r2, r7, #15
 8002232:	1df9      	adds	r1, r7, #7
 8002234:	2332      	movs	r3, #50	; 0x32
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2301      	movs	r3, #1
 800223a:	4804      	ldr	r0, [pc, #16]	; (800224c <xchg_spi+0x28>)
 800223c:	f002 ff29 	bl	8005092 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200003ec 	.word	0x200003ec

08002250 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	e00a      	b.n	8002276 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	18d4      	adds	r4, r2, r3
 8002266:	20ff      	movs	r0, #255	; 0xff
 8002268:	f7ff ffdc 	bl	8002224 <xchg_spi>
 800226c:	4603      	mov	r3, r0
 800226e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3301      	adds	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d3f0      	bcc.n	8002260 <rcvr_spi_multi+0x10>
	}
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bd90      	pop	{r4, r7, pc}

08002286 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e009      	b.n	80022aa <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ffc0 	bl	8002224 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3301      	adds	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d3f1      	bcc.n	8002296 <xmit_spi_multi+0x10>
	}
}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80022c2:	f000 fceb 	bl	8002c9c <HAL_GetTick>
 80022c6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80022cc:	20ff      	movs	r0, #255	; 0xff
 80022ce:	f7ff ffa9 	bl	8002224 <xchg_spi>
 80022d2:	4603      	mov	r3, r0
 80022d4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2bff      	cmp	r3, #255	; 0xff
 80022da:	d007      	beq.n	80022ec <wait_ready+0x32>
 80022dc:	f000 fcde 	bl	8002c9c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8ef      	bhi.n	80022cc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2bff      	cmp	r3, #255	; 0xff
 80022f0:	bf0c      	ite	eq
 80022f2:	2301      	moveq	r3, #1
 80022f4:	2300      	movne	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800230a:	4804      	ldr	r0, [pc, #16]	; (800231c <despiselect+0x1c>)
 800230c:	f001 fea2 	bl	8004054 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002310:	20ff      	movs	r0, #255	; 0xff
 8002312:	f7ff ff87 	bl	8002224 <xchg_spi>

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40020000 	.word	0x40020000

08002320 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800232a:	480a      	ldr	r0, [pc, #40]	; (8002354 <spiselect+0x34>)
 800232c:	f001 fe92 	bl	8004054 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002330:	20ff      	movs	r0, #255	; 0xff
 8002332:	f7ff ff77 	bl	8002224 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800233a:	f7ff ffbe 	bl	80022ba <wait_ready>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <spiselect+0x28>
 8002344:	2301      	movs	r3, #1
 8002346:	e002      	b.n	800234e <spiselect+0x2e>

	despiselect();
 8002348:	f7ff ffda 	bl	8002300 <despiselect>
	return 0;	/* Timeout */
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40020000 	.word	0x40020000

08002358 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002362:	20c8      	movs	r0, #200	; 0xc8
 8002364:	f7ff ff34 	bl	80021d0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002368:	20ff      	movs	r0, #255	; 0xff
 800236a:	f7ff ff5b 	bl	8002224 <xchg_spi>
 800236e:	4603      	mov	r3, r0
 8002370:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2bff      	cmp	r3, #255	; 0xff
 8002376:	d104      	bne.n	8002382 <rcvr_datablock+0x2a>
 8002378:	f7ff ff3e 	bl	80021f8 <SPI_Timer_Status>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f2      	bne.n	8002368 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2bfe      	cmp	r3, #254	; 0xfe
 8002386:	d001      	beq.n	800238c <rcvr_datablock+0x34>
 8002388:	2300      	movs	r3, #0
 800238a:	e00a      	b.n	80023a2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800238c:	6839      	ldr	r1, [r7, #0]
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ff5e 	bl	8002250 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002394:	20ff      	movs	r0, #255	; 0xff
 8002396:	f7ff ff45 	bl	8002224 <xchg_spi>
 800239a:	20ff      	movs	r0, #255	; 0xff
 800239c:	f7ff ff42 	bl	8002224 <xchg_spi>

	return 1;						/* Function succeeded */
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80023b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ba:	f7ff ff7e 	bl	80022ba <wait_ready>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <xmit_datablock+0x1e>
 80023c4:	2300      	movs	r3, #0
 80023c6:	e01e      	b.n	8002406 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff2a 	bl	8002224 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	2bfd      	cmp	r3, #253	; 0xfd
 80023d4:	d016      	beq.n	8002404 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80023d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ff53 	bl	8002286 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80023e0:	20ff      	movs	r0, #255	; 0xff
 80023e2:	f7ff ff1f 	bl	8002224 <xchg_spi>
 80023e6:	20ff      	movs	r0, #255	; 0xff
 80023e8:	f7ff ff1c 	bl	8002224 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80023ec:	20ff      	movs	r0, #255	; 0xff
 80023ee:	f7ff ff19 	bl	8002224 <xchg_spi>
 80023f2:	4603      	mov	r3, r0
 80023f4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	d001      	beq.n	8002404 <xmit_datablock+0x5a>
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <xmit_datablock+0x5c>
	}
	return 1;
 8002404:	2301      	movs	r3, #1
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	6039      	str	r1, [r7, #0]
 8002418:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	da0e      	bge.n	8002440 <send_cmd+0x32>
		cmd &= 0x7F;
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002428:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800242a:	2100      	movs	r1, #0
 800242c:	2037      	movs	r0, #55	; 0x37
 800242e:	f7ff ffee 	bl	800240e <send_cmd>
 8002432:	4603      	mov	r3, r0
 8002434:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002436:	7bbb      	ldrb	r3, [r7, #14]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d901      	bls.n	8002440 <send_cmd+0x32>
 800243c:	7bbb      	ldrb	r3, [r7, #14]
 800243e:	e051      	b.n	80024e4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d008      	beq.n	8002458 <send_cmd+0x4a>
		despiselect();
 8002446:	f7ff ff5b 	bl	8002300 <despiselect>
		if (!spiselect()) return 0xFF;
 800244a:	f7ff ff69 	bl	8002320 <spiselect>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <send_cmd+0x4a>
 8002454:	23ff      	movs	r3, #255	; 0xff
 8002456:	e045      	b.n	80024e4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fedf 	bl	8002224 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	0e1b      	lsrs	r3, r3, #24
 800246a:	b2db      	uxtb	r3, r3
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fed9 	bl	8002224 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fed3 	bl	8002224 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	b2db      	uxtb	r3, r3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fecd 	bl	8002224 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fec8 	bl	8002224 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <send_cmd+0x94>
 800249e:	2395      	movs	r3, #149	; 0x95
 80024a0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d101      	bne.n	80024ac <send_cmd+0x9e>
 80024a8:	2387      	movs	r3, #135	; 0x87
 80024aa:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff feb8 	bl	8002224 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d102      	bne.n	80024c0 <send_cmd+0xb2>
 80024ba:	20ff      	movs	r0, #255	; 0xff
 80024bc:	f7ff feb2 	bl	8002224 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80024c0:	230a      	movs	r3, #10
 80024c2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80024c4:	20ff      	movs	r0, #255	; 0xff
 80024c6:	f7ff fead 	bl	8002224 <xchg_spi>
 80024ca:	4603      	mov	r3, r0
 80024cc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80024ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	da05      	bge.n	80024e2 <send_cmd+0xd4>
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	3b01      	subs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80024e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <USER_SPI_initialize+0x14>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0cb      	b.n	8002698 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002500:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <USER_SPI_initialize+0x1b4>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <USER_SPI_initialize+0x2a>
 800250e:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <USER_SPI_initialize+0x1b4>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e0c0      	b.n	8002698 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 8002516:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <USER_SPI_initialize+0x1b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251e:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002520:	230a      	movs	r3, #10
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e005      	b.n	8002532 <USER_SPI_initialize+0x46>
 8002526:	20ff      	movs	r0, #255	; 0xff
 8002528:	f7ff fe7c 	bl	8002224 <xchg_spi>
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	3b01      	subs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f6      	bne.n	8002526 <USER_SPI_initialize+0x3a>

	ty = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800253c:	2100      	movs	r1, #0
 800253e:	2000      	movs	r0, #0
 8002540:	f7ff ff65 	bl	800240e <send_cmd>
 8002544:	4603      	mov	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	f040 808b 	bne.w	8002662 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800254c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002550:	f7ff fe3e 	bl	80021d0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002554:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002558:	2008      	movs	r0, #8
 800255a:	f7ff ff58 	bl	800240e <send_cmd>
 800255e:	4603      	mov	r3, r0
 8002560:	2b01      	cmp	r3, #1
 8002562:	d151      	bne.n	8002608 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e00d      	b.n	8002586 <USER_SPI_initialize+0x9a>
 800256a:	7bfc      	ldrb	r4, [r7, #15]
 800256c:	20ff      	movs	r0, #255	; 0xff
 800256e:	f7ff fe59 	bl	8002224 <xchg_spi>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	f107 0310 	add.w	r3, r7, #16
 800257a:	4423      	add	r3, r4
 800257c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	3301      	adds	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d9ee      	bls.n	800256a <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800258c:	7abb      	ldrb	r3, [r7, #10]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d167      	bne.n	8002662 <USER_SPI_initialize+0x176>
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	2baa      	cmp	r3, #170	; 0xaa
 8002596:	d164      	bne.n	8002662 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002598:	bf00      	nop
 800259a:	f7ff fe2d 	bl	80021f8 <SPI_Timer_Status>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <USER_SPI_initialize+0xc8>
 80025a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80025a8:	20a9      	movs	r0, #169	; 0xa9
 80025aa:	f7ff ff30 	bl	800240e <send_cmd>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f2      	bne.n	800259a <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80025b4:	f7ff fe20 	bl	80021f8 <SPI_Timer_Status>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d051      	beq.n	8002662 <USER_SPI_initialize+0x176>
 80025be:	2100      	movs	r1, #0
 80025c0:	203a      	movs	r0, #58	; 0x3a
 80025c2:	f7ff ff24 	bl	800240e <send_cmd>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d14a      	bne.n	8002662 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e00d      	b.n	80025ee <USER_SPI_initialize+0x102>
 80025d2:	7bfc      	ldrb	r4, [r7, #15]
 80025d4:	20ff      	movs	r0, #255	; 0xff
 80025d6:	f7ff fe25 	bl	8002224 <xchg_spi>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	f107 0310 	add.w	r3, r7, #16
 80025e2:	4423      	add	r3, r4
 80025e4:	f803 2c08 	strb.w	r2, [r3, #-8]
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	3301      	adds	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d9ee      	bls.n	80025d2 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80025f4:	7a3b      	ldrb	r3, [r7, #8]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <USER_SPI_initialize+0x116>
 80025fe:	230c      	movs	r3, #12
 8002600:	e000      	b.n	8002604 <USER_SPI_initialize+0x118>
 8002602:	2304      	movs	r3, #4
 8002604:	737b      	strb	r3, [r7, #13]
 8002606:	e02c      	b.n	8002662 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002608:	2100      	movs	r1, #0
 800260a:	20a9      	movs	r0, #169	; 0xa9
 800260c:	f7ff feff 	bl	800240e <send_cmd>
 8002610:	4603      	mov	r3, r0
 8002612:	2b01      	cmp	r3, #1
 8002614:	d804      	bhi.n	8002620 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002616:	2302      	movs	r3, #2
 8002618:	737b      	strb	r3, [r7, #13]
 800261a:	23a9      	movs	r3, #169	; 0xa9
 800261c:	73bb      	strb	r3, [r7, #14]
 800261e:	e003      	b.n	8002628 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002620:	2301      	movs	r3, #1
 8002622:	737b      	strb	r3, [r7, #13]
 8002624:	2301      	movs	r3, #1
 8002626:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002628:	bf00      	nop
 800262a:	f7ff fde5 	bl	80021f8 <SPI_Timer_Status>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <USER_SPI_initialize+0x158>
 8002634:	7bbb      	ldrb	r3, [r7, #14]
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fee8 	bl	800240e <send_cmd>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f2      	bne.n	800262a <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002644:	f7ff fdd8 	bl	80021f8 <SPI_Timer_Status>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <USER_SPI_initialize+0x172>
 800264e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002652:	2010      	movs	r0, #16
 8002654:	f7ff fedb 	bl	800240e <send_cmd>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <USER_SPI_initialize+0x176>
				ty = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 8002662:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <USER_SPI_initialize+0x1bc>)
 8002664:	7b7b      	ldrb	r3, [r7, #13]
 8002666:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002668:	f7ff fe4a 	bl	8002300 <despiselect>

	if (ty) {			/* OK */
 800266c:	7b7b      	ldrb	r3, [r7, #13]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <USER_SPI_initialize+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2210      	movs	r2, #16
 8002678:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <USER_SPI_initialize+0x1b4>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <USER_SPI_initialize+0x1b4>)
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	e002      	b.n	8002692 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <USER_SPI_initialize+0x1b4>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002692:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <USER_SPI_initialize+0x1b4>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b2db      	uxtb	r3, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bd90      	pop	{r4, r7, pc}
 80026a0:	20000004 	.word	0x20000004
 80026a4:	200003ec 	.word	0x200003ec
 80026a8:	2000004a 	.word	0x2000004a

080026ac <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <USER_SPI_status+0x14>
 80026bc:	2301      	movs	r3, #1
 80026be:	e002      	b.n	80026c6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <USER_SPI_status+0x28>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000004 	.word	0x20000004

080026d8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <USER_SPI_read+0x1c>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <USER_SPI_read+0x20>
 80026f4:	2304      	movs	r3, #4
 80026f6:	e04d      	b.n	8002794 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80026f8:	4b28      	ldr	r3, [pc, #160]	; (800279c <USER_SPI_read+0xc4>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <USER_SPI_read+0x32>
 8002706:	2303      	movs	r3, #3
 8002708:	e044      	b.n	8002794 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800270a:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <USER_SPI_read+0xc8>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <USER_SPI_read+0x44>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	025b      	lsls	r3, r3, #9
 800271a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d111      	bne.n	8002746 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	2011      	movs	r0, #17
 8002726:	f7ff fe72 	bl	800240e <send_cmd>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d129      	bne.n	8002784 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002734:	68b8      	ldr	r0, [r7, #8]
 8002736:	f7ff fe0f 	bl	8002358 <rcvr_datablock>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d021      	beq.n	8002784 <USER_SPI_read+0xac>
			count = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	e01e      	b.n	8002784 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	2012      	movs	r0, #18
 800274a:	f7ff fe60 	bl	800240e <send_cmd>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d117      	bne.n	8002784 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002758:	68b8      	ldr	r0, [r7, #8]
 800275a:	f7ff fdfd 	bl	8002358 <rcvr_datablock>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <USER_SPI_read+0xa2>
				buff += 512;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800276a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	3b01      	subs	r3, #1
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ed      	bne.n	8002754 <USER_SPI_read+0x7c>
 8002778:	e000      	b.n	800277c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800277a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800277c:	2100      	movs	r1, #0
 800277e:	200c      	movs	r0, #12
 8002780:	f7ff fe45 	bl	800240e <send_cmd>
		}
	}
	despiselect();
 8002784:	f7ff fdbc 	bl	8002300 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf14      	ite	ne
 800278e:	2301      	movne	r3, #1
 8002790:	2300      	moveq	r3, #0
 8002792:	b2db      	uxtb	r3, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000004 	.word	0x20000004
 80027a0:	2000004a 	.word	0x2000004a

080027a4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4603      	mov	r3, r0
 80027b2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <USER_SPI_write+0x1c>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <USER_SPI_write+0x20>
 80027c0:	2304      	movs	r3, #4
 80027c2:	e063      	b.n	800288c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <USER_SPI_write+0xf0>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <USER_SPI_write+0x32>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e05a      	b.n	800288c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80027d6:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <USER_SPI_write+0xf0>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <USER_SPI_write+0x44>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e051      	b.n	800288c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80027e8:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <USER_SPI_write+0xf4>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <USER_SPI_write+0x56>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	025b      	lsls	r3, r3, #9
 80027f8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d110      	bne.n	8002822 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	2018      	movs	r0, #24
 8002804:	f7ff fe03 	bl	800240e <send_cmd>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d136      	bne.n	800287c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800280e:	21fe      	movs	r1, #254	; 0xfe
 8002810:	68b8      	ldr	r0, [r7, #8]
 8002812:	f7ff fdca 	bl	80023aa <xmit_datablock>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d02f      	beq.n	800287c <USER_SPI_write+0xd8>
			count = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	e02c      	b.n	800287c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <USER_SPI_write+0xf4>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	f003 0306 	and.w	r3, r3, #6
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <USER_SPI_write+0x92>
 800282e:	6839      	ldr	r1, [r7, #0]
 8002830:	2097      	movs	r0, #151	; 0x97
 8002832:	f7ff fdec 	bl	800240e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	2019      	movs	r0, #25
 800283a:	f7ff fde8 	bl	800240e <send_cmd>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d11b      	bne.n	800287c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002844:	21fc      	movs	r1, #252	; 0xfc
 8002846:	68b8      	ldr	r0, [r7, #8]
 8002848:	f7ff fdaf 	bl	80023aa <xmit_datablock>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <USER_SPI_write+0xc4>
				buff += 512;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002858:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	3b01      	subs	r3, #1
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1ee      	bne.n	8002844 <USER_SPI_write+0xa0>
 8002866:	e000      	b.n	800286a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002868:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800286a:	21fd      	movs	r1, #253	; 0xfd
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff fd9c 	bl	80023aa <xmit_datablock>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <USER_SPI_write+0xd8>
 8002878:	2301      	movs	r3, #1
 800287a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800287c:	f7ff fd40 	bl	8002300 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	bf14      	ite	ne
 8002886:	2301      	movne	r3, #1
 8002888:	2300      	moveq	r3, #0
 800288a:	b2db      	uxtb	r3, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000004 	.word	0x20000004
 8002898:	2000004a 	.word	0x2000004a

0800289c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08c      	sub	sp, #48	; 0x30
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	603a      	str	r2, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
 80028a8:	460b      	mov	r3, r1
 80028aa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <USER_SPI_ioctl+0x1a>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e15a      	b.n	8002b6c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80028b6:	4baf      	ldr	r3, [pc, #700]	; (8002b74 <USER_SPI_ioctl+0x2d8>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <USER_SPI_ioctl+0x2c>
 80028c4:	2303      	movs	r3, #3
 80028c6:	e151      	b.n	8002b6c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80028ce:	79bb      	ldrb	r3, [r7, #6]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	f200 8136 	bhi.w	8002b42 <USER_SPI_ioctl+0x2a6>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <USER_SPI_ioctl+0x40>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	080028f1 	.word	0x080028f1
 80028e0:	08002905 	.word	0x08002905
 80028e4:	08002b43 	.word	0x08002b43
 80028e8:	080029b1 	.word	0x080029b1
 80028ec:	08002aa7 	.word	0x08002aa7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80028f0:	f7ff fd16 	bl	8002320 <spiselect>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8127 	beq.w	8002b4a <USER_SPI_ioctl+0x2ae>
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002902:	e122      	b.n	8002b4a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002904:	2100      	movs	r1, #0
 8002906:	2009      	movs	r0, #9
 8002908:	f7ff fd81 	bl	800240e <send_cmd>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 811d 	bne.w	8002b4e <USER_SPI_ioctl+0x2b2>
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	2110      	movs	r1, #16
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fd1c 	bl	8002358 <rcvr_datablock>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8113 	beq.w	8002b4e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002928:	7b3b      	ldrb	r3, [r7, #12]
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d111      	bne.n	8002956 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002932:	7d7b      	ldrb	r3, [r7, #21]
 8002934:	461a      	mov	r2, r3
 8002936:	7d3b      	ldrb	r3, [r7, #20]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	4413      	add	r3, r2
 800293c:	461a      	mov	r2, r3
 800293e:	7cfb      	ldrb	r3, [r7, #19]
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002946:	4413      	add	r3, r2
 8002948:	3301      	adds	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	029a      	lsls	r2, r3, #10
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e028      	b.n	80029a8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002956:	7c7b      	ldrb	r3, [r7, #17]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	b2da      	uxtb	r2, r3
 800295e:	7dbb      	ldrb	r3, [r7, #22]
 8002960:	09db      	lsrs	r3, r3, #7
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4413      	add	r3, r2
 8002966:	b2da      	uxtb	r2, r3
 8002968:	7d7b      	ldrb	r3, [r7, #21]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 0306 	and.w	r3, r3, #6
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4413      	add	r3, r2
 8002976:	b2db      	uxtb	r3, r3
 8002978:	3302      	adds	r3, #2
 800297a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800297e:	7d3b      	ldrb	r3, [r7, #20]
 8002980:	099b      	lsrs	r3, r3, #6
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	441a      	add	r2, r3
 800298c:	7cbb      	ldrb	r3, [r7, #18]
 800298e:	029b      	lsls	r3, r3, #10
 8002990:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002994:	4413      	add	r3, r2
 8002996:	3301      	adds	r3, #1
 8002998:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800299a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800299e:	3b09      	subs	r3, #9
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	409a      	lsls	r2, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80029ae:	e0ce      	b.n	8002b4e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80029b0:	4b71      	ldr	r3, [pc, #452]	; (8002b78 <USER_SPI_ioctl+0x2dc>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d031      	beq.n	8002a20 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80029bc:	2100      	movs	r1, #0
 80029be:	208d      	movs	r0, #141	; 0x8d
 80029c0:	f7ff fd25 	bl	800240e <send_cmd>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 80c3 	bne.w	8002b52 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80029cc:	20ff      	movs	r0, #255	; 0xff
 80029ce:	f7ff fc29 	bl	8002224 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	2110      	movs	r1, #16
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fcbd 	bl	8002358 <rcvr_datablock>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80b6 	beq.w	8002b52 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80029e6:	2330      	movs	r3, #48	; 0x30
 80029e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80029ec:	e007      	b.n	80029fe <USER_SPI_ioctl+0x162>
 80029ee:	20ff      	movs	r0, #255	; 0xff
 80029f0:	f7ff fc18 	bl	8002224 <xchg_spi>
 80029f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80029f8:	3b01      	subs	r3, #1
 80029fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80029fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f3      	bne.n	80029ee <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002a06:	7dbb      	ldrb	r3, [r7, #22]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2310      	movs	r3, #16
 8002a10:	fa03 f202 	lsl.w	r2, r3, r2
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002a1e:	e098      	b.n	8002b52 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002a20:	2100      	movs	r1, #0
 8002a22:	2009      	movs	r0, #9
 8002a24:	f7ff fcf3 	bl	800240e <send_cmd>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 8091 	bne.w	8002b52 <USER_SPI_ioctl+0x2b6>
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	2110      	movs	r1, #16
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fc8e 	bl	8002358 <rcvr_datablock>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8087 	beq.w	8002b52 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002a44:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <USER_SPI_ioctl+0x2dc>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d012      	beq.n	8002a76 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002a50:	7dbb      	ldrb	r3, [r7, #22]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002a58:	7dfa      	ldrb	r2, [r7, #23]
 8002a5a:	09d2      	lsrs	r2, r2, #7
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	4413      	add	r3, r2
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	7e7b      	ldrb	r3, [r7, #25]
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e013      	b.n	8002a9e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002a76:	7dbb      	ldrb	r3, [r7, #22]
 8002a78:	109b      	asrs	r3, r3, #2
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	3301      	adds	r3, #1
 8002a82:	7dfa      	ldrb	r2, [r7, #23]
 8002a84:	00d2      	lsls	r2, r2, #3
 8002a86:	f002 0218 	and.w	r2, r2, #24
 8002a8a:	7df9      	ldrb	r1, [r7, #23]
 8002a8c:	0949      	lsrs	r1, r1, #5
 8002a8e:	b2c9      	uxtb	r1, r1
 8002a90:	440a      	add	r2, r1
 8002a92:	3201      	adds	r2, #1
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002aa4:	e055      	b.n	8002b52 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002aa6:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <USER_SPI_ioctl+0x2dc>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f003 0306 	and.w	r3, r3, #6
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d051      	beq.n	8002b56 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002ab2:	f107 020c 	add.w	r2, r7, #12
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	210b      	movs	r1, #11
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff feee 	bl	800289c <USER_SPI_ioctl>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d149      	bne.n	8002b5a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002ac6:	7b3b      	ldrb	r3, [r7, #12]
 8002ac8:	099b      	lsrs	r3, r3, #6
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <USER_SPI_ioctl+0x23e>
 8002ad0:	7dbb      	ldrb	r3, [r7, #22]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d041      	beq.n	8002b5e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	623b      	str	r3, [r7, #32]
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <USER_SPI_ioctl+0x2dc>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	025b      	lsls	r3, r3, #9
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	025b      	lsls	r3, r3, #9
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b04:	2020      	movs	r0, #32
 8002b06:	f7ff fc82 	bl	800240e <send_cmd>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d128      	bne.n	8002b62 <USER_SPI_ioctl+0x2c6>
 8002b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b12:	2021      	movs	r0, #33	; 0x21
 8002b14:	f7ff fc7b 	bl	800240e <send_cmd>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d121      	bne.n	8002b62 <USER_SPI_ioctl+0x2c6>
 8002b1e:	2100      	movs	r1, #0
 8002b20:	2026      	movs	r0, #38	; 0x26
 8002b22:	f7ff fc74 	bl	800240e <send_cmd>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11a      	bne.n	8002b62 <USER_SPI_ioctl+0x2c6>
 8002b2c:	f247 5030 	movw	r0, #30000	; 0x7530
 8002b30:	f7ff fbc3 	bl	80022ba <wait_ready>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d013      	beq.n	8002b62 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002b40:	e00f      	b.n	8002b62 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002b42:	2304      	movs	r3, #4
 8002b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002b48:	e00c      	b.n	8002b64 <USER_SPI_ioctl+0x2c8>
		break;
 8002b4a:	bf00      	nop
 8002b4c:	e00a      	b.n	8002b64 <USER_SPI_ioctl+0x2c8>
		break;
 8002b4e:	bf00      	nop
 8002b50:	e008      	b.n	8002b64 <USER_SPI_ioctl+0x2c8>
		break;
 8002b52:	bf00      	nop
 8002b54:	e006      	b.n	8002b64 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002b56:	bf00      	nop
 8002b58:	e004      	b.n	8002b64 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002b5a:	bf00      	nop
 8002b5c:	e002      	b.n	8002b64 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002b5e:	bf00      	nop
 8002b60:	e000      	b.n	8002b64 <USER_SPI_ioctl+0x2c8>
		break;
 8002b62:	bf00      	nop
	}

	despiselect();
 8002b64:	f7ff fbcc 	bl	8002300 <despiselect>

	return res;
 8002b68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3730      	adds	r7, #48	; 0x30
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000004 	.word	0x20000004
 8002b78:	2000004a 	.word	0x2000004a

08002b7c <Reset_Handler>:
 8002b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb4 <LoopFillZerobss+0x14>
 8002b80:	2100      	movs	r1, #0
 8002b82:	e003      	b.n	8002b8c <LoopCopyDataInit>

08002b84 <CopyDataInit>:
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <LoopFillZerobss+0x18>)
 8002b86:	585b      	ldr	r3, [r3, r1]
 8002b88:	5043      	str	r3, [r0, r1]
 8002b8a:	3104      	adds	r1, #4

08002b8c <LoopCopyDataInit>:
 8002b8c:	480b      	ldr	r0, [pc, #44]	; (8002bbc <LoopFillZerobss+0x1c>)
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <LoopFillZerobss+0x20>)
 8002b90:	1842      	adds	r2, r0, r1
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d3f6      	bcc.n	8002b84 <CopyDataInit>
 8002b96:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <LoopFillZerobss+0x24>)
 8002b98:	e002      	b.n	8002ba0 <LoopFillZerobss>

08002b9a <FillZerobss>:
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f842 3b04 	str.w	r3, [r2], #4

08002ba0 <LoopFillZerobss>:
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <LoopFillZerobss+0x28>)
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d3f9      	bcc.n	8002b9a <FillZerobss>
 8002ba6:	f7ff fafd 	bl	80021a4 <SystemInit>
 8002baa:	f006 fae7 	bl	800917c <__libc_init_array>
 8002bae:	f7fe f91b 	bl	8000de8 <main>
 8002bb2:	4770      	bx	lr
 8002bb4:	20020000 	.word	0x20020000
 8002bb8:	0800956c 	.word	0x0800956c
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000024 	.word	0x20000024
 8002bc4:	20000024 	.word	0x20000024
 8002bc8:	20000e6c 	.word	0x20000e6c

08002bcc <ADC_IRQHandler>:
 8002bcc:	e7fe      	b.n	8002bcc <ADC_IRQHandler>
	...

08002bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <HAL_Init+0x40>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <HAL_Init+0x40>)
 8002bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_Init+0x40>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <HAL_Init+0x40>)
 8002be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_Init+0x40>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <HAL_Init+0x40>)
 8002bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	f000 f94d 	bl	8002e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f000 f808 	bl	8002c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c04:	f7fe fea8 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00

08002c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_InitTick+0x54>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_InitTick+0x58>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4619      	mov	r1, r3
 8002c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f965 	bl	8002f02 <HAL_SYSTICK_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e00e      	b.n	8002c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b0f      	cmp	r3, #15
 8002c46:	d80a      	bhi.n	8002c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c50:	f000 f92d 	bl	8002eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c54:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <HAL_InitTick+0x5c>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	2000000c 	.word	0x2000000c
 8002c70:	20000008 	.word	0x20000008

08002c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_IncTick+0x20>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_IncTick+0x24>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <HAL_IncTick+0x24>)
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	2000000c 	.word	0x2000000c
 8002c98:	200009e0 	.word	0x200009e0

08002c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_GetTick+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	200009e0 	.word	0x200009e0

08002cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff ffee 	bl	8002c9c <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ccc:	d005      	beq.n	8002cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_Delay+0x40>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cda:	bf00      	nop
 8002cdc:	f7ff ffde 	bl	8002c9c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d8f7      	bhi.n	8002cdc <HAL_Delay+0x28>
  {
  }
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	2000000c 	.word	0x2000000c

08002cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d14:	4013      	ands	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2a:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	60d3      	str	r3, [r2, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <__NVIC_GetPriorityGrouping+0x18>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	f003 0307 	and.w	r3, r3, #7
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db0b      	blt.n	8002d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4907      	ldr	r1, [pc, #28]	; (8002d94 <__NVIC_EnableIRQ+0x38>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <__NVIC_SetPriority+0x4c>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	bf28      	it	cs
 8002e0a:	2304      	movcs	r3, #4
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b03      	subs	r3, #3
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	4313      	orrs	r3, r2
         );
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e64:	d301      	bcc.n	8002e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00f      	b.n	8002e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <SysTick_Config+0x40>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e72:	210f      	movs	r1, #15
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e78:	f7ff ff8e 	bl	8002d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <SysTick_Config+0x40>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <SysTick_Config+0x40>)
 8002e84:	2207      	movs	r2, #7
 8002e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	e000e010 	.word	0xe000e010

08002e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ff29 	bl	8002cf8 <__NVIC_SetPriorityGrouping>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec0:	f7ff ff3e 	bl	8002d40 <__NVIC_GetPriorityGrouping>
 8002ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f7ff ff8e 	bl	8002dec <NVIC_EncodePriority>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff5d 	bl	8002d98 <__NVIC_SetPriority>
}
 8002ede:	bf00      	nop
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff31 	bl	8002d5c <__NVIC_EnableIRQ>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ffa2 	bl	8002e54 <SysTick_Config>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f28:	f7ff feb8 	bl	8002c9c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e099      	b.n	800306c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f58:	e00f      	b.n	8002f7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f5a:	f7ff fe9f 	bl	8002c9c <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d908      	bls.n	8002f7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2203      	movs	r2, #3
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e078      	b.n	800306c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e8      	bne.n	8002f5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4b38      	ldr	r3, [pc, #224]	; (8003074 <HAL_DMA_Init+0x158>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d107      	bne.n	8002fe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f023 0307 	bic.w	r3, r3, #7
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	2b04      	cmp	r3, #4
 800300c:	d117      	bne.n	800303e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00e      	beq.n	800303e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fb0d 	bl	8003640 <DMA_CheckFifoParam>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2240      	movs	r2, #64	; 0x40
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800303a:	2301      	movs	r3, #1
 800303c:	e016      	b.n	800306c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fac4 	bl	80035d4 <DMA_CalcBaseAndBitshift>
 800304c:	4603      	mov	r3, r0
 800304e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	223f      	movs	r2, #63	; 0x3f
 8003056:	409a      	lsls	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	f010803f 	.word	0xf010803f

08003078 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_DMA_Start_IT+0x26>
 800309a:	2302      	movs	r3, #2
 800309c:	e040      	b.n	8003120 <HAL_DMA_Start_IT+0xa8>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d12f      	bne.n	8003112 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fa56 	bl	8003578 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	223f      	movs	r2, #63	; 0x3f
 80030d2:	409a      	lsls	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0216 	orr.w	r2, r2, #22
 80030e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0208 	orr.w	r2, r2, #8
 80030fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e005      	b.n	800311e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800311a:	2302      	movs	r3, #2
 800311c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003136:	f7ff fdb1 	bl	8002c9c <HAL_GetTick>
 800313a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d008      	beq.n	800315a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2280      	movs	r2, #128	; 0x80
 800314c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e052      	b.n	8003200 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0216 	bic.w	r2, r2, #22
 8003168:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003178:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <HAL_DMA_Abort+0x62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0208 	bic.w	r2, r2, #8
 8003198:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031aa:	e013      	b.n	80031d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ac:	f7ff fd76 	bl	8002c9c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d90c      	bls.n	80031d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2203      	movs	r2, #3
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e015      	b.n	8003200 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e4      	bne.n	80031ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e6:	223f      	movs	r2, #63	; 0x3f
 80031e8:	409a      	lsls	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d004      	beq.n	8003226 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2280      	movs	r2, #128	; 0x80
 8003220:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e00c      	b.n	8003240 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2205      	movs	r2, #5
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003258:	4b92      	ldr	r3, [pc, #584]	; (80034a4 <HAL_DMA_IRQHandler+0x258>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a92      	ldr	r2, [pc, #584]	; (80034a8 <HAL_DMA_IRQHandler+0x25c>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	0a9b      	lsrs	r3, r3, #10
 8003264:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	2208      	movs	r2, #8
 8003278:	409a      	lsls	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01a      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d013      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0204 	bic.w	r2, r2, #4
 800329e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	2208      	movs	r2, #8
 80032a6:	409a      	lsls	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b0:	f043 0201 	orr.w	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	2201      	movs	r2, #1
 80032be:	409a      	lsls	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d012      	beq.n	80032ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	2201      	movs	r2, #1
 80032dc:	409a      	lsls	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f043 0202 	orr.w	r2, r3, #2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f2:	2204      	movs	r2, #4
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00b      	beq.n	8003324 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	2204      	movs	r2, #4
 8003312:	409a      	lsls	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	f043 0204 	orr.w	r2, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	2210      	movs	r2, #16
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d043      	beq.n	80033bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d03c      	beq.n	80033bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	2210      	movs	r2, #16
 8003348:	409a      	lsls	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d018      	beq.n	800338e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d108      	bne.n	800337c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d024      	beq.n	80033bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
 800337a:	e01f      	b.n	80033bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01b      	beq.n	80033bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
 800338c:	e016      	b.n	80033bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d107      	bne.n	80033ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0208 	bic.w	r2, r2, #8
 80033aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	2220      	movs	r2, #32
 80033c2:	409a      	lsls	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 808e 	beq.w	80034ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8086 	beq.w	80034ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	2220      	movs	r2, #32
 80033e4:	409a      	lsls	r2, r3
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b05      	cmp	r3, #5
 80033f4:	d136      	bne.n	8003464 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0216 	bic.w	r2, r2, #22
 8003404:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003414:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d103      	bne.n	8003426 <HAL_DMA_IRQHandler+0x1da>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0208 	bic.w	r2, r2, #8
 8003434:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	223f      	movs	r2, #63	; 0x3f
 800343c:	409a      	lsls	r2, r3
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003456:	2b00      	cmp	r3, #0
 8003458:	d07d      	beq.n	8003556 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
        }
        return;
 8003462:	e078      	b.n	8003556 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01c      	beq.n	80034ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d108      	bne.n	8003492 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	2b00      	cmp	r3, #0
 8003486:	d030      	beq.n	80034ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4798      	blx	r3
 8003490:	e02b      	b.n	80034ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d027      	beq.n	80034ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
 80034a2:	e022      	b.n	80034ea <HAL_DMA_IRQHandler+0x29e>
 80034a4:	20000000 	.word	0x20000000
 80034a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10f      	bne.n	80034da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0210 	bic.w	r2, r2, #16
 80034c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d032      	beq.n	8003558 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d022      	beq.n	8003544 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2205      	movs	r2, #5
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3301      	adds	r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	429a      	cmp	r2, r3
 8003520:	d307      	bcc.n	8003532 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f2      	bne.n	8003516 <HAL_DMA_IRQHandler+0x2ca>
 8003530:	e000      	b.n	8003534 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003532:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
 8003554:	e000      	b.n	8003558 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003556:	bf00      	nop
    }
  }
}
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop

08003560 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003594:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d108      	bne.n	80035b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035b6:	e007      	b.n	80035c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	3b10      	subs	r3, #16
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <DMA_CalcBaseAndBitshift+0x64>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ee:	4a13      	ldr	r2, [pc, #76]	; (800363c <DMA_CalcBaseAndBitshift+0x68>)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d909      	bls.n	8003616 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800360a:	f023 0303 	bic.w	r3, r3, #3
 800360e:	1d1a      	adds	r2, r3, #4
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	659a      	str	r2, [r3, #88]	; 0x58
 8003614:	e007      	b.n	8003626 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	aaaaaaab 	.word	0xaaaaaaab
 800363c:	080094d4 	.word	0x080094d4

08003640 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11f      	bne.n	800369a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d855      	bhi.n	800370c <DMA_CheckFifoParam+0xcc>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <DMA_CheckFifoParam+0x28>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	08003679 	.word	0x08003679
 800366c:	0800368b 	.word	0x0800368b
 8003670:	08003679 	.word	0x08003679
 8003674:	0800370d 	.word	0x0800370d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d045      	beq.n	8003710 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003688:	e042      	b.n	8003710 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003692:	d13f      	bne.n	8003714 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003698:	e03c      	b.n	8003714 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a2:	d121      	bne.n	80036e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d836      	bhi.n	8003718 <DMA_CheckFifoParam+0xd8>
 80036aa:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <DMA_CheckFifoParam+0x70>)
 80036ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b0:	080036c1 	.word	0x080036c1
 80036b4:	080036c7 	.word	0x080036c7
 80036b8:	080036c1 	.word	0x080036c1
 80036bc:	080036d9 	.word	0x080036d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
      break;
 80036c4:	e02f      	b.n	8003726 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d024      	beq.n	800371c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d6:	e021      	b.n	800371c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036e0:	d11e      	bne.n	8003720 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036e6:	e01b      	b.n	8003720 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d902      	bls.n	80036f4 <DMA_CheckFifoParam+0xb4>
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d003      	beq.n	80036fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036f2:	e018      	b.n	8003726 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      break;
 80036f8:	e015      	b.n	8003726 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00e      	beq.n	8003724 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
      break;
 800370a:	e00b      	b.n	8003724 <DMA_CheckFifoParam+0xe4>
      break;
 800370c:	bf00      	nop
 800370e:	e00a      	b.n	8003726 <DMA_CheckFifoParam+0xe6>
      break;
 8003710:	bf00      	nop
 8003712:	e008      	b.n	8003726 <DMA_CheckFifoParam+0xe6>
      break;
 8003714:	bf00      	nop
 8003716:	e006      	b.n	8003726 <DMA_CheckFifoParam+0xe6>
      break;
 8003718:	bf00      	nop
 800371a:	e004      	b.n	8003726 <DMA_CheckFifoParam+0xe6>
      break;
 800371c:	bf00      	nop
 800371e:	e002      	b.n	8003726 <DMA_CheckFifoParam+0xe6>
      break;   
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <DMA_CheckFifoParam+0xe6>
      break;
 8003724:	bf00      	nop
    }
  } 
  
  return status; 
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003746:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <HAL_FLASH_Program+0xa0>)
 8003748:	7e1b      	ldrb	r3, [r3, #24]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_FLASH_Program+0x1e>
 800374e:	2302      	movs	r3, #2
 8003750:	e03b      	b.n	80037ca <HAL_FLASH_Program+0x96>
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_FLASH_Program+0xa0>)
 8003754:	2201      	movs	r2, #1
 8003756:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003758:	f24c 3050 	movw	r0, #50000	; 0xc350
 800375c:	f000 f870 	bl	8003840 <FLASH_WaitForLastOperation>
 8003760:	4603      	mov	r3, r0
 8003762:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d12b      	bne.n	80037c2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003770:	783b      	ldrb	r3, [r7, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	68b8      	ldr	r0, [r7, #8]
 8003776:	f000 f919 	bl	80039ac <FLASH_Program_Byte>
 800377a:	e016      	b.n	80037aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d105      	bne.n	800378e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003782:	883b      	ldrh	r3, [r7, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	68b8      	ldr	r0, [r7, #8]
 8003788:	f000 f8ec 	bl	8003964 <FLASH_Program_HalfWord>
 800378c:	e00d      	b.n	80037aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d105      	bne.n	80037a0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	4619      	mov	r1, r3
 8003798:	68b8      	ldr	r0, [r7, #8]
 800379a:	f000 f8c1 	bl	8003920 <FLASH_Program_Word>
 800379e:	e004      	b.n	80037aa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80037a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037a4:	68b8      	ldr	r0, [r7, #8]
 80037a6:	f000 f88b 	bl	80038c0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037ae:	f000 f847 	bl	8003840 <FLASH_WaitForLastOperation>
 80037b2:	4603      	mov	r3, r0
 80037b4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <HAL_FLASH_Program+0xa4>)
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <HAL_FLASH_Program+0xa4>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <HAL_FLASH_Program+0xa0>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200009e4 	.word	0x200009e4
 80037d8:	40023c00 	.word	0x40023c00

080037dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_FLASH_Unlock+0x38>)
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	da0b      	bge.n	8003806 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_FLASH_Unlock+0x38>)
 80037f0:	4a09      	ldr	r2, [pc, #36]	; (8003818 <HAL_FLASH_Unlock+0x3c>)
 80037f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80037f4:	4b07      	ldr	r3, [pc, #28]	; (8003814 <HAL_FLASH_Unlock+0x38>)
 80037f6:	4a09      	ldr	r2, [pc, #36]	; (800381c <HAL_FLASH_Unlock+0x40>)
 80037f8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_FLASH_Unlock+0x38>)
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da01      	bge.n	8003806 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003806:	79fb      	ldrb	r3, [r7, #7]
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40023c00 	.word	0x40023c00
 8003818:	45670123 	.word	0x45670123
 800381c:	cdef89ab 	.word	0xcdef89ab

08003820 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_FLASH_Lock+0x1c>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	4a04      	ldr	r2, [pc, #16]	; (800383c <HAL_FLASH_Lock+0x1c>)
 800382a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800382e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40023c00 	.word	0x40023c00

08003840 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <FLASH_WaitForLastOperation+0x78>)
 800384e:	2200      	movs	r2, #0
 8003850:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003852:	f7ff fa23 	bl	8002c9c <HAL_GetTick>
 8003856:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003858:	e010      	b.n	800387c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003860:	d00c      	beq.n	800387c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <FLASH_WaitForLastOperation+0x38>
 8003868:	f7ff fa18 	bl	8002c9c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d201      	bcs.n	800387c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e019      	b.n	80038b0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <FLASH_WaitForLastOperation+0x7c>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e8      	bne.n	800385a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <FLASH_WaitForLastOperation+0x7c>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <FLASH_WaitForLastOperation+0x7c>)
 8003896:	2201      	movs	r2, #1
 8003898:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <FLASH_WaitForLastOperation+0x7c>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80038a6:	f000 f8a3 	bl	80039f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
  
}  
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200009e4 	.word	0x200009e4
 80038bc:	40023c00 	.word	0x40023c00

080038c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80038c0:	b490      	push	{r4, r7}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <FLASH_Program_DoubleWord+0x5c>)
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	4a12      	ldr	r2, [pc, #72]	; (800391c <FLASH_Program_DoubleWord+0x5c>)
 80038d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80038d8:	4b10      	ldr	r3, [pc, #64]	; (800391c <FLASH_Program_DoubleWord+0x5c>)
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	4a0f      	ldr	r2, [pc, #60]	; (800391c <FLASH_Program_DoubleWord+0x5c>)
 80038de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80038e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <FLASH_Program_DoubleWord+0x5c>)
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	4a0c      	ldr	r2, [pc, #48]	; (800391c <FLASH_Program_DoubleWord+0x5c>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80038f6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80038fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	f04f 0400 	mov.w	r4, #0
 8003906:	0013      	movs	r3, r2
 8003908:	2400      	movs	r4, #0
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	3204      	adds	r2, #4
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bc90      	pop	{r4, r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40023c00 	.word	0x40023c00

08003920 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <FLASH_Program_Word+0x40>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	4a0c      	ldr	r2, [pc, #48]	; (8003960 <FLASH_Program_Word+0x40>)
 8003930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003934:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <FLASH_Program_Word+0x40>)
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <FLASH_Program_Word+0x40>)
 800393c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003940:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <FLASH_Program_Word+0x40>)
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	4a06      	ldr	r2, [pc, #24]	; (8003960 <FLASH_Program_Word+0x40>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40023c00 	.word	0x40023c00

08003964 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <FLASH_Program_HalfWord+0x44>)
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <FLASH_Program_HalfWord+0x44>)
 8003976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <FLASH_Program_HalfWord+0x44>)
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <FLASH_Program_HalfWord+0x44>)
 8003982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003986:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <FLASH_Program_HalfWord+0x44>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	4a06      	ldr	r2, [pc, #24]	; (80039a8 <FLASH_Program_HalfWord+0x44>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	887a      	ldrh	r2, [r7, #2]
 8003998:	801a      	strh	r2, [r3, #0]
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40023c00 	.word	0x40023c00

080039ac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <FLASH_Program_Byte+0x40>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <FLASH_Program_Byte+0x40>)
 80039be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <FLASH_Program_Byte+0x40>)
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <FLASH_Program_Byte+0x40>)
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039cc:	4b07      	ldr	r3, [pc, #28]	; (80039ec <FLASH_Program_Byte+0x40>)
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	4a06      	ldr	r2, [pc, #24]	; (80039ec <FLASH_Program_Byte+0x40>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	701a      	strb	r2, [r3, #0]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40023c00 	.word	0x40023c00

080039f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80039f4:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a00:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f043 0310 	orr.w	r3, r3, #16
 8003a08:	4a2b      	ldr	r2, [pc, #172]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003a0a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003a0c:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 8003a0e:	2210      	movs	r2, #16
 8003a10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003a12:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003a1e:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f043 0308 	orr.w	r3, r3, #8
 8003a26:	4a24      	ldr	r2, [pc, #144]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003a28:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003a2a:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003a30:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003a3c:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	f043 0304 	orr.w	r3, r3, #4
 8003a44:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003a46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003a48:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 8003a4a:	2240      	movs	r2, #64	; 0x40
 8003a4c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003a4e:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f043 0302 	orr.w	r3, r3, #2
 8003a62:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003a64:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	4a0d      	ldr	r2, [pc, #52]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003a82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 8003a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a8a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003a8c:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f043 0320 	orr.w	r3, r3, #32
 8003aa0:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <FLASH_SetErrorCode+0xc8>)
 8003aa2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <FLASH_SetErrorCode+0xc4>)
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	60da      	str	r2, [r3, #12]
  }
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	40023c00 	.word	0x40023c00
 8003ab8:	200009e4 	.word	0x200009e4

08003abc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003ace:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <HAL_FLASHEx_Erase+0xd8>)
 8003ad0:	7e1b      	ldrb	r3, [r3, #24]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_FLASHEx_Erase+0x1e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e058      	b.n	8003b8c <HAL_FLASHEx_Erase+0xd0>
 8003ada:	4b2e      	ldr	r3, [pc, #184]	; (8003b94 <HAL_FLASHEx_Erase+0xd8>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ae0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ae4:	f7ff feac 	bl	8003840 <FLASH_WaitForLastOperation>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d148      	bne.n	8003b84 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003af8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d115      	bne.n	8003b2e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f000 f844 	bl	8003b9c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b18:	f7ff fe92 	bl	8003840 <FLASH_WaitForLastOperation>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003b20:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <HAL_FLASHEx_Erase+0xdc>)
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	4a1c      	ldr	r2, [pc, #112]	; (8003b98 <HAL_FLASHEx_Erase+0xdc>)
 8003b26:	f023 0304 	bic.w	r3, r3, #4
 8003b2a:	6113      	str	r3, [r2, #16]
 8003b2c:	e028      	b.n	8003b80 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	e01c      	b.n	8003b70 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	68b8      	ldr	r0, [r7, #8]
 8003b40:	f000 f850 	bl	8003be4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b48:	f7ff fe7a 	bl	8003840 <FLASH_WaitForLastOperation>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_FLASHEx_Erase+0xdc>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	4a10      	ldr	r2, [pc, #64]	; (8003b98 <HAL_FLASHEx_Erase+0xdc>)
 8003b56:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003b5a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	601a      	str	r2, [r3, #0]
          break;
 8003b68:	e00a      	b.n	8003b80 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4413      	add	r3, r2
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d3da      	bcc.n	8003b36 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8003b80:	f000 f878 	bl	8003c74 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <HAL_FLASHEx_Erase+0xd8>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	761a      	strb	r2, [r3, #24]

  return status;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	200009e4 	.word	0x200009e4
 8003b98:	40023c00 	.word	0x40023c00

08003b9c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <FLASH_MassErase+0x44>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <FLASH_MassErase+0x44>)
 8003bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <FLASH_MassErase+0x44>)
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <FLASH_MassErase+0x44>)
 8003bba:	f043 0304 	orr.w	r3, r3, #4
 8003bbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <FLASH_MassErase+0x44>)
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	4a05      	ldr	r2, [pc, #20]	; (8003be0 <FLASH_MassErase+0x44>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6113      	str	r3, [r2, #16]
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40023c00 	.word	0x40023c00

08003be4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d102      	bne.n	8003c00 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	e010      	b.n	8003c22 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d103      	bne.n	8003c0e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e009      	b.n	8003c22 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d103      	bne.n	8003c1c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e002      	b.n	8003c22 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003c1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c22:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <FLASH_Erase_Sector+0x8c>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <FLASH_Erase_Sector+0x8c>)
 8003c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <FLASH_Erase_Sector+0x8c>)
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	490f      	ldr	r1, [pc, #60]	; (8003c70 <FLASH_Erase_Sector+0x8c>)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <FLASH_Erase_Sector+0x8c>)
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <FLASH_Erase_Sector+0x8c>)
 8003c40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003c46:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <FLASH_Erase_Sector+0x8c>)
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <FLASH_Erase_Sector+0x8c>)
 8003c52:	f043 0302 	orr.w	r3, r3, #2
 8003c56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <FLASH_Erase_Sector+0x8c>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <FLASH_Erase_Sector+0x8c>)
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c62:	6113      	str	r3, [r2, #16]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40023c00 	.word	0x40023c00

08003c74 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d017      	beq.n	8003cb4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003c8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c8e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003c96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003ca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ca6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ca8:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cb2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d017      	beq.n	8003cf0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a0d      	ldr	r2, [pc, #52]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cca:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <FLASH_FlushCaches+0x88>)
 8003cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cee:	6013      	str	r3, [r2, #0]
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40023c00 	.word	0x40023c00

08003d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	e165      	b.n	8003fe8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	f040 8154 	bne.w	8003fe2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d00b      	beq.n	8003d5a <HAL_GPIO_Init+0x5a>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d007      	beq.n	8003d5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d4e:	2b11      	cmp	r3, #17
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b12      	cmp	r3, #18
 8003d58:	d130      	bne.n	8003dbc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	2203      	movs	r2, #3
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d90:	2201      	movs	r2, #1
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 0201 	and.w	r2, r3, #1
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0xfc>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b12      	cmp	r3, #18
 8003dfa:	d123      	bne.n	8003e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	08da      	lsrs	r2, r3, #3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3208      	adds	r2, #8
 8003e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	220f      	movs	r2, #15
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	08da      	lsrs	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3208      	adds	r2, #8
 8003e3e:	69b9      	ldr	r1, [r7, #24]
 8003e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	2203      	movs	r2, #3
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0203 	and.w	r2, r3, #3
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80ae 	beq.w	8003fe2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	4b5c      	ldr	r3, [pc, #368]	; (8003ffc <HAL_GPIO_Init+0x2fc>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	4a5b      	ldr	r2, [pc, #364]	; (8003ffc <HAL_GPIO_Init+0x2fc>)
 8003e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e94:	6453      	str	r3, [r2, #68]	; 0x44
 8003e96:	4b59      	ldr	r3, [pc, #356]	; (8003ffc <HAL_GPIO_Init+0x2fc>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ea2:	4a57      	ldr	r2, [pc, #348]	; (8004000 <HAL_GPIO_Init+0x300>)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	220f      	movs	r2, #15
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a4e      	ldr	r2, [pc, #312]	; (8004004 <HAL_GPIO_Init+0x304>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d025      	beq.n	8003f1a <HAL_GPIO_Init+0x21a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a4d      	ldr	r2, [pc, #308]	; (8004008 <HAL_GPIO_Init+0x308>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01f      	beq.n	8003f16 <HAL_GPIO_Init+0x216>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a4c      	ldr	r2, [pc, #304]	; (800400c <HAL_GPIO_Init+0x30c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d019      	beq.n	8003f12 <HAL_GPIO_Init+0x212>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a4b      	ldr	r2, [pc, #300]	; (8004010 <HAL_GPIO_Init+0x310>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_GPIO_Init+0x20e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a4a      	ldr	r2, [pc, #296]	; (8004014 <HAL_GPIO_Init+0x314>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00d      	beq.n	8003f0a <HAL_GPIO_Init+0x20a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a49      	ldr	r2, [pc, #292]	; (8004018 <HAL_GPIO_Init+0x318>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <HAL_GPIO_Init+0x206>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a48      	ldr	r2, [pc, #288]	; (800401c <HAL_GPIO_Init+0x31c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_GPIO_Init+0x202>
 8003efe:	2306      	movs	r3, #6
 8003f00:	e00c      	b.n	8003f1c <HAL_GPIO_Init+0x21c>
 8003f02:	2307      	movs	r3, #7
 8003f04:	e00a      	b.n	8003f1c <HAL_GPIO_Init+0x21c>
 8003f06:	2305      	movs	r3, #5
 8003f08:	e008      	b.n	8003f1c <HAL_GPIO_Init+0x21c>
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	e006      	b.n	8003f1c <HAL_GPIO_Init+0x21c>
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e004      	b.n	8003f1c <HAL_GPIO_Init+0x21c>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e002      	b.n	8003f1c <HAL_GPIO_Init+0x21c>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_GPIO_Init+0x21c>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	f002 0203 	and.w	r2, r2, #3
 8003f22:	0092      	lsls	r2, r2, #2
 8003f24:	4093      	lsls	r3, r2
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f2c:	4934      	ldr	r1, [pc, #208]	; (8004000 <HAL_GPIO_Init+0x300>)
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	089b      	lsrs	r3, r3, #2
 8003f32:	3302      	adds	r3, #2
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f3a:	4b39      	ldr	r3, [pc, #228]	; (8004020 <HAL_GPIO_Init+0x320>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f5e:	4a30      	ldr	r2, [pc, #192]	; (8004020 <HAL_GPIO_Init+0x320>)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f64:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <HAL_GPIO_Init+0x320>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f88:	4a25      	ldr	r2, [pc, #148]	; (8004020 <HAL_GPIO_Init+0x320>)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_GPIO_Init+0x320>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fb2:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <HAL_GPIO_Init+0x320>)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_GPIO_Init+0x320>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fdc:	4a10      	ldr	r2, [pc, #64]	; (8004020 <HAL_GPIO_Init+0x320>)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	2b0f      	cmp	r3, #15
 8003fec:	f67f ae96 	bls.w	8003d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3724      	adds	r7, #36	; 0x24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40013800 	.word	0x40013800
 8004004:	40020000 	.word	0x40020000
 8004008:	40020400 	.word	0x40020400
 800400c:	40020800 	.word	0x40020800
 8004010:	40020c00 	.word	0x40020c00
 8004014:	40021000 	.word	0x40021000
 8004018:	40021400 	.word	0x40021400
 800401c:	40021800 	.word	0x40021800
 8004020:	40013c00 	.word	0x40013c00

08004024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	887b      	ldrh	r3, [r7, #2]
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e001      	b.n	8004046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	807b      	strh	r3, [r7, #2]
 8004060:	4613      	mov	r3, r2
 8004062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004064:	787b      	ldrb	r3, [r7, #1]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004070:	e003      	b.n	800407a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004072:	887b      	ldrh	r3, [r7, #2]
 8004074:	041a      	lsls	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	619a      	str	r2, [r3, #24]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <HAL_PWREx_EnableOverDrive+0x90>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <HAL_PWREx_EnableOverDrive+0x90>)
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	; 0x40
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_PWREx_EnableOverDrive+0x90>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040ae:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_PWREx_EnableOverDrive+0x94>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b4:	f7fe fdf2 	bl	8002c9c <HAL_GetTick>
 80040b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040ba:	e009      	b.n	80040d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040bc:	f7fe fdee 	bl	8002c9c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ca:	d901      	bls.n	80040d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e01f      	b.n	8004110 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040d0:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_PWREx_EnableOverDrive+0x98>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040dc:	d1ee      	bne.n	80040bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040de:	4b11      	ldr	r3, [pc, #68]	; (8004124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e4:	f7fe fdda 	bl	8002c9c <HAL_GetTick>
 80040e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040ea:	e009      	b.n	8004100 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040ec:	f7fe fdd6 	bl	8002c9c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040fa:	d901      	bls.n	8004100 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e007      	b.n	8004110 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <HAL_PWREx_EnableOverDrive+0x98>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800410c:	d1ee      	bne.n	80040ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40023800 	.word	0x40023800
 800411c:	420e0040 	.word	0x420e0040
 8004120:	40007000 	.word	0x40007000
 8004124:	420e0044 	.word	0x420e0044

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0cc      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d90c      	bls.n	8004164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0b8      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800417c:	4b59      	ldr	r3, [pc, #356]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a52      	ldr	r2, [pc, #328]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800419e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	494d      	ldr	r1, [pc, #308]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d044      	beq.n	8004248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d119      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e07f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e06f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e067      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4934      	ldr	r1, [pc, #208]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	4313      	orrs	r3, r2
 8004216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004218:	f7fe fd40 	bl	8002c9c <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	e00a      	b.n	8004236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004220:	f7fe fd3c 	bl	8002c9c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e04f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 020c 	and.w	r2, r3, #12
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	d1eb      	bne.n	8004220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d20c      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e032      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4916      	ldr	r1, [pc, #88]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	490e      	ldr	r1, [pc, #56]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ae:	f000 f855 	bl	800435c <HAL_RCC_GetSysClockFreq>
 80042b2:	4601      	mov	r1, r0
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	4a0a      	ldr	r2, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	5cd3      	ldrb	r3, [r2, r3]
 80042c2:	fa21 f303 	lsr.w	r3, r1, r3
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe fca0 	bl	8002c14 <HAL_InitTick>

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023c00 	.word	0x40023c00
 80042e4:	40023800 	.word	0x40023800
 80042e8:	080094bc 	.word	0x080094bc
 80042ec:	20000000 	.word	0x20000000
 80042f0:	20000008 	.word	0x20000008

080042f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_RCC_GetHCLKFreq+0x14>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000000 	.word	0x20000000

0800430c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004310:	f7ff fff0 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8004314:	4601      	mov	r1, r0
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0a9b      	lsrs	r3, r3, #10
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4a03      	ldr	r2, [pc, #12]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004322:	5cd3      	ldrb	r3, [r2, r3]
 8004324:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	080094cc 	.word	0x080094cc

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004338:	f7ff ffdc 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 800433c:	4601      	mov	r1, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0b5b      	lsrs	r3, r3, #13
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4a03      	ldr	r2, [pc, #12]	; (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800434a:	5cd3      	ldrb	r3, [r2, r3]
 800434c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	080094cc 	.word	0x080094cc

0800435c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800435c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004376:	4bc6      	ldr	r3, [pc, #792]	; (8004690 <HAL_RCC_GetSysClockFreq+0x334>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b0c      	cmp	r3, #12
 8004380:	f200 817e 	bhi.w	8004680 <HAL_RCC_GetSysClockFreq+0x324>
 8004384:	a201      	add	r2, pc, #4	; (adr r2, 800438c <HAL_RCC_GetSysClockFreq+0x30>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	080043c1 	.word	0x080043c1
 8004390:	08004681 	.word	0x08004681
 8004394:	08004681 	.word	0x08004681
 8004398:	08004681 	.word	0x08004681
 800439c:	080043c7 	.word	0x080043c7
 80043a0:	08004681 	.word	0x08004681
 80043a4:	08004681 	.word	0x08004681
 80043a8:	08004681 	.word	0x08004681
 80043ac:	080043cd 	.word	0x080043cd
 80043b0:	08004681 	.word	0x08004681
 80043b4:	08004681 	.word	0x08004681
 80043b8:	08004681 	.word	0x08004681
 80043bc:	08004529 	.word	0x08004529
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043c0:	4bb4      	ldr	r3, [pc, #720]	; (8004694 <HAL_RCC_GetSysClockFreq+0x338>)
 80043c2:	613b      	str	r3, [r7, #16]
       break;
 80043c4:	e15f      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043c6:	4bb4      	ldr	r3, [pc, #720]	; (8004698 <HAL_RCC_GetSysClockFreq+0x33c>)
 80043c8:	613b      	str	r3, [r7, #16]
      break;
 80043ca:	e15c      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043cc:	4bb0      	ldr	r3, [pc, #704]	; (8004690 <HAL_RCC_GetSysClockFreq+0x334>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043d6:	4bae      	ldr	r3, [pc, #696]	; (8004690 <HAL_RCC_GetSysClockFreq+0x334>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d04a      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e2:	4bab      	ldr	r3, [pc, #684]	; (8004690 <HAL_RCC_GetSysClockFreq+0x334>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	f04f 0400 	mov.w	r4, #0
 80043ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	ea03 0501 	and.w	r5, r3, r1
 80043f8:	ea04 0602 	and.w	r6, r4, r2
 80043fc:	4629      	mov	r1, r5
 80043fe:	4632      	mov	r2, r6
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	f04f 0400 	mov.w	r4, #0
 8004408:	0154      	lsls	r4, r2, #5
 800440a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800440e:	014b      	lsls	r3, r1, #5
 8004410:	4619      	mov	r1, r3
 8004412:	4622      	mov	r2, r4
 8004414:	1b49      	subs	r1, r1, r5
 8004416:	eb62 0206 	sbc.w	r2, r2, r6
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	f04f 0400 	mov.w	r4, #0
 8004422:	0194      	lsls	r4, r2, #6
 8004424:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004428:	018b      	lsls	r3, r1, #6
 800442a:	1a5b      	subs	r3, r3, r1
 800442c:	eb64 0402 	sbc.w	r4, r4, r2
 8004430:	f04f 0100 	mov.w	r1, #0
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	00e2      	lsls	r2, r4, #3
 800443a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800443e:	00d9      	lsls	r1, r3, #3
 8004440:	460b      	mov	r3, r1
 8004442:	4614      	mov	r4, r2
 8004444:	195b      	adds	r3, r3, r5
 8004446:	eb44 0406 	adc.w	r4, r4, r6
 800444a:	f04f 0100 	mov.w	r1, #0
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	0262      	lsls	r2, r4, #9
 8004454:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004458:	0259      	lsls	r1, r3, #9
 800445a:	460b      	mov	r3, r1
 800445c:	4614      	mov	r4, r2
 800445e:	4618      	mov	r0, r3
 8004460:	4621      	mov	r1, r4
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f04f 0400 	mov.w	r4, #0
 8004468:	461a      	mov	r2, r3
 800446a:	4623      	mov	r3, r4
 800446c:	f7fb feca 	bl	8000204 <__aeabi_uldivmod>
 8004470:	4603      	mov	r3, r0
 8004472:	460c      	mov	r4, r1
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e049      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004478:	4b85      	ldr	r3, [pc, #532]	; (8004690 <HAL_RCC_GetSysClockFreq+0x334>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	099b      	lsrs	r3, r3, #6
 800447e:	f04f 0400 	mov.w	r4, #0
 8004482:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	ea03 0501 	and.w	r5, r3, r1
 800448e:	ea04 0602 	and.w	r6, r4, r2
 8004492:	4629      	mov	r1, r5
 8004494:	4632      	mov	r2, r6
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	f04f 0400 	mov.w	r4, #0
 800449e:	0154      	lsls	r4, r2, #5
 80044a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044a4:	014b      	lsls	r3, r1, #5
 80044a6:	4619      	mov	r1, r3
 80044a8:	4622      	mov	r2, r4
 80044aa:	1b49      	subs	r1, r1, r5
 80044ac:	eb62 0206 	sbc.w	r2, r2, r6
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	f04f 0400 	mov.w	r4, #0
 80044b8:	0194      	lsls	r4, r2, #6
 80044ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044be:	018b      	lsls	r3, r1, #6
 80044c0:	1a5b      	subs	r3, r3, r1
 80044c2:	eb64 0402 	sbc.w	r4, r4, r2
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	00e2      	lsls	r2, r4, #3
 80044d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044d4:	00d9      	lsls	r1, r3, #3
 80044d6:	460b      	mov	r3, r1
 80044d8:	4614      	mov	r4, r2
 80044da:	195b      	adds	r3, r3, r5
 80044dc:	eb44 0406 	adc.w	r4, r4, r6
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	02a2      	lsls	r2, r4, #10
 80044ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80044ee:	0299      	lsls	r1, r3, #10
 80044f0:	460b      	mov	r3, r1
 80044f2:	4614      	mov	r4, r2
 80044f4:	4618      	mov	r0, r3
 80044f6:	4621      	mov	r1, r4
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f04f 0400 	mov.w	r4, #0
 80044fe:	461a      	mov	r2, r3
 8004500:	4623      	mov	r3, r4
 8004502:	f7fb fe7f 	bl	8000204 <__aeabi_uldivmod>
 8004506:	4603      	mov	r3, r0
 8004508:	460c      	mov	r4, r1
 800450a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800450c:	4b60      	ldr	r3, [pc, #384]	; (8004690 <HAL_RCC_GetSysClockFreq+0x334>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	3301      	adds	r3, #1
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	613b      	str	r3, [r7, #16]
      break;
 8004526:	e0ae      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004528:	4b59      	ldr	r3, [pc, #356]	; (8004690 <HAL_RCC_GetSysClockFreq+0x334>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004530:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004532:	4b57      	ldr	r3, [pc, #348]	; (8004690 <HAL_RCC_GetSysClockFreq+0x334>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d04a      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453e:	4b54      	ldr	r3, [pc, #336]	; (8004690 <HAL_RCC_GetSysClockFreq+0x334>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	f04f 0400 	mov.w	r4, #0
 8004548:	f240 11ff 	movw	r1, #511	; 0x1ff
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	ea03 0501 	and.w	r5, r3, r1
 8004554:	ea04 0602 	and.w	r6, r4, r2
 8004558:	4629      	mov	r1, r5
 800455a:	4632      	mov	r2, r6
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	f04f 0400 	mov.w	r4, #0
 8004564:	0154      	lsls	r4, r2, #5
 8004566:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800456a:	014b      	lsls	r3, r1, #5
 800456c:	4619      	mov	r1, r3
 800456e:	4622      	mov	r2, r4
 8004570:	1b49      	subs	r1, r1, r5
 8004572:	eb62 0206 	sbc.w	r2, r2, r6
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	f04f 0400 	mov.w	r4, #0
 800457e:	0194      	lsls	r4, r2, #6
 8004580:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004584:	018b      	lsls	r3, r1, #6
 8004586:	1a5b      	subs	r3, r3, r1
 8004588:	eb64 0402 	sbc.w	r4, r4, r2
 800458c:	f04f 0100 	mov.w	r1, #0
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	00e2      	lsls	r2, r4, #3
 8004596:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800459a:	00d9      	lsls	r1, r3, #3
 800459c:	460b      	mov	r3, r1
 800459e:	4614      	mov	r4, r2
 80045a0:	195b      	adds	r3, r3, r5
 80045a2:	eb44 0406 	adc.w	r4, r4, r6
 80045a6:	f04f 0100 	mov.w	r1, #0
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	0262      	lsls	r2, r4, #9
 80045b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80045b4:	0259      	lsls	r1, r3, #9
 80045b6:	460b      	mov	r3, r1
 80045b8:	4614      	mov	r4, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	4621      	mov	r1, r4
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f04f 0400 	mov.w	r4, #0
 80045c4:	461a      	mov	r2, r3
 80045c6:	4623      	mov	r3, r4
 80045c8:	f7fb fe1c 	bl	8000204 <__aeabi_uldivmod>
 80045cc:	4603      	mov	r3, r0
 80045ce:	460c      	mov	r4, r1
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e049      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d4:	4b2e      	ldr	r3, [pc, #184]	; (8004690 <HAL_RCC_GetSysClockFreq+0x334>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	099b      	lsrs	r3, r3, #6
 80045da:	f04f 0400 	mov.w	r4, #0
 80045de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	ea03 0501 	and.w	r5, r3, r1
 80045ea:	ea04 0602 	and.w	r6, r4, r2
 80045ee:	4629      	mov	r1, r5
 80045f0:	4632      	mov	r2, r6
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	f04f 0400 	mov.w	r4, #0
 80045fa:	0154      	lsls	r4, r2, #5
 80045fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004600:	014b      	lsls	r3, r1, #5
 8004602:	4619      	mov	r1, r3
 8004604:	4622      	mov	r2, r4
 8004606:	1b49      	subs	r1, r1, r5
 8004608:	eb62 0206 	sbc.w	r2, r2, r6
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	f04f 0400 	mov.w	r4, #0
 8004614:	0194      	lsls	r4, r2, #6
 8004616:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800461a:	018b      	lsls	r3, r1, #6
 800461c:	1a5b      	subs	r3, r3, r1
 800461e:	eb64 0402 	sbc.w	r4, r4, r2
 8004622:	f04f 0100 	mov.w	r1, #0
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	00e2      	lsls	r2, r4, #3
 800462c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004630:	00d9      	lsls	r1, r3, #3
 8004632:	460b      	mov	r3, r1
 8004634:	4614      	mov	r4, r2
 8004636:	195b      	adds	r3, r3, r5
 8004638:	eb44 0406 	adc.w	r4, r4, r6
 800463c:	f04f 0100 	mov.w	r1, #0
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	02a2      	lsls	r2, r4, #10
 8004646:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800464a:	0299      	lsls	r1, r3, #10
 800464c:	460b      	mov	r3, r1
 800464e:	4614      	mov	r4, r2
 8004650:	4618      	mov	r0, r3
 8004652:	4621      	mov	r1, r4
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f04f 0400 	mov.w	r4, #0
 800465a:	461a      	mov	r2, r3
 800465c:	4623      	mov	r3, r4
 800465e:	f7fb fdd1 	bl	8000204 <__aeabi_uldivmod>
 8004662:	4603      	mov	r3, r0
 8004664:	460c      	mov	r4, r1
 8004666:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004668:	4b09      	ldr	r3, [pc, #36]	; (8004690 <HAL_RCC_GetSysClockFreq+0x334>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	0f1b      	lsrs	r3, r3, #28
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	613b      	str	r3, [r7, #16]
      break;
 800467e:	e002      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004680:	4b04      	ldr	r3, [pc, #16]	; (8004694 <HAL_RCC_GetSysClockFreq+0x338>)
 8004682:	613b      	str	r3, [r7, #16]
      break;
 8004684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004686:	693b      	ldr	r3, [r7, #16]
}
 8004688:	4618      	mov	r0, r3
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004690:	40023800 	.word	0x40023800
 8004694:	00f42400 	.word	0x00f42400
 8004698:	007a1200 	.word	0x007a1200

0800469c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8083 	beq.w	80047bc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046b6:	4b95      	ldr	r3, [pc, #596]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d019      	beq.n	80046f6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046c2:	4b92      	ldr	r3, [pc, #584]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d106      	bne.n	80046dc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046ce:	4b8f      	ldr	r3, [pc, #572]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046da:	d00c      	beq.n	80046f6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046dc:	4b8b      	ldr	r3, [pc, #556]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046e4:	2b0c      	cmp	r3, #12
 80046e6:	d112      	bne.n	800470e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e8:	4b88      	ldr	r3, [pc, #544]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f4:	d10b      	bne.n	800470e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f6:	4b85      	ldr	r3, [pc, #532]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d05b      	beq.n	80047ba <HAL_RCC_OscConfig+0x11e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d157      	bne.n	80047ba <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e216      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004716:	d106      	bne.n	8004726 <HAL_RCC_OscConfig+0x8a>
 8004718:	4b7c      	ldr	r3, [pc, #496]	; (800490c <HAL_RCC_OscConfig+0x270>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a7b      	ldr	r2, [pc, #492]	; (800490c <HAL_RCC_OscConfig+0x270>)
 800471e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	e01d      	b.n	8004762 <HAL_RCC_OscConfig+0xc6>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800472e:	d10c      	bne.n	800474a <HAL_RCC_OscConfig+0xae>
 8004730:	4b76      	ldr	r3, [pc, #472]	; (800490c <HAL_RCC_OscConfig+0x270>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a75      	ldr	r2, [pc, #468]	; (800490c <HAL_RCC_OscConfig+0x270>)
 8004736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	4b73      	ldr	r3, [pc, #460]	; (800490c <HAL_RCC_OscConfig+0x270>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a72      	ldr	r2, [pc, #456]	; (800490c <HAL_RCC_OscConfig+0x270>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e00b      	b.n	8004762 <HAL_RCC_OscConfig+0xc6>
 800474a:	4b70      	ldr	r3, [pc, #448]	; (800490c <HAL_RCC_OscConfig+0x270>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6f      	ldr	r2, [pc, #444]	; (800490c <HAL_RCC_OscConfig+0x270>)
 8004750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b6d      	ldr	r3, [pc, #436]	; (800490c <HAL_RCC_OscConfig+0x270>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6c      	ldr	r2, [pc, #432]	; (800490c <HAL_RCC_OscConfig+0x270>)
 800475c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004760:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d013      	beq.n	8004792 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476a:	f7fe fa97 	bl	8002c9c <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004772:	f7fe fa93 	bl	8002c9c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b64      	cmp	r3, #100	; 0x64
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e1db      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004784:	4b61      	ldr	r3, [pc, #388]	; (800490c <HAL_RCC_OscConfig+0x270>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0xd6>
 8004790:	e014      	b.n	80047bc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fe fa83 	bl	8002c9c <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479a:	f7fe fa7f 	bl	8002c9c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b64      	cmp	r3, #100	; 0x64
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1c7      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ac:	4b57      	ldr	r3, [pc, #348]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0xfe>
 80047b8:	e000      	b.n	80047bc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d06f      	beq.n	80048a8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047c8:	4b50      	ldr	r3, [pc, #320]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 030c 	and.w	r3, r3, #12
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d017      	beq.n	8004804 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047d4:	4b4d      	ldr	r3, [pc, #308]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d105      	bne.n	80047ec <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047e0:	4b4a      	ldr	r3, [pc, #296]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00b      	beq.n	8004804 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ec:	4b47      	ldr	r3, [pc, #284]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047f4:	2b0c      	cmp	r3, #12
 80047f6:	d11c      	bne.n	8004832 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f8:	4b44      	ldr	r3, [pc, #272]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d116      	bne.n	8004832 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004804:	4b41      	ldr	r3, [pc, #260]	; (800490c <HAL_RCC_OscConfig+0x270>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_OscConfig+0x180>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e18f      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481c:	4b3b      	ldr	r3, [pc, #236]	; (800490c <HAL_RCC_OscConfig+0x270>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4938      	ldr	r1, [pc, #224]	; (800490c <HAL_RCC_OscConfig+0x270>)
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004830:	e03a      	b.n	80048a8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d020      	beq.n	800487c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483a:	4b35      	ldr	r3, [pc, #212]	; (8004910 <HAL_RCC_OscConfig+0x274>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004840:	f7fe fa2c 	bl	8002c9c <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004848:	f7fe fa28 	bl	8002c9c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e170      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485a:	4b2c      	ldr	r3, [pc, #176]	; (800490c <HAL_RCC_OscConfig+0x270>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004866:	4b29      	ldr	r3, [pc, #164]	; (800490c <HAL_RCC_OscConfig+0x270>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4925      	ldr	r1, [pc, #148]	; (800490c <HAL_RCC_OscConfig+0x270>)
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]
 800487a:	e015      	b.n	80048a8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487c:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_RCC_OscConfig+0x274>)
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fe fa0b 	bl	8002c9c <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800488a:	f7fe fa07 	bl	8002c9c <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e14f      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489c:	4b1b      	ldr	r3, [pc, #108]	; (800490c <HAL_RCC_OscConfig+0x270>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f0      	bne.n	800488a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d037      	beq.n	8004924 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d016      	beq.n	80048ea <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048bc:	4b15      	ldr	r3, [pc, #84]	; (8004914 <HAL_RCC_OscConfig+0x278>)
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c2:	f7fe f9eb 	bl	8002c9c <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ca:	f7fe f9e7 	bl	8002c9c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e12f      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048dc:	4b0b      	ldr	r3, [pc, #44]	; (800490c <HAL_RCC_OscConfig+0x270>)
 80048de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x22e>
 80048e8:	e01c      	b.n	8004924 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <HAL_RCC_OscConfig+0x278>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fe f9d4 	bl	8002c9c <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f6:	e00f      	b.n	8004918 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f8:	f7fe f9d0 	bl	8002c9c <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d908      	bls.n	8004918 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e118      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800
 8004910:	42470000 	.word	0x42470000
 8004914:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004918:	4b8a      	ldr	r3, [pc, #552]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 800491a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e9      	bne.n	80048f8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8097 	beq.w	8004a60 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004936:	4b83      	ldr	r3, [pc, #524]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	4b7f      	ldr	r3, [pc, #508]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	4a7e      	ldr	r2, [pc, #504]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 800494c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004950:	6413      	str	r3, [r2, #64]	; 0x40
 8004952:	4b7c      	ldr	r3, [pc, #496]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800495e:	2301      	movs	r3, #1
 8004960:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004962:	4b79      	ldr	r3, [pc, #484]	; (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d118      	bne.n	80049a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800496e:	4b76      	ldr	r3, [pc, #472]	; (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a75      	ldr	r2, [pc, #468]	; (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497a:	f7fe f98f 	bl	8002c9c <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004982:	f7fe f98b 	bl	8002c9c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e0d3      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	4b6c      	ldr	r3, [pc, #432]	; (8004b48 <HAL_RCC_OscConfig+0x4ac>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d106      	bne.n	80049b6 <HAL_RCC_OscConfig+0x31a>
 80049a8:	4b66      	ldr	r3, [pc, #408]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	4a65      	ldr	r2, [pc, #404]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6713      	str	r3, [r2, #112]	; 0x70
 80049b4:	e01c      	b.n	80049f0 <HAL_RCC_OscConfig+0x354>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b05      	cmp	r3, #5
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x33c>
 80049be:	4b61      	ldr	r3, [pc, #388]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a60      	ldr	r2, [pc, #384]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 80049c4:	f043 0304 	orr.w	r3, r3, #4
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ca:	4b5e      	ldr	r3, [pc, #376]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	4a5d      	ldr	r2, [pc, #372]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6713      	str	r3, [r2, #112]	; 0x70
 80049d6:	e00b      	b.n	80049f0 <HAL_RCC_OscConfig+0x354>
 80049d8:	4b5a      	ldr	r3, [pc, #360]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	4a59      	ldr	r2, [pc, #356]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	6713      	str	r3, [r2, #112]	; 0x70
 80049e4:	4b57      	ldr	r3, [pc, #348]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	4a56      	ldr	r2, [pc, #344]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 80049ea:	f023 0304 	bic.w	r3, r3, #4
 80049ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d015      	beq.n	8004a24 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fe f950 	bl	8002c9c <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fe f94c 	bl	8002c9c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e092      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a16:	4b4b      	ldr	r3, [pc, #300]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0ee      	beq.n	8004a00 <HAL_RCC_OscConfig+0x364>
 8004a22:	e014      	b.n	8004a4e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fe f93a 	bl	8002c9c <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a2c:	f7fe f936 	bl	8002c9c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e07c      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a42:	4b40      	ldr	r3, [pc, #256]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1ee      	bne.n	8004a2c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d105      	bne.n	8004a60 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a54:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	4a3a      	ldr	r2, [pc, #232]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d068      	beq.n	8004b3a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a68:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d060      	beq.n	8004b36 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d145      	bne.n	8004b08 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <HAL_RCC_OscConfig+0x4b0>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a82:	f7fe f90b 	bl	8002c9c <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8a:	f7fe f907 	bl	8002c9c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e04f      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9c:	4b29      	ldr	r3, [pc, #164]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	019b      	lsls	r3, r3, #6
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	061b      	lsls	r3, r3, #24
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	071b      	lsls	r3, r3, #28
 8004ad4:	491b      	ldr	r1, [pc, #108]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ada:	4b1c      	ldr	r3, [pc, #112]	; (8004b4c <HAL_RCC_OscConfig+0x4b0>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fe f8dc 	bl	8002c9c <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fe f8d8 	bl	8002c9c <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e020      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x44c>
 8004b06:	e018      	b.n	8004b3a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b08:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <HAL_RCC_OscConfig+0x4b0>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0e:	f7fe f8c5 	bl	8002c9c <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fe f8c1 	bl	8002c9c <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e009      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_RCC_OscConfig+0x4a8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <HAL_RCC_OscConfig+0x47a>
 8004b34:	e001      	b.n	8004b3a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40007000 	.word	0x40007000
 8004b4c:	42470060 	.word	0x42470060

08004b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e056      	b.n	8004c10 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fc ff13 	bl	80019a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	ea42 0103 	orr.w	r1, r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	0c1b      	lsrs	r3, r3, #16
 8004be0:	f003 0104 	and.w	r1, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_SPI_Transmit+0x22>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e11e      	b.n	8004e78 <HAL_SPI_Transmit+0x260>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c42:	f7fe f82b 	bl	8002c9c <HAL_GetTick>
 8004c46:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c48:	88fb      	ldrh	r3, [r7, #6]
 8004c4a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d002      	beq.n	8004c5e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c5c:	e103      	b.n	8004e66 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_SPI_Transmit+0x52>
 8004c64:	88fb      	ldrh	r3, [r7, #6]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c6e:	e0fa      	b.n	8004e66 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2203      	movs	r2, #3
 8004c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	88fa      	ldrh	r2, [r7, #6]
 8004c88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb6:	d107      	bne.n	8004cc8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d007      	beq.n	8004ce6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cee:	d14b      	bne.n	8004d88 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_SPI_Transmit+0xe6>
 8004cf8:	8afb      	ldrh	r3, [r7, #22]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d13e      	bne.n	8004d7c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	881a      	ldrh	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	1c9a      	adds	r2, r3, #2
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d22:	e02b      	b.n	8004d7c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d112      	bne.n	8004d58 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	881a      	ldrh	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d56:	e011      	b.n	8004d7c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d58:	f7fd ffa0 	bl	8002c9c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d803      	bhi.n	8004d70 <HAL_SPI_Transmit+0x158>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d6e:	d102      	bne.n	8004d76 <HAL_SPI_Transmit+0x15e>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d7a:	e074      	b.n	8004e66 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1ce      	bne.n	8004d24 <HAL_SPI_Transmit+0x10c>
 8004d86:	e04c      	b.n	8004e22 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <HAL_SPI_Transmit+0x17e>
 8004d90:	8afb      	ldrh	r3, [r7, #22]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d140      	bne.n	8004e18 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	330c      	adds	r3, #12
 8004da0:	7812      	ldrb	r2, [r2, #0]
 8004da2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004dbc:	e02c      	b.n	8004e18 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d113      	bne.n	8004df4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	7812      	ldrb	r2, [r2, #0]
 8004dd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004df2:	e011      	b.n	8004e18 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df4:	f7fd ff52 	bl	8002c9c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d803      	bhi.n	8004e0c <HAL_SPI_Transmit+0x1f4>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e0a:	d102      	bne.n	8004e12 <HAL_SPI_Transmit+0x1fa>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e16:	e026      	b.n	8004e66 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1cd      	bne.n	8004dbe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fcc4 	bl	80057b4 <SPI_EndRxTxTransaction>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e000      	b.n	8004e66 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004e64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e76:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3720      	adds	r7, #32
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9c:	d112      	bne.n	8004ec4 <HAL_SPI_Receive+0x44>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004eae:	88fa      	ldrh	r2, [r7, #6]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f8e9 	bl	8005092 <HAL_SPI_TransmitReceive>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	e0e2      	b.n	800508a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_SPI_Receive+0x52>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e0db      	b.n	800508a <HAL_SPI_Receive+0x20a>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eda:	f7fd fedf 	bl	8002c9c <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d002      	beq.n	8004ef2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004eec:	2302      	movs	r3, #2
 8004eee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ef0:	e0c2      	b.n	8005078 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <HAL_SPI_Receive+0x7e>
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f02:	e0b9      	b.n	8005078 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2204      	movs	r2, #4
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	88fa      	ldrh	r2, [r7, #6]
 8004f1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	88fa      	ldrh	r2, [r7, #6]
 8004f22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4a:	d107      	bne.n	8004f5c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f66:	2b40      	cmp	r3, #64	; 0x40
 8004f68:	d007      	beq.n	8004f7a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d162      	bne.n	8005048 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f82:	e02e      	b.n	8004fe2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d115      	bne.n	8004fbe <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f103 020c 	add.w	r2, r3, #12
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	7812      	ldrb	r2, [r2, #0]
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fbc:	e011      	b.n	8004fe2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fbe:	f7fd fe6d 	bl	8002c9c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d803      	bhi.n	8004fd6 <HAL_SPI_Receive+0x156>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd4:	d102      	bne.n	8004fdc <HAL_SPI_Receive+0x15c>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fe0:	e04a      	b.n	8005078 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1cb      	bne.n	8004f84 <HAL_SPI_Receive+0x104>
 8004fec:	e031      	b.n	8005052 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d113      	bne.n	8005024 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	b292      	uxth	r2, r2
 8005008:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005022:	e011      	b.n	8005048 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005024:	f7fd fe3a 	bl	8002c9c <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d803      	bhi.n	800503c <HAL_SPI_Receive+0x1bc>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800503a:	d102      	bne.n	8005042 <HAL_SPI_Receive+0x1c2>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005046:	e017      	b.n	8005078 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1cd      	bne.n	8004fee <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	6839      	ldr	r1, [r7, #0]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 fb46 	bl	80056e8 <SPI_EndRxTransaction>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	75fb      	strb	r3, [r7, #23]
 8005074:	e000      	b.n	8005078 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005076:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005088:	7dfb      	ldrb	r3, [r7, #23]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b08c      	sub	sp, #48	; 0x30
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	607a      	str	r2, [r7, #4]
 800509e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050a0:	2301      	movs	r3, #1
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x26>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e18a      	b.n	80053ce <HAL_SPI_TransmitReceive+0x33c>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050c0:	f7fd fdec 	bl	8002c9c <HAL_GetTick>
 80050c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050d6:	887b      	ldrh	r3, [r7, #2]
 80050d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d00f      	beq.n	8005102 <HAL_SPI_TransmitReceive+0x70>
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e8:	d107      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x68>
 80050f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d003      	beq.n	8005102 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050fa:	2302      	movs	r3, #2
 80050fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005100:	e15b      	b.n	80053ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x82>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x82>
 800510e:	887b      	ldrh	r3, [r7, #2]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d103      	bne.n	800511c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800511a:	e14e      	b.n	80053ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b04      	cmp	r3, #4
 8005126:	d003      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2205      	movs	r2, #5
 800512c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	887a      	ldrh	r2, [r7, #2]
 8005140:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	887a      	ldrh	r2, [r7, #2]
 8005146:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	887a      	ldrh	r2, [r7, #2]
 8005152:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	887a      	ldrh	r2, [r7, #2]
 8005158:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b40      	cmp	r3, #64	; 0x40
 8005172:	d007      	beq.n	8005184 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005182:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518c:	d178      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_SPI_TransmitReceive+0x10a>
 8005196:	8b7b      	ldrh	r3, [r7, #26]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d166      	bne.n	800526a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	881a      	ldrh	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	1c9a      	adds	r2, r3, #2
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051c0:	e053      	b.n	800526a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d11b      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x176>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d016      	beq.n	8005208 <HAL_SPI_TransmitReceive+0x176>
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d113      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	881a      	ldrh	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	1c9a      	adds	r2, r3, #2
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b01      	cmp	r3, #1
 8005214:	d119      	bne.n	800524a <HAL_SPI_TransmitReceive+0x1b8>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d014      	beq.n	800524a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	b292      	uxth	r2, r2
 800522c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	1c9a      	adds	r2, r3, #2
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005246:	2301      	movs	r3, #1
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800524a:	f7fd fd27 	bl	8002c9c <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005256:	429a      	cmp	r2, r3
 8005258:	d807      	bhi.n	800526a <HAL_SPI_TransmitReceive+0x1d8>
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005260:	d003      	beq.n	800526a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005268:	e0a7      	b.n	80053ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1a6      	bne.n	80051c2 <HAL_SPI_TransmitReceive+0x130>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1a1      	bne.n	80051c2 <HAL_SPI_TransmitReceive+0x130>
 800527e:	e07c      	b.n	800537a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_SPI_TransmitReceive+0x1fc>
 8005288:	8b7b      	ldrh	r3, [r7, #26]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d16b      	bne.n	8005366 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	7812      	ldrb	r2, [r2, #0]
 800529a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b4:	e057      	b.n	8005366 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d11c      	bne.n	80052fe <HAL_SPI_TransmitReceive+0x26c>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d017      	beq.n	80052fe <HAL_SPI_TransmitReceive+0x26c>
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d114      	bne.n	80052fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	7812      	ldrb	r2, [r2, #0]
 80052e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b01      	cmp	r3, #1
 800530a:	d119      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x2ae>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d014      	beq.n	8005340 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800533c:	2301      	movs	r3, #1
 800533e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005340:	f7fd fcac 	bl	8002c9c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800534c:	429a      	cmp	r2, r3
 800534e:	d803      	bhi.n	8005358 <HAL_SPI_TransmitReceive+0x2c6>
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005356:	d102      	bne.n	800535e <HAL_SPI_TransmitReceive+0x2cc>
 8005358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005364:	e029      	b.n	80053ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1a2      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x224>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d19d      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800537a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fa18 	bl	80057b4 <SPI_EndRxTxTransaction>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d006      	beq.n	8005398 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005396:	e010      	b.n	80053ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10b      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	e000      	b.n	80053ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3730      	adds	r7, #48	; 0x30
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	099b      	lsrs	r3, r3, #6
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10f      	bne.n	800541c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	099b      	lsrs	r3, r3, #6
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
    return;
 800541a:	e0d8      	b.n	80055ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_SPI_IRQHandler+0x66>
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	09db      	lsrs	r3, r3, #7
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
    return;
 800543c:	e0c7      	b.n	80055ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10c      	bne.n	8005464 <HAL_SPI_IRQHandler+0x8c>
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	099b      	lsrs	r3, r3, #6
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80b5 	beq.w	80055ce <HAL_SPI_IRQHandler+0x1f6>
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80ae 	beq.w	80055ce <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	099b      	lsrs	r3, r3, #6
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d023      	beq.n	80054c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b03      	cmp	r3, #3
 8005488:	d011      	beq.n	80054ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f043 0204 	orr.w	r2, r3, #4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	e00b      	b.n	80054c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	693b      	ldr	r3, [r7, #16]
        return;
 80054c4:	e083      	b.n	80055ce <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d014      	beq.n	80054fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	f043 0201 	orr.w	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	0a1b      	lsrs	r3, r3, #8
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00c      	beq.n	8005522 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550c:	f043 0208 	orr.w	r2, r3, #8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005514:	2300      	movs	r3, #0
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	2b00      	cmp	r3, #0
 8005528:	d050      	beq.n	80055cc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005538:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d104      	bne.n	8005556 <HAL_SPI_IRQHandler+0x17e>
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d034      	beq.n	80055c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0203 	bic.w	r2, r2, #3
 8005564:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d011      	beq.n	8005592 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005572:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <HAL_SPI_IRQHandler+0x1fc>)
 8005574:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557a:	4618      	mov	r0, r3
 800557c:	f7fd fe44 	bl	8003208 <HAL_DMA_Abort_IT>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005596:	2b00      	cmp	r3, #0
 8005598:	d016      	beq.n	80055c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559e:	4a0d      	ldr	r2, [pc, #52]	; (80055d4 <HAL_SPI_IRQHandler+0x1fc>)
 80055a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fd fe2e 	bl	8003208 <HAL_DMA_Abort_IT>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80055be:	e003      	b.n	80055c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f809 	bl	80055d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80055c6:	e000      	b.n	80055ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80055c8:	bf00      	nop
    return;
 80055ca:	bf00      	nop
 80055cc:	bf00      	nop
  }
}
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	080055ed 	.word	0x080055ed

080055d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff ffe6 	bl	80055d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005624:	e04c      	b.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800562c:	d048      	beq.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800562e:	f7fd fb35 	bl	8002c9c <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d902      	bls.n	8005644 <SPI_WaitFlagStateUntilTimeout+0x30>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d13d      	bne.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005652:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800565c:	d111      	bne.n	8005682 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005666:	d004      	beq.n	8005672 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005670:	d107      	bne.n	8005682 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005680:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568a:	d10f      	bne.n	80056ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e00f      	b.n	80056e0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4013      	ands	r3, r2
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d1a3      	bne.n	8005626 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056fc:	d111      	bne.n	8005722 <SPI_EndRxTransaction+0x3a>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005706:	d004      	beq.n	8005712 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005710:	d107      	bne.n	8005722 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005720:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800572a:	d12a      	bne.n	8005782 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005734:	d012      	beq.n	800575c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2200      	movs	r2, #0
 800573e:	2180      	movs	r1, #128	; 0x80
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff ff67 	bl	8005614 <SPI_WaitFlagStateUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02d      	beq.n	80057a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005750:	f043 0220 	orr.w	r2, r3, #32
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e026      	b.n	80057aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	2101      	movs	r1, #1
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff ff54 	bl	8005614 <SPI_WaitFlagStateUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01a      	beq.n	80057a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005776:	f043 0220 	orr.w	r2, r3, #32
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e013      	b.n	80057aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2200      	movs	r2, #0
 800578a:	2101      	movs	r1, #1
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff ff41 	bl	8005614 <SPI_WaitFlagStateUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e000      	b.n	80057aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057c0:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <SPI_EndRxTxTransaction+0x7c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1b      	ldr	r2, [pc, #108]	; (8005834 <SPI_EndRxTxTransaction+0x80>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	0d5b      	lsrs	r3, r3, #21
 80057cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057d0:	fb02 f303 	mul.w	r3, r2, r3
 80057d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057de:	d112      	bne.n	8005806 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2200      	movs	r2, #0
 80057e8:	2180      	movs	r1, #128	; 0x80
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff ff12 	bl	8005614 <SPI_WaitFlagStateUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d016      	beq.n	8005824 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fa:	f043 0220 	orr.w	r2, r3, #32
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e00f      	b.n	8005826 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	3b01      	subs	r3, #1
 8005810:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581c:	2b80      	cmp	r3, #128	; 0x80
 800581e:	d0f2      	beq.n	8005806 <SPI_EndRxTxTransaction+0x52>
 8005820:	e000      	b.n	8005824 <SPI_EndRxTxTransaction+0x70>
        break;
 8005822:	bf00      	nop
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000000 	.word	0x20000000
 8005834:	165e9f81 	.word	0x165e9f81

08005838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e01d      	b.n	8005886 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fc f95a 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f000 f988 	bl	8005b8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800588e:	b480      	push	{r7}
 8005890:	b085      	sub	sp, #20
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b06      	cmp	r3, #6
 80058b6:	d007      	beq.n	80058c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0201 	bic.w	r2, r2, #1
 80058ec:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a1a      	ldr	r2, [r3, #32]
 80058f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10f      	bne.n	800591e <HAL_TIM_Base_Stop_IT+0x48>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a1a      	ldr	r2, [r3, #32]
 8005904:	f240 4344 	movw	r3, #1092	; 0x444
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d107      	bne.n	800591e <HAL_TIM_Base_Stop_IT+0x48>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b02      	cmp	r3, #2
 8005940:	d122      	bne.n	8005988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b02      	cmp	r3, #2
 800594e:	d11b      	bne.n	8005988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0202 	mvn.w	r2, #2
 8005958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f8ee 	bl	8005b50 <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f8e0 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f8f1 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b04      	cmp	r3, #4
 8005994:	d122      	bne.n	80059dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d11b      	bne.n	80059dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0204 	mvn.w	r2, #4
 80059ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f8c4 	bl	8005b50 <HAL_TIM_IC_CaptureCallback>
 80059c8:	e005      	b.n	80059d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f8b6 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f8c7 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d122      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d11b      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0208 	mvn.w	r2, #8
 8005a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2204      	movs	r2, #4
 8005a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f89a 	bl	8005b50 <HAL_TIM_IC_CaptureCallback>
 8005a1c:	e005      	b.n	8005a2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f88c 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f89d 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d122      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d11b      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0210 	mvn.w	r2, #16
 8005a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2208      	movs	r2, #8
 8005a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f870 	bl	8005b50 <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f862 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f873 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d10e      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d107      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0201 	mvn.w	r2, #1
 8005aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fb fe56 	bl	800175c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b80      	cmp	r3, #128	; 0x80
 8005abc:	d10e      	bne.n	8005adc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac8:	2b80      	cmp	r3, #128	; 0x80
 8005aca:	d107      	bne.n	8005adc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f97e 	bl	8005dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	d10e      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	d107      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f838 	bl	8005b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d10e      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d107      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0220 	mvn.w	r2, #32
 8005b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f948 	bl	8005dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a40      	ldr	r2, [pc, #256]	; (8005ca0 <TIM_Base_SetConfig+0x114>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005baa:	d00f      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3d      	ldr	r2, [pc, #244]	; (8005ca4 <TIM_Base_SetConfig+0x118>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00b      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3c      	ldr	r2, [pc, #240]	; (8005ca8 <TIM_Base_SetConfig+0x11c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d007      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3b      	ldr	r2, [pc, #236]	; (8005cac <TIM_Base_SetConfig+0x120>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a3a      	ldr	r2, [pc, #232]	; (8005cb0 <TIM_Base_SetConfig+0x124>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d108      	bne.n	8005bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2f      	ldr	r2, [pc, #188]	; (8005ca0 <TIM_Base_SetConfig+0x114>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d02b      	beq.n	8005c3e <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bec:	d027      	beq.n	8005c3e <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2c      	ldr	r2, [pc, #176]	; (8005ca4 <TIM_Base_SetConfig+0x118>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d023      	beq.n	8005c3e <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2b      	ldr	r2, [pc, #172]	; (8005ca8 <TIM_Base_SetConfig+0x11c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d01f      	beq.n	8005c3e <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2a      	ldr	r2, [pc, #168]	; (8005cac <TIM_Base_SetConfig+0x120>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01b      	beq.n	8005c3e <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a29      	ldr	r2, [pc, #164]	; (8005cb0 <TIM_Base_SetConfig+0x124>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d017      	beq.n	8005c3e <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a28      	ldr	r2, [pc, #160]	; (8005cb4 <TIM_Base_SetConfig+0x128>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a27      	ldr	r2, [pc, #156]	; (8005cb8 <TIM_Base_SetConfig+0x12c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00f      	beq.n	8005c3e <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <TIM_Base_SetConfig+0x130>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00b      	beq.n	8005c3e <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a25      	ldr	r2, [pc, #148]	; (8005cc0 <TIM_Base_SetConfig+0x134>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d007      	beq.n	8005c3e <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a24      	ldr	r2, [pc, #144]	; (8005cc4 <TIM_Base_SetConfig+0x138>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a23      	ldr	r2, [pc, #140]	; (8005cc8 <TIM_Base_SetConfig+0x13c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d108      	bne.n	8005c50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <TIM_Base_SetConfig+0x114>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_Base_SetConfig+0xf8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a0c      	ldr	r2, [pc, #48]	; (8005cb0 <TIM_Base_SetConfig+0x124>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d103      	bne.n	8005c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	615a      	str	r2, [r3, #20]
}
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	40000c00 	.word	0x40000c00
 8005cb0:	40010400 	.word	0x40010400
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40014400 	.word	0x40014400
 8005cbc:	40014800 	.word	0x40014800
 8005cc0:	40001800 	.word	0x40001800
 8005cc4:	40001c00 	.word	0x40001c00
 8005cc8:	40002000 	.word	0x40002000

08005ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e05a      	b.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a21      	ldr	r2, [pc, #132]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d022      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d30:	d01d      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1d      	ldr	r2, [pc, #116]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d018      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1b      	ldr	r2, [pc, #108]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1a      	ldr	r2, [pc, #104]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00e      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d009      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a17      	ldr	r2, [pc, #92]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d004      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d10c      	bne.n	8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40000800 	.word	0x40000800
 8005db4:	40000c00 	.word	0x40000c00
 8005db8:	40010400 	.word	0x40010400
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40001800 	.word	0x40001800

08005dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e03f      	b.n	8005e7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fb fee4 	bl	8001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2224      	movs	r2, #36	; 0x24
 8005e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fc03 	bl	800663c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695a      	ldr	r2, [r3, #20]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	4613      	mov	r3, r2
 8005e94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d166      	bne.n	8005f70 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_UART_Receive_DMA+0x26>
 8005ea8:	88fb      	ldrh	r3, [r7, #6]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e05f      	b.n	8005f72 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_UART_Receive_DMA+0x38>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e058      	b.n	8005f72 <HAL_UART_Receive_DMA+0xea>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	88fa      	ldrh	r2, [r7, #6]
 8005ed2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2222      	movs	r2, #34	; 0x22
 8005ede:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee6:	4a25      	ldr	r2, [pc, #148]	; (8005f7c <HAL_UART_Receive_DMA+0xf4>)
 8005ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	4a24      	ldr	r2, [pc, #144]	; (8005f80 <HAL_UART_Receive_DMA+0xf8>)
 8005ef0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef6:	4a23      	ldr	r2, [pc, #140]	; (8005f84 <HAL_UART_Receive_DMA+0xfc>)
 8005ef8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efe:	2200      	movs	r2, #0
 8005f00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005f02:	f107 0308 	add.w	r3, r7, #8
 8005f06:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4619      	mov	r1, r3
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	f7fd f8ad 	bl	8003078 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f4a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695a      	ldr	r2, [r3, #20]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f6a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e000      	b.n	8005f72 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005f70:	2302      	movs	r3, #2
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	080062b5 	.word	0x080062b5
 8005f80:	0800631d 	.word	0x0800631d
 8005f84:	08006339 	.word	0x08006339

08005f88 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005f9e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695a      	ldr	r2, [r3, #20]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fba:	2b80      	cmp	r3, #128	; 0x80
 8005fbc:	d124      	bne.n	8006008 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fcc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d018      	beq.n	8006008 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	2200      	movs	r2, #0
 8005fdc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fd f8a0 	bl	8003128 <HAL_DMA_Abort>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fd fab4 	bl	8003560 <HAL_DMA_GetError>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d104      	bne.n	8006008 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2210      	movs	r2, #16
 8006002:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e03d      	b.n	8006084 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d124      	bne.n	8006060 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006024:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602a:	2b00      	cmp	r3, #0
 800602c:	d018      	beq.n	8006060 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006032:	2200      	movs	r2, #0
 8006034:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603a:	4618      	mov	r0, r3
 800603c:	f7fd f874 	bl	8003128 <HAL_DMA_Abort>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	4618      	mov	r0, r3
 800604c:	f7fd fa88 	bl	8003560 <HAL_DMA_GetError>
 8006050:	4603      	mov	r3, r0
 8006052:	2b20      	cmp	r3, #32
 8006054:	d104      	bne.n	8006060 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2210      	movs	r2, #16
 800605a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e011      	b.n	8006084 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <HAL_UART_IRQHandler+0x52>
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa2e 	bl	8006538 <UART_Receive_IT>
      return;
 80060dc:	e0d1      	b.n	8006282 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80b0 	beq.w	8006246 <HAL_UART_IRQHandler+0x1ba>
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <HAL_UART_IRQHandler+0x70>
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80a5 	beq.w	8006246 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_UART_IRQHandler+0x90>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006114:	f043 0201 	orr.w	r2, r3, #1
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_UART_IRQHandler+0xb0>
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006134:	f043 0202 	orr.w	r2, r3, #2
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_UART_IRQHandler+0xd0>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006154:	f043 0204 	orr.w	r2, r3, #4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00f      	beq.n	8006186 <HAL_UART_IRQHandler+0xfa>
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <HAL_UART_IRQHandler+0xee>
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617e:	f043 0208 	orr.w	r2, r3, #8
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d078      	beq.n	8006280 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d007      	beq.n	80061a8 <HAL_UART_IRQHandler+0x11c>
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f9c8 	bl	8006538 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b2:	2b40      	cmp	r3, #64	; 0x40
 80061b4:	bf0c      	ite	eq
 80061b6:	2301      	moveq	r3, #1
 80061b8:	2300      	movne	r3, #0
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <HAL_UART_IRQHandler+0x144>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d031      	beq.n	8006234 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f911 	bl	80063f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	d123      	bne.n	800622c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695a      	ldr	r2, [r3, #20]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d013      	beq.n	8006224 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006200:	4a21      	ldr	r2, [pc, #132]	; (8006288 <HAL_UART_IRQHandler+0x1fc>)
 8006202:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006208:	4618      	mov	r0, r3
 800620a:	f7fc fffd 	bl	8003208 <HAL_DMA_Abort_IT>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d016      	beq.n	8006242 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800621e:	4610      	mov	r0, r2
 8006220:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006222:	e00e      	b.n	8006242 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f83b 	bl	80062a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622a:	e00a      	b.n	8006242 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f837 	bl	80062a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006232:	e006      	b.n	8006242 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f833 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006240:	e01e      	b.n	8006280 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006242:	bf00      	nop
    return;
 8006244:	e01c      	b.n	8006280 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_UART_IRQHandler+0x1d6>
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f8fe 	bl	800645c <UART_Transmit_IT>
    return;
 8006260:	e00f      	b.n	8006282 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_UART_IRQHandler+0x1f6>
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f946 	bl	8006508 <UART_EndTransmit_IT>
    return;
 800627c:	bf00      	nop
 800627e:	e000      	b.n	8006282 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006280:	bf00      	nop
  }
}
 8006282:	3720      	adds	r7, #32
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	08006435 	.word	0x08006435

0800628c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d11e      	bne.n	800630e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062e4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695a      	ldr	r2, [r3, #20]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0201 	bic.w	r2, r2, #1
 80062f4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006304:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7fb f9d4 	bl	80016bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006314:	bf00      	nop
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f7ff ffae 	bl	800628c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006330:	bf00      	nop
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006354:	2b80      	cmp	r3, #128	; 0x80
 8006356:	bf0c      	ite	eq
 8006358:	2301      	moveq	r3, #1
 800635a:	2300      	movne	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b21      	cmp	r3, #33	; 0x21
 800636a:	d108      	bne.n	800637e <UART_DMAError+0x46>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2200      	movs	r2, #0
 8006376:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006378:	68b8      	ldr	r0, [r7, #8]
 800637a:	f000 f827 	bl	80063cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	bf0c      	ite	eq
 800638c:	2301      	moveq	r3, #1
 800638e:	2300      	movne	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b22      	cmp	r3, #34	; 0x22
 800639e:	d108      	bne.n	80063b2 <UART_DMAError+0x7a>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2200      	movs	r2, #0
 80063aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80063ac:	68b8      	ldr	r0, [r7, #8]
 80063ae:	f000 f823 	bl	80063f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	f043 0210 	orr.w	r2, r3, #16
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063be:	68b8      	ldr	r0, [r7, #8]
 80063c0:	f7ff ff6e 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063c4:	bf00      	nop
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80063e2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800640e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695a      	ldr	r2, [r3, #20]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0201 	bic.w	r2, r2, #1
 800641e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7ff ff26 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b21      	cmp	r3, #33	; 0x21
 800646e:	d144      	bne.n	80064fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006478:	d11a      	bne.n	80064b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	461a      	mov	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800648e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	1c9a      	adds	r2, r3, #2
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	621a      	str	r2, [r3, #32]
 80064a2:	e00e      	b.n	80064c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	621a      	str	r2, [r3, #32]
 80064ae:	e008      	b.n	80064c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	1c59      	adds	r1, r3, #1
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6211      	str	r1, [r2, #32]
 80064ba:	781a      	ldrb	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	4619      	mov	r1, r3
 80064d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10f      	bne.n	80064f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e000      	b.n	80064fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80064fa:	2302      	movs	r3, #2
  }
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800651e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7fb f90d 	bl	8001748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b22      	cmp	r3, #34	; 0x22
 800654a:	d171      	bne.n	8006630 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006554:	d123      	bne.n	800659e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10e      	bne.n	8006582 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	1c9a      	adds	r2, r3, #2
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	629a      	str	r2, [r3, #40]	; 0x28
 8006580:	e029      	b.n	80065d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	b29b      	uxth	r3, r3
 800658a:	b2db      	uxtb	r3, r3
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28
 800659c:	e01b      	b.n	80065d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6858      	ldr	r0, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	1c59      	adds	r1, r3, #1
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6291      	str	r1, [r2, #40]	; 0x28
 80065b6:	b2c2      	uxtb	r2, r0
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e00c      	b.n	80065d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	1c58      	adds	r0, r3, #1
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	6288      	str	r0, [r1, #40]	; 0x28
 80065ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29b      	uxth	r3, r3
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	4619      	mov	r1, r3
 80065e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d120      	bne.n	800662c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0220 	bic.w	r2, r2, #32
 80065f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006608:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695a      	ldr	r2, [r3, #20]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fb f84a 	bl	80016bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	e002      	b.n	8006632 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	e000      	b.n	8006632 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006630:	2302      	movs	r3, #2
  }
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800667e:	f023 030c 	bic.w	r3, r3, #12
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	430b      	orrs	r3, r1
 800668a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066aa:	f040 818b 	bne.w	80069c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4ac1      	ldr	r2, [pc, #772]	; (80069b8 <UART_SetConfig+0x37c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d005      	beq.n	80066c4 <UART_SetConfig+0x88>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4abf      	ldr	r2, [pc, #764]	; (80069bc <UART_SetConfig+0x380>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	f040 80bd 	bne.w	800683e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066c4:	f7fd fe36 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 80066c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	461d      	mov	r5, r3
 80066ce:	f04f 0600 	mov.w	r6, #0
 80066d2:	46a8      	mov	r8, r5
 80066d4:	46b1      	mov	r9, r6
 80066d6:	eb18 0308 	adds.w	r3, r8, r8
 80066da:	eb49 0409 	adc.w	r4, r9, r9
 80066de:	4698      	mov	r8, r3
 80066e0:	46a1      	mov	r9, r4
 80066e2:	eb18 0805 	adds.w	r8, r8, r5
 80066e6:	eb49 0906 	adc.w	r9, r9, r6
 80066ea:	f04f 0100 	mov.w	r1, #0
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066fe:	4688      	mov	r8, r1
 8006700:	4691      	mov	r9, r2
 8006702:	eb18 0005 	adds.w	r0, r8, r5
 8006706:	eb49 0106 	adc.w	r1, r9, r6
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	461d      	mov	r5, r3
 8006710:	f04f 0600 	mov.w	r6, #0
 8006714:	196b      	adds	r3, r5, r5
 8006716:	eb46 0406 	adc.w	r4, r6, r6
 800671a:	461a      	mov	r2, r3
 800671c:	4623      	mov	r3, r4
 800671e:	f7f9 fd71 	bl	8000204 <__aeabi_uldivmod>
 8006722:	4603      	mov	r3, r0
 8006724:	460c      	mov	r4, r1
 8006726:	461a      	mov	r2, r3
 8006728:	4ba5      	ldr	r3, [pc, #660]	; (80069c0 <UART_SetConfig+0x384>)
 800672a:	fba3 2302 	umull	r2, r3, r3, r2
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	461d      	mov	r5, r3
 8006738:	f04f 0600 	mov.w	r6, #0
 800673c:	46a9      	mov	r9, r5
 800673e:	46b2      	mov	sl, r6
 8006740:	eb19 0309 	adds.w	r3, r9, r9
 8006744:	eb4a 040a 	adc.w	r4, sl, sl
 8006748:	4699      	mov	r9, r3
 800674a:	46a2      	mov	sl, r4
 800674c:	eb19 0905 	adds.w	r9, r9, r5
 8006750:	eb4a 0a06 	adc.w	sl, sl, r6
 8006754:	f04f 0100 	mov.w	r1, #0
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006760:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006764:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006768:	4689      	mov	r9, r1
 800676a:	4692      	mov	sl, r2
 800676c:	eb19 0005 	adds.w	r0, r9, r5
 8006770:	eb4a 0106 	adc.w	r1, sl, r6
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	461d      	mov	r5, r3
 800677a:	f04f 0600 	mov.w	r6, #0
 800677e:	196b      	adds	r3, r5, r5
 8006780:	eb46 0406 	adc.w	r4, r6, r6
 8006784:	461a      	mov	r2, r3
 8006786:	4623      	mov	r3, r4
 8006788:	f7f9 fd3c 	bl	8000204 <__aeabi_uldivmod>
 800678c:	4603      	mov	r3, r0
 800678e:	460c      	mov	r4, r1
 8006790:	461a      	mov	r2, r3
 8006792:	4b8b      	ldr	r3, [pc, #556]	; (80069c0 <UART_SetConfig+0x384>)
 8006794:	fba3 1302 	umull	r1, r3, r3, r2
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	2164      	movs	r1, #100	; 0x64
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	3332      	adds	r3, #50	; 0x32
 80067a6:	4a86      	ldr	r2, [pc, #536]	; (80069c0 <UART_SetConfig+0x384>)
 80067a8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067b4:	4498      	add	r8, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	461d      	mov	r5, r3
 80067ba:	f04f 0600 	mov.w	r6, #0
 80067be:	46a9      	mov	r9, r5
 80067c0:	46b2      	mov	sl, r6
 80067c2:	eb19 0309 	adds.w	r3, r9, r9
 80067c6:	eb4a 040a 	adc.w	r4, sl, sl
 80067ca:	4699      	mov	r9, r3
 80067cc:	46a2      	mov	sl, r4
 80067ce:	eb19 0905 	adds.w	r9, r9, r5
 80067d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80067d6:	f04f 0100 	mov.w	r1, #0
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067ea:	4689      	mov	r9, r1
 80067ec:	4692      	mov	sl, r2
 80067ee:	eb19 0005 	adds.w	r0, r9, r5
 80067f2:	eb4a 0106 	adc.w	r1, sl, r6
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	461d      	mov	r5, r3
 80067fc:	f04f 0600 	mov.w	r6, #0
 8006800:	196b      	adds	r3, r5, r5
 8006802:	eb46 0406 	adc.w	r4, r6, r6
 8006806:	461a      	mov	r2, r3
 8006808:	4623      	mov	r3, r4
 800680a:	f7f9 fcfb 	bl	8000204 <__aeabi_uldivmod>
 800680e:	4603      	mov	r3, r0
 8006810:	460c      	mov	r4, r1
 8006812:	461a      	mov	r2, r3
 8006814:	4b6a      	ldr	r3, [pc, #424]	; (80069c0 <UART_SetConfig+0x384>)
 8006816:	fba3 1302 	umull	r1, r3, r3, r2
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	2164      	movs	r1, #100	; 0x64
 800681e:	fb01 f303 	mul.w	r3, r1, r3
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	00db      	lsls	r3, r3, #3
 8006826:	3332      	adds	r3, #50	; 0x32
 8006828:	4a65      	ldr	r2, [pc, #404]	; (80069c0 <UART_SetConfig+0x384>)
 800682a:	fba2 2303 	umull	r2, r3, r2, r3
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	f003 0207 	and.w	r2, r3, #7
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4442      	add	r2, r8
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	e26f      	b.n	8006d1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800683e:	f7fd fd65 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8006842:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	461d      	mov	r5, r3
 8006848:	f04f 0600 	mov.w	r6, #0
 800684c:	46a8      	mov	r8, r5
 800684e:	46b1      	mov	r9, r6
 8006850:	eb18 0308 	adds.w	r3, r8, r8
 8006854:	eb49 0409 	adc.w	r4, r9, r9
 8006858:	4698      	mov	r8, r3
 800685a:	46a1      	mov	r9, r4
 800685c:	eb18 0805 	adds.w	r8, r8, r5
 8006860:	eb49 0906 	adc.w	r9, r9, r6
 8006864:	f04f 0100 	mov.w	r1, #0
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006870:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006874:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006878:	4688      	mov	r8, r1
 800687a:	4691      	mov	r9, r2
 800687c:	eb18 0005 	adds.w	r0, r8, r5
 8006880:	eb49 0106 	adc.w	r1, r9, r6
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	461d      	mov	r5, r3
 800688a:	f04f 0600 	mov.w	r6, #0
 800688e:	196b      	adds	r3, r5, r5
 8006890:	eb46 0406 	adc.w	r4, r6, r6
 8006894:	461a      	mov	r2, r3
 8006896:	4623      	mov	r3, r4
 8006898:	f7f9 fcb4 	bl	8000204 <__aeabi_uldivmod>
 800689c:	4603      	mov	r3, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	461a      	mov	r2, r3
 80068a2:	4b47      	ldr	r3, [pc, #284]	; (80069c0 <UART_SetConfig+0x384>)
 80068a4:	fba3 2302 	umull	r2, r3, r3, r2
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	461d      	mov	r5, r3
 80068b2:	f04f 0600 	mov.w	r6, #0
 80068b6:	46a9      	mov	r9, r5
 80068b8:	46b2      	mov	sl, r6
 80068ba:	eb19 0309 	adds.w	r3, r9, r9
 80068be:	eb4a 040a 	adc.w	r4, sl, sl
 80068c2:	4699      	mov	r9, r3
 80068c4:	46a2      	mov	sl, r4
 80068c6:	eb19 0905 	adds.w	r9, r9, r5
 80068ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80068ce:	f04f 0100 	mov.w	r1, #0
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068e2:	4689      	mov	r9, r1
 80068e4:	4692      	mov	sl, r2
 80068e6:	eb19 0005 	adds.w	r0, r9, r5
 80068ea:	eb4a 0106 	adc.w	r1, sl, r6
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	461d      	mov	r5, r3
 80068f4:	f04f 0600 	mov.w	r6, #0
 80068f8:	196b      	adds	r3, r5, r5
 80068fa:	eb46 0406 	adc.w	r4, r6, r6
 80068fe:	461a      	mov	r2, r3
 8006900:	4623      	mov	r3, r4
 8006902:	f7f9 fc7f 	bl	8000204 <__aeabi_uldivmod>
 8006906:	4603      	mov	r3, r0
 8006908:	460c      	mov	r4, r1
 800690a:	461a      	mov	r2, r3
 800690c:	4b2c      	ldr	r3, [pc, #176]	; (80069c0 <UART_SetConfig+0x384>)
 800690e:	fba3 1302 	umull	r1, r3, r3, r2
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	2164      	movs	r1, #100	; 0x64
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	3332      	adds	r3, #50	; 0x32
 8006920:	4a27      	ldr	r2, [pc, #156]	; (80069c0 <UART_SetConfig+0x384>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800692e:	4498      	add	r8, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	461d      	mov	r5, r3
 8006934:	f04f 0600 	mov.w	r6, #0
 8006938:	46a9      	mov	r9, r5
 800693a:	46b2      	mov	sl, r6
 800693c:	eb19 0309 	adds.w	r3, r9, r9
 8006940:	eb4a 040a 	adc.w	r4, sl, sl
 8006944:	4699      	mov	r9, r3
 8006946:	46a2      	mov	sl, r4
 8006948:	eb19 0905 	adds.w	r9, r9, r5
 800694c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006950:	f04f 0100 	mov.w	r1, #0
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800695c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006960:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006964:	4689      	mov	r9, r1
 8006966:	4692      	mov	sl, r2
 8006968:	eb19 0005 	adds.w	r0, r9, r5
 800696c:	eb4a 0106 	adc.w	r1, sl, r6
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	461d      	mov	r5, r3
 8006976:	f04f 0600 	mov.w	r6, #0
 800697a:	196b      	adds	r3, r5, r5
 800697c:	eb46 0406 	adc.w	r4, r6, r6
 8006980:	461a      	mov	r2, r3
 8006982:	4623      	mov	r3, r4
 8006984:	f7f9 fc3e 	bl	8000204 <__aeabi_uldivmod>
 8006988:	4603      	mov	r3, r0
 800698a:	460c      	mov	r4, r1
 800698c:	461a      	mov	r2, r3
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <UART_SetConfig+0x384>)
 8006990:	fba3 1302 	umull	r1, r3, r3, r2
 8006994:	095b      	lsrs	r3, r3, #5
 8006996:	2164      	movs	r1, #100	; 0x64
 8006998:	fb01 f303 	mul.w	r3, r1, r3
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	3332      	adds	r3, #50	; 0x32
 80069a2:	4a07      	ldr	r2, [pc, #28]	; (80069c0 <UART_SetConfig+0x384>)
 80069a4:	fba2 2303 	umull	r2, r3, r2, r3
 80069a8:	095b      	lsrs	r3, r3, #5
 80069aa:	f003 0207 	and.w	r2, r3, #7
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4442      	add	r2, r8
 80069b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80069b6:	e1b2      	b.n	8006d1e <UART_SetConfig+0x6e2>
 80069b8:	40011000 	.word	0x40011000
 80069bc:	40011400 	.word	0x40011400
 80069c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4ad7      	ldr	r2, [pc, #860]	; (8006d28 <UART_SetConfig+0x6ec>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d005      	beq.n	80069da <UART_SetConfig+0x39e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4ad6      	ldr	r2, [pc, #856]	; (8006d2c <UART_SetConfig+0x6f0>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	f040 80d1 	bne.w	8006b7c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80069da:	f7fd fcab 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 80069de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	469a      	mov	sl, r3
 80069e4:	f04f 0b00 	mov.w	fp, #0
 80069e8:	46d0      	mov	r8, sl
 80069ea:	46d9      	mov	r9, fp
 80069ec:	eb18 0308 	adds.w	r3, r8, r8
 80069f0:	eb49 0409 	adc.w	r4, r9, r9
 80069f4:	4698      	mov	r8, r3
 80069f6:	46a1      	mov	r9, r4
 80069f8:	eb18 080a 	adds.w	r8, r8, sl
 80069fc:	eb49 090b 	adc.w	r9, r9, fp
 8006a00:	f04f 0100 	mov.w	r1, #0
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a14:	4688      	mov	r8, r1
 8006a16:	4691      	mov	r9, r2
 8006a18:	eb1a 0508 	adds.w	r5, sl, r8
 8006a1c:	eb4b 0609 	adc.w	r6, fp, r9
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4619      	mov	r1, r3
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	f04f 0400 	mov.w	r4, #0
 8006a32:	0094      	lsls	r4, r2, #2
 8006a34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a38:	008b      	lsls	r3, r1, #2
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	4628      	mov	r0, r5
 8006a40:	4631      	mov	r1, r6
 8006a42:	f7f9 fbdf 	bl	8000204 <__aeabi_uldivmod>
 8006a46:	4603      	mov	r3, r0
 8006a48:	460c      	mov	r4, r1
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4bb8      	ldr	r3, [pc, #736]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	469b      	mov	fp, r3
 8006a5c:	f04f 0c00 	mov.w	ip, #0
 8006a60:	46d9      	mov	r9, fp
 8006a62:	46e2      	mov	sl, ip
 8006a64:	eb19 0309 	adds.w	r3, r9, r9
 8006a68:	eb4a 040a 	adc.w	r4, sl, sl
 8006a6c:	4699      	mov	r9, r3
 8006a6e:	46a2      	mov	sl, r4
 8006a70:	eb19 090b 	adds.w	r9, r9, fp
 8006a74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a8c:	4689      	mov	r9, r1
 8006a8e:	4692      	mov	sl, r2
 8006a90:	eb1b 0509 	adds.w	r5, fp, r9
 8006a94:	eb4c 060a 	adc.w	r6, ip, sl
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	f04f 0200 	mov.w	r2, #0
 8006aa2:	f04f 0300 	mov.w	r3, #0
 8006aa6:	f04f 0400 	mov.w	r4, #0
 8006aaa:	0094      	lsls	r4, r2, #2
 8006aac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ab0:	008b      	lsls	r3, r1, #2
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	4631      	mov	r1, r6
 8006aba:	f7f9 fba3 	bl	8000204 <__aeabi_uldivmod>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	4b9a      	ldr	r3, [pc, #616]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	2164      	movs	r1, #100	; 0x64
 8006ace:	fb01 f303 	mul.w	r3, r1, r3
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	3332      	adds	r3, #50	; 0x32
 8006ad8:	4a95      	ldr	r2, [pc, #596]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006ada:	fba2 2303 	umull	r2, r3, r2, r3
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ae4:	4498      	add	r8, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	469b      	mov	fp, r3
 8006aea:	f04f 0c00 	mov.w	ip, #0
 8006aee:	46d9      	mov	r9, fp
 8006af0:	46e2      	mov	sl, ip
 8006af2:	eb19 0309 	adds.w	r3, r9, r9
 8006af6:	eb4a 040a 	adc.w	r4, sl, sl
 8006afa:	4699      	mov	r9, r3
 8006afc:	46a2      	mov	sl, r4
 8006afe:	eb19 090b 	adds.w	r9, r9, fp
 8006b02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b06:	f04f 0100 	mov.w	r1, #0
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b1a:	4689      	mov	r9, r1
 8006b1c:	4692      	mov	sl, r2
 8006b1e:	eb1b 0509 	adds.w	r5, fp, r9
 8006b22:	eb4c 060a 	adc.w	r6, ip, sl
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	f04f 0400 	mov.w	r4, #0
 8006b38:	0094      	lsls	r4, r2, #2
 8006b3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b3e:	008b      	lsls	r3, r1, #2
 8006b40:	461a      	mov	r2, r3
 8006b42:	4623      	mov	r3, r4
 8006b44:	4628      	mov	r0, r5
 8006b46:	4631      	mov	r1, r6
 8006b48:	f7f9 fb5c 	bl	8000204 <__aeabi_uldivmod>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	461a      	mov	r2, r3
 8006b52:	4b77      	ldr	r3, [pc, #476]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006b54:	fba3 1302 	umull	r1, r3, r3, r2
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	2164      	movs	r1, #100	; 0x64
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	3332      	adds	r3, #50	; 0x32
 8006b66:	4a72      	ldr	r2, [pc, #456]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006b68:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	f003 020f 	and.w	r2, r3, #15
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4442      	add	r2, r8
 8006b78:	609a      	str	r2, [r3, #8]
 8006b7a:	e0d0      	b.n	8006d1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b7c:	f7fd fbc6 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8006b80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	469a      	mov	sl, r3
 8006b86:	f04f 0b00 	mov.w	fp, #0
 8006b8a:	46d0      	mov	r8, sl
 8006b8c:	46d9      	mov	r9, fp
 8006b8e:	eb18 0308 	adds.w	r3, r8, r8
 8006b92:	eb49 0409 	adc.w	r4, r9, r9
 8006b96:	4698      	mov	r8, r3
 8006b98:	46a1      	mov	r9, r4
 8006b9a:	eb18 080a 	adds.w	r8, r8, sl
 8006b9e:	eb49 090b 	adc.w	r9, r9, fp
 8006ba2:	f04f 0100 	mov.w	r1, #0
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bb6:	4688      	mov	r8, r1
 8006bb8:	4691      	mov	r9, r2
 8006bba:	eb1a 0508 	adds.w	r5, sl, r8
 8006bbe:	eb4b 0609 	adc.w	r6, fp, r9
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	f04f 0200 	mov.w	r2, #0
 8006bcc:	f04f 0300 	mov.w	r3, #0
 8006bd0:	f04f 0400 	mov.w	r4, #0
 8006bd4:	0094      	lsls	r4, r2, #2
 8006bd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bda:	008b      	lsls	r3, r1, #2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4623      	mov	r3, r4
 8006be0:	4628      	mov	r0, r5
 8006be2:	4631      	mov	r1, r6
 8006be4:	f7f9 fb0e 	bl	8000204 <__aeabi_uldivmod>
 8006be8:	4603      	mov	r3, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	461a      	mov	r2, r3
 8006bee:	4b50      	ldr	r3, [pc, #320]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	469b      	mov	fp, r3
 8006bfe:	f04f 0c00 	mov.w	ip, #0
 8006c02:	46d9      	mov	r9, fp
 8006c04:	46e2      	mov	sl, ip
 8006c06:	eb19 0309 	adds.w	r3, r9, r9
 8006c0a:	eb4a 040a 	adc.w	r4, sl, sl
 8006c0e:	4699      	mov	r9, r3
 8006c10:	46a2      	mov	sl, r4
 8006c12:	eb19 090b 	adds.w	r9, r9, fp
 8006c16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c1a:	f04f 0100 	mov.w	r1, #0
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c2e:	4689      	mov	r9, r1
 8006c30:	4692      	mov	sl, r2
 8006c32:	eb1b 0509 	adds.w	r5, fp, r9
 8006c36:	eb4c 060a 	adc.w	r6, ip, sl
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	f04f 0400 	mov.w	r4, #0
 8006c4c:	0094      	lsls	r4, r2, #2
 8006c4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c52:	008b      	lsls	r3, r1, #2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4623      	mov	r3, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	f7f9 fad2 	bl	8000204 <__aeabi_uldivmod>
 8006c60:	4603      	mov	r3, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	461a      	mov	r2, r3
 8006c66:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006c68:	fba3 1302 	umull	r1, r3, r3, r2
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	2164      	movs	r1, #100	; 0x64
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	3332      	adds	r3, #50	; 0x32
 8006c7a:	4a2d      	ldr	r2, [pc, #180]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c80:	095b      	lsrs	r3, r3, #5
 8006c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c86:	4498      	add	r8, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	469b      	mov	fp, r3
 8006c8c:	f04f 0c00 	mov.w	ip, #0
 8006c90:	46d9      	mov	r9, fp
 8006c92:	46e2      	mov	sl, ip
 8006c94:	eb19 0309 	adds.w	r3, r9, r9
 8006c98:	eb4a 040a 	adc.w	r4, sl, sl
 8006c9c:	4699      	mov	r9, r3
 8006c9e:	46a2      	mov	sl, r4
 8006ca0:	eb19 090b 	adds.w	r9, r9, fp
 8006ca4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ca8:	f04f 0100 	mov.w	r1, #0
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cbc:	4689      	mov	r9, r1
 8006cbe:	4692      	mov	sl, r2
 8006cc0:	eb1b 0509 	adds.w	r5, fp, r9
 8006cc4:	eb4c 060a 	adc.w	r6, ip, sl
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f04f 0200 	mov.w	r2, #0
 8006cd2:	f04f 0300 	mov.w	r3, #0
 8006cd6:	f04f 0400 	mov.w	r4, #0
 8006cda:	0094      	lsls	r4, r2, #2
 8006cdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ce0:	008b      	lsls	r3, r1, #2
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	4631      	mov	r1, r6
 8006cea:	f7f9 fa8b 	bl	8000204 <__aeabi_uldivmod>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	2164      	movs	r1, #100	; 0x64
 8006cfe:	fb01 f303 	mul.w	r3, r1, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	3332      	adds	r3, #50	; 0x32
 8006d08:	4a09      	ldr	r2, [pc, #36]	; (8006d30 <UART_SetConfig+0x6f4>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	f003 020f 	and.w	r2, r3, #15
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4442      	add	r2, r8
 8006d1a:	609a      	str	r2, [r3, #8]
}
 8006d1c:	e7ff      	b.n	8006d1e <UART_SetConfig+0x6e2>
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d28:	40011000 	.word	0x40011000
 8006d2c:	40011400 	.word	0x40011400
 8006d30:	51eb851f 	.word	0x51eb851f

08006d34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006d38:	4904      	ldr	r1, [pc, #16]	; (8006d4c <MX_FATFS_Init+0x18>)
 8006d3a:	4805      	ldr	r0, [pc, #20]	; (8006d50 <MX_FATFS_Init+0x1c>)
 8006d3c:	f002 fa0e 	bl	800915c <FATFS_LinkDriver>
 8006d40:	4603      	mov	r3, r0
 8006d42:	461a      	mov	r2, r3
 8006d44:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <MX_FATFS_Init+0x20>)
 8006d46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006d48:	bf00      	nop
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20000a04 	.word	0x20000a04
 8006d50:	20000010 	.word	0x20000010
 8006d54:	20000a08 	.word	0x20000a08

08006d58 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006d5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7fb fbb9 	bl	80024ec <USER_SPI_initialize>
 8006d7a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fb fc8b 	bl	80026ac <USER_SPI_status>
 8006d96:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006db0:	7bf8      	ldrb	r0, [r7, #15]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	68b9      	ldr	r1, [r7, #8]
 8006db8:	f7fb fc8e 	bl	80026d8 <USER_SPI_read>
 8006dbc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	603b      	str	r3, [r7, #0]
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */


    return USER_SPI_write(pdrv, buff, sector, count);
 8006dd6:	7bf8      	ldrb	r0, [r7, #15]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	f7fb fce1 	bl	80027a4 <USER_SPI_write>
 8006de2:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4603      	mov	r3, r0
 8006df4:	603a      	str	r2, [r7, #0]
 8006df6:	71fb      	strb	r3, [r7, #7]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006dfc:	79b9      	ldrb	r1, [r7, #6]
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fb fd4a 	bl	800289c <USER_SPI_ioctl>
 8006e08:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006e1e:	79fb      	ldrb	r3, [r7, #7]
 8006e20:	4a08      	ldr	r2, [pc, #32]	; (8006e44 <disk_status+0x30>)
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	79fa      	ldrb	r2, [r7, #7]
 8006e2c:	4905      	ldr	r1, [pc, #20]	; (8006e44 <disk_status+0x30>)
 8006e2e:	440a      	add	r2, r1
 8006e30:	7a12      	ldrb	r2, [r2, #8]
 8006e32:	4610      	mov	r0, r2
 8006e34:	4798      	blx	r3
 8006e36:	4603      	mov	r3, r0
 8006e38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000074 	.word	0x20000074

08006e48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	4a0d      	ldr	r2, [pc, #52]	; (8006e90 <disk_initialize+0x48>)
 8006e5a:	5cd3      	ldrb	r3, [r2, r3]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d111      	bne.n	8006e84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	4a0b      	ldr	r2, [pc, #44]	; (8006e90 <disk_initialize+0x48>)
 8006e64:	2101      	movs	r1, #1
 8006e66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	4a09      	ldr	r2, [pc, #36]	; (8006e90 <disk_initialize+0x48>)
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	79fa      	ldrb	r2, [r7, #7]
 8006e76:	4906      	ldr	r1, [pc, #24]	; (8006e90 <disk_initialize+0x48>)
 8006e78:	440a      	add	r2, r1
 8006e7a:	7a12      	ldrb	r2, [r2, #8]
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	4603      	mov	r3, r0
 8006e82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000074 	.word	0x20000074

08006e94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006e94:	b590      	push	{r4, r7, lr}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	607a      	str	r2, [r7, #4]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	4a0a      	ldr	r2, [pc, #40]	; (8006ed0 <disk_read+0x3c>)
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	689c      	ldr	r4, [r3, #8]
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	4a07      	ldr	r2, [pc, #28]	; (8006ed0 <disk_read+0x3c>)
 8006eb4:	4413      	add	r3, r2
 8006eb6:	7a18      	ldrb	r0, [r3, #8]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	47a0      	blx	r4
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd90      	pop	{r4, r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000074 	.word	0x20000074

08006ed4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006ed4:	b590      	push	{r4, r7, lr}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	607a      	str	r2, [r7, #4]
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	4a0a      	ldr	r2, [pc, #40]	; (8006f10 <disk_write+0x3c>)
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	68dc      	ldr	r4, [r3, #12]
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	4a07      	ldr	r2, [pc, #28]	; (8006f10 <disk_write+0x3c>)
 8006ef4:	4413      	add	r3, r2
 8006ef6:	7a18      	ldrb	r0, [r3, #8]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	47a0      	blx	r4
 8006f00:	4603      	mov	r3, r0
 8006f02:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd90      	pop	{r4, r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000074 	.word	0x20000074

08006f14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	603a      	str	r2, [r7, #0]
 8006f1e:	71fb      	strb	r3, [r7, #7]
 8006f20:	460b      	mov	r3, r1
 8006f22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	4a09      	ldr	r2, [pc, #36]	; (8006f4c <disk_ioctl+0x38>)
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	79fa      	ldrb	r2, [r7, #7]
 8006f32:	4906      	ldr	r1, [pc, #24]	; (8006f4c <disk_ioctl+0x38>)
 8006f34:	440a      	add	r2, r1
 8006f36:	7a10      	ldrb	r0, [r2, #8]
 8006f38:	79b9      	ldrb	r1, [r7, #6]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	4798      	blx	r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73fb      	strb	r3, [r7, #15]
  return res;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000074 	.word	0x20000074

08006f50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006f60:	89fb      	ldrh	r3, [r7, #14]
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	b21a      	sxth	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	b21b      	sxth	r3, r3
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	b21b      	sxth	r3, r3
 8006f70:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006f72:	89fb      	ldrh	r3, [r7, #14]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3303      	adds	r3, #3
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	021b      	lsls	r3, r3, #8
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	3202      	adds	r2, #2
 8006f98:	7812      	ldrb	r2, [r2, #0]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	3201      	adds	r2, #1
 8006fa6:	7812      	ldrb	r2, [r2, #0]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
	return rv;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	887a      	ldrh	r2, [r7, #2]
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	887b      	ldrh	r3, [r7, #2]
 8006fe0:	0a1b      	lsrs	r3, r3, #8
 8006fe2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	607a      	str	r2, [r7, #4]
 8006fea:	887a      	ldrh	r2, [r7, #2]
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	701a      	strb	r2, [r3, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	0a1b      	lsrs	r3, r3, #8
 8007016:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	607a      	str	r2, [r7, #4]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	0a1b      	lsrs	r3, r3, #8
 8007028:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	0a1b      	lsrs	r3, r3, #8
 800703a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	607a      	str	r2, [r7, #4]
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00d      	beq.n	800708a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	1c53      	adds	r3, r2, #1
 8007072:	613b      	str	r3, [r7, #16]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	1c59      	adds	r1, r3, #1
 8007078:	6179      	str	r1, [r7, #20]
 800707a:	7812      	ldrb	r2, [r2, #0]
 800707c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3b01      	subs	r3, #1
 8007082:	607b      	str	r3, [r7, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f1      	bne.n	800706e <mem_cpy+0x1a>
	}
}
 800708a:	bf00      	nop
 800708c:	371c      	adds	r7, #28
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007096:	b480      	push	{r7}
 8007098:	b087      	sub	sp, #28
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	617a      	str	r2, [r7, #20]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	607b      	str	r3, [r7, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1f3      	bne.n	80070a6 <mem_set+0x10>
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80070ca:	b480      	push	{r7}
 80070cc:	b089      	sub	sp, #36	; 0x24
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	61fb      	str	r3, [r7, #28]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80070de:	2300      	movs	r3, #0
 80070e0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	61fa      	str	r2, [r7, #28]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	4619      	mov	r1, r3
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	61ba      	str	r2, [r7, #24]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	1acb      	subs	r3, r1, r3
 80070f6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	607b      	str	r3, [r7, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <mem_cmp+0x40>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0eb      	beq.n	80070e2 <mem_cmp+0x18>

	return r;
 800710a:	697b      	ldr	r3, [r7, #20]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3724      	adds	r7, #36	; 0x24
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007122:	e002      	b.n	800712a <chk_chr+0x12>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3301      	adds	r3, #1
 8007128:	607b      	str	r3, [r7, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <chk_chr+0x26>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	4293      	cmp	r3, r2
 800713c:	d1f2      	bne.n	8007124 <chk_chr+0xc>
	return *str;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	781b      	ldrb	r3, [r3, #0]
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800715a:	2300      	movs	r3, #0
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e029      	b.n	80071b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007164:	4a27      	ldr	r2, [pc, #156]	; (8007204 <chk_lock+0xb4>)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	4413      	add	r3, r2
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d01d      	beq.n	80071ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007172:	4a24      	ldr	r2, [pc, #144]	; (8007204 <chk_lock+0xb4>)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	4413      	add	r3, r2
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d116      	bne.n	80071b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007184:	4a1f      	ldr	r2, [pc, #124]	; (8007204 <chk_lock+0xb4>)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	4413      	add	r3, r2
 800718c:	3304      	adds	r3, #4
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007194:	429a      	cmp	r2, r3
 8007196:	d10c      	bne.n	80071b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007198:	4a1a      	ldr	r2, [pc, #104]	; (8007204 <chk_lock+0xb4>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	4413      	add	r3, r2
 80071a0:	3308      	adds	r3, #8
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d102      	bne.n	80071b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80071ac:	e007      	b.n	80071be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80071ae:	2301      	movs	r3, #1
 80071b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3301      	adds	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d9d2      	bls.n	8007164 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d109      	bne.n	80071d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d102      	bne.n	80071d0 <chk_lock+0x80>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d101      	bne.n	80071d4 <chk_lock+0x84>
 80071d0:	2300      	movs	r3, #0
 80071d2:	e010      	b.n	80071f6 <chk_lock+0xa6>
 80071d4:	2312      	movs	r3, #18
 80071d6:	e00e      	b.n	80071f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d108      	bne.n	80071f0 <chk_lock+0xa0>
 80071de:	4a09      	ldr	r2, [pc, #36]	; (8007204 <chk_lock+0xb4>)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	4413      	add	r3, r2
 80071e6:	330c      	adds	r3, #12
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ee:	d101      	bne.n	80071f4 <chk_lock+0xa4>
 80071f0:	2310      	movs	r3, #16
 80071f2:	e000      	b.n	80071f6 <chk_lock+0xa6>
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	20000054 	.word	0x20000054

08007208 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800720e:	2300      	movs	r3, #0
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	e002      	b.n	800721a <enq_lock+0x12>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3301      	adds	r3, #1
 8007218:	607b      	str	r3, [r7, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d806      	bhi.n	800722e <enq_lock+0x26>
 8007220:	4a09      	ldr	r2, [pc, #36]	; (8007248 <enq_lock+0x40>)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	011b      	lsls	r3, r3, #4
 8007226:	4413      	add	r3, r2
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f2      	bne.n	8007214 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b02      	cmp	r3, #2
 8007232:	bf14      	ite	ne
 8007234:	2301      	movne	r3, #1
 8007236:	2300      	moveq	r3, #0
 8007238:	b2db      	uxtb	r3, r3
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20000054 	.word	0x20000054

0800724c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	e01f      	b.n	800729c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800725c:	4a41      	ldr	r2, [pc, #260]	; (8007364 <inc_lock+0x118>)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	4413      	add	r3, r2
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d113      	bne.n	8007296 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800726e:	4a3d      	ldr	r2, [pc, #244]	; (8007364 <inc_lock+0x118>)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	4413      	add	r3, r2
 8007276:	3304      	adds	r3, #4
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800727e:	429a      	cmp	r2, r3
 8007280:	d109      	bne.n	8007296 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007282:	4a38      	ldr	r2, [pc, #224]	; (8007364 <inc_lock+0x118>)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	4413      	add	r3, r2
 800728a:	3308      	adds	r3, #8
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007292:	429a      	cmp	r2, r3
 8007294:	d006      	beq.n	80072a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3301      	adds	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d9dc      	bls.n	800725c <inc_lock+0x10>
 80072a2:	e000      	b.n	80072a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80072a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d132      	bne.n	8007312 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e002      	b.n	80072b8 <inc_lock+0x6c>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3301      	adds	r3, #1
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d806      	bhi.n	80072cc <inc_lock+0x80>
 80072be:	4a29      	ldr	r2, [pc, #164]	; (8007364 <inc_lock+0x118>)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	011b      	lsls	r3, r3, #4
 80072c4:	4413      	add	r3, r2
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1f2      	bne.n	80072b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d101      	bne.n	80072d6 <inc_lock+0x8a>
 80072d2:	2300      	movs	r3, #0
 80072d4:	e040      	b.n	8007358 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	4922      	ldr	r1, [pc, #136]	; (8007364 <inc_lock+0x118>)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	440b      	add	r3, r1
 80072e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	491e      	ldr	r1, [pc, #120]	; (8007364 <inc_lock+0x118>)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	440b      	add	r3, r1
 80072f0:	3304      	adds	r3, #4
 80072f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	695a      	ldr	r2, [r3, #20]
 80072f8:	491a      	ldr	r1, [pc, #104]	; (8007364 <inc_lock+0x118>)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	440b      	add	r3, r1
 8007300:	3308      	adds	r3, #8
 8007302:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007304:	4a17      	ldr	r2, [pc, #92]	; (8007364 <inc_lock+0x118>)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	4413      	add	r3, r2
 800730c:	330c      	adds	r3, #12
 800730e:	2200      	movs	r2, #0
 8007310:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d009      	beq.n	800732c <inc_lock+0xe0>
 8007318:	4a12      	ldr	r2, [pc, #72]	; (8007364 <inc_lock+0x118>)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	011b      	lsls	r3, r3, #4
 800731e:	4413      	add	r3, r2
 8007320:	330c      	adds	r3, #12
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <inc_lock+0xe0>
 8007328:	2300      	movs	r3, #0
 800732a:	e015      	b.n	8007358 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d108      	bne.n	8007344 <inc_lock+0xf8>
 8007332:	4a0c      	ldr	r2, [pc, #48]	; (8007364 <inc_lock+0x118>)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	4413      	add	r3, r2
 800733a:	330c      	adds	r3, #12
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	3301      	adds	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	e001      	b.n	8007348 <inc_lock+0xfc>
 8007344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007348:	4906      	ldr	r1, [pc, #24]	; (8007364 <inc_lock+0x118>)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	440b      	add	r3, r1
 8007350:	330c      	adds	r3, #12
 8007352:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3301      	adds	r3, #1
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	20000054 	.word	0x20000054

08007368 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3b01      	subs	r3, #1
 8007374:	607b      	str	r3, [r7, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d825      	bhi.n	80073c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800737c:	4a17      	ldr	r2, [pc, #92]	; (80073dc <dec_lock+0x74>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	4413      	add	r3, r2
 8007384:	330c      	adds	r3, #12
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800738a:	89fb      	ldrh	r3, [r7, #14]
 800738c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007390:	d101      	bne.n	8007396 <dec_lock+0x2e>
 8007392:	2300      	movs	r3, #0
 8007394:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007396:	89fb      	ldrh	r3, [r7, #14]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <dec_lock+0x3a>
 800739c:	89fb      	ldrh	r3, [r7, #14]
 800739e:	3b01      	subs	r3, #1
 80073a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80073a2:	4a0e      	ldr	r2, [pc, #56]	; (80073dc <dec_lock+0x74>)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	4413      	add	r3, r2
 80073aa:	330c      	adds	r3, #12
 80073ac:	89fa      	ldrh	r2, [r7, #14]
 80073ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80073b0:	89fb      	ldrh	r3, [r7, #14]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d105      	bne.n	80073c2 <dec_lock+0x5a>
 80073b6:	4a09      	ldr	r2, [pc, #36]	; (80073dc <dec_lock+0x74>)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	4413      	add	r3, r2
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	737b      	strb	r3, [r7, #13]
 80073c6:	e001      	b.n	80073cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80073c8:	2302      	movs	r3, #2
 80073ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80073cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	20000054 	.word	0x20000054

080073e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	e010      	b.n	8007410 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80073ee:	4a0d      	ldr	r2, [pc, #52]	; (8007424 <clear_lock+0x44>)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	4413      	add	r3, r2
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d105      	bne.n	800740a <clear_lock+0x2a>
 80073fe:	4a09      	ldr	r2, [pc, #36]	; (8007424 <clear_lock+0x44>)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	4413      	add	r3, r2
 8007406:	2200      	movs	r2, #0
 8007408:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3301      	adds	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d9eb      	bls.n	80073ee <clear_lock+0xe>
	}
}
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000054 	.word	0x20000054

08007428 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	78db      	ldrb	r3, [r3, #3]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d034      	beq.n	80074a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7858      	ldrb	r0, [r3, #1]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800744c:	2301      	movs	r3, #1
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	f7ff fd40 	bl	8006ed4 <disk_write>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <sync_window+0x38>
			res = FR_DISK_ERR;
 800745a:	2301      	movs	r3, #1
 800745c:	73fb      	strb	r3, [r7, #15]
 800745e:	e022      	b.n	80074a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	1ad2      	subs	r2, r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	429a      	cmp	r2, r3
 8007474:	d217      	bcs.n	80074a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	789b      	ldrb	r3, [r3, #2]
 800747a:	613b      	str	r3, [r7, #16]
 800747c:	e010      	b.n	80074a0 <sync_window+0x78>
					wsect += fs->fsize;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	7858      	ldrb	r0, [r3, #1]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007492:	2301      	movs	r3, #1
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	f7ff fd1d 	bl	8006ed4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3b01      	subs	r3, #1
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d8eb      	bhi.n	800747e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d01b      	beq.n	8007500 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff ffad 	bl	8007428 <sync_window>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d113      	bne.n	8007500 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	7858      	ldrb	r0, [r3, #1]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80074e2:	2301      	movs	r3, #1
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	f7ff fcd5 	bl	8006e94 <disk_read>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d004      	beq.n	80074fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80074f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff ff87 	bl	8007428 <sync_window>
 800751a:	4603      	mov	r3, r0
 800751c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d158      	bne.n	80075d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	2b03      	cmp	r3, #3
 800752a:	d148      	bne.n	80075be <sync_fs+0xb2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	791b      	ldrb	r3, [r3, #4]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d144      	bne.n	80075be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3330      	adds	r3, #48	; 0x30
 8007538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800753c:	2100      	movs	r1, #0
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff fda9 	bl	8007096 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3330      	adds	r3, #48	; 0x30
 8007548:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800754c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff fd38 	bl	8006fc6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3330      	adds	r3, #48	; 0x30
 800755a:	4921      	ldr	r1, [pc, #132]	; (80075e0 <sync_fs+0xd4>)
 800755c:	4618      	mov	r0, r3
 800755e:	f7ff fd4d 	bl	8006ffc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3330      	adds	r3, #48	; 0x30
 8007566:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800756a:	491e      	ldr	r1, [pc, #120]	; (80075e4 <sync_fs+0xd8>)
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fd45 	bl	8006ffc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3330      	adds	r3, #48	; 0x30
 8007576:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	4619      	mov	r1, r3
 8007580:	4610      	mov	r0, r2
 8007582:	f7ff fd3b 	bl	8006ffc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	3330      	adds	r3, #48	; 0x30
 800758a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	4619      	mov	r1, r3
 8007594:	4610      	mov	r0, r2
 8007596:	f7ff fd31 	bl	8006ffc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	7858      	ldrb	r0, [r3, #1]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b2:	2301      	movs	r3, #1
 80075b4:	f7ff fc8e 	bl	8006ed4 <disk_write>
			fs->fsi_flag = 0;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	2200      	movs	r2, #0
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff fca4 	bl	8006f14 <disk_ioctl>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <sync_fs+0xca>
 80075d2:	2301      	movs	r3, #1
 80075d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	41615252 	.word	0x41615252
 80075e4:	61417272 	.word	0x61417272

080075e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	3b02      	subs	r3, #2
 80075f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	3b02      	subs	r3, #2
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d301      	bcc.n	8007608 <clust2sect+0x20>
 8007604:	2300      	movs	r3, #0
 8007606:	e008      	b.n	800761a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	895b      	ldrh	r3, [r3, #10]
 800760c:	461a      	mov	r2, r3
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	fb03 f202 	mul.w	r2, r3, r2
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007618:	4413      	add	r3, r2
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b086      	sub	sp, #24
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d904      	bls.n	8007646 <get_fat+0x20>
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d302      	bcc.n	800764c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007646:	2301      	movs	r3, #1
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	e08c      	b.n	8007766 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800764c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007650:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b02      	cmp	r3, #2
 8007658:	d045      	beq.n	80076e6 <get_fat+0xc0>
 800765a:	2b03      	cmp	r3, #3
 800765c:	d05d      	beq.n	800771a <get_fat+0xf4>
 800765e:	2b01      	cmp	r3, #1
 8007660:	d177      	bne.n	8007752 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	085b      	lsrs	r3, r3, #1
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	6a1a      	ldr	r2, [r3, #32]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	0a5b      	lsrs	r3, r3, #9
 8007678:	4413      	add	r3, r2
 800767a:	4619      	mov	r1, r3
 800767c:	6938      	ldr	r0, [r7, #16]
 800767e:	f7ff ff17 	bl	80074b0 <move_window>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d167      	bne.n	8007758 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	60fa      	str	r2, [r7, #12]
 800768e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4413      	add	r3, r2
 8007696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800769a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6a1a      	ldr	r2, [r3, #32]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	0a5b      	lsrs	r3, r3, #9
 80076a4:	4413      	add	r3, r2
 80076a6:	4619      	mov	r1, r3
 80076a8:	6938      	ldr	r0, [r7, #16]
 80076aa:	f7ff ff01 	bl	80074b0 <move_window>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d153      	bne.n	800775c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4413      	add	r3, r2
 80076be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	461a      	mov	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <get_fat+0xb6>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	091b      	lsrs	r3, r3, #4
 80076da:	e002      	b.n	80076e2 <get_fat+0xbc>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076e2:	617b      	str	r3, [r7, #20]
			break;
 80076e4:	e03f      	b.n	8007766 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	6a1a      	ldr	r2, [r3, #32]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	0a1b      	lsrs	r3, r3, #8
 80076ee:	4413      	add	r3, r2
 80076f0:	4619      	mov	r1, r3
 80076f2:	6938      	ldr	r0, [r7, #16]
 80076f4:	f7ff fedc 	bl	80074b0 <move_window>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d130      	bne.n	8007760 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	005b      	lsls	r3, r3, #1
 8007708:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800770c:	4413      	add	r3, r2
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff fc1e 	bl	8006f50 <ld_word>
 8007714:	4603      	mov	r3, r0
 8007716:	617b      	str	r3, [r7, #20]
			break;
 8007718:	e025      	b.n	8007766 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	6a1a      	ldr	r2, [r3, #32]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	09db      	lsrs	r3, r3, #7
 8007722:	4413      	add	r3, r2
 8007724:	4619      	mov	r1, r3
 8007726:	6938      	ldr	r0, [r7, #16]
 8007728:	f7ff fec2 	bl	80074b0 <move_window>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d118      	bne.n	8007764 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007740:	4413      	add	r3, r2
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff fc1c 	bl	8006f80 <ld_dword>
 8007748:	4603      	mov	r3, r0
 800774a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800774e:	617b      	str	r3, [r7, #20]
			break;
 8007750:	e009      	b.n	8007766 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007752:	2301      	movs	r3, #1
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e006      	b.n	8007766 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007758:	bf00      	nop
 800775a:	e004      	b.n	8007766 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800775c:	bf00      	nop
 800775e:	e002      	b.n	8007766 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007760:	bf00      	nop
 8007762:	e000      	b.n	8007766 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007764:	bf00      	nop
		}
	}

	return val;
 8007766:	697b      	ldr	r3, [r7, #20]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007770:	b590      	push	{r4, r7, lr}
 8007772:	b089      	sub	sp, #36	; 0x24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800777c:	2302      	movs	r3, #2
 800777e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b01      	cmp	r3, #1
 8007784:	f240 80d6 	bls.w	8007934 <put_fat+0x1c4>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	f080 80d0 	bcs.w	8007934 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d073      	beq.n	8007884 <put_fat+0x114>
 800779c:	2b03      	cmp	r3, #3
 800779e:	f000 8091 	beq.w	80078c4 <put_fat+0x154>
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	f040 80c6 	bne.w	8007934 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	61bb      	str	r3, [r7, #24]
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	4413      	add	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a1a      	ldr	r2, [r3, #32]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	0a5b      	lsrs	r3, r3, #9
 80077be:	4413      	add	r3, r2
 80077c0:	4619      	mov	r1, r3
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff fe74 	bl	80074b0 <move_window>
 80077c8:	4603      	mov	r3, r0
 80077ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077cc:	7ffb      	ldrb	r3, [r7, #31]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f040 80a9 	bne.w	8007926 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	1c59      	adds	r1, r3, #1
 80077de:	61b9      	str	r1, [r7, #24]
 80077e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e4:	4413      	add	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00d      	beq.n	800780e <put_fat+0x9e>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	b25a      	sxtb	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	b25b      	sxtb	r3, r3
 8007806:	4313      	orrs	r3, r2
 8007808:	b25b      	sxtb	r3, r3
 800780a:	b2db      	uxtb	r3, r3
 800780c:	e001      	b.n	8007812 <put_fat+0xa2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	b2db      	uxtb	r3, r3
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a1a      	ldr	r2, [r3, #32]
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	0a5b      	lsrs	r3, r3, #9
 8007824:	4413      	add	r3, r2
 8007826:	4619      	mov	r1, r3
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff fe41 	bl	80074b0 <move_window>
 800782e:	4603      	mov	r3, r0
 8007830:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007832:	7ffb      	ldrb	r3, [r7, #31]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d178      	bne.n	800792a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007844:	4413      	add	r3, r2
 8007846:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <put_fat+0xea>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	091b      	lsrs	r3, r3, #4
 8007856:	b2db      	uxtb	r3, r3
 8007858:	e00e      	b.n	8007878 <put_fat+0x108>
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	b25b      	sxtb	r3, r3
 8007860:	f023 030f 	bic.w	r3, r3, #15
 8007864:	b25a      	sxtb	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	0a1b      	lsrs	r3, r3, #8
 800786a:	b25b      	sxtb	r3, r3
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	b25b      	sxtb	r3, r3
 8007872:	4313      	orrs	r3, r2
 8007874:	b25b      	sxtb	r3, r3
 8007876:	b2db      	uxtb	r3, r3
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	70da      	strb	r2, [r3, #3]
			break;
 8007882:	e057      	b.n	8007934 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a1a      	ldr	r2, [r3, #32]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	0a1b      	lsrs	r3, r3, #8
 800788c:	4413      	add	r3, r2
 800788e:	4619      	mov	r1, r3
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7ff fe0d 	bl	80074b0 <move_window>
 8007896:	4603      	mov	r3, r0
 8007898:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800789a:	7ffb      	ldrb	r3, [r7, #31]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d146      	bne.n	800792e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80078ae:	4413      	add	r3, r2
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	b292      	uxth	r2, r2
 80078b4:	4611      	mov	r1, r2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff fb85 	bl	8006fc6 <st_word>
			fs->wflag = 1;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	70da      	strb	r2, [r3, #3]
			break;
 80078c2:	e037      	b.n	8007934 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a1a      	ldr	r2, [r3, #32]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	09db      	lsrs	r3, r3, #7
 80078cc:	4413      	add	r3, r2
 80078ce:	4619      	mov	r1, r3
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7ff fded 	bl	80074b0 <move_window>
 80078d6:	4603      	mov	r3, r0
 80078d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078da:	7ffb      	ldrb	r3, [r7, #31]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d128      	bne.n	8007932 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80078f4:	4413      	add	r3, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff fb42 	bl	8006f80 <ld_dword>
 80078fc:	4603      	mov	r3, r0
 80078fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007902:	4323      	orrs	r3, r4
 8007904:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007914:	4413      	add	r3, r2
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff fb6f 	bl	8006ffc <st_dword>
			fs->wflag = 1;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2201      	movs	r2, #1
 8007922:	70da      	strb	r2, [r3, #3]
			break;
 8007924:	e006      	b.n	8007934 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007926:	bf00      	nop
 8007928:	e004      	b.n	8007934 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800792a:	bf00      	nop
 800792c:	e002      	b.n	8007934 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800792e:	bf00      	nop
 8007930:	e000      	b.n	8007934 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007932:	bf00      	nop
		}
	}
	return res;
 8007934:	7ffb      	ldrb	r3, [r7, #31]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3724      	adds	r7, #36	; 0x24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd90      	pop	{r4, r7, pc}

0800793e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b088      	sub	sp, #32
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d904      	bls.n	8007964 <remove_chain+0x26>
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	429a      	cmp	r2, r3
 8007962:	d301      	bcc.n	8007968 <remove_chain+0x2a>
 8007964:	2302      	movs	r3, #2
 8007966:	e04b      	b.n	8007a00 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00c      	beq.n	8007988 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800796e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	69b8      	ldr	r0, [r7, #24]
 8007976:	f7ff fefb 	bl	8007770 <put_fat>
 800797a:	4603      	mov	r3, r0
 800797c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800797e:	7ffb      	ldrb	r3, [r7, #31]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <remove_chain+0x4a>
 8007984:	7ffb      	ldrb	r3, [r7, #31]
 8007986:	e03b      	b.n	8007a00 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f7ff fe4b 	bl	8007626 <get_fat>
 8007990:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d031      	beq.n	80079fc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <remove_chain+0x64>
 800799e:	2302      	movs	r3, #2
 80079a0:	e02e      	b.n	8007a00 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a8:	d101      	bne.n	80079ae <remove_chain+0x70>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e028      	b.n	8007a00 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80079ae:	2200      	movs	r2, #0
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	69b8      	ldr	r0, [r7, #24]
 80079b4:	f7ff fedc 	bl	8007770 <put_fat>
 80079b8:	4603      	mov	r3, r0
 80079ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80079bc:	7ffb      	ldrb	r3, [r7, #31]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <remove_chain+0x88>
 80079c2:	7ffb      	ldrb	r3, [r7, #31]
 80079c4:	e01c      	b.n	8007a00 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	691a      	ldr	r2, [r3, #16]
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	3b02      	subs	r3, #2
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d20b      	bcs.n	80079ec <remove_chain+0xae>
			fs->free_clst++;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	791b      	ldrb	r3, [r3, #4]
 80079e2:	f043 0301 	orr.w	r3, r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d3c6      	bcc.n	8007988 <remove_chain+0x4a>
 80079fa:	e000      	b.n	80079fe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80079fc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3720      	adds	r7, #32
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10d      	bne.n	8007a3a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d004      	beq.n	8007a34 <create_chain+0x2c>
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d31b      	bcc.n	8007a6c <create_chain+0x64>
 8007a34:	2301      	movs	r3, #1
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	e018      	b.n	8007a6c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff fdf2 	bl	8007626 <get_fat>
 8007a42:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d801      	bhi.n	8007a4e <create_chain+0x46>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e070      	b.n	8007b30 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a54:	d101      	bne.n	8007a5a <create_chain+0x52>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	e06a      	b.n	8007b30 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d201      	bcs.n	8007a68 <create_chain+0x60>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	e063      	b.n	8007b30 <create_chain+0x128>
		scl = clst;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	3301      	adds	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d307      	bcc.n	8007a90 <create_chain+0x88>
				ncl = 2;
 8007a80:	2302      	movs	r3, #2
 8007a82:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007a84:	69fa      	ldr	r2, [r7, #28]
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d901      	bls.n	8007a90 <create_chain+0x88>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	e04f      	b.n	8007b30 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007a90:	69f9      	ldr	r1, [r7, #28]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff fdc7 	bl	8007626 <get_fat>
 8007a98:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00e      	beq.n	8007abe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d003      	beq.n	8007aae <create_chain+0xa6>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aac:	d101      	bne.n	8007ab2 <create_chain+0xaa>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	e03e      	b.n	8007b30 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007ab2:	69fa      	ldr	r2, [r7, #28]
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d1da      	bne.n	8007a70 <create_chain+0x68>
 8007aba:	2300      	movs	r3, #0
 8007abc:	e038      	b.n	8007b30 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007abe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ac4:	69f9      	ldr	r1, [r7, #28]
 8007ac6:	6938      	ldr	r0, [r7, #16]
 8007ac8:	f7ff fe52 	bl	8007770 <put_fat>
 8007acc:	4603      	mov	r3, r0
 8007ace:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <create_chain+0xe2>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d006      	beq.n	8007aea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6938      	ldr	r0, [r7, #16]
 8007ae2:	f7ff fe45 	bl	8007770 <put_fat>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d116      	bne.n	8007b1e <create_chain+0x116>
		fs->last_clst = ncl;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	691a      	ldr	r2, [r3, #16]
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	3b02      	subs	r3, #2
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d804      	bhi.n	8007b0e <create_chain+0x106>
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	1e5a      	subs	r2, r3, #1
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	791b      	ldrb	r3, [r3, #4]
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	711a      	strb	r2, [r3, #4]
 8007b1c:	e007      	b.n	8007b2e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d102      	bne.n	8007b2a <create_chain+0x122>
 8007b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b28:	e000      	b.n	8007b2c <create_chain+0x124>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007b2e:	69fb      	ldr	r3, [r7, #28]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3720      	adds	r7, #32
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	0a5b      	lsrs	r3, r3, #9
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	8952      	ldrh	r2, [r2, #10]
 8007b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1d1a      	adds	r2, r3, #4
 8007b62:	613a      	str	r2, [r7, #16]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <clmt_clust+0x3a>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e010      	b.n	8007b94 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d307      	bcc.n	8007b8a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	3304      	adds	r3, #4
 8007b86:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b88:	e7e9      	b.n	8007b5e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007b8a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	4413      	add	r3, r2
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	371c      	adds	r7, #28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bb6:	d204      	bcs.n	8007bc2 <dir_sdi+0x22>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	f003 031f 	and.w	r3, r3, #31
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e063      	b.n	8007c8e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <dir_sdi+0x46>
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d902      	bls.n	8007be6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10c      	bne.n	8007c06 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	8912      	ldrh	r2, [r2, #8]
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d301      	bcc.n	8007bfc <dir_sdi+0x5c>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	e048      	b.n	8007c8e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	61da      	str	r2, [r3, #28]
 8007c04:	e029      	b.n	8007c5a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	895b      	ldrh	r3, [r3, #10]
 8007c0a:	025b      	lsls	r3, r3, #9
 8007c0c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007c0e:	e019      	b.n	8007c44 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6979      	ldr	r1, [r7, #20]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff fd06 	bl	8007626 <get_fat>
 8007c1a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c22:	d101      	bne.n	8007c28 <dir_sdi+0x88>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e032      	b.n	8007c8e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d904      	bls.n	8007c38 <dir_sdi+0x98>
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d301      	bcc.n	8007c3c <dir_sdi+0x9c>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e028      	b.n	8007c8e <dir_sdi+0xee>
			ofs -= csz;
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d2e1      	bcs.n	8007c10 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007c4c:	6979      	ldr	r1, [r7, #20]
 8007c4e:	6938      	ldr	r0, [r7, #16]
 8007c50:	f7ff fcca 	bl	80075e8 <clust2sect>
 8007c54:	4602      	mov	r2, r0
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <dir_sdi+0xcc>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	e010      	b.n	8007c8e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	69da      	ldr	r2, [r3, #28]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	0a5b      	lsrs	r3, r3, #9
 8007c74:	441a      	add	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c86:	441a      	add	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b086      	sub	sp, #24
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	3320      	adds	r3, #32
 8007cac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <dir_next+0x28>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cbc:	d301      	bcc.n	8007cc2 <dir_next+0x2c>
 8007cbe:	2304      	movs	r3, #4
 8007cc0:	e0aa      	b.n	8007e18 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f040 8098 	bne.w	8007dfe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10b      	bne.n	8007cf8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	095b      	lsrs	r3, r3, #5
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	8912      	ldrh	r2, [r2, #8]
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	f0c0 8088 	bcc.w	8007dfe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	61da      	str	r2, [r3, #28]
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	e08f      	b.n	8007e18 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	0a5b      	lsrs	r3, r3, #9
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	8952      	ldrh	r2, [r2, #10]
 8007d00:	3a01      	subs	r2, #1
 8007d02:	4013      	ands	r3, r2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d17a      	bne.n	8007dfe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7ff fc88 	bl	8007626 <get_fat>
 8007d16:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d801      	bhi.n	8007d22 <dir_next+0x8c>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e07a      	b.n	8007e18 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d28:	d101      	bne.n	8007d2e <dir_next+0x98>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e074      	b.n	8007e18 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d358      	bcc.n	8007dea <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d104      	bne.n	8007d48 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	61da      	str	r2, [r3, #28]
 8007d44:	2304      	movs	r3, #4
 8007d46:	e067      	b.n	8007e18 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4610      	mov	r0, r2
 8007d52:	f7ff fe59 	bl	8007a08 <create_chain>
 8007d56:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <dir_next+0xcc>
 8007d5e:	2307      	movs	r3, #7
 8007d60:	e05a      	b.n	8007e18 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <dir_next+0xd6>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e055      	b.n	8007e18 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d72:	d101      	bne.n	8007d78 <dir_next+0xe2>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e04f      	b.n	8007e18 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff fb55 	bl	8007428 <sync_window>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <dir_next+0xf2>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e047      	b.n	8007e18 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3330      	adds	r3, #48	; 0x30
 8007d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d90:	2100      	movs	r1, #0
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff f97f 	bl	8007096 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d98:	2300      	movs	r3, #0
 8007d9a:	613b      	str	r3, [r7, #16]
 8007d9c:	6979      	ldr	r1, [r7, #20]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7ff fc22 	bl	80075e8 <clust2sect>
 8007da4:	4602      	mov	r2, r0
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	62da      	str	r2, [r3, #44]	; 0x2c
 8007daa:	e012      	b.n	8007dd2 <dir_next+0x13c>
						fs->wflag = 1;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2201      	movs	r2, #1
 8007db0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff fb38 	bl	8007428 <sync_window>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <dir_next+0x12c>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e02a      	b.n	8007e18 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	895b      	ldrh	r3, [r3, #10]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d3e6      	bcc.n	8007dac <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	1ad2      	subs	r2, r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007df0:	6979      	ldr	r1, [r7, #20]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f7ff fbf8 	bl	80075e8 <clust2sect>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e10:	441a      	add	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007e30:	2100      	movs	r1, #0
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff feb4 	bl	8007ba0 <dir_sdi>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d12b      	bne.n	8007e9a <dir_alloc+0x7a>
		n = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f7ff fb2f 	bl	80074b0 <move_window>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d11d      	bne.n	8007e98 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2be5      	cmp	r3, #229	; 0xe5
 8007e64:	d004      	beq.n	8007e70 <dir_alloc+0x50>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d107      	bne.n	8007e80 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	3301      	adds	r3, #1
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d102      	bne.n	8007e84 <dir_alloc+0x64>
 8007e7e:	e00c      	b.n	8007e9a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007e80:	2300      	movs	r3, #0
 8007e82:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007e84:	2101      	movs	r1, #1
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff ff05 	bl	8007c96 <dir_next>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0d7      	beq.n	8007e46 <dir_alloc+0x26>
 8007e96:	e000      	b.n	8007e9a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007e98:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d101      	bne.n	8007ea4 <dir_alloc+0x84>
 8007ea0:	2307      	movs	r3, #7
 8007ea2:	75fb      	strb	r3, [r7, #23]
	return res;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b084      	sub	sp, #16
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	331a      	adds	r3, #26
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff f847 	bl	8006f50 <ld_word>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d109      	bne.n	8007ee2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	3314      	adds	r3, #20
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff f83c 	bl	8006f50 <ld_word>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	041b      	lsls	r3, r3, #16
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	331a      	adds	r3, #26
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	b292      	uxth	r2, r2
 8007f00:	4611      	mov	r1, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff f85f 	bl	8006fc6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	d109      	bne.n	8007f24 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f103 0214 	add.w	r2, r3, #20
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	0c1b      	lsrs	r3, r3, #16
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	f7ff f851 	bl	8006fc6 <st_word>
	}
}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff fe2f 	bl	8007ba0 <dir_sdi>
 8007f42:	4603      	mov	r3, r0
 8007f44:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <dir_find+0x24>
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
 8007f4e:	e03e      	b.n	8007fce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	4619      	mov	r1, r3
 8007f56:	6938      	ldr	r0, [r7, #16]
 8007f58:	f7ff faaa 	bl	80074b0 <move_window>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d12f      	bne.n	8007fc6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d102      	bne.n	8007f7a <dir_find+0x4e>
 8007f74:	2304      	movs	r3, #4
 8007f76:	75fb      	strb	r3, [r7, #23]
 8007f78:	e028      	b.n	8007fcc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	330b      	adds	r3, #11
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	330b      	adds	r3, #11
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	f003 0308 	and.w	r3, r3, #8
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <dir_find+0x86>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a18      	ldr	r0, [r3, #32]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3324      	adds	r3, #36	; 0x24
 8007fa4:	220b      	movs	r2, #11
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	f7ff f88f 	bl	80070ca <mem_cmp>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00b      	beq.n	8007fca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff fe6e 	bl	8007c96 <dir_next>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0c5      	beq.n	8007f50 <dir_find+0x24>
 8007fc4:	e002      	b.n	8007fcc <dir_find+0xa0>
		if (res != FR_OK) break;
 8007fc6:	bf00      	nop
 8007fc8:	e000      	b.n	8007fcc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007fca:	bf00      	nop

	return res;
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff ff1a 	bl	8007e20 <dir_alloc>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d11c      	bne.n	8008030 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	68b8      	ldr	r0, [r7, #8]
 8007ffe:	f7ff fa57 	bl	80074b0 <move_window>
 8008002:	4603      	mov	r3, r0
 8008004:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d111      	bne.n	8008030 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	2220      	movs	r2, #32
 8008012:	2100      	movs	r1, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff f83e 	bl	8007096 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a18      	ldr	r0, [r3, #32]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3324      	adds	r3, #36	; 0x24
 8008022:	220b      	movs	r2, #11
 8008024:	4619      	mov	r1, r3
 8008026:	f7ff f815 	bl	8007054 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2201      	movs	r2, #1
 800802e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3324      	adds	r3, #36	; 0x24
 8008050:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008052:	220b      	movs	r2, #11
 8008054:	2120      	movs	r1, #32
 8008056:	68b8      	ldr	r0, [r7, #8]
 8008058:	f7ff f81d 	bl	8007096 <mem_set>
	si = i = 0; ni = 8;
 800805c:	2300      	movs	r3, #0
 800805e:	613b      	str	r3, [r7, #16]
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	617b      	str	r3, [r7, #20]
 8008064:	2308      	movs	r3, #8
 8008066:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	617a      	str	r2, [r7, #20]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008076:	7ffb      	ldrb	r3, [r7, #31]
 8008078:	2b20      	cmp	r3, #32
 800807a:	d94e      	bls.n	800811a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800807c:	7ffb      	ldrb	r3, [r7, #31]
 800807e:	2b2f      	cmp	r3, #47	; 0x2f
 8008080:	d006      	beq.n	8008090 <create_name+0x54>
 8008082:	7ffb      	ldrb	r3, [r7, #31]
 8008084:	2b5c      	cmp	r3, #92	; 0x5c
 8008086:	d110      	bne.n	80080aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008088:	e002      	b.n	8008090 <create_name+0x54>
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	3301      	adds	r3, #1
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	4413      	add	r3, r2
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b2f      	cmp	r3, #47	; 0x2f
 800809a:	d0f6      	beq.n	800808a <create_name+0x4e>
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	4413      	add	r3, r2
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2b5c      	cmp	r3, #92	; 0x5c
 80080a6:	d0f0      	beq.n	800808a <create_name+0x4e>
			break;
 80080a8:	e038      	b.n	800811c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80080aa:	7ffb      	ldrb	r3, [r7, #31]
 80080ac:	2b2e      	cmp	r3, #46	; 0x2e
 80080ae:	d003      	beq.n	80080b8 <create_name+0x7c>
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d30c      	bcc.n	80080d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b0b      	cmp	r3, #11
 80080bc:	d002      	beq.n	80080c4 <create_name+0x88>
 80080be:	7ffb      	ldrb	r3, [r7, #31]
 80080c0:	2b2e      	cmp	r3, #46	; 0x2e
 80080c2:	d001      	beq.n	80080c8 <create_name+0x8c>
 80080c4:	2306      	movs	r3, #6
 80080c6:	e044      	b.n	8008152 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80080c8:	2308      	movs	r3, #8
 80080ca:	613b      	str	r3, [r7, #16]
 80080cc:	230b      	movs	r3, #11
 80080ce:	61bb      	str	r3, [r7, #24]
			continue;
 80080d0:	e022      	b.n	8008118 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80080d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	da04      	bge.n	80080e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80080da:	7ffb      	ldrb	r3, [r7, #31]
 80080dc:	3b80      	subs	r3, #128	; 0x80
 80080de:	4a1f      	ldr	r2, [pc, #124]	; (800815c <create_name+0x120>)
 80080e0:	5cd3      	ldrb	r3, [r2, r3]
 80080e2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80080e4:	7ffb      	ldrb	r3, [r7, #31]
 80080e6:	4619      	mov	r1, r3
 80080e8:	481d      	ldr	r0, [pc, #116]	; (8008160 <create_name+0x124>)
 80080ea:	f7ff f815 	bl	8007118 <chk_chr>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <create_name+0xbc>
 80080f4:	2306      	movs	r3, #6
 80080f6:	e02c      	b.n	8008152 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80080f8:	7ffb      	ldrb	r3, [r7, #31]
 80080fa:	2b60      	cmp	r3, #96	; 0x60
 80080fc:	d905      	bls.n	800810a <create_name+0xce>
 80080fe:	7ffb      	ldrb	r3, [r7, #31]
 8008100:	2b7a      	cmp	r3, #122	; 0x7a
 8008102:	d802      	bhi.n	800810a <create_name+0xce>
 8008104:	7ffb      	ldrb	r3, [r7, #31]
 8008106:	3b20      	subs	r3, #32
 8008108:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	613a      	str	r2, [r7, #16]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	4413      	add	r3, r2
 8008114:	7ffa      	ldrb	r2, [r7, #31]
 8008116:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008118:	e7a6      	b.n	8008068 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800811a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	441a      	add	r2, r3
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <create_name+0xf4>
 800812c:	2306      	movs	r3, #6
 800812e:	e010      	b.n	8008152 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2be5      	cmp	r3, #229	; 0xe5
 8008136:	d102      	bne.n	800813e <create_name+0x102>
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2205      	movs	r2, #5
 800813c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800813e:	7ffb      	ldrb	r3, [r7, #31]
 8008140:	2b20      	cmp	r3, #32
 8008142:	d801      	bhi.n	8008148 <create_name+0x10c>
 8008144:	2204      	movs	r2, #4
 8008146:	e000      	b.n	800814a <create_name+0x10e>
 8008148:	2200      	movs	r2, #0
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	330b      	adds	r3, #11
 800814e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008150:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008152:	4618      	mov	r0, r3
 8008154:	3720      	adds	r7, #32
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	080094dc 	.word	0x080094dc
 8008160:	080091fc 	.word	0x080091fc

08008164 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008178:	e002      	b.n	8008180 <follow_path+0x1c>
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	3301      	adds	r3, #1
 800817e:	603b      	str	r3, [r7, #0]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b2f      	cmp	r3, #47	; 0x2f
 8008186:	d0f8      	beq.n	800817a <follow_path+0x16>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b5c      	cmp	r3, #92	; 0x5c
 800818e:	d0f4      	beq.n	800817a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	2200      	movs	r2, #0
 8008194:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b1f      	cmp	r3, #31
 800819c:	d80a      	bhi.n	80081b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2280      	movs	r2, #128	; 0x80
 80081a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80081a6:	2100      	movs	r1, #0
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff fcf9 	bl	8007ba0 <dir_sdi>
 80081ae:	4603      	mov	r3, r0
 80081b0:	75fb      	strb	r3, [r7, #23]
 80081b2:	e043      	b.n	800823c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80081b4:	463b      	mov	r3, r7
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff ff3f 	bl	800803c <create_name>
 80081be:	4603      	mov	r3, r0
 80081c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d134      	bne.n	8008232 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff feaf 	bl	8007f2c <dir_find>
 80081ce:	4603      	mov	r3, r0
 80081d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80081d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d127      	bne.n	8008236 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80081e6:	7afb      	ldrb	r3, [r7, #11]
 80081e8:	f003 0304 	and.w	r3, r3, #4
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d122      	bne.n	8008236 <follow_path+0xd2>
 80081f0:	2305      	movs	r3, #5
 80081f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80081f4:	e01f      	b.n	8008236 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80081f6:	7afb      	ldrb	r3, [r7, #11]
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d11c      	bne.n	800823a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	799b      	ldrb	r3, [r3, #6]
 8008204:	f003 0310 	and.w	r3, r3, #16
 8008208:	2b00      	cmp	r3, #0
 800820a:	d102      	bne.n	8008212 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800820c:	2305      	movs	r3, #5
 800820e:	75fb      	strb	r3, [r7, #23]
 8008210:	e014      	b.n	800823c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008220:	4413      	add	r3, r2
 8008222:	4619      	mov	r1, r3
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff fe42 	bl	8007eae <ld_clust>
 800822a:	4602      	mov	r2, r0
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008230:	e7c0      	b.n	80081b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8008232:	bf00      	nop
 8008234:	e002      	b.n	800823c <follow_path+0xd8>
				break;
 8008236:	bf00      	nop
 8008238:	e000      	b.n	800823c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800823a:	bf00      	nop
			}
		}
	}

	return res;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008246:	b480      	push	{r7}
 8008248:	b087      	sub	sp, #28
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800824e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008252:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d031      	beq.n	80082c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	617b      	str	r3, [r7, #20]
 8008262:	e002      	b.n	800826a <get_ldnumber+0x24>
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	3301      	adds	r3, #1
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b20      	cmp	r3, #32
 8008270:	d903      	bls.n	800827a <get_ldnumber+0x34>
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b3a      	cmp	r3, #58	; 0x3a
 8008278:	d1f4      	bne.n	8008264 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b3a      	cmp	r3, #58	; 0x3a
 8008280:	d11c      	bne.n	80082bc <get_ldnumber+0x76>
			tp = *path;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	60fa      	str	r2, [r7, #12]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	3b30      	subs	r3, #48	; 0x30
 8008292:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b09      	cmp	r3, #9
 8008298:	d80e      	bhi.n	80082b8 <get_ldnumber+0x72>
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d10a      	bne.n	80082b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d107      	bne.n	80082b8 <get_ldnumber+0x72>
					vol = (int)i;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	3301      	adds	r3, #1
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	e002      	b.n	80082c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80082c0:	693b      	ldr	r3, [r7, #16]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	70da      	strb	r2, [r3, #3]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7ff f8e0 	bl	80074b0 <move_window>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <check_fs+0x2a>
 80082f6:	2304      	movs	r3, #4
 80082f8:	e038      	b.n	800836c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3330      	adds	r3, #48	; 0x30
 80082fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fe24 	bl	8006f50 <ld_word>
 8008308:	4603      	mov	r3, r0
 800830a:	461a      	mov	r2, r3
 800830c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008310:	429a      	cmp	r2, r3
 8008312:	d001      	beq.n	8008318 <check_fs+0x48>
 8008314:	2303      	movs	r3, #3
 8008316:	e029      	b.n	800836c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800831e:	2be9      	cmp	r3, #233	; 0xe9
 8008320:	d009      	beq.n	8008336 <check_fs+0x66>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008328:	2beb      	cmp	r3, #235	; 0xeb
 800832a:	d11e      	bne.n	800836a <check_fs+0x9a>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008332:	2b90      	cmp	r3, #144	; 0x90
 8008334:	d119      	bne.n	800836a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3330      	adds	r3, #48	; 0x30
 800833a:	3336      	adds	r3, #54	; 0x36
 800833c:	4618      	mov	r0, r3
 800833e:	f7fe fe1f 	bl	8006f80 <ld_dword>
 8008342:	4603      	mov	r3, r0
 8008344:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008348:	4a0a      	ldr	r2, [pc, #40]	; (8008374 <check_fs+0xa4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d101      	bne.n	8008352 <check_fs+0x82>
 800834e:	2300      	movs	r3, #0
 8008350:	e00c      	b.n	800836c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3330      	adds	r3, #48	; 0x30
 8008356:	3352      	adds	r3, #82	; 0x52
 8008358:	4618      	mov	r0, r3
 800835a:	f7fe fe11 	bl	8006f80 <ld_dword>
 800835e:	4602      	mov	r2, r0
 8008360:	4b05      	ldr	r3, [pc, #20]	; (8008378 <check_fs+0xa8>)
 8008362:	429a      	cmp	r2, r3
 8008364:	d101      	bne.n	800836a <check_fs+0x9a>
 8008366:	2300      	movs	r3, #0
 8008368:	e000      	b.n	800836c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800836a:	2302      	movs	r3, #2
}
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	00544146 	.word	0x00544146
 8008378:	33544146 	.word	0x33544146

0800837c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b096      	sub	sp, #88	; 0x58
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	4613      	mov	r3, r2
 8008388:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff ff58 	bl	8008246 <get_ldnumber>
 8008396:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839a:	2b00      	cmp	r3, #0
 800839c:	da01      	bge.n	80083a2 <find_volume+0x26>
 800839e:	230b      	movs	r3, #11
 80083a0:	e22e      	b.n	8008800 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80083a2:	4aa8      	ldr	r2, [pc, #672]	; (8008644 <find_volume+0x2c8>)
 80083a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <find_volume+0x3a>
 80083b2:	230c      	movs	r3, #12
 80083b4:	e224      	b.n	8008800 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	f023 0301 	bic.w	r3, r3, #1
 80083c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80083c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01a      	beq.n	8008402 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	785b      	ldrb	r3, [r3, #1]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fe fd1f 	bl	8006e14 <disk_status>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80083dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10c      	bne.n	8008402 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d007      	beq.n	80083fe <find_volume+0x82>
 80083ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083f2:	f003 0304 	and.w	r3, r3, #4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80083fa:	230a      	movs	r3, #10
 80083fc:	e200      	b.n	8008800 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80083fe:	2300      	movs	r3, #0
 8008400:	e1fe      	b.n	8008800 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	2200      	movs	r2, #0
 8008406:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840a:	b2da      	uxtb	r2, r3
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008412:	785b      	ldrb	r3, [r3, #1]
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe fd17 	bl	8006e48 <disk_initialize>
 800841a:	4603      	mov	r3, r0
 800841c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008420:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800842c:	2303      	movs	r3, #3
 800842e:	e1e7      	b.n	8008800 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <find_volume+0xca>
 8008436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800843a:	f003 0304 	and.w	r3, r3, #4
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008442:	230a      	movs	r3, #10
 8008444:	e1dc      	b.n	8008800 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800844a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800844c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800844e:	f7ff ff3f 	bl	80082d0 <check_fs>
 8008452:	4603      	mov	r3, r0
 8008454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008458:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800845c:	2b02      	cmp	r3, #2
 800845e:	d14b      	bne.n	80084f8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008460:	2300      	movs	r3, #0
 8008462:	643b      	str	r3, [r7, #64]	; 0x40
 8008464:	e01f      	b.n	80084a6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008468:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800846c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800846e:	011b      	lsls	r3, r3, #4
 8008470:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008474:	4413      	add	r3, r2
 8008476:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	3304      	adds	r3, #4
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d006      	beq.n	8008490 <find_volume+0x114>
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	3308      	adds	r3, #8
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fd7a 	bl	8006f80 <ld_dword>
 800848c:	4602      	mov	r2, r0
 800848e:	e000      	b.n	8008492 <find_volume+0x116>
 8008490:	2200      	movs	r2, #0
 8008492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800849a:	440b      	add	r3, r1
 800849c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80084a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a2:	3301      	adds	r3, #1
 80084a4:	643b      	str	r3, [r7, #64]	; 0x40
 80084a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d9dc      	bls.n	8008466 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80084ac:	2300      	movs	r3, #0
 80084ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80084b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <find_volume+0x140>
 80084b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b8:	3b01      	subs	r3, #1
 80084ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80084bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80084c4:	4413      	add	r3, r2
 80084c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80084ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80084cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d005      	beq.n	80084de <find_volume+0x162>
 80084d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084d6:	f7ff fefb 	bl	80082d0 <check_fs>
 80084da:	4603      	mov	r3, r0
 80084dc:	e000      	b.n	80084e0 <find_volume+0x164>
 80084de:	2303      	movs	r3, #3
 80084e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80084e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d905      	bls.n	80084f8 <find_volume+0x17c>
 80084ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ee:	3301      	adds	r3, #1
 80084f0:	643b      	str	r3, [r7, #64]	; 0x40
 80084f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	d9e1      	bls.n	80084bc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80084f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d101      	bne.n	8008504 <find_volume+0x188>
 8008500:	2301      	movs	r3, #1
 8008502:	e17d      	b.n	8008800 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008508:	2b01      	cmp	r3, #1
 800850a:	d901      	bls.n	8008510 <find_volume+0x194>
 800850c:	230d      	movs	r3, #13
 800850e:	e177      	b.n	8008800 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008512:	3330      	adds	r3, #48	; 0x30
 8008514:	330b      	adds	r3, #11
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe fd1a 	bl	8006f50 <ld_word>
 800851c:	4603      	mov	r3, r0
 800851e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008522:	d001      	beq.n	8008528 <find_volume+0x1ac>
 8008524:	230d      	movs	r3, #13
 8008526:	e16b      	b.n	8008800 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	3330      	adds	r3, #48	; 0x30
 800852c:	3316      	adds	r3, #22
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe fd0e 	bl	8006f50 <ld_word>
 8008534:	4603      	mov	r3, r0
 8008536:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800853a:	2b00      	cmp	r3, #0
 800853c:	d106      	bne.n	800854c <find_volume+0x1d0>
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008540:	3330      	adds	r3, #48	; 0x30
 8008542:	3324      	adds	r3, #36	; 0x24
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe fd1b 	bl	8006f80 <ld_dword>
 800854a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008550:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	789b      	ldrb	r3, [r3, #2]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d005      	beq.n	8008570 <find_volume+0x1f4>
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	789b      	ldrb	r3, [r3, #2]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d001      	beq.n	8008570 <find_volume+0x1f4>
 800856c:	230d      	movs	r3, #13
 800856e:	e147      	b.n	8008800 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	789b      	ldrb	r3, [r3, #2]
 8008574:	461a      	mov	r2, r3
 8008576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008578:	fb02 f303 	mul.w	r3, r2, r3
 800857c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008584:	b29a      	uxth	r2, r3
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	895b      	ldrh	r3, [r3, #10]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d008      	beq.n	80085a4 <find_volume+0x228>
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	895b      	ldrh	r3, [r3, #10]
 8008596:	461a      	mov	r2, r3
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	895b      	ldrh	r3, [r3, #10]
 800859c:	3b01      	subs	r3, #1
 800859e:	4013      	ands	r3, r2
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <find_volume+0x22c>
 80085a4:	230d      	movs	r3, #13
 80085a6:	e12b      	b.n	8008800 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	3330      	adds	r3, #48	; 0x30
 80085ac:	3311      	adds	r3, #17
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe fcce 	bl	8006f50 <ld_word>
 80085b4:	4603      	mov	r3, r0
 80085b6:	461a      	mov	r2, r3
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80085bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085be:	891b      	ldrh	r3, [r3, #8]
 80085c0:	f003 030f 	and.w	r3, r3, #15
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <find_volume+0x252>
 80085ca:	230d      	movs	r3, #13
 80085cc:	e118      	b.n	8008800 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	3330      	adds	r3, #48	; 0x30
 80085d2:	3313      	adds	r3, #19
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe fcbb 	bl	8006f50 <ld_word>
 80085da:	4603      	mov	r3, r0
 80085dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80085de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d106      	bne.n	80085f2 <find_volume+0x276>
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	3330      	adds	r3, #48	; 0x30
 80085e8:	3320      	adds	r3, #32
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fcc8 	bl	8006f80 <ld_dword>
 80085f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	3330      	adds	r3, #48	; 0x30
 80085f6:	330e      	adds	r3, #14
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fe fca9 	bl	8006f50 <ld_word>
 80085fe:	4603      	mov	r3, r0
 8008600:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008602:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <find_volume+0x290>
 8008608:	230d      	movs	r3, #13
 800860a:	e0f9      	b.n	8008800 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800860c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800860e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008610:	4413      	add	r3, r2
 8008612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008614:	8912      	ldrh	r2, [r2, #8]
 8008616:	0912      	lsrs	r2, r2, #4
 8008618:	b292      	uxth	r2, r2
 800861a:	4413      	add	r3, r2
 800861c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800861e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	429a      	cmp	r2, r3
 8008624:	d201      	bcs.n	800862a <find_volume+0x2ae>
 8008626:	230d      	movs	r3, #13
 8008628:	e0ea      	b.n	8008800 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800862a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008632:	8952      	ldrh	r2, [r2, #10]
 8008634:	fbb3 f3f2 	udiv	r3, r3, r2
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	d103      	bne.n	8008648 <find_volume+0x2cc>
 8008640:	230d      	movs	r3, #13
 8008642:	e0dd      	b.n	8008800 <find_volume+0x484>
 8008644:	2000004c 	.word	0x2000004c
		fmt = FS_FAT32;
 8008648:	2303      	movs	r3, #3
 800864a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008654:	4293      	cmp	r3, r2
 8008656:	d802      	bhi.n	800865e <find_volume+0x2e2>
 8008658:	2302      	movs	r3, #2
 800865a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008664:	4293      	cmp	r3, r2
 8008666:	d802      	bhi.n	800866e <find_volume+0x2f2>
 8008668:	2301      	movs	r3, #1
 800866a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	1c9a      	adds	r2, r3, #2
 8008672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008674:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008678:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800867a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800867c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800867e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008680:	441a      	add	r2, r3
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008686:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	441a      	add	r2, r3
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008694:	2b03      	cmp	r3, #3
 8008696:	d11e      	bne.n	80086d6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869a:	3330      	adds	r3, #48	; 0x30
 800869c:	332a      	adds	r3, #42	; 0x2a
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe fc56 	bl	8006f50 <ld_word>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <find_volume+0x332>
 80086aa:	230d      	movs	r3, #13
 80086ac:	e0a8      	b.n	8008800 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	891b      	ldrh	r3, [r3, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <find_volume+0x33e>
 80086b6:	230d      	movs	r3, #13
 80086b8:	e0a2      	b.n	8008800 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	3330      	adds	r3, #48	; 0x30
 80086be:	332c      	adds	r3, #44	; 0x2c
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fe fc5d 	bl	8006f80 <ld_dword>
 80086c6:	4602      	mov	r2, r0
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	647b      	str	r3, [r7, #68]	; 0x44
 80086d4:	e01f      	b.n	8008716 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	891b      	ldrh	r3, [r3, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <find_volume+0x366>
 80086de:	230d      	movs	r3, #13
 80086e0:	e08e      	b.n	8008800 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	6a1a      	ldr	r2, [r3, #32]
 80086e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e8:	441a      	add	r2, r3
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80086ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d103      	bne.n	80086fe <find_volume+0x382>
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	e00a      	b.n	8008714 <find_volume+0x398>
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	695a      	ldr	r2, [r3, #20]
 8008702:	4613      	mov	r3, r2
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	4413      	add	r3, r2
 8008708:	085a      	lsrs	r2, r3, #1
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008714:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008718:	699a      	ldr	r2, [r3, #24]
 800871a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008720:	0a5b      	lsrs	r3, r3, #9
 8008722:	429a      	cmp	r2, r3
 8008724:	d201      	bcs.n	800872a <find_volume+0x3ae>
 8008726:	230d      	movs	r3, #13
 8008728:	e06a      	b.n	8008800 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008730:	611a      	str	r2, [r3, #16]
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	691a      	ldr	r2, [r3, #16]
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	2280      	movs	r2, #128	; 0x80
 800873e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008740:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008744:	2b03      	cmp	r3, #3
 8008746:	d149      	bne.n	80087dc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	3330      	adds	r3, #48	; 0x30
 800874c:	3330      	adds	r3, #48	; 0x30
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fbfe 	bl	8006f50 <ld_word>
 8008754:	4603      	mov	r3, r0
 8008756:	2b01      	cmp	r3, #1
 8008758:	d140      	bne.n	80087dc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800875a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800875c:	3301      	adds	r3, #1
 800875e:	4619      	mov	r1, r3
 8008760:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008762:	f7fe fea5 	bl	80074b0 <move_window>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d137      	bne.n	80087dc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	2200      	movs	r2, #0
 8008770:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	3330      	adds	r3, #48	; 0x30
 8008776:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800877a:	4618      	mov	r0, r3
 800877c:	f7fe fbe8 	bl	8006f50 <ld_word>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008788:	429a      	cmp	r2, r3
 800878a:	d127      	bne.n	80087dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	3330      	adds	r3, #48	; 0x30
 8008790:	4618      	mov	r0, r3
 8008792:	f7fe fbf5 	bl	8006f80 <ld_dword>
 8008796:	4602      	mov	r2, r0
 8008798:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <find_volume+0x48c>)
 800879a:	429a      	cmp	r2, r3
 800879c:	d11e      	bne.n	80087dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	3330      	adds	r3, #48	; 0x30
 80087a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe fbea 	bl	8006f80 <ld_dword>
 80087ac:	4602      	mov	r2, r0
 80087ae:	4b17      	ldr	r3, [pc, #92]	; (800880c <find_volume+0x490>)
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d113      	bne.n	80087dc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	3330      	adds	r3, #48	; 0x30
 80087b8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fe fbdf 	bl	8006f80 <ld_dword>
 80087c2:	4602      	mov	r2, r0
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	3330      	adds	r3, #48	; 0x30
 80087cc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe fbd5 	bl	8006f80 <ld_dword>
 80087d6:	4602      	mov	r2, r0
 80087d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087da:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80087e2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80087e4:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <find_volume+0x494>)
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	4b08      	ldr	r3, [pc, #32]	; (8008810 <find_volume+0x494>)
 80087ee:	801a      	strh	r2, [r3, #0]
 80087f0:	4b07      	ldr	r3, [pc, #28]	; (8008810 <find_volume+0x494>)
 80087f2:	881a      	ldrh	r2, [r3, #0]
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80087f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087fa:	f7fe fdf1 	bl	80073e0 <clear_lock>
#endif
	return FR_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3758      	adds	r7, #88	; 0x58
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	41615252 	.word	0x41615252
 800880c:	61417272 	.word	0x61417272
 8008810:	20000050 	.word	0x20000050

08008814 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800881e:	2309      	movs	r3, #9
 8008820:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d01c      	beq.n	8008862 <validate+0x4e>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d018      	beq.n	8008862 <validate+0x4e>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d013      	beq.n	8008862 <validate+0x4e>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	889a      	ldrh	r2, [r3, #4]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	88db      	ldrh	r3, [r3, #6]
 8008844:	429a      	cmp	r2, r3
 8008846:	d10c      	bne.n	8008862 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	785b      	ldrb	r3, [r3, #1]
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fae0 	bl	8006e14 <disk_status>
 8008854:	4603      	mov	r3, r0
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <validate+0x4e>
			res = FR_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d102      	bne.n	800886e <validate+0x5a>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	e000      	b.n	8008870 <validate+0x5c>
 800886e:	2300      	movs	r3, #0
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	6013      	str	r3, [r2, #0]
	return res;
 8008874:	7bfb      	ldrb	r3, [r7, #15]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b088      	sub	sp, #32
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008892:	f107 0310 	add.w	r3, r7, #16
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff fcd5 	bl	8008246 <get_ldnumber>
 800889c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	da01      	bge.n	80088a8 <f_mount+0x28>
 80088a4:	230b      	movs	r3, #11
 80088a6:	e02b      	b.n	8008900 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80088a8:	4a17      	ldr	r2, [pc, #92]	; (8008908 <f_mount+0x88>)
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d005      	beq.n	80088c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80088b8:	69b8      	ldr	r0, [r7, #24]
 80088ba:	f7fe fd91 	bl	80073e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	2200      	movs	r2, #0
 80088c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	490d      	ldr	r1, [pc, #52]	; (8008908 <f_mount+0x88>)
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <f_mount+0x66>
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d001      	beq.n	80088ea <f_mount+0x6a>
 80088e6:	2300      	movs	r3, #0
 80088e8:	e00a      	b.n	8008900 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80088ea:	f107 010c 	add.w	r1, r7, #12
 80088ee:	f107 0308 	add.w	r3, r7, #8
 80088f2:	2200      	movs	r2, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff fd41 	bl	800837c <find_volume>
 80088fa:	4603      	mov	r3, r0
 80088fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3720      	adds	r7, #32
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	2000004c 	.word	0x2000004c

0800890c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b098      	sub	sp, #96	; 0x60
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	4613      	mov	r3, r2
 8008918:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <f_open+0x18>
 8008920:	2309      	movs	r3, #9
 8008922:	e1ad      	b.n	8008c80 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800892a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800892c:	79fa      	ldrb	r2, [r7, #7]
 800892e:	f107 0110 	add.w	r1, r7, #16
 8008932:	f107 0308 	add.w	r3, r7, #8
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff fd20 	bl	800837c <find_volume>
 800893c:	4603      	mov	r3, r0
 800893e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008942:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008946:	2b00      	cmp	r3, #0
 8008948:	f040 8191 	bne.w	8008c6e <f_open+0x362>
		dj.obj.fs = fs;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	f107 0314 	add.w	r3, r7, #20
 8008956:	4611      	mov	r1, r2
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff fc03 	bl	8008164 <follow_path>
 800895e:	4603      	mov	r3, r0
 8008960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008964:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008968:	2b00      	cmp	r3, #0
 800896a:	d11a      	bne.n	80089a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800896c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008970:	b25b      	sxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	da03      	bge.n	800897e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008976:	2306      	movs	r3, #6
 8008978:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800897c:	e011      	b.n	80089a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	f023 0301 	bic.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	461a      	mov	r2, r3
 8008990:	f107 0314 	add.w	r3, r7, #20
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fbda 	bl	8007150 <chk_lock>
 800899c:	4603      	mov	r3, r0
 800899e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	f003 031c 	and.w	r3, r3, #28
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d07f      	beq.n	8008aac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80089ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d017      	beq.n	80089e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80089b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d10e      	bne.n	80089da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80089bc:	f7fe fc24 	bl	8007208 <enq_lock>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d006      	beq.n	80089d4 <f_open+0xc8>
 80089c6:	f107 0314 	add.w	r3, r7, #20
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff fb03 	bl	8007fd6 <dir_register>
 80089d0:	4603      	mov	r3, r0
 80089d2:	e000      	b.n	80089d6 <f_open+0xca>
 80089d4:	2312      	movs	r3, #18
 80089d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80089da:	79fb      	ldrb	r3, [r7, #7]
 80089dc:	f043 0308 	orr.w	r3, r3, #8
 80089e0:	71fb      	strb	r3, [r7, #7]
 80089e2:	e010      	b.n	8008a06 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80089e4:	7ebb      	ldrb	r3, [r7, #26]
 80089e6:	f003 0311 	and.w	r3, r3, #17
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <f_open+0xea>
					res = FR_DENIED;
 80089ee:	2307      	movs	r3, #7
 80089f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80089f4:	e007      	b.n	8008a06 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	f003 0304 	and.w	r3, r3, #4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <f_open+0xfa>
 8008a00:	2308      	movs	r3, #8
 8008a02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008a06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d168      	bne.n	8008ae0 <f_open+0x1d4>
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	f003 0308 	and.w	r3, r3, #8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d063      	beq.n	8008ae0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008a18:	f7fe f99e 	bl	8006d58 <get_fattime>
 8008a1c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a20:	330e      	adds	r3, #14
 8008a22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fe fae9 	bl	8006ffc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2c:	3316      	adds	r3, #22
 8008a2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fae3 	bl	8006ffc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	330b      	adds	r3, #11
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff fa32 	bl	8007eae <ld_clust>
 8008a4a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a50:	2200      	movs	r2, #0
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7ff fa4a 	bl	8007eec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5a:	331c      	adds	r3, #28
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe facc 	bl	8006ffc <st_dword>
					fs->wflag = 1;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2201      	movs	r2, #1
 8008a68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d037      	beq.n	8008ae0 <f_open+0x1d4>
						dw = fs->winsect;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a74:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008a76:	f107 0314 	add.w	r3, r7, #20
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe ff5d 	bl	800793e <remove_chain>
 8008a84:	4603      	mov	r3, r0
 8008a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d126      	bne.n	8008ae0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe fd0a 	bl	80074b0 <move_window>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008aa6:	3a01      	subs	r2, #1
 8008aa8:	60da      	str	r2, [r3, #12]
 8008aaa:	e019      	b.n	8008ae0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008aac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d115      	bne.n	8008ae0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008ab4:	7ebb      	ldrb	r3, [r7, #26]
 8008ab6:	f003 0310 	and.w	r3, r3, #16
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008abe:	2304      	movs	r3, #4
 8008ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ac4:	e00c      	b.n	8008ae0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d007      	beq.n	8008ae0 <f_open+0x1d4>
 8008ad0:	7ebb      	ldrb	r3, [r7, #26]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <f_open+0x1d4>
						res = FR_DENIED;
 8008ada:	2307      	movs	r3, #7
 8008adc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d128      	bne.n	8008b3a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008ae8:	79fb      	ldrb	r3, [r7, #7]
 8008aea:	f003 0308 	and.w	r3, r3, #8
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008af2:	79fb      	ldrb	r3, [r7, #7]
 8008af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008af8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	f023 0301 	bic.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	bf14      	ite	ne
 8008b12:	2301      	movne	r3, #1
 8008b14:	2300      	moveq	r3, #0
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	461a      	mov	r2, r3
 8008b1a:	f107 0314 	add.w	r3, r7, #20
 8008b1e:	4611      	mov	r1, r2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fe fb93 	bl	800724c <inc_lock>
 8008b26:	4602      	mov	r2, r0
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d102      	bne.n	8008b3a <f_open+0x22e>
 8008b34:	2302      	movs	r3, #2
 8008b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008b3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f040 8095 	bne.w	8008c6e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff f9af 	bl	8007eae <ld_clust>
 8008b50:	4602      	mov	r2, r0
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b58:	331c      	adds	r3, #28
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fa10 	bl	8006f80 <ld_dword>
 8008b60:	4602      	mov	r2, r0
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	88da      	ldrh	r2, [r3, #6]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	79fa      	ldrb	r2, [r7, #7]
 8008b7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3330      	adds	r3, #48	; 0x30
 8008b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fa7a 	bl	8007096 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008ba2:	79fb      	ldrb	r3, [r7, #7]
 8008ba4:	f003 0320 	and.w	r3, r3, #32
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d060      	beq.n	8008c6e <f_open+0x362>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d05c      	beq.n	8008c6e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	895b      	ldrh	r3, [r3, #10]
 8008bc0:	025b      	lsls	r3, r3, #9
 8008bc2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	657b      	str	r3, [r7, #84]	; 0x54
 8008bd0:	e016      	b.n	8008c00 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe fd25 	bl	8007626 <get_fat>
 8008bdc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d802      	bhi.n	8008bea <f_open+0x2de>
 8008be4:	2302      	movs	r3, #2
 8008be6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bf0:	d102      	bne.n	8008bf8 <f_open+0x2ec>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8008c00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d103      	bne.n	8008c10 <f_open+0x304>
 8008c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d8e0      	bhi.n	8008bd2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008c16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d127      	bne.n	8008c6e <f_open+0x362>
 8008c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d022      	beq.n	8008c6e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fe fcdb 	bl	80075e8 <clust2sect>
 8008c32:	6478      	str	r0, [r7, #68]	; 0x44
 8008c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d103      	bne.n	8008c42 <f_open+0x336>
						res = FR_INT_ERR;
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008c40:	e015      	b.n	8008c6e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c44:	0a5a      	lsrs	r2, r3, #9
 8008c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c48:	441a      	add	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	7858      	ldrb	r0, [r3, #1]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6a1a      	ldr	r2, [r3, #32]
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	f7fe f919 	bl	8006e94 <disk_read>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <f_open+0x362>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <f_open+0x370>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3760      	adds	r7, #96	; 0x60
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08c      	sub	sp, #48	; 0x30
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f107 0210 	add.w	r2, r7, #16
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff fdb3 	bl	8008814 <validate>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d107      	bne.n	8008ccc <f_write+0x44>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	7d5b      	ldrb	r3, [r3, #21]
 8008cc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <f_write+0x4a>
 8008ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cd0:	e14b      	b.n	8008f6a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	7d1b      	ldrb	r3, [r3, #20]
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <f_write+0x5a>
 8008cde:	2307      	movs	r3, #7
 8008ce0:	e143      	b.n	8008f6a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	699a      	ldr	r2, [r3, #24]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	441a      	add	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	f080 812d 	bcs.w	8008f4e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	43db      	mvns	r3, r3
 8008cfa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008cfc:	e127      	b.n	8008f4e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f040 80e3 	bne.w	8008ed2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	0a5b      	lsrs	r3, r3, #9
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	8952      	ldrh	r2, [r2, #10]
 8008d16:	3a01      	subs	r2, #1
 8008d18:	4013      	ands	r3, r2
 8008d1a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d143      	bne.n	8008daa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10c      	bne.n	8008d44 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d11a      	bne.n	8008d6c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2100      	movs	r1, #0
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fe64 	bl	8007a08 <create_chain>
 8008d40:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d42:	e013      	b.n	8008d6c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d007      	beq.n	8008d5c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	4619      	mov	r1, r3
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7fe fef0 	bl	8007b38 <clmt_clust>
 8008d58:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d5a:	e007      	b.n	8008d6c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	69db      	ldr	r3, [r3, #28]
 8008d62:	4619      	mov	r1, r3
 8008d64:	4610      	mov	r0, r2
 8008d66:	f7fe fe4f 	bl	8007a08 <create_chain>
 8008d6a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 80f2 	beq.w	8008f58 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d104      	bne.n	8008d84 <f_write+0xfc>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	755a      	strb	r2, [r3, #21]
 8008d80:	2302      	movs	r3, #2
 8008d82:	e0f2      	b.n	8008f6a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d8a:	d104      	bne.n	8008d96 <f_write+0x10e>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	755a      	strb	r2, [r3, #21]
 8008d92:	2301      	movs	r3, #1
 8008d94:	e0e9      	b.n	8008f6a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d9a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d102      	bne.n	8008daa <f_write+0x122>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008da8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	7d1b      	ldrb	r3, [r3, #20]
 8008dae:	b25b      	sxtb	r3, r3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da18      	bge.n	8008de6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	7858      	ldrb	r0, [r3, #1]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a1a      	ldr	r2, [r3, #32]
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	f7fe f886 	bl	8006ed4 <disk_write>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <f_write+0x150>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	755a      	strb	r2, [r3, #21]
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e0c8      	b.n	8008f6a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	7d1b      	ldrb	r3, [r3, #20]
 8008ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7fe fbfa 	bl	80075e8 <clust2sect>
 8008df4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d104      	bne.n	8008e06 <f_write+0x17e>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	755a      	strb	r2, [r3, #21]
 8008e02:	2302      	movs	r3, #2
 8008e04:	e0b1      	b.n	8008f6a <f_write+0x2e2>
			sect += csect;
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	0a5b      	lsrs	r3, r3, #9
 8008e12:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d03c      	beq.n	8008e94 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	4413      	add	r3, r2
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	8952      	ldrh	r2, [r2, #10]
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d905      	bls.n	8008e34 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	895b      	ldrh	r3, [r3, #10]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	7858      	ldrb	r0, [r3, #1]
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	69f9      	ldr	r1, [r7, #28]
 8008e3e:	f7fe f849 	bl	8006ed4 <disk_write>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <f_write+0x1ca>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	755a      	strb	r2, [r3, #21]
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e08b      	b.n	8008f6a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a1a      	ldr	r2, [r3, #32]
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	6a3a      	ldr	r2, [r7, #32]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d915      	bls.n	8008e8c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a1a      	ldr	r2, [r3, #32]
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	025b      	lsls	r3, r3, #9
 8008e70:	69fa      	ldr	r2, [r7, #28]
 8008e72:	4413      	add	r3, r2
 8008e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f7fe f8eb 	bl	8007054 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	7d1b      	ldrb	r3, [r3, #20]
 8008e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	025b      	lsls	r3, r3, #9
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008e92:	e03f      	b.n	8008f14 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d016      	beq.n	8008ecc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	699a      	ldr	r2, [r3, #24]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d210      	bcs.n	8008ecc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	7858      	ldrb	r0, [r3, #1]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	f7fd ffec 	bl	8006e94 <disk_read>
 8008ebc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d004      	beq.n	8008ecc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	755a      	strb	r2, [r3, #21]
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e04e      	b.n	8008f6a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eda:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d901      	bls.n	8008eec <f_write+0x264>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efa:	4413      	add	r3, r2
 8008efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efe:	69f9      	ldr	r1, [r7, #28]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fe f8a7 	bl	8007054 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	7d1b      	ldrb	r3, [r3, #20]
 8008f0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008f14:	69fa      	ldr	r2, [r7, #28]
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	4413      	add	r3, r2
 8008f1a:	61fb      	str	r3, [r7, #28]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	699a      	ldr	r2, [r3, #24]
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	441a      	add	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	619a      	str	r2, [r3, #24]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	bf38      	it	cc
 8008f34:	461a      	movcc	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	441a      	add	r2, r3
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f47f aed4 	bne.w	8008cfe <f_write+0x76>
 8008f56:	e000      	b.n	8008f5a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f58:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	7d1b      	ldrb	r3, [r3, #20]
 8008f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3730      	adds	r7, #48	; 0x30
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b086      	sub	sp, #24
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f107 0208 	add.w	r2, r7, #8
 8008f80:	4611      	mov	r1, r2
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff fc46 	bl	8008814 <validate>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d168      	bne.n	8009064 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	7d1b      	ldrb	r3, [r3, #20]
 8008f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d062      	beq.n	8009064 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	7d1b      	ldrb	r3, [r3, #20]
 8008fa2:	b25b      	sxtb	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	da15      	bge.n	8008fd4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	7858      	ldrb	r0, [r3, #1]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1a      	ldr	r2, [r3, #32]
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f7fd ff8c 	bl	8006ed4 <disk_write>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <f_sync+0x54>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e04f      	b.n	8009066 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	7d1b      	ldrb	r3, [r3, #20]
 8008fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008fd4:	f7fd fec0 	bl	8006d58 <get_fattime>
 8008fd8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f7fe fa64 	bl	80074b0 <move_window>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d138      	bne.n	8009064 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	330b      	adds	r3, #11
 8008ffc:	781a      	ldrb	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	330b      	adds	r3, #11
 8009002:	f042 0220 	orr.w	r2, r2, #32
 8009006:	b2d2      	uxtb	r2, r2
 8009008:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6818      	ldr	r0, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	461a      	mov	r2, r3
 8009014:	68f9      	ldr	r1, [r7, #12]
 8009016:	f7fe ff69 	bl	8007eec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f103 021c 	add.w	r2, r3, #28
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f7fd ffe8 	bl	8006ffc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	3316      	adds	r3, #22
 8009030:	6939      	ldr	r1, [r7, #16]
 8009032:	4618      	mov	r0, r3
 8009034:	f7fd ffe2 	bl	8006ffc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3312      	adds	r3, #18
 800903c:	2100      	movs	r1, #0
 800903e:	4618      	mov	r0, r3
 8009040:	f7fd ffc1 	bl	8006fc6 <st_word>
					fs->wflag = 1;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2201      	movs	r2, #1
 8009048:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	4618      	mov	r0, r3
 800904e:	f7fe fa5d 	bl	800750c <sync_fs>
 8009052:	4603      	mov	r3, r0
 8009054:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	7d1b      	ldrb	r3, [r3, #20]
 800905a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800905e:	b2da      	uxtb	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009064:	7dfb      	ldrb	r3, [r7, #23]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7ff ff7b 	bl	8008f72 <f_sync>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d118      	bne.n	80090b8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f107 0208 	add.w	r2, r7, #8
 800908c:	4611      	mov	r1, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff fbc0 	bl	8008814 <validate>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10c      	bne.n	80090b8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe f960 	bl	8007368 <dec_lock>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	4613      	mov	r3, r2
 80090d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80090d2:	2301      	movs	r3, #1
 80090d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80090da:	4b1f      	ldr	r3, [pc, #124]	; (8009158 <FATFS_LinkDriverEx+0x94>)
 80090dc:	7a5b      	ldrb	r3, [r3, #9]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d131      	bne.n	8009148 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80090e4:	4b1c      	ldr	r3, [pc, #112]	; (8009158 <FATFS_LinkDriverEx+0x94>)
 80090e6:	7a5b      	ldrb	r3, [r3, #9]
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	461a      	mov	r2, r3
 80090ec:	4b1a      	ldr	r3, [pc, #104]	; (8009158 <FATFS_LinkDriverEx+0x94>)
 80090ee:	2100      	movs	r1, #0
 80090f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80090f2:	4b19      	ldr	r3, [pc, #100]	; (8009158 <FATFS_LinkDriverEx+0x94>)
 80090f4:	7a5b      	ldrb	r3, [r3, #9]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	4a17      	ldr	r2, [pc, #92]	; (8009158 <FATFS_LinkDriverEx+0x94>)
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009102:	4b15      	ldr	r3, [pc, #84]	; (8009158 <FATFS_LinkDriverEx+0x94>)
 8009104:	7a5b      	ldrb	r3, [r3, #9]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	461a      	mov	r2, r3
 800910a:	4b13      	ldr	r3, [pc, #76]	; (8009158 <FATFS_LinkDriverEx+0x94>)
 800910c:	4413      	add	r3, r2
 800910e:	79fa      	ldrb	r2, [r7, #7]
 8009110:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009112:	4b11      	ldr	r3, [pc, #68]	; (8009158 <FATFS_LinkDriverEx+0x94>)
 8009114:	7a5b      	ldrb	r3, [r3, #9]
 8009116:	b2db      	uxtb	r3, r3
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	b2d1      	uxtb	r1, r2
 800911c:	4a0e      	ldr	r2, [pc, #56]	; (8009158 <FATFS_LinkDriverEx+0x94>)
 800911e:	7251      	strb	r1, [r2, #9]
 8009120:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009122:	7dbb      	ldrb	r3, [r7, #22]
 8009124:	3330      	adds	r3, #48	; 0x30
 8009126:	b2da      	uxtb	r2, r3
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	3301      	adds	r3, #1
 8009130:	223a      	movs	r2, #58	; 0x3a
 8009132:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	3302      	adds	r3, #2
 8009138:	222f      	movs	r2, #47	; 0x2f
 800913a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	3303      	adds	r3, #3
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009148:	7dfb      	ldrb	r3, [r7, #23]
}
 800914a:	4618      	mov	r0, r3
 800914c:	371c      	adds	r7, #28
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	20000074 	.word	0x20000074

0800915c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009166:	2200      	movs	r2, #0
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff ffaa 	bl	80090c4 <FATFS_LinkDriverEx>
 8009170:	4603      	mov	r3, r0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <__libc_init_array>:
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	4e0d      	ldr	r6, [pc, #52]	; (80091b4 <__libc_init_array+0x38>)
 8009180:	4c0d      	ldr	r4, [pc, #52]	; (80091b8 <__libc_init_array+0x3c>)
 8009182:	1ba4      	subs	r4, r4, r6
 8009184:	10a4      	asrs	r4, r4, #2
 8009186:	2500      	movs	r5, #0
 8009188:	42a5      	cmp	r5, r4
 800918a:	d109      	bne.n	80091a0 <__libc_init_array+0x24>
 800918c:	4e0b      	ldr	r6, [pc, #44]	; (80091bc <__libc_init_array+0x40>)
 800918e:	4c0c      	ldr	r4, [pc, #48]	; (80091c0 <__libc_init_array+0x44>)
 8009190:	f000 f820 	bl	80091d4 <_init>
 8009194:	1ba4      	subs	r4, r4, r6
 8009196:	10a4      	asrs	r4, r4, #2
 8009198:	2500      	movs	r5, #0
 800919a:	42a5      	cmp	r5, r4
 800919c:	d105      	bne.n	80091aa <__libc_init_array+0x2e>
 800919e:	bd70      	pop	{r4, r5, r6, pc}
 80091a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091a4:	4798      	blx	r3
 80091a6:	3501      	adds	r5, #1
 80091a8:	e7ee      	b.n	8009188 <__libc_init_array+0xc>
 80091aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091ae:	4798      	blx	r3
 80091b0:	3501      	adds	r5, #1
 80091b2:	e7f2      	b.n	800919a <__libc_init_array+0x1e>
 80091b4:	08009564 	.word	0x08009564
 80091b8:	08009564 	.word	0x08009564
 80091bc:	08009564 	.word	0x08009564
 80091c0:	08009568 	.word	0x08009568

080091c4 <memset>:
 80091c4:	4402      	add	r2, r0
 80091c6:	4603      	mov	r3, r0
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d100      	bne.n	80091ce <memset+0xa>
 80091cc:	4770      	bx	lr
 80091ce:	f803 1b01 	strb.w	r1, [r3], #1
 80091d2:	e7f9      	b.n	80091c8 <memset+0x4>

080091d4 <_init>:
 80091d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d6:	bf00      	nop
 80091d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091da:	bc08      	pop	{r3}
 80091dc:	469e      	mov	lr, r3
 80091de:	4770      	bx	lr

080091e0 <_fini>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	bf00      	nop
 80091e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e6:	bc08      	pop	{r3}
 80091e8:	469e      	mov	lr, r3
 80091ea:	4770      	bx	lr
