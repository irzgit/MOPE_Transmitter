
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08009d0c  08009d0c  00019d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e70  08009e70  00020490  2**0
                  CONTENTS
  4 .ARM          00000008  08009e70  08009e70  00019e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e78  08009e78  00020490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e78  08009e78  00019e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e7c  08009e7c  00019e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000490  20000000  08009e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000074fc  20000490  0800a310  00020490  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000798c  0800a310  0002798c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020490  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c5e0  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003707  00000000  00000000  0003caa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a8  00000000  00000000  000401a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001310  00000000  00000000  00041650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024be1  00000000  00000000  00042960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b24  00000000  00000000  00067541  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d450d  00000000  00000000  00079065  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d572  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005834  00000000  00000000  0014d5f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000490 	.word	0x20000490
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009cf4 	.word	0x08009cf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000494 	.word	0x20000494
 800020c:	08009cf4 	.word	0x08009cf4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 80005b4:	21ff      	movs	r1, #255	; 0xff
 80005b6:	2012      	movs	r0, #18
 80005b8:	f001 fefc 	bl	80023b4 <SPIWrite>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 80005c4:	2101      	movs	r1, #1
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 fef4 	bl	80023b4 <SPIWrite>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 80005d4:	2100      	movs	r1, #0
 80005d6:	2001      	movs	r0, #1
 80005d8:	f001 feec 	bl	80023b4 <SPIWrite>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	2001      	movs	r0, #1
 80005e8:	f001 fee4 	bl	80023b4 <SPIWrite>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <Rf96_FreqChoose+0x28>)
 8000604:	4413      	add	r3, r2
 8000606:	2203      	movs	r2, #3
 8000608:	4619      	mov	r1, r3
 800060a:	2006      	movs	r0, #6
 800060c:	f001 fef6 	bl	80023fc <BurstWrite>

}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	08009d84 	.word	0x08009d84

0800061c <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <Rf96_OutPower+0x28>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	4619      	mov	r1, r3
 800062e:	2009      	movs	r0, #9
 8000630:	f001 fec0 	bl	80023b4 <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000634:	2187      	movs	r1, #135	; 0x87
 8000636:	205a      	movs	r0, #90	; 0x5a
 8000638:	f001 febc 	bl	80023b4 <SPIWrite>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	08009d90 	.word	0x08009d90

08000648 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <Rf96_OCP+0x20>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	4619      	mov	r1, r3
 800065a:	200b      	movs	r0, #11
 800065c:	f001 feaa 	bl	80023b4 <SPIWrite>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	08009d94 	.word	0x08009d94

0800066c <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <Rf96_LNA+0x20>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	4619      	mov	r1, r3
 800067e:	200c      	movs	r0, #12
 8000680:	f001 fe98 	bl	80023b4 <SPIWrite>

}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08009d98 	.word	0x08009d98

08000690 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	460b      	mov	r3, r1
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	4613      	mov	r3, r2
 80006a0:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x8C); // Без CRC16
	SPIWrite(LR_RegModemConfig1,0x8E); // С CRC16
 80006a2:	218e      	movs	r1, #142	; 0x8e
 80006a4:	201d      	movs	r0, #29
 80006a6:	f001 fe85 	bl	80023b4 <SPIWrite>
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	460b      	mov	r3, r1
 80006be:	71bb      	strb	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0x77);
 80006c4:	2177      	movs	r1, #119	; 0x77
 80006c6:	201e      	movs	r0, #30
 80006c8:	f001 fe74 	bl	80023b4 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	201f      	movs	r0, #31
 80006d4:	f001 fe6e 	bl	80023b4 <SPIWrite>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	2020      	movs	r0, #32
 80006f6:	f001 fe5d 	bl	80023b4 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	2021      	movs	r0, #33	; 0x21
 8000702:	f001 fe57 	bl	80023b4 <SPIWrite>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 800070e:	b590      	push	{r4, r7, lr}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	4604      	mov	r4, r0
 8000716:	4608      	mov	r0, r1
 8000718:	4611      	mov	r1, r2
 800071a:	461a      	mov	r2, r3
 800071c:	4623      	mov	r3, r4
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4603      	mov	r3, r0
 8000722:	71bb      	strb	r3, [r7, #6]
 8000724:	460b      	mov	r3, r1
 8000726:	717b      	strb	r3, [r7, #5]
 8000728:	4613      	mov	r3, r2
 800072a:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	019b      	lsls	r3, r3, #6
 8000730:	b2da      	uxtb	r2, r3
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	b2db      	uxtb	r3, r3
 8000738:	4413      	add	r3, r2
 800073a:	b2da      	uxtb	r2, r3
 800073c:	797b      	ldrb	r3, [r7, #5]
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4413      	add	r3, r2
 8000744:	b2da      	uxtb	r2, r3
 8000746:	793b      	ldrb	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	2040      	movs	r0, #64	; 0x40
 8000750:	f001 fe30 	bl	80023b4 <SPIWrite>
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bd90      	pop	{r4, r7, pc}

0800075c <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 8000760:	21f7      	movs	r1, #247	; 0xf7
 8000762:	2011      	movs	r0, #17
 8000764:	f001 fe26 	bl	80023b4 <SPIWrite>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <Rf96_PayloadLength>:
{
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
}
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4619      	mov	r1, r3
 800077a:	2022      	movs	r0, #34	; 0x22
 800077c:	f001 fe1a 	bl	80023b4 <SPIWrite>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4619      	mov	r1, r3
 8000796:	200e      	movs	r0, #14
 8000798:	f001 fe0c 	bl	80023b4 <SPIWrite>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Rf96_FIFO_point>:
{
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
}
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4619      	mov	r1, r3
 80007b2:	200d      	movs	r0, #13
 80007b4:	f001 fdfe 	bl	80023b4 <SPIWrite>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <Rf96_TX_mode>:
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
}
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 80007c4:	2183      	movs	r1, #131	; 0x83
 80007c6:	2001      	movs	r0, #1
 80007c8:	f001 fdf4 	bl	80023b4 <SPIWrite>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	461a      	mov	r2, r3
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	2000      	movs	r0, #0
 80007e4:	f001 fe0a 	bl	80023fc <BurstWrite>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <Rf96_Lora_init>:
	packet_size = SPIRead(LR_RegRxNbBytes);
	SPIBurstRead(LR_RegFifo, str, packet_size);
}
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007f4:	f7ff feec 	bl	80005d0 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007f8:	f7ff fef2 	bl	80005e0 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff fef7 	bl	80005f0 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff ff0a 	bl	800061c <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ff1d 	bl	8000648 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff ff2c 	bl	800066c <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 8000814:	2200      	movs	r2, #0
 8000816:	2104      	movs	r1, #4
 8000818:	2007      	movs	r0, #7
 800081a:	f7ff ff39 	bl	8000690 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x3FF);
 800081e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000822:	2101      	movs	r1, #1
 8000824:	2006      	movs	r0, #6
 8000826:	f7ff ff44 	bl	80006b2 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 800082a:	2008      	movs	r0, #8
 800082c:	f7ff ff58 	bl	80006e0 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 8000830:	f7ff fec6 	bl	80005c0 <Rf96_Standby>
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  // Настройка вывода Di0 на прерывание по отправке
	Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 800083c:	2302      	movs	r3, #2
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff63 	bl	800070e <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000848:	f7ff feb2 	bl	80005b0 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800084c:	f7ff ff86 	bl	800075c <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(27);
 8000850:	201b      	movs	r0, #27
 8000852:	f7ff ff8b 	bl	800076c <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000856:	2080      	movs	r0, #128	; 0x80
 8000858:	f7ff ff96 	bl	8000788 <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800085c:	2080      	movs	r0, #128	; 0x80
 800085e:	f7ff ffa1 	bl	80007a4 <Rf96_FIFO_point>

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}

08000866 <Rf96_LoRaTxPacket>:

}

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	460b      	mov	r3, r1
 8000870:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	4619      	mov	r1, r3
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ffaa 	bl	80007d0 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 800087c:	f7ff ffa0 	bl	80007c0 <Rf96_TX_mode>
			break;
		}
	}
*/

}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <PacketToRadio>:
uint8_t accelSelect[3][5] = {{0x68, 0x04, 0x32, 0x04, 0x3a},{0x68, 0x04, 0x64, 0x04, 0x6c},{0x68, 0x04, 0x96, 0x04, 0x9e}};

uint32_t countT=0;

void PacketToRadio(void)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0

	for(uint8_t j=0;j<3;j++)
 800088e:	2300      	movs	r3, #0
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	e01c      	b.n	80008ce <PacketToRadio+0x46>
	{
		for(uint8_t i=0;i<9;i++)
 8000894:	2300      	movs	r3, #0
 8000896:	71bb      	strb	r3, [r7, #6]
 8000898:	e013      	b.n	80008c2 <PacketToRadio+0x3a>
		   RadioBuff[i+j*9]=packageCut[j][i];
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	79b8      	ldrb	r0, [r7, #6]
 800089e:	79bc      	ldrb	r4, [r7, #6]
 80008a0:	79f9      	ldrb	r1, [r7, #7]
 80008a2:	460b      	mov	r3, r1
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	440b      	add	r3, r1
 80008a8:	18e1      	adds	r1, r4, r3
 80008aa:	4c12      	ldr	r4, [pc, #72]	; (80008f4 <PacketToRadio+0x6c>)
 80008ac:	4613      	mov	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	4413      	add	r3, r2
 80008b2:	4423      	add	r3, r4
 80008b4:	4403      	add	r3, r0
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <PacketToRadio+0x70>)
 80008ba:	545a      	strb	r2, [r3, r1]
		for(uint8_t i=0;i<9;i++)
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	3301      	adds	r3, #1
 80008c0:	71bb      	strb	r3, [r7, #6]
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	2b08      	cmp	r3, #8
 80008c6:	d9e8      	bls.n	800089a <PacketToRadio+0x12>
	for(uint8_t j=0;j<3;j++)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	3301      	adds	r3, #1
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d9df      	bls.n	8000894 <PacketToRadio+0xc>
	}
	//RadioBuff[27]=Crc8(RadioBuff,27);
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 80008d4:	2080      	movs	r0, #128	; 0x80
 80008d6:	f7ff ff57 	bl	8000788 <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 80008da:	2080      	movs	r0, #128	; 0x80
 80008dc:	f7ff ff62 	bl	80007a4 <Rf96_FIFO_point>

	  Rf96_LoRaClearIrq();
 80008e0:	f7ff fe66 	bl	80005b0 <Rf96_LoRaClearIrq>

	  Rf96_LoRaTxPacket((char*)RadioBuff,27);
 80008e4:	211b      	movs	r1, #27
 80008e6:	4804      	ldr	r0, [pc, #16]	; (80008f8 <PacketToRadio+0x70>)
 80008e8:	f7ff ffbd 	bl	8000866 <Rf96_LoRaTxPacket>

}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	200004d8 	.word	0x200004d8
 80008f8:	20007064 	.word	0x20007064

080008fc <transmit>:

void transmit(uint8_t* str, uint8_t* str2)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af08      	add	r7, sp, #32
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]

	for(uint8_t i=0;i<NumofPacket;i++)
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
 800090a:	f000 bc50 	b.w	80011ae <transmit+0x8b2>
	{


		        // первый акселерометр
			    // Ось Х
				xIntSumFirst = (str[1+8+i*36] & 0x0F) * 10 + (str[1+9+i*36] >> 4); // целочисленная сумма X
 800090e:	7bfa      	ldrb	r2, [r7, #15]
 8000910:	4613      	mov	r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	4413      	add	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	3309      	adds	r3, #9
 800091a:	461a      	mov	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	f003 020f 	and.w	r2, r3, #15
 8000926:	4613      	mov	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	4619      	mov	r1, r3
 8000930:	7bfa      	ldrb	r2, [r7, #15]
 8000932:	4613      	mov	r3, r2
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	4413      	add	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	330a      	adds	r3, #10
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	b2db      	uxtb	r3, r3
 8000948:	440b      	add	r3, r1
 800094a:	4ab6      	ldr	r2, [pc, #728]	; (8000c24 <transmit+0x328>)
 800094c:	6013      	str	r3, [r2, #0]
				x5First = str[1+9+i*36] & 0x0F; //перевод правого бита 5го байта
 800094e:	7bfa      	ldrb	r2, [r7, #15]
 8000950:	4613      	mov	r3, r2
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	4413      	add	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	330a      	adds	r3, #10
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	4ab0      	ldr	r2, [pc, #704]	; (8000c28 <transmit+0x32c>)
 8000968:	6013      	str	r3, [r2, #0]
				x60First = str[1+10+i*36] >> 4; //перевод левого бита 6го байта
 800096a:	7bfa      	ldrb	r2, [r7, #15]
 800096c:	4613      	mov	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	4413      	add	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	330b      	adds	r3, #11
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	091b      	lsrs	r3, r3, #4
 8000980:	b2db      	uxtb	r3, r3
 8000982:	461a      	mov	r2, r3
 8000984:	4ba9      	ldr	r3, [pc, #676]	; (8000c2c <transmit+0x330>)
 8000986:	601a      	str	r2, [r3, #0]
				x65First = str[1+10+i*36] & 0x0F; //перевод правого бита 6го байта
 8000988:	7bfa      	ldrb	r2, [r7, #15]
 800098a:	4613      	mov	r3, r2
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	4413      	add	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	330b      	adds	r3, #11
 8000994:	461a      	mov	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	f003 030f 	and.w	r3, r3, #15
 80009a0:	4aa3      	ldr	r2, [pc, #652]	; (8000c30 <transmit+0x334>)
 80009a2:	6013      	str	r3, [r2, #0]
				sprintf(xvalFirst, "+%02d.%d%d;",xIntSumFirst, x5First, x60First);
 80009a4:	4b9f      	ldr	r3, [pc, #636]	; (8000c24 <transmit+0x328>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b9f      	ldr	r3, [pc, #636]	; (8000c28 <transmit+0x32c>)
 80009aa:	6819      	ldr	r1, [r3, #0]
 80009ac:	4b9f      	ldr	r3, [pc, #636]	; (8000c2c <transmit+0x330>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	460b      	mov	r3, r1
 80009b4:	499f      	ldr	r1, [pc, #636]	; (8000c34 <transmit+0x338>)
 80009b6:	48a0      	ldr	r0, [pc, #640]	; (8000c38 <transmit+0x33c>)
 80009b8:	f008 fd96 	bl	80094e8 <siprintf>
				if((str[1+8+i*36] >> 4) == 0x01)
 80009bc:	7bfa      	ldrb	r2, [r7, #15]
 80009be:	4613      	mov	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	3309      	adds	r3, #9
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	091b      	lsrs	r3, r3, #4
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d102      	bne.n	80009de <transmit+0xe2>
					xvalFirst[0] = '-';
 80009d8:	4b97      	ldr	r3, [pc, #604]	; (8000c38 <transmit+0x33c>)
 80009da:	222d      	movs	r2, #45	; 0x2d
 80009dc:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumFirst = (str[1+11+i*36] & 0x0F) * 10 + (str[1+12+i*36] >> 4);	// целочисленная сумма Y
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	4613      	mov	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	4413      	add	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	330c      	adds	r3, #12
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	f003 020f 	and.w	r2, r3, #15
 80009f6:	4613      	mov	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4413      	add	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4619      	mov	r1, r3
 8000a00:	7bfa      	ldrb	r2, [r7, #15]
 8000a02:	4613      	mov	r3, r2
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	4413      	add	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	330d      	adds	r3, #13
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	091b      	lsrs	r3, r3, #4
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	440b      	add	r3, r1
 8000a1a:	4a88      	ldr	r2, [pc, #544]	; (8000c3c <transmit+0x340>)
 8000a1c:	6013      	str	r3, [r2, #0]
				y8First = str[1+12+i*36] & 0x0F; //перевод правого бита 8го байта
 8000a1e:	7bfa      	ldrb	r2, [r7, #15]
 8000a20:	4613      	mov	r3, r2
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	4413      	add	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	330d      	adds	r3, #13
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	4a82      	ldr	r2, [pc, #520]	; (8000c40 <transmit+0x344>)
 8000a38:	6013      	str	r3, [r2, #0]
				y90First = str[1+13+i*36] >> 4; //перевод левого бита 9го байта
 8000a3a:	7bfa      	ldrb	r2, [r7, #15]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	4413      	add	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	330e      	adds	r3, #14
 8000a46:	461a      	mov	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	091b      	lsrs	r3, r3, #4
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b7b      	ldr	r3, [pc, #492]	; (8000c44 <transmit+0x348>)
 8000a56:	601a      	str	r2, [r3, #0]
				y95First = str[1+13+i*36] & 0x0F; //перевод правого бита 9го байта
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	4413      	add	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	330e      	adds	r3, #14
 8000a64:	461a      	mov	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	4a75      	ldr	r2, [pc, #468]	; (8000c48 <transmit+0x34c>)
 8000a72:	6013      	str	r3, [r2, #0]
				sprintf(yvalFirst, "+%02d.%d%d;", yIntSumFirst, y8First, y90First);
 8000a74:	4b71      	ldr	r3, [pc, #452]	; (8000c3c <transmit+0x340>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b71      	ldr	r3, [pc, #452]	; (8000c40 <transmit+0x344>)
 8000a7a:	6819      	ldr	r1, [r3, #0]
 8000a7c:	4b71      	ldr	r3, [pc, #452]	; (8000c44 <transmit+0x348>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	460b      	mov	r3, r1
 8000a84:	496b      	ldr	r1, [pc, #428]	; (8000c34 <transmit+0x338>)
 8000a86:	4871      	ldr	r0, [pc, #452]	; (8000c4c <transmit+0x350>)
 8000a88:	f008 fd2e 	bl	80094e8 <siprintf>
				if((str[1+11+i*36] >> 4) == 0x01)
 8000a8c:	7bfa      	ldrb	r2, [r7, #15]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	4413      	add	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	330c      	adds	r3, #12
 8000a98:	461a      	mov	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d102      	bne.n	8000aae <transmit+0x1b2>
					yvalFirst[0] = '-';
 8000aa8:	4b68      	ldr	r3, [pc, #416]	; (8000c4c <transmit+0x350>)
 8000aaa:	222d      	movs	r2, #45	; 0x2d
 8000aac:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumFirst = (str[1+14+i*36] & 0x0F) * 10 + (str[1+15+i*36] >> 4); //целочисленная сумма Z
 8000aae:	7bfa      	ldrb	r2, [r7, #15]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	330f      	adds	r3, #15
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	f003 020f 	and.w	r2, r3, #15
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4619      	mov	r1, r3
 8000ad0:	7bfa      	ldrb	r2, [r7, #15]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	4413      	add	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	3310      	adds	r3, #16
 8000adc:	461a      	mov	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	091b      	lsrs	r3, r3, #4
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	440b      	add	r3, r1
 8000aea:	4a59      	ldr	r2, [pc, #356]	; (8000c50 <transmit+0x354>)
 8000aec:	6013      	str	r3, [r2, #0]
				z11First = str[1+15+i*36] & 0x0F; //перевод правого бита 11го байта
 8000aee:	7bfa      	ldrb	r2, [r7, #15]
 8000af0:	4613      	mov	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	4413      	add	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	3310      	adds	r3, #16
 8000afa:	461a      	mov	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	4a53      	ldr	r2, [pc, #332]	; (8000c54 <transmit+0x358>)
 8000b08:	6013      	str	r3, [r2, #0]
				z120First = str[1+16+i*36] >> 4; //перевод левого бита 12го байта
 8000b0a:	7bfa      	ldrb	r2, [r7, #15]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	3311      	adds	r3, #17
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b4c      	ldr	r3, [pc, #304]	; (8000c58 <transmit+0x35c>)
 8000b26:	601a      	str	r2, [r3, #0]
				z125First = str[1+16+i*36] & 0x0F; //перевод правого бита 12го байта
 8000b28:	7bfa      	ldrb	r2, [r7, #15]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	3311      	adds	r3, #17
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	f003 030f 	and.w	r3, r3, #15
 8000b40:	4a46      	ldr	r2, [pc, #280]	; (8000c5c <transmit+0x360>)
 8000b42:	6013      	str	r3, [r2, #0]
				sprintf(zvalFirst, "+%02d.%d%d;", zIntSumFirst, z11First, z120First);
 8000b44:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <transmit+0x354>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b42      	ldr	r3, [pc, #264]	; (8000c54 <transmit+0x358>)
 8000b4a:	6819      	ldr	r1, [r3, #0]
 8000b4c:	4b42      	ldr	r3, [pc, #264]	; (8000c58 <transmit+0x35c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	460b      	mov	r3, r1
 8000b54:	4937      	ldr	r1, [pc, #220]	; (8000c34 <transmit+0x338>)
 8000b56:	4842      	ldr	r0, [pc, #264]	; (8000c60 <transmit+0x364>)
 8000b58:	f008 fcc6 	bl	80094e8 <siprintf>
				if((str[1+14+i*36] >> 4) == 0x01)
 8000b5c:	7bfa      	ldrb	r2, [r7, #15]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	330f      	adds	r3, #15
 8000b68:	461a      	mov	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	091b      	lsrs	r3, r3, #4
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d102      	bne.n	8000b7e <transmit+0x282>
					zvalFirst[0] = '-';
 8000b78:	4b39      	ldr	r3, [pc, #228]	; (8000c60 <transmit+0x364>)
 8000b7a:	222d      	movs	r2, #45	; 0x2d
 8000b7c:	701a      	strb	r2, [r3, #0]

				// второй акселерометр
				// Ось Х
				xIntSumSecond = (str[1+17+i*36] & 0x0F) * 10 + (str[1+18+i*36] >> 4); // целочисленная сумма X
 8000b7e:	7bfa      	ldrb	r2, [r7, #15]
 8000b80:	4613      	mov	r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	4413      	add	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	3312      	adds	r3, #18
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	f003 020f 	and.w	r2, r3, #15
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	7bfa      	ldrb	r2, [r7, #15]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	3313      	adds	r3, #19
 8000bac:	461a      	mov	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	091b      	lsrs	r3, r3, #4
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	440b      	add	r3, r1
 8000bba:	4a2a      	ldr	r2, [pc, #168]	; (8000c64 <transmit+0x368>)
 8000bbc:	6013      	str	r3, [r2, #0]
				x5Second = str[1+18+i*36] & 0x0F; //перевод правого бита 5го байта
 8000bbe:	7bfa      	ldrb	r2, [r7, #15]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	4413      	add	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	3313      	adds	r3, #19
 8000bca:	461a      	mov	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	4a24      	ldr	r2, [pc, #144]	; (8000c68 <transmit+0x36c>)
 8000bd8:	6013      	str	r3, [r2, #0]
				x60Second = str[1+19+i*36] >> 4; //перевод левого бита 6го байта
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	4413      	add	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	3314      	adds	r3, #20
 8000be6:	461a      	mov	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	091b      	lsrs	r3, r3, #4
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <transmit+0x370>)
 8000bf6:	601a      	str	r2, [r3, #0]
				x65Second = str[1+19+i*36] & 0x0F; //перевод правого бита 6го байта
 8000bf8:	7bfa      	ldrb	r2, [r7, #15]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	4413      	add	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	3314      	adds	r3, #20
 8000c04:	461a      	mov	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	f003 030f 	and.w	r3, r3, #15
 8000c10:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <transmit+0x374>)
 8000c12:	6013      	str	r3, [r2, #0]
				sprintf(xvalSecond, "+%02d.%d%d;",xIntSumSecond, x5Second, x60Second);
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <transmit+0x368>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <transmit+0x36c>)
 8000c1a:	6819      	ldr	r1, [r3, #0]
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <transmit+0x370>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	e028      	b.n	8000c74 <transmit+0x378>
 8000c22:	bf00      	nop
 8000c24:	20007298 	.word	0x20007298
 8000c28:	20007000 	.word	0x20007000
 8000c2c:	20007288 	.word	0x20007288
 8000c30:	2000700c 	.word	0x2000700c
 8000c34:	08009d0c 	.word	0x08009d0c
 8000c38:	200005e0 	.word	0x200005e0
 8000c3c:	20000d74 	.word	0x20000d74
 8000c40:	20000d78 	.word	0x20000d78
 8000c44:	200009a0 	.word	0x200009a0
 8000c48:	20000c64 	.word	0x20000c64
 8000c4c:	200009a4 	.word	0x200009a4
 8000c50:	20007054 	.word	0x20007054
 8000c54:	20000bb4 	.word	0x20000bb4
 8000c58:	20000bb0 	.word	0x20000bb0
 8000c5c:	20007008 	.word	0x20007008
 8000c60:	2000705c 	.word	0x2000705c
 8000c64:	20000d70 	.word	0x20000d70
 8000c68:	2000728c 	.word	0x2000728c
 8000c6c:	200009ac 	.word	0x200009ac
 8000c70:	20000d6c 	.word	0x20000d6c
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	460b      	mov	r3, r1
 8000c78:	49b9      	ldr	r1, [pc, #740]	; (8000f60 <transmit+0x664>)
 8000c7a:	48ba      	ldr	r0, [pc, #744]	; (8000f64 <transmit+0x668>)
 8000c7c:	f008 fc34 	bl	80094e8 <siprintf>
				if((str[1+17+i*36] >> 4) == 0x01)
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	4413      	add	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	3312      	adds	r3, #18
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	091b      	lsrs	r3, r3, #4
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d102      	bne.n	8000ca2 <transmit+0x3a6>
					xvalSecond[0] = '-';
 8000c9c:	4bb1      	ldr	r3, [pc, #708]	; (8000f64 <transmit+0x668>)
 8000c9e:	222d      	movs	r2, #45	; 0x2d
 8000ca0:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumSecond = (str[1+20+i*36] & 0x0F) * 10 + (str[1+21+i*36] >> 4);	// целочисленная сумма Y
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	4413      	add	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	3315      	adds	r3, #21
 8000cae:	461a      	mov	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	f003 020f 	and.w	r2, r3, #15
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	3316      	adds	r3, #22
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	440b      	add	r3, r1
 8000cde:	4aa2      	ldr	r2, [pc, #648]	; (8000f68 <transmit+0x66c>)
 8000ce0:	6013      	str	r3, [r2, #0]
				y8Second = str[1+21+i*36] & 0x0F; //перевод правого бита 8го байта
 8000ce2:	7bfa      	ldrb	r2, [r7, #15]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	4413      	add	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	3316      	adds	r3, #22
 8000cee:	461a      	mov	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	4a9c      	ldr	r2, [pc, #624]	; (8000f6c <transmit+0x670>)
 8000cfc:	6013      	str	r3, [r2, #0]
				y90Second = str[1+22+i*36] >> 4; //перевод левого бита 9го байта
 8000cfe:	7bfa      	ldrb	r2, [r7, #15]
 8000d00:	4613      	mov	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	4413      	add	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	3317      	adds	r3, #23
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b95      	ldr	r3, [pc, #596]	; (8000f70 <transmit+0x674>)
 8000d1a:	601a      	str	r2, [r3, #0]
				y95Second = str[1+22+i*36] & 0x0F; //перевод правого бита 9го байта
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4413      	add	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	3317      	adds	r3, #23
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	4a8f      	ldr	r2, [pc, #572]	; (8000f74 <transmit+0x678>)
 8000d36:	6013      	str	r3, [r2, #0]
				sprintf(yvalSecond, "+%02d.%d%d;", yIntSumSecond, y8Second, y90Second);
 8000d38:	4b8b      	ldr	r3, [pc, #556]	; (8000f68 <transmit+0x66c>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b8b      	ldr	r3, [pc, #556]	; (8000f6c <transmit+0x670>)
 8000d3e:	6819      	ldr	r1, [r3, #0]
 8000d40:	4b8b      	ldr	r3, [pc, #556]	; (8000f70 <transmit+0x674>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	460b      	mov	r3, r1
 8000d48:	4985      	ldr	r1, [pc, #532]	; (8000f60 <transmit+0x664>)
 8000d4a:	488b      	ldr	r0, [pc, #556]	; (8000f78 <transmit+0x67c>)
 8000d4c:	f008 fbcc 	bl	80094e8 <siprintf>
				if((str[1+20+i*36] >> 4) == 0x01)
 8000d50:	7bfa      	ldrb	r2, [r7, #15]
 8000d52:	4613      	mov	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4413      	add	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	3315      	adds	r3, #21
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d102      	bne.n	8000d72 <transmit+0x476>
					yvalSecond[0] = '-';
 8000d6c:	4b82      	ldr	r3, [pc, #520]	; (8000f78 <transmit+0x67c>)
 8000d6e:	222d      	movs	r2, #45	; 0x2d
 8000d70:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumSecond = (str[1+23+i*36] & 0x0F) * 10 + (str[1+24+i*36] >> 4); //целочисленная сумма Z
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	4613      	mov	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	4413      	add	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	f003 020f 	and.w	r2, r3, #15
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4619      	mov	r1, r3
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	3319      	adds	r3, #25
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	091b      	lsrs	r3, r3, #4
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	440b      	add	r3, r1
 8000dae:	4a73      	ldr	r2, [pc, #460]	; (8000f7c <transmit+0x680>)
 8000db0:	6013      	str	r3, [r2, #0]
				z11Second = str[1+24+i*36] & 0x0F; //перевод правого бита 11го байта
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	4613      	mov	r3, r2
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	4413      	add	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	3319      	adds	r3, #25
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	4a6d      	ldr	r2, [pc, #436]	; (8000f80 <transmit+0x684>)
 8000dcc:	6013      	str	r3, [r2, #0]
				z120Second = str[1+25+i*36] >> 4; //перевод левого бита 12го байта
 8000dce:	7bfa      	ldrb	r2, [r7, #15]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	4413      	add	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	331a      	adds	r3, #26
 8000dda:	461a      	mov	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b66      	ldr	r3, [pc, #408]	; (8000f84 <transmit+0x688>)
 8000dea:	601a      	str	r2, [r3, #0]
				z125Second = str[1+25+i*36] & 0x0F; //перевод правого бита 12го байта
 8000dec:	7bfa      	ldrb	r2, [r7, #15]
 8000dee:	4613      	mov	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4413      	add	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	331a      	adds	r3, #26
 8000df8:	461a      	mov	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	4a60      	ldr	r2, [pc, #384]	; (8000f88 <transmit+0x68c>)
 8000e06:	6013      	str	r3, [r2, #0]
				sprintf(zvalSecond, "+%02d.%d%d;", zIntSumSecond, z11Second, z120Second);
 8000e08:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <transmit+0x680>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b5c      	ldr	r3, [pc, #368]	; (8000f80 <transmit+0x684>)
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	4b5c      	ldr	r3, [pc, #368]	; (8000f84 <transmit+0x688>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	460b      	mov	r3, r1
 8000e18:	4951      	ldr	r1, [pc, #324]	; (8000f60 <transmit+0x664>)
 8000e1a:	485c      	ldr	r0, [pc, #368]	; (8000f8c <transmit+0x690>)
 8000e1c:	f008 fb64 	bl	80094e8 <siprintf>
				if((str[1+23+i*36] >> 4) == 0x01)
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	4613      	mov	r3, r2
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	4413      	add	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	3318      	adds	r3, #24
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d102      	bne.n	8000e42 <transmit+0x546>
					zvalSecond[0] = '-';
 8000e3c:	4b53      	ldr	r3, [pc, #332]	; (8000f8c <transmit+0x690>)
 8000e3e:	222d      	movs	r2, #45	; 0x2d
 8000e40:	701a      	strb	r2, [r3, #0]

				// третий акселерометр
				// Ось Х
				xIntSumThird = (str[1+26+i*36] & 0x0F) * 10 + (str[1+27+i*36] >> 4); // целочисленная сумма X
 8000e42:	7bfa      	ldrb	r2, [r7, #15]
 8000e44:	4613      	mov	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4413      	add	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	331b      	adds	r3, #27
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	f003 020f 	and.w	r2, r3, #15
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4619      	mov	r1, r3
 8000e64:	7bfa      	ldrb	r2, [r7, #15]
 8000e66:	4613      	mov	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	331c      	adds	r3, #28
 8000e70:	461a      	mov	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	440b      	add	r3, r1
 8000e7e:	4a44      	ldr	r2, [pc, #272]	; (8000f90 <transmit+0x694>)
 8000e80:	6013      	str	r3, [r2, #0]
				x5Third = str[1+27+i*36] & 0x0F; //перевод правого бита 5го байта
 8000e82:	7bfa      	ldrb	r2, [r7, #15]
 8000e84:	4613      	mov	r3, r2
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4413      	add	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	331c      	adds	r3, #28
 8000e8e:	461a      	mov	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	4a3e      	ldr	r2, [pc, #248]	; (8000f94 <transmit+0x698>)
 8000e9c:	6013      	str	r3, [r2, #0]
				x60Third = str[1+28+i*36] >> 4; //перевод левого бита 6го байта
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	331d      	adds	r3, #29
 8000eaa:	461a      	mov	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <transmit+0x69c>)
 8000eba:	601a      	str	r2, [r3, #0]
				x65Third = str[1+28+i*36] & 0x0F; //перевод правого бита 6го байта
 8000ebc:	7bfa      	ldrb	r2, [r7, #15]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	331d      	adds	r3, #29
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	f003 030f 	and.w	r3, r3, #15
 8000ed4:	4a31      	ldr	r2, [pc, #196]	; (8000f9c <transmit+0x6a0>)
 8000ed6:	6013      	str	r3, [r2, #0]
				sprintf(xvalThird, "+%02d.%d%d;",xIntSumThird, x5Third, x60Third);
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <transmit+0x694>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <transmit+0x698>)
 8000ede:	6819      	ldr	r1, [r3, #0]
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <transmit+0x69c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	491d      	ldr	r1, [pc, #116]	; (8000f60 <transmit+0x664>)
 8000eea:	482d      	ldr	r0, [pc, #180]	; (8000fa0 <transmit+0x6a4>)
 8000eec:	f008 fafc 	bl	80094e8 <siprintf>
				if((str[1+26+i*36] >> 4) == 0x01)
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	331b      	adds	r3, #27
 8000efc:	461a      	mov	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d102      	bne.n	8000f12 <transmit+0x616>
					xvalThird[0] = '-';
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <transmit+0x6a4>)
 8000f0e:	222d      	movs	r2, #45	; 0x2d
 8000f10:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumThird = (str[1+29+i*36] & 0x0F) * 10 + (str[1+30+i*36] >> 4);	// целочисленная сумма Y
 8000f12:	7bfa      	ldrb	r2, [r7, #15]
 8000f14:	4613      	mov	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	331e      	adds	r3, #30
 8000f1e:	461a      	mov	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f003 020f 	and.w	r2, r3, #15
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	331f      	adds	r3, #31
 8000f40:	461a      	mov	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	440b      	add	r3, r1
 8000f4e:	4a15      	ldr	r2, [pc, #84]	; (8000fa4 <transmit+0x6a8>)
 8000f50:	6013      	str	r3, [r2, #0]
				y8Third = str[1+30+i*36] & 0x0F; //перевод правого бита 8го байта
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	4613      	mov	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	e024      	b.n	8000fa8 <transmit+0x6ac>
 8000f5e:	bf00      	nop
 8000f60:	08009d0c 	.word	0x08009d0c
 8000f64:	20000564 	.word	0x20000564
 8000f68:	20000c20 	.word	0x20000c20
 8000f6c:	20007004 	.word	0x20007004
 8000f70:	200071dc 	.word	0x200071dc
 8000f74:	2000055c 	.word	0x2000055c
 8000f78:	20006fec 	.word	0x20006fec
 8000f7c:	20000558 	.word	0x20000558
 8000f80:	20007510 	.word	0x20007510
 8000f84:	20000bb8 	.word	0x20000bb8
 8000f88:	2000056c 	.word	0x2000056c
 8000f8c:	20000bbc 	.word	0x20000bbc
 8000f90:	2000750c 	.word	0x2000750c
 8000f94:	20000d28 	.word	0x20000d28
 8000f98:	20000998 	.word	0x20000998
 8000f9c:	20006ff4 	.word	0x20006ff4
 8000fa0:	200071e0 	.word	0x200071e0
 8000fa4:	20007050 	.word	0x20007050
 8000fa8:	331f      	adds	r3, #31
 8000faa:	461a      	mov	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	4a82      	ldr	r2, [pc, #520]	; (80011c0 <transmit+0x8c4>)
 8000fb8:	6013      	str	r3, [r2, #0]
				y90Third = str[1+31+i*36] >> 4; //перевод левого бита 9го байта
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	3320      	adds	r3, #32
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b7b      	ldr	r3, [pc, #492]	; (80011c4 <transmit+0x8c8>)
 8000fd6:	601a      	str	r2, [r3, #0]
				y95Third = str[1+31+i*36] & 0x0F; //перевод правого бита 9го байта
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4413      	add	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	3320      	adds	r3, #32
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	4a75      	ldr	r2, [pc, #468]	; (80011c8 <transmit+0x8cc>)
 8000ff2:	6013      	str	r3, [r2, #0]
				sprintf(yvalThird, "+%02d.%d%d;", yIntSumThird, y8Third, y90Third);
 8000ff4:	4b75      	ldr	r3, [pc, #468]	; (80011cc <transmit+0x8d0>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b71      	ldr	r3, [pc, #452]	; (80011c0 <transmit+0x8c4>)
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	4b71      	ldr	r3, [pc, #452]	; (80011c4 <transmit+0x8c8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	460b      	mov	r3, r1
 8001004:	4972      	ldr	r1, [pc, #456]	; (80011d0 <transmit+0x8d4>)
 8001006:	4873      	ldr	r0, [pc, #460]	; (80011d4 <transmit+0x8d8>)
 8001008:	f008 fa6e 	bl	80094e8 <siprintf>
				if((str[1+29+i*36] >> 4) == 0x01)
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	4613      	mov	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	331e      	adds	r3, #30
 8001018:	461a      	mov	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	091b      	lsrs	r3, r3, #4
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d102      	bne.n	800102e <transmit+0x732>
					yvalThird[0] = '-';
 8001028:	4b6a      	ldr	r3, [pc, #424]	; (80011d4 <transmit+0x8d8>)
 800102a:	222d      	movs	r2, #45	; 0x2d
 800102c:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumThird = (str[1+32+i*36] & 0x0F) * 10 + (str[1+33+i*36] >> 4); //целочисленная сумма Z
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	3321      	adds	r3, #33	; 0x21
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	f003 020f 	and.w	r2, r3, #15
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4619      	mov	r1, r3
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	3322      	adds	r3, #34	; 0x22
 800105c:	461a      	mov	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	091b      	lsrs	r3, r3, #4
 8001066:	b2db      	uxtb	r3, r3
 8001068:	440b      	add	r3, r1
 800106a:	4a5b      	ldr	r2, [pc, #364]	; (80011d8 <transmit+0x8dc>)
 800106c:	6013      	str	r3, [r2, #0]
				z11Third = str[1+33+i*36] & 0x0F; //перевод правого бита 11го байта
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	3322      	adds	r3, #34	; 0x22
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	4a55      	ldr	r2, [pc, #340]	; (80011dc <transmit+0x8e0>)
 8001088:	6013      	str	r3, [r2, #0]
				z120Third = str[1+34+i*36] >> 4; //перевод левого бита 12го байта
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	3323      	adds	r3, #35	; 0x23
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b4e      	ldr	r3, [pc, #312]	; (80011e0 <transmit+0x8e4>)
 80010a6:	601a      	str	r2, [r3, #0]
				z125Third = str[1+34+i*36] & 0x0F; //перевод правого бита 12го байта
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	3323      	adds	r3, #35	; 0x23
 80010b4:	461a      	mov	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	f003 030f 	and.w	r3, r3, #15
 80010c0:	4a48      	ldr	r2, [pc, #288]	; (80011e4 <transmit+0x8e8>)
 80010c2:	6013      	str	r3, [r2, #0]
				sprintf(zvalThird, "+%02d.%d%d;", zIntSumThird, z11Third, z120Third);
 80010c4:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <transmit+0x8dc>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b44      	ldr	r3, [pc, #272]	; (80011dc <transmit+0x8e0>)
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <transmit+0x8e4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	460b      	mov	r3, r1
 80010d4:	493e      	ldr	r1, [pc, #248]	; (80011d0 <transmit+0x8d4>)
 80010d6:	4844      	ldr	r0, [pc, #272]	; (80011e8 <transmit+0x8ec>)
 80010d8:	f008 fa06 	bl	80094e8 <siprintf>
				if((str[1+32+i*36] >> 4) == 0x01)
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	4613      	mov	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	3321      	adds	r3, #33	; 0x21
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d102      	bne.n	80010fe <transmit+0x802>
					zvalThird[0] = '-';
 80010f8:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <transmit+0x8ec>)
 80010fa:	222d      	movs	r2, #45	; 0x2d
 80010fc:	701a      	strb	r2, [r3, #0]


				for(uint8_t j=0;j<8;j++)
 80010fe:	2300      	movs	r3, #0
 8001100:	73bb      	strb	r3, [r7, #14]
 8001102:	e019      	b.n	8001138 <transmit+0x83c>
				{

					str2[j+i*73]=str[j+i*36];
 8001104:	7bb9      	ldrb	r1, [r7, #14]
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	461a      	mov	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	1899      	adds	r1, r3, r2
 8001118:	7bb8      	ldrb	r0, [r7, #14]
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4413      	add	r3, r2
 8001126:	4403      	add	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	4413      	add	r3, r2
 800112e:	780a      	ldrb	r2, [r1, #0]
 8001130:	701a      	strb	r2, [r3, #0]
				for(uint8_t j=0;j<8;j++)
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	3301      	adds	r3, #1
 8001136:	73bb      	strb	r3, [r7, #14]
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	2b07      	cmp	r3, #7
 800113c:	d9e2      	bls.n	8001104 <transmit+0x808>
				}
				for(uint8_t j=0;j<8;j++)
 800113e:	2300      	movs	r3, #0
 8001140:	737b      	strb	r3, [r7, #13]
 8001142:	e011      	b.n	8001168 <transmit+0x86c>
				{

					str2[j+8+i*73]=';';
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	f103 0108 	add.w	r1, r3, #8
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	440b      	add	r3, r1
 8001158:	461a      	mov	r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	223b      	movs	r2, #59	; 0x3b
 8001160:	701a      	strb	r2, [r3, #0]
				for(uint8_t j=0;j<8;j++)
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	3301      	adds	r3, #1
 8001166:	737b      	strb	r3, [r7, #13]
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	2b07      	cmp	r3, #7
 800116c:	d9ea      	bls.n	8001144 <transmit+0x848>
				}


				sprintf(&str2[1+8+i*73], "%s%s%s%s%s%s%s%s%s\n", xvalFirst, yvalFirst, zvalFirst, xvalSecond, yvalSecond, zvalSecond, xvalThird, yvalThird, zvalThird);
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	3309      	adds	r3, #9
 800117c:	461a      	mov	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	1898      	adds	r0, r3, r2
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <transmit+0x8ec>)
 8001184:	9306      	str	r3, [sp, #24]
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <transmit+0x8d8>)
 8001188:	9305      	str	r3, [sp, #20]
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <transmit+0x8f0>)
 800118c:	9304      	str	r3, [sp, #16]
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <transmit+0x8f4>)
 8001190:	9303      	str	r3, [sp, #12]
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <transmit+0x8f8>)
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <transmit+0x8fc>)
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <transmit+0x900>)
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <transmit+0x904>)
 80011a0:	4a18      	ldr	r2, [pc, #96]	; (8001204 <transmit+0x908>)
 80011a2:	4919      	ldr	r1, [pc, #100]	; (8001208 <transmit+0x90c>)
 80011a4:	f008 f9a0 	bl	80094e8 <siprintf>
	for(uint8_t i=0;i<NumofPacket;i++)
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	3301      	adds	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	2b06      	cmp	r3, #6
 80011b2:	f67f abac 	bls.w	800090e <transmit+0x12>

	}

}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000c1c 	.word	0x20000c1c
 80011c4:	20000578 	.word	0x20000578
 80011c8:	20000994 	.word	0x20000994
 80011cc:	20007050 	.word	0x20007050
 80011d0:	08009d0c 	.word	0x08009d0c
 80011d4:	20000570 	.word	0x20000570
 80011d8:	20007290 	.word	0x20007290
 80011dc:	2000057c 	.word	0x2000057c
 80011e0:	20007084 	.word	0x20007084
 80011e4:	2000099c 	.word	0x2000099c
 80011e8:	20006ff8 	.word	0x20006ff8
 80011ec:	200071e0 	.word	0x200071e0
 80011f0:	20000bbc 	.word	0x20000bbc
 80011f4:	20006fec 	.word	0x20006fec
 80011f8:	20000564 	.word	0x20000564
 80011fc:	2000705c 	.word	0x2000705c
 8001200:	200009a4 	.word	0x200009a4
 8001204:	200005e0 	.word	0x200005e0
 8001208:	08009d18 	.word	0x08009d18

0800120c <uint32_TO_charmass>:
mass - массив, в которй число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	4611      	mov	r1, r2
 8001218:	461a      	mov	r2, r3
 800121a:	460b      	mov	r3, r1
 800121c:	80fb      	strh	r3, [r7, #6]
 800121e:	4613      	mov	r3, r2
 8001220:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	82fb      	strh	r3, [r7, #22]
 8001226:	e01f      	b.n	8001268 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <uint32_TO_charmass+0x70>)
 800122c:	fba3 2301 	umull	r2, r3, r3, r1
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	1aca      	subs	r2, r1, r3
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	88bb      	ldrh	r3, [r7, #4]
 8001240:	1e59      	subs	r1, r3, #1
 8001242:	8afb      	ldrh	r3, [r7, #22]
 8001244:	1ac9      	subs	r1, r1, r3
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	440b      	add	r3, r1
 800124a:	4619      	mov	r1, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	440b      	add	r3, r1
 8001250:	3230      	adds	r2, #48	; 0x30
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4a08      	ldr	r2, [pc, #32]	; (800127c <uint32_TO_charmass+0x70>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	08db      	lsrs	r3, r3, #3
 8001260:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8001262:	8afb      	ldrh	r3, [r7, #22]
 8001264:	3301      	adds	r3, #1
 8001266:	82fb      	strh	r3, [r7, #22]
 8001268:	8afa      	ldrh	r2, [r7, #22]
 800126a:	88bb      	ldrh	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	d3db      	bcc.n	8001228 <uint32_TO_charmass+0x1c>

	}
}
 8001270:	bf00      	nop
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	cccccccd 	.word	0xcccccccd

08001280 <SyncAccel>:


// Функция синхронизации
void SyncAccel(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	  // Синхронизация
	  if(readFlag==1)
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <SyncAccel+0x88>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d110      	bne.n	80012ae <SyncAccel+0x2e>
	  {
		UsartCount=0;
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <SyncAccel+0x8c>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
	  	readFlag=0;
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <SyncAccel+0x88>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f002 fabd 	bl	8003818 <HAL_Delay>
	  	HAL_UART_Abort(&huart3);
 800129e:	481c      	ldr	r0, [pc, #112]	; (8001310 <SyncAccel+0x90>)
 80012a0:	f004 ffce 	bl	8006240 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 80012a4:	220e      	movs	r2, #14
 80012a6:	491b      	ldr	r1, [pc, #108]	; (8001314 <SyncAccel+0x94>)
 80012a8:	4819      	ldr	r0, [pc, #100]	; (8001310 <SyncAccel+0x90>)
 80012aa:	f004 ff49 	bl	8006140 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag2==1)
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <SyncAccel+0x98>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d110      	bne.n	80012d8 <SyncAccel+0x58>
	  {
		UsartCount=0;
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <SyncAccel+0x8c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	  	readFlag2=0;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <SyncAccel+0x98>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f002 faa8 	bl	8003818 <HAL_Delay>
	  	HAL_UART_Abort(&huart1);
 80012c8:	4814      	ldr	r0, [pc, #80]	; (800131c <SyncAccel+0x9c>)
 80012ca:	f004 ffb9 	bl	8006240 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 80012ce:	220e      	movs	r2, #14
 80012d0:	4913      	ldr	r1, [pc, #76]	; (8001320 <SyncAccel+0xa0>)
 80012d2:	4812      	ldr	r0, [pc, #72]	; (800131c <SyncAccel+0x9c>)
 80012d4:	f004 ff34 	bl	8006140 <HAL_UART_Receive_DMA>
	  }
	  if(readFlag3==1)
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <SyncAccel+0xa4>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d110      	bne.n	8001302 <SyncAccel+0x82>
	  {
		UsartCount=0;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <SyncAccel+0x8c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
	  	readFlag3=0;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <SyncAccel+0xa4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f002 fa93 	bl	8003818 <HAL_Delay>
	  	HAL_UART_Abort(&huart5);
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <SyncAccel+0xa8>)
 80012f4:	f004 ffa4 	bl	8006240 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 80012f8:	220e      	movs	r2, #14
 80012fa:	490c      	ldr	r1, [pc, #48]	; (800132c <SyncAccel+0xac>)
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <SyncAccel+0xa8>)
 80012fe:	f004 ff1f 	bl	8006140 <HAL_UART_Receive_DMA>
	  }


}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20007080 	.word	0x20007080
 800130c:	200004f6 	.word	0x200004f6
 8001310:	200005e8 	.word	0x200005e8
 8001314:	200004ac 	.word	0x200004ac
 8001318:	20007058 	.word	0x20007058
 800131c:	20000d2c 	.word	0x20000d2c
 8001320:	200004c8 	.word	0x200004c8
 8001324:	20000560 	.word	0x20000560
 8001328:	20000c24 	.word	0x20000c24
 800132c:	200004ba 	.word	0x200004ba

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001336:	f002 f9fd 	bl	8003734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800133a:	f000 f9ed 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3,GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	210e      	movs	r1, #14
 8001342:	489c      	ldr	r0, [pc, #624]	; (80015b4 <main+0x284>)
 8001344:	f003 f952 	bl	80045ec <HAL_GPIO_WritePin>
  MX_GPIO_Init();
 8001348:	f000 fc42 	bl	8001bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 800134c:	f000 fbfa 	bl	8001b44 <MX_DMA_Init>
  MX_SPI1_Init();
 8001350:	f000 fa54 	bl	80017fc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001354:	f000 fba2 	bl	8001a9c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001358:	f000 fbca 	bl	8001af0 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800135c:	f000 fb74 	bl	8001a48 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001360:	f005 fe44 	bl	8006fec <MX_FATFS_Init>
  MX_SPI3_Init();
 8001364:	f000 fa80 	bl	8001868 <MX_SPI3_Init>
  MX_UART5_Init();
 8001368:	f000 fb44 	bl	80019f4 <MX_UART5_Init>
  MX_TIM6_Init();
 800136c:	f000 fab2 	bl	80018d4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001370:	f000 fae6 	bl	8001940 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001374:	f000 fb1a 	bl	80019ac <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  for(uint16_t i=92;i<512;i++)
 8001378:	235c      	movs	r3, #92	; 0x5c
 800137a:	80fb      	strh	r3, [r7, #6]
 800137c:	e00a      	b.n	8001394 <main+0x64>
  {
       block_file[i]=0;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	4a8d      	ldr	r2, [pc, #564]	; (80015b8 <main+0x288>)
 8001382:	2100      	movs	r1, #0
 8001384:	54d1      	strb	r1, [r2, r3]
       block_file2[i]=0;
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	4a8c      	ldr	r2, [pc, #560]	; (80015bc <main+0x28c>)
 800138a:	2100      	movs	r1, #0
 800138c:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=92;i<512;i++)
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	3301      	adds	r3, #1
 8001392:	80fb      	strh	r3, [r7, #6]
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139a:	d3f0      	bcc.n	800137e <main+0x4e>




    // Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 800139c:	f7ff fa28 	bl	80007f0 <Rf96_Lora_init>
	Rf96_Lora_TX_mode();
 80013a0:	f7ff fa4a 	bl	8000838 <Rf96_Lora_TX_mode>

    // Запуск приема в дма с аксселерометров
    HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 80013a4:	220e      	movs	r2, #14
 80013a6:	4986      	ldr	r1, [pc, #536]	; (80015c0 <main+0x290>)
 80013a8:	4886      	ldr	r0, [pc, #536]	; (80015c4 <main+0x294>)
 80013aa:	f004 fec9 	bl	8006140 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 80013ae:	220e      	movs	r2, #14
 80013b0:	4985      	ldr	r1, [pc, #532]	; (80015c8 <main+0x298>)
 80013b2:	4886      	ldr	r0, [pc, #536]	; (80015cc <main+0x29c>)
 80013b4:	f004 fec4 	bl	8006140 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 80013b8:	220e      	movs	r2, #14
 80013ba:	4985      	ldr	r1, [pc, #532]	; (80015d0 <main+0x2a0>)
 80013bc:	4885      	ldr	r0, [pc, #532]	; (80015d4 <main+0x2a4>)
 80013be:	f004 febf 	bl	8006140 <HAL_UART_Receive_DMA>

    // Отправка первого нулевого пакета
	PacketToRadio();
 80013c2:	f7ff fa61 	bl	8000888 <PacketToRadio>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2101      	movs	r1, #1
 80013ca:	487a      	ldr	r0, [pc, #488]	; (80015b4 <main+0x284>)
 80013cc:	f003 f90e 	bl	80045ec <HAL_GPIO_WritePin>


	//SDCARD_Init();

	///ФЛЕШКА
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2102      	movs	r1, #2
 80013d4:	4877      	ldr	r0, [pc, #476]	; (80015b4 <main+0x284>)
 80013d6:	f003 f909 	bl	80045ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	2104      	movs	r1, #4
 80013de:	4875      	ldr	r0, [pc, #468]	; (80015b4 <main+0x284>)
 80013e0:	f003 f904 	bl	80045ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2108      	movs	r1, #8
 80013e8:	4872      	ldr	r0, [pc, #456]	; (80015b4 <main+0x284>)
 80013ea:	f003 f8ff 	bl	80045ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2102      	movs	r1, #2
 80013f2:	4870      	ldr	r0, [pc, #448]	; (80015b4 <main+0x284>)
 80013f4:	f003 f8fa 	bl	80045ec <HAL_GPIO_WritePin>
	UINT bytesWrote;
    fres = f_mount(&FatFs, "", 1); //1=mount now
 80013f8:	2201      	movs	r2, #1
 80013fa:	4977      	ldr	r1, [pc, #476]	; (80015d8 <main+0x2a8>)
 80013fc:	4877      	ldr	r0, [pc, #476]	; (80015dc <main+0x2ac>)
 80013fe:	f007 fbc3 	bl	8008b88 <f_mount>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b76      	ldr	r3, [pc, #472]	; (80015e0 <main+0x2b0>)
 8001408:	701a      	strb	r2, [r3, #0]

	  if (fres != FR_OK) {
 800140a:	4b75      	ldr	r3, [pc, #468]	; (80015e0 <main+0x2b0>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00f      	beq.n	8001432 <main+0x102>
		while(1)
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	2102      	movs	r1, #2
 8001416:	4867      	ldr	r0, [pc, #412]	; (80015b4 <main+0x284>)
 8001418:	f003 f8e8 	bl	80045ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2104      	movs	r1, #4
 8001420:	4864      	ldr	r0, [pc, #400]	; (80015b4 <main+0x284>)
 8001422:	f003 f8e3 	bl	80045ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001426:	2201      	movs	r2, #1
 8001428:	2108      	movs	r1, #8
 800142a:	4862      	ldr	r0, [pc, #392]	; (80015b4 <main+0x284>)
 800142c:	f003 f8de 	bl	80045ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001430:	e7ef      	b.n	8001412 <main+0xe2>
		}
	  }
	  fres = f_open(&fil, "Data.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001432:	220a      	movs	r2, #10
 8001434:	496b      	ldr	r1, [pc, #428]	; (80015e4 <main+0x2b4>)
 8001436:	486c      	ldr	r0, [pc, #432]	; (80015e8 <main+0x2b8>)
 8001438:	f007 fbec 	bl	8008c14 <f_open>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	4b67      	ldr	r3, [pc, #412]	; (80015e0 <main+0x2b0>)
 8001442:	701a      	strb	r2, [r3, #0]

    if(fres == FR_OK) {
 8001444:	4b66      	ldr	r3, [pc, #408]	; (80015e0 <main+0x2b0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00f      	beq.n	800146c <main+0x13c>

    } else {
		while(1)
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2102      	movs	r1, #2
 8001450:	4858      	ldr	r0, [pc, #352]	; (80015b4 <main+0x284>)
 8001452:	f003 f8cb 	bl	80045ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	2104      	movs	r1, #4
 800145a:	4856      	ldr	r0, [pc, #344]	; (80015b4 <main+0x284>)
 800145c:	f003 f8c6 	bl	80045ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2108      	movs	r1, #8
 8001464:	4853      	ldr	r0, [pc, #332]	; (80015b4 <main+0x284>)
 8001466:	f003 f8c1 	bl	80045ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800146a:	e7ef      	b.n	800144c <main+0x11c>
		}
    }

   // f_close(&fil);

    HAL_TIM_Base_Start_IT(&htim6);
 800146c:	485f      	ldr	r0, [pc, #380]	; (80015ec <main+0x2bc>)
 800146e:	f004 fb6a 	bl	8005b46 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8001472:	485f      	ldr	r0, [pc, #380]	; (80015f0 <main+0x2c0>)
 8001474:	f004 fb67 	bl	8005b46 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim10);
 8001478:	485e      	ldr	r0, [pc, #376]	; (80015f4 <main+0x2c4>)
 800147a:	f004 fb64 	bl	8005b46 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==RESET)
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	484c      	ldr	r0, [pc, #304]	; (80015b4 <main+0x284>)
 8001484:	f003 f89a 	bl	80045bc <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d110      	bne.n	80014b0 <main+0x180>
	  {
		  //Close file, don't forget this!
		  //HAL_Delay(10);
		   f_close(&fil);
 800148e:	4856      	ldr	r0, [pc, #344]	; (80015e8 <main+0x2b8>)
 8001490:	f007 ff71 	bl	8009376 <f_close>
		  // HAL_Delay(5);
		   //De-mount drive
		  f_mount(NULL, "", 0);
 8001494:	2200      	movs	r2, #0
 8001496:	4950      	ldr	r1, [pc, #320]	; (80015d8 <main+0x2a8>)
 8001498:	2000      	movs	r0, #0
 800149a:	f007 fb75 	bl	8008b88 <f_mount>
		  while(1)
		  {
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
		  HAL_Delay(500);
 800149e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a2:	f002 f9b9 	bl	8003818 <HAL_Delay>
		//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
		  HAL_Delay(500);
 80014a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014aa:	f002 f9b5 	bl	8003818 <HAL_Delay>
		  HAL_Delay(500);
 80014ae:	e7f6      	b.n	800149e <main+0x16e>
		  }
	  }
	  // Синхронизация
	    SyncAccel();
 80014b0:	f7ff fee6 	bl	8001280 <SyncAccel>

	  // отправка по радиоканалу
		if(Get_NIRQ_Di0())
 80014b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b8:	484f      	ldr	r0, [pc, #316]	; (80015f8 <main+0x2c8>)
 80014ba:	f003 f87f 	bl	80045bc <HAL_GPIO_ReadPin>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <main+0x198>
		{
			PacketToRadio();
 80014c4:	f7ff f9e0 	bl	8000888 <PacketToRadio>
		}




if(count_order_Minus>0)
 80014c8:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <main+0x2cc>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0d6      	beq.n	800147e <main+0x14e>
{


			//HAL_UART_Transmit_IT(&huart2, "\n", 1);
			reciveTime2 = HAL_GetTick();
 80014d0:	f002 f996 	bl	8003800 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b4a      	ldr	r3, [pc, #296]	; (8001600 <main+0x2d0>)
 80014d8:	601a      	str	r2, [r3, #0]
			metka=0;
 80014da:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <main+0x2d4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]


			if(z==0)
 80014e0:	4b49      	ldr	r3, [pc, #292]	; (8001608 <main+0x2d8>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11c      	bne.n	8001522 <main+0x1f2>
			{
				z=1;
 80014e8:	4b47      	ldr	r3, [pc, #284]	; (8001608 <main+0x2d8>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]

				memset(Buf_order,0,NumofPacket*36);
 80014ee:	22fc      	movs	r2, #252	; 0xfc
 80014f0:	2100      	movs	r1, #0
 80014f2:	4846      	ldr	r0, [pc, #280]	; (800160c <main+0x2dc>)
 80014f4:	f007 fff0 	bl	80094d8 <memset>
				for(uint8_t i=0;i<NumofPacket;i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	717b      	strb	r3, [r7, #5]
 80014fc:	e00e      	b.n	800151c <main+0x1ec>
				{
					uint32_TO_charmass(0, Buf_order, i*36, 8);
 80014fe:	797b      	ldrb	r3, [r7, #5]
 8001500:	b29b      	uxth	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	00d2      	lsls	r2, r2, #3
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	b29a      	uxth	r2, r3
 800150c:	2308      	movs	r3, #8
 800150e:	493f      	ldr	r1, [pc, #252]	; (800160c <main+0x2dc>)
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff fe7b 	bl	800120c <uint32_TO_charmass>
				for(uint8_t i=0;i<NumofPacket;i++)
 8001516:	797b      	ldrb	r3, [r7, #5]
 8001518:	3301      	adds	r3, #1
 800151a:	717b      	strb	r3, [r7, #5]
 800151c:	797b      	ldrb	r3, [r7, #5]
 800151e:	2b06      	cmp	r3, #6
 8001520:	d9ed      	bls.n	80014fe <main+0x1ce>
				}
			}

				transmit(&Buf_order[count_order_Point*252],Buff_str2);
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <main+0x2e0>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	4613      	mov	r3, r2
 800152a:	019b      	lsls	r3, r3, #6
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	461a      	mov	r2, r3
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <main+0x2dc>)
 8001534:	4413      	add	r3, r2
 8001536:	4937      	ldr	r1, [pc, #220]	; (8001614 <main+0x2e4>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f9df 	bl	80008fc <transmit>
				count_order_Point++;
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <main+0x2e0>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b32      	ldr	r3, [pc, #200]	; (8001610 <main+0x2e0>)
 8001548:	701a      	strb	r2, [r3, #0]
				count_order_Minus--;
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <main+0x2cc>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	3b01      	subs	r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <main+0x2cc>)
 8001554:	701a      	strb	r2, [r3, #0]
				if(count_order_Point==NumOfOrder)
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <main+0x2e0>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d102      	bne.n	8001564 <main+0x234>
				{
					count_order_Point=0;
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <main+0x2e0>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
				}

				Buff_str2[510]=';';
 8001564:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <main+0x2e4>)
 8001566:	223b      	movs	r2, #59	; 0x3b
 8001568:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
				Buff_str2[511]='\n';
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <main+0x2e4>)
 800156e:	220a      	movs	r2, #10
 8001570:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff


				// Запись на SD 2 буфера

				fres = f_write(&fil, &Buff_str2, sizeof(Buff_str2), &bytesWrote);
 8001574:	463b      	mov	r3, r7
 8001576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157a:	4926      	ldr	r1, [pc, #152]	; (8001614 <main+0x2e4>)
 800157c:	481a      	ldr	r0, [pc, #104]	; (80015e8 <main+0x2b8>)
 800157e:	f007 fd07 	bl	8008f90 <f_write>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <main+0x2b0>)
 8001588:	701a      	strb	r2, [r3, #0]
				 if (fres != FR_OK)
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <main+0x2b0>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d042      	beq.n	8001618 <main+0x2e8>
				 {
					while(1)
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2102      	movs	r1, #2
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <main+0x284>)
 8001598:	f003 f828 	bl	80045ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2104      	movs	r1, #4
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <main+0x284>)
 80015a2:	f003 f823 	bl	80045ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2108      	movs	r1, #8
 80015aa:	4802      	ldr	r0, [pc, #8]	; (80015b4 <main+0x284>)
 80015ac:	f003 f81e 	bl	80045ec <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80015b0:	e7ef      	b.n	8001592 <main+0x262>
 80015b2:	bf00      	nop
 80015b4:	40020800 	.word	0x40020800
 80015b8:	20000004 	.word	0x20000004
 80015bc:	20000204 	.word	0x20000204
 80015c0:	200004ac 	.word	0x200004ac
 80015c4:	200005e8 	.word	0x200005e8
 80015c8:	200004ba 	.word	0x200004ba
 80015cc:	20000c24 	.word	0x20000c24
 80015d0:	200004c8 	.word	0x200004c8
 80015d4:	20000d2c 	.word	0x20000d2c
 80015d8:	08009d2c 	.word	0x08009d2c
 80015dc:	20000628 	.word	0x20000628
 80015e0:	20007294 	.word	0x20007294
 80015e4:	08009d30 	.word	0x08009d30
 80015e8:	2000729c 	.word	0x2000729c
 80015ec:	20007010 	.word	0x20007010
 80015f0:	200074cc 	.word	0x200074cc
 80015f4:	20000858 	.word	0x20000858
 80015f8:	40020000 	.word	0x40020000
 80015fc:	2000050a 	.word	0x2000050a
 8001600:	20000500 	.word	0x20000500
 8001604:	2000050b 	.word	0x2000050b
 8001608:	2000050c 	.word	0x2000050c
 800160c:	20000d7c 	.word	0x20000d7c
 8001610:	20000509 	.word	0x20000509
 8001614:	200009b0 	.word	0x200009b0
					}
				 }
				 fres = f_sync(&fil);
 8001618:	4834      	ldr	r0, [pc, #208]	; (80016ec <main+0x3bc>)
 800161a:	f007 fe2e 	bl	800927a <f_sync>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <main+0x3c0>)
 8001624:	701a      	strb	r2, [r3, #0]


				 SDCARD_WriteSingleBlock(blockAddr++, Buff_str2);
 8001626:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <main+0x3c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	4931      	ldr	r1, [pc, #196]	; (80016f4 <main+0x3c4>)
 800162e:	600a      	str	r2, [r1, #0]
 8001630:	4931      	ldr	r1, [pc, #196]	; (80016f8 <main+0x3c8>)
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fe34 	bl	80022a0 <SDCARD_WriteSingleBlock>
				 NubofByte+=2;
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <main+0x3cc>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	3302      	adds	r3, #2
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <main+0x3cc>)
 8001642:	801a      	strh	r2, [r3, #0]
				 if(NubofByte==256)
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <main+0x3cc>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800164c:	d12d      	bne.n	80016aa <main+0x37a>
				 {
					 pac += 2;
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <main+0x3d0>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	3302      	adds	r3, #2
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <main+0x3d0>)
 8001658:	801a      	strh	r2, [r3, #0]
					 NubofByte=0;
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <main+0x3cc>)
 800165c:	2200      	movs	r2, #0
 800165e:	801a      	strh	r2, [r3, #0]
//					 block_file[30]+=1;

					 block += 1;
 8001660:	4b28      	ldr	r3, [pc, #160]	; (8001704 <main+0x3d4>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	b29a      	uxth	r2, r3
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <main+0x3d4>)
 800166a:	801a      	strh	r2, [r3, #0]
					 block_file2[4 + pac] = block;
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <main+0x3d4>)
 800166e:	881a      	ldrh	r2, [r3, #0]
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <main+0x3d0>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	3304      	adds	r3, #4
 8001676:	b2d1      	uxtb	r1, r2
 8001678:	4a23      	ldr	r2, [pc, #140]	; (8001708 <main+0x3d8>)
 800167a:	54d1      	strb	r1, [r2, r3]
					 block_file2[5 + pac] = 0x00;
 800167c:	4b20      	ldr	r3, [pc, #128]	; (8001700 <main+0x3d0>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	3305      	adds	r3, #5
 8001682:	4a21      	ldr	r2, [pc, #132]	; (8001708 <main+0x3d8>)
 8001684:	2100      	movs	r1, #0
 8001686:	54d1      	strb	r1, [r2, r3]
					 block_file2[6 + pac] = 0xFF;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <main+0x3d0>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	3306      	adds	r3, #6
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <main+0x3d8>)
 8001690:	21ff      	movs	r1, #255	; 0xff
 8001692:	54d1      	strb	r1, [r2, r3]
					 block_file2[7 + pac] = 0xFF;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <main+0x3d0>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	3307      	adds	r3, #7
 800169a:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <main+0x3d8>)
 800169c:	21ff      	movs	r1, #255	; 0xff
 800169e:	54d1      	strb	r1, [r2, r3]
					 SDCARD_WriteSingleBlock(file_conf_sect, block_file2);
 80016a0:	4919      	ldr	r1, [pc, #100]	; (8001708 <main+0x3d8>)
 80016a2:	f640 0001 	movw	r0, #2049	; 0x801
 80016a6:	f000 fdfb 	bl	80022a0 <SDCARD_WriteSingleBlock>
				 }
				 block_file[29]=NubofByte;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <main+0x3cc>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <main+0x3dc>)
 80016b2:	775a      	strb	r2, [r3, #29]
				// block_file[28]=(uint8_t)(Sector_Namefile>>16);
				// block_file[29]=(uint8_t)(Sector_Namefile>>8);
				// block_file[30]=(uint8_t)(Sector_Namefile);


			 SDCARD_WriteSingleBlock(file_name_sect, block_file);
 80016b4:	4915      	ldr	r1, [pc, #84]	; (800170c <main+0x3dc>)
 80016b6:	f44f 6028 	mov.w	r0, #2688	; 0xa80
 80016ba:	f000 fdf1 	bl	80022a0 <SDCARD_WriteSingleBlock>
					 block_file2[488]-=1;
				     block_file2[492]+=1;
					 SDCARD_WriteSingleBlock(file_conf_sect, block_file2);
				 }
*/
				 countT++;
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <main+0x3e0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <main+0x3e0>)
 80016c6:	6013      	str	r3, [r2, #0]
				 if(countT==255)
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <main+0x3e0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2bff      	cmp	r3, #255	; 0xff
 80016ce:	d102      	bne.n	80016d6 <main+0x3a6>
				 {
					 countT=0;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <main+0x3e0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
				 }

				 reciveTime3 = HAL_GetTick();
 80016d6:	f002 f893 	bl	8003800 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <main+0x3e4>)
 80016de:	601a      	str	r2, [r3, #0]
				 reciveTime3 = HAL_GetTick();
 80016e0:	f002 f88e 	bl	8003800 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <main+0x3e4>)
 80016e8:	601a      	str	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==RESET)
 80016ea:	e6c8      	b.n	800147e <main+0x14e>
 80016ec:	2000729c 	.word	0x2000729c
 80016f0:	20007294 	.word	0x20007294
 80016f4:	20000000 	.word	0x20000000
 80016f8:	200009b0 	.word	0x200009b0
 80016fc:	200004f4 	.word	0x200004f4
 8001700:	2000050e 	.word	0x2000050e
 8001704:	20000404 	.word	0x20000404
 8001708:	20000204 	.word	0x20000204
 800170c:	20000004 	.word	0x20000004
 8001710:	20000510 	.word	0x20000510
 8001714:	20000504 	.word	0x20000504

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b094      	sub	sp, #80	; 0x50
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	2234      	movs	r2, #52	; 0x34
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f007 fed6 	bl	80094d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <SystemClock_Config+0xdc>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	4a2b      	ldr	r2, [pc, #172]	; (80017f4 <SystemClock_Config+0xdc>)
 8001746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174a:	6413      	str	r3, [r2, #64]	; 0x40
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <SystemClock_Config+0xdc>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001758:	2300      	movs	r3, #0
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <SystemClock_Config+0xe0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a25      	ldr	r2, [pc, #148]	; (80017f8 <SystemClock_Config+0xe0>)
 8001762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <SystemClock_Config+0xe0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001774:	2302      	movs	r3, #2
 8001776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001778:	2301      	movs	r3, #1
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177c:	2310      	movs	r3, #16
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001780:	2302      	movs	r3, #2
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001784:	2300      	movs	r3, #0
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001788:	2308      	movs	r3, #8
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800178c:	23b4      	movs	r3, #180	; 0xb4
 800178e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001790:	2302      	movs	r3, #2
 8001792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001794:	2302      	movs	r3, #2
 8001796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001798:	2302      	movs	r3, #2
 800179a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fa47 	bl	8004c34 <HAL_RCC_OscConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017ac:	f000 fd04 	bl	80021b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017b0:	f002 ff36 	bl	8004620 <HAL_PWREx_EnableOverDrive>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017ba:	f000 fcfd 	bl	80021b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017be:	230f      	movs	r3, #15
 80017c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c2:	2302      	movs	r3, #2
 80017c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	2105      	movs	r1, #5
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 ff6f 	bl	80046c0 <HAL_RCC_ClockConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80017e8:	f000 fce6 	bl	80021b8 <Error_Handler>
  }
}
 80017ec:	bf00      	nop
 80017ee:	3750      	adds	r7, #80	; 0x50
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40007000 	.word	0x40007000

080017fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_SPI1_Init+0x64>)
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <MX_SPI1_Init+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <MX_SPI1_Init+0x64>)
 8001808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800180c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_SPI1_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_SPI1_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_SPI1_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_SPI1_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_SPI1_Init+0x64>)
 8001828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_SPI1_Init+0x64>)
 8001830:	2210      	movs	r2, #16
 8001832:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <MX_SPI1_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_SPI1_Init+0x64>)
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <MX_SPI1_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_SPI1_Init+0x64>)
 8001848:	220a      	movs	r2, #10
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_SPI1_Init+0x64>)
 800184e:	f003 fc4b 	bl	80050e8 <HAL_SPI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001858:	f000 fcae 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20007184 	.word	0x20007184
 8001864:	40013000 	.word	0x40013000

08001868 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_SPI3_Init+0x64>)
 800186e:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <MX_SPI3_Init+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_SPI3_Init+0x64>)
 8001874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001878:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_SPI3_Init+0x64>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <MX_SPI3_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_SPI3_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_SPI3_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_SPI3_Init+0x64>)
 8001894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001898:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_SPI3_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <MX_SPI3_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_SPI3_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <MX_SPI3_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_SPI3_Init+0x64>)
 80018b4:	220a      	movs	r2, #10
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_SPI3_Init+0x64>)
 80018ba:	f003 fc15 	bl	80050e8 <HAL_SPI_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80018c4:	f000 fc78 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000bc4 	.word	0x20000bc4
 80018d0:	40003c00 	.word	0x40003c00

080018d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018da:	463b      	mov	r3, r7
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <MX_TIM6_Init+0x64>)
 80018e4:	4a15      	ldr	r2, [pc, #84]	; (800193c <MX_TIM6_Init+0x68>)
 80018e6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_TIM6_Init+0x64>)
 80018ea:	f242 3227 	movw	r2, #8999	; 0x2327
 80018ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_TIM6_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MX_TIM6_Init+0x64>)
 80018f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_TIM6_Init+0x64>)
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <MX_TIM6_Init+0x64>)
 8001906:	f004 f8f3 	bl	8005af0 <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001910:	f000 fc52 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_TIM6_Init+0x64>)
 8001922:	f004 fb2f 	bl	8005f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800192c:	f000 fc44 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20007010 	.word	0x20007010
 800193c:	40001000 	.word	0x40001000

08001940 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001946:	463b      	mov	r3, r7
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <MX_TIM7_Init+0x64>)
 8001950:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <MX_TIM7_Init+0x68>)
 8001952:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_TIM7_Init+0x64>)
 8001956:	f242 3227 	movw	r2, #8999	; 0x2327
 800195a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_TIM7_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_TIM7_Init+0x64>)
 8001964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001968:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_TIM7_Init+0x64>)
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <MX_TIM7_Init+0x64>)
 8001972:	f004 f8bd 	bl	8005af0 <HAL_TIM_Base_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800197c:	f000 fc1c 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001988:	463b      	mov	r3, r7
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_TIM7_Init+0x64>)
 800198e:	f004 faf9 	bl	8005f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001998:	f000 fc0e 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200074cc 	.word	0x200074cc
 80019a8:	40001400 	.word	0x40001400

080019ac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_TIM10_Init+0x40>)
 80019b2:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <MX_TIM10_Init+0x44>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <MX_TIM10_Init+0x40>)
 80019b8:	f242 3227 	movw	r2, #8999	; 0x2327
 80019bc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_TIM10_Init+0x40>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_TIM10_Init+0x40>)
 80019c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ca:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <MX_TIM10_Init+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_TIM10_Init+0x40>)
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <MX_TIM10_Init+0x40>)
 80019da:	f004 f889 	bl	8005af0 <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80019e4:	f000 fbe8 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000858 	.word	0x20000858
 80019f0:	40014400 	.word	0x40014400

080019f4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_UART5_Init+0x4c>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <MX_UART5_Init+0x50>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_UART5_Init+0x4c>)
 8001a00:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001a04:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_UART5_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_UART5_Init+0x4c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_UART5_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_UART5_Init+0x4c>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_UART5_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_UART5_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_UART5_Init+0x4c>)
 8001a2c:	f004 fb3a 	bl	80060a4 <HAL_UART_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a36:	f000 fbbf 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000c24 	.word	0x20000c24
 8001a44:	40005000 	.word	0x40005000

08001a48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_USART1_UART_Init+0x50>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a54:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a80:	f004 fb10 	bl	80060a4 <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a8a:	f000 fb95 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000d2c 	.word	0x20000d2c
 8001a98:	40011000 	.word	0x40011000

08001a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <MX_USART2_UART_Init+0x50>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001aa8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_USART2_UART_Init+0x4c>)
 8001ad4:	f004 fae6 	bl	80060a4 <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ade:	f000 fb6b 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200071e8 	.word	0x200071e8
 8001aec:	40004400 	.word	0x40004400

08001af0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_USART3_UART_Init+0x4c>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <MX_USART3_UART_Init+0x50>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MX_USART3_UART_Init+0x4c>)
 8001afc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001b00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_USART3_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_USART3_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_USART3_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_USART3_UART_Init+0x4c>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_USART3_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_USART3_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_USART3_UART_Init+0x4c>)
 8001b28:	f004 fabc 	bl	80060a4 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b32:	f000 fb41 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200005e8 	.word	0x200005e8
 8001b40:	40004800 	.word	0x40004800

08001b44 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <MX_DMA_Init+0x88>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <MX_DMA_Init+0x88>)
 8001b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <MX_DMA_Init+0x88>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_DMA_Init+0x88>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <MX_DMA_Init+0x88>)
 8001b70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <MX_DMA_Init+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	200b      	movs	r0, #11
 8001b88:	f001 ff43 	bl	8003a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b8c:	200b      	movs	r0, #11
 8001b8e:	f001 ff5c 	bl	8003a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	200c      	movs	r0, #12
 8001b98:	f001 ff3b 	bl	8003a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b9c:	200c      	movs	r0, #12
 8001b9e:	f001 ff54 	bl	8003a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2011      	movs	r0, #17
 8001ba8:	f001 ff33 	bl	8003a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001bac:	2011      	movs	r0, #17
 8001bae:	f001 ff4c 	bl	8003a4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	203a      	movs	r0, #58	; 0x3a
 8001bb8:	f001 ff2b 	bl	8003a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001bbc:	203a      	movs	r0, #58	; 0x3a
 8001bbe:	f001 ff44 	bl	8003a4a <HAL_NVIC_EnableIRQ>

}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b5e      	ldr	r3, [pc, #376]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a5d      	ldr	r2, [pc, #372]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b5b      	ldr	r3, [pc, #364]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b54      	ldr	r3, [pc, #336]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a4f      	ldr	r2, [pc, #316]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a48      	ldr	r2, [pc, #288]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b46      	ldr	r3, [pc, #280]	; (8001d64 <MX_GPIO_Init+0x194>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001c56:	2200      	movs	r2, #0
 8001c58:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001c5c:	4842      	ldr	r0, [pc, #264]	; (8001d68 <MX_GPIO_Init+0x198>)
 8001c5e:	f002 fcc5 	bl	80045ec <HAL_GPIO_WritePin>
                          |acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f248 0112 	movw	r1, #32786	; 0x8012
 8001c68:	4840      	ldr	r0, [pc, #256]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001c6a:	f002 fcbf 	bl	80045ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|acel2_Pin|acel2_2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f246 0142 	movw	r1, #24642	; 0x6042
 8001c74:	483e      	ldr	r0, [pc, #248]	; (8001d70 <MX_GPIO_Init+0x1a0>)
 8001c76:	f002 fcb9 	bl	80045ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c80:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <MX_GPIO_Init+0x1a4>)
 8001c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4836      	ldr	r0, [pc, #216]	; (8001d68 <MX_GPIO_Init+0x198>)
 8001c90:	f002 fb02 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4 
                           acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001c94:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001c98:	617b      	str	r3, [r7, #20]
                          |acel1_Pin|acel1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	482e      	ldr	r0, [pc, #184]	; (8001d68 <MX_GPIO_Init+0x198>)
 8001cae:	f002 faf3 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8001cb2:	f240 4301 	movw	r3, #1025	; 0x401
 8001cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4829      	ldr	r0, [pc, #164]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001cc8:	f002 fae6 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001ccc:	f248 0312 	movw	r3, #32786	; 0x8012
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4821      	ldr	r0, [pc, #132]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001ce6:	f002 fad7 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cea:	2302      	movs	r3, #2
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	481b      	ldr	r0, [pc, #108]	; (8001d70 <MX_GPIO_Init+0x1a0>)
 8001d02:	f002 fac9 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 8001d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4814      	ldr	r0, [pc, #80]	; (8001d70 <MX_GPIO_Init+0x1a0>)
 8001d20:	f002 faba 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pins : acel2_2_Pin PB6 */
  GPIO_InitStruct.Pin = acel2_2_Pin|GPIO_PIN_6;
 8001d24:	f244 0340 	movw	r3, #16448	; 0x4040
 8001d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <MX_GPIO_Init+0x1a0>)
 8001d3e:	f002 faab 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d42:	2338      	movs	r3, #56	; 0x38
 8001d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4806      	ldr	r0, [pc, #24]	; (8001d70 <MX_GPIO_Init+0x1a0>)
 8001d56:	f002 fa9f 	bl	8004298 <HAL_GPIO_Init>

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400
 8001d74:	10210000 	.word	0x10210000

08001d78 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]


if(huart==&huart3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a91      	ldr	r2, [pc, #580]	; (8001fc8 <HAL_UART_RxCpltCallback+0x250>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d12e      	bne.n	8001de6 <HAL_UART_RxCpltCallback+0x6e>
{
		HAL_TIM_Base_Stop_IT(&htim6);
 8001d88:	4890      	ldr	r0, [pc, #576]	; (8001fcc <HAL_UART_RxCpltCallback+0x254>)
 8001d8a:	f003 ff00 	bl	8005b8e <HAL_TIM_Base_Stop_IT>
		TIM6->CNT=0;
 8001d8e:	4b90      	ldr	r3, [pc, #576]	; (8001fd0 <HAL_UART_RxCpltCallback+0x258>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2102      	movs	r1, #2
 8001d98:	488e      	ldr	r0, [pc, #568]	; (8001fd4 <HAL_UART_RxCpltCallback+0x25c>)
 8001d9a:	f002 fc27 	bl	80045ec <HAL_GPIO_WritePin>
	if(package[0][0]!=0x68)
 8001d9e:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <HAL_UART_RxCpltCallback+0x260>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b68      	cmp	r3, #104	; 0x68
 8001da4:	d006      	beq.n	8001db4 <HAL_UART_RxCpltCallback+0x3c>
	{
		readFlag=1;
 8001da6:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <HAL_UART_RxCpltCallback+0x264>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001dac:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_UART_RxCpltCallback+0x268>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e015      	b.n	8001de0 <HAL_UART_RxCpltCallback+0x68>

	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]
 8001db8:	e009      	b.n	8001dce <HAL_UART_RxCpltCallback+0x56>
		{
			packageCut[0][i]=package[0][i+4];
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	1d1a      	adds	r2, r3, #4
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	4985      	ldr	r1, [pc, #532]	; (8001fd8 <HAL_UART_RxCpltCallback+0x260>)
 8001dc2:	5c89      	ldrb	r1, [r1, r2]
 8001dc4:	4a87      	ldr	r2, [pc, #540]	; (8001fe4 <HAL_UART_RxCpltCallback+0x26c>)
 8001dc6:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	75fb      	strb	r3, [r7, #23]
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d9f2      	bls.n	8001dba <HAL_UART_RxCpltCallback+0x42>
		}
		UsartCount++;
 8001dd4:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_UART_RxCpltCallback+0x268>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b80      	ldr	r3, [pc, #512]	; (8001fe0 <HAL_UART_RxCpltCallback+0x268>)
 8001dde:	701a      	strb	r2, [r3, #0]

	}
	HAL_TIM_Base_Start_IT(&htim6);
 8001de0:	487a      	ldr	r0, [pc, #488]	; (8001fcc <HAL_UART_RxCpltCallback+0x254>)
 8001de2:	f003 feb0 	bl	8005b46 <HAL_TIM_Base_Start_IT>
}
if(huart==&huart1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a7f      	ldr	r2, [pc, #508]	; (8001fe8 <HAL_UART_RxCpltCallback+0x270>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d131      	bne.n	8001e52 <HAL_UART_RxCpltCallback+0xda>
{
	HAL_TIM_Base_Stop_IT(&htim7);
 8001dee:	487f      	ldr	r0, [pc, #508]	; (8001fec <HAL_UART_RxCpltCallback+0x274>)
 8001df0:	f003 fecd 	bl	8005b8e <HAL_TIM_Base_Stop_IT>
	TIM7->CNT=0;
 8001df4:	4b7e      	ldr	r3, [pc, #504]	; (8001ff0 <HAL_UART_RxCpltCallback+0x278>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	4875      	ldr	r0, [pc, #468]	; (8001fd4 <HAL_UART_RxCpltCallback+0x25c>)
 8001e00:	f002 fbf4 	bl	80045ec <HAL_GPIO_WritePin>
	if(package[2][0]!=0x68)
 8001e04:	4b74      	ldr	r3, [pc, #464]	; (8001fd8 <HAL_UART_RxCpltCallback+0x260>)
 8001e06:	7f1b      	ldrb	r3, [r3, #28]
 8001e08:	2b68      	cmp	r3, #104	; 0x68
 8001e0a:	d006      	beq.n	8001e1a <HAL_UART_RxCpltCallback+0xa2>
	{
		readFlag2=1;
 8001e0c:	4b79      	ldr	r3, [pc, #484]	; (8001ff4 <HAL_UART_RxCpltCallback+0x27c>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001e12:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_UART_RxCpltCallback+0x268>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e018      	b.n	8001e4c <HAL_UART_RxCpltCallback+0xd4>

	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	75bb      	strb	r3, [r7, #22]
 8001e1e:	e00c      	b.n	8001e3a <HAL_UART_RxCpltCallback+0xc2>
		{
			packageCut[2][i]=package[2][i+4];
 8001e20:	7dbb      	ldrb	r3, [r7, #22]
 8001e22:	1d1a      	adds	r2, r3, #4
 8001e24:	7dbb      	ldrb	r3, [r7, #22]
 8001e26:	496c      	ldr	r1, [pc, #432]	; (8001fd8 <HAL_UART_RxCpltCallback+0x260>)
 8001e28:	440a      	add	r2, r1
 8001e2a:	7f11      	ldrb	r1, [r2, #28]
 8001e2c:	4a6d      	ldr	r2, [pc, #436]	; (8001fe4 <HAL_UART_RxCpltCallback+0x26c>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	460a      	mov	r2, r1
 8001e32:	749a      	strb	r2, [r3, #18]
		for(uint8_t i=0;i<9;i++)
 8001e34:	7dbb      	ldrb	r3, [r7, #22]
 8001e36:	3301      	adds	r3, #1
 8001e38:	75bb      	strb	r3, [r7, #22]
 8001e3a:	7dbb      	ldrb	r3, [r7, #22]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d9ef      	bls.n	8001e20 <HAL_UART_RxCpltCallback+0xa8>
		}
		UsartCount++;
 8001e40:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <HAL_UART_RxCpltCallback+0x268>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b65      	ldr	r3, [pc, #404]	; (8001fe0 <HAL_UART_RxCpltCallback+0x268>)
 8001e4a:	701a      	strb	r2, [r3, #0]
	}
	HAL_TIM_Base_Start_IT(&htim7);
 8001e4c:	4867      	ldr	r0, [pc, #412]	; (8001fec <HAL_UART_RxCpltCallback+0x274>)
 8001e4e:	f003 fe7a 	bl	8005b46 <HAL_TIM_Base_Start_IT>

}

if(huart==&huart5)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a68      	ldr	r2, [pc, #416]	; (8001ff8 <HAL_UART_RxCpltCallback+0x280>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d131      	bne.n	8001ebe <HAL_UART_RxCpltCallback+0x146>
{
	HAL_TIM_Base_Stop_IT(&htim10);
 8001e5a:	4868      	ldr	r0, [pc, #416]	; (8001ffc <HAL_UART_RxCpltCallback+0x284>)
 8001e5c:	f003 fe97 	bl	8005b8e <HAL_TIM_Base_Stop_IT>
	TIM10->CNT=0;
 8001e60:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_UART_RxCpltCallback+0x288>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2108      	movs	r1, #8
 8001e6a:	485a      	ldr	r0, [pc, #360]	; (8001fd4 <HAL_UART_RxCpltCallback+0x25c>)
 8001e6c:	f002 fbbe 	bl	80045ec <HAL_GPIO_WritePin>
	if(package[1][0]!=0x68)
 8001e70:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <HAL_UART_RxCpltCallback+0x260>)
 8001e72:	7b9b      	ldrb	r3, [r3, #14]
 8001e74:	2b68      	cmp	r3, #104	; 0x68
 8001e76:	d006      	beq.n	8001e86 <HAL_UART_RxCpltCallback+0x10e>
	{
		readFlag3=1;
 8001e78:	4b62      	ldr	r3, [pc, #392]	; (8002004 <HAL_UART_RxCpltCallback+0x28c>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
		UsartCount=0;
 8001e7e:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <HAL_UART_RxCpltCallback+0x268>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e018      	b.n	8001eb8 <HAL_UART_RxCpltCallback+0x140>

	}else
	{
		for(uint8_t i=0;i<9;i++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	757b      	strb	r3, [r7, #21]
 8001e8a:	e00c      	b.n	8001ea6 <HAL_UART_RxCpltCallback+0x12e>
		{
			packageCut[1][i]=package[1][i+4];
 8001e8c:	7d7b      	ldrb	r3, [r7, #21]
 8001e8e:	1d1a      	adds	r2, r3, #4
 8001e90:	7d7b      	ldrb	r3, [r7, #21]
 8001e92:	4951      	ldr	r1, [pc, #324]	; (8001fd8 <HAL_UART_RxCpltCallback+0x260>)
 8001e94:	440a      	add	r2, r1
 8001e96:	7b91      	ldrb	r1, [r2, #14]
 8001e98:	4a52      	ldr	r2, [pc, #328]	; (8001fe4 <HAL_UART_RxCpltCallback+0x26c>)
 8001e9a:	4413      	add	r3, r2
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	725a      	strb	r2, [r3, #9]
		for(uint8_t i=0;i<9;i++)
 8001ea0:	7d7b      	ldrb	r3, [r7, #21]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	757b      	strb	r3, [r7, #21]
 8001ea6:	7d7b      	ldrb	r3, [r7, #21]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d9ef      	bls.n	8001e8c <HAL_UART_RxCpltCallback+0x114>
		}
		UsartCount++;
 8001eac:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <HAL_UART_RxCpltCallback+0x268>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <HAL_UART_RxCpltCallback+0x268>)
 8001eb6:	701a      	strb	r2, [r3, #0]

	}
	HAL_TIM_Base_Start_IT(&htim10);
 8001eb8:	4850      	ldr	r0, [pc, #320]	; (8001ffc <HAL_UART_RxCpltCallback+0x284>)
 8001eba:	f003 fe44 	bl	8005b46 <HAL_TIM_Base_Start_IT>
}
if(UsartCount==3 && readFlag==0 && readFlag2==0 && readFlag3==0)  // Получено 1 измерение с каждого датчика
 8001ebe:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <HAL_UART_RxCpltCallback+0x268>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	f040 80df 	bne.w	8002086 <HAL_UART_RxCpltCallback+0x30e>
 8001ec8:	4b44      	ldr	r3, [pc, #272]	; (8001fdc <HAL_UART_RxCpltCallback+0x264>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f040 80da 	bne.w	8002086 <HAL_UART_RxCpltCallback+0x30e>
 8001ed2:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_UART_RxCpltCallback+0x27c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 80d5 	bne.w	8002086 <HAL_UART_RxCpltCallback+0x30e>
 8001edc:	4b49      	ldr	r3, [pc, #292]	; (8002004 <HAL_UART_RxCpltCallback+0x28c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f040 80d0 	bne.w	8002086 <HAL_UART_RxCpltCallback+0x30e>
{
	    UsartCount=0;
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <HAL_UART_RxCpltCallback+0x268>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]


		reciveTime = HAL_GetTick();
 8001eec:	f001 fc88 	bl	8003800 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b45      	ldr	r3, [pc, #276]	; (8002008 <HAL_UART_RxCpltCallback+0x290>)
 8001ef4:	601a      	str	r2, [r3, #0]

		uint32_TO_charmass(reciveTime, Buff_Top, CountOfAccel*36, 8);
 8001ef6:	4b44      	ldr	r3, [pc, #272]	; (8002008 <HAL_UART_RxCpltCallback+0x290>)
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	4b44      	ldr	r3, [pc, #272]	; (800200c <HAL_UART_RxCpltCallback+0x294>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	00d2      	lsls	r2, r2, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	4940      	ldr	r1, [pc, #256]	; (8002010 <HAL_UART_RxCpltCallback+0x298>)
 8001f0e:	f7ff f97d 	bl	800120c <uint32_TO_charmass>
		for(uint8_t i=0;i<9;i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	753b      	strb	r3, [r7, #20]
 8001f16:	e012      	b.n	8001f3e <HAL_UART_RxCpltCallback+0x1c6>
		{
			Buff_Top[i+9+36*CountOfAccel]=packageCut[0][i];
 8001f18:	7d3a      	ldrb	r2, [r7, #20]
 8001f1a:	7d3b      	ldrb	r3, [r7, #20]
 8001f1c:	f103 0109 	add.w	r1, r3, #9
 8001f20:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_UART_RxCpltCallback+0x294>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4403      	add	r3, r0
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	492c      	ldr	r1, [pc, #176]	; (8001fe4 <HAL_UART_RxCpltCallback+0x26c>)
 8001f32:	5c89      	ldrb	r1, [r1, r2]
 8001f34:	4a36      	ldr	r2, [pc, #216]	; (8002010 <HAL_UART_RxCpltCallback+0x298>)
 8001f36:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001f38:	7d3b      	ldrb	r3, [r7, #20]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	753b      	strb	r3, [r7, #20]
 8001f3e:	7d3b      	ldrb	r3, [r7, #20]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d9e9      	bls.n	8001f18 <HAL_UART_RxCpltCallback+0x1a0>

		}
		for(uint8_t i=0;i<9;i++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	74fb      	strb	r3, [r7, #19]
 8001f48:	e013      	b.n	8001f72 <HAL_UART_RxCpltCallback+0x1fa>
		{
			Buff_Top[i+18+36*CountOfAccel]=packageCut[1][i];
 8001f4a:	7cfa      	ldrb	r2, [r7, #19]
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	f103 0112 	add.w	r1, r3, #18
 8001f52:	4b2e      	ldr	r3, [pc, #184]	; (800200c <HAL_UART_RxCpltCallback+0x294>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	4603      	mov	r3, r0
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4403      	add	r3, r0
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	4920      	ldr	r1, [pc, #128]	; (8001fe4 <HAL_UART_RxCpltCallback+0x26c>)
 8001f64:	440a      	add	r2, r1
 8001f66:	7a51      	ldrb	r1, [r2, #9]
 8001f68:	4a29      	ldr	r2, [pc, #164]	; (8002010 <HAL_UART_RxCpltCallback+0x298>)
 8001f6a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	74fb      	strb	r3, [r7, #19]
 8001f72:	7cfb      	ldrb	r3, [r7, #19]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d9e8      	bls.n	8001f4a <HAL_UART_RxCpltCallback+0x1d2>

		}
		for(uint8_t i=0;i<9;i++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	74bb      	strb	r3, [r7, #18]
 8001f7c:	e013      	b.n	8001fa6 <HAL_UART_RxCpltCallback+0x22e>
		{
			Buff_Top[i+27+36*CountOfAccel]=packageCut[2][i];
 8001f7e:	7cba      	ldrb	r2, [r7, #18]
 8001f80:	7cbb      	ldrb	r3, [r7, #18]
 8001f82:	f103 011b 	add.w	r1, r3, #27
 8001f86:	4b21      	ldr	r3, [pc, #132]	; (800200c <HAL_UART_RxCpltCallback+0x294>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4403      	add	r3, r0
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	4913      	ldr	r1, [pc, #76]	; (8001fe4 <HAL_UART_RxCpltCallback+0x26c>)
 8001f98:	440a      	add	r2, r1
 8001f9a:	7c91      	ldrb	r1, [r2, #18]
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_UART_RxCpltCallback+0x298>)
 8001f9e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<9;i++)
 8001fa0:	7cbb      	ldrb	r3, [r7, #18]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	74bb      	strb	r3, [r7, #18]
 8001fa6:	7cbb      	ldrb	r3, [r7, #18]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d9e8      	bls.n	8001f7e <HAL_UART_RxCpltCallback+0x206>

		}


		CountOfAccel++;
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_UART_RxCpltCallback+0x294>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_UART_RxCpltCallback+0x294>)
 8001fb6:	701a      	strb	r2, [r3, #0]


		if(CountOfAccel==NumofPacket)  // Считано 7 измерений с каждого датчика
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_UART_RxCpltCallback+0x294>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b07      	cmp	r3, #7
 8001fbe:	d162      	bne.n	8002086 <HAL_UART_RxCpltCallback+0x30e>
		{
			for(uint32_t i=0;i<252;i++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e039      	b.n	800203a <HAL_UART_RxCpltCallback+0x2c2>
 8001fc6:	bf00      	nop
 8001fc8:	200005e8 	.word	0x200005e8
 8001fcc:	20007010 	.word	0x20007010
 8001fd0:	40001000 	.word	0x40001000
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	200004ac 	.word	0x200004ac
 8001fdc:	20007080 	.word	0x20007080
 8001fe0:	200004f6 	.word	0x200004f6
 8001fe4:	200004d8 	.word	0x200004d8
 8001fe8:	20000d2c 	.word	0x20000d2c
 8001fec:	200074cc 	.word	0x200074cc
 8001ff0:	40001400 	.word	0x40001400
 8001ff4:	20007058 	.word	0x20007058
 8001ff8:	20000c24 	.word	0x20000c24
 8001ffc:	20000858 	.word	0x20000858
 8002000:	40014400 	.word	0x40014400
 8002004:	20000560 	.word	0x20000560
 8002008:	200004f8 	.word	0x200004f8
 800200c:	200004f7 	.word	0x200004f7
 8002010:	20007088 	.word	0x20007088
			{
				Buf_order[i+count_order*252]=Buff_Top[i];
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_UART_RxCpltCallback+0x318>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4613      	mov	r3, r2
 800201c:	019b      	lsls	r3, r3, #6
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	491a      	ldr	r1, [pc, #104]	; (8002094 <HAL_UART_RxCpltCallback+0x31c>)
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	440a      	add	r2, r1
 800202e:	7811      	ldrb	r1, [r2, #0]
 8002030:	4a19      	ldr	r2, [pc, #100]	; (8002098 <HAL_UART_RxCpltCallback+0x320>)
 8002032:	54d1      	strb	r1, [r2, r3]
			for(uint32_t i=0;i<252;i++)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3301      	adds	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2bfb      	cmp	r3, #251	; 0xfb
 800203e:	d9e9      	bls.n	8002014 <HAL_UART_RxCpltCallback+0x29c>
			}
			count_order++;
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_UART_RxCpltCallback+0x318>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_UART_RxCpltCallback+0x318>)
 800204a:	701a      	strb	r2, [r3, #0]
			count_order_Minus++;
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_UART_RxCpltCallback+0x324>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_UART_RxCpltCallback+0x324>)
 8002056:	701a      	strb	r2, [r3, #0]
			if(count_order==NumOfOrder)
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_UART_RxCpltCallback+0x318>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b64      	cmp	r3, #100	; 0x64
 800205e:	d102      	bne.n	8002066 <HAL_UART_RxCpltCallback+0x2ee>
			{
				count_order=0;
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_UART_RxCpltCallback+0x318>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]

			}

			CountOfAccel=0;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_UART_RxCpltCallback+0x328>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
			metka=1;
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_UART_RxCpltCallback+0x32c>)
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
			reciveTime1 = HAL_GetTick();
 8002072:	f001 fbc5 	bl	8003800 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_UART_RxCpltCallback+0x330>)
 800207a:	601a      	str	r2, [r3, #0]
			reciveTime1 = HAL_GetTick();
 800207c:	f001 fbc0 	bl	8003800 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_UART_RxCpltCallback+0x330>)
 8002084:	601a      	str	r2, [r3, #0]



}

}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000508 	.word	0x20000508
 8002094:	20007088 	.word	0x20007088
 8002098:	20000d7c 	.word	0x20000d7c
 800209c:	2000050a 	.word	0x2000050a
 80020a0:	200004f7 	.word	0x200004f7
 80020a4:	2000050b 	.word	0x2000050b
 80020a8:	200004fc 	.word	0x200004fc

080020ac <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]


}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

	if(htim==&htim6)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d117      	bne.n	8002100 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		TIM6->CNT=0;
 80020d0:	4b2a      	ldr	r3, [pc, #168]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[0],0,9);
 80020d6:	2209      	movs	r2, #9
 80020d8:	2100      	movs	r1, #0
 80020da:	4829      	ldr	r0, [pc, #164]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80020dc:	f007 f9fc 	bl	80094d8 <memset>
		HAL_TIM_Base_Start_IT(&htim6);
 80020e0:	4825      	ldr	r0, [pc, #148]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80020e2:	f003 fd30 	bl	8005b46 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	2102      	movs	r1, #2
 80020ea:	4826      	ldr	r0, [pc, #152]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80020ec:	f002 fa7e 	bl	80045ec <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart3);
 80020f0:	4825      	ldr	r0, [pc, #148]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80020f2:	f004 f8a5 	bl	8006240 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart3, &package[0][0], 14);
 80020f6:	220e      	movs	r2, #14
 80020f8:	4924      	ldr	r1, [pc, #144]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80020fa:	4823      	ldr	r0, [pc, #140]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80020fc:	f004 f820 	bl	8006140 <HAL_UART_Receive_DMA>
	}
	if(htim==&htim7)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a23      	ldr	r2, [pc, #140]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d117      	bne.n	8002138 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		TIM7->CNT=0;
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[2],0,9);
 800210e:	2209      	movs	r2, #9
 8002110:	2100      	movs	r1, #0
 8002112:	4821      	ldr	r0, [pc, #132]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002114:	f007 f9e0 	bl	80094d8 <memset>
		HAL_TIM_Base_Start_IT(&htim7);
 8002118:	481d      	ldr	r0, [pc, #116]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800211a:	f003 fd14 	bl	8005b46 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800211e:	2201      	movs	r2, #1
 8002120:	2104      	movs	r1, #4
 8002122:	4818      	ldr	r0, [pc, #96]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002124:	f002 fa62 	bl	80045ec <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart1);
 8002128:	481c      	ldr	r0, [pc, #112]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800212a:	f004 f889 	bl	8006240 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart1, &package[2][0], 14);
 800212e:	220e      	movs	r2, #14
 8002130:	491b      	ldr	r1, [pc, #108]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002132:	481a      	ldr	r0, [pc, #104]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002134:	f004 f804 	bl	8006140 <HAL_UART_Receive_DMA>
	}
	if(htim==&htim10)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d117      	bne.n	8002170 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		TIM10->CNT=0;
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002142:	2200      	movs	r2, #0
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
		memset(packageCut[1],0,9);
 8002146:	2209      	movs	r2, #9
 8002148:	2100      	movs	r1, #0
 800214a:	4818      	ldr	r0, [pc, #96]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0xec>)
 800214c:	f007 f9c4 	bl	80094d8 <memset>
		HAL_TIM_Base_Start_IT(&htim10);
 8002150:	4814      	ldr	r0, [pc, #80]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002152:	f003 fcf8 	bl	8005b46 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8002156:	2201      	movs	r2, #1
 8002158:	2108      	movs	r1, #8
 800215a:	480a      	ldr	r0, [pc, #40]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800215c:	f002 fa46 	bl	80045ec <HAL_GPIO_WritePin>
	  	HAL_UART_Abort(&huart5);
 8002160:	4813      	ldr	r0, [pc, #76]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002162:	f004 f86d 	bl	8006240 <HAL_UART_Abort>
	  	HAL_UART_Receive_DMA(&huart5, &package[1][0], 14);
 8002166:	220e      	movs	r2, #14
 8002168:	4912      	ldr	r1, [pc, #72]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800216a:	4811      	ldr	r0, [pc, #68]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800216c:	f003 ffe8 	bl	8006140 <HAL_UART_Receive_DMA>
	}



}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20007010 	.word	0x20007010
 800217c:	40001000 	.word	0x40001000
 8002180:	200004d8 	.word	0x200004d8
 8002184:	40020800 	.word	0x40020800
 8002188:	200005e8 	.word	0x200005e8
 800218c:	200004ac 	.word	0x200004ac
 8002190:	200074cc 	.word	0x200074cc
 8002194:	40001400 	.word	0x40001400
 8002198:	200004ea 	.word	0x200004ea
 800219c:	20000d2c 	.word	0x20000d2c
 80021a0:	200004c8 	.word	0x200004c8
 80021a4:	20000858 	.word	0x20000858
 80021a8:	40014400 	.word	0x40014400
 80021ac:	200004e1 	.word	0x200004e1
 80021b0:	20000c24 	.word	0x20000c24
 80021b4:	200004ba 	.word	0x200004ba

080021b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SDCARD_Select>:
/* vim: set ai et ts=4 sw=4: */

#include "sdcard.h"

static void SDCARD_Select() {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d2:	4802      	ldr	r0, [pc, #8]	; (80021dc <SDCARD_Select+0x14>)
 80021d4:	f002 fa0a 	bl	80045ec <HAL_GPIO_WritePin>
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40020000 	.word	0x40020000

080021e0 <SDCARD_Unselect>:

void SDCARD_Unselect() {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 80021e4:	2201      	movs	r2, #1
 80021e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ea:	4802      	ldr	r0, [pc, #8]	; (80021f4 <SDCARD_Unselect+0x14>)
 80021ec:	f002 f9fe 	bl	80045ec <HAL_GPIO_WritePin>
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40020000 	.word	0x40020000

080021f8 <SDCARD_ReadR1>:
     ||`----- 5th bit (c): error in the sequence of erase commands
     |`------ 6th bit (b): misaligned addres used in command
     `------- 7th bit (a): command argument outside allowed range
             (8th bit is always zero)
*/
static uint8_t SDCARD_ReadR1() {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af02      	add	r7, sp, #8
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 80021fe:	23ff      	movs	r3, #255	; 0xff
 8002200:	71bb      	strb	r3, [r7, #6]
    for(;;) {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 8002202:	1dfa      	adds	r2, r7, #7
 8002204:	1db9      	adds	r1, r7, #6
 8002206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	4807      	ldr	r0, [pc, #28]	; (800222c <SDCARD_ReadR1+0x34>)
 8002210:	f003 f902 	bl	8005418 <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	b25b      	sxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	da00      	bge.n	800221e <SDCARD_ReadR1+0x26>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 800221c:	e7f1      	b.n	8002202 <SDCARD_ReadR1+0xa>
            break;
 800221e:	bf00      	nop
    }
    return r1;
 8002220:	79fb      	ldrb	r3, [r7, #7]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000bc4 	.word	0x20000bc4

08002230 <SDCARD_ReadBytes>:
            return -1;
    }
    return 0;
}

static int SDCARD_ReadBytes(uint8_t* buff, size_t buff_size) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af02      	add	r7, sp, #8
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 800223a:	23ff      	movs	r3, #255	; 0xff
 800223c:	73fb      	strb	r3, [r7, #15]
    while(buff_size > 0) {
 800223e:	e00f      	b.n	8002260 <SDCARD_ReadBytes+0x30>
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8002240:	f107 010f 	add.w	r1, r7, #15
 8002244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2301      	movs	r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	4808      	ldr	r0, [pc, #32]	; (8002270 <SDCARD_ReadBytes+0x40>)
 8002250:	f003 f8e2 	bl	8005418 <HAL_SPI_TransmitReceive>
        buff++;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3301      	adds	r3, #1
 8002258:	607b      	str	r3, [r7, #4]
        buff_size--;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	3b01      	subs	r3, #1
 800225e:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ec      	bne.n	8002240 <SDCARD_ReadBytes+0x10>
    }

    return 0;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000bc4 	.word	0x20000bc4

08002274 <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy() {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0) {
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ffd6 	bl	8002230 <SDCARD_ReadBytes>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	da02      	bge.n	8002290 <SDCARD_WaitNotBusy+0x1c>
            return -1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800228e:	e003      	b.n	8002298 <SDCARD_WaitNotBusy+0x24>
        }
    } while(busy != 0xFF);
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	2bff      	cmp	r3, #255	; 0xff
 8002294:	d1f1      	bne.n	800227a <SDCARD_WaitNotBusy+0x6>

    return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <SDCARD_WriteSingleBlock>:
    SDCARD_Unselect();
    return 0;
}


int SDCARD_WriteSingleBlock(uint32_t blockNum, const uint8_t* buff) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
    SDCARD_Select();
 80022aa:	f7ff ff8d 	bl	80021c8 <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) { // keep this!
 80022ae:	f7ff ffe1 	bl	8002274 <SDCARD_WaitNotBusy>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	da04      	bge.n	80022c2 <SDCARD_WriteSingleBlock+0x22>
        SDCARD_Unselect();
 80022b8:	f7ff ff92 	bl	80021e0 <SDCARD_Unselect>
        return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c0:	e05e      	b.n	8002380 <SDCARD_WriteSingleBlock+0xe0>
    }

    /* CMD24 (WRITE_BLOCK) command */
    uint8_t cmd[] = {
 80022c2:	2358      	movs	r3, #88	; 0x58
 80022c4:	743b      	strb	r3, [r7, #16]
        0x40 | 0x18 /* CMD24 */,
        (blockNum >> 24) & 0xFF, /* ARG */
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0e1b      	lsrs	r3, r3, #24
    uint8_t cmd[] = {
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	747b      	strb	r3, [r7, #17]
        (blockNum >> 16) & 0xFF,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[] = {
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	74bb      	strb	r3, [r7, #18]
        (blockNum >> 8) & 0xFF,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[] = {
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	74fb      	strb	r3, [r7, #19]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	753b      	strb	r3, [r7, #20]
 80022e4:	23ff      	movs	r3, #255	; 0xff
 80022e6:	757b      	strb	r3, [r7, #21]
        blockNum & 0xFF,
        (0x7F << 1) | 1 /* CRC7 + end bit */
    };
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80022e8:	f107 0110 	add.w	r1, r7, #16
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022f0:	2206      	movs	r2, #6
 80022f2:	4825      	ldr	r0, [pc, #148]	; (8002388 <SDCARD_WriteSingleBlock+0xe8>)
 80022f4:	f002 ff5c 	bl	80051b0 <HAL_SPI_Transmit>

    if(SDCARD_ReadR1() != 0x00) {
 80022f8:	f7ff ff7e 	bl	80021f8 <SDCARD_ReadR1>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <SDCARD_WriteSingleBlock+0x6c>
        SDCARD_Unselect();
 8002302:	f7ff ff6d 	bl	80021e0 <SDCARD_Unselect>
        return -2;
 8002306:	f06f 0301 	mvn.w	r3, #1
 800230a:	e039      	b.n	8002380 <SDCARD_WriteSingleBlock+0xe0>
    }

    uint8_t dataToken = DATA_TOKEN_CMD24;
 800230c:	23fe      	movs	r3, #254	; 0xfe
 800230e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc[2] = { 0xFF, 0xFF };
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <SDCARD_WriteSingleBlock+0xec>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	81bb      	strh	r3, [r7, #12]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 8002316:	f107 010f 	add.w	r1, r7, #15
 800231a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800231e:	2201      	movs	r2, #1
 8002320:	4819      	ldr	r0, [pc, #100]	; (8002388 <SDCARD_WriteSingleBlock+0xe8>)
 8002322:	f002 ff45 	bl	80051b0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 8002326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800232a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800232e:	6839      	ldr	r1, [r7, #0]
 8002330:	4815      	ldr	r0, [pc, #84]	; (8002388 <SDCARD_WriteSingleBlock+0xe8>)
 8002332:	f002 ff3d 	bl	80051b0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 8002336:	f107 010c 	add.w	r1, r7, #12
 800233a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800233e:	2202      	movs	r2, #2
 8002340:	4811      	ldr	r0, [pc, #68]	; (8002388 <SDCARD_WriteSingleBlock+0xe8>)
 8002342:	f002 ff35 	bl	80051b0 <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 8002346:	f107 030b 	add.w	r3, r7, #11
 800234a:	2101      	movs	r1, #1
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff6f 	bl	8002230 <SDCARD_ReadBytes>
    if((dataResp & 0x1F) != 0x05) { // data rejected
 8002352:	7afb      	ldrb	r3, [r7, #11]
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2b05      	cmp	r3, #5
 800235a:	d004      	beq.n	8002366 <SDCARD_WriteSingleBlock+0xc6>
        SDCARD_Unselect();
 800235c:	f7ff ff40 	bl	80021e0 <SDCARD_Unselect>
        return -3;
 8002360:	f06f 0302 	mvn.w	r3, #2
 8002364:	e00c      	b.n	8002380 <SDCARD_WriteSingleBlock+0xe0>
    }

    if(SDCARD_WaitNotBusy() < 0) {
 8002366:	f7ff ff85 	bl	8002274 <SDCARD_WaitNotBusy>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	da04      	bge.n	800237a <SDCARD_WriteSingleBlock+0xda>
        SDCARD_Unselect();
 8002370:	f7ff ff36 	bl	80021e0 <SDCARD_Unselect>
        return -4;
 8002374:	f06f 0303 	mvn.w	r3, #3
 8002378:	e002      	b.n	8002380 <SDCARD_WriteSingleBlock+0xe0>
    }

    SDCARD_Unselect();
 800237a:	f7ff ff31 	bl	80021e0 <SDCARD_Unselect>
    return 0;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000bc4 	.word	0x20000bc4
 800238c:	08009d3c 	.word	0x08009d3c

08002390 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 800239a:	1df9      	adds	r1, r7, #7
 800239c:	230a      	movs	r3, #10
 800239e:	2201      	movs	r2, #1
 80023a0:	4803      	ldr	r0, [pc, #12]	; (80023b0 <SPICmd8bit+0x20>)
 80023a2:	f002 ff05 	bl	80051b0 <HAL_SPI_Transmit>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20007184 	.word	0x20007184

080023b4 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	460a      	mov	r2, r1
 80023be:	71fb      	strb	r3, [r7, #7]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 80023c4:	2200      	movs	r2, #0
 80023c6:	2140      	movs	r1, #64	; 0x40
 80023c8:	480b      	ldr	r0, [pc, #44]	; (80023f8 <SPIWrite+0x44>)
 80023ca:	f002 f90f 	bl	80045ec <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ffda 	bl	8002390 <SPICmd8bit>
	SPICmd8bit(WrPara);
 80023dc:	79bb      	ldrb	r3, [r7, #6]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ffd6 	bl	8002390 <SPICmd8bit>
	NSS_H();
 80023e4:	2201      	movs	r2, #1
 80023e6:	2140      	movs	r1, #64	; 0x40
 80023e8:	4803      	ldr	r0, [pc, #12]	; (80023f8 <SPIWrite+0x44>)
 80023ea:	f002 f8ff 	bl	80045ec <HAL_GPIO_WritePin>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40020400 	.word	0x40020400

080023fc <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	4613      	mov	r3, r2
 800240a:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d922      	bls.n	8002458 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 8002412:	2200      	movs	r2, #0
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	4812      	ldr	r0, [pc, #72]	; (8002460 <BurstWrite+0x64>)
 8002418:	f002 f8e8 	bl	80045ec <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ffb3 	bl	8002390 <SPICmd8bit>
    for(i=0;i<length;i++)
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	e009      	b.n	8002444 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	4413      	add	r3, r2
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ffa9 	bl	8002390 <SPICmd8bit>
    for(i=0;i<length;i++)
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	3301      	adds	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	79bb      	ldrb	r3, [r7, #6]
 8002448:	429a      	cmp	r2, r3
 800244a:	d3f1      	bcc.n	8002430 <BurstWrite+0x34>
    NSS_H();
 800244c:	2201      	movs	r2, #1
 800244e:	2140      	movs	r1, #64	; 0x40
 8002450:	4803      	ldr	r0, [pc, #12]	; (8002460 <BurstWrite+0x64>)
 8002452:	f002 f8cb 	bl	80045ec <HAL_GPIO_WritePin>
 8002456:	e000      	b.n	800245a <BurstWrite+0x5e>
    return;
 8002458:	bf00      	nop
  }
}
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40020400 	.word	0x40020400

08002464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_MspInit+0x4c>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a0f      	ldr	r2, [pc, #60]	; (80024b0 <HAL_MspInit+0x4c>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <HAL_MspInit+0x4c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_MspInit+0x4c>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_MspInit+0x4c>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_MspInit+0x4c>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	; 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 031c 	add.w	r3, r7, #28
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a4e      	ldr	r2, [pc, #312]	; (800260c <HAL_SPI_MspInit+0x158>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12c      	bne.n	8002530 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	4b4d      	ldr	r3, [pc, #308]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a4c      	ldr	r2, [pc, #304]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 80024e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	4b46      	ldr	r3, [pc, #280]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a45      	ldr	r2, [pc, #276]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b43      	ldr	r3, [pc, #268]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800250e:	23e0      	movs	r3, #224	; 0xe0
 8002510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800251e:	2305      	movs	r3, #5
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 031c 	add.w	r3, r7, #28
 8002526:	4619      	mov	r1, r3
 8002528:	483a      	ldr	r0, [pc, #232]	; (8002614 <HAL_SPI_MspInit+0x160>)
 800252a:	f001 feb5 	bl	8004298 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800252e:	e068      	b.n	8002602 <HAL_SPI_MspInit+0x14e>
  else if(hspi->Instance==SPI3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a38      	ldr	r2, [pc, #224]	; (8002618 <HAL_SPI_MspInit+0x164>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d163      	bne.n	8002602 <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a33      	ldr	r2, [pc, #204]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 8002544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a2c      	ldr	r2, [pc, #176]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a25      	ldr	r2, [pc, #148]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_SPI_MspInit+0x15c>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800258e:	2301      	movs	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002596:	2301      	movs	r3, #1
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259a:	2303      	movs	r3, #3
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800259e:	2307      	movs	r3, #7
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	4619      	mov	r1, r3
 80025a8:	481c      	ldr	r0, [pc, #112]	; (800261c <HAL_SPI_MspInit+0x168>)
 80025aa:	f001 fe75 	bl	8004298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025c0:	2306      	movs	r3, #6
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c4:	f107 031c 	add.w	r3, r7, #28
 80025c8:	4619      	mov	r1, r3
 80025ca:	4815      	ldr	r0, [pc, #84]	; (8002620 <HAL_SPI_MspInit+0x16c>)
 80025cc:	f001 fe64 	bl	8004298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025da:	2301      	movs	r3, #1
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025e2:	2306      	movs	r3, #6
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e6:	f107 031c 	add.w	r3, r7, #28
 80025ea:	4619      	mov	r1, r3
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <HAL_SPI_MspInit+0x16c>)
 80025ee:	f001 fe53 	bl	8004298 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	2033      	movs	r0, #51	; 0x33
 80025f8:	f001 fa0b 	bl	8003a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80025fc:	2033      	movs	r0, #51	; 0x33
 80025fe:	f001 fa24 	bl	8003a4a <HAL_NVIC_EnableIRQ>
}
 8002602:	bf00      	nop
 8002604:	3730      	adds	r7, #48	; 0x30
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40013000 	.word	0x40013000
 8002610:	40023800 	.word	0x40023800
 8002614:	40020000 	.word	0x40020000
 8002618:	40003c00 	.word	0x40003c00
 800261c:	40020400 	.word	0x40020400
 8002620:	40020800 	.word	0x40020800

08002624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2a      	ldr	r2, [pc, #168]	; (80026dc <HAL_TIM_Base_MspInit+0xb8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d116      	bne.n	8002664 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <HAL_TIM_Base_MspInit+0xbc>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <HAL_TIM_Base_MspInit+0xbc>)
 8002640:	f043 0310 	orr.w	r3, r3, #16
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_TIM_Base_MspInit+0xbc>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	2036      	movs	r0, #54	; 0x36
 8002658:	f001 f9db 	bl	8003a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800265c:	2036      	movs	r0, #54	; 0x36
 800265e:	f001 f9f4 	bl	8003a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002662:	e036      	b.n	80026d2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <HAL_TIM_Base_MspInit+0xc0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d116      	bne.n	800269c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_TIM_Base_MspInit+0xbc>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <HAL_TIM_Base_MspInit+0xbc>)
 8002678:	f043 0320 	orr.w	r3, r3, #32
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_TIM_Base_MspInit+0xbc>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	2037      	movs	r0, #55	; 0x37
 8002690:	f001 f9bf 	bl	8003a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002694:	2037      	movs	r0, #55	; 0x37
 8002696:	f001 f9d8 	bl	8003a4a <HAL_NVIC_EnableIRQ>
}
 800269a:	e01a      	b.n	80026d2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <HAL_TIM_Base_MspInit+0xc4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d115      	bne.n	80026d2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <HAL_TIM_Base_MspInit+0xbc>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <HAL_TIM_Base_MspInit+0xbc>)
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_TIM_Base_MspInit+0xbc>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2019      	movs	r0, #25
 80026c8:	f001 f9a3 	bl	8003a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026cc:	2019      	movs	r0, #25
 80026ce:	f001 f9bc 	bl	8003a4a <HAL_NVIC_EnableIRQ>
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40001000 	.word	0x40001000
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40001400 	.word	0x40001400
 80026e8:	40014400 	.word	0x40014400

080026ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b092      	sub	sp, #72	; 0x48
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a87      	ldr	r2, [pc, #540]	; (8002928 <HAL_UART_MspInit+0x23c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	f040 8083 	bne.w	8002816 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002710:	2300      	movs	r3, #0
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
 8002714:	4b85      	ldr	r3, [pc, #532]	; (800292c <HAL_UART_MspInit+0x240>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	4a84      	ldr	r2, [pc, #528]	; (800292c <HAL_UART_MspInit+0x240>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	6413      	str	r3, [r2, #64]	; 0x40
 8002720:	4b82      	ldr	r3, [pc, #520]	; (800292c <HAL_UART_MspInit+0x240>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002730:	4b7e      	ldr	r3, [pc, #504]	; (800292c <HAL_UART_MspInit+0x240>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	4a7d      	ldr	r2, [pc, #500]	; (800292c <HAL_UART_MspInit+0x240>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6313      	str	r3, [r2, #48]	; 0x30
 800273c:	4b7b      	ldr	r3, [pc, #492]	; (800292c <HAL_UART_MspInit+0x240>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
 800274c:	4b77      	ldr	r3, [pc, #476]	; (800292c <HAL_UART_MspInit+0x240>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	4a76      	ldr	r2, [pc, #472]	; (800292c <HAL_UART_MspInit+0x240>)
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	6313      	str	r3, [r2, #48]	; 0x30
 8002758:	4b74      	ldr	r3, [pc, #464]	; (800292c <HAL_UART_MspInit+0x240>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276e:	2301      	movs	r3, #1
 8002770:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002776:	2308      	movs	r3, #8
 8002778:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800277e:	4619      	mov	r1, r3
 8002780:	486b      	ldr	r0, [pc, #428]	; (8002930 <HAL_UART_MspInit+0x244>)
 8002782:	f001 fd89 	bl	8004298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002786:	2304      	movs	r3, #4
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800278e:	2301      	movs	r3, #1
 8002790:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002792:	2303      	movs	r3, #3
 8002794:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002796:	2308      	movs	r3, #8
 8002798:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800279a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800279e:	4619      	mov	r1, r3
 80027a0:	4864      	ldr	r0, [pc, #400]	; (8002934 <HAL_UART_MspInit+0x248>)
 80027a2:	f001 fd79 	bl	8004298 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80027a6:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027a8:	4a64      	ldr	r2, [pc, #400]	; (800293c <HAL_UART_MspInit+0x250>)
 80027aa:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80027ac:	4b62      	ldr	r3, [pc, #392]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027b2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b4:	4b60      	ldr	r3, [pc, #384]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027c0:	4b5d      	ldr	r3, [pc, #372]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027c8:	4b5b      	ldr	r3, [pc, #364]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ce:	4b5a      	ldr	r3, [pc, #360]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027da:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027dc:	4b56      	ldr	r3, [pc, #344]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027e2:	4b55      	ldr	r3, [pc, #340]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80027e8:	4853      	ldr	r0, [pc, #332]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027ea:	f001 f949 	bl	8003a80 <HAL_DMA_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80027f4:	f7ff fce0 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a4f      	ldr	r2, [pc, #316]	; (8002938 <HAL_UART_MspInit+0x24c>)
 80027fc:	635a      	str	r2, [r3, #52]	; 0x34
 80027fe:	4a4e      	ldr	r2, [pc, #312]	; (8002938 <HAL_UART_MspInit+0x24c>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	2035      	movs	r0, #53	; 0x35
 800280a:	f001 f902 	bl	8003a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800280e:	2035      	movs	r0, #53	; 0x35
 8002810:	f001 f91b 	bl	8003a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002814:	e18e      	b.n	8002b34 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a49      	ldr	r2, [pc, #292]	; (8002940 <HAL_UART_MspInit+0x254>)
 800281c:	4293      	cmp	r3, r2
 800281e:	f040 8099 	bne.w	8002954 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_UART_MspInit+0x240>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a40      	ldr	r2, [pc, #256]	; (800292c <HAL_UART_MspInit+0x240>)
 800282c:	f043 0310 	orr.w	r3, r3, #16
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b3e      	ldr	r3, [pc, #248]	; (800292c <HAL_UART_MspInit+0x240>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	4b3a      	ldr	r3, [pc, #232]	; (800292c <HAL_UART_MspInit+0x240>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a39      	ldr	r2, [pc, #228]	; (800292c <HAL_UART_MspInit+0x240>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b37      	ldr	r3, [pc, #220]	; (800292c <HAL_UART_MspInit+0x240>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <HAL_UART_MspInit+0x240>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a32      	ldr	r2, [pc, #200]	; (800292c <HAL_UART_MspInit+0x240>)
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b30      	ldr	r3, [pc, #192]	; (800292c <HAL_UART_MspInit+0x240>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800287a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002888:	2307      	movs	r3, #7
 800288a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002890:	4619      	mov	r1, r3
 8002892:	482c      	ldr	r0, [pc, #176]	; (8002944 <HAL_UART_MspInit+0x258>)
 8002894:	f001 fd00 	bl	8004298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028a8:	2307      	movs	r3, #7
 80028aa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028b0:	4619      	mov	r1, r3
 80028b2:	4825      	ldr	r0, [pc, #148]	; (8002948 <HAL_UART_MspInit+0x25c>)
 80028b4:	f001 fcf0 	bl	8004298 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80028b8:	4b24      	ldr	r3, [pc, #144]	; (800294c <HAL_UART_MspInit+0x260>)
 80028ba:	4a25      	ldr	r2, [pc, #148]	; (8002950 <HAL_UART_MspInit+0x264>)
 80028bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80028be:	4b23      	ldr	r3, [pc, #140]	; (800294c <HAL_UART_MspInit+0x260>)
 80028c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <HAL_UART_MspInit+0x260>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028cc:	4b1f      	ldr	r3, [pc, #124]	; (800294c <HAL_UART_MspInit+0x260>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028d2:	4b1e      	ldr	r3, [pc, #120]	; (800294c <HAL_UART_MspInit+0x260>)
 80028d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_UART_MspInit+0x260>)
 80028dc:	2200      	movs	r2, #0
 80028de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <HAL_UART_MspInit+0x260>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_UART_MspInit+0x260>)
 80028e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <HAL_UART_MspInit+0x260>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_UART_MspInit+0x260>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028fa:	4814      	ldr	r0, [pc, #80]	; (800294c <HAL_UART_MspInit+0x260>)
 80028fc:	f001 f8c0 	bl	8003a80 <HAL_DMA_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8002906:	f7ff fc57 	bl	80021b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0f      	ldr	r2, [pc, #60]	; (800294c <HAL_UART_MspInit+0x260>)
 800290e:	635a      	str	r2, [r3, #52]	; 0x34
 8002910:	4a0e      	ldr	r2, [pc, #56]	; (800294c <HAL_UART_MspInit+0x260>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	2025      	movs	r0, #37	; 0x25
 800291c:	f001 f879 	bl	8003a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002920:	2025      	movs	r0, #37	; 0x25
 8002922:	f001 f892 	bl	8003a4a <HAL_NVIC_EnableIRQ>
}
 8002926:	e105      	b.n	8002b34 <HAL_UART_MspInit+0x448>
 8002928:	40005000 	.word	0x40005000
 800292c:	40023800 	.word	0x40023800
 8002930:	40020800 	.word	0x40020800
 8002934:	40020c00 	.word	0x40020c00
 8002938:	20007228 	.word	0x20007228
 800293c:	40026010 	.word	0x40026010
 8002940:	40011000 	.word	0x40011000
 8002944:	40020000 	.word	0x40020000
 8002948:	40020400 	.word	0x40020400
 800294c:	20000c68 	.word	0x20000c68
 8002950:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a78      	ldr	r2, [pc, #480]	; (8002b3c <HAL_UART_MspInit+0x450>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d162      	bne.n	8002a24 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	4b77      	ldr	r3, [pc, #476]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a76      	ldr	r2, [pc, #472]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b74      	ldr	r3, [pc, #464]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a6f      	ldr	r2, [pc, #444]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b6d      	ldr	r3, [pc, #436]	; (8002b40 <HAL_UART_MspInit+0x454>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002996:	230c      	movs	r3, #12
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029a6:	2307      	movs	r3, #7
 80029a8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029ae:	4619      	mov	r1, r3
 80029b0:	4864      	ldr	r0, [pc, #400]	; (8002b44 <HAL_UART_MspInit+0x458>)
 80029b2:	f001 fc71 	bl	8004298 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80029b6:	4b64      	ldr	r3, [pc, #400]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 80029b8:	4a64      	ldr	r2, [pc, #400]	; (8002b4c <HAL_UART_MspInit+0x460>)
 80029ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80029bc:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 80029be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029c2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029c4:	4b60      	ldr	r3, [pc, #384]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 80029c6:	2240      	movs	r2, #64	; 0x40
 80029c8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ca:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029d0:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 80029d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029d8:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029de:	4b5a      	ldr	r3, [pc, #360]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80029e4:	4b58      	ldr	r3, [pc, #352]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029ea:	4b57      	ldr	r3, [pc, #348]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029f0:	4b55      	ldr	r3, [pc, #340]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80029f6:	4854      	ldr	r0, [pc, #336]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 80029f8:	f001 f842 	bl	8003a80 <HAL_DMA_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8002a02:	f7ff fbd9 	bl	80021b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4f      	ldr	r2, [pc, #316]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a0c:	4a4e      	ldr	r2, [pc, #312]	; (8002b48 <HAL_UART_MspInit+0x45c>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	2026      	movs	r0, #38	; 0x26
 8002a18:	f000 fffb 	bl	8003a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a1c:	2026      	movs	r0, #38	; 0x26
 8002a1e:	f001 f814 	bl	8003a4a <HAL_NVIC_EnableIRQ>
}
 8002a22:	e087      	b.n	8002b34 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a49      	ldr	r2, [pc, #292]	; (8002b50 <HAL_UART_MspInit+0x464>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	f040 8082 	bne.w	8002b34 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	4a41      	ldr	r2, [pc, #260]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a40:	4b3f      	ldr	r3, [pc, #252]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	4a3a      	ldr	r2, [pc, #232]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5c:	4b38      	ldr	r3, [pc, #224]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	4a33      	ldr	r2, [pc, #204]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002a72:	f043 0302 	orr.w	r3, r3, #2
 8002a76:	6313      	str	r3, [r2, #48]	; 0x30
 8002a78:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <HAL_UART_MspInit+0x454>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a84:	2320      	movs	r3, #32
 8002a86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a94:	2307      	movs	r3, #7
 8002a96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	482d      	ldr	r0, [pc, #180]	; (8002b54 <HAL_UART_MspInit+0x468>)
 8002aa0:	f001 fbfa 	bl	8004298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4825      	ldr	r0, [pc, #148]	; (8002b58 <HAL_UART_MspInit+0x46c>)
 8002ac2:	f001 fbe9 	bl	8004298 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002ac6:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002ac8:	4a25      	ldr	r2, [pc, #148]	; (8002b60 <HAL_UART_MspInit+0x474>)
 8002aca:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002acc:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ad2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ae6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002afa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b08:	4814      	ldr	r0, [pc, #80]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002b0a:	f000 ffb9 	bl	8003a80 <HAL_DMA_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8002b14:	f7ff fb50 	bl	80021b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002b1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b1e:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <HAL_UART_MspInit+0x470>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	2027      	movs	r0, #39	; 0x27
 8002b2a:	f000 ff72 	bl	8003a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b2e:	2027      	movs	r0, #39	; 0x27
 8002b30:	f000 ff8b 	bl	8003a4a <HAL_NVIC_EnableIRQ>
}
 8002b34:	bf00      	nop
 8002b36:	3748      	adds	r7, #72	; 0x48
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40004400 	.word	0x40004400
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	20000cc8 	.word	0x20000cc8
 8002b4c:	400260a0 	.word	0x400260a0
 8002b50:	40004800 	.word	0x40004800
 8002b54:	40020800 	.word	0x40020800
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	20000580 	.word	0x20000580
 8002b60:	40026028 	.word	0x40026028

08002b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b76:	e7fe      	b.n	8002b76 <HardFault_Handler+0x4>

08002b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b7c:	e7fe      	b.n	8002b7c <MemManage_Handler+0x4>

08002b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b82:	e7fe      	b.n	8002b82 <BusFault_Handler+0x4>

08002b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b88:	e7fe      	b.n	8002b88 <UsageFault_Handler+0x4>

08002b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb8:	f000 fe0e 	bl	80037d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <DMA1_Stream0_IRQHandler+0x10>)
 8002bc6:	f001 f8f3 	bl	8003db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20007228 	.word	0x20007228

08002bd4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <DMA1_Stream1_IRQHandler+0x10>)
 8002bda:	f001 f8e9 	bl	8003db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000580 	.word	0x20000580

08002be8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <DMA1_Stream6_IRQHandler+0x10>)
 8002bee:	f001 f8df 	bl	8003db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000cc8 	.word	0x20000cc8

08002bfc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c02:	f002 ffef 	bl	8005be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000858 	.word	0x20000858

08002c10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <USART1_IRQHandler+0x10>)
 8002c16:	f003 fb95 	bl	8006344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000d2c 	.word	0x20000d2c

08002c24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <USART2_IRQHandler+0x10>)
 8002c2a:	f003 fb8b 	bl	8006344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200071e8 	.word	0x200071e8

08002c38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <USART3_IRQHandler+0x10>)
 8002c3e:	f003 fb81 	bl	8006344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200005e8 	.word	0x200005e8

08002c4c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <SPI3_IRQHandler+0x10>)
 8002c52:	f002 fd83 	bl	800575c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000bc4 	.word	0x20000bc4

08002c60 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <UART5_IRQHandler+0x10>)
 8002c66:	f003 fb6d 	bl	8006344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000c24 	.word	0x20000c24

08002c74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <TIM6_DAC_IRQHandler+0x10>)
 8002c7a:	f002 ffb3 	bl	8005be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20007010 	.word	0x20007010

08002c88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <TIM7_IRQHandler+0x10>)
 8002c8e:	f002 ffa9 	bl	8005be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200074cc 	.word	0x200074cc

08002c9c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <DMA2_Stream2_IRQHandler+0x10>)
 8002ca2:	f001 f885 	bl	8003db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000c68 	.word	0x20000c68

08002cb0 <_sbrk>:
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <_sbrk+0x50>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <_sbrk+0x16>
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <_sbrk+0x50>)
 8002cc2:	4a10      	ldr	r2, [pc, #64]	; (8002d04 <_sbrk+0x54>)
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <_sbrk+0x50>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <_sbrk+0x50>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	466a      	mov	r2, sp
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d907      	bls.n	8002cea <_sbrk+0x3a>
 8002cda:	f006 fbd3 	bl	8009484 <__errno>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	230c      	movs	r3, #12
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ce8:	e006      	b.n	8002cf8 <_sbrk+0x48>
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <_sbrk+0x50>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <_sbrk+0x50>)
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000514 	.word	0x20000514
 8002d04:	20007990 	.word	0x20007990

08002d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d0c:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <SystemInit+0x28>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	4a07      	ldr	r2, [pc, #28]	; (8002d30 <SystemInit+0x28>)
 8002d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <SystemInit+0x28>)
 8002d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d22:	609a      	str	r2, [r3, #8]
#endif
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002d3c:	f000 fd60 	bl	8003800 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <SPI_Timer_On+0x20>)
 8002d44:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002d46:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <SPI_Timer_On+0x24>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6013      	str	r3, [r2, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20007514 	.word	0x20007514
 8002d58:	20007518 	.word	0x20007518

08002d5c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002d60:	f000 fd4e 	bl	8003800 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <SPI_Timer_Status+0x24>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1ad2      	subs	r2, r2, r3
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <SPI_Timer_Status+0x28>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	bf34      	ite	cc
 8002d74:	2301      	movcc	r3, #1
 8002d76:	2300      	movcs	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20007514 	.word	0x20007514
 8002d84:	20007518 	.word	0x20007518

08002d88 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;

    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 8002d92:	f107 020f 	add.w	r2, r7, #15
 8002d96:	1df9      	adds	r1, r7, #7
 8002d98:	2332      	movs	r3, #50	; 0x32
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4804      	ldr	r0, [pc, #16]	; (8002db0 <xchg_spi+0x28>)
 8002da0:	f002 fb3a 	bl	8005418 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000bc4 	.word	0x20000bc4

08002db4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	e00a      	b.n	8002dda <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	18d4      	adds	r4, r2, r3
 8002dca:	20ff      	movs	r0, #255	; 0xff
 8002dcc:	f7ff ffdc 	bl	8002d88 <xchg_spi>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d3f0      	bcc.n	8002dc4 <rcvr_spi_multi+0x10>
	}
}
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd90      	pop	{r4, r7, pc}

08002dea <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e009      	b.n	8002e0e <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ffc0 	bl	8002d88 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d3f1      	bcc.n	8002dfa <xmit_spi_multi+0x10>
	}
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002e26:	f000 fceb 	bl	8003800 <HAL_GetTick>
 8002e2a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002e30:	20ff      	movs	r0, #255	; 0xff
 8002e32:	f7ff ffa9 	bl	8002d88 <xchg_spi>
 8002e36:	4603      	mov	r3, r0
 8002e38:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2bff      	cmp	r3, #255	; 0xff
 8002e3e:	d007      	beq.n	8002e50 <wait_ready+0x32>
 8002e40:	f000 fcde 	bl	8003800 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d8ef      	bhi.n	8002e30 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2bff      	cmp	r3, #255	; 0xff
 8002e54:	bf0c      	ite	eq
 8002e56:	2301      	moveq	r3, #1
 8002e58:	2300      	movne	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e6e:	4804      	ldr	r0, [pc, #16]	; (8002e80 <despiselect+0x1c>)
 8002e70:	f001 fbbc 	bl	80045ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002e74:	20ff      	movs	r0, #255	; 0xff
 8002e76:	f7ff ff87 	bl	8002d88 <xchg_spi>

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40020000 	.word	0x40020000

08002e84 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e8e:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <spiselect+0x34>)
 8002e90:	f001 fbac 	bl	80045ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002e94:	20ff      	movs	r0, #255	; 0xff
 8002e96:	f7ff ff77 	bl	8002d88 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002e9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e9e:	f7ff ffbe 	bl	8002e1e <wait_ready>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <spiselect+0x28>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e002      	b.n	8002eb2 <spiselect+0x2e>

	despiselect();
 8002eac:	f7ff ffda 	bl	8002e64 <despiselect>
	return 0;	/* Timeout */
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40020000 	.word	0x40020000

08002ebc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002ec6:	20c8      	movs	r0, #200	; 0xc8
 8002ec8:	f7ff ff34 	bl	8002d34 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002ecc:	20ff      	movs	r0, #255	; 0xff
 8002ece:	f7ff ff5b 	bl	8002d88 <xchg_spi>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2bff      	cmp	r3, #255	; 0xff
 8002eda:	d104      	bne.n	8002ee6 <rcvr_datablock+0x2a>
 8002edc:	f7ff ff3e 	bl	8002d5c <SPI_Timer_Status>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f2      	bne.n	8002ecc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	2bfe      	cmp	r3, #254	; 0xfe
 8002eea:	d001      	beq.n	8002ef0 <rcvr_datablock+0x34>
 8002eec:	2300      	movs	r3, #0
 8002eee:	e00a      	b.n	8002f06 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002ef0:	6839      	ldr	r1, [r7, #0]
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ff5e 	bl	8002db4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002ef8:	20ff      	movs	r0, #255	; 0xff
 8002efa:	f7ff ff45 	bl	8002d88 <xchg_spi>
 8002efe:	20ff      	movs	r0, #255	; 0xff
 8002f00:	f7ff ff42 	bl	8002d88 <xchg_spi>

	return 1;						/* Function succeeded */
 8002f04:	2301      	movs	r3, #1
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	460b      	mov	r3, r1
 8002f18:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002f1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f1e:	f7ff ff7e 	bl	8002e1e <wait_ready>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <xmit_datablock+0x1e>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e01e      	b.n	8002f6a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff2a 	bl	8002d88 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	2bfd      	cmp	r3, #253	; 0xfd
 8002f38:	d016      	beq.n	8002f68 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ff53 	bl	8002dea <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002f44:	20ff      	movs	r0, #255	; 0xff
 8002f46:	f7ff ff1f 	bl	8002d88 <xchg_spi>
 8002f4a:	20ff      	movs	r0, #255	; 0xff
 8002f4c:	f7ff ff1c 	bl	8002d88 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002f50:	20ff      	movs	r0, #255	; 0xff
 8002f52:	f7ff ff19 	bl	8002d88 <xchg_spi>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	d001      	beq.n	8002f68 <xmit_datablock+0x5a>
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <xmit_datablock+0x5c>
	}
	return 1;
 8002f68:	2301      	movs	r3, #1
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	6039      	str	r1, [r7, #0]
 8002f7c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	da0e      	bge.n	8002fa4 <send_cmd+0x32>
		cmd &= 0x7F;
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f8c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002f8e:	2100      	movs	r1, #0
 8002f90:	2037      	movs	r0, #55	; 0x37
 8002f92:	f7ff ffee 	bl	8002f72 <send_cmd>
 8002f96:	4603      	mov	r3, r0
 8002f98:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002f9a:	7bbb      	ldrb	r3, [r7, #14]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d901      	bls.n	8002fa4 <send_cmd+0x32>
 8002fa0:	7bbb      	ldrb	r3, [r7, #14]
 8002fa2:	e051      	b.n	8003048 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d008      	beq.n	8002fbc <send_cmd+0x4a>
		despiselect();
 8002faa:	f7ff ff5b 	bl	8002e64 <despiselect>
		if (!spiselect()) return 0xFF;
 8002fae:	f7ff ff69 	bl	8002e84 <spiselect>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <send_cmd+0x4a>
 8002fb8:	23ff      	movs	r3, #255	; 0xff
 8002fba:	e045      	b.n	8003048 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fedf 	bl	8002d88 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	0e1b      	lsrs	r3, r3, #24
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fed9 	bl	8002d88 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fed3 	bl	8002d88 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fecd 	bl	8002d88 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fec8 	bl	8002d88 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <send_cmd+0x94>
 8003002:	2395      	movs	r3, #149	; 0x95
 8003004:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	2b08      	cmp	r3, #8
 800300a:	d101      	bne.n	8003010 <send_cmd+0x9e>
 800300c:	2387      	movs	r3, #135	; 0x87
 800300e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff feb8 	bl	8002d88 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2b0c      	cmp	r3, #12
 800301c:	d102      	bne.n	8003024 <send_cmd+0xb2>
 800301e:	20ff      	movs	r0, #255	; 0xff
 8003020:	f7ff feb2 	bl	8002d88 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003024:	230a      	movs	r3, #10
 8003026:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003028:	20ff      	movs	r0, #255	; 0xff
 800302a:	f7ff fead 	bl	8002d88 <xchg_spi>
 800302e:	4603      	mov	r3, r0
 8003030:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003036:	2b00      	cmp	r3, #0
 8003038:	da05      	bge.n	8003046 <send_cmd+0xd4>
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	3b01      	subs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003046:	7bbb      	ldrb	r3, [r7, #14]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <USER_SPI_initialize+0x14>
 8003060:	2301      	movs	r3, #1
 8003062:	e0cb      	b.n	80031fc <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003064:	4b67      	ldr	r3, [pc, #412]	; (8003204 <USER_SPI_initialize+0x1b4>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <USER_SPI_initialize+0x2a>
 8003072:	4b64      	ldr	r3, [pc, #400]	; (8003204 <USER_SPI_initialize+0x1b4>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	e0c0      	b.n	80031fc <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 800307a:	4b63      	ldr	r3, [pc, #396]	; (8003208 <USER_SPI_initialize+0x1b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003082:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003084:	230a      	movs	r3, #10
 8003086:	73fb      	strb	r3, [r7, #15]
 8003088:	e005      	b.n	8003096 <USER_SPI_initialize+0x46>
 800308a:	20ff      	movs	r0, #255	; 0xff
 800308c:	f7ff fe7c 	bl	8002d88 <xchg_spi>
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	3b01      	subs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f6      	bne.n	800308a <USER_SPI_initialize+0x3a>

	ty = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80030a0:	2100      	movs	r1, #0
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7ff ff65 	bl	8002f72 <send_cmd>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	f040 808b 	bne.w	80031c6 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80030b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030b4:	f7ff fe3e 	bl	8002d34 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80030b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80030bc:	2008      	movs	r0, #8
 80030be:	f7ff ff58 	bl	8002f72 <send_cmd>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d151      	bne.n	800316c <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e00d      	b.n	80030ea <USER_SPI_initialize+0x9a>
 80030ce:	7bfc      	ldrb	r4, [r7, #15]
 80030d0:	20ff      	movs	r0, #255	; 0xff
 80030d2:	f7ff fe59 	bl	8002d88 <xchg_spi>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	f107 0310 	add.w	r3, r7, #16
 80030de:	4423      	add	r3, r4
 80030e0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	3301      	adds	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d9ee      	bls.n	80030ce <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80030f0:	7abb      	ldrb	r3, [r7, #10]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d167      	bne.n	80031c6 <USER_SPI_initialize+0x176>
 80030f6:	7afb      	ldrb	r3, [r7, #11]
 80030f8:	2baa      	cmp	r3, #170	; 0xaa
 80030fa:	d164      	bne.n	80031c6 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80030fc:	bf00      	nop
 80030fe:	f7ff fe2d 	bl	8002d5c <SPI_Timer_Status>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <USER_SPI_initialize+0xc8>
 8003108:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800310c:	20a9      	movs	r0, #169	; 0xa9
 800310e:	f7ff ff30 	bl	8002f72 <send_cmd>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f2      	bne.n	80030fe <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003118:	f7ff fe20 	bl	8002d5c <SPI_Timer_Status>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d051      	beq.n	80031c6 <USER_SPI_initialize+0x176>
 8003122:	2100      	movs	r1, #0
 8003124:	203a      	movs	r0, #58	; 0x3a
 8003126:	f7ff ff24 	bl	8002f72 <send_cmd>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d14a      	bne.n	80031c6 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	e00d      	b.n	8003152 <USER_SPI_initialize+0x102>
 8003136:	7bfc      	ldrb	r4, [r7, #15]
 8003138:	20ff      	movs	r0, #255	; 0xff
 800313a:	f7ff fe25 	bl	8002d88 <xchg_spi>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	f107 0310 	add.w	r3, r7, #16
 8003146:	4423      	add	r3, r4
 8003148:	f803 2c08 	strb.w	r2, [r3, #-8]
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	3301      	adds	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b03      	cmp	r3, #3
 8003156:	d9ee      	bls.n	8003136 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003158:	7a3b      	ldrb	r3, [r7, #8]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <USER_SPI_initialize+0x116>
 8003162:	230c      	movs	r3, #12
 8003164:	e000      	b.n	8003168 <USER_SPI_initialize+0x118>
 8003166:	2304      	movs	r3, #4
 8003168:	737b      	strb	r3, [r7, #13]
 800316a:	e02c      	b.n	80031c6 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800316c:	2100      	movs	r1, #0
 800316e:	20a9      	movs	r0, #169	; 0xa9
 8003170:	f7ff feff 	bl	8002f72 <send_cmd>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d804      	bhi.n	8003184 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800317a:	2302      	movs	r3, #2
 800317c:	737b      	strb	r3, [r7, #13]
 800317e:	23a9      	movs	r3, #169	; 0xa9
 8003180:	73bb      	strb	r3, [r7, #14]
 8003182:	e003      	b.n	800318c <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003184:	2301      	movs	r3, #1
 8003186:	737b      	strb	r3, [r7, #13]
 8003188:	2301      	movs	r3, #1
 800318a:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800318c:	bf00      	nop
 800318e:	f7ff fde5 	bl	8002d5c <SPI_Timer_Status>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <USER_SPI_initialize+0x158>
 8003198:	7bbb      	ldrb	r3, [r7, #14]
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fee8 	bl	8002f72 <send_cmd>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f2      	bne.n	800318e <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80031a8:	f7ff fdd8 	bl	8002d5c <SPI_Timer_Status>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <USER_SPI_initialize+0x172>
 80031b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031b6:	2010      	movs	r0, #16
 80031b8:	f7ff fedb 	bl	8002f72 <send_cmd>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <USER_SPI_initialize+0x176>
				ty = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 80031c6:	4a11      	ldr	r2, [pc, #68]	; (800320c <USER_SPI_initialize+0x1bc>)
 80031c8:	7b7b      	ldrb	r3, [r7, #13]
 80031ca:	7013      	strb	r3, [r2, #0]
	despiselect();
 80031cc:	f7ff fe4a 	bl	8002e64 <despiselect>

	if (ty) {			/* OK */
 80031d0:	7b7b      	ldrb	r3, [r7, #13]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00c      	beq.n	80031f0 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <USER_SPI_initialize+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2210      	movs	r2, #16
 80031dc:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <USER_SPI_initialize+0x1b4>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <USER_SPI_initialize+0x1b4>)
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e002      	b.n	80031f6 <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <USER_SPI_initialize+0x1b4>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80031f6:	4b03      	ldr	r3, [pc, #12]	; (8003204 <USER_SPI_initialize+0x1b4>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b2db      	uxtb	r3, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bd90      	pop	{r4, r7, pc}
 8003204:	2000040c 	.word	0x2000040c
 8003208:	20000bc4 	.word	0x20000bc4
 800320c:	20000518 	.word	0x20000518

08003210 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <USER_SPI_status+0x14>
 8003220:	2301      	movs	r3, #1
 8003222:	e002      	b.n	800322a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <USER_SPI_status+0x28>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	b2db      	uxtb	r3, r3
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	2000040c 	.word	0x2000040c

0800323c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d102      	bne.n	8003258 <USER_SPI_read+0x1c>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <USER_SPI_read+0x20>
 8003258:	2304      	movs	r3, #4
 800325a:	e04d      	b.n	80032f8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800325c:	4b28      	ldr	r3, [pc, #160]	; (8003300 <USER_SPI_read+0xc4>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <USER_SPI_read+0x32>
 800326a:	2303      	movs	r3, #3
 800326c:	e044      	b.n	80032f8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800326e:	4b25      	ldr	r3, [pc, #148]	; (8003304 <USER_SPI_read+0xc8>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <USER_SPI_read+0x44>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	025b      	lsls	r3, r3, #9
 800327e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d111      	bne.n	80032aa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	2011      	movs	r0, #17
 800328a:	f7ff fe72 	bl	8002f72 <send_cmd>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d129      	bne.n	80032e8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003298:	68b8      	ldr	r0, [r7, #8]
 800329a:	f7ff fe0f 	bl	8002ebc <rcvr_datablock>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d021      	beq.n	80032e8 <USER_SPI_read+0xac>
			count = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	e01e      	b.n	80032e8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	2012      	movs	r0, #18
 80032ae:	f7ff fe60 	bl	8002f72 <send_cmd>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d117      	bne.n	80032e8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80032b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032bc:	68b8      	ldr	r0, [r7, #8]
 80032be:	f7ff fdfd 	bl	8002ebc <rcvr_datablock>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <USER_SPI_read+0xa2>
				buff += 512;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80032ce:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ed      	bne.n	80032b8 <USER_SPI_read+0x7c>
 80032dc:	e000      	b.n	80032e0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80032de:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80032e0:	2100      	movs	r1, #0
 80032e2:	200c      	movs	r0, #12
 80032e4:	f7ff fe45 	bl	8002f72 <send_cmd>
		}
	}
	despiselect();
 80032e8:	f7ff fdbc 	bl	8002e64 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	2000040c 	.word	0x2000040c
 8003304:	20000518 	.word	0x20000518

08003308 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <USER_SPI_write+0x1c>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <USER_SPI_write+0x20>
 8003324:	2304      	movs	r3, #4
 8003326:	e063      	b.n	80033f0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003328:	4b33      	ldr	r3, [pc, #204]	; (80033f8 <USER_SPI_write+0xf0>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <USER_SPI_write+0x32>
 8003336:	2303      	movs	r3, #3
 8003338:	e05a      	b.n	80033f0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800333a:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <USER_SPI_write+0xf0>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <USER_SPI_write+0x44>
 8003348:	2302      	movs	r3, #2
 800334a:	e051      	b.n	80033f0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <USER_SPI_write+0xf4>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d102      	bne.n	800335e <USER_SPI_write+0x56>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	025b      	lsls	r3, r3, #9
 800335c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d110      	bne.n	8003386 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	2018      	movs	r0, #24
 8003368:	f7ff fe03 	bl	8002f72 <send_cmd>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d136      	bne.n	80033e0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003372:	21fe      	movs	r1, #254	; 0xfe
 8003374:	68b8      	ldr	r0, [r7, #8]
 8003376:	f7ff fdca 	bl	8002f0e <xmit_datablock>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d02f      	beq.n	80033e0 <USER_SPI_write+0xd8>
			count = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	e02c      	b.n	80033e0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <USER_SPI_write+0xf4>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	f003 0306 	and.w	r3, r3, #6
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <USER_SPI_write+0x92>
 8003392:	6839      	ldr	r1, [r7, #0]
 8003394:	2097      	movs	r0, #151	; 0x97
 8003396:	f7ff fdec 	bl	8002f72 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	2019      	movs	r0, #25
 800339e:	f7ff fde8 	bl	8002f72 <send_cmd>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d11b      	bne.n	80033e0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80033a8:	21fc      	movs	r1, #252	; 0xfc
 80033aa:	68b8      	ldr	r0, [r7, #8]
 80033ac:	f7ff fdaf 	bl	8002f0e <xmit_datablock>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <USER_SPI_write+0xc4>
				buff += 512;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80033bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ee      	bne.n	80033a8 <USER_SPI_write+0xa0>
 80033ca:	e000      	b.n	80033ce <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80033cc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80033ce:	21fd      	movs	r1, #253	; 0xfd
 80033d0:	2000      	movs	r0, #0
 80033d2:	f7ff fd9c 	bl	8002f0e <xmit_datablock>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <USER_SPI_write+0xd8>
 80033dc:	2301      	movs	r3, #1
 80033de:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80033e0:	f7ff fd40 	bl	8002e64 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	2000040c 	.word	0x2000040c
 80033fc:	20000518 	.word	0x20000518

08003400 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	; 0x30
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	603a      	str	r2, [r7, #0]
 800340a:	71fb      	strb	r3, [r7, #7]
 800340c:	460b      	mov	r3, r1
 800340e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <USER_SPI_ioctl+0x1a>
 8003416:	2304      	movs	r3, #4
 8003418:	e15a      	b.n	80036d0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800341a:	4baf      	ldr	r3, [pc, #700]	; (80036d8 <USER_SPI_ioctl+0x2d8>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <USER_SPI_ioctl+0x2c>
 8003428:	2303      	movs	r3, #3
 800342a:	e151      	b.n	80036d0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003432:	79bb      	ldrb	r3, [r7, #6]
 8003434:	2b04      	cmp	r3, #4
 8003436:	f200 8136 	bhi.w	80036a6 <USER_SPI_ioctl+0x2a6>
 800343a:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <USER_SPI_ioctl+0x40>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003455 	.word	0x08003455
 8003444:	08003469 	.word	0x08003469
 8003448:	080036a7 	.word	0x080036a7
 800344c:	08003515 	.word	0x08003515
 8003450:	0800360b 	.word	0x0800360b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003454:	f7ff fd16 	bl	8002e84 <spiselect>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 8127 	beq.w	80036ae <USER_SPI_ioctl+0x2ae>
 8003460:	2300      	movs	r3, #0
 8003462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003466:	e122      	b.n	80036ae <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003468:	2100      	movs	r1, #0
 800346a:	2009      	movs	r0, #9
 800346c:	f7ff fd81 	bl	8002f72 <send_cmd>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 811d 	bne.w	80036b2 <USER_SPI_ioctl+0x2b2>
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	2110      	movs	r1, #16
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fd1c 	bl	8002ebc <rcvr_datablock>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8113 	beq.w	80036b2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800348c:	7b3b      	ldrb	r3, [r7, #12]
 800348e:	099b      	lsrs	r3, r3, #6
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d111      	bne.n	80034ba <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003496:	7d7b      	ldrb	r3, [r7, #21]
 8003498:	461a      	mov	r2, r3
 800349a:	7d3b      	ldrb	r3, [r7, #20]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	4413      	add	r3, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80034aa:	4413      	add	r3, r2
 80034ac:	3301      	adds	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	029a      	lsls	r2, r3, #10
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e028      	b.n	800350c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80034ba:	7c7b      	ldrb	r3, [r7, #17]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	7dbb      	ldrb	r3, [r7, #22]
 80034c4:	09db      	lsrs	r3, r3, #7
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	7d7b      	ldrb	r3, [r7, #21]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f003 0306 	and.w	r3, r3, #6
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4413      	add	r3, r2
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3302      	adds	r3, #2
 80034de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80034e2:	7d3b      	ldrb	r3, [r7, #20]
 80034e4:	099b      	lsrs	r3, r3, #6
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	441a      	add	r2, r3
 80034f0:	7cbb      	ldrb	r3, [r7, #18]
 80034f2:	029b      	lsls	r3, r3, #10
 80034f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034f8:	4413      	add	r3, r2
 80034fa:	3301      	adds	r3, #1
 80034fc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80034fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003502:	3b09      	subs	r3, #9
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	409a      	lsls	r2, r3
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003512:	e0ce      	b.n	80036b2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003514:	4b71      	ldr	r3, [pc, #452]	; (80036dc <USER_SPI_ioctl+0x2dc>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d031      	beq.n	8003584 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003520:	2100      	movs	r1, #0
 8003522:	208d      	movs	r0, #141	; 0x8d
 8003524:	f7ff fd25 	bl	8002f72 <send_cmd>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 80c3 	bne.w	80036b6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003530:	20ff      	movs	r0, #255	; 0xff
 8003532:	f7ff fc29 	bl	8002d88 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	2110      	movs	r1, #16
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fcbd 	bl	8002ebc <rcvr_datablock>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80b6 	beq.w	80036b6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800354a:	2330      	movs	r3, #48	; 0x30
 800354c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003550:	e007      	b.n	8003562 <USER_SPI_ioctl+0x162>
 8003552:	20ff      	movs	r0, #255	; 0xff
 8003554:	f7ff fc18 	bl	8002d88 <xchg_spi>
 8003558:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800355c:	3b01      	subs	r3, #1
 800355e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003562:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f3      	bne.n	8003552 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800356a:	7dbb      	ldrb	r3, [r7, #22]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	2310      	movs	r3, #16
 8003574:	fa03 f202 	lsl.w	r2, r3, r2
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003582:	e098      	b.n	80036b6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003584:	2100      	movs	r1, #0
 8003586:	2009      	movs	r0, #9
 8003588:	f7ff fcf3 	bl	8002f72 <send_cmd>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	f040 8091 	bne.w	80036b6 <USER_SPI_ioctl+0x2b6>
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	2110      	movs	r1, #16
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fc8e 	bl	8002ebc <rcvr_datablock>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8087 	beq.w	80036b6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80035a8:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <USER_SPI_ioctl+0x2dc>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d012      	beq.n	80035da <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80035b4:	7dbb      	ldrb	r3, [r7, #22]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80035bc:	7dfa      	ldrb	r2, [r7, #23]
 80035be:	09d2      	lsrs	r2, r2, #7
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	4413      	add	r3, r2
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	7e7b      	ldrb	r3, [r7, #25]
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e013      	b.n	8003602 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80035da:	7dbb      	ldrb	r3, [r7, #22]
 80035dc:	109b      	asrs	r3, r3, #2
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	3301      	adds	r3, #1
 80035e6:	7dfa      	ldrb	r2, [r7, #23]
 80035e8:	00d2      	lsls	r2, r2, #3
 80035ea:	f002 0218 	and.w	r2, r2, #24
 80035ee:	7df9      	ldrb	r1, [r7, #23]
 80035f0:	0949      	lsrs	r1, r1, #5
 80035f2:	b2c9      	uxtb	r1, r1
 80035f4:	440a      	add	r2, r1
 80035f6:	3201      	adds	r2, #1
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003608:	e055      	b.n	80036b6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800360a:	4b34      	ldr	r3, [pc, #208]	; (80036dc <USER_SPI_ioctl+0x2dc>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	f003 0306 	and.w	r3, r3, #6
 8003612:	2b00      	cmp	r3, #0
 8003614:	d051      	beq.n	80036ba <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003616:	f107 020c 	add.w	r2, r7, #12
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	210b      	movs	r1, #11
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff feee 	bl	8003400 <USER_SPI_ioctl>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d149      	bne.n	80036be <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800362a:	7b3b      	ldrb	r3, [r7, #12]
 800362c:	099b      	lsrs	r3, r3, #6
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <USER_SPI_ioctl+0x23e>
 8003634:	7dbb      	ldrb	r3, [r7, #22]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d041      	beq.n	80036c2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800364e:	4b23      	ldr	r3, [pc, #140]	; (80036dc <USER_SPI_ioctl+0x2dc>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	025b      	lsls	r3, r3, #9
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	025b      	lsls	r3, r3, #9
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003668:	2020      	movs	r0, #32
 800366a:	f7ff fc82 	bl	8002f72 <send_cmd>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d128      	bne.n	80036c6 <USER_SPI_ioctl+0x2c6>
 8003674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003676:	2021      	movs	r0, #33	; 0x21
 8003678:	f7ff fc7b 	bl	8002f72 <send_cmd>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d121      	bne.n	80036c6 <USER_SPI_ioctl+0x2c6>
 8003682:	2100      	movs	r1, #0
 8003684:	2026      	movs	r0, #38	; 0x26
 8003686:	f7ff fc74 	bl	8002f72 <send_cmd>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11a      	bne.n	80036c6 <USER_SPI_ioctl+0x2c6>
 8003690:	f247 5030 	movw	r0, #30000	; 0x7530
 8003694:	f7ff fbc3 	bl	8002e1e <wait_ready>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d013      	beq.n	80036c6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80036a4:	e00f      	b.n	80036c6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80036a6:	2304      	movs	r3, #4
 80036a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80036ac:	e00c      	b.n	80036c8 <USER_SPI_ioctl+0x2c8>
		break;
 80036ae:	bf00      	nop
 80036b0:	e00a      	b.n	80036c8 <USER_SPI_ioctl+0x2c8>
		break;
 80036b2:	bf00      	nop
 80036b4:	e008      	b.n	80036c8 <USER_SPI_ioctl+0x2c8>
		break;
 80036b6:	bf00      	nop
 80036b8:	e006      	b.n	80036c8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80036ba:	bf00      	nop
 80036bc:	e004      	b.n	80036c8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <USER_SPI_ioctl+0x2c8>
		break;
 80036c6:	bf00      	nop
	}

	despiselect();
 80036c8:	f7ff fbcc 	bl	8002e64 <despiselect>

	return res;
 80036cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3730      	adds	r7, #48	; 0x30
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	2000040c 	.word	0x2000040c
 80036dc:	20000518 	.word	0x20000518

080036e0 <Reset_Handler>:
 80036e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003718 <LoopFillZerobss+0x14>
 80036e4:	2100      	movs	r1, #0
 80036e6:	e003      	b.n	80036f0 <LoopCopyDataInit>

080036e8 <CopyDataInit>:
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <LoopFillZerobss+0x18>)
 80036ea:	585b      	ldr	r3, [r3, r1]
 80036ec:	5043      	str	r3, [r0, r1]
 80036ee:	3104      	adds	r1, #4

080036f0 <LoopCopyDataInit>:
 80036f0:	480b      	ldr	r0, [pc, #44]	; (8003720 <LoopFillZerobss+0x1c>)
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <LoopFillZerobss+0x20>)
 80036f4:	1842      	adds	r2, r0, r1
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3f6      	bcc.n	80036e8 <CopyDataInit>
 80036fa:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <LoopFillZerobss+0x24>)
 80036fc:	e002      	b.n	8003704 <LoopFillZerobss>

080036fe <FillZerobss>:
 80036fe:	2300      	movs	r3, #0
 8003700:	f842 3b04 	str.w	r3, [r2], #4

08003704 <LoopFillZerobss>:
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <LoopFillZerobss+0x28>)
 8003706:	429a      	cmp	r2, r3
 8003708:	d3f9      	bcc.n	80036fe <FillZerobss>
 800370a:	f7ff fafd 	bl	8002d08 <SystemInit>
 800370e:	f005 febf 	bl	8009490 <__libc_init_array>
 8003712:	f7fd fe0d 	bl	8001330 <main>
 8003716:	4770      	bx	lr
 8003718:	20020000 	.word	0x20020000
 800371c:	08009e80 	.word	0x08009e80
 8003720:	20000000 	.word	0x20000000
 8003724:	20000490 	.word	0x20000490
 8003728:	20000490 	.word	0x20000490
 800372c:	2000798c 	.word	0x2000798c

08003730 <ADC_IRQHandler>:
 8003730:	e7fe      	b.n	8003730 <ADC_IRQHandler>
	...

08003734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <HAL_Init+0x40>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <HAL_Init+0x40>)
 800373e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_Init+0x40>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <HAL_Init+0x40>)
 800374a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800374e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_Init+0x40>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a07      	ldr	r2, [pc, #28]	; (8003774 <HAL_Init+0x40>)
 8003756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800375c:	2003      	movs	r0, #3
 800375e:	f000 f94d 	bl	80039fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003762:	2000      	movs	r0, #0
 8003764:	f000 f808 	bl	8003778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003768:	f7fe fe7c 	bl	8002464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023c00 	.word	0x40023c00

08003778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_InitTick+0x54>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_InitTick+0x58>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800378e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f965 	bl	8003a66 <HAL_SYSTICK_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00e      	b.n	80037c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b0f      	cmp	r3, #15
 80037aa:	d80a      	bhi.n	80037c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ac:	2200      	movs	r2, #0
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b4:	f000 f92d 	bl	8003a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037b8:	4a06      	ldr	r2, [pc, #24]	; (80037d4 <HAL_InitTick+0x5c>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000408 	.word	0x20000408
 80037d0:	20000414 	.word	0x20000414
 80037d4:	20000410 	.word	0x20000410

080037d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_IncTick+0x20>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_IncTick+0x24>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4413      	add	r3, r2
 80037e8:	4a04      	ldr	r2, [pc, #16]	; (80037fc <HAL_IncTick+0x24>)
 80037ea:	6013      	str	r3, [r2, #0]
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000414 	.word	0x20000414
 80037fc:	2000751c 	.word	0x2000751c

08003800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return uwTick;
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <HAL_GetTick+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	2000751c 	.word	0x2000751c

08003818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003820:	f7ff ffee 	bl	8003800 <HAL_GetTick>
 8003824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003830:	d005      	beq.n	800383e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_Delay+0x40>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800383e:	bf00      	nop
 8003840:	f7ff ffde 	bl	8003800 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	429a      	cmp	r2, r3
 800384e:	d8f7      	bhi.n	8003840 <HAL_Delay+0x28>
  {
  }
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000414 	.word	0x20000414

0800385c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <__NVIC_SetPriorityGrouping+0x44>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003878:	4013      	ands	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800388e:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	60d3      	str	r3, [r2, #12]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <__NVIC_GetPriorityGrouping+0x18>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	f003 0307 	and.w	r3, r3, #7
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	db0b      	blt.n	80038ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	f003 021f 	and.w	r2, r3, #31
 80038d8:	4907      	ldr	r1, [pc, #28]	; (80038f8 <__NVIC_EnableIRQ+0x38>)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2001      	movs	r0, #1
 80038e2:	fa00 f202 	lsl.w	r2, r0, r2
 80038e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	e000e100 	.word	0xe000e100

080038fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	6039      	str	r1, [r7, #0]
 8003906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390c:	2b00      	cmp	r3, #0
 800390e:	db0a      	blt.n	8003926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	490c      	ldr	r1, [pc, #48]	; (8003948 <__NVIC_SetPriority+0x4c>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	440b      	add	r3, r1
 8003920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003924:	e00a      	b.n	800393c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	4908      	ldr	r1, [pc, #32]	; (800394c <__NVIC_SetPriority+0x50>)
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	3b04      	subs	r3, #4
 8003934:	0112      	lsls	r2, r2, #4
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	440b      	add	r3, r1
 800393a:	761a      	strb	r2, [r3, #24]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000e100 	.word	0xe000e100
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	; 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f1c3 0307 	rsb	r3, r3, #7
 800396a:	2b04      	cmp	r3, #4
 800396c:	bf28      	it	cs
 800396e:	2304      	movcs	r3, #4
 8003970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3304      	adds	r3, #4
 8003976:	2b06      	cmp	r3, #6
 8003978:	d902      	bls.n	8003980 <NVIC_EncodePriority+0x30>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3b03      	subs	r3, #3
 800397e:	e000      	b.n	8003982 <NVIC_EncodePriority+0x32>
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43da      	mvns	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	401a      	ands	r2, r3
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa01 f303 	lsl.w	r3, r1, r3
 80039a2:	43d9      	mvns	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a8:	4313      	orrs	r3, r2
         );
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3724      	adds	r7, #36	; 0x24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c8:	d301      	bcc.n	80039ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ca:	2301      	movs	r3, #1
 80039cc:	e00f      	b.n	80039ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ce:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <SysTick_Config+0x40>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039d6:	210f      	movs	r1, #15
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039dc:	f7ff ff8e 	bl	80038fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <SysTick_Config+0x40>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039e6:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <SysTick_Config+0x40>)
 80039e8:	2207      	movs	r2, #7
 80039ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	e000e010 	.word	0xe000e010

080039fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff29 	bl	800385c <__NVIC_SetPriorityGrouping>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b086      	sub	sp, #24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	4603      	mov	r3, r0
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a24:	f7ff ff3e 	bl	80038a4 <__NVIC_GetPriorityGrouping>
 8003a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	6978      	ldr	r0, [r7, #20]
 8003a30:	f7ff ff8e 	bl	8003950 <NVIC_EncodePriority>
 8003a34:	4602      	mov	r2, r0
 8003a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff5d 	bl	80038fc <__NVIC_SetPriority>
}
 8003a42:	bf00      	nop
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	4603      	mov	r3, r0
 8003a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff31 	bl	80038c0 <__NVIC_EnableIRQ>
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ffa2 	bl	80039b8 <SysTick_Config>
 8003a74:	4603      	mov	r3, r0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a8c:	f7ff feb8 	bl	8003800 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e099      	b.n	8003bd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003abc:	e00f      	b.n	8003ade <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003abe:	f7ff fe9f 	bl	8003800 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b05      	cmp	r3, #5
 8003aca:	d908      	bls.n	8003ade <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e078      	b.n	8003bd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e8      	bne.n	8003abe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <HAL_DMA_Init+0x158>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d107      	bne.n	8003b48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	4313      	orrs	r3, r2
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0307 	bic.w	r3, r3, #7
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d117      	bne.n	8003ba2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00e      	beq.n	8003ba2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fb0d 	bl	80041a4 <DMA_CheckFifoParam>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2240      	movs	r2, #64	; 0x40
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e016      	b.n	8003bd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fac4 	bl	8004138 <DMA_CalcBaseAndBitshift>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb8:	223f      	movs	r2, #63	; 0x3f
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	f010803f 	.word	0xf010803f

08003bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_DMA_Start_IT+0x26>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e040      	b.n	8003c84 <HAL_DMA_Start_IT+0xa8>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d12f      	bne.n	8003c76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fa56 	bl	80040dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	223f      	movs	r2, #63	; 0x3f
 8003c36:	409a      	lsls	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0216 	orr.w	r2, r2, #22
 8003c4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0208 	orr.w	r2, r2, #8
 8003c62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e005      	b.n	8003c82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c9a:	f7ff fdb1 	bl	8003800 <HAL_GetTick>
 8003c9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d008      	beq.n	8003cbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2280      	movs	r2, #128	; 0x80
 8003cb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e052      	b.n	8003d64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0216 	bic.w	r2, r2, #22
 8003ccc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <HAL_DMA_Abort+0x62>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0208 	bic.w	r2, r2, #8
 8003cfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0201 	bic.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d0e:	e013      	b.n	8003d38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d10:	f7ff fd76 	bl	8003800 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d90c      	bls.n	8003d38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e015      	b.n	8003d64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e4      	bne.n	8003d10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	223f      	movs	r2, #63	; 0x3f
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00c      	b.n	8003da4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dbc:	4b92      	ldr	r3, [pc, #584]	; (8004008 <HAL_DMA_IRQHandler+0x258>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a92      	ldr	r2, [pc, #584]	; (800400c <HAL_DMA_IRQHandler+0x25c>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	0a9b      	lsrs	r3, r3, #10
 8003dc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	2208      	movs	r2, #8
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01a      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0204 	bic.w	r2, r2, #4
 8003e02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	2208      	movs	r2, #8
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	f043 0201 	orr.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	2201      	movs	r2, #1
 8003e22:	409a      	lsls	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d012      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	2201      	movs	r2, #1
 8003e40:	409a      	lsls	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	f043 0202 	orr.w	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	2204      	movs	r2, #4
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d012      	beq.n	8003e88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	2204      	movs	r2, #4
 8003e76:	409a      	lsls	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f043 0204 	orr.w	r2, r3, #4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d043      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d03c      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	2210      	movs	r2, #16
 8003eac:	409a      	lsls	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d018      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d108      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d024      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
 8003ede:	e01f      	b.n	8003f20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01b      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
 8003ef0:	e016      	b.n	8003f20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0208 	bic.w	r2, r2, #8
 8003f0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f24:	2220      	movs	r2, #32
 8003f26:	409a      	lsls	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 808e 	beq.w	800404e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8086 	beq.w	800404e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f46:	2220      	movs	r2, #32
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d136      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0216 	bic.w	r2, r2, #22
 8003f68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <HAL_DMA_IRQHandler+0x1da>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0208 	bic.w	r2, r2, #8
 8003f98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	223f      	movs	r2, #63	; 0x3f
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d07d      	beq.n	80040ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	4798      	blx	r3
        }
        return;
 8003fc6:	e078      	b.n	80040ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01c      	beq.n	8004010 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d030      	beq.n	800404e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
 8003ff4:	e02b      	b.n	800404e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d027      	beq.n	800404e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
 8004006:	e022      	b.n	800404e <HAL_DMA_IRQHandler+0x29e>
 8004008:	20000408 	.word	0x20000408
 800400c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10f      	bne.n	800403e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0210 	bic.w	r2, r2, #16
 800402c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	2b00      	cmp	r3, #0
 8004054:	d032      	beq.n	80040bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d022      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2205      	movs	r2, #5
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	3301      	adds	r3, #1
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	429a      	cmp	r2, r3
 8004084:	d307      	bcc.n	8004096 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f2      	bne.n	800407a <HAL_DMA_IRQHandler+0x2ca>
 8004094:	e000      	b.n	8004098 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004096:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
 80040b8:	e000      	b.n	80040bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80040ba:	bf00      	nop
    }
  }
}
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop

080040c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d108      	bne.n	800411c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800411a:	e007      	b.n	800412c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	60da      	str	r2, [r3, #12]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	3b10      	subs	r3, #16
 8004148:	4a14      	ldr	r2, [pc, #80]	; (800419c <DMA_CalcBaseAndBitshift+0x64>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004152:	4a13      	ldr	r2, [pc, #76]	; (80041a0 <DMA_CalcBaseAndBitshift+0x68>)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d909      	bls.n	800417a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	659a      	str	r2, [r3, #88]	; 0x58
 8004178:	e007      	b.n	800418a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	aaaaaaab 	.word	0xaaaaaaab
 80041a0:	08009db4 	.word	0x08009db4

080041a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11f      	bne.n	80041fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d855      	bhi.n	8004270 <DMA_CheckFifoParam+0xcc>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <DMA_CheckFifoParam+0x28>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	080041ef 	.word	0x080041ef
 80041d4:	080041dd 	.word	0x080041dd
 80041d8:	08004271 	.word	0x08004271
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d045      	beq.n	8004274 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ec:	e042      	b.n	8004274 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041f6:	d13f      	bne.n	8004278 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fc:	e03c      	b.n	8004278 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004206:	d121      	bne.n	800424c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d836      	bhi.n	800427c <DMA_CheckFifoParam+0xd8>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <DMA_CheckFifoParam+0x70>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004225 	.word	0x08004225
 8004218:	0800422b 	.word	0x0800422b
 800421c:	08004225 	.word	0x08004225
 8004220:	0800423d 	.word	0x0800423d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	e02f      	b.n	800428a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d024      	beq.n	8004280 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423a:	e021      	b.n	8004280 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004244:	d11e      	bne.n	8004284 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800424a:	e01b      	b.n	8004284 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d902      	bls.n	8004258 <DMA_CheckFifoParam+0xb4>
 8004252:	2b03      	cmp	r3, #3
 8004254:	d003      	beq.n	800425e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004256:	e018      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
      break;
 800425c:	e015      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00e      	beq.n	8004288 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
      break;
 800426e:	e00b      	b.n	8004288 <DMA_CheckFifoParam+0xe4>
      break;
 8004270:	bf00      	nop
 8004272:	e00a      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;
 8004274:	bf00      	nop
 8004276:	e008      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;
 8004278:	bf00      	nop
 800427a:	e006      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;
 800427c:	bf00      	nop
 800427e:	e004      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;
 8004280:	bf00      	nop
 8004282:	e002      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;   
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;
 8004288:	bf00      	nop
    }
  } 
  
  return status; 
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	e165      	b.n	8004580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042b4:	2201      	movs	r2, #1
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4013      	ands	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	f040 8154 	bne.w	800457a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d00b      	beq.n	80042f2 <HAL_GPIO_Init+0x5a>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d007      	beq.n	80042f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042e6:	2b11      	cmp	r3, #17
 80042e8:	d003      	beq.n	80042f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b12      	cmp	r3, #18
 80042f0:	d130      	bne.n	8004354 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	2203      	movs	r2, #3
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43db      	mvns	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4313      	orrs	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004328:	2201      	movs	r2, #1
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 0201 	and.w	r2, r3, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	2203      	movs	r2, #3
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d003      	beq.n	8004394 <HAL_GPIO_Init+0xfc>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b12      	cmp	r3, #18
 8004392:	d123      	bne.n	80043dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	08da      	lsrs	r2, r3, #3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3208      	adds	r2, #8
 800439c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	220f      	movs	r2, #15
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	08da      	lsrs	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3208      	adds	r2, #8
 80043d6:	69b9      	ldr	r1, [r7, #24]
 80043d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	2203      	movs	r2, #3
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 0203 	and.w	r2, r3, #3
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80ae 	beq.w	800457a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	4b5c      	ldr	r3, [pc, #368]	; (8004594 <HAL_GPIO_Init+0x2fc>)
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	4a5b      	ldr	r2, [pc, #364]	; (8004594 <HAL_GPIO_Init+0x2fc>)
 8004428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800442c:	6453      	str	r3, [r2, #68]	; 0x44
 800442e:	4b59      	ldr	r3, [pc, #356]	; (8004594 <HAL_GPIO_Init+0x2fc>)
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800443a:	4a57      	ldr	r2, [pc, #348]	; (8004598 <HAL_GPIO_Init+0x300>)
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	089b      	lsrs	r3, r3, #2
 8004440:	3302      	adds	r3, #2
 8004442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	220f      	movs	r2, #15
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43db      	mvns	r3, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4013      	ands	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a4e      	ldr	r2, [pc, #312]	; (800459c <HAL_GPIO_Init+0x304>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d025      	beq.n	80044b2 <HAL_GPIO_Init+0x21a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a4d      	ldr	r2, [pc, #308]	; (80045a0 <HAL_GPIO_Init+0x308>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01f      	beq.n	80044ae <HAL_GPIO_Init+0x216>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a4c      	ldr	r2, [pc, #304]	; (80045a4 <HAL_GPIO_Init+0x30c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d019      	beq.n	80044aa <HAL_GPIO_Init+0x212>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a4b      	ldr	r2, [pc, #300]	; (80045a8 <HAL_GPIO_Init+0x310>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_GPIO_Init+0x20e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a4a      	ldr	r2, [pc, #296]	; (80045ac <HAL_GPIO_Init+0x314>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00d      	beq.n	80044a2 <HAL_GPIO_Init+0x20a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a49      	ldr	r2, [pc, #292]	; (80045b0 <HAL_GPIO_Init+0x318>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <HAL_GPIO_Init+0x206>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a48      	ldr	r2, [pc, #288]	; (80045b4 <HAL_GPIO_Init+0x31c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d101      	bne.n	800449a <HAL_GPIO_Init+0x202>
 8004496:	2306      	movs	r3, #6
 8004498:	e00c      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 800449a:	2307      	movs	r3, #7
 800449c:	e00a      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 800449e:	2305      	movs	r3, #5
 80044a0:	e008      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 80044a2:	2304      	movs	r3, #4
 80044a4:	e006      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 80044a6:	2303      	movs	r3, #3
 80044a8:	e004      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e002      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 80044b2:	2300      	movs	r3, #0
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	f002 0203 	and.w	r2, r2, #3
 80044ba:	0092      	lsls	r2, r2, #2
 80044bc:	4093      	lsls	r3, r2
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044c4:	4934      	ldr	r1, [pc, #208]	; (8004598 <HAL_GPIO_Init+0x300>)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	089b      	lsrs	r3, r3, #2
 80044ca:	3302      	adds	r3, #2
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044d2:	4b39      	ldr	r3, [pc, #228]	; (80045b8 <HAL_GPIO_Init+0x320>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	43db      	mvns	r3, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4013      	ands	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044f6:	4a30      	ldr	r2, [pc, #192]	; (80045b8 <HAL_GPIO_Init+0x320>)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044fc:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <HAL_GPIO_Init+0x320>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004520:	4a25      	ldr	r2, [pc, #148]	; (80045b8 <HAL_GPIO_Init+0x320>)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004526:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_GPIO_Init+0x320>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	43db      	mvns	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800454a:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <HAL_GPIO_Init+0x320>)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004550:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <HAL_GPIO_Init+0x320>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004574:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <HAL_GPIO_Init+0x320>)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	3301      	adds	r3, #1
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b0f      	cmp	r3, #15
 8004584:	f67f ae96 	bls.w	80042b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004588:	bf00      	nop
 800458a:	3724      	adds	r7, #36	; 0x24
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	40023800 	.word	0x40023800
 8004598:	40013800 	.word	0x40013800
 800459c:	40020000 	.word	0x40020000
 80045a0:	40020400 	.word	0x40020400
 80045a4:	40020800 	.word	0x40020800
 80045a8:	40020c00 	.word	0x40020c00
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40021400 	.word	0x40021400
 80045b4:	40021800 	.word	0x40021800
 80045b8:	40013c00 	.word	0x40013c00

080045bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	887b      	ldrh	r3, [r7, #2]
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	e001      	b.n	80045de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045de:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	807b      	strh	r3, [r7, #2]
 80045f8:	4613      	mov	r3, r2
 80045fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045fc:	787b      	ldrb	r3, [r7, #1]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004602:	887a      	ldrh	r2, [r7, #2]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004608:	e003      	b.n	8004612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800460a:	887b      	ldrh	r3, [r7, #2]
 800460c:	041a      	lsls	r2, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	619a      	str	r2, [r3, #24]
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004638:	6413      	str	r3, [r2, #64]	; 0x40
 800463a:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004646:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800464c:	f7ff f8d8 	bl	8003800 <HAL_GetTick>
 8004650:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004652:	e009      	b.n	8004668 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004654:	f7ff f8d4 	bl	8003800 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004662:	d901      	bls.n	8004668 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e01f      	b.n	80046a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004674:	d1ee      	bne.n	8004654 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004676:	4b11      	ldr	r3, [pc, #68]	; (80046bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800467c:	f7ff f8c0 	bl	8003800 <HAL_GetTick>
 8004680:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004682:	e009      	b.n	8004698 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004684:	f7ff f8bc 	bl	8003800 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004692:	d901      	bls.n	8004698 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e007      	b.n	80046a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004698:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046a4:	d1ee      	bne.n	8004684 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40023800 	.word	0x40023800
 80046b4:	420e0040 	.word	0x420e0040
 80046b8:	40007000 	.word	0x40007000
 80046bc:	420e0044 	.word	0x420e0044

080046c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0cc      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	4b68      	ldr	r3, [pc, #416]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d90c      	bls.n	80046fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b65      	ldr	r3, [pc, #404]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b63      	ldr	r3, [pc, #396]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0b8      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004714:	4b59      	ldr	r3, [pc, #356]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	4a58      	ldr	r2, [pc, #352]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800471e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800472c:	4b53      	ldr	r3, [pc, #332]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a52      	ldr	r2, [pc, #328]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004738:	4b50      	ldr	r3, [pc, #320]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	494d      	ldr	r1, [pc, #308]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d044      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d107      	bne.n	800476e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	4b47      	ldr	r3, [pc, #284]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d119      	bne.n	800479e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e07f      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d003      	beq.n	800477e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800477a:	2b03      	cmp	r3, #3
 800477c:	d107      	bne.n	800478e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477e:	4b3f      	ldr	r3, [pc, #252]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e06f      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478e:	4b3b      	ldr	r3, [pc, #236]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e067      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479e:	4b37      	ldr	r3, [pc, #220]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f023 0203 	bic.w	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4934      	ldr	r1, [pc, #208]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b0:	f7ff f826 	bl	8003800 <HAL_GetTick>
 80047b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b8:	f7ff f822 	bl	8003800 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e04f      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	4b2b      	ldr	r3, [pc, #172]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 020c 	and.w	r2, r3, #12
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	429a      	cmp	r2, r3
 80047de:	d1eb      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d20c      	bcs.n	8004808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	4b20      	ldr	r3, [pc, #128]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e032      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004814:	4b19      	ldr	r3, [pc, #100]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4916      	ldr	r1, [pc, #88]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	490e      	ldr	r1, [pc, #56]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004846:	f000 f855 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 800484a:	4601      	mov	r1, r0
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <HAL_RCC_ClockConfig+0x1c0>)
 8004858:	5cd3      	ldrb	r3, [r2, r3]
 800485a:	fa21 f303 	lsr.w	r3, r1, r3
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCC_ClockConfig+0x1c8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe ff86 	bl	8003778 <HAL_InitTick>

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40023c00 	.word	0x40023c00
 800487c:	40023800 	.word	0x40023800
 8004880:	08009d9c 	.word	0x08009d9c
 8004884:	20000408 	.word	0x20000408
 8004888:	20000410 	.word	0x20000410

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000408 	.word	0x20000408

080048a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048a8:	f7ff fff0 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048ac:	4601      	mov	r1, r0
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0a9b      	lsrs	r3, r3, #10
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4a03      	ldr	r2, [pc, #12]	; (80048c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40023800 	.word	0x40023800
 80048c8:	08009dac 	.word	0x08009dac

080048cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048d0:	f7ff ffdc 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048d4:	4601      	mov	r1, r0
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0b5b      	lsrs	r3, r3, #13
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4a03      	ldr	r2, [pc, #12]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
 80048e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	08009dac 	.word	0x08009dac

080048f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490e:	4bc6      	ldr	r3, [pc, #792]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x334>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b0c      	cmp	r3, #12
 8004918:	f200 817e 	bhi.w	8004c18 <HAL_RCC_GetSysClockFreq+0x324>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <HAL_RCC_GetSysClockFreq+0x30>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004959 	.word	0x08004959
 8004928:	08004c19 	.word	0x08004c19
 800492c:	08004c19 	.word	0x08004c19
 8004930:	08004c19 	.word	0x08004c19
 8004934:	0800495f 	.word	0x0800495f
 8004938:	08004c19 	.word	0x08004c19
 800493c:	08004c19 	.word	0x08004c19
 8004940:	08004c19 	.word	0x08004c19
 8004944:	08004965 	.word	0x08004965
 8004948:	08004c19 	.word	0x08004c19
 800494c:	08004c19 	.word	0x08004c19
 8004950:	08004c19 	.word	0x08004c19
 8004954:	08004ac1 	.word	0x08004ac1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004958:	4bb4      	ldr	r3, [pc, #720]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x338>)
 800495a:	613b      	str	r3, [r7, #16]
       break;
 800495c:	e15f      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495e:	4bb4      	ldr	r3, [pc, #720]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004960:	613b      	str	r3, [r7, #16]
      break;
 8004962:	e15c      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004964:	4bb0      	ldr	r3, [pc, #704]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x334>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800496c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800496e:	4bae      	ldr	r3, [pc, #696]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x334>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d04a      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497a:	4bab      	ldr	r3, [pc, #684]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x334>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	f04f 0400 	mov.w	r4, #0
 8004984:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	ea03 0501 	and.w	r5, r3, r1
 8004990:	ea04 0602 	and.w	r6, r4, r2
 8004994:	4629      	mov	r1, r5
 8004996:	4632      	mov	r2, r6
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	f04f 0400 	mov.w	r4, #0
 80049a0:	0154      	lsls	r4, r2, #5
 80049a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049a6:	014b      	lsls	r3, r1, #5
 80049a8:	4619      	mov	r1, r3
 80049aa:	4622      	mov	r2, r4
 80049ac:	1b49      	subs	r1, r1, r5
 80049ae:	eb62 0206 	sbc.w	r2, r2, r6
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	f04f 0400 	mov.w	r4, #0
 80049ba:	0194      	lsls	r4, r2, #6
 80049bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049c0:	018b      	lsls	r3, r1, #6
 80049c2:	1a5b      	subs	r3, r3, r1
 80049c4:	eb64 0402 	sbc.w	r4, r4, r2
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	00e2      	lsls	r2, r4, #3
 80049d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049d6:	00d9      	lsls	r1, r3, #3
 80049d8:	460b      	mov	r3, r1
 80049da:	4614      	mov	r4, r2
 80049dc:	195b      	adds	r3, r3, r5
 80049de:	eb44 0406 	adc.w	r4, r4, r6
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	0262      	lsls	r2, r4, #9
 80049ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80049f0:	0259      	lsls	r1, r3, #9
 80049f2:	460b      	mov	r3, r1
 80049f4:	4614      	mov	r4, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	4621      	mov	r1, r4
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f04f 0400 	mov.w	r4, #0
 8004a00:	461a      	mov	r2, r3
 8004a02:	4623      	mov	r3, r4
 8004a04:	f7fb fc54 	bl	80002b0 <__aeabi_uldivmod>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	e049      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a10:	4b85      	ldr	r3, [pc, #532]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	099b      	lsrs	r3, r3, #6
 8004a16:	f04f 0400 	mov.w	r4, #0
 8004a1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	ea03 0501 	and.w	r5, r3, r1
 8004a26:	ea04 0602 	and.w	r6, r4, r2
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	4632      	mov	r2, r6
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	f04f 0400 	mov.w	r4, #0
 8004a36:	0154      	lsls	r4, r2, #5
 8004a38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a3c:	014b      	lsls	r3, r1, #5
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4622      	mov	r2, r4
 8004a42:	1b49      	subs	r1, r1, r5
 8004a44:	eb62 0206 	sbc.w	r2, r2, r6
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	f04f 0400 	mov.w	r4, #0
 8004a50:	0194      	lsls	r4, r2, #6
 8004a52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a56:	018b      	lsls	r3, r1, #6
 8004a58:	1a5b      	subs	r3, r3, r1
 8004a5a:	eb64 0402 	sbc.w	r4, r4, r2
 8004a5e:	f04f 0100 	mov.w	r1, #0
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	00e2      	lsls	r2, r4, #3
 8004a68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a6c:	00d9      	lsls	r1, r3, #3
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4614      	mov	r4, r2
 8004a72:	195b      	adds	r3, r3, r5
 8004a74:	eb44 0406 	adc.w	r4, r4, r6
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	02a2      	lsls	r2, r4, #10
 8004a82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a86:	0299      	lsls	r1, r3, #10
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4614      	mov	r4, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	4621      	mov	r1, r4
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f04f 0400 	mov.w	r4, #0
 8004a96:	461a      	mov	r2, r3
 8004a98:	4623      	mov	r3, r4
 8004a9a:	f7fb fc09 	bl	80002b0 <__aeabi_uldivmod>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aa4:	4b60      	ldr	r3, [pc, #384]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x334>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	613b      	str	r3, [r7, #16]
      break;
 8004abe:	e0ae      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac0:	4b59      	ldr	r3, [pc, #356]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x334>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aca:	4b57      	ldr	r3, [pc, #348]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x334>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d04a      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad6:	4b54      	ldr	r3, [pc, #336]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x334>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	099b      	lsrs	r3, r3, #6
 8004adc:	f04f 0400 	mov.w	r4, #0
 8004ae0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	ea03 0501 	and.w	r5, r3, r1
 8004aec:	ea04 0602 	and.w	r6, r4, r2
 8004af0:	4629      	mov	r1, r5
 8004af2:	4632      	mov	r2, r6
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	f04f 0400 	mov.w	r4, #0
 8004afc:	0154      	lsls	r4, r2, #5
 8004afe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b02:	014b      	lsls	r3, r1, #5
 8004b04:	4619      	mov	r1, r3
 8004b06:	4622      	mov	r2, r4
 8004b08:	1b49      	subs	r1, r1, r5
 8004b0a:	eb62 0206 	sbc.w	r2, r2, r6
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	f04f 0400 	mov.w	r4, #0
 8004b16:	0194      	lsls	r4, r2, #6
 8004b18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b1c:	018b      	lsls	r3, r1, #6
 8004b1e:	1a5b      	subs	r3, r3, r1
 8004b20:	eb64 0402 	sbc.w	r4, r4, r2
 8004b24:	f04f 0100 	mov.w	r1, #0
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	00e2      	lsls	r2, r4, #3
 8004b2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b32:	00d9      	lsls	r1, r3, #3
 8004b34:	460b      	mov	r3, r1
 8004b36:	4614      	mov	r4, r2
 8004b38:	195b      	adds	r3, r3, r5
 8004b3a:	eb44 0406 	adc.w	r4, r4, r6
 8004b3e:	f04f 0100 	mov.w	r1, #0
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	0262      	lsls	r2, r4, #9
 8004b48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b4c:	0259      	lsls	r1, r3, #9
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4614      	mov	r4, r2
 8004b52:	4618      	mov	r0, r3
 8004b54:	4621      	mov	r1, r4
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f04f 0400 	mov.w	r4, #0
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	f7fb fba6 	bl	80002b0 <__aeabi_uldivmod>
 8004b64:	4603      	mov	r3, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	e049      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6c:	4b2e      	ldr	r3, [pc, #184]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	099b      	lsrs	r3, r3, #6
 8004b72:	f04f 0400 	mov.w	r4, #0
 8004b76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	ea03 0501 	and.w	r5, r3, r1
 8004b82:	ea04 0602 	and.w	r6, r4, r2
 8004b86:	4629      	mov	r1, r5
 8004b88:	4632      	mov	r2, r6
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	f04f 0400 	mov.w	r4, #0
 8004b92:	0154      	lsls	r4, r2, #5
 8004b94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b98:	014b      	lsls	r3, r1, #5
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	1b49      	subs	r1, r1, r5
 8004ba0:	eb62 0206 	sbc.w	r2, r2, r6
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	0194      	lsls	r4, r2, #6
 8004bae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bb2:	018b      	lsls	r3, r1, #6
 8004bb4:	1a5b      	subs	r3, r3, r1
 8004bb6:	eb64 0402 	sbc.w	r4, r4, r2
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	00e2      	lsls	r2, r4, #3
 8004bc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bc8:	00d9      	lsls	r1, r3, #3
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4614      	mov	r4, r2
 8004bce:	195b      	adds	r3, r3, r5
 8004bd0:	eb44 0406 	adc.w	r4, r4, r6
 8004bd4:	f04f 0100 	mov.w	r1, #0
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	02a2      	lsls	r2, r4, #10
 8004bde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004be2:	0299      	lsls	r1, r3, #10
 8004be4:	460b      	mov	r3, r1
 8004be6:	4614      	mov	r4, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	4621      	mov	r1, r4
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f04f 0400 	mov.w	r4, #0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4623      	mov	r3, r4
 8004bf6:	f7fb fb5b 	bl	80002b0 <__aeabi_uldivmod>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	0f1b      	lsrs	r3, r3, #28
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	613b      	str	r3, [r7, #16]
      break;
 8004c16:	e002      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x338>)
 8004c1a:	613b      	str	r3, [r7, #16]
      break;
 8004c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c1e:	693b      	ldr	r3, [r7, #16]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	00f42400 	.word	0x00f42400
 8004c30:	007a1200 	.word	0x007a1200

08004c34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8083 	beq.w	8004d54 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c4e:	4b95      	ldr	r3, [pc, #596]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d019      	beq.n	8004c8e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c5a:	4b92      	ldr	r3, [pc, #584]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d106      	bne.n	8004c74 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c66:	4b8f      	ldr	r3, [pc, #572]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c72:	d00c      	beq.n	8004c8e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c74:	4b8b      	ldr	r3, [pc, #556]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c7c:	2b0c      	cmp	r3, #12
 8004c7e:	d112      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c80:	4b88      	ldr	r3, [pc, #544]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8e:	4b85      	ldr	r3, [pc, #532]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d05b      	beq.n	8004d52 <HAL_RCC_OscConfig+0x11e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d157      	bne.n	8004d52 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e216      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cae:	d106      	bne.n	8004cbe <HAL_RCC_OscConfig+0x8a>
 8004cb0:	4b7c      	ldr	r3, [pc, #496]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a7b      	ldr	r2, [pc, #492]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	e01d      	b.n	8004cfa <HAL_RCC_OscConfig+0xc6>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cc6:	d10c      	bne.n	8004ce2 <HAL_RCC_OscConfig+0xae>
 8004cc8:	4b76      	ldr	r3, [pc, #472]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a75      	ldr	r2, [pc, #468]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4b73      	ldr	r3, [pc, #460]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a72      	ldr	r2, [pc, #456]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	e00b      	b.n	8004cfa <HAL_RCC_OscConfig+0xc6>
 8004ce2:	4b70      	ldr	r3, [pc, #448]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a6f      	ldr	r2, [pc, #444]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b6d      	ldr	r3, [pc, #436]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a6c      	ldr	r2, [pc, #432]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d013      	beq.n	8004d2a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fe fd7d 	bl	8003800 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d0a:	f7fe fd79 	bl	8003800 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b64      	cmp	r3, #100	; 0x64
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e1db      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1c:	4b61      	ldr	r3, [pc, #388]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0xd6>
 8004d28:	e014      	b.n	8004d54 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2a:	f7fe fd69 	bl	8003800 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d32:	f7fe fd65 	bl	8003800 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b64      	cmp	r3, #100	; 0x64
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e1c7      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d44:	4b57      	ldr	r3, [pc, #348]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCC_OscConfig+0xfe>
 8004d50:	e000      	b.n	8004d54 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d06f      	beq.n	8004e40 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d60:	4b50      	ldr	r3, [pc, #320]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d017      	beq.n	8004d9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d6c:	4b4d      	ldr	r3, [pc, #308]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d105      	bne.n	8004d84 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d78:	4b4a      	ldr	r3, [pc, #296]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d84:	4b47      	ldr	r3, [pc, #284]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d8c:	2b0c      	cmp	r3, #12
 8004d8e:	d11c      	bne.n	8004dca <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d90:	4b44      	ldr	r3, [pc, #272]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d116      	bne.n	8004dca <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9c:	4b41      	ldr	r3, [pc, #260]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_OscConfig+0x180>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e18f      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db4:	4b3b      	ldr	r3, [pc, #236]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4938      	ldr	r1, [pc, #224]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc8:	e03a      	b.n	8004e40 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d020      	beq.n	8004e14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd2:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fe fd12 	bl	8003800 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de0:	f7fe fd0e 	bl	8003800 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e170      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df2:	4b2c      	ldr	r3, [pc, #176]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfe:	4b29      	ldr	r3, [pc, #164]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4925      	ldr	r1, [pc, #148]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]
 8004e12:	e015      	b.n	8004e40 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e14:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1a:	f7fe fcf1 	bl	8003800 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e22:	f7fe fced 	bl	8003800 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e14f      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e34:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f0      	bne.n	8004e22 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d037      	beq.n	8004ebc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d016      	beq.n	8004e82 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e54:	4b15      	ldr	r3, [pc, #84]	; (8004eac <HAL_RCC_OscConfig+0x278>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5a:	f7fe fcd1 	bl	8003800 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e62:	f7fe fccd 	bl	8003800 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e12f      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <HAL_RCC_OscConfig+0x270>)
 8004e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x22e>
 8004e80:	e01c      	b.n	8004ebc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e82:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <HAL_RCC_OscConfig+0x278>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e88:	f7fe fcba 	bl	8003800 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e8e:	e00f      	b.n	8004eb0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e90:	f7fe fcb6 	bl	8003800 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d908      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e118      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	42470000 	.word	0x42470000
 8004eac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb0:	4b8a      	ldr	r3, [pc, #552]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e9      	bne.n	8004e90 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8097 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ece:	4b83      	ldr	r3, [pc, #524]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10f      	bne.n	8004efa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	4b7f      	ldr	r3, [pc, #508]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	4a7e      	ldr	r2, [pc, #504]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eea:	4b7c      	ldr	r3, [pc, #496]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efa:	4b79      	ldr	r3, [pc, #484]	; (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d118      	bne.n	8004f38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f06:	4b76      	ldr	r3, [pc, #472]	; (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a75      	ldr	r2, [pc, #468]	; (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f12:	f7fe fc75 	bl	8003800 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1a:	f7fe fc71 	bl	8003800 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e0d3      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	4b6c      	ldr	r3, [pc, #432]	; (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCC_OscConfig+0x31a>
 8004f40:	4b66      	ldr	r3, [pc, #408]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	4a65      	ldr	r2, [pc, #404]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4c:	e01c      	b.n	8004f88 <HAL_RCC_OscConfig+0x354>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x33c>
 8004f56:	4b61      	ldr	r3, [pc, #388]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a60      	ldr	r2, [pc, #384]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004f5c:	f043 0304 	orr.w	r3, r3, #4
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70
 8004f62:	4b5e      	ldr	r3, [pc, #376]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f66:	4a5d      	ldr	r2, [pc, #372]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCC_OscConfig+0x354>
 8004f70:	4b5a      	ldr	r3, [pc, #360]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	4a59      	ldr	r2, [pc, #356]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7c:	4b57      	ldr	r3, [pc, #348]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f80:	4a56      	ldr	r2, [pc, #344]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004f82:	f023 0304 	bic.w	r3, r3, #4
 8004f86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d015      	beq.n	8004fbc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7fe fc36 	bl	8003800 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f96:	e00a      	b.n	8004fae <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f98:	f7fe fc32 	bl	8003800 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e092      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fae:	4b4b      	ldr	r3, [pc, #300]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0ee      	beq.n	8004f98 <HAL_RCC_OscConfig+0x364>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fe fc20 	bl	8003800 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc4:	f7fe fc1c 	bl	8003800 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e07c      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fda:	4b40      	ldr	r3, [pc, #256]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1ee      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fec:	4b3b      	ldr	r3, [pc, #236]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	4a3a      	ldr	r2, [pc, #232]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8004ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d068      	beq.n	80050d2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005000:	4b36      	ldr	r3, [pc, #216]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 030c 	and.w	r3, r3, #12
 8005008:	2b08      	cmp	r3, #8
 800500a:	d060      	beq.n	80050ce <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d145      	bne.n	80050a0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005014:	4b33      	ldr	r3, [pc, #204]	; (80050e4 <HAL_RCC_OscConfig+0x4b0>)
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501a:	f7fe fbf1 	bl	8003800 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005022:	f7fe fbed 	bl	8003800 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e04f      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005034:	4b29      	ldr	r3, [pc, #164]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f0      	bne.n	8005022 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	019b      	lsls	r3, r3, #6
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	3b01      	subs	r3, #1
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	061b      	lsls	r3, r3, #24
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	071b      	lsls	r3, r3, #28
 800506c:	491b      	ldr	r1, [pc, #108]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 800506e:	4313      	orrs	r3, r2
 8005070:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005072:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <HAL_RCC_OscConfig+0x4b0>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005078:	f7fe fbc2 	bl	8003800 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005080:	f7fe fbbe 	bl	8003800 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e020      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005092:	4b12      	ldr	r3, [pc, #72]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x44c>
 800509e:	e018      	b.n	80050d2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a0:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <HAL_RCC_OscConfig+0x4b0>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fe fbab 	bl	8003800 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ae:	f7fe fba7 	bl	8003800 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e009      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <HAL_RCC_OscConfig+0x4a8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f0      	bne.n	80050ae <HAL_RCC_OscConfig+0x47a>
 80050cc:	e001      	b.n	80050d2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40007000 	.word	0x40007000
 80050e4:	42470060 	.word	0x42470060

080050e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e056      	b.n	80051a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7fd f9cd 	bl	80024b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005130:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	ea42 0103 	orr.w	r1, r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	0c1b      	lsrs	r3, r3, #16
 8005178:	f003 0104 	and.w	r1, r3, #4
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005196:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_SPI_Transmit+0x22>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e11e      	b.n	8005410 <HAL_SPI_Transmit+0x260>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051da:	f7fe fb11 	bl	8003800 <HAL_GetTick>
 80051de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d002      	beq.n	80051f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051f0:	2302      	movs	r3, #2
 80051f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051f4:	e103      	b.n	80053fe <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <HAL_SPI_Transmit+0x52>
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005206:	e0fa      	b.n	80053fe <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2203      	movs	r2, #3
 800520c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	88fa      	ldrh	r2, [r7, #6]
 8005220:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	88fa      	ldrh	r2, [r7, #6]
 8005226:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800524e:	d107      	bne.n	8005260 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800525e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b40      	cmp	r3, #64	; 0x40
 800526c:	d007      	beq.n	800527e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800527c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005286:	d14b      	bne.n	8005320 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_SPI_Transmit+0xe6>
 8005290:	8afb      	ldrh	r3, [r7, #22]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d13e      	bne.n	8005314 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	881a      	ldrh	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	1c9a      	adds	r2, r3, #2
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052ba:	e02b      	b.n	8005314 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d112      	bne.n	80052f0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	881a      	ldrh	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	1c9a      	adds	r2, r3, #2
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80052ee:	e011      	b.n	8005314 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f0:	f7fe fa86 	bl	8003800 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d803      	bhi.n	8005308 <HAL_SPI_Transmit+0x158>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005306:	d102      	bne.n	800530e <HAL_SPI_Transmit+0x15e>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005312:	e074      	b.n	80053fe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1ce      	bne.n	80052bc <HAL_SPI_Transmit+0x10c>
 800531e:	e04c      	b.n	80053ba <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_SPI_Transmit+0x17e>
 8005328:	8afb      	ldrh	r3, [r7, #22]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d140      	bne.n	80053b0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	7812      	ldrb	r2, [r2, #0]
 800533a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005354:	e02c      	b.n	80053b0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b02      	cmp	r3, #2
 8005362:	d113      	bne.n	800538c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	330c      	adds	r3, #12
 800536e:	7812      	ldrb	r2, [r2, #0]
 8005370:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	86da      	strh	r2, [r3, #54]	; 0x36
 800538a:	e011      	b.n	80053b0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800538c:	f7fe fa38 	bl	8003800 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d803      	bhi.n	80053a4 <HAL_SPI_Transmit+0x1f4>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a2:	d102      	bne.n	80053aa <HAL_SPI_Transmit+0x1fa>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053ae:	e026      	b.n	80053fe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1cd      	bne.n	8005356 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fb54 	bl	8005a6c <SPI_EndRxTxTransaction>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e000      	b.n	80053fe <HAL_SPI_Transmit+0x24e>
  }

error:
 80053fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800540e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3720      	adds	r7, #32
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08c      	sub	sp, #48	; 0x30
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005426:	2301      	movs	r3, #1
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_SPI_TransmitReceive+0x26>
 800543a:	2302      	movs	r3, #2
 800543c:	e18a      	b.n	8005754 <HAL_SPI_TransmitReceive+0x33c>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005446:	f7fe f9db 	bl	8003800 <HAL_GetTick>
 800544a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800545c:	887b      	ldrh	r3, [r7, #2]
 800545e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005464:	2b01      	cmp	r3, #1
 8005466:	d00f      	beq.n	8005488 <HAL_SPI_TransmitReceive+0x70>
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800546e:	d107      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d103      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x68>
 8005478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800547c:	2b04      	cmp	r3, #4
 800547e:	d003      	beq.n	8005488 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005480:	2302      	movs	r3, #2
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005486:	e15b      	b.n	8005740 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_SPI_TransmitReceive+0x82>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_SPI_TransmitReceive+0x82>
 8005494:	887b      	ldrh	r3, [r7, #2]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054a0:	e14e      	b.n	8005740 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d003      	beq.n	80054b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2205      	movs	r2, #5
 80054b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	887a      	ldrh	r2, [r7, #2]
 80054c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	887a      	ldrh	r2, [r7, #2]
 80054cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	887a      	ldrh	r2, [r7, #2]
 80054d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	887a      	ldrh	r2, [r7, #2]
 80054de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f6:	2b40      	cmp	r3, #64	; 0x40
 80054f8:	d007      	beq.n	800550a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005508:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005512:	d178      	bne.n	8005606 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_SPI_TransmitReceive+0x10a>
 800551c:	8b7b      	ldrh	r3, [r7, #26]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d166      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	881a      	ldrh	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	1c9a      	adds	r2, r3, #2
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005546:	e053      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b02      	cmp	r3, #2
 8005554:	d11b      	bne.n	800558e <HAL_SPI_TransmitReceive+0x176>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d016      	beq.n	800558e <HAL_SPI_TransmitReceive+0x176>
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	2b01      	cmp	r3, #1
 8005564:	d113      	bne.n	800558e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	881a      	ldrh	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	1c9a      	adds	r2, r3, #2
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b01      	cmp	r3, #1
 800559a:	d119      	bne.n	80055d0 <HAL_SPI_TransmitReceive+0x1b8>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d014      	beq.n	80055d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	b292      	uxth	r2, r2
 80055b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	1c9a      	adds	r2, r3, #2
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055cc:	2301      	movs	r3, #1
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055d0:	f7fe f916 	bl	8003800 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055dc:	429a      	cmp	r2, r3
 80055de:	d807      	bhi.n	80055f0 <HAL_SPI_TransmitReceive+0x1d8>
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e6:	d003      	beq.n	80055f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055ee:	e0a7      	b.n	8005740 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1a6      	bne.n	8005548 <HAL_SPI_TransmitReceive+0x130>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1a1      	bne.n	8005548 <HAL_SPI_TransmitReceive+0x130>
 8005604:	e07c      	b.n	8005700 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <HAL_SPI_TransmitReceive+0x1fc>
 800560e:	8b7b      	ldrh	r3, [r7, #26]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d16b      	bne.n	80056ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	7812      	ldrb	r2, [r2, #0]
 8005620:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800563a:	e057      	b.n	80056ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b02      	cmp	r3, #2
 8005648:	d11c      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x26c>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d017      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x26c>
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	2b01      	cmp	r3, #1
 8005658:	d114      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	330c      	adds	r3, #12
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b01      	cmp	r3, #1
 8005690:	d119      	bne.n	80056c6 <HAL_SPI_TransmitReceive+0x2ae>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d014      	beq.n	80056c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056c2:	2301      	movs	r3, #1
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056c6:	f7fe f89b 	bl	8003800 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d803      	bhi.n	80056de <HAL_SPI_TransmitReceive+0x2c6>
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056dc:	d102      	bne.n	80056e4 <HAL_SPI_TransmitReceive+0x2cc>
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d103      	bne.n	80056ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056ea:	e029      	b.n	8005740 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1a2      	bne.n	800563c <HAL_SPI_TransmitReceive+0x224>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d19d      	bne.n	800563c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f9b1 	bl	8005a6c <SPI_EndRxTxTransaction>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d006      	beq.n	800571e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800571c:	e010      	b.n	8005740 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10b      	bne.n	800573e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	e000      	b.n	8005740 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800573e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005750:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005754:	4618      	mov	r0, r3
 8005756:	3730      	adds	r7, #48	; 0x30
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10f      	bne.n	80057a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	099b      	lsrs	r3, r3, #6
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
    return;
 800579e:	e0d8      	b.n	8005952 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_SPI_IRQHandler+0x66>
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	09db      	lsrs	r3, r3, #7
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4798      	blx	r3
    return;
 80057c0:	e0c7      	b.n	8005952 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10c      	bne.n	80057e8 <HAL_SPI_IRQHandler+0x8c>
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	099b      	lsrs	r3, r3, #6
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	0a1b      	lsrs	r3, r3, #8
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80b5 	beq.w	8005952 <HAL_SPI_IRQHandler+0x1f6>
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80ae 	beq.w	8005952 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	099b      	lsrs	r3, r3, #6
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d023      	beq.n	800584a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b03      	cmp	r3, #3
 800580c:	d011      	beq.n	8005832 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	f043 0204 	orr.w	r2, r3, #4
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	e00b      	b.n	800584a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005832:	2300      	movs	r3, #0
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	693b      	ldr	r3, [r7, #16]
        return;
 8005848:	e083      	b.n	8005952 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d014      	beq.n	8005880 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	f043 0201 	orr.w	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	0a1b      	lsrs	r3, r3, #8
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00c      	beq.n	80058a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005890:	f043 0208 	orr.w	r2, r3, #8
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005898:	2300      	movs	r3, #0
 800589a:	60bb      	str	r3, [r7, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	60bb      	str	r3, [r7, #8]
 80058a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d050      	beq.n	8005950 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_SPI_IRQHandler+0x17e>
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d034      	beq.n	8005944 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0203 	bic.w	r2, r2, #3
 80058e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d011      	beq.n	8005916 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f6:	4a18      	ldr	r2, [pc, #96]	; (8005958 <HAL_SPI_IRQHandler+0x1fc>)
 80058f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe fa34 	bl	8003d6c <HAL_DMA_Abort_IT>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005922:	4a0d      	ldr	r2, [pc, #52]	; (8005958 <HAL_SPI_IRQHandler+0x1fc>)
 8005924:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe fa1e 	bl	8003d6c <HAL_DMA_Abort_IT>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005942:	e003      	b.n	800594c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f809 	bl	800595c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800594a:	e000      	b.n	800594e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800594c:	bf00      	nop
    return;
 800594e:	bf00      	nop
 8005950:	bf00      	nop
  }
}
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	08005971 	.word	0x08005971

0800595c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff ffe6 	bl	800595c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4613      	mov	r3, r2
 80059a6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059a8:	e04c      	b.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059b0:	d048      	beq.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80059b2:	f7fd ff25 	bl	8003800 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d902      	bls.n	80059c8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d13d      	bne.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059e0:	d111      	bne.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ea:	d004      	beq.n	80059f6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f4:	d107      	bne.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a0e:	d10f      	bne.n	8005a30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e00f      	b.n	8005a64 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	bf0c      	ite	eq
 8005a54:	2301      	moveq	r3, #1
 8005a56:	2300      	movne	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d1a3      	bne.n	80059aa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a78:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <SPI_EndRxTxTransaction+0x7c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <SPI_EndRxTxTransaction+0x80>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	0d5b      	lsrs	r3, r3, #21
 8005a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a88:	fb02 f303 	mul.w	r3, r2, r3
 8005a8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a96:	d112      	bne.n	8005abe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2180      	movs	r1, #128	; 0x80
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7ff ff78 	bl	8005998 <SPI_WaitFlagStateUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d016      	beq.n	8005adc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e00f      	b.n	8005ade <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad4:	2b80      	cmp	r3, #128	; 0x80
 8005ad6:	d0f2      	beq.n	8005abe <SPI_EndRxTxTransaction+0x52>
 8005ad8:	e000      	b.n	8005adc <SPI_EndRxTxTransaction+0x70>
        break;
 8005ada:	bf00      	nop
  }

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000408 	.word	0x20000408
 8005aec:	165e9f81 	.word	0x165e9f81

08005af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e01d      	b.n	8005b3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fc fd84 	bl	8002624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f000 f988 	bl	8005e44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b085      	sub	sp, #20
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0201 	orr.w	r2, r2, #1
 8005b5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b06      	cmp	r3, #6
 8005b6e:	d007      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0201 	bic.w	r2, r2, #1
 8005ba4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10f      	bne.n	8005bd6 <HAL_TIM_Base_Stop_IT+0x48>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a1a      	ldr	r2, [r3, #32]
 8005bbc:	f240 4344 	movw	r3, #1092	; 0x444
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d107      	bne.n	8005bd6 <HAL_TIM_Base_Stop_IT+0x48>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0201 	bic.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d122      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d11b      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0202 	mvn.w	r2, #2
 8005c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8ee 	bl	8005e08 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f8e0 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f8f1 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d122      	bne.n	8005c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d11b      	bne.n	8005c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0204 	mvn.w	r2, #4
 8005c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f8c4 	bl	8005e08 <HAL_TIM_IC_CaptureCallback>
 8005c80:	e005      	b.n	8005c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f8b6 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f8c7 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d122      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d11b      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0208 	mvn.w	r2, #8
 8005cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f89a 	bl	8005e08 <HAL_TIM_IC_CaptureCallback>
 8005cd4:	e005      	b.n	8005ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f88c 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f89d 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b10      	cmp	r3, #16
 8005cf4:	d122      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d11b      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0210 	mvn.w	r2, #16
 8005d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2208      	movs	r2, #8
 8005d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f870 	bl	8005e08 <HAL_TIM_IC_CaptureCallback>
 8005d28:	e005      	b.n	8005d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f862 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f873 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d10e      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d107      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0201 	mvn.w	r2, #1
 8005d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fc f9ac 	bl	80020c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d72:	2b80      	cmp	r3, #128	; 0x80
 8005d74:	d10e      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d80:	2b80      	cmp	r3, #128	; 0x80
 8005d82:	d107      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f97e 	bl	8006090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d10e      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d107      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f838 	bl	8005e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d10e      	bne.n	8005dec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d107      	bne.n	8005dec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0220 	mvn.w	r2, #32
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f948 	bl	800607c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a40      	ldr	r2, [pc, #256]	; (8005f58 <TIM_Base_SetConfig+0x114>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d013      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d00f      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a3d      	ldr	r2, [pc, #244]	; (8005f5c <TIM_Base_SetConfig+0x118>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00b      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a3c      	ldr	r2, [pc, #240]	; (8005f60 <TIM_Base_SetConfig+0x11c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d007      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a3b      	ldr	r2, [pc, #236]	; (8005f64 <TIM_Base_SetConfig+0x120>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a3a      	ldr	r2, [pc, #232]	; (8005f68 <TIM_Base_SetConfig+0x124>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d108      	bne.n	8005e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2f      	ldr	r2, [pc, #188]	; (8005f58 <TIM_Base_SetConfig+0x114>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d02b      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea4:	d027      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a2c      	ldr	r2, [pc, #176]	; (8005f5c <TIM_Base_SetConfig+0x118>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d023      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a2b      	ldr	r2, [pc, #172]	; (8005f60 <TIM_Base_SetConfig+0x11c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01f      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a2a      	ldr	r2, [pc, #168]	; (8005f64 <TIM_Base_SetConfig+0x120>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01b      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a29      	ldr	r2, [pc, #164]	; (8005f68 <TIM_Base_SetConfig+0x124>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d017      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a28      	ldr	r2, [pc, #160]	; (8005f6c <TIM_Base_SetConfig+0x128>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a27      	ldr	r2, [pc, #156]	; (8005f70 <TIM_Base_SetConfig+0x12c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00f      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a26      	ldr	r2, [pc, #152]	; (8005f74 <TIM_Base_SetConfig+0x130>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00b      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a25      	ldr	r2, [pc, #148]	; (8005f78 <TIM_Base_SetConfig+0x134>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d007      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a24      	ldr	r2, [pc, #144]	; (8005f7c <TIM_Base_SetConfig+0x138>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d003      	beq.n	8005ef6 <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a23      	ldr	r2, [pc, #140]	; (8005f80 <TIM_Base_SetConfig+0x13c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d108      	bne.n	8005f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a0a      	ldr	r2, [pc, #40]	; (8005f58 <TIM_Base_SetConfig+0x114>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_Base_SetConfig+0xf8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a0c      	ldr	r2, [pc, #48]	; (8005f68 <TIM_Base_SetConfig+0x124>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d103      	bne.n	8005f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	615a      	str	r2, [r3, #20]
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	40010400 	.word	0x40010400
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800
 8005f78:	40001800 	.word	0x40001800
 8005f7c:	40001c00 	.word	0x40001c00
 8005f80:	40002000 	.word	0x40002000

08005f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e05a      	b.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a21      	ldr	r2, [pc, #132]	; (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d022      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe8:	d01d      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d018      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1b      	ldr	r2, [pc, #108]	; (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d013      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1a      	ldr	r2, [pc, #104]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00e      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a18      	ldr	r2, [pc, #96]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d009      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a17      	ldr	r2, [pc, #92]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d004      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a15      	ldr	r2, [pc, #84]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d10c      	bne.n	8006040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800602c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	4313      	orrs	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40010000 	.word	0x40010000
 8006064:	40000400 	.word	0x40000400
 8006068:	40000800 	.word	0x40000800
 800606c:	40000c00 	.word	0x40000c00
 8006070:	40010400 	.word	0x40010400
 8006074:	40014000 	.word	0x40014000
 8006078:	40001800 	.word	0x40001800

0800607c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e03f      	b.n	8006136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fc fb0e 	bl	80026ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fc03 	bl	80068f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800610c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800611c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b20      	cmp	r3, #32
 8006158:	d166      	bne.n	8006228 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <HAL_UART_Receive_DMA+0x26>
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e05f      	b.n	800622a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_UART_Receive_DMA+0x38>
 8006174:	2302      	movs	r3, #2
 8006176:	e058      	b.n	800622a <HAL_UART_Receive_DMA+0xea>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	88fa      	ldrh	r2, [r7, #6]
 800618a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2222      	movs	r2, #34	; 0x22
 8006196:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619e:	4a25      	ldr	r2, [pc, #148]	; (8006234 <HAL_UART_Receive_DMA+0xf4>)
 80061a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a6:	4a24      	ldr	r2, [pc, #144]	; (8006238 <HAL_UART_Receive_DMA+0xf8>)
 80061a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ae:	4a23      	ldr	r2, [pc, #140]	; (800623c <HAL_UART_Receive_DMA+0xfc>)
 80061b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b6:	2200      	movs	r2, #0
 80061b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80061ba:	f107 0308 	add.w	r3, r7, #8
 80061be:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4619      	mov	r1, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	f7fd fd03 	bl	8003bdc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006202:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695a      	ldr	r2, [r3, #20]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006222:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006228:	2302      	movs	r3, #2
  }
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	0800656d 	.word	0x0800656d
 8006238:	080065d5 	.word	0x080065d5
 800623c:	080065f1 	.word	0x080065f1

08006240 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8006256:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006272:	2b80      	cmp	r3, #128	; 0x80
 8006274:	d124      	bne.n	80062c0 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006284:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	2b00      	cmp	r3, #0
 800628c:	d018      	beq.n	80062c0 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	2200      	movs	r2, #0
 8006294:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	4618      	mov	r0, r3
 800629c:	f7fd fcf6 	bl	8003c8c <HAL_DMA_Abort>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00c      	beq.n	80062c0 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fd ff0a 	bl	80040c4 <HAL_DMA_GetError>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d104      	bne.n	80062c0 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2210      	movs	r2, #16
 80062ba:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e03d      	b.n	800633c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	d124      	bne.n	8006318 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062dc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d018      	beq.n	8006318 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ea:	2200      	movs	r2, #0
 80062ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fd fcca 	bl	8003c8c <HAL_DMA_Abort>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00c      	beq.n	8006318 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	4618      	mov	r0, r3
 8006304:	f7fd fede 	bl	80040c4 <HAL_DMA_GetError>
 8006308:	4603      	mov	r3, r0
 800630a:	2b20      	cmp	r3, #32
 800630c:	d104      	bne.n	8006318 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2210      	movs	r2, #16
 8006312:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e011      	b.n	800633c <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10d      	bne.n	8006396 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_UART_IRQHandler+0x52>
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa2e 	bl	80067f0 <UART_Receive_IT>
      return;
 8006394:	e0d1      	b.n	800653a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80b0 	beq.w	80064fe <HAL_UART_IRQHandler+0x1ba>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d105      	bne.n	80063b4 <HAL_UART_IRQHandler+0x70>
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 80a5 	beq.w	80064fe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <HAL_UART_IRQHandler+0x90>
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063cc:	f043 0201 	orr.w	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_UART_IRQHandler+0xb0>
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ec:	f043 0202 	orr.w	r2, r3, #2
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <HAL_UART_IRQHandler+0xd0>
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640c:	f043 0204 	orr.w	r2, r3, #4
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00f      	beq.n	800643e <HAL_UART_IRQHandler+0xfa>
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d104      	bne.n	8006432 <HAL_UART_IRQHandler+0xee>
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d005      	beq.n	800643e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	f043 0208 	orr.w	r2, r3, #8
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d078      	beq.n	8006538 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <HAL_UART_IRQHandler+0x11c>
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9c8 	bl	80067f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	bf0c      	ite	eq
 800646e:	2301      	moveq	r3, #1
 8006470:	2300      	movne	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d102      	bne.n	8006488 <HAL_UART_IRQHandler+0x144>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d031      	beq.n	80064ec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f911 	bl	80066b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d123      	bne.n	80064e4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064aa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d013      	beq.n	80064dc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b8:	4a21      	ldr	r2, [pc, #132]	; (8006540 <HAL_UART_IRQHandler+0x1fc>)
 80064ba:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fd fc53 	bl	8003d6c <HAL_DMA_Abort_IT>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d016      	beq.n	80064fa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064d6:	4610      	mov	r0, r2
 80064d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064da:	e00e      	b.n	80064fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f83b 	bl	8006558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e2:	e00a      	b.n	80064fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f837 	bl	8006558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ea:	e006      	b.n	80064fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f833 	bl	8006558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80064f8:	e01e      	b.n	8006538 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fa:	bf00      	nop
    return;
 80064fc:	e01c      	b.n	8006538 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006504:	2b00      	cmp	r3, #0
 8006506:	d008      	beq.n	800651a <HAL_UART_IRQHandler+0x1d6>
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f8fe 	bl	8006714 <UART_Transmit_IT>
    return;
 8006518:	e00f      	b.n	800653a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <HAL_UART_IRQHandler+0x1f6>
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f946 	bl	80067c0 <UART_EndTransmit_IT>
    return;
 8006534:	bf00      	nop
 8006536:	e000      	b.n	800653a <HAL_UART_IRQHandler+0x1f6>
    return;
 8006538:	bf00      	nop
  }
}
 800653a:	3720      	adds	r7, #32
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	080066ed 	.word	0x080066ed

08006544 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d11e      	bne.n	80065c6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800659c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695a      	ldr	r2, [r3, #20]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0201 	bic.w	r2, r2, #1
 80065ac:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695a      	ldr	r2, [r3, #20]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065bc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7fb fbd6 	bl	8001d78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f7ff ffae 	bl	8006544 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660c:	2b80      	cmp	r3, #128	; 0x80
 800660e:	bf0c      	ite	eq
 8006610:	2301      	moveq	r3, #1
 8006612:	2300      	movne	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b21      	cmp	r3, #33	; 0x21
 8006622:	d108      	bne.n	8006636 <UART_DMAError+0x46>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d005      	beq.n	8006636 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2200      	movs	r2, #0
 800662e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006630:	68b8      	ldr	r0, [r7, #8]
 8006632:	f000 f827 	bl	8006684 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	bf0c      	ite	eq
 8006644:	2301      	moveq	r3, #1
 8006646:	2300      	movne	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b22      	cmp	r3, #34	; 0x22
 8006656:	d108      	bne.n	800666a <UART_DMAError+0x7a>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2200      	movs	r2, #0
 8006662:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006664:	68b8      	ldr	r0, [r7, #8]
 8006666:	f000 f823 	bl	80066b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666e:	f043 0210 	orr.w	r2, r3, #16
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006676:	68b8      	ldr	r0, [r7, #8]
 8006678:	f7ff ff6e 	bl	8006558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800669a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0201 	bic.w	r2, r2, #1
 80066d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7ff ff26 	bl	8006558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800670c:	bf00      	nop
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b21      	cmp	r3, #33	; 0x21
 8006726:	d144      	bne.n	80067b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006730:	d11a      	bne.n	8006768 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006746:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d105      	bne.n	800675c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	1c9a      	adds	r2, r3, #2
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	621a      	str	r2, [r3, #32]
 800675a:	e00e      	b.n	800677a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	621a      	str	r2, [r3, #32]
 8006766:	e008      	b.n	800677a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	1c59      	adds	r1, r3, #1
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6211      	str	r1, [r2, #32]
 8006772:	781a      	ldrb	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800677e:	b29b      	uxth	r3, r3
 8006780:	3b01      	subs	r3, #1
 8006782:	b29b      	uxth	r3, r3
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	4619      	mov	r1, r3
 8006788:	84d1      	strh	r1, [r2, #38]	; 0x26
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10f      	bne.n	80067ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800679c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e000      	b.n	80067b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80067b2:	2302      	movs	r3, #2
  }
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fb fc63 	bl	80020ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b22      	cmp	r3, #34	; 0x22
 8006802:	d171      	bne.n	80068e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680c:	d123      	bne.n	8006856 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006812:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10e      	bne.n	800683a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006832:	1c9a      	adds	r2, r3, #2
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	629a      	str	r2, [r3, #40]	; 0x28
 8006838:	e029      	b.n	800688e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	b29b      	uxth	r3, r3
 8006842:	b2db      	uxtb	r3, r3
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	629a      	str	r2, [r3, #40]	; 0x28
 8006854:	e01b      	b.n	800688e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6858      	ldr	r0, [r3, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	1c59      	adds	r1, r3, #1
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6291      	str	r1, [r2, #40]	; 0x28
 800686e:	b2c2      	uxtb	r2, r0
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	e00c      	b.n	800688e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	b2da      	uxtb	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	1c58      	adds	r0, r3, #1
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	6288      	str	r0, [r1, #40]	; 0x28
 8006886:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006892:	b29b      	uxth	r3, r3
 8006894:	3b01      	subs	r3, #1
 8006896:	b29b      	uxth	r3, r3
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	4619      	mov	r1, r3
 800689c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d120      	bne.n	80068e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0220 	bic.w	r2, r2, #32
 80068b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695a      	ldr	r2, [r3, #20]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0201 	bic.w	r2, r2, #1
 80068d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fb fa4c 	bl	8001d78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	e002      	b.n	80068ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	e000      	b.n	80068ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80068e8:	2302      	movs	r3, #2
  }
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006936:	f023 030c 	bic.w	r3, r3, #12
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6812      	ldr	r2, [r2, #0]
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	430b      	orrs	r3, r1
 8006942:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006962:	f040 818b 	bne.w	8006c7c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4ac1      	ldr	r2, [pc, #772]	; (8006c70 <UART_SetConfig+0x37c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d005      	beq.n	800697c <UART_SetConfig+0x88>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4abf      	ldr	r2, [pc, #764]	; (8006c74 <UART_SetConfig+0x380>)
 8006976:	4293      	cmp	r3, r2
 8006978:	f040 80bd 	bne.w	8006af6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800697c:	f7fd ffa6 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 8006980:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	461d      	mov	r5, r3
 8006986:	f04f 0600 	mov.w	r6, #0
 800698a:	46a8      	mov	r8, r5
 800698c:	46b1      	mov	r9, r6
 800698e:	eb18 0308 	adds.w	r3, r8, r8
 8006992:	eb49 0409 	adc.w	r4, r9, r9
 8006996:	4698      	mov	r8, r3
 8006998:	46a1      	mov	r9, r4
 800699a:	eb18 0805 	adds.w	r8, r8, r5
 800699e:	eb49 0906 	adc.w	r9, r9, r6
 80069a2:	f04f 0100 	mov.w	r1, #0
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069b6:	4688      	mov	r8, r1
 80069b8:	4691      	mov	r9, r2
 80069ba:	eb18 0005 	adds.w	r0, r8, r5
 80069be:	eb49 0106 	adc.w	r1, r9, r6
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	461d      	mov	r5, r3
 80069c8:	f04f 0600 	mov.w	r6, #0
 80069cc:	196b      	adds	r3, r5, r5
 80069ce:	eb46 0406 	adc.w	r4, r6, r6
 80069d2:	461a      	mov	r2, r3
 80069d4:	4623      	mov	r3, r4
 80069d6:	f7f9 fc6b 	bl	80002b0 <__aeabi_uldivmod>
 80069da:	4603      	mov	r3, r0
 80069dc:	460c      	mov	r4, r1
 80069de:	461a      	mov	r2, r3
 80069e0:	4ba5      	ldr	r3, [pc, #660]	; (8006c78 <UART_SetConfig+0x384>)
 80069e2:	fba3 2302 	umull	r2, r3, r3, r2
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	461d      	mov	r5, r3
 80069f0:	f04f 0600 	mov.w	r6, #0
 80069f4:	46a9      	mov	r9, r5
 80069f6:	46b2      	mov	sl, r6
 80069f8:	eb19 0309 	adds.w	r3, r9, r9
 80069fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006a00:	4699      	mov	r9, r3
 8006a02:	46a2      	mov	sl, r4
 8006a04:	eb19 0905 	adds.w	r9, r9, r5
 8006a08:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a0c:	f04f 0100 	mov.w	r1, #0
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a20:	4689      	mov	r9, r1
 8006a22:	4692      	mov	sl, r2
 8006a24:	eb19 0005 	adds.w	r0, r9, r5
 8006a28:	eb4a 0106 	adc.w	r1, sl, r6
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	461d      	mov	r5, r3
 8006a32:	f04f 0600 	mov.w	r6, #0
 8006a36:	196b      	adds	r3, r5, r5
 8006a38:	eb46 0406 	adc.w	r4, r6, r6
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4623      	mov	r3, r4
 8006a40:	f7f9 fc36 	bl	80002b0 <__aeabi_uldivmod>
 8006a44:	4603      	mov	r3, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4b8b      	ldr	r3, [pc, #556]	; (8006c78 <UART_SetConfig+0x384>)
 8006a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	2164      	movs	r1, #100	; 0x64
 8006a54:	fb01 f303 	mul.w	r3, r1, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	3332      	adds	r3, #50	; 0x32
 8006a5e:	4a86      	ldr	r2, [pc, #536]	; (8006c78 <UART_SetConfig+0x384>)
 8006a60:	fba2 2303 	umull	r2, r3, r2, r3
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a6c:	4498      	add	r8, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	461d      	mov	r5, r3
 8006a72:	f04f 0600 	mov.w	r6, #0
 8006a76:	46a9      	mov	r9, r5
 8006a78:	46b2      	mov	sl, r6
 8006a7a:	eb19 0309 	adds.w	r3, r9, r9
 8006a7e:	eb4a 040a 	adc.w	r4, sl, sl
 8006a82:	4699      	mov	r9, r3
 8006a84:	46a2      	mov	sl, r4
 8006a86:	eb19 0905 	adds.w	r9, r9, r5
 8006a8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a8e:	f04f 0100 	mov.w	r1, #0
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006aa2:	4689      	mov	r9, r1
 8006aa4:	4692      	mov	sl, r2
 8006aa6:	eb19 0005 	adds.w	r0, r9, r5
 8006aaa:	eb4a 0106 	adc.w	r1, sl, r6
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	461d      	mov	r5, r3
 8006ab4:	f04f 0600 	mov.w	r6, #0
 8006ab8:	196b      	adds	r3, r5, r5
 8006aba:	eb46 0406 	adc.w	r4, r6, r6
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4623      	mov	r3, r4
 8006ac2:	f7f9 fbf5 	bl	80002b0 <__aeabi_uldivmod>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	460c      	mov	r4, r1
 8006aca:	461a      	mov	r2, r3
 8006acc:	4b6a      	ldr	r3, [pc, #424]	; (8006c78 <UART_SetConfig+0x384>)
 8006ace:	fba3 1302 	umull	r1, r3, r3, r2
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	2164      	movs	r1, #100	; 0x64
 8006ad6:	fb01 f303 	mul.w	r3, r1, r3
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	3332      	adds	r3, #50	; 0x32
 8006ae0:	4a65      	ldr	r2, [pc, #404]	; (8006c78 <UART_SetConfig+0x384>)
 8006ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	f003 0207 	and.w	r2, r3, #7
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4442      	add	r2, r8
 8006af2:	609a      	str	r2, [r3, #8]
 8006af4:	e26f      	b.n	8006fd6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006af6:	f7fd fed5 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 8006afa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	461d      	mov	r5, r3
 8006b00:	f04f 0600 	mov.w	r6, #0
 8006b04:	46a8      	mov	r8, r5
 8006b06:	46b1      	mov	r9, r6
 8006b08:	eb18 0308 	adds.w	r3, r8, r8
 8006b0c:	eb49 0409 	adc.w	r4, r9, r9
 8006b10:	4698      	mov	r8, r3
 8006b12:	46a1      	mov	r9, r4
 8006b14:	eb18 0805 	adds.w	r8, r8, r5
 8006b18:	eb49 0906 	adc.w	r9, r9, r6
 8006b1c:	f04f 0100 	mov.w	r1, #0
 8006b20:	f04f 0200 	mov.w	r2, #0
 8006b24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b30:	4688      	mov	r8, r1
 8006b32:	4691      	mov	r9, r2
 8006b34:	eb18 0005 	adds.w	r0, r8, r5
 8006b38:	eb49 0106 	adc.w	r1, r9, r6
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	461d      	mov	r5, r3
 8006b42:	f04f 0600 	mov.w	r6, #0
 8006b46:	196b      	adds	r3, r5, r5
 8006b48:	eb46 0406 	adc.w	r4, r6, r6
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	4623      	mov	r3, r4
 8006b50:	f7f9 fbae 	bl	80002b0 <__aeabi_uldivmod>
 8006b54:	4603      	mov	r3, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4b47      	ldr	r3, [pc, #284]	; (8006c78 <UART_SetConfig+0x384>)
 8006b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8006b60:	095b      	lsrs	r3, r3, #5
 8006b62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	461d      	mov	r5, r3
 8006b6a:	f04f 0600 	mov.w	r6, #0
 8006b6e:	46a9      	mov	r9, r5
 8006b70:	46b2      	mov	sl, r6
 8006b72:	eb19 0309 	adds.w	r3, r9, r9
 8006b76:	eb4a 040a 	adc.w	r4, sl, sl
 8006b7a:	4699      	mov	r9, r3
 8006b7c:	46a2      	mov	sl, r4
 8006b7e:	eb19 0905 	adds.w	r9, r9, r5
 8006b82:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b86:	f04f 0100 	mov.w	r1, #0
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b9a:	4689      	mov	r9, r1
 8006b9c:	4692      	mov	sl, r2
 8006b9e:	eb19 0005 	adds.w	r0, r9, r5
 8006ba2:	eb4a 0106 	adc.w	r1, sl, r6
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	461d      	mov	r5, r3
 8006bac:	f04f 0600 	mov.w	r6, #0
 8006bb0:	196b      	adds	r3, r5, r5
 8006bb2:	eb46 0406 	adc.w	r4, r6, r6
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4623      	mov	r3, r4
 8006bba:	f7f9 fb79 	bl	80002b0 <__aeabi_uldivmod>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4b2c      	ldr	r3, [pc, #176]	; (8006c78 <UART_SetConfig+0x384>)
 8006bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	2164      	movs	r1, #100	; 0x64
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	3332      	adds	r3, #50	; 0x32
 8006bd8:	4a27      	ldr	r2, [pc, #156]	; (8006c78 <UART_SetConfig+0x384>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006be6:	4498      	add	r8, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	461d      	mov	r5, r3
 8006bec:	f04f 0600 	mov.w	r6, #0
 8006bf0:	46a9      	mov	r9, r5
 8006bf2:	46b2      	mov	sl, r6
 8006bf4:	eb19 0309 	adds.w	r3, r9, r9
 8006bf8:	eb4a 040a 	adc.w	r4, sl, sl
 8006bfc:	4699      	mov	r9, r3
 8006bfe:	46a2      	mov	sl, r4
 8006c00:	eb19 0905 	adds.w	r9, r9, r5
 8006c04:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c08:	f04f 0100 	mov.w	r1, #0
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c1c:	4689      	mov	r9, r1
 8006c1e:	4692      	mov	sl, r2
 8006c20:	eb19 0005 	adds.w	r0, r9, r5
 8006c24:	eb4a 0106 	adc.w	r1, sl, r6
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	461d      	mov	r5, r3
 8006c2e:	f04f 0600 	mov.w	r6, #0
 8006c32:	196b      	adds	r3, r5, r5
 8006c34:	eb46 0406 	adc.w	r4, r6, r6
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	f7f9 fb38 	bl	80002b0 <__aeabi_uldivmod>
 8006c40:	4603      	mov	r3, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	461a      	mov	r2, r3
 8006c46:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <UART_SetConfig+0x384>)
 8006c48:	fba3 1302 	umull	r1, r3, r3, r2
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	2164      	movs	r1, #100	; 0x64
 8006c50:	fb01 f303 	mul.w	r3, r1, r3
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	3332      	adds	r3, #50	; 0x32
 8006c5a:	4a07      	ldr	r2, [pc, #28]	; (8006c78 <UART_SetConfig+0x384>)
 8006c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	f003 0207 	and.w	r2, r3, #7
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4442      	add	r2, r8
 8006c6c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006c6e:	e1b2      	b.n	8006fd6 <UART_SetConfig+0x6e2>
 8006c70:	40011000 	.word	0x40011000
 8006c74:	40011400 	.word	0x40011400
 8006c78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4ad7      	ldr	r2, [pc, #860]	; (8006fe0 <UART_SetConfig+0x6ec>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d005      	beq.n	8006c92 <UART_SetConfig+0x39e>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4ad6      	ldr	r2, [pc, #856]	; (8006fe4 <UART_SetConfig+0x6f0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	f040 80d1 	bne.w	8006e34 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c92:	f7fd fe1b 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 8006c96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	469a      	mov	sl, r3
 8006c9c:	f04f 0b00 	mov.w	fp, #0
 8006ca0:	46d0      	mov	r8, sl
 8006ca2:	46d9      	mov	r9, fp
 8006ca4:	eb18 0308 	adds.w	r3, r8, r8
 8006ca8:	eb49 0409 	adc.w	r4, r9, r9
 8006cac:	4698      	mov	r8, r3
 8006cae:	46a1      	mov	r9, r4
 8006cb0:	eb18 080a 	adds.w	r8, r8, sl
 8006cb4:	eb49 090b 	adc.w	r9, r9, fp
 8006cb8:	f04f 0100 	mov.w	r1, #0
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ccc:	4688      	mov	r8, r1
 8006cce:	4691      	mov	r9, r2
 8006cd0:	eb1a 0508 	adds.w	r5, sl, r8
 8006cd4:	eb4b 0609 	adc.w	r6, fp, r9
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	f04f 0400 	mov.w	r4, #0
 8006cea:	0094      	lsls	r4, r2, #2
 8006cec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cf0:	008b      	lsls	r3, r1, #2
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4623      	mov	r3, r4
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	f7f9 fad9 	bl	80002b0 <__aeabi_uldivmod>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	461a      	mov	r2, r3
 8006d04:	4bb8      	ldr	r3, [pc, #736]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006d06:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	469b      	mov	fp, r3
 8006d14:	f04f 0c00 	mov.w	ip, #0
 8006d18:	46d9      	mov	r9, fp
 8006d1a:	46e2      	mov	sl, ip
 8006d1c:	eb19 0309 	adds.w	r3, r9, r9
 8006d20:	eb4a 040a 	adc.w	r4, sl, sl
 8006d24:	4699      	mov	r9, r3
 8006d26:	46a2      	mov	sl, r4
 8006d28:	eb19 090b 	adds.w	r9, r9, fp
 8006d2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d30:	f04f 0100 	mov.w	r1, #0
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d44:	4689      	mov	r9, r1
 8006d46:	4692      	mov	sl, r2
 8006d48:	eb1b 0509 	adds.w	r5, fp, r9
 8006d4c:	eb4c 060a 	adc.w	r6, ip, sl
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4619      	mov	r1, r3
 8006d56:	f04f 0200 	mov.w	r2, #0
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	f04f 0400 	mov.w	r4, #0
 8006d62:	0094      	lsls	r4, r2, #2
 8006d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d68:	008b      	lsls	r3, r1, #2
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	4623      	mov	r3, r4
 8006d6e:	4628      	mov	r0, r5
 8006d70:	4631      	mov	r1, r6
 8006d72:	f7f9 fa9d 	bl	80002b0 <__aeabi_uldivmod>
 8006d76:	4603      	mov	r3, r0
 8006d78:	460c      	mov	r4, r1
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4b9a      	ldr	r3, [pc, #616]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	2164      	movs	r1, #100	; 0x64
 8006d86:	fb01 f303 	mul.w	r3, r1, r3
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	3332      	adds	r3, #50	; 0x32
 8006d90:	4a95      	ldr	r2, [pc, #596]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d9c:	4498      	add	r8, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	469b      	mov	fp, r3
 8006da2:	f04f 0c00 	mov.w	ip, #0
 8006da6:	46d9      	mov	r9, fp
 8006da8:	46e2      	mov	sl, ip
 8006daa:	eb19 0309 	adds.w	r3, r9, r9
 8006dae:	eb4a 040a 	adc.w	r4, sl, sl
 8006db2:	4699      	mov	r9, r3
 8006db4:	46a2      	mov	sl, r4
 8006db6:	eb19 090b 	adds.w	r9, r9, fp
 8006dba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006dbe:	f04f 0100 	mov.w	r1, #0
 8006dc2:	f04f 0200 	mov.w	r2, #0
 8006dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dd2:	4689      	mov	r9, r1
 8006dd4:	4692      	mov	sl, r2
 8006dd6:	eb1b 0509 	adds.w	r5, fp, r9
 8006dda:	eb4c 060a 	adc.w	r6, ip, sl
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	4619      	mov	r1, r3
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	f04f 0400 	mov.w	r4, #0
 8006df0:	0094      	lsls	r4, r2, #2
 8006df2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006df6:	008b      	lsls	r3, r1, #2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	4631      	mov	r1, r6
 8006e00:	f7f9 fa56 	bl	80002b0 <__aeabi_uldivmod>
 8006e04:	4603      	mov	r3, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4b77      	ldr	r3, [pc, #476]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	2164      	movs	r1, #100	; 0x64
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	3332      	adds	r3, #50	; 0x32
 8006e1e:	4a72      	ldr	r2, [pc, #456]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	f003 020f 	and.w	r2, r3, #15
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4442      	add	r2, r8
 8006e30:	609a      	str	r2, [r3, #8]
 8006e32:	e0d0      	b.n	8006fd6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e34:	f7fd fd36 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 8006e38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	469a      	mov	sl, r3
 8006e3e:	f04f 0b00 	mov.w	fp, #0
 8006e42:	46d0      	mov	r8, sl
 8006e44:	46d9      	mov	r9, fp
 8006e46:	eb18 0308 	adds.w	r3, r8, r8
 8006e4a:	eb49 0409 	adc.w	r4, r9, r9
 8006e4e:	4698      	mov	r8, r3
 8006e50:	46a1      	mov	r9, r4
 8006e52:	eb18 080a 	adds.w	r8, r8, sl
 8006e56:	eb49 090b 	adc.w	r9, r9, fp
 8006e5a:	f04f 0100 	mov.w	r1, #0
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e6e:	4688      	mov	r8, r1
 8006e70:	4691      	mov	r9, r2
 8006e72:	eb1a 0508 	adds.w	r5, sl, r8
 8006e76:	eb4b 0609 	adc.w	r6, fp, r9
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	f04f 0400 	mov.w	r4, #0
 8006e8c:	0094      	lsls	r4, r2, #2
 8006e8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e92:	008b      	lsls	r3, r1, #2
 8006e94:	461a      	mov	r2, r3
 8006e96:	4623      	mov	r3, r4
 8006e98:	4628      	mov	r0, r5
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	f7f9 fa08 	bl	80002b0 <__aeabi_uldivmod>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4b50      	ldr	r3, [pc, #320]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	469b      	mov	fp, r3
 8006eb6:	f04f 0c00 	mov.w	ip, #0
 8006eba:	46d9      	mov	r9, fp
 8006ebc:	46e2      	mov	sl, ip
 8006ebe:	eb19 0309 	adds.w	r3, r9, r9
 8006ec2:	eb4a 040a 	adc.w	r4, sl, sl
 8006ec6:	4699      	mov	r9, r3
 8006ec8:	46a2      	mov	sl, r4
 8006eca:	eb19 090b 	adds.w	r9, r9, fp
 8006ece:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ed2:	f04f 0100 	mov.w	r1, #0
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ede:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ee2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ee6:	4689      	mov	r9, r1
 8006ee8:	4692      	mov	sl, r2
 8006eea:	eb1b 0509 	adds.w	r5, fp, r9
 8006eee:	eb4c 060a 	adc.w	r6, ip, sl
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	f04f 0400 	mov.w	r4, #0
 8006f04:	0094      	lsls	r4, r2, #2
 8006f06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f0a:	008b      	lsls	r3, r1, #2
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	4623      	mov	r3, r4
 8006f10:	4628      	mov	r0, r5
 8006f12:	4631      	mov	r1, r6
 8006f14:	f7f9 f9cc 	bl	80002b0 <__aeabi_uldivmod>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	4b32      	ldr	r3, [pc, #200]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006f20:	fba3 1302 	umull	r1, r3, r3, r2
 8006f24:	095b      	lsrs	r3, r3, #5
 8006f26:	2164      	movs	r1, #100	; 0x64
 8006f28:	fb01 f303 	mul.w	r3, r1, r3
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	3332      	adds	r3, #50	; 0x32
 8006f32:	4a2d      	ldr	r2, [pc, #180]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006f34:	fba2 2303 	umull	r2, r3, r2, r3
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f3e:	4498      	add	r8, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	469b      	mov	fp, r3
 8006f44:	f04f 0c00 	mov.w	ip, #0
 8006f48:	46d9      	mov	r9, fp
 8006f4a:	46e2      	mov	sl, ip
 8006f4c:	eb19 0309 	adds.w	r3, r9, r9
 8006f50:	eb4a 040a 	adc.w	r4, sl, sl
 8006f54:	4699      	mov	r9, r3
 8006f56:	46a2      	mov	sl, r4
 8006f58:	eb19 090b 	adds.w	r9, r9, fp
 8006f5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f60:	f04f 0100 	mov.w	r1, #0
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f74:	4689      	mov	r9, r1
 8006f76:	4692      	mov	sl, r2
 8006f78:	eb1b 0509 	adds.w	r5, fp, r9
 8006f7c:	eb4c 060a 	adc.w	r6, ip, sl
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	4619      	mov	r1, r3
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	f04f 0400 	mov.w	r4, #0
 8006f92:	0094      	lsls	r4, r2, #2
 8006f94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f98:	008b      	lsls	r3, r1, #2
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	4623      	mov	r3, r4
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	f7f9 f985 	bl	80002b0 <__aeabi_uldivmod>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	461a      	mov	r2, r3
 8006fac:	4b0e      	ldr	r3, [pc, #56]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006fae:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	2164      	movs	r1, #100	; 0x64
 8006fb6:	fb01 f303 	mul.w	r3, r1, r3
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	3332      	adds	r3, #50	; 0x32
 8006fc0:	4a09      	ldr	r2, [pc, #36]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	f003 020f 	and.w	r2, r3, #15
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4442      	add	r2, r8
 8006fd2:	609a      	str	r2, [r3, #8]
}
 8006fd4:	e7ff      	b.n	8006fd6 <UART_SetConfig+0x6e2>
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe0:	40011000 	.word	0x40011000
 8006fe4:	40011400 	.word	0x40011400
 8006fe8:	51eb851f 	.word	0x51eb851f

08006fec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006ff0:	4904      	ldr	r1, [pc, #16]	; (8007004 <MX_FATFS_Init+0x18>)
 8006ff2:	4805      	ldr	r0, [pc, #20]	; (8007008 <MX_FATFS_Init+0x1c>)
 8006ff4:	f002 fa36 	bl	8009464 <FATFS_LinkDriver>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4b03      	ldr	r3, [pc, #12]	; (800700c <MX_FATFS_Init+0x20>)
 8006ffe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007000:	bf00      	nop
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20007520 	.word	0x20007520
 8007008:	20000418 	.word	0x20000418
 800700c:	20007524 	.word	0x20007524

08007010 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007014:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007016:	4618      	mov	r0, r3
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	4618      	mov	r0, r3
 800702e:	f7fc f80f 	bl	8003050 <USER_SPI_initialize>
 8007032:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	4618      	mov	r0, r3
 800704a:	f7fc f8e1 	bl	8003210 <USER_SPI_status>
 800704e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8007068:	7bf8      	ldrb	r0, [r7, #15]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	f7fc f8e4 	bl	800323c <USER_SPI_read>
 8007074:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800707e:	b590      	push	{r4, r7, lr}
 8007080:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8007084:	af00      	add	r7, sp, #0
 8007086:	4604      	mov	r4, r0
 8007088:	f107 0008 	add.w	r0, r7, #8
 800708c:	6001      	str	r1, [r0, #0]
 800708e:	1d39      	adds	r1, r7, #4
 8007090:	600a      	str	r2, [r1, #0]
 8007092:	463a      	mov	r2, r7
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	f107 030f 	add.w	r3, r7, #15
 800709a:	4622      	mov	r2, r4
 800709c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t mass[512];
	for(uint16_t i=0;i<512;i++)
 800709e:	2300      	movs	r3, #0
 80070a0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80070a4:	e010      	b.n	80070c8 <USER_write+0x4a>
	{
		mass[i]=buff[i];
 80070a6:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80070aa:	f107 0208 	add.w	r2, r7, #8
 80070ae:	6812      	ldr	r2, [r2, #0]
 80070b0:	441a      	add	r2, r3
 80070b2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80070b6:	7811      	ldrb	r1, [r2, #0]
 80070b8:	f107 0214 	add.w	r2, r7, #20
 80070bc:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0;i<512;i++)
 80070be:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80070c2:	3301      	adds	r3, #1
 80070c4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80070c8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80070cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070d0:	d3e9      	bcc.n	80070a6 <USER_write+0x28>
	}

    return USER_SPI_write(pdrv, buff, sector, count);
 80070d2:	463b      	mov	r3, r7
 80070d4:	1d3a      	adds	r2, r7, #4
 80070d6:	f107 0108 	add.w	r1, r7, #8
 80070da:	f107 000f 	add.w	r0, r7, #15
 80070de:	7800      	ldrb	r0, [r0, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6812      	ldr	r2, [r2, #0]
 80070e4:	6809      	ldr	r1, [r1, #0]
 80070e6:	f7fc f90f 	bl	8003308 <USER_SPI_write>
 80070ea:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd90      	pop	{r4, r7, pc}

080070f6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	4603      	mov	r3, r0
 80070fe:	603a      	str	r2, [r7, #0]
 8007100:	71fb      	strb	r3, [r7, #7]
 8007102:	460b      	mov	r3, r1
 8007104:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8007106:	79b9      	ldrb	r1, [r7, #6]
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f7fc f977 	bl	8003400 <USER_SPI_ioctl>
 8007112:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007114:	4618      	mov	r0, r3
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007126:	79fb      	ldrb	r3, [r7, #7]
 8007128:	4a08      	ldr	r2, [pc, #32]	; (800714c <disk_status+0x30>)
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	79fa      	ldrb	r2, [r7, #7]
 8007134:	4905      	ldr	r1, [pc, #20]	; (800714c <disk_status+0x30>)
 8007136:	440a      	add	r2, r1
 8007138:	7a12      	ldrb	r2, [r2, #8]
 800713a:	4610      	mov	r0, r2
 800713c:	4798      	blx	r3
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20000544 	.word	0x20000544

08007150 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	4a0d      	ldr	r2, [pc, #52]	; (8007198 <disk_initialize+0x48>)
 8007162:	5cd3      	ldrb	r3, [r2, r3]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d111      	bne.n	800718c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	4a0b      	ldr	r2, [pc, #44]	; (8007198 <disk_initialize+0x48>)
 800716c:	2101      	movs	r1, #1
 800716e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	4a09      	ldr	r2, [pc, #36]	; (8007198 <disk_initialize+0x48>)
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	79fa      	ldrb	r2, [r7, #7]
 800717e:	4906      	ldr	r1, [pc, #24]	; (8007198 <disk_initialize+0x48>)
 8007180:	440a      	add	r2, r1
 8007182:	7a12      	ldrb	r2, [r2, #8]
 8007184:	4610      	mov	r0, r2
 8007186:	4798      	blx	r3
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000544 	.word	0x20000544

0800719c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800719c:	b590      	push	{r4, r7, lr}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	4603      	mov	r3, r0
 80071aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	4a0a      	ldr	r2, [pc, #40]	; (80071d8 <disk_read+0x3c>)
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	689c      	ldr	r4, [r3, #8]
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	4a07      	ldr	r2, [pc, #28]	; (80071d8 <disk_read+0x3c>)
 80071bc:	4413      	add	r3, r2
 80071be:	7a18      	ldrb	r0, [r3, #8]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	47a0      	blx	r4
 80071c8:	4603      	mov	r3, r0
 80071ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd90      	pop	{r4, r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000544 	.word	0x20000544

080071dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80071dc:	b590      	push	{r4, r7, lr}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	4a0a      	ldr	r2, [pc, #40]	; (8007218 <disk_write+0x3c>)
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	68dc      	ldr	r4, [r3, #12]
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	4a07      	ldr	r2, [pc, #28]	; (8007218 <disk_write+0x3c>)
 80071fc:	4413      	add	r3, r2
 80071fe:	7a18      	ldrb	r0, [r3, #8]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	68b9      	ldr	r1, [r7, #8]
 8007206:	47a0      	blx	r4
 8007208:	4603      	mov	r3, r0
 800720a:	75fb      	strb	r3, [r7, #23]
  return res;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
}
 800720e:	4618      	mov	r0, r3
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	bd90      	pop	{r4, r7, pc}
 8007216:	bf00      	nop
 8007218:	20000544 	.word	0x20000544

0800721c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	603a      	str	r2, [r7, #0]
 8007226:	71fb      	strb	r3, [r7, #7]
 8007228:	460b      	mov	r3, r1
 800722a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	4a09      	ldr	r2, [pc, #36]	; (8007254 <disk_ioctl+0x38>)
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	79fa      	ldrb	r2, [r7, #7]
 800723a:	4906      	ldr	r1, [pc, #24]	; (8007254 <disk_ioctl+0x38>)
 800723c:	440a      	add	r2, r1
 800723e:	7a10      	ldrb	r0, [r2, #8]
 8007240:	79b9      	ldrb	r1, [r7, #6]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	4798      	blx	r3
 8007246:	4603      	mov	r3, r0
 8007248:	73fb      	strb	r3, [r7, #15]
  return res;
 800724a:	7bfb      	ldrb	r3, [r7, #15]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	20000544 	.word	0x20000544

08007258 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3301      	adds	r3, #1
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007268:	89fb      	ldrh	r3, [r7, #14]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	b21a      	sxth	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	b21b      	sxth	r3, r3
 8007274:	4313      	orrs	r3, r2
 8007276:	b21b      	sxth	r3, r3
 8007278:	81fb      	strh	r3, [r7, #14]
	return rv;
 800727a:	89fb      	ldrh	r3, [r7, #14]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3303      	adds	r3, #3
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	3202      	adds	r2, #2
 80072a0:	7812      	ldrb	r2, [r2, #0]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	3201      	adds	r2, #1
 80072ae:	7812      	ldrb	r2, [r2, #0]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	021b      	lsls	r3, r3, #8
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	4313      	orrs	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
	return rv;
 80072c0:	68fb      	ldr	r3, [r7, #12]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	887a      	ldrh	r2, [r7, #2]
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	887b      	ldrh	r3, [r7, #2]
 80072e8:	0a1b      	lsrs	r3, r3, #8
 80072ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	607a      	str	r2, [r7, #4]
 80072f2:	887a      	ldrh	r2, [r7, #2]
 80072f4:	b2d2      	uxtb	r2, r2
 80072f6:	701a      	strb	r2, [r3, #0]
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	0a1b      	lsrs	r3, r3, #8
 800731e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	607a      	str	r2, [r7, #4]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	701a      	strb	r2, [r3, #0]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	0a1b      	lsrs	r3, r3, #8
 8007330:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	0a1b      	lsrs	r3, r3, #8
 8007342:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	701a      	strb	r2, [r3, #0]
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00d      	beq.n	8007392 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	1c53      	adds	r3, r2, #1
 800737a:	613b      	str	r3, [r7, #16]
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	1c59      	adds	r1, r3, #1
 8007380:	6179      	str	r1, [r7, #20]
 8007382:	7812      	ldrb	r2, [r2, #0]
 8007384:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3b01      	subs	r3, #1
 800738a:	607b      	str	r3, [r7, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1f1      	bne.n	8007376 <mem_cpy+0x1a>
	}
}
 8007392:	bf00      	nop
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800739e:	b480      	push	{r7}
 80073a0:	b087      	sub	sp, #28
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	617a      	str	r2, [r7, #20]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3b01      	subs	r3, #1
 80073be:	607b      	str	r3, [r7, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f3      	bne.n	80073ae <mem_set+0x10>
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80073d2:	b480      	push	{r7}
 80073d4:	b089      	sub	sp, #36	; 0x24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	61fa      	str	r2, [r7, #28]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	4619      	mov	r1, r3
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	61ba      	str	r2, [r7, #24]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	1acb      	subs	r3, r1, r3
 80073fe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3b01      	subs	r3, #1
 8007404:	607b      	str	r3, [r7, #4]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <mem_cmp+0x40>
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0eb      	beq.n	80073ea <mem_cmp+0x18>

	return r;
 8007412:	697b      	ldr	r3, [r7, #20]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3724      	adds	r7, #36	; 0x24
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800742a:	e002      	b.n	8007432 <chk_chr+0x12>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3301      	adds	r3, #1
 8007430:	607b      	str	r3, [r7, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <chk_chr+0x26>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	4293      	cmp	r3, r2
 8007444:	d1f2      	bne.n	800742c <chk_chr+0xc>
	return *str;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	781b      	ldrb	r3, [r3, #0]
}
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007462:	2300      	movs	r3, #0
 8007464:	60bb      	str	r3, [r7, #8]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	e029      	b.n	80074c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800746c:	4a27      	ldr	r2, [pc, #156]	; (800750c <chk_lock+0xb4>)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	4413      	add	r3, r2
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01d      	beq.n	80074b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800747a:	4a24      	ldr	r2, [pc, #144]	; (800750c <chk_lock+0xb4>)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	4413      	add	r3, r2
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d116      	bne.n	80074ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800748c:	4a1f      	ldr	r2, [pc, #124]	; (800750c <chk_lock+0xb4>)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	4413      	add	r3, r2
 8007494:	3304      	adds	r3, #4
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800749c:	429a      	cmp	r2, r3
 800749e:	d10c      	bne.n	80074ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074a0:	4a1a      	ldr	r2, [pc, #104]	; (800750c <chk_lock+0xb4>)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	4413      	add	r3, r2
 80074a8:	3308      	adds	r3, #8
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d102      	bne.n	80074ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074b4:	e007      	b.n	80074c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80074b6:	2301      	movs	r3, #1
 80074b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3301      	adds	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d9d2      	bls.n	800746c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d109      	bne.n	80074e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <chk_lock+0x80>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d101      	bne.n	80074dc <chk_lock+0x84>
 80074d8:	2300      	movs	r3, #0
 80074da:	e010      	b.n	80074fe <chk_lock+0xa6>
 80074dc:	2312      	movs	r3, #18
 80074de:	e00e      	b.n	80074fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d108      	bne.n	80074f8 <chk_lock+0xa0>
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <chk_lock+0xb4>)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	4413      	add	r3, r2
 80074ee:	330c      	adds	r3, #12
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f6:	d101      	bne.n	80074fc <chk_lock+0xa4>
 80074f8:	2310      	movs	r3, #16
 80074fa:	e000      	b.n	80074fe <chk_lock+0xa6>
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20000524 	.word	0x20000524

08007510 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007516:	2300      	movs	r3, #0
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	e002      	b.n	8007522 <enq_lock+0x12>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3301      	adds	r3, #1
 8007520:	607b      	str	r3, [r7, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d806      	bhi.n	8007536 <enq_lock+0x26>
 8007528:	4a09      	ldr	r2, [pc, #36]	; (8007550 <enq_lock+0x40>)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	4413      	add	r3, r2
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f2      	bne.n	800751c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b02      	cmp	r3, #2
 800753a:	bf14      	ite	ne
 800753c:	2301      	movne	r3, #1
 800753e:	2300      	moveq	r3, #0
 8007540:	b2db      	uxtb	r3, r3
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	20000524 	.word	0x20000524

08007554 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	e01f      	b.n	80075a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007564:	4a41      	ldr	r2, [pc, #260]	; (800766c <inc_lock+0x118>)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	011b      	lsls	r3, r3, #4
 800756a:	4413      	add	r3, r2
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d113      	bne.n	800759e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007576:	4a3d      	ldr	r2, [pc, #244]	; (800766c <inc_lock+0x118>)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	4413      	add	r3, r2
 800757e:	3304      	adds	r3, #4
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007586:	429a      	cmp	r2, r3
 8007588:	d109      	bne.n	800759e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800758a:	4a38      	ldr	r2, [pc, #224]	; (800766c <inc_lock+0x118>)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	4413      	add	r3, r2
 8007592:	3308      	adds	r3, #8
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800759a:	429a      	cmp	r2, r3
 800759c:	d006      	beq.n	80075ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3301      	adds	r3, #1
 80075a2:	60fb      	str	r3, [r7, #12]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d9dc      	bls.n	8007564 <inc_lock+0x10>
 80075aa:	e000      	b.n	80075ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80075ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d132      	bne.n	800761a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	e002      	b.n	80075c0 <inc_lock+0x6c>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d806      	bhi.n	80075d4 <inc_lock+0x80>
 80075c6:	4a29      	ldr	r2, [pc, #164]	; (800766c <inc_lock+0x118>)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	4413      	add	r3, r2
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1f2      	bne.n	80075ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d101      	bne.n	80075de <inc_lock+0x8a>
 80075da:	2300      	movs	r3, #0
 80075dc:	e040      	b.n	8007660 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4922      	ldr	r1, [pc, #136]	; (800766c <inc_lock+0x118>)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	440b      	add	r3, r1
 80075ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	491e      	ldr	r1, [pc, #120]	; (800766c <inc_lock+0x118>)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	440b      	add	r3, r1
 80075f8:	3304      	adds	r3, #4
 80075fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	695a      	ldr	r2, [r3, #20]
 8007600:	491a      	ldr	r1, [pc, #104]	; (800766c <inc_lock+0x118>)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	440b      	add	r3, r1
 8007608:	3308      	adds	r3, #8
 800760a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800760c:	4a17      	ldr	r2, [pc, #92]	; (800766c <inc_lock+0x118>)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	4413      	add	r3, r2
 8007614:	330c      	adds	r3, #12
 8007616:	2200      	movs	r2, #0
 8007618:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d009      	beq.n	8007634 <inc_lock+0xe0>
 8007620:	4a12      	ldr	r2, [pc, #72]	; (800766c <inc_lock+0x118>)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4413      	add	r3, r2
 8007628:	330c      	adds	r3, #12
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <inc_lock+0xe0>
 8007630:	2300      	movs	r3, #0
 8007632:	e015      	b.n	8007660 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d108      	bne.n	800764c <inc_lock+0xf8>
 800763a:	4a0c      	ldr	r2, [pc, #48]	; (800766c <inc_lock+0x118>)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	4413      	add	r3, r2
 8007642:	330c      	adds	r3, #12
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	3301      	adds	r3, #1
 8007648:	b29a      	uxth	r2, r3
 800764a:	e001      	b.n	8007650 <inc_lock+0xfc>
 800764c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007650:	4906      	ldr	r1, [pc, #24]	; (800766c <inc_lock+0x118>)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	440b      	add	r3, r1
 8007658:	330c      	adds	r3, #12
 800765a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3301      	adds	r3, #1
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	20000524 	.word	0x20000524

08007670 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3b01      	subs	r3, #1
 800767c:	607b      	str	r3, [r7, #4]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d825      	bhi.n	80076d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8007684:	4a17      	ldr	r2, [pc, #92]	; (80076e4 <dec_lock+0x74>)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	011b      	lsls	r3, r3, #4
 800768a:	4413      	add	r3, r2
 800768c:	330c      	adds	r3, #12
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007692:	89fb      	ldrh	r3, [r7, #14]
 8007694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007698:	d101      	bne.n	800769e <dec_lock+0x2e>
 800769a:	2300      	movs	r3, #0
 800769c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800769e:	89fb      	ldrh	r3, [r7, #14]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <dec_lock+0x3a>
 80076a4:	89fb      	ldrh	r3, [r7, #14]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80076aa:	4a0e      	ldr	r2, [pc, #56]	; (80076e4 <dec_lock+0x74>)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	4413      	add	r3, r2
 80076b2:	330c      	adds	r3, #12
 80076b4:	89fa      	ldrh	r2, [r7, #14]
 80076b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80076b8:	89fb      	ldrh	r3, [r7, #14]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d105      	bne.n	80076ca <dec_lock+0x5a>
 80076be:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <dec_lock+0x74>)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	4413      	add	r3, r2
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	737b      	strb	r3, [r7, #13]
 80076ce:	e001      	b.n	80076d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80076d0:	2302      	movs	r3, #2
 80076d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80076d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20000524 	.word	0x20000524

080076e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e010      	b.n	8007718 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80076f6:	4a0d      	ldr	r2, [pc, #52]	; (800772c <clear_lock+0x44>)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	4413      	add	r3, r2
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	429a      	cmp	r2, r3
 8007704:	d105      	bne.n	8007712 <clear_lock+0x2a>
 8007706:	4a09      	ldr	r2, [pc, #36]	; (800772c <clear_lock+0x44>)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	4413      	add	r3, r2
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3301      	adds	r3, #1
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d9eb      	bls.n	80076f6 <clear_lock+0xe>
	}
}
 800771e:	bf00      	nop
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000524 	.word	0x20000524

08007730 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	78db      	ldrb	r3, [r3, #3]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d034      	beq.n	80077ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7858      	ldrb	r0, [r3, #1]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007754:	2301      	movs	r3, #1
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	f7ff fd40 	bl	80071dc <disk_write>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007762:	2301      	movs	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
 8007766:	e022      	b.n	80077ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	1ad2      	subs	r2, r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	429a      	cmp	r2, r3
 800777c:	d217      	bcs.n	80077ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	789b      	ldrb	r3, [r3, #2]
 8007782:	613b      	str	r3, [r7, #16]
 8007784:	e010      	b.n	80077a8 <sync_window+0x78>
					wsect += fs->fsize;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	4413      	add	r3, r2
 800778e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	7858      	ldrb	r0, [r3, #1]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800779a:	2301      	movs	r3, #1
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	f7ff fd1d 	bl	80071dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	613b      	str	r3, [r7, #16]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d8eb      	bhi.n	8007786 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d01b      	beq.n	8007808 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff ffad 	bl	8007730 <sync_window>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d113      	bne.n	8007808 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7858      	ldrb	r0, [r3, #1]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077ea:	2301      	movs	r3, #1
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	f7ff fcd5 	bl	800719c <disk_read>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80077f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80077fe:	2301      	movs	r3, #1
 8007800:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007808:	7bfb      	ldrb	r3, [r7, #15]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff ff87 	bl	8007730 <sync_window>
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d158      	bne.n	80078de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b03      	cmp	r3, #3
 8007832:	d148      	bne.n	80078c6 <sync_fs+0xb2>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	791b      	ldrb	r3, [r3, #4]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d144      	bne.n	80078c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	3330      	adds	r3, #48	; 0x30
 8007840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007844:	2100      	movs	r1, #0
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff fda9 	bl	800739e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3330      	adds	r3, #48	; 0x30
 8007850:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007854:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff fd38 	bl	80072ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	3330      	adds	r3, #48	; 0x30
 8007862:	4921      	ldr	r1, [pc, #132]	; (80078e8 <sync_fs+0xd4>)
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fd4d 	bl	8007304 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3330      	adds	r3, #48	; 0x30
 800786e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007872:	491e      	ldr	r1, [pc, #120]	; (80078ec <sync_fs+0xd8>)
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff fd45 	bl	8007304 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3330      	adds	r3, #48	; 0x30
 800787e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f7ff fd3b 	bl	8007304 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3330      	adds	r3, #48	; 0x30
 8007892:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	4619      	mov	r1, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f7ff fd31 	bl	8007304 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	7858      	ldrb	r0, [r3, #1]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ba:	2301      	movs	r3, #1
 80078bc:	f7ff fc8e 	bl	80071dc <disk_write>
			fs->fsi_flag = 0;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	785b      	ldrb	r3, [r3, #1]
 80078ca:	2200      	movs	r2, #0
 80078cc:	2100      	movs	r1, #0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff fca4 	bl	800721c <disk_ioctl>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <sync_fs+0xca>
 80078da:	2301      	movs	r3, #1
 80078dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80078de:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	41615252 	.word	0x41615252
 80078ec:	61417272 	.word	0x61417272

080078f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	3b02      	subs	r3, #2
 80078fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	3b02      	subs	r3, #2
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d301      	bcc.n	8007910 <clust2sect+0x20>
 800790c:	2300      	movs	r3, #0
 800790e:	e008      	b.n	8007922 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	895b      	ldrh	r3, [r3, #10]
 8007914:	461a      	mov	r2, r3
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	fb03 f202 	mul.w	r2, r3, r2
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	4413      	add	r3, r2
}
 8007922:	4618      	mov	r0, r3
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d904      	bls.n	800794e <get_fat+0x20>
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d302      	bcc.n	8007954 <get_fat+0x26>
		val = 1;	/* Internal error */
 800794e:	2301      	movs	r3, #1
 8007950:	617b      	str	r3, [r7, #20]
 8007952:	e08c      	b.n	8007a6e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007958:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b02      	cmp	r3, #2
 8007960:	d045      	beq.n	80079ee <get_fat+0xc0>
 8007962:	2b03      	cmp	r3, #3
 8007964:	d05d      	beq.n	8007a22 <get_fat+0xf4>
 8007966:	2b01      	cmp	r3, #1
 8007968:	d177      	bne.n	8007a5a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	085b      	lsrs	r3, r3, #1
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	6a1a      	ldr	r2, [r3, #32]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	0a5b      	lsrs	r3, r3, #9
 8007980:	4413      	add	r3, r2
 8007982:	4619      	mov	r1, r3
 8007984:	6938      	ldr	r0, [r7, #16]
 8007986:	f7ff ff17 	bl	80077b8 <move_window>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d167      	bne.n	8007a60 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	60fa      	str	r2, [r7, #12]
 8007996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4413      	add	r3, r2
 800799e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079a2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	6a1a      	ldr	r2, [r3, #32]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	0a5b      	lsrs	r3, r3, #9
 80079ac:	4413      	add	r3, r2
 80079ae:	4619      	mov	r1, r3
 80079b0:	6938      	ldr	r0, [r7, #16]
 80079b2:	f7ff ff01 	bl	80077b8 <move_window>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d153      	bne.n	8007a64 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4413      	add	r3, r2
 80079c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079ca:	021b      	lsls	r3, r3, #8
 80079cc:	461a      	mov	r2, r3
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <get_fat+0xb6>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	091b      	lsrs	r3, r3, #4
 80079e2:	e002      	b.n	80079ea <get_fat+0xbc>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079ea:	617b      	str	r3, [r7, #20]
			break;
 80079ec:	e03f      	b.n	8007a6e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6a1a      	ldr	r2, [r3, #32]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	0a1b      	lsrs	r3, r3, #8
 80079f6:	4413      	add	r3, r2
 80079f8:	4619      	mov	r1, r3
 80079fa:	6938      	ldr	r0, [r7, #16]
 80079fc:	f7ff fedc 	bl	80077b8 <move_window>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d130      	bne.n	8007a68 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007a14:	4413      	add	r3, r2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff fc1e 	bl	8007258 <ld_word>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	617b      	str	r3, [r7, #20]
			break;
 8007a20:	e025      	b.n	8007a6e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	09db      	lsrs	r3, r3, #7
 8007a2a:	4413      	add	r3, r2
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6938      	ldr	r0, [r7, #16]
 8007a30:	f7ff fec2 	bl	80077b8 <move_window>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d118      	bne.n	8007a6c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a48:	4413      	add	r3, r2
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7ff fc1c 	bl	8007288 <ld_dword>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007a56:	617b      	str	r3, [r7, #20]
			break;
 8007a58:	e009      	b.n	8007a6e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e006      	b.n	8007a6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a60:	bf00      	nop
 8007a62:	e004      	b.n	8007a6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a64:	bf00      	nop
 8007a66:	e002      	b.n	8007a6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a68:	bf00      	nop
 8007a6a:	e000      	b.n	8007a6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a6c:	bf00      	nop
		}
	}

	return val;
 8007a6e:	697b      	ldr	r3, [r7, #20]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007a78:	b590      	push	{r4, r7, lr}
 8007a7a:	b089      	sub	sp, #36	; 0x24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007a84:	2302      	movs	r3, #2
 8007a86:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	f240 80d6 	bls.w	8007c3c <put_fat+0x1c4>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	f080 80d0 	bcs.w	8007c3c <put_fat+0x1c4>
		switch (fs->fs_type) {
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d073      	beq.n	8007b8c <put_fat+0x114>
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	f000 8091 	beq.w	8007bcc <put_fat+0x154>
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	f040 80c6 	bne.w	8007c3c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	61bb      	str	r3, [r7, #24]
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	4413      	add	r3, r2
 8007abc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a1a      	ldr	r2, [r3, #32]
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	0a5b      	lsrs	r3, r3, #9
 8007ac6:	4413      	add	r3, r2
 8007ac8:	4619      	mov	r1, r3
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f7ff fe74 	bl	80077b8 <move_window>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ad4:	7ffb      	ldrb	r3, [r7, #31]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 80a9 	bne.w	8007c2e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	1c59      	adds	r1, r3, #1
 8007ae6:	61b9      	str	r1, [r7, #24]
 8007ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aec:	4413      	add	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00d      	beq.n	8007b16 <put_fat+0x9e>
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b25b      	sxtb	r3, r3
 8007b00:	f003 030f 	and.w	r3, r3, #15
 8007b04:	b25a      	sxtb	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	b25b      	sxtb	r3, r3
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	e001      	b.n	8007b1a <put_fat+0xa2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a1a      	ldr	r2, [r3, #32]
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	0a5b      	lsrs	r3, r3, #9
 8007b2c:	4413      	add	r3, r2
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f7ff fe41 	bl	80077b8 <move_window>
 8007b36:	4603      	mov	r3, r0
 8007b38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b3a:	7ffb      	ldrb	r3, [r7, #31]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d178      	bne.n	8007c32 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4c:	4413      	add	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <put_fat+0xea>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	091b      	lsrs	r3, r3, #4
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	e00e      	b.n	8007b80 <put_fat+0x108>
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	b25b      	sxtb	r3, r3
 8007b68:	f023 030f 	bic.w	r3, r3, #15
 8007b6c:	b25a      	sxtb	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	0a1b      	lsrs	r3, r3, #8
 8007b72:	b25b      	sxtb	r3, r3
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	b25b      	sxtb	r3, r3
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	b25b      	sxtb	r3, r3
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2201      	movs	r2, #1
 8007b88:	70da      	strb	r2, [r3, #3]
			break;
 8007b8a:	e057      	b.n	8007c3c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a1a      	ldr	r2, [r3, #32]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	0a1b      	lsrs	r3, r3, #8
 8007b94:	4413      	add	r3, r2
 8007b96:	4619      	mov	r1, r3
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f7ff fe0d 	bl	80077b8 <move_window>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ba2:	7ffb      	ldrb	r3, [r7, #31]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d146      	bne.n	8007c36 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007bb6:	4413      	add	r3, r2
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	b292      	uxth	r2, r2
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7ff fb85 	bl	80072ce <st_word>
			fs->wflag = 1;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	70da      	strb	r2, [r3, #3]
			break;
 8007bca:	e037      	b.n	8007c3c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a1a      	ldr	r2, [r3, #32]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	09db      	lsrs	r3, r3, #7
 8007bd4:	4413      	add	r3, r2
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f7ff fded 	bl	80077b8 <move_window>
 8007bde:	4603      	mov	r3, r0
 8007be0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007be2:	7ffb      	ldrb	r3, [r7, #31]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d128      	bne.n	8007c3a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007bfc:	4413      	add	r3, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff fb42 	bl	8007288 <ld_dword>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c0a:	4323      	orrs	r3, r4
 8007c0c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007c1c:	4413      	add	r3, r2
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff fb6f 	bl	8007304 <st_dword>
			fs->wflag = 1;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	70da      	strb	r2, [r3, #3]
			break;
 8007c2c:	e006      	b.n	8007c3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007c2e:	bf00      	nop
 8007c30:	e004      	b.n	8007c3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007c32:	bf00      	nop
 8007c34:	e002      	b.n	8007c3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007c36:	bf00      	nop
 8007c38:	e000      	b.n	8007c3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007c3a:	bf00      	nop
		}
	}
	return res;
 8007c3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3724      	adds	r7, #36	; 0x24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd90      	pop	{r4, r7, pc}

08007c46 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b088      	sub	sp, #32
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d904      	bls.n	8007c6c <remove_chain+0x26>
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d301      	bcc.n	8007c70 <remove_chain+0x2a>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e04b      	b.n	8007d08 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00c      	beq.n	8007c90 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	69b8      	ldr	r0, [r7, #24]
 8007c7e:	f7ff fefb 	bl	8007a78 <put_fat>
 8007c82:	4603      	mov	r3, r0
 8007c84:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007c86:	7ffb      	ldrb	r3, [r7, #31]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <remove_chain+0x4a>
 8007c8c:	7ffb      	ldrb	r3, [r7, #31]
 8007c8e:	e03b      	b.n	8007d08 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff fe4b 	bl	800792e <get_fat>
 8007c98:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d031      	beq.n	8007d04 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d101      	bne.n	8007caa <remove_chain+0x64>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e02e      	b.n	8007d08 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cb0:	d101      	bne.n	8007cb6 <remove_chain+0x70>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e028      	b.n	8007d08 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	69b8      	ldr	r0, [r7, #24]
 8007cbc:	f7ff fedc 	bl	8007a78 <put_fat>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007cc4:	7ffb      	ldrb	r3, [r7, #31]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <remove_chain+0x88>
 8007cca:	7ffb      	ldrb	r3, [r7, #31]
 8007ccc:	e01c      	b.n	8007d08 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	691a      	ldr	r2, [r3, #16]
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	3b02      	subs	r3, #2
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d20b      	bcs.n	8007cf4 <remove_chain+0xae>
			fs->free_clst++;
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	791b      	ldrb	r3, [r3, #4]
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d3c6      	bcc.n	8007c90 <remove_chain+0x4a>
 8007d02:	e000      	b.n	8007d06 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007d04:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3720      	adds	r7, #32
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10d      	bne.n	8007d42 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d004      	beq.n	8007d3c <create_chain+0x2c>
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d31b      	bcc.n	8007d74 <create_chain+0x64>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	61bb      	str	r3, [r7, #24]
 8007d40:	e018      	b.n	8007d74 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff fdf2 	bl	800792e <get_fat>
 8007d4a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d801      	bhi.n	8007d56 <create_chain+0x46>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e070      	b.n	8007e38 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d5c:	d101      	bne.n	8007d62 <create_chain+0x52>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	e06a      	b.n	8007e38 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d201      	bcs.n	8007d70 <create_chain+0x60>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	e063      	b.n	8007e38 <create_chain+0x128>
		scl = clst;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d307      	bcc.n	8007d98 <create_chain+0x88>
				ncl = 2;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007d8c:	69fa      	ldr	r2, [r7, #28]
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d901      	bls.n	8007d98 <create_chain+0x88>
 8007d94:	2300      	movs	r3, #0
 8007d96:	e04f      	b.n	8007e38 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007d98:	69f9      	ldr	r1, [r7, #28]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff fdc7 	bl	800792e <get_fat>
 8007da0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00e      	beq.n	8007dc6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d003      	beq.n	8007db6 <create_chain+0xa6>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007db4:	d101      	bne.n	8007dba <create_chain+0xaa>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	e03e      	b.n	8007e38 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d1da      	bne.n	8007d78 <create_chain+0x68>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e038      	b.n	8007e38 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007dc6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dcc:	69f9      	ldr	r1, [r7, #28]
 8007dce:	6938      	ldr	r0, [r7, #16]
 8007dd0:	f7ff fe52 	bl	8007a78 <put_fat>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <create_chain+0xe2>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d006      	beq.n	8007df2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007de4:	69fa      	ldr	r2, [r7, #28]
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6938      	ldr	r0, [r7, #16]
 8007dea:	f7ff fe45 	bl	8007a78 <put_fat>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d116      	bne.n	8007e26 <create_chain+0x116>
		fs->last_clst = ncl;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	691a      	ldr	r2, [r3, #16]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	3b02      	subs	r3, #2
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d804      	bhi.n	8007e16 <create_chain+0x106>
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	1e5a      	subs	r2, r3, #1
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	791b      	ldrb	r3, [r3, #4]
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	711a      	strb	r2, [r3, #4]
 8007e24:	e007      	b.n	8007e36 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d102      	bne.n	8007e32 <create_chain+0x122>
 8007e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e30:	e000      	b.n	8007e34 <create_chain+0x124>
 8007e32:	2301      	movs	r3, #1
 8007e34:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007e36:	69fb      	ldr	r3, [r7, #28]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	3304      	adds	r3, #4
 8007e56:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	0a5b      	lsrs	r3, r3, #9
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	8952      	ldrh	r2, [r2, #10]
 8007e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e64:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	1d1a      	adds	r2, r3, #4
 8007e6a:	613a      	str	r2, [r7, #16]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <clmt_clust+0x3a>
 8007e76:	2300      	movs	r3, #0
 8007e78:	e010      	b.n	8007e9c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d307      	bcc.n	8007e92 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007e90:	e7e9      	b.n	8007e66 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007e92:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	4413      	add	r3, r2
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ebe:	d204      	bcs.n	8007eca <dir_sdi+0x22>
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	f003 031f 	and.w	r3, r3, #31
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <dir_sdi+0x26>
		return FR_INT_ERR;
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e063      	b.n	8007f96 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d106      	bne.n	8007eee <dir_sdi+0x46>
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d902      	bls.n	8007eee <dir_sdi+0x46>
		clst = fs->dirbase;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10c      	bne.n	8007f0e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	095b      	lsrs	r3, r3, #5
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	8912      	ldrh	r2, [r2, #8]
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d301      	bcc.n	8007f04 <dir_sdi+0x5c>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e048      	b.n	8007f96 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	61da      	str	r2, [r3, #28]
 8007f0c:	e029      	b.n	8007f62 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	895b      	ldrh	r3, [r3, #10]
 8007f12:	025b      	lsls	r3, r3, #9
 8007f14:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f16:	e019      	b.n	8007f4c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6979      	ldr	r1, [r7, #20]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff fd06 	bl	800792e <get_fat>
 8007f22:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f2a:	d101      	bne.n	8007f30 <dir_sdi+0x88>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e032      	b.n	8007f96 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d904      	bls.n	8007f40 <dir_sdi+0x98>
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d301      	bcc.n	8007f44 <dir_sdi+0x9c>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e028      	b.n	8007f96 <dir_sdi+0xee>
			ofs -= csz;
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d2e1      	bcs.n	8007f18 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007f54:	6979      	ldr	r1, [r7, #20]
 8007f56:	6938      	ldr	r0, [r7, #16]
 8007f58:	f7ff fcca 	bl	80078f0 <clust2sect>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <dir_sdi+0xcc>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e010      	b.n	8007f96 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	69da      	ldr	r2, [r3, #28]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	0a5b      	lsrs	r3, r3, #9
 8007f7c:	441a      	add	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8e:	441a      	add	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b086      	sub	sp, #24
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	3320      	adds	r3, #32
 8007fb4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <dir_next+0x28>
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fc4:	d301      	bcc.n	8007fca <dir_next+0x2c>
 8007fc6:	2304      	movs	r3, #4
 8007fc8:	e0aa      	b.n	8008120 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f040 8098 	bne.w	8008106 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10b      	bne.n	8008000 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	095b      	lsrs	r3, r3, #5
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	8912      	ldrh	r2, [r2, #8]
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	f0c0 8088 	bcc.w	8008106 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	61da      	str	r2, [r3, #28]
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	e08f      	b.n	8008120 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	0a5b      	lsrs	r3, r3, #9
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	8952      	ldrh	r2, [r2, #10]
 8008008:	3a01      	subs	r2, #1
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d17a      	bne.n	8008106 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f7ff fc88 	bl	800792e <get_fat>
 800801e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d801      	bhi.n	800802a <dir_next+0x8c>
 8008026:	2302      	movs	r3, #2
 8008028:	e07a      	b.n	8008120 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008030:	d101      	bne.n	8008036 <dir_next+0x98>
 8008032:	2301      	movs	r3, #1
 8008034:	e074      	b.n	8008120 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	429a      	cmp	r2, r3
 800803e:	d358      	bcc.n	80080f2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d104      	bne.n	8008050 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	61da      	str	r2, [r3, #28]
 800804c:	2304      	movs	r3, #4
 800804e:	e067      	b.n	8008120 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f7ff fe59 	bl	8007d10 <create_chain>
 800805e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <dir_next+0xcc>
 8008066:	2307      	movs	r3, #7
 8008068:	e05a      	b.n	8008120 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d101      	bne.n	8008074 <dir_next+0xd6>
 8008070:	2302      	movs	r3, #2
 8008072:	e055      	b.n	8008120 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800807a:	d101      	bne.n	8008080 <dir_next+0xe2>
 800807c:	2301      	movs	r3, #1
 800807e:	e04f      	b.n	8008120 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff fb55 	bl	8007730 <sync_window>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <dir_next+0xf2>
 800808c:	2301      	movs	r3, #1
 800808e:	e047      	b.n	8008120 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3330      	adds	r3, #48	; 0x30
 8008094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008098:	2100      	movs	r1, #0
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff f97f 	bl	800739e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80080a0:	2300      	movs	r3, #0
 80080a2:	613b      	str	r3, [r7, #16]
 80080a4:	6979      	ldr	r1, [r7, #20]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7ff fc22 	bl	80078f0 <clust2sect>
 80080ac:	4602      	mov	r2, r0
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80080b2:	e012      	b.n	80080da <dir_next+0x13c>
						fs->wflag = 1;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff fb38 	bl	8007730 <sync_window>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <dir_next+0x12c>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e02a      	b.n	8008120 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	3301      	adds	r3, #1
 80080ce:	613b      	str	r3, [r7, #16]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	895b      	ldrh	r3, [r3, #10]
 80080de:	461a      	mov	r2, r3
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d3e6      	bcc.n	80080b4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	1ad2      	subs	r2, r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80080f8:	6979      	ldr	r1, [r7, #20]
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff fbf8 	bl	80078f0 <clust2sect>
 8008100:	4602      	mov	r2, r0
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008118:	441a      	add	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008138:	2100      	movs	r1, #0
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff feb4 	bl	8007ea8 <dir_sdi>
 8008140:	4603      	mov	r3, r0
 8008142:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d12b      	bne.n	80081a2 <dir_alloc+0x7a>
		n = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	4619      	mov	r1, r3
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7ff fb2f 	bl	80077b8 <move_window>
 800815a:	4603      	mov	r3, r0
 800815c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d11d      	bne.n	80081a0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	2be5      	cmp	r3, #229	; 0xe5
 800816c:	d004      	beq.n	8008178 <dir_alloc+0x50>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d107      	bne.n	8008188 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	3301      	adds	r3, #1
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	429a      	cmp	r2, r3
 8008184:	d102      	bne.n	800818c <dir_alloc+0x64>
 8008186:	e00c      	b.n	80081a2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008188:	2300      	movs	r3, #0
 800818a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800818c:	2101      	movs	r1, #1
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff ff05 	bl	8007f9e <dir_next>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0d7      	beq.n	800814e <dir_alloc+0x26>
 800819e:	e000      	b.n	80081a2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80081a0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80081a2:	7dfb      	ldrb	r3, [r7, #23]
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d101      	bne.n	80081ac <dir_alloc+0x84>
 80081a8:	2307      	movs	r3, #7
 80081aa:	75fb      	strb	r3, [r7, #23]
	return res;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	331a      	adds	r3, #26
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff f847 	bl	8007258 <ld_word>
 80081ca:	4603      	mov	r3, r0
 80081cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d109      	bne.n	80081ea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	3314      	adds	r3, #20
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff f83c 	bl	8007258 <ld_word>
 80081e0:	4603      	mov	r3, r0
 80081e2:	041b      	lsls	r3, r3, #16
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80081ea:	68fb      	ldr	r3, [r7, #12]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	331a      	adds	r3, #26
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	b292      	uxth	r2, r2
 8008208:	4611      	mov	r1, r2
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff f85f 	bl	80072ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	2b03      	cmp	r3, #3
 8008216:	d109      	bne.n	800822c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f103 0214 	add.w	r2, r3, #20
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	0c1b      	lsrs	r3, r3, #16
 8008222:	b29b      	uxth	r3, r3
 8008224:	4619      	mov	r1, r3
 8008226:	4610      	mov	r0, r2
 8008228:	f7ff f851 	bl	80072ce <st_word>
	}
}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008242:	2100      	movs	r1, #0
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7ff fe2f 	bl	8007ea8 <dir_sdi>
 800824a:	4603      	mov	r3, r0
 800824c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800824e:	7dfb      	ldrb	r3, [r7, #23]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <dir_find+0x24>
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	e03e      	b.n	80082d6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	4619      	mov	r1, r3
 800825e:	6938      	ldr	r0, [r7, #16]
 8008260:	f7ff faaa 	bl	80077b8 <move_window>
 8008264:	4603      	mov	r3, r0
 8008266:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d12f      	bne.n	80082ce <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <dir_find+0x4e>
 800827c:	2304      	movs	r3, #4
 800827e:	75fb      	strb	r3, [r7, #23]
 8008280:	e028      	b.n	80082d4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	330b      	adds	r3, #11
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800828e:	b2da      	uxtb	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	330b      	adds	r3, #11
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10a      	bne.n	80082ba <dir_find+0x86>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a18      	ldr	r0, [r3, #32]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	3324      	adds	r3, #36	; 0x24
 80082ac:	220b      	movs	r2, #11
 80082ae:	4619      	mov	r1, r3
 80082b0:	f7ff f88f 	bl	80073d2 <mem_cmp>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00b      	beq.n	80082d2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80082ba:	2100      	movs	r1, #0
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff fe6e 	bl	8007f9e <dir_next>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0c5      	beq.n	8008258 <dir_find+0x24>
 80082cc:	e002      	b.n	80082d4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80082ce:	bf00      	nop
 80082d0:	e000      	b.n	80082d4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80082d2:	bf00      	nop

	return res;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80082ec:	2101      	movs	r1, #1
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff ff1a 	bl	8008128 <dir_alloc>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d11c      	bne.n	8008338 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	4619      	mov	r1, r3
 8008304:	68b8      	ldr	r0, [r7, #8]
 8008306:	f7ff fa57 	bl	80077b8 <move_window>
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d111      	bne.n	8008338 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a1b      	ldr	r3, [r3, #32]
 8008318:	2220      	movs	r2, #32
 800831a:	2100      	movs	r1, #0
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff f83e 	bl	800739e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a18      	ldr	r0, [r3, #32]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3324      	adds	r3, #36	; 0x24
 800832a:	220b      	movs	r2, #11
 800832c:	4619      	mov	r1, r3
 800832e:	f7ff f815 	bl	800735c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2201      	movs	r2, #1
 8008336:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3324      	adds	r3, #36	; 0x24
 8008358:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800835a:	220b      	movs	r2, #11
 800835c:	2120      	movs	r1, #32
 800835e:	68b8      	ldr	r0, [r7, #8]
 8008360:	f7ff f81d 	bl	800739e <mem_set>
	si = i = 0; ni = 8;
 8008364:	2300      	movs	r3, #0
 8008366:	613b      	str	r3, [r7, #16]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	2308      	movs	r3, #8
 800836e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	617a      	str	r2, [r7, #20]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4413      	add	r3, r2
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800837e:	7ffb      	ldrb	r3, [r7, #31]
 8008380:	2b20      	cmp	r3, #32
 8008382:	d94e      	bls.n	8008422 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008384:	7ffb      	ldrb	r3, [r7, #31]
 8008386:	2b2f      	cmp	r3, #47	; 0x2f
 8008388:	d006      	beq.n	8008398 <create_name+0x54>
 800838a:	7ffb      	ldrb	r3, [r7, #31]
 800838c:	2b5c      	cmp	r3, #92	; 0x5c
 800838e:	d110      	bne.n	80083b2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008390:	e002      	b.n	8008398 <create_name+0x54>
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	3301      	adds	r3, #1
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	4413      	add	r3, r2
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	2b2f      	cmp	r3, #47	; 0x2f
 80083a2:	d0f6      	beq.n	8008392 <create_name+0x4e>
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	4413      	add	r3, r2
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b5c      	cmp	r3, #92	; 0x5c
 80083ae:	d0f0      	beq.n	8008392 <create_name+0x4e>
			break;
 80083b0:	e038      	b.n	8008424 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80083b2:	7ffb      	ldrb	r3, [r7, #31]
 80083b4:	2b2e      	cmp	r3, #46	; 0x2e
 80083b6:	d003      	beq.n	80083c0 <create_name+0x7c>
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d30c      	bcc.n	80083da <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	2b0b      	cmp	r3, #11
 80083c4:	d002      	beq.n	80083cc <create_name+0x88>
 80083c6:	7ffb      	ldrb	r3, [r7, #31]
 80083c8:	2b2e      	cmp	r3, #46	; 0x2e
 80083ca:	d001      	beq.n	80083d0 <create_name+0x8c>
 80083cc:	2306      	movs	r3, #6
 80083ce:	e044      	b.n	800845a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80083d0:	2308      	movs	r3, #8
 80083d2:	613b      	str	r3, [r7, #16]
 80083d4:	230b      	movs	r3, #11
 80083d6:	61bb      	str	r3, [r7, #24]
			continue;
 80083d8:	e022      	b.n	8008420 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80083da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	da04      	bge.n	80083ec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80083e2:	7ffb      	ldrb	r3, [r7, #31]
 80083e4:	3b80      	subs	r3, #128	; 0x80
 80083e6:	4a1f      	ldr	r2, [pc, #124]	; (8008464 <create_name+0x120>)
 80083e8:	5cd3      	ldrb	r3, [r2, r3]
 80083ea:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80083ec:	7ffb      	ldrb	r3, [r7, #31]
 80083ee:	4619      	mov	r1, r3
 80083f0:	481d      	ldr	r0, [pc, #116]	; (8008468 <create_name+0x124>)
 80083f2:	f7ff f815 	bl	8007420 <chk_chr>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <create_name+0xbc>
 80083fc:	2306      	movs	r3, #6
 80083fe:	e02c      	b.n	800845a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008400:	7ffb      	ldrb	r3, [r7, #31]
 8008402:	2b60      	cmp	r3, #96	; 0x60
 8008404:	d905      	bls.n	8008412 <create_name+0xce>
 8008406:	7ffb      	ldrb	r3, [r7, #31]
 8008408:	2b7a      	cmp	r3, #122	; 0x7a
 800840a:	d802      	bhi.n	8008412 <create_name+0xce>
 800840c:	7ffb      	ldrb	r3, [r7, #31]
 800840e:	3b20      	subs	r3, #32
 8008410:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	613a      	str	r2, [r7, #16]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	4413      	add	r3, r2
 800841c:	7ffa      	ldrb	r2, [r7, #31]
 800841e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008420:	e7a6      	b.n	8008370 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008422:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	441a      	add	r2, r3
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <create_name+0xf4>
 8008434:	2306      	movs	r3, #6
 8008436:	e010      	b.n	800845a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2be5      	cmp	r3, #229	; 0xe5
 800843e:	d102      	bne.n	8008446 <create_name+0x102>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2205      	movs	r2, #5
 8008444:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008446:	7ffb      	ldrb	r3, [r7, #31]
 8008448:	2b20      	cmp	r3, #32
 800844a:	d801      	bhi.n	8008450 <create_name+0x10c>
 800844c:	2204      	movs	r2, #4
 800844e:	e000      	b.n	8008452 <create_name+0x10e>
 8008450:	2200      	movs	r2, #0
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	330b      	adds	r3, #11
 8008456:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008458:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800845a:	4618      	mov	r0, r3
 800845c:	3720      	adds	r7, #32
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	08009dbc 	.word	0x08009dbc
 8008468:	08009d40 	.word	0x08009d40

0800846c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008480:	e002      	b.n	8008488 <follow_path+0x1c>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	603b      	str	r3, [r7, #0]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b2f      	cmp	r3, #47	; 0x2f
 800848e:	d0f8      	beq.n	8008482 <follow_path+0x16>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b5c      	cmp	r3, #92	; 0x5c
 8008496:	d0f4      	beq.n	8008482 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	2200      	movs	r2, #0
 800849c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2b1f      	cmp	r3, #31
 80084a4:	d80a      	bhi.n	80084bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2280      	movs	r2, #128	; 0x80
 80084aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80084ae:	2100      	movs	r1, #0
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fcf9 	bl	8007ea8 <dir_sdi>
 80084b6:	4603      	mov	r3, r0
 80084b8:	75fb      	strb	r3, [r7, #23]
 80084ba:	e043      	b.n	8008544 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80084bc:	463b      	mov	r3, r7
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff ff3f 	bl	8008344 <create_name>
 80084c6:	4603      	mov	r3, r0
 80084c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d134      	bne.n	800853a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff feaf 	bl	8008234 <dir_find>
 80084d6:	4603      	mov	r3, r0
 80084d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80084e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00a      	beq.n	80084fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d127      	bne.n	800853e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80084ee:	7afb      	ldrb	r3, [r7, #11]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d122      	bne.n	800853e <follow_path+0xd2>
 80084f8:	2305      	movs	r3, #5
 80084fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80084fc:	e01f      	b.n	800853e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80084fe:	7afb      	ldrb	r3, [r7, #11]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b00      	cmp	r3, #0
 8008506:	d11c      	bne.n	8008542 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	799b      	ldrb	r3, [r3, #6]
 800850c:	f003 0310 	and.w	r3, r3, #16
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008514:	2305      	movs	r3, #5
 8008516:	75fb      	strb	r3, [r7, #23]
 8008518:	e014      	b.n	8008544 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008528:	4413      	add	r3, r2
 800852a:	4619      	mov	r1, r3
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7ff fe42 	bl	80081b6 <ld_clust>
 8008532:	4602      	mov	r2, r0
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008538:	e7c0      	b.n	80084bc <follow_path+0x50>
			if (res != FR_OK) break;
 800853a:	bf00      	nop
 800853c:	e002      	b.n	8008544 <follow_path+0xd8>
				break;
 800853e:	bf00      	nop
 8008540:	e000      	b.n	8008544 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008542:	bf00      	nop
			}
		}
	}

	return res;
 8008544:	7dfb      	ldrb	r3, [r7, #23]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800854e:	b480      	push	{r7}
 8008550:	b087      	sub	sp, #28
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800855a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d031      	beq.n	80085c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	e002      	b.n	8008572 <get_ldnumber+0x24>
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	3301      	adds	r3, #1
 8008570:	617b      	str	r3, [r7, #20]
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b20      	cmp	r3, #32
 8008578:	d903      	bls.n	8008582 <get_ldnumber+0x34>
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b3a      	cmp	r3, #58	; 0x3a
 8008580:	d1f4      	bne.n	800856c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2b3a      	cmp	r3, #58	; 0x3a
 8008588:	d11c      	bne.n	80085c4 <get_ldnumber+0x76>
			tp = *path;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	60fa      	str	r2, [r7, #12]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	3b30      	subs	r3, #48	; 0x30
 800859a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b09      	cmp	r3, #9
 80085a0:	d80e      	bhi.n	80085c0 <get_ldnumber+0x72>
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d10a      	bne.n	80085c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d107      	bne.n	80085c0 <get_ldnumber+0x72>
					vol = (int)i;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	3301      	adds	r3, #1
 80085b8:	617b      	str	r3, [r7, #20]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	e002      	b.n	80085ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80085c4:	2300      	movs	r3, #0
 80085c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80085c8:	693b      	ldr	r3, [r7, #16]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
	...

080085d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	70da      	strb	r2, [r3, #3]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085ee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff f8e0 	bl	80077b8 <move_window>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <check_fs+0x2a>
 80085fe:	2304      	movs	r3, #4
 8008600:	e038      	b.n	8008674 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3330      	adds	r3, #48	; 0x30
 8008606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fe24 	bl	8007258 <ld_word>
 8008610:	4603      	mov	r3, r0
 8008612:	461a      	mov	r2, r3
 8008614:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008618:	429a      	cmp	r2, r3
 800861a:	d001      	beq.n	8008620 <check_fs+0x48>
 800861c:	2303      	movs	r3, #3
 800861e:	e029      	b.n	8008674 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008626:	2be9      	cmp	r3, #233	; 0xe9
 8008628:	d009      	beq.n	800863e <check_fs+0x66>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008630:	2beb      	cmp	r3, #235	; 0xeb
 8008632:	d11e      	bne.n	8008672 <check_fs+0x9a>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800863a:	2b90      	cmp	r3, #144	; 0x90
 800863c:	d119      	bne.n	8008672 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3330      	adds	r3, #48	; 0x30
 8008642:	3336      	adds	r3, #54	; 0x36
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe fe1f 	bl	8007288 <ld_dword>
 800864a:	4603      	mov	r3, r0
 800864c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008650:	4a0a      	ldr	r2, [pc, #40]	; (800867c <check_fs+0xa4>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d101      	bne.n	800865a <check_fs+0x82>
 8008656:	2300      	movs	r3, #0
 8008658:	e00c      	b.n	8008674 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	3330      	adds	r3, #48	; 0x30
 800865e:	3352      	adds	r3, #82	; 0x52
 8008660:	4618      	mov	r0, r3
 8008662:	f7fe fe11 	bl	8007288 <ld_dword>
 8008666:	4602      	mov	r2, r0
 8008668:	4b05      	ldr	r3, [pc, #20]	; (8008680 <check_fs+0xa8>)
 800866a:	429a      	cmp	r2, r3
 800866c:	d101      	bne.n	8008672 <check_fs+0x9a>
 800866e:	2300      	movs	r3, #0
 8008670:	e000      	b.n	8008674 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008672:	2302      	movs	r3, #2
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	00544146 	.word	0x00544146
 8008680:	33544146 	.word	0x33544146

08008684 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b096      	sub	sp, #88	; 0x58
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f7ff ff58 	bl	800854e <get_ldnumber>
 800869e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80086a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	da01      	bge.n	80086aa <find_volume+0x26>
 80086a6:	230b      	movs	r3, #11
 80086a8:	e22e      	b.n	8008b08 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80086aa:	4aa8      	ldr	r2, [pc, #672]	; (800894c <find_volume+0x2c8>)
 80086ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80086b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <find_volume+0x3a>
 80086ba:	230c      	movs	r3, #12
 80086bc:	e224      	b.n	8008b08 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	f023 0301 	bic.w	r3, r3, #1
 80086ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01a      	beq.n	800870a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	785b      	ldrb	r3, [r3, #1]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe fd1f 	bl	800711c <disk_status>
 80086de:	4603      	mov	r3, r0
 80086e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80086e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10c      	bne.n	800870a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80086f0:	79fb      	ldrb	r3, [r7, #7]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <find_volume+0x82>
 80086f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086fa:	f003 0304 	and.w	r3, r3, #4
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008702:	230a      	movs	r3, #10
 8008704:	e200      	b.n	8008b08 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8008706:	2300      	movs	r3, #0
 8008708:	e1fe      	b.n	8008b08 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	2200      	movs	r2, #0
 800870e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008712:	b2da      	uxtb	r2, r3
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe fd17 	bl	8007150 <disk_initialize>
 8008722:	4603      	mov	r3, r0
 8008724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008734:	2303      	movs	r3, #3
 8008736:	e1e7      	b.n	8008b08 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <find_volume+0xca>
 800873e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008742:	f003 0304 	and.w	r3, r3, #4
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800874a:	230a      	movs	r3, #10
 800874c:	e1dc      	b.n	8008b08 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800874e:	2300      	movs	r3, #0
 8008750:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008752:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008756:	f7ff ff3f 	bl	80085d8 <check_fs>
 800875a:	4603      	mov	r3, r0
 800875c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008764:	2b02      	cmp	r3, #2
 8008766:	d14b      	bne.n	8008800 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008768:	2300      	movs	r3, #0
 800876a:	643b      	str	r3, [r7, #64]	; 0x40
 800876c:	e01f      	b.n	80087ae <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800877c:	4413      	add	r3, r2
 800877e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	3304      	adds	r3, #4
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d006      	beq.n	8008798 <find_volume+0x114>
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	3308      	adds	r3, #8
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe fd7a 	bl	8007288 <ld_dword>
 8008794:	4602      	mov	r2, r0
 8008796:	e000      	b.n	800879a <find_volume+0x116>
 8008798:	2200      	movs	r2, #0
 800879a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80087a2:	440b      	add	r3, r1
 80087a4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80087a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087aa:	3301      	adds	r3, #1
 80087ac:	643b      	str	r3, [r7, #64]	; 0x40
 80087ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d9dc      	bls.n	800876e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80087b4:	2300      	movs	r3, #0
 80087b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80087b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <find_volume+0x140>
 80087be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c0:	3b01      	subs	r3, #1
 80087c2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80087c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80087cc:	4413      	add	r3, r2
 80087ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80087d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80087d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <find_volume+0x162>
 80087da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087de:	f7ff fefb 	bl	80085d8 <check_fs>
 80087e2:	4603      	mov	r3, r0
 80087e4:	e000      	b.n	80087e8 <find_volume+0x164>
 80087e6:	2303      	movs	r3, #3
 80087e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80087ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d905      	bls.n	8008800 <find_volume+0x17c>
 80087f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f6:	3301      	adds	r3, #1
 80087f8:	643b      	str	r3, [r7, #64]	; 0x40
 80087fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d9e1      	bls.n	80087c4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008804:	2b04      	cmp	r3, #4
 8008806:	d101      	bne.n	800880c <find_volume+0x188>
 8008808:	2301      	movs	r3, #1
 800880a:	e17d      	b.n	8008b08 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800880c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008810:	2b01      	cmp	r3, #1
 8008812:	d901      	bls.n	8008818 <find_volume+0x194>
 8008814:	230d      	movs	r3, #13
 8008816:	e177      	b.n	8008b08 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	3330      	adds	r3, #48	; 0x30
 800881c:	330b      	adds	r3, #11
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe fd1a 	bl	8007258 <ld_word>
 8008824:	4603      	mov	r3, r0
 8008826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800882a:	d001      	beq.n	8008830 <find_volume+0x1ac>
 800882c:	230d      	movs	r3, #13
 800882e:	e16b      	b.n	8008b08 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	3330      	adds	r3, #48	; 0x30
 8008834:	3316      	adds	r3, #22
 8008836:	4618      	mov	r0, r3
 8008838:	f7fe fd0e 	bl	8007258 <ld_word>
 800883c:	4603      	mov	r3, r0
 800883e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d106      	bne.n	8008854 <find_volume+0x1d0>
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	3330      	adds	r3, #48	; 0x30
 800884a:	3324      	adds	r3, #36	; 0x24
 800884c:	4618      	mov	r0, r3
 800884e:	f7fe fd1b 	bl	8007288 <ld_dword>
 8008852:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008858:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800885a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008866:	789b      	ldrb	r3, [r3, #2]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d005      	beq.n	8008878 <find_volume+0x1f4>
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	789b      	ldrb	r3, [r3, #2]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d001      	beq.n	8008878 <find_volume+0x1f4>
 8008874:	230d      	movs	r3, #13
 8008876:	e147      	b.n	8008b08 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	789b      	ldrb	r3, [r3, #2]
 800887c:	461a      	mov	r2, r3
 800887e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008880:	fb02 f303 	mul.w	r3, r2, r3
 8008884:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800888c:	b29a      	uxth	r2, r3
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008894:	895b      	ldrh	r3, [r3, #10]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d008      	beq.n	80088ac <find_volume+0x228>
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	895b      	ldrh	r3, [r3, #10]
 800889e:	461a      	mov	r2, r3
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	895b      	ldrh	r3, [r3, #10]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	4013      	ands	r3, r2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <find_volume+0x22c>
 80088ac:	230d      	movs	r3, #13
 80088ae:	e12b      	b.n	8008b08 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	3330      	adds	r3, #48	; 0x30
 80088b4:	3311      	adds	r3, #17
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fcce 	bl	8007258 <ld_word>
 80088bc:	4603      	mov	r3, r0
 80088be:	461a      	mov	r2, r3
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80088c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c6:	891b      	ldrh	r3, [r3, #8]
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <find_volume+0x252>
 80088d2:	230d      	movs	r3, #13
 80088d4:	e118      	b.n	8008b08 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	3330      	adds	r3, #48	; 0x30
 80088da:	3313      	adds	r3, #19
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fe fcbb 	bl	8007258 <ld_word>
 80088e2:	4603      	mov	r3, r0
 80088e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80088e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d106      	bne.n	80088fa <find_volume+0x276>
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	3330      	adds	r3, #48	; 0x30
 80088f0:	3320      	adds	r3, #32
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe fcc8 	bl	8007288 <ld_dword>
 80088f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	3330      	adds	r3, #48	; 0x30
 80088fe:	330e      	adds	r3, #14
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fca9 	bl	8007258 <ld_word>
 8008906:	4603      	mov	r3, r0
 8008908:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800890a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <find_volume+0x290>
 8008910:	230d      	movs	r3, #13
 8008912:	e0f9      	b.n	8008b08 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008914:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008918:	4413      	add	r3, r2
 800891a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800891c:	8912      	ldrh	r2, [r2, #8]
 800891e:	0912      	lsrs	r2, r2, #4
 8008920:	b292      	uxth	r2, r2
 8008922:	4413      	add	r3, r2
 8008924:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	429a      	cmp	r2, r3
 800892c:	d201      	bcs.n	8008932 <find_volume+0x2ae>
 800892e:	230d      	movs	r3, #13
 8008930:	e0ea      	b.n	8008b08 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800893a:	8952      	ldrh	r2, [r2, #10]
 800893c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	2b00      	cmp	r3, #0
 8008946:	d103      	bne.n	8008950 <find_volume+0x2cc>
 8008948:	230d      	movs	r3, #13
 800894a:	e0dd      	b.n	8008b08 <find_volume+0x484>
 800894c:	2000051c 	.word	0x2000051c
		fmt = FS_FAT32;
 8008950:	2303      	movs	r3, #3
 8008952:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800895c:	4293      	cmp	r3, r2
 800895e:	d802      	bhi.n	8008966 <find_volume+0x2e2>
 8008960:	2302      	movs	r3, #2
 8008962:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	f640 72f5 	movw	r2, #4085	; 0xff5
 800896c:	4293      	cmp	r3, r2
 800896e:	d802      	bhi.n	8008976 <find_volume+0x2f2>
 8008970:	2301      	movs	r3, #1
 8008972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	1c9a      	adds	r2, r3, #2
 800897a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800897e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008982:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008984:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008988:	441a      	add	r2, r3
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800898e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	441a      	add	r2, r3
 8008994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008996:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800899c:	2b03      	cmp	r3, #3
 800899e:	d11e      	bne.n	80089de <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	3330      	adds	r3, #48	; 0x30
 80089a4:	332a      	adds	r3, #42	; 0x2a
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe fc56 	bl	8007258 <ld_word>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <find_volume+0x332>
 80089b2:	230d      	movs	r3, #13
 80089b4:	e0a8      	b.n	8008b08 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	891b      	ldrh	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <find_volume+0x33e>
 80089be:	230d      	movs	r3, #13
 80089c0:	e0a2      	b.n	8008b08 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80089c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c4:	3330      	adds	r3, #48	; 0x30
 80089c6:	332c      	adds	r3, #44	; 0x2c
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fe fc5d 	bl	8007288 <ld_dword>
 80089ce:	4602      	mov	r2, r0
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80089d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	647b      	str	r3, [r7, #68]	; 0x44
 80089dc:	e01f      	b.n	8008a1e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	891b      	ldrh	r3, [r3, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <find_volume+0x366>
 80089e6:	230d      	movs	r3, #13
 80089e8:	e08e      	b.n	8008b08 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80089ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ec:	6a1a      	ldr	r2, [r3, #32]
 80089ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f0:	441a      	add	r2, r3
 80089f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80089f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d103      	bne.n	8008a06 <find_volume+0x382>
 80089fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	e00a      	b.n	8008a1c <find_volume+0x398>
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	695a      	ldr	r2, [r3, #20]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	4413      	add	r3, r2
 8008a10:	085a      	lsrs	r2, r3, #1
 8008a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008a1c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a24:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008a28:	0a5b      	lsrs	r3, r3, #9
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d201      	bcs.n	8008a32 <find_volume+0x3ae>
 8008a2e:	230d      	movs	r3, #13
 8008a30:	e06a      	b.n	8008b08 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a38:	611a      	str	r2, [r3, #16]
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3c:	691a      	ldr	r2, [r3, #16]
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a40:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	2280      	movs	r2, #128	; 0x80
 8008a46:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008a48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d149      	bne.n	8008ae4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	3330      	adds	r3, #48	; 0x30
 8008a54:	3330      	adds	r3, #48	; 0x30
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fbfe 	bl	8007258 <ld_word>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d140      	bne.n	8008ae4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a64:	3301      	adds	r3, #1
 8008a66:	4619      	mov	r1, r3
 8008a68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a6a:	f7fe fea5 	bl	80077b8 <move_window>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d137      	bne.n	8008ae4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a76:	2200      	movs	r2, #0
 8008a78:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	3330      	adds	r3, #48	; 0x30
 8008a7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe fbe8 	bl	8007258 <ld_word>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d127      	bne.n	8008ae4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	3330      	adds	r3, #48	; 0x30
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe fbf5 	bl	8007288 <ld_dword>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	4b1b      	ldr	r3, [pc, #108]	; (8008b10 <find_volume+0x48c>)
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d11e      	bne.n	8008ae4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa8:	3330      	adds	r3, #48	; 0x30
 8008aaa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fbea 	bl	8007288 <ld_dword>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	4b17      	ldr	r3, [pc, #92]	; (8008b14 <find_volume+0x490>)
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d113      	bne.n	8008ae4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	3330      	adds	r3, #48	; 0x30
 8008ac0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fe fbdf 	bl	8007288 <ld_dword>
 8008aca:	4602      	mov	r2, r0
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad2:	3330      	adds	r3, #48	; 0x30
 8008ad4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe fbd5 	bl	8007288 <ld_dword>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008aea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008aec:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <find_volume+0x494>)
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	3301      	adds	r3, #1
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	4b08      	ldr	r3, [pc, #32]	; (8008b18 <find_volume+0x494>)
 8008af6:	801a      	strh	r2, [r3, #0]
 8008af8:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <find_volume+0x494>)
 8008afa:	881a      	ldrh	r2, [r3, #0]
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008b00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b02:	f7fe fdf1 	bl	80076e8 <clear_lock>
#endif
	return FR_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3758      	adds	r7, #88	; 0x58
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	41615252 	.word	0x41615252
 8008b14:	61417272 	.word	0x61417272
 8008b18:	20000520 	.word	0x20000520

08008b1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008b26:	2309      	movs	r3, #9
 8008b28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01c      	beq.n	8008b6a <validate+0x4e>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d018      	beq.n	8008b6a <validate+0x4e>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d013      	beq.n	8008b6a <validate+0x4e>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	889a      	ldrh	r2, [r3, #4]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	88db      	ldrh	r3, [r3, #6]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d10c      	bne.n	8008b6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fae0 	bl	800711c <disk_status>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <validate+0x4e>
			res = FR_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d102      	bne.n	8008b76 <validate+0x5a>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	e000      	b.n	8008b78 <validate+0x5c>
 8008b76:	2300      	movs	r3, #0
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	6013      	str	r3, [r2, #0]
	return res;
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	4613      	mov	r3, r2
 8008b94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008b9a:	f107 0310 	add.w	r3, r7, #16
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff fcd5 	bl	800854e <get_ldnumber>
 8008ba4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	da01      	bge.n	8008bb0 <f_mount+0x28>
 8008bac:	230b      	movs	r3, #11
 8008bae:	e02b      	b.n	8008c08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008bb0:	4a17      	ldr	r2, [pc, #92]	; (8008c10 <f_mount+0x88>)
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008bc0:	69b8      	ldr	r0, [r7, #24]
 8008bc2:	f7fe fd91 	bl	80076e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	490d      	ldr	r1, [pc, #52]	; (8008c10 <f_mount+0x88>)
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <f_mount+0x66>
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d001      	beq.n	8008bf2 <f_mount+0x6a>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e00a      	b.n	8008c08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008bf2:	f107 010c 	add.w	r1, r7, #12
 8008bf6:	f107 0308 	add.w	r3, r7, #8
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7ff fd41 	bl	8008684 <find_volume>
 8008c02:	4603      	mov	r3, r0
 8008c04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3720      	adds	r7, #32
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	2000051c 	.word	0x2000051c

08008c14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b098      	sub	sp, #96	; 0x60
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <f_open+0x18>
 8008c28:	2309      	movs	r3, #9
 8008c2a:	e1ad      	b.n	8008f88 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008c34:	79fa      	ldrb	r2, [r7, #7]
 8008c36:	f107 0110 	add.w	r1, r7, #16
 8008c3a:	f107 0308 	add.w	r3, r7, #8
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff fd20 	bl	8008684 <find_volume>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008c4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f040 8191 	bne.w	8008f76 <f_open+0x362>
		dj.obj.fs = fs;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	f107 0314 	add.w	r3, r7, #20
 8008c5e:	4611      	mov	r1, r2
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7ff fc03 	bl	800846c <follow_path>
 8008c66:	4603      	mov	r3, r0
 8008c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d11a      	bne.n	8008caa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008c74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c78:	b25b      	sxtb	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	da03      	bge.n	8008c86 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008c7e:	2306      	movs	r3, #6
 8008c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008c84:	e011      	b.n	8008caa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	f023 0301 	bic.w	r3, r3, #1
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bf14      	ite	ne
 8008c90:	2301      	movne	r3, #1
 8008c92:	2300      	moveq	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	461a      	mov	r2, r3
 8008c98:	f107 0314 	add.w	r3, r7, #20
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe fbda 	bl	8007458 <chk_lock>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	f003 031c 	and.w	r3, r3, #28
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d07f      	beq.n	8008db4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008cb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d017      	beq.n	8008cec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008cbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d10e      	bne.n	8008ce2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008cc4:	f7fe fc24 	bl	8007510 <enq_lock>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d006      	beq.n	8008cdc <f_open+0xc8>
 8008cce:	f107 0314 	add.w	r3, r7, #20
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff fb03 	bl	80082de <dir_register>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	e000      	b.n	8008cde <f_open+0xca>
 8008cdc:	2312      	movs	r3, #18
 8008cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008ce2:	79fb      	ldrb	r3, [r7, #7]
 8008ce4:	f043 0308 	orr.w	r3, r3, #8
 8008ce8:	71fb      	strb	r3, [r7, #7]
 8008cea:	e010      	b.n	8008d0e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008cec:	7ebb      	ldrb	r3, [r7, #26]
 8008cee:	f003 0311 	and.w	r3, r3, #17
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <f_open+0xea>
					res = FR_DENIED;
 8008cf6:	2307      	movs	r3, #7
 8008cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008cfc:	e007      	b.n	8008d0e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <f_open+0xfa>
 8008d08:	2308      	movs	r3, #8
 8008d0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d168      	bne.n	8008de8 <f_open+0x1d4>
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	f003 0308 	and.w	r3, r3, #8
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d063      	beq.n	8008de8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008d20:	f7fe f976 	bl	8007010 <get_fattime>
 8008d24:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d28:	330e      	adds	r3, #14
 8008d2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fe fae9 	bl	8007304 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d34:	3316      	adds	r3, #22
 8008d36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fe fae3 	bl	8007304 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d40:	330b      	adds	r3, #11
 8008d42:	2220      	movs	r2, #32
 8008d44:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff fa32 	bl	80081b6 <ld_clust>
 8008d52:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff fa4a 	bl	80081f4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d62:	331c      	adds	r3, #28
 8008d64:	2100      	movs	r1, #0
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe facc 	bl	8007304 <st_dword>
					fs->wflag = 1;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d037      	beq.n	8008de8 <f_open+0x1d4>
						dw = fs->winsect;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008d7e:	f107 0314 	add.w	r3, r7, #20
 8008d82:	2200      	movs	r2, #0
 8008d84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe ff5d 	bl	8007c46 <remove_chain>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008d92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d126      	bne.n	8008de8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe fd0a 	bl	80077b8 <move_window>
 8008da4:	4603      	mov	r3, r0
 8008da6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dae:	3a01      	subs	r2, #1
 8008db0:	60da      	str	r2, [r3, #12]
 8008db2:	e019      	b.n	8008de8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008db4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d115      	bne.n	8008de8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008dbc:	7ebb      	ldrb	r3, [r7, #26]
 8008dbe:	f003 0310 	and.w	r3, r3, #16
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <f_open+0x1ba>
					res = FR_NO_FILE;
 8008dc6:	2304      	movs	r3, #4
 8008dc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008dcc:	e00c      	b.n	8008de8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	f003 0302 	and.w	r3, r3, #2
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <f_open+0x1d4>
 8008dd8:	7ebb      	ldrb	r3, [r7, #26]
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <f_open+0x1d4>
						res = FR_DENIED;
 8008de2:	2307      	movs	r3, #7
 8008de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008de8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d128      	bne.n	8008e42 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008df0:	79fb      	ldrb	r3, [r7, #7]
 8008df2:	f003 0308 	and.w	r3, r3, #8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e00:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	f023 0301 	bic.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	bf14      	ite	ne
 8008e1a:	2301      	movne	r3, #1
 8008e1c:	2300      	moveq	r3, #0
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	461a      	mov	r2, r3
 8008e22:	f107 0314 	add.w	r3, r7, #20
 8008e26:	4611      	mov	r1, r2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fe fb93 	bl	8007554 <inc_lock>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <f_open+0x22e>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008e42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f040 8095 	bne.w	8008f76 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7ff f9af 	bl	80081b6 <ld_clust>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e60:	331c      	adds	r3, #28
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe fa10 	bl	8007288 <ld_dword>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	88da      	ldrh	r2, [r3, #6]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	79fa      	ldrb	r2, [r7, #7]
 8008e86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3330      	adds	r3, #48	; 0x30
 8008e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fe fa7a 	bl	800739e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	f003 0320 	and.w	r3, r3, #32
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d060      	beq.n	8008f76 <f_open+0x362>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d05c      	beq.n	8008f76 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	895b      	ldrh	r3, [r3, #10]
 8008ec8:	025b      	lsls	r3, r3, #9
 8008eca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ed8:	e016      	b.n	8008f08 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe fd25 	bl	800792e <get_fat>
 8008ee4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d802      	bhi.n	8008ef2 <f_open+0x2de>
 8008eec:	2302      	movs	r3, #2
 8008eee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef8:	d102      	bne.n	8008f00 <f_open+0x2ec>
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	657b      	str	r3, [r7, #84]	; 0x54
 8008f08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d103      	bne.n	8008f18 <f_open+0x304>
 8008f10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d8e0      	bhi.n	8008eda <f_open+0x2c6>
				}
				fp->clust = clst;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d127      	bne.n	8008f76 <f_open+0x362>
 8008f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d022      	beq.n	8008f76 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe fcdb 	bl	80078f0 <clust2sect>
 8008f3a:	6478      	str	r0, [r7, #68]	; 0x44
 8008f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d103      	bne.n	8008f4a <f_open+0x336>
						res = FR_INT_ERR;
 8008f42:	2302      	movs	r3, #2
 8008f44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008f48:	e015      	b.n	8008f76 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f4c:	0a5a      	lsrs	r2, r3, #9
 8008f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f50:	441a      	add	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	7858      	ldrb	r0, [r3, #1]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6a1a      	ldr	r2, [r3, #32]
 8008f64:	2301      	movs	r3, #1
 8008f66:	f7fe f919 	bl	800719c <disk_read>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <f_open+0x362>
 8008f70:	2301      	movs	r3, #1
 8008f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008f76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <f_open+0x370>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3760      	adds	r7, #96	; 0x60
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b08c      	sub	sp, #48	; 0x30
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f107 0210 	add.w	r2, r7, #16
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff fdb3 	bl	8008b1c <validate>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d107      	bne.n	8008fd4 <f_write+0x44>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	7d5b      	ldrb	r3, [r3, #21]
 8008fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <f_write+0x4a>
 8008fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008fd8:	e14b      	b.n	8009272 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	7d1b      	ldrb	r3, [r3, #20]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <f_write+0x5a>
 8008fe6:	2307      	movs	r3, #7
 8008fe8:	e143      	b.n	8009272 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	699a      	ldr	r2, [r3, #24]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	441a      	add	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	f080 812d 	bcs.w	8009256 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	43db      	mvns	r3, r3
 8009002:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009004:	e127      	b.n	8009256 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900e:	2b00      	cmp	r3, #0
 8009010:	f040 80e3 	bne.w	80091da <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	0a5b      	lsrs	r3, r3, #9
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	8952      	ldrh	r2, [r2, #10]
 800901e:	3a01      	subs	r2, #1
 8009020:	4013      	ands	r3, r2
 8009022:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d143      	bne.n	80090b2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10c      	bne.n	800904c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	2b00      	cmp	r3, #0
 800903c:	d11a      	bne.n	8009074 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2100      	movs	r1, #0
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe fe64 	bl	8007d10 <create_chain>
 8009048:	62b8      	str	r0, [r7, #40]	; 0x28
 800904a:	e013      	b.n	8009074 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d007      	beq.n	8009064 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	4619      	mov	r1, r3
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f7fe fef0 	bl	8007e40 <clmt_clust>
 8009060:	62b8      	str	r0, [r7, #40]	; 0x28
 8009062:	e007      	b.n	8009074 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	4619      	mov	r1, r3
 800906c:	4610      	mov	r0, r2
 800906e:	f7fe fe4f 	bl	8007d10 <create_chain>
 8009072:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 80f2 	beq.w	8009260 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907e:	2b01      	cmp	r3, #1
 8009080:	d104      	bne.n	800908c <f_write+0xfc>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2202      	movs	r2, #2
 8009086:	755a      	strb	r2, [r3, #21]
 8009088:	2302      	movs	r3, #2
 800908a:	e0f2      	b.n	8009272 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009092:	d104      	bne.n	800909e <f_write+0x10e>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	755a      	strb	r2, [r3, #21]
 800909a:	2301      	movs	r3, #1
 800909c:	e0e9      	b.n	8009272 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090a2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d102      	bne.n	80090b2 <f_write+0x122>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	7d1b      	ldrb	r3, [r3, #20]
 80090b6:	b25b      	sxtb	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	da18      	bge.n	80090ee <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	7858      	ldrb	r0, [r3, #1]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6a1a      	ldr	r2, [r3, #32]
 80090ca:	2301      	movs	r3, #1
 80090cc:	f7fe f886 	bl	80071dc <disk_write>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <f_write+0x150>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2201      	movs	r2, #1
 80090da:	755a      	strb	r2, [r3, #21]
 80090dc:	2301      	movs	r3, #1
 80090de:	e0c8      	b.n	8009272 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	7d1b      	ldrb	r3, [r3, #20]
 80090e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	4619      	mov	r1, r3
 80090f6:	4610      	mov	r0, r2
 80090f8:	f7fe fbfa 	bl	80078f0 <clust2sect>
 80090fc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <f_write+0x17e>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2202      	movs	r2, #2
 8009108:	755a      	strb	r2, [r3, #21]
 800910a:	2302      	movs	r3, #2
 800910c:	e0b1      	b.n	8009272 <f_write+0x2e2>
			sect += csect;
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	4413      	add	r3, r2
 8009114:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	0a5b      	lsrs	r3, r3, #9
 800911a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800911c:	6a3b      	ldr	r3, [r7, #32]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d03c      	beq.n	800919c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	4413      	add	r3, r2
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	8952      	ldrh	r2, [r2, #10]
 800912c:	4293      	cmp	r3, r2
 800912e:	d905      	bls.n	800913c <f_write+0x1ac>
					cc = fs->csize - csect;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	895b      	ldrh	r3, [r3, #10]
 8009134:	461a      	mov	r2, r3
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	7858      	ldrb	r0, [r3, #1]
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	69f9      	ldr	r1, [r7, #28]
 8009146:	f7fe f849 	bl	80071dc <disk_write>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <f_write+0x1ca>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2201      	movs	r2, #1
 8009154:	755a      	strb	r2, [r3, #21]
 8009156:	2301      	movs	r3, #1
 8009158:	e08b      	b.n	8009272 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6a1a      	ldr	r2, [r3, #32]
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	6a3a      	ldr	r2, [r7, #32]
 8009164:	429a      	cmp	r2, r3
 8009166:	d915      	bls.n	8009194 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6a1a      	ldr	r2, [r3, #32]
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	025b      	lsls	r3, r3, #9
 8009178:	69fa      	ldr	r2, [r7, #28]
 800917a:	4413      	add	r3, r2
 800917c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009180:	4619      	mov	r1, r3
 8009182:	f7fe f8eb 	bl	800735c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	7d1b      	ldrb	r3, [r3, #20]
 800918a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918e:	b2da      	uxtb	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	025b      	lsls	r3, r3, #9
 8009198:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800919a:	e03f      	b.n	800921c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d016      	beq.n	80091d4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	699a      	ldr	r2, [r3, #24]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d210      	bcs.n	80091d4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	7858      	ldrb	r0, [r3, #1]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091bc:	2301      	movs	r3, #1
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	f7fd ffec 	bl	800719c <disk_read>
 80091c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d004      	beq.n	80091d4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2201      	movs	r2, #1
 80091ce:	755a      	strb	r2, [r3, #21]
 80091d0:	2301      	movs	r3, #1
 80091d2:	e04e      	b.n	8009272 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80091e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80091e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d901      	bls.n	80091f4 <f_write+0x264>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009202:	4413      	add	r3, r2
 8009204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009206:	69f9      	ldr	r1, [r7, #28]
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe f8a7 	bl	800735c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	7d1b      	ldrb	r3, [r3, #20]
 8009212:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009216:	b2da      	uxtb	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800921c:	69fa      	ldr	r2, [r7, #28]
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	4413      	add	r3, r2
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	699a      	ldr	r2, [r3, #24]
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	441a      	add	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	619a      	str	r2, [r3, #24]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	429a      	cmp	r2, r3
 800923a:	bf38      	it	cc
 800923c:	461a      	movcc	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	60da      	str	r2, [r3, #12]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	441a      	add	r2, r3
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	f47f aed4 	bne.w	8009006 <f_write+0x76>
 800925e:	e000      	b.n	8009262 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009260:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	7d1b      	ldrb	r3, [r3, #20]
 8009266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800926a:	b2da      	uxtb	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3730      	adds	r7, #48	; 0x30
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b086      	sub	sp, #24
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f107 0208 	add.w	r2, r7, #8
 8009288:	4611      	mov	r1, r2
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff fc46 	bl	8008b1c <validate>
 8009290:	4603      	mov	r3, r0
 8009292:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009294:	7dfb      	ldrb	r3, [r7, #23]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d168      	bne.n	800936c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7d1b      	ldrb	r3, [r3, #20]
 800929e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d062      	beq.n	800936c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	7d1b      	ldrb	r3, [r3, #20]
 80092aa:	b25b      	sxtb	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da15      	bge.n	80092dc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	7858      	ldrb	r0, [r3, #1]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1a      	ldr	r2, [r3, #32]
 80092be:	2301      	movs	r3, #1
 80092c0:	f7fd ff8c 	bl	80071dc <disk_write>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <f_sync+0x54>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e04f      	b.n	800936e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7d1b      	ldrb	r3, [r3, #20]
 80092d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80092dc:	f7fd fe98 	bl	8007010 <get_fattime>
 80092e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f7fe fa64 	bl	80077b8 <move_window>
 80092f0:	4603      	mov	r3, r0
 80092f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d138      	bne.n	800936c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	330b      	adds	r3, #11
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	330b      	adds	r3, #11
 800930a:	f042 0220 	orr.w	r2, r2, #32
 800930e:	b2d2      	uxtb	r2, r2
 8009310:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	461a      	mov	r2, r3
 800931c:	68f9      	ldr	r1, [r7, #12]
 800931e:	f7fe ff69 	bl	80081f4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f103 021c 	add.w	r2, r3, #28
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f7fd ffe8 	bl	8007304 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3316      	adds	r3, #22
 8009338:	6939      	ldr	r1, [r7, #16]
 800933a:	4618      	mov	r0, r3
 800933c:	f7fd ffe2 	bl	8007304 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	3312      	adds	r3, #18
 8009344:	2100      	movs	r1, #0
 8009346:	4618      	mov	r0, r3
 8009348:	f7fd ffc1 	bl	80072ce <st_word>
					fs->wflag = 1;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2201      	movs	r2, #1
 8009350:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fa5d 	bl	8007814 <sync_fs>
 800935a:	4603      	mov	r3, r0
 800935c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	7d1b      	ldrb	r3, [r3, #20]
 8009362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009366:	b2da      	uxtb	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800936c:	7dfb      	ldrb	r3, [r7, #23]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff ff7b 	bl	800927a <f_sync>
 8009384:	4603      	mov	r3, r0
 8009386:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d118      	bne.n	80093c0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f107 0208 	add.w	r2, r7, #8
 8009394:	4611      	mov	r1, r2
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff fbc0 	bl	8008b1c <validate>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10c      	bne.n	80093c0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe f960 	bl	8007670 <dec_lock>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d102      	bne.n	80093c0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
	...

080093cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80093da:	2301      	movs	r3, #1
 80093dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80093e2:	4b1f      	ldr	r3, [pc, #124]	; (8009460 <FATFS_LinkDriverEx+0x94>)
 80093e4:	7a5b      	ldrb	r3, [r3, #9]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d131      	bne.n	8009450 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80093ec:	4b1c      	ldr	r3, [pc, #112]	; (8009460 <FATFS_LinkDriverEx+0x94>)
 80093ee:	7a5b      	ldrb	r3, [r3, #9]
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	461a      	mov	r2, r3
 80093f4:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <FATFS_LinkDriverEx+0x94>)
 80093f6:	2100      	movs	r1, #0
 80093f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80093fa:	4b19      	ldr	r3, [pc, #100]	; (8009460 <FATFS_LinkDriverEx+0x94>)
 80093fc:	7a5b      	ldrb	r3, [r3, #9]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	4a17      	ldr	r2, [pc, #92]	; (8009460 <FATFS_LinkDriverEx+0x94>)
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800940a:	4b15      	ldr	r3, [pc, #84]	; (8009460 <FATFS_LinkDriverEx+0x94>)
 800940c:	7a5b      	ldrb	r3, [r3, #9]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	461a      	mov	r2, r3
 8009412:	4b13      	ldr	r3, [pc, #76]	; (8009460 <FATFS_LinkDriverEx+0x94>)
 8009414:	4413      	add	r3, r2
 8009416:	79fa      	ldrb	r2, [r7, #7]
 8009418:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800941a:	4b11      	ldr	r3, [pc, #68]	; (8009460 <FATFS_LinkDriverEx+0x94>)
 800941c:	7a5b      	ldrb	r3, [r3, #9]
 800941e:	b2db      	uxtb	r3, r3
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	b2d1      	uxtb	r1, r2
 8009424:	4a0e      	ldr	r2, [pc, #56]	; (8009460 <FATFS_LinkDriverEx+0x94>)
 8009426:	7251      	strb	r1, [r2, #9]
 8009428:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800942a:	7dbb      	ldrb	r3, [r7, #22]
 800942c:	3330      	adds	r3, #48	; 0x30
 800942e:	b2da      	uxtb	r2, r3
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	3301      	adds	r3, #1
 8009438:	223a      	movs	r2, #58	; 0x3a
 800943a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	3302      	adds	r3, #2
 8009440:	222f      	movs	r2, #47	; 0x2f
 8009442:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	3303      	adds	r3, #3
 8009448:	2200      	movs	r2, #0
 800944a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009450:	7dfb      	ldrb	r3, [r7, #23]
}
 8009452:	4618      	mov	r0, r3
 8009454:	371c      	adds	r7, #28
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	20000544 	.word	0x20000544

08009464 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800946e:	2200      	movs	r2, #0
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7ff ffaa 	bl	80093cc <FATFS_LinkDriverEx>
 8009478:	4603      	mov	r3, r0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
	...

08009484 <__errno>:
 8009484:	4b01      	ldr	r3, [pc, #4]	; (800948c <__errno+0x8>)
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	2000042c 	.word	0x2000042c

08009490 <__libc_init_array>:
 8009490:	b570      	push	{r4, r5, r6, lr}
 8009492:	4e0d      	ldr	r6, [pc, #52]	; (80094c8 <__libc_init_array+0x38>)
 8009494:	4c0d      	ldr	r4, [pc, #52]	; (80094cc <__libc_init_array+0x3c>)
 8009496:	1ba4      	subs	r4, r4, r6
 8009498:	10a4      	asrs	r4, r4, #2
 800949a:	2500      	movs	r5, #0
 800949c:	42a5      	cmp	r5, r4
 800949e:	d109      	bne.n	80094b4 <__libc_init_array+0x24>
 80094a0:	4e0b      	ldr	r6, [pc, #44]	; (80094d0 <__libc_init_array+0x40>)
 80094a2:	4c0c      	ldr	r4, [pc, #48]	; (80094d4 <__libc_init_array+0x44>)
 80094a4:	f000 fc26 	bl	8009cf4 <_init>
 80094a8:	1ba4      	subs	r4, r4, r6
 80094aa:	10a4      	asrs	r4, r4, #2
 80094ac:	2500      	movs	r5, #0
 80094ae:	42a5      	cmp	r5, r4
 80094b0:	d105      	bne.n	80094be <__libc_init_array+0x2e>
 80094b2:	bd70      	pop	{r4, r5, r6, pc}
 80094b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094b8:	4798      	blx	r3
 80094ba:	3501      	adds	r5, #1
 80094bc:	e7ee      	b.n	800949c <__libc_init_array+0xc>
 80094be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094c2:	4798      	blx	r3
 80094c4:	3501      	adds	r5, #1
 80094c6:	e7f2      	b.n	80094ae <__libc_init_array+0x1e>
 80094c8:	08009e78 	.word	0x08009e78
 80094cc:	08009e78 	.word	0x08009e78
 80094d0:	08009e78 	.word	0x08009e78
 80094d4:	08009e7c 	.word	0x08009e7c

080094d8 <memset>:
 80094d8:	4402      	add	r2, r0
 80094da:	4603      	mov	r3, r0
 80094dc:	4293      	cmp	r3, r2
 80094de:	d100      	bne.n	80094e2 <memset+0xa>
 80094e0:	4770      	bx	lr
 80094e2:	f803 1b01 	strb.w	r1, [r3], #1
 80094e6:	e7f9      	b.n	80094dc <memset+0x4>

080094e8 <siprintf>:
 80094e8:	b40e      	push	{r1, r2, r3}
 80094ea:	b500      	push	{lr}
 80094ec:	b09c      	sub	sp, #112	; 0x70
 80094ee:	ab1d      	add	r3, sp, #116	; 0x74
 80094f0:	9002      	str	r0, [sp, #8]
 80094f2:	9006      	str	r0, [sp, #24]
 80094f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094f8:	4809      	ldr	r0, [pc, #36]	; (8009520 <siprintf+0x38>)
 80094fa:	9107      	str	r1, [sp, #28]
 80094fc:	9104      	str	r1, [sp, #16]
 80094fe:	4909      	ldr	r1, [pc, #36]	; (8009524 <siprintf+0x3c>)
 8009500:	f853 2b04 	ldr.w	r2, [r3], #4
 8009504:	9105      	str	r1, [sp, #20]
 8009506:	6800      	ldr	r0, [r0, #0]
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	a902      	add	r1, sp, #8
 800950c:	f000 f866 	bl	80095dc <_svfiprintf_r>
 8009510:	9b02      	ldr	r3, [sp, #8]
 8009512:	2200      	movs	r2, #0
 8009514:	701a      	strb	r2, [r3, #0]
 8009516:	b01c      	add	sp, #112	; 0x70
 8009518:	f85d eb04 	ldr.w	lr, [sp], #4
 800951c:	b003      	add	sp, #12
 800951e:	4770      	bx	lr
 8009520:	2000042c 	.word	0x2000042c
 8009524:	ffff0208 	.word	0xffff0208

08009528 <__ssputs_r>:
 8009528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800952c:	688e      	ldr	r6, [r1, #8]
 800952e:	429e      	cmp	r6, r3
 8009530:	4682      	mov	sl, r0
 8009532:	460c      	mov	r4, r1
 8009534:	4690      	mov	r8, r2
 8009536:	4699      	mov	r9, r3
 8009538:	d837      	bhi.n	80095aa <__ssputs_r+0x82>
 800953a:	898a      	ldrh	r2, [r1, #12]
 800953c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009540:	d031      	beq.n	80095a6 <__ssputs_r+0x7e>
 8009542:	6825      	ldr	r5, [r4, #0]
 8009544:	6909      	ldr	r1, [r1, #16]
 8009546:	1a6f      	subs	r7, r5, r1
 8009548:	6965      	ldr	r5, [r4, #20]
 800954a:	2302      	movs	r3, #2
 800954c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009550:	fb95 f5f3 	sdiv	r5, r5, r3
 8009554:	f109 0301 	add.w	r3, r9, #1
 8009558:	443b      	add	r3, r7
 800955a:	429d      	cmp	r5, r3
 800955c:	bf38      	it	cc
 800955e:	461d      	movcc	r5, r3
 8009560:	0553      	lsls	r3, r2, #21
 8009562:	d530      	bpl.n	80095c6 <__ssputs_r+0x9e>
 8009564:	4629      	mov	r1, r5
 8009566:	f000 fb2b 	bl	8009bc0 <_malloc_r>
 800956a:	4606      	mov	r6, r0
 800956c:	b950      	cbnz	r0, 8009584 <__ssputs_r+0x5c>
 800956e:	230c      	movs	r3, #12
 8009570:	f8ca 3000 	str.w	r3, [sl]
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009584:	463a      	mov	r2, r7
 8009586:	6921      	ldr	r1, [r4, #16]
 8009588:	f000 faa8 	bl	8009adc <memcpy>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	6126      	str	r6, [r4, #16]
 800959a:	6165      	str	r5, [r4, #20]
 800959c:	443e      	add	r6, r7
 800959e:	1bed      	subs	r5, r5, r7
 80095a0:	6026      	str	r6, [r4, #0]
 80095a2:	60a5      	str	r5, [r4, #8]
 80095a4:	464e      	mov	r6, r9
 80095a6:	454e      	cmp	r6, r9
 80095a8:	d900      	bls.n	80095ac <__ssputs_r+0x84>
 80095aa:	464e      	mov	r6, r9
 80095ac:	4632      	mov	r2, r6
 80095ae:	4641      	mov	r1, r8
 80095b0:	6820      	ldr	r0, [r4, #0]
 80095b2:	f000 fa9e 	bl	8009af2 <memmove>
 80095b6:	68a3      	ldr	r3, [r4, #8]
 80095b8:	1b9b      	subs	r3, r3, r6
 80095ba:	60a3      	str	r3, [r4, #8]
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	441e      	add	r6, r3
 80095c0:	6026      	str	r6, [r4, #0]
 80095c2:	2000      	movs	r0, #0
 80095c4:	e7dc      	b.n	8009580 <__ssputs_r+0x58>
 80095c6:	462a      	mov	r2, r5
 80095c8:	f000 fb54 	bl	8009c74 <_realloc_r>
 80095cc:	4606      	mov	r6, r0
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d1e2      	bne.n	8009598 <__ssputs_r+0x70>
 80095d2:	6921      	ldr	r1, [r4, #16]
 80095d4:	4650      	mov	r0, sl
 80095d6:	f000 faa5 	bl	8009b24 <_free_r>
 80095da:	e7c8      	b.n	800956e <__ssputs_r+0x46>

080095dc <_svfiprintf_r>:
 80095dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e0:	461d      	mov	r5, r3
 80095e2:	898b      	ldrh	r3, [r1, #12]
 80095e4:	061f      	lsls	r7, r3, #24
 80095e6:	b09d      	sub	sp, #116	; 0x74
 80095e8:	4680      	mov	r8, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	4616      	mov	r6, r2
 80095ee:	d50f      	bpl.n	8009610 <_svfiprintf_r+0x34>
 80095f0:	690b      	ldr	r3, [r1, #16]
 80095f2:	b96b      	cbnz	r3, 8009610 <_svfiprintf_r+0x34>
 80095f4:	2140      	movs	r1, #64	; 0x40
 80095f6:	f000 fae3 	bl	8009bc0 <_malloc_r>
 80095fa:	6020      	str	r0, [r4, #0]
 80095fc:	6120      	str	r0, [r4, #16]
 80095fe:	b928      	cbnz	r0, 800960c <_svfiprintf_r+0x30>
 8009600:	230c      	movs	r3, #12
 8009602:	f8c8 3000 	str.w	r3, [r8]
 8009606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800960a:	e0c8      	b.n	800979e <_svfiprintf_r+0x1c2>
 800960c:	2340      	movs	r3, #64	; 0x40
 800960e:	6163      	str	r3, [r4, #20]
 8009610:	2300      	movs	r3, #0
 8009612:	9309      	str	r3, [sp, #36]	; 0x24
 8009614:	2320      	movs	r3, #32
 8009616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800961a:	2330      	movs	r3, #48	; 0x30
 800961c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009620:	9503      	str	r5, [sp, #12]
 8009622:	f04f 0b01 	mov.w	fp, #1
 8009626:	4637      	mov	r7, r6
 8009628:	463d      	mov	r5, r7
 800962a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800962e:	b10b      	cbz	r3, 8009634 <_svfiprintf_r+0x58>
 8009630:	2b25      	cmp	r3, #37	; 0x25
 8009632:	d13e      	bne.n	80096b2 <_svfiprintf_r+0xd6>
 8009634:	ebb7 0a06 	subs.w	sl, r7, r6
 8009638:	d00b      	beq.n	8009652 <_svfiprintf_r+0x76>
 800963a:	4653      	mov	r3, sl
 800963c:	4632      	mov	r2, r6
 800963e:	4621      	mov	r1, r4
 8009640:	4640      	mov	r0, r8
 8009642:	f7ff ff71 	bl	8009528 <__ssputs_r>
 8009646:	3001      	adds	r0, #1
 8009648:	f000 80a4 	beq.w	8009794 <_svfiprintf_r+0x1b8>
 800964c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964e:	4453      	add	r3, sl
 8009650:	9309      	str	r3, [sp, #36]	; 0x24
 8009652:	783b      	ldrb	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 809d 	beq.w	8009794 <_svfiprintf_r+0x1b8>
 800965a:	2300      	movs	r3, #0
 800965c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	9307      	str	r3, [sp, #28]
 8009668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800966c:	931a      	str	r3, [sp, #104]	; 0x68
 800966e:	462f      	mov	r7, r5
 8009670:	2205      	movs	r2, #5
 8009672:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009676:	4850      	ldr	r0, [pc, #320]	; (80097b8 <_svfiprintf_r+0x1dc>)
 8009678:	f7f6 fdca 	bl	8000210 <memchr>
 800967c:	9b04      	ldr	r3, [sp, #16]
 800967e:	b9d0      	cbnz	r0, 80096b6 <_svfiprintf_r+0xda>
 8009680:	06d9      	lsls	r1, r3, #27
 8009682:	bf44      	itt	mi
 8009684:	2220      	movmi	r2, #32
 8009686:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800968a:	071a      	lsls	r2, r3, #28
 800968c:	bf44      	itt	mi
 800968e:	222b      	movmi	r2, #43	; 0x2b
 8009690:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009694:	782a      	ldrb	r2, [r5, #0]
 8009696:	2a2a      	cmp	r2, #42	; 0x2a
 8009698:	d015      	beq.n	80096c6 <_svfiprintf_r+0xea>
 800969a:	9a07      	ldr	r2, [sp, #28]
 800969c:	462f      	mov	r7, r5
 800969e:	2000      	movs	r0, #0
 80096a0:	250a      	movs	r5, #10
 80096a2:	4639      	mov	r1, r7
 80096a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096a8:	3b30      	subs	r3, #48	; 0x30
 80096aa:	2b09      	cmp	r3, #9
 80096ac:	d94d      	bls.n	800974a <_svfiprintf_r+0x16e>
 80096ae:	b1b8      	cbz	r0, 80096e0 <_svfiprintf_r+0x104>
 80096b0:	e00f      	b.n	80096d2 <_svfiprintf_r+0xf6>
 80096b2:	462f      	mov	r7, r5
 80096b4:	e7b8      	b.n	8009628 <_svfiprintf_r+0x4c>
 80096b6:	4a40      	ldr	r2, [pc, #256]	; (80097b8 <_svfiprintf_r+0x1dc>)
 80096b8:	1a80      	subs	r0, r0, r2
 80096ba:	fa0b f000 	lsl.w	r0, fp, r0
 80096be:	4318      	orrs	r0, r3
 80096c0:	9004      	str	r0, [sp, #16]
 80096c2:	463d      	mov	r5, r7
 80096c4:	e7d3      	b.n	800966e <_svfiprintf_r+0x92>
 80096c6:	9a03      	ldr	r2, [sp, #12]
 80096c8:	1d11      	adds	r1, r2, #4
 80096ca:	6812      	ldr	r2, [r2, #0]
 80096cc:	9103      	str	r1, [sp, #12]
 80096ce:	2a00      	cmp	r2, #0
 80096d0:	db01      	blt.n	80096d6 <_svfiprintf_r+0xfa>
 80096d2:	9207      	str	r2, [sp, #28]
 80096d4:	e004      	b.n	80096e0 <_svfiprintf_r+0x104>
 80096d6:	4252      	negs	r2, r2
 80096d8:	f043 0302 	orr.w	r3, r3, #2
 80096dc:	9207      	str	r2, [sp, #28]
 80096de:	9304      	str	r3, [sp, #16]
 80096e0:	783b      	ldrb	r3, [r7, #0]
 80096e2:	2b2e      	cmp	r3, #46	; 0x2e
 80096e4:	d10c      	bne.n	8009700 <_svfiprintf_r+0x124>
 80096e6:	787b      	ldrb	r3, [r7, #1]
 80096e8:	2b2a      	cmp	r3, #42	; 0x2a
 80096ea:	d133      	bne.n	8009754 <_svfiprintf_r+0x178>
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	1d1a      	adds	r2, r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	9203      	str	r2, [sp, #12]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	bfb8      	it	lt
 80096f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80096fc:	3702      	adds	r7, #2
 80096fe:	9305      	str	r3, [sp, #20]
 8009700:	4d2e      	ldr	r5, [pc, #184]	; (80097bc <_svfiprintf_r+0x1e0>)
 8009702:	7839      	ldrb	r1, [r7, #0]
 8009704:	2203      	movs	r2, #3
 8009706:	4628      	mov	r0, r5
 8009708:	f7f6 fd82 	bl	8000210 <memchr>
 800970c:	b138      	cbz	r0, 800971e <_svfiprintf_r+0x142>
 800970e:	2340      	movs	r3, #64	; 0x40
 8009710:	1b40      	subs	r0, r0, r5
 8009712:	fa03 f000 	lsl.w	r0, r3, r0
 8009716:	9b04      	ldr	r3, [sp, #16]
 8009718:	4303      	orrs	r3, r0
 800971a:	3701      	adds	r7, #1
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	7839      	ldrb	r1, [r7, #0]
 8009720:	4827      	ldr	r0, [pc, #156]	; (80097c0 <_svfiprintf_r+0x1e4>)
 8009722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009726:	2206      	movs	r2, #6
 8009728:	1c7e      	adds	r6, r7, #1
 800972a:	f7f6 fd71 	bl	8000210 <memchr>
 800972e:	2800      	cmp	r0, #0
 8009730:	d038      	beq.n	80097a4 <_svfiprintf_r+0x1c8>
 8009732:	4b24      	ldr	r3, [pc, #144]	; (80097c4 <_svfiprintf_r+0x1e8>)
 8009734:	bb13      	cbnz	r3, 800977c <_svfiprintf_r+0x1a0>
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	3307      	adds	r3, #7
 800973a:	f023 0307 	bic.w	r3, r3, #7
 800973e:	3308      	adds	r3, #8
 8009740:	9303      	str	r3, [sp, #12]
 8009742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009744:	444b      	add	r3, r9
 8009746:	9309      	str	r3, [sp, #36]	; 0x24
 8009748:	e76d      	b.n	8009626 <_svfiprintf_r+0x4a>
 800974a:	fb05 3202 	mla	r2, r5, r2, r3
 800974e:	2001      	movs	r0, #1
 8009750:	460f      	mov	r7, r1
 8009752:	e7a6      	b.n	80096a2 <_svfiprintf_r+0xc6>
 8009754:	2300      	movs	r3, #0
 8009756:	3701      	adds	r7, #1
 8009758:	9305      	str	r3, [sp, #20]
 800975a:	4619      	mov	r1, r3
 800975c:	250a      	movs	r5, #10
 800975e:	4638      	mov	r0, r7
 8009760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009764:	3a30      	subs	r2, #48	; 0x30
 8009766:	2a09      	cmp	r2, #9
 8009768:	d903      	bls.n	8009772 <_svfiprintf_r+0x196>
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0c8      	beq.n	8009700 <_svfiprintf_r+0x124>
 800976e:	9105      	str	r1, [sp, #20]
 8009770:	e7c6      	b.n	8009700 <_svfiprintf_r+0x124>
 8009772:	fb05 2101 	mla	r1, r5, r1, r2
 8009776:	2301      	movs	r3, #1
 8009778:	4607      	mov	r7, r0
 800977a:	e7f0      	b.n	800975e <_svfiprintf_r+0x182>
 800977c:	ab03      	add	r3, sp, #12
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	4622      	mov	r2, r4
 8009782:	4b11      	ldr	r3, [pc, #68]	; (80097c8 <_svfiprintf_r+0x1ec>)
 8009784:	a904      	add	r1, sp, #16
 8009786:	4640      	mov	r0, r8
 8009788:	f3af 8000 	nop.w
 800978c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009790:	4681      	mov	r9, r0
 8009792:	d1d6      	bne.n	8009742 <_svfiprintf_r+0x166>
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	065b      	lsls	r3, r3, #25
 8009798:	f53f af35 	bmi.w	8009606 <_svfiprintf_r+0x2a>
 800979c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800979e:	b01d      	add	sp, #116	; 0x74
 80097a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a4:	ab03      	add	r3, sp, #12
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	4622      	mov	r2, r4
 80097aa:	4b07      	ldr	r3, [pc, #28]	; (80097c8 <_svfiprintf_r+0x1ec>)
 80097ac:	a904      	add	r1, sp, #16
 80097ae:	4640      	mov	r0, r8
 80097b0:	f000 f882 	bl	80098b8 <_printf_i>
 80097b4:	e7ea      	b.n	800978c <_svfiprintf_r+0x1b0>
 80097b6:	bf00      	nop
 80097b8:	08009e3c 	.word	0x08009e3c
 80097bc:	08009e42 	.word	0x08009e42
 80097c0:	08009e46 	.word	0x08009e46
 80097c4:	00000000 	.word	0x00000000
 80097c8:	08009529 	.word	0x08009529

080097cc <_printf_common>:
 80097cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d0:	4691      	mov	r9, r2
 80097d2:	461f      	mov	r7, r3
 80097d4:	688a      	ldr	r2, [r1, #8]
 80097d6:	690b      	ldr	r3, [r1, #16]
 80097d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097dc:	4293      	cmp	r3, r2
 80097de:	bfb8      	it	lt
 80097e0:	4613      	movlt	r3, r2
 80097e2:	f8c9 3000 	str.w	r3, [r9]
 80097e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097ea:	4606      	mov	r6, r0
 80097ec:	460c      	mov	r4, r1
 80097ee:	b112      	cbz	r2, 80097f6 <_printf_common+0x2a>
 80097f0:	3301      	adds	r3, #1
 80097f2:	f8c9 3000 	str.w	r3, [r9]
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	0699      	lsls	r1, r3, #26
 80097fa:	bf42      	ittt	mi
 80097fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009800:	3302      	addmi	r3, #2
 8009802:	f8c9 3000 	strmi.w	r3, [r9]
 8009806:	6825      	ldr	r5, [r4, #0]
 8009808:	f015 0506 	ands.w	r5, r5, #6
 800980c:	d107      	bne.n	800981e <_printf_common+0x52>
 800980e:	f104 0a19 	add.w	sl, r4, #25
 8009812:	68e3      	ldr	r3, [r4, #12]
 8009814:	f8d9 2000 	ldr.w	r2, [r9]
 8009818:	1a9b      	subs	r3, r3, r2
 800981a:	42ab      	cmp	r3, r5
 800981c:	dc28      	bgt.n	8009870 <_printf_common+0xa4>
 800981e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	3300      	adds	r3, #0
 8009826:	bf18      	it	ne
 8009828:	2301      	movne	r3, #1
 800982a:	0692      	lsls	r2, r2, #26
 800982c:	d42d      	bmi.n	800988a <_printf_common+0xbe>
 800982e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009832:	4639      	mov	r1, r7
 8009834:	4630      	mov	r0, r6
 8009836:	47c0      	blx	r8
 8009838:	3001      	adds	r0, #1
 800983a:	d020      	beq.n	800987e <_printf_common+0xb2>
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	68e5      	ldr	r5, [r4, #12]
 8009840:	f8d9 2000 	ldr.w	r2, [r9]
 8009844:	f003 0306 	and.w	r3, r3, #6
 8009848:	2b04      	cmp	r3, #4
 800984a:	bf08      	it	eq
 800984c:	1aad      	subeq	r5, r5, r2
 800984e:	68a3      	ldr	r3, [r4, #8]
 8009850:	6922      	ldr	r2, [r4, #16]
 8009852:	bf0c      	ite	eq
 8009854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009858:	2500      	movne	r5, #0
 800985a:	4293      	cmp	r3, r2
 800985c:	bfc4      	itt	gt
 800985e:	1a9b      	subgt	r3, r3, r2
 8009860:	18ed      	addgt	r5, r5, r3
 8009862:	f04f 0900 	mov.w	r9, #0
 8009866:	341a      	adds	r4, #26
 8009868:	454d      	cmp	r5, r9
 800986a:	d11a      	bne.n	80098a2 <_printf_common+0xd6>
 800986c:	2000      	movs	r0, #0
 800986e:	e008      	b.n	8009882 <_printf_common+0xb6>
 8009870:	2301      	movs	r3, #1
 8009872:	4652      	mov	r2, sl
 8009874:	4639      	mov	r1, r7
 8009876:	4630      	mov	r0, r6
 8009878:	47c0      	blx	r8
 800987a:	3001      	adds	r0, #1
 800987c:	d103      	bne.n	8009886 <_printf_common+0xba>
 800987e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009886:	3501      	adds	r5, #1
 8009888:	e7c3      	b.n	8009812 <_printf_common+0x46>
 800988a:	18e1      	adds	r1, r4, r3
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	2030      	movs	r0, #48	; 0x30
 8009890:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009894:	4422      	add	r2, r4
 8009896:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800989a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800989e:	3302      	adds	r3, #2
 80098a0:	e7c5      	b.n	800982e <_printf_common+0x62>
 80098a2:	2301      	movs	r3, #1
 80098a4:	4622      	mov	r2, r4
 80098a6:	4639      	mov	r1, r7
 80098a8:	4630      	mov	r0, r6
 80098aa:	47c0      	blx	r8
 80098ac:	3001      	adds	r0, #1
 80098ae:	d0e6      	beq.n	800987e <_printf_common+0xb2>
 80098b0:	f109 0901 	add.w	r9, r9, #1
 80098b4:	e7d8      	b.n	8009868 <_printf_common+0x9c>
	...

080098b8 <_printf_i>:
 80098b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80098c0:	460c      	mov	r4, r1
 80098c2:	7e09      	ldrb	r1, [r1, #24]
 80098c4:	b085      	sub	sp, #20
 80098c6:	296e      	cmp	r1, #110	; 0x6e
 80098c8:	4617      	mov	r7, r2
 80098ca:	4606      	mov	r6, r0
 80098cc:	4698      	mov	r8, r3
 80098ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098d0:	f000 80b3 	beq.w	8009a3a <_printf_i+0x182>
 80098d4:	d822      	bhi.n	800991c <_printf_i+0x64>
 80098d6:	2963      	cmp	r1, #99	; 0x63
 80098d8:	d036      	beq.n	8009948 <_printf_i+0x90>
 80098da:	d80a      	bhi.n	80098f2 <_printf_i+0x3a>
 80098dc:	2900      	cmp	r1, #0
 80098de:	f000 80b9 	beq.w	8009a54 <_printf_i+0x19c>
 80098e2:	2958      	cmp	r1, #88	; 0x58
 80098e4:	f000 8083 	beq.w	80099ee <_printf_i+0x136>
 80098e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80098f0:	e032      	b.n	8009958 <_printf_i+0xa0>
 80098f2:	2964      	cmp	r1, #100	; 0x64
 80098f4:	d001      	beq.n	80098fa <_printf_i+0x42>
 80098f6:	2969      	cmp	r1, #105	; 0x69
 80098f8:	d1f6      	bne.n	80098e8 <_printf_i+0x30>
 80098fa:	6820      	ldr	r0, [r4, #0]
 80098fc:	6813      	ldr	r3, [r2, #0]
 80098fe:	0605      	lsls	r5, r0, #24
 8009900:	f103 0104 	add.w	r1, r3, #4
 8009904:	d52a      	bpl.n	800995c <_printf_i+0xa4>
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6011      	str	r1, [r2, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	da03      	bge.n	8009916 <_printf_i+0x5e>
 800990e:	222d      	movs	r2, #45	; 0x2d
 8009910:	425b      	negs	r3, r3
 8009912:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009916:	486f      	ldr	r0, [pc, #444]	; (8009ad4 <_printf_i+0x21c>)
 8009918:	220a      	movs	r2, #10
 800991a:	e039      	b.n	8009990 <_printf_i+0xd8>
 800991c:	2973      	cmp	r1, #115	; 0x73
 800991e:	f000 809d 	beq.w	8009a5c <_printf_i+0x1a4>
 8009922:	d808      	bhi.n	8009936 <_printf_i+0x7e>
 8009924:	296f      	cmp	r1, #111	; 0x6f
 8009926:	d020      	beq.n	800996a <_printf_i+0xb2>
 8009928:	2970      	cmp	r1, #112	; 0x70
 800992a:	d1dd      	bne.n	80098e8 <_printf_i+0x30>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	f043 0320 	orr.w	r3, r3, #32
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	e003      	b.n	800993e <_printf_i+0x86>
 8009936:	2975      	cmp	r1, #117	; 0x75
 8009938:	d017      	beq.n	800996a <_printf_i+0xb2>
 800993a:	2978      	cmp	r1, #120	; 0x78
 800993c:	d1d4      	bne.n	80098e8 <_printf_i+0x30>
 800993e:	2378      	movs	r3, #120	; 0x78
 8009940:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009944:	4864      	ldr	r0, [pc, #400]	; (8009ad8 <_printf_i+0x220>)
 8009946:	e055      	b.n	80099f4 <_printf_i+0x13c>
 8009948:	6813      	ldr	r3, [r2, #0]
 800994a:	1d19      	adds	r1, r3, #4
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6011      	str	r1, [r2, #0]
 8009950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009958:	2301      	movs	r3, #1
 800995a:	e08c      	b.n	8009a76 <_printf_i+0x1be>
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6011      	str	r1, [r2, #0]
 8009960:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009964:	bf18      	it	ne
 8009966:	b21b      	sxthne	r3, r3
 8009968:	e7cf      	b.n	800990a <_printf_i+0x52>
 800996a:	6813      	ldr	r3, [r2, #0]
 800996c:	6825      	ldr	r5, [r4, #0]
 800996e:	1d18      	adds	r0, r3, #4
 8009970:	6010      	str	r0, [r2, #0]
 8009972:	0628      	lsls	r0, r5, #24
 8009974:	d501      	bpl.n	800997a <_printf_i+0xc2>
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	e002      	b.n	8009980 <_printf_i+0xc8>
 800997a:	0668      	lsls	r0, r5, #25
 800997c:	d5fb      	bpl.n	8009976 <_printf_i+0xbe>
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	4854      	ldr	r0, [pc, #336]	; (8009ad4 <_printf_i+0x21c>)
 8009982:	296f      	cmp	r1, #111	; 0x6f
 8009984:	bf14      	ite	ne
 8009986:	220a      	movne	r2, #10
 8009988:	2208      	moveq	r2, #8
 800998a:	2100      	movs	r1, #0
 800998c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009990:	6865      	ldr	r5, [r4, #4]
 8009992:	60a5      	str	r5, [r4, #8]
 8009994:	2d00      	cmp	r5, #0
 8009996:	f2c0 8095 	blt.w	8009ac4 <_printf_i+0x20c>
 800999a:	6821      	ldr	r1, [r4, #0]
 800999c:	f021 0104 	bic.w	r1, r1, #4
 80099a0:	6021      	str	r1, [r4, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d13d      	bne.n	8009a22 <_printf_i+0x16a>
 80099a6:	2d00      	cmp	r5, #0
 80099a8:	f040 808e 	bne.w	8009ac8 <_printf_i+0x210>
 80099ac:	4665      	mov	r5, ip
 80099ae:	2a08      	cmp	r2, #8
 80099b0:	d10b      	bne.n	80099ca <_printf_i+0x112>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	07db      	lsls	r3, r3, #31
 80099b6:	d508      	bpl.n	80099ca <_printf_i+0x112>
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	6862      	ldr	r2, [r4, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	bfde      	ittt	le
 80099c0:	2330      	movle	r3, #48	; 0x30
 80099c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099c6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80099ca:	ebac 0305 	sub.w	r3, ip, r5
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	f8cd 8000 	str.w	r8, [sp]
 80099d4:	463b      	mov	r3, r7
 80099d6:	aa03      	add	r2, sp, #12
 80099d8:	4621      	mov	r1, r4
 80099da:	4630      	mov	r0, r6
 80099dc:	f7ff fef6 	bl	80097cc <_printf_common>
 80099e0:	3001      	adds	r0, #1
 80099e2:	d14d      	bne.n	8009a80 <_printf_i+0x1c8>
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099e8:	b005      	add	sp, #20
 80099ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099ee:	4839      	ldr	r0, [pc, #228]	; (8009ad4 <_printf_i+0x21c>)
 80099f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80099f4:	6813      	ldr	r3, [r2, #0]
 80099f6:	6821      	ldr	r1, [r4, #0]
 80099f8:	1d1d      	adds	r5, r3, #4
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6015      	str	r5, [r2, #0]
 80099fe:	060a      	lsls	r2, r1, #24
 8009a00:	d50b      	bpl.n	8009a1a <_printf_i+0x162>
 8009a02:	07ca      	lsls	r2, r1, #31
 8009a04:	bf44      	itt	mi
 8009a06:	f041 0120 	orrmi.w	r1, r1, #32
 8009a0a:	6021      	strmi	r1, [r4, #0]
 8009a0c:	b91b      	cbnz	r3, 8009a16 <_printf_i+0x15e>
 8009a0e:	6822      	ldr	r2, [r4, #0]
 8009a10:	f022 0220 	bic.w	r2, r2, #32
 8009a14:	6022      	str	r2, [r4, #0]
 8009a16:	2210      	movs	r2, #16
 8009a18:	e7b7      	b.n	800998a <_printf_i+0xd2>
 8009a1a:	064d      	lsls	r5, r1, #25
 8009a1c:	bf48      	it	mi
 8009a1e:	b29b      	uxthmi	r3, r3
 8009a20:	e7ef      	b.n	8009a02 <_printf_i+0x14a>
 8009a22:	4665      	mov	r5, ip
 8009a24:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a28:	fb02 3311 	mls	r3, r2, r1, r3
 8009a2c:	5cc3      	ldrb	r3, [r0, r3]
 8009a2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a32:	460b      	mov	r3, r1
 8009a34:	2900      	cmp	r1, #0
 8009a36:	d1f5      	bne.n	8009a24 <_printf_i+0x16c>
 8009a38:	e7b9      	b.n	80099ae <_printf_i+0xf6>
 8009a3a:	6813      	ldr	r3, [r2, #0]
 8009a3c:	6825      	ldr	r5, [r4, #0]
 8009a3e:	6961      	ldr	r1, [r4, #20]
 8009a40:	1d18      	adds	r0, r3, #4
 8009a42:	6010      	str	r0, [r2, #0]
 8009a44:	0628      	lsls	r0, r5, #24
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	d501      	bpl.n	8009a4e <_printf_i+0x196>
 8009a4a:	6019      	str	r1, [r3, #0]
 8009a4c:	e002      	b.n	8009a54 <_printf_i+0x19c>
 8009a4e:	066a      	lsls	r2, r5, #25
 8009a50:	d5fb      	bpl.n	8009a4a <_printf_i+0x192>
 8009a52:	8019      	strh	r1, [r3, #0]
 8009a54:	2300      	movs	r3, #0
 8009a56:	6123      	str	r3, [r4, #16]
 8009a58:	4665      	mov	r5, ip
 8009a5a:	e7b9      	b.n	80099d0 <_printf_i+0x118>
 8009a5c:	6813      	ldr	r3, [r2, #0]
 8009a5e:	1d19      	adds	r1, r3, #4
 8009a60:	6011      	str	r1, [r2, #0]
 8009a62:	681d      	ldr	r5, [r3, #0]
 8009a64:	6862      	ldr	r2, [r4, #4]
 8009a66:	2100      	movs	r1, #0
 8009a68:	4628      	mov	r0, r5
 8009a6a:	f7f6 fbd1 	bl	8000210 <memchr>
 8009a6e:	b108      	cbz	r0, 8009a74 <_printf_i+0x1bc>
 8009a70:	1b40      	subs	r0, r0, r5
 8009a72:	6060      	str	r0, [r4, #4]
 8009a74:	6863      	ldr	r3, [r4, #4]
 8009a76:	6123      	str	r3, [r4, #16]
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a7e:	e7a7      	b.n	80099d0 <_printf_i+0x118>
 8009a80:	6923      	ldr	r3, [r4, #16]
 8009a82:	462a      	mov	r2, r5
 8009a84:	4639      	mov	r1, r7
 8009a86:	4630      	mov	r0, r6
 8009a88:	47c0      	blx	r8
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	d0aa      	beq.n	80099e4 <_printf_i+0x12c>
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	079b      	lsls	r3, r3, #30
 8009a92:	d413      	bmi.n	8009abc <_printf_i+0x204>
 8009a94:	68e0      	ldr	r0, [r4, #12]
 8009a96:	9b03      	ldr	r3, [sp, #12]
 8009a98:	4298      	cmp	r0, r3
 8009a9a:	bfb8      	it	lt
 8009a9c:	4618      	movlt	r0, r3
 8009a9e:	e7a3      	b.n	80099e8 <_printf_i+0x130>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	464a      	mov	r2, r9
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	47c0      	blx	r8
 8009aaa:	3001      	adds	r0, #1
 8009aac:	d09a      	beq.n	80099e4 <_printf_i+0x12c>
 8009aae:	3501      	adds	r5, #1
 8009ab0:	68e3      	ldr	r3, [r4, #12]
 8009ab2:	9a03      	ldr	r2, [sp, #12]
 8009ab4:	1a9b      	subs	r3, r3, r2
 8009ab6:	42ab      	cmp	r3, r5
 8009ab8:	dcf2      	bgt.n	8009aa0 <_printf_i+0x1e8>
 8009aba:	e7eb      	b.n	8009a94 <_printf_i+0x1dc>
 8009abc:	2500      	movs	r5, #0
 8009abe:	f104 0919 	add.w	r9, r4, #25
 8009ac2:	e7f5      	b.n	8009ab0 <_printf_i+0x1f8>
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1ac      	bne.n	8009a22 <_printf_i+0x16a>
 8009ac8:	7803      	ldrb	r3, [r0, #0]
 8009aca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ace:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ad2:	e76c      	b.n	80099ae <_printf_i+0xf6>
 8009ad4:	08009e4d 	.word	0x08009e4d
 8009ad8:	08009e5e 	.word	0x08009e5e

08009adc <memcpy>:
 8009adc:	b510      	push	{r4, lr}
 8009ade:	1e43      	subs	r3, r0, #1
 8009ae0:	440a      	add	r2, r1
 8009ae2:	4291      	cmp	r1, r2
 8009ae4:	d100      	bne.n	8009ae8 <memcpy+0xc>
 8009ae6:	bd10      	pop	{r4, pc}
 8009ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009af0:	e7f7      	b.n	8009ae2 <memcpy+0x6>

08009af2 <memmove>:
 8009af2:	4288      	cmp	r0, r1
 8009af4:	b510      	push	{r4, lr}
 8009af6:	eb01 0302 	add.w	r3, r1, r2
 8009afa:	d807      	bhi.n	8009b0c <memmove+0x1a>
 8009afc:	1e42      	subs	r2, r0, #1
 8009afe:	4299      	cmp	r1, r3
 8009b00:	d00a      	beq.n	8009b18 <memmove+0x26>
 8009b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b06:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009b0a:	e7f8      	b.n	8009afe <memmove+0xc>
 8009b0c:	4283      	cmp	r3, r0
 8009b0e:	d9f5      	bls.n	8009afc <memmove+0xa>
 8009b10:	1881      	adds	r1, r0, r2
 8009b12:	1ad2      	subs	r2, r2, r3
 8009b14:	42d3      	cmn	r3, r2
 8009b16:	d100      	bne.n	8009b1a <memmove+0x28>
 8009b18:	bd10      	pop	{r4, pc}
 8009b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b1e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009b22:	e7f7      	b.n	8009b14 <memmove+0x22>

08009b24 <_free_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4605      	mov	r5, r0
 8009b28:	2900      	cmp	r1, #0
 8009b2a:	d045      	beq.n	8009bb8 <_free_r+0x94>
 8009b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b30:	1f0c      	subs	r4, r1, #4
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	bfb8      	it	lt
 8009b36:	18e4      	addlt	r4, r4, r3
 8009b38:	f000 f8d2 	bl	8009ce0 <__malloc_lock>
 8009b3c:	4a1f      	ldr	r2, [pc, #124]	; (8009bbc <_free_r+0x98>)
 8009b3e:	6813      	ldr	r3, [r2, #0]
 8009b40:	4610      	mov	r0, r2
 8009b42:	b933      	cbnz	r3, 8009b52 <_free_r+0x2e>
 8009b44:	6063      	str	r3, [r4, #4]
 8009b46:	6014      	str	r4, [r2, #0]
 8009b48:	4628      	mov	r0, r5
 8009b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b4e:	f000 b8c8 	b.w	8009ce2 <__malloc_unlock>
 8009b52:	42a3      	cmp	r3, r4
 8009b54:	d90c      	bls.n	8009b70 <_free_r+0x4c>
 8009b56:	6821      	ldr	r1, [r4, #0]
 8009b58:	1862      	adds	r2, r4, r1
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	bf04      	itt	eq
 8009b5e:	681a      	ldreq	r2, [r3, #0]
 8009b60:	685b      	ldreq	r3, [r3, #4]
 8009b62:	6063      	str	r3, [r4, #4]
 8009b64:	bf04      	itt	eq
 8009b66:	1852      	addeq	r2, r2, r1
 8009b68:	6022      	streq	r2, [r4, #0]
 8009b6a:	6004      	str	r4, [r0, #0]
 8009b6c:	e7ec      	b.n	8009b48 <_free_r+0x24>
 8009b6e:	4613      	mov	r3, r2
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	b10a      	cbz	r2, 8009b78 <_free_r+0x54>
 8009b74:	42a2      	cmp	r2, r4
 8009b76:	d9fa      	bls.n	8009b6e <_free_r+0x4a>
 8009b78:	6819      	ldr	r1, [r3, #0]
 8009b7a:	1858      	adds	r0, r3, r1
 8009b7c:	42a0      	cmp	r0, r4
 8009b7e:	d10b      	bne.n	8009b98 <_free_r+0x74>
 8009b80:	6820      	ldr	r0, [r4, #0]
 8009b82:	4401      	add	r1, r0
 8009b84:	1858      	adds	r0, r3, r1
 8009b86:	4282      	cmp	r2, r0
 8009b88:	6019      	str	r1, [r3, #0]
 8009b8a:	d1dd      	bne.n	8009b48 <_free_r+0x24>
 8009b8c:	6810      	ldr	r0, [r2, #0]
 8009b8e:	6852      	ldr	r2, [r2, #4]
 8009b90:	605a      	str	r2, [r3, #4]
 8009b92:	4401      	add	r1, r0
 8009b94:	6019      	str	r1, [r3, #0]
 8009b96:	e7d7      	b.n	8009b48 <_free_r+0x24>
 8009b98:	d902      	bls.n	8009ba0 <_free_r+0x7c>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	602b      	str	r3, [r5, #0]
 8009b9e:	e7d3      	b.n	8009b48 <_free_r+0x24>
 8009ba0:	6820      	ldr	r0, [r4, #0]
 8009ba2:	1821      	adds	r1, r4, r0
 8009ba4:	428a      	cmp	r2, r1
 8009ba6:	bf04      	itt	eq
 8009ba8:	6811      	ldreq	r1, [r2, #0]
 8009baa:	6852      	ldreq	r2, [r2, #4]
 8009bac:	6062      	str	r2, [r4, #4]
 8009bae:	bf04      	itt	eq
 8009bb0:	1809      	addeq	r1, r1, r0
 8009bb2:	6021      	streq	r1, [r4, #0]
 8009bb4:	605c      	str	r4, [r3, #4]
 8009bb6:	e7c7      	b.n	8009b48 <_free_r+0x24>
 8009bb8:	bd38      	pop	{r3, r4, r5, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000550 	.word	0x20000550

08009bc0 <_malloc_r>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	1ccd      	adds	r5, r1, #3
 8009bc4:	f025 0503 	bic.w	r5, r5, #3
 8009bc8:	3508      	adds	r5, #8
 8009bca:	2d0c      	cmp	r5, #12
 8009bcc:	bf38      	it	cc
 8009bce:	250c      	movcc	r5, #12
 8009bd0:	2d00      	cmp	r5, #0
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	db01      	blt.n	8009bda <_malloc_r+0x1a>
 8009bd6:	42a9      	cmp	r1, r5
 8009bd8:	d903      	bls.n	8009be2 <_malloc_r+0x22>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	6033      	str	r3, [r6, #0]
 8009bde:	2000      	movs	r0, #0
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
 8009be2:	f000 f87d 	bl	8009ce0 <__malloc_lock>
 8009be6:	4a21      	ldr	r2, [pc, #132]	; (8009c6c <_malloc_r+0xac>)
 8009be8:	6814      	ldr	r4, [r2, #0]
 8009bea:	4621      	mov	r1, r4
 8009bec:	b991      	cbnz	r1, 8009c14 <_malloc_r+0x54>
 8009bee:	4c20      	ldr	r4, [pc, #128]	; (8009c70 <_malloc_r+0xb0>)
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	b91b      	cbnz	r3, 8009bfc <_malloc_r+0x3c>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f000 f863 	bl	8009cc0 <_sbrk_r>
 8009bfa:	6020      	str	r0, [r4, #0]
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f000 f85e 	bl	8009cc0 <_sbrk_r>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d124      	bne.n	8009c52 <_malloc_r+0x92>
 8009c08:	230c      	movs	r3, #12
 8009c0a:	6033      	str	r3, [r6, #0]
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f000 f868 	bl	8009ce2 <__malloc_unlock>
 8009c12:	e7e4      	b.n	8009bde <_malloc_r+0x1e>
 8009c14:	680b      	ldr	r3, [r1, #0]
 8009c16:	1b5b      	subs	r3, r3, r5
 8009c18:	d418      	bmi.n	8009c4c <_malloc_r+0x8c>
 8009c1a:	2b0b      	cmp	r3, #11
 8009c1c:	d90f      	bls.n	8009c3e <_malloc_r+0x7e>
 8009c1e:	600b      	str	r3, [r1, #0]
 8009c20:	50cd      	str	r5, [r1, r3]
 8009c22:	18cc      	adds	r4, r1, r3
 8009c24:	4630      	mov	r0, r6
 8009c26:	f000 f85c 	bl	8009ce2 <__malloc_unlock>
 8009c2a:	f104 000b 	add.w	r0, r4, #11
 8009c2e:	1d23      	adds	r3, r4, #4
 8009c30:	f020 0007 	bic.w	r0, r0, #7
 8009c34:	1ac3      	subs	r3, r0, r3
 8009c36:	d0d3      	beq.n	8009be0 <_malloc_r+0x20>
 8009c38:	425a      	negs	r2, r3
 8009c3a:	50e2      	str	r2, [r4, r3]
 8009c3c:	e7d0      	b.n	8009be0 <_malloc_r+0x20>
 8009c3e:	428c      	cmp	r4, r1
 8009c40:	684b      	ldr	r3, [r1, #4]
 8009c42:	bf16      	itet	ne
 8009c44:	6063      	strne	r3, [r4, #4]
 8009c46:	6013      	streq	r3, [r2, #0]
 8009c48:	460c      	movne	r4, r1
 8009c4a:	e7eb      	b.n	8009c24 <_malloc_r+0x64>
 8009c4c:	460c      	mov	r4, r1
 8009c4e:	6849      	ldr	r1, [r1, #4]
 8009c50:	e7cc      	b.n	8009bec <_malloc_r+0x2c>
 8009c52:	1cc4      	adds	r4, r0, #3
 8009c54:	f024 0403 	bic.w	r4, r4, #3
 8009c58:	42a0      	cmp	r0, r4
 8009c5a:	d005      	beq.n	8009c68 <_malloc_r+0xa8>
 8009c5c:	1a21      	subs	r1, r4, r0
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f000 f82e 	bl	8009cc0 <_sbrk_r>
 8009c64:	3001      	adds	r0, #1
 8009c66:	d0cf      	beq.n	8009c08 <_malloc_r+0x48>
 8009c68:	6025      	str	r5, [r4, #0]
 8009c6a:	e7db      	b.n	8009c24 <_malloc_r+0x64>
 8009c6c:	20000550 	.word	0x20000550
 8009c70:	20000554 	.word	0x20000554

08009c74 <_realloc_r>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	4607      	mov	r7, r0
 8009c78:	4614      	mov	r4, r2
 8009c7a:	460e      	mov	r6, r1
 8009c7c:	b921      	cbnz	r1, 8009c88 <_realloc_r+0x14>
 8009c7e:	4611      	mov	r1, r2
 8009c80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c84:	f7ff bf9c 	b.w	8009bc0 <_malloc_r>
 8009c88:	b922      	cbnz	r2, 8009c94 <_realloc_r+0x20>
 8009c8a:	f7ff ff4b 	bl	8009b24 <_free_r>
 8009c8e:	4625      	mov	r5, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c94:	f000 f826 	bl	8009ce4 <_malloc_usable_size_r>
 8009c98:	42a0      	cmp	r0, r4
 8009c9a:	d20f      	bcs.n	8009cbc <_realloc_r+0x48>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f7ff ff8e 	bl	8009bc0 <_malloc_r>
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d0f2      	beq.n	8009c90 <_realloc_r+0x1c>
 8009caa:	4631      	mov	r1, r6
 8009cac:	4622      	mov	r2, r4
 8009cae:	f7ff ff15 	bl	8009adc <memcpy>
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4638      	mov	r0, r7
 8009cb6:	f7ff ff35 	bl	8009b24 <_free_r>
 8009cba:	e7e9      	b.n	8009c90 <_realloc_r+0x1c>
 8009cbc:	4635      	mov	r5, r6
 8009cbe:	e7e7      	b.n	8009c90 <_realloc_r+0x1c>

08009cc0 <_sbrk_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4c06      	ldr	r4, [pc, #24]	; (8009cdc <_sbrk_r+0x1c>)
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	4608      	mov	r0, r1
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	f7f8 fff0 	bl	8002cb0 <_sbrk>
 8009cd0:	1c43      	adds	r3, r0, #1
 8009cd2:	d102      	bne.n	8009cda <_sbrk_r+0x1a>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	b103      	cbz	r3, 8009cda <_sbrk_r+0x1a>
 8009cd8:	602b      	str	r3, [r5, #0]
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	20007988 	.word	0x20007988

08009ce0 <__malloc_lock>:
 8009ce0:	4770      	bx	lr

08009ce2 <__malloc_unlock>:
 8009ce2:	4770      	bx	lr

08009ce4 <_malloc_usable_size_r>:
 8009ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ce8:	1f18      	subs	r0, r3, #4
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bfbc      	itt	lt
 8009cee:	580b      	ldrlt	r3, [r1, r0]
 8009cf0:	18c0      	addlt	r0, r0, r3
 8009cf2:	4770      	bx	lr

08009cf4 <_init>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	bf00      	nop
 8009cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	469e      	mov	lr, r3
 8009cfe:	4770      	bx	lr

08009d00 <_fini>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	bf00      	nop
 8009d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d06:	bc08      	pop	{r3}
 8009d08:	469e      	mov	lr, r3
 8009d0a:	4770      	bx	lr
