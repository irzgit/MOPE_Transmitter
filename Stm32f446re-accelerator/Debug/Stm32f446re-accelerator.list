
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f84  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009500  08009500  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08009500  08009500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009508  08009508  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009508  08009508  00019508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800950c  0800950c  0001950c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08009510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb0  20000048  08009558  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef8  08009558  00020ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acf9  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003296  00000000  00000000  0003ad71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003e008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  0003f458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245de  00000000  00000000  00040730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d14  00000000  00000000  00064d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2bf5  00000000  00000000  00075a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148617  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f4  00000000  00000000  00148694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000048 	.word	0x20000048
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009130 	.word	0x08009130

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	08009130 	.word	0x08009130

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f001 faec 	bl	8001ae8 <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f001 fae4 	bl	8001ae8 <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f001 fadc 	bl	8001ae8 <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f001 fad4 	bl	8001ae8 <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f001 fb18 	bl	8001b94 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	080091e8 	.word	0x080091e8

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	//SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
	SPIWrite(LR_RegPaConfig,0x0F); //14 Дб
 800057a:	210f      	movs	r1, #15
 800057c:	2009      	movs	r0, #9
 800057e:	f001 fab3 	bl	8001ae8 <SPIWrite>
	//SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84
	SPIWrite(0x5A,0x84); // обычный режим( без макс усиления: до 14 Дб)
 8000582:	2184      	movs	r1, #132	; 0x84
 8000584:	205a      	movs	r0, #90	; 0x5a
 8000586:	f001 faaf 	bl	8001ae8 <SPIWrite>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <Rf96_OCP+0x20>)
 80005a2:	5cd3      	ldrb	r3, [r2, r3]
 80005a4:	4619      	mov	r1, r3
 80005a6:	200b      	movs	r0, #11
 80005a8:	f001 fa9e 	bl	8001ae8 <SPIWrite>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	080091f4 	.word	0x080091f4

080005b8 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <Rf96_LNA+0x20>)
 80005c6:	5cd3      	ldrb	r3, [r2, r3]
 80005c8:	4619      	mov	r1, r3
 80005ca:	200c      	movs	r0, #12
 80005cc:	f001 fa8c 	bl	8001ae8 <SPIWrite>

}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	080091f8 	.word	0x080091f8

080005dc <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
	SPIWrite(LR_RegModemConfig1,0x25); //   0x21 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005ee:	2125      	movs	r1, #37	; 0x25
 80005f0:	201d      	movs	r0, #29
 80005f2:	f001 fa79 	bl	8001ae8 <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // С CRC16
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	460b      	mov	r3, r1
 800060a:	71bb      	strb	r3, [r7, #6]
 800060c:	4613      	mov	r3, r2
 800060e:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xB4);  // SF=11
 8000610:	21b4      	movs	r1, #180	; 0xb4
 8000612:	201e      	movs	r0, #30
 8000614:	f001 fa68 	bl	8001ae8 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000618:	88bb      	ldrh	r3, [r7, #4]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	201f      	movs	r0, #31
 8000620:	f001 fa62 	bl	8001ae8 <SPIWrite>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b29b      	uxth	r3, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	2020      	movs	r0, #32
 8000642:	f001 fa51 	bl	8001ae8 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	2021      	movs	r0, #33	; 0x21
 800064e:	f001 fa4b 	bl	8001ae8 <SPIWrite>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 800065a:	b590      	push	{r4, r7, lr}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	4604      	mov	r4, r0
 8000662:	4608      	mov	r0, r1
 8000664:	4611      	mov	r1, r2
 8000666:	461a      	mov	r2, r3
 8000668:	4623      	mov	r3, r4
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4603      	mov	r3, r0
 800066e:	71bb      	strb	r3, [r7, #6]
 8000670:	460b      	mov	r3, r1
 8000672:	717b      	strb	r3, [r7, #5]
 8000674:	4613      	mov	r3, r2
 8000676:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	019b      	lsls	r3, r3, #6
 800067c:	b2da      	uxtb	r2, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4413      	add	r3, r2
 8000686:	b2da      	uxtb	r2, r3
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4413      	add	r3, r2
 8000690:	b2da      	uxtb	r2, r3
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	2040      	movs	r0, #64	; 0x40
 800069c:	f001 fa24 	bl	8001ae8 <SPIWrite>
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd90      	pop	{r4, r7, pc}

080006a8 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006ac:	21f7      	movs	r1, #247	; 0xf7
 80006ae:	2011      	movs	r0, #17
 80006b0:	f001 fa1a 	bl	8001ae8 <SPIWrite>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
 80006bc:	213f      	movs	r1, #63	; 0x3f
 80006be:	2011      	movs	r0, #17
 80006c0:	f001 fa12 	bl	8001ae8 <SPIWrite>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4619      	mov	r1, r3
 80006d6:	2022      	movs	r0, #34	; 0x22
 80006d8:	f001 fa06 	bl	8001ae8 <SPIWrite>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4619      	mov	r1, r3
 80006f2:	200e      	movs	r0, #14
 80006f4:	f001 f9f8 	bl	8001ae8 <SPIWrite>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4619      	mov	r1, r3
 800070e:	200f      	movs	r0, #15
 8000710:	f001 f9ea 	bl	8001ae8 <SPIWrite>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4619      	mov	r1, r3
 800072a:	200d      	movs	r0, #13
 800072c:	f001 f9dc 	bl	8001ae8 <SPIWrite>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 800073c:	2185      	movs	r1, #133	; 0x85
 800073e:	2001      	movs	r0, #1
 8000740:	f001 f9d2 	bl	8001ae8 <SPIWrite>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <Rf96_TX_mode>:
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 800074c:	2183      	movs	r1, #131	; 0x83
 800074e:	2001      	movs	r0, #1
 8000750:	f001 f9ca 	bl	8001ae8 <SPIWrite>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	461a      	mov	r2, r3
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	2000      	movs	r0, #0
 800076c:	f001 fa12 	bl	8001b94 <BurstWrite>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000780:	2010      	movs	r0, #16
 8000782:	f001 f993 	bl	8001aac <SPIRead>
 8000786:	4603      	mov	r3, r0
 8000788:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	4619      	mov	r1, r3
 800078e:	200d      	movs	r0, #13
 8000790:	f001 f9aa 	bl	8001ae8 <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 8000794:	2013      	movs	r0, #19
 8000796:	f001 f989 	bl	8001aac <SPIRead>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	461a      	mov	r2, r3
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	2000      	movs	r0, #0
 80007a6:	f001 f9c3 	bl	8001b30 <SPIBurstRead>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007b6:	f7ff feb5 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007ba:	f7ff febb 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fec0 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fed3 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fee2 	bl	8000594 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fef1 	bl	80005b8 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2104      	movs	r1, #4
 80007da:	2007      	movs	r0, #7
 80007dc:	f7ff fefe 	bl	80005dc <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x1FF);
 80007e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007e4:	2101      	movs	r1, #1
 80007e6:	2006      	movs	r0, #6
 80007e8:	f7ff ff09 	bl	80005fe <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007ec:	2008      	movs	r0, #8
 80007ee:	f7ff ff1d 	bl	800062c <Rf96_Preamble>
	SPIWrite(0x37,0x0A);
 80007f2:	210a      	movs	r1, #10
 80007f4:	2037      	movs	r0, #55	; 0x37
 80007f6:	f001 f977 	bl	8001ae8 <SPIWrite>
	SPIWrite(0x31,0xA3);
 80007fa:	21a3      	movs	r1, #163	; 0xa3
 80007fc:	2031      	movs	r0, #49	; 0x31
 80007fe:	f001 f973 	bl	8001ae8 <SPIWrite>
	// Заходим в StandBy
	Rf96_Standby();
 8000802:	f7ff fe87 	bl	8000514 <Rf96_Standby>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}

0800080a <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  SPIWrite(LR_RegHopPeriod,0x0);
 800080e:	2100      	movs	r1, #0
 8000810:	2024      	movs	r0, #36	; 0x24
 8000812:	f001 f969 	bl	8001ae8 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по отправке
	  Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 8000816:	2302      	movs	r3, #2
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ff1c 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000822:	f7ff fe6f 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 8000826:	f7ff ff3f 	bl	80006a8 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 800082a:	202a      	movs	r0, #42	; 0x2a
 800082c:	f7ff ff4c 	bl	80006c8 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	f7ff ff57 	bl	80006e4 <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 8000836:	2080      	movs	r0, #128	; 0x80
 8000838:	f7ff ff70 	bl	800071c <Rf96_FIFO_point>

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 8000844:	2100      	movs	r1, #0
 8000846:	2024      	movs	r0, #36	; 0x24
 8000848:	f001 f94e 	bl	8001ae8 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 800084c:	2302      	movs	r3, #2
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff ff01 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000858:	f7ff ff2e 	bl	80006b8 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 800085c:	f7ff fe52 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000860:	202a      	movs	r0, #42	; 0x2a
 8000862:	f7ff ff31 	bl	80006c8 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff ff4a 	bl	8000700 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ff55 	bl	800071c <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 8000872:	f7ff ff61 	bl	8000738 <Rf96_RX_Continuous_mode>

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}

0800087a <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	460b      	mov	r3, r1
 8000884:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	4619      	mov	r1, r3
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ff64 	bl	8000758 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 8000890:	f7ff ff5a 	bl	8000748 <Rf96_TX_mode>
		}
	}
	*/


}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80008a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ac:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80008ae:	e012      	b.n	80008d6 <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 80008b0:	89fb      	ldrh	r3, [r7, #14]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	89fb      	ldrh	r3, [r7, #14]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	1c59      	adds	r1, r3, #1
 80008c2:	6079      	str	r1, [r7, #4]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4043      	eors	r3, r0
 80008c8:	4909      	ldr	r1, [pc, #36]	; (80008f0 <Crc16+0x54>)
 80008ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	4053      	eors	r3, r2
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80008d6:	887b      	ldrh	r3, [r7, #2]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	807a      	strh	r2, [r7, #2]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1e7      	bne.n	80008b0 <Crc16+0x14>

    return crc;
 80008e0:	89fb      	ldrh	r3, [r7, #14]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	08009260 	.word	0x08009260

080008f4 <UserDelayStart>:
// Функция пользовательской задержки
void UserDelayStart(uint32_t Delay)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	TimeDelay=Delay;
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <UserDelayStart+0x20>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
	Delay_start=1;
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <UserDelayStart+0x24>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	20000020 	.word	0x20000020
 8000918:	20000074 	.word	0x20000074

0800091c <uint32_TO_charmass>:
mass - массив, в который число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	4611      	mov	r1, r2
 8000928:	461a      	mov	r2, r3
 800092a:	460b      	mov	r3, r1
 800092c:	80fb      	strh	r3, [r7, #6]
 800092e:	4613      	mov	r3, r2
 8000930:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < len; i++)
 8000932:	2300      	movs	r3, #0
 8000934:	82fb      	strh	r3, [r7, #22]
 8000936:	e01f      	b.n	8000978 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <uint32_TO_charmass+0x70>)
 800093c:	fba3 2301 	umull	r2, r3, r3, r1
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	4613      	mov	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	1aca      	subs	r2, r1, r3
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	1e59      	subs	r1, r3, #1
 8000952:	8afb      	ldrh	r3, [r7, #22]
 8000954:	1ac9      	subs	r1, r1, r3
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	440b      	add	r3, r1
 800095a:	4619      	mov	r1, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	440b      	add	r3, r1
 8000960:	3230      	adds	r2, #48	; 0x30
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <uint32_TO_charmass+0x70>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8000972:	8afb      	ldrh	r3, [r7, #22]
 8000974:	3301      	adds	r3, #1
 8000976:	82fb      	strh	r3, [r7, #22]
 8000978:	8afa      	ldrh	r2, [r7, #22]
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d3db      	bcc.n	8000938 <uint32_TO_charmass+0x1c>
	}
}
 8000980:	bf00      	nop
 8000982:	371c      	adds	r7, #28
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	cccccccd 	.word	0xcccccccd

08000990 <ReadNumofFileSD>:
// Чтение количества созданных файлов из файла InfoSD.txt
uint8_t ReadNumofFileSD(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000996:	af00      	add	r7, sp, #0
	FIL filInform;
	uint8_t Num=255;
 8000998:	23ff      	movs	r3, #255	; 0xff
 800099a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_READ);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2211      	movs	r2, #17
 80009a2:	4945      	ldr	r1, [pc, #276]	; (8000ab8 <ReadNumofFileSD+0x128>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f007 fe21 	bl	80085ec <f_open>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b43      	ldr	r3, [pc, #268]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009b0:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 80009b2:	4b42      	ldr	r3, [pc, #264]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d005      	beq.n	80009c6 <ReadNumofFileSD+0x36>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2102      	movs	r1, #2
 80009be:	4840      	ldr	r0, [pc, #256]	; (8000ac0 <ReadNumofFileSD+0x130>)
 80009c0:	f003 f9ae 	bl	8003d20 <HAL_GPIO_WritePin>
		while(1);
 80009c4:	e7fe      	b.n	80009c4 <ReadNumofFileSD+0x34>
	}
	//Читаем количество файлов
	fres=f_read(&filInform,BuffSDRead,40,&bytesRead);
 80009c6:	1d38      	adds	r0, r7, #4
 80009c8:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <ReadNumofFileSD+0x134>)
 80009ca:	2228      	movs	r2, #40	; 0x28
 80009cc:	493e      	ldr	r1, [pc, #248]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009ce:	f007 ffcb 	bl	8008968 <f_read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b39      	ldr	r3, [pc, #228]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009d8:	701a      	strb	r2, [r3, #0]
	//Если на флешке не было этого файла
	if(BuffSDRead[0]=='\t' && BuffSDRead[1]=='\t' && BuffSDRead[2]=='F' && BuffSDRead[3]=='i' && BuffSDRead[4]=='l')
 80009da:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b09      	cmp	r3, #9
 80009e0:	d114      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009e2:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	2b09      	cmp	r3, #9
 80009e8:	d110      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009ea:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	2b46      	cmp	r3, #70	; 0x46
 80009f0:	d10c      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009f4:	78db      	ldrb	r3, [r3, #3]
 80009f6:	2b69      	cmp	r3, #105	; 0x69
 80009f8:	d108      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009fc:	791b      	ldrb	r3, [r3, #4]
 80009fe:	2b6c      	cmp	r3, #108	; 0x6c
 8000a00:	d104      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
	{
		Num=BuffSDRead[28]-'0'; // количество файлов
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <ReadNumofFileSD+0x138>)
 8000a04:	7f1b      	ldrb	r3, [r3, #28]
 8000a06:	3b30      	subs	r3, #48	; 0x30
 8000a08:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	}
	fres=f_close(&filInform);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f008 fadc 	bl	8008fcc <f_close>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a1a:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000a1c:	4b27      	ldr	r3, [pc, #156]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d005      	beq.n	8000a30 <ReadNumofFileSD+0xa0>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2102      	movs	r1, #2
 8000a28:	4825      	ldr	r0, [pc, #148]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000a2a:	f003 f979 	bl	8003d20 <HAL_GPIO_WritePin>
		while(1);
 8000a2e:	e7fe      	b.n	8000a2e <ReadNumofFileSD+0x9e>
	}
	if(Num==255)
 8000a30:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000a34:	2bff      	cmp	r3, #255	; 0xff
 8000a36:	d132      	bne.n	8000a9e <ReadNumofFileSD+0x10e>
	{
		Num=0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2212      	movs	r2, #18
 8000a42:	491d      	ldr	r1, [pc, #116]	; (8000ab8 <ReadNumofFileSD+0x128>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 fdd1 	bl	80085ec <f_open>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a50:	701a      	strb	r2, [r3, #0]
		// Количество файлов
		fres = f_write(&filInform, "\t\tFile info\nNumber of files:0;\n", 31, &bytesWroteInform);
 8000a52:	463b      	mov	r3, r7
 8000a54:	1d38      	adds	r0, r7, #4
 8000a56:	221f      	movs	r2, #31
 8000a58:	491c      	ldr	r1, [pc, #112]	; (8000acc <ReadNumofFileSD+0x13c>)
 8000a5a:	f008 f8c4 	bl	8008be6 <f_write>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a64:	701a      	strb	r2, [r3, #0]
		// История команд
		fres = f_write(&filInform, "\t\tCommand History\nTime\tcommand\n", 31, &bytesWroteInform);
 8000a66:	463b      	mov	r3, r7
 8000a68:	1d38      	adds	r0, r7, #4
 8000a6a:	221f      	movs	r2, #31
 8000a6c:	4918      	ldr	r1, [pc, #96]	; (8000ad0 <ReadNumofFileSD+0x140>)
 8000a6e:	f008 f8ba 	bl	8008be6 <f_write>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a78:	701a      	strb	r2, [r3, #0]
		fres=f_close(&filInform);
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 faa5 	bl	8008fcc <f_close>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a88:	701a      	strb	r2, [r3, #0]
		if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <ReadNumofFileSD+0x10e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2102      	movs	r1, #2
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000a98:	f003 f942 	bl	8003d20 <HAL_GPIO_WritePin>
			while(1);
 8000a9c:	e7fe      	b.n	8000a9c <ReadNumofFileSD+0x10c>
		}
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000aa4:	f003 f93c 	bl	8003d20 <HAL_GPIO_WritePin>

	return Num;
 8000aa8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08009148 	.word	0x08009148
 8000abc:	20000810 	.word	0x20000810
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	2000010c 	.word	0x2000010c
 8000ac8:	200006e4 	.word	0x200006e4
 8000acc:	08009154 	.word	0x08009154
 8000ad0:	08009174 	.word	0x08009174

08000ad4 <WriteNumofFileSD>:
// Запись в фаил  InfoSD.txt количество созданных файлов
void WriteNumofFileSD(uint8_t Num)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4602      	mov	r2, r0
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	701a      	strb	r2, [r3, #0]
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	2212      	movs	r2, #18
 8000ae8:	4920      	ldr	r1, [pc, #128]	; (8000b6c <WriteNumofFileSD+0x98>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f007 fd7e 	bl	80085ec <f_open>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000af6:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d005      	beq.n	8000b0c <WriteNumofFileSD+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2102      	movs	r1, #2
 8000b04:	481b      	ldr	r0, [pc, #108]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b06:	f003 f90b 	bl	8003d20 <HAL_GPIO_WritePin>
		while(1);
 8000b0a:	e7fe      	b.n	8000b0a <WriteNumofFileSD+0x36>
	}
	//Записываем количество данных
	BuffSDfileinfo[28]=Num+'0';
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	3330      	adds	r3, #48	; 0x30
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <WriteNumofFileSD+0xa4>)
 8000b16:	771a      	strb	r2, [r3, #28]
	fres = f_write(&filInform, BuffSDfileinfo, 30, &bytesWroteInform);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	f107 0010 	add.w	r0, r7, #16
 8000b20:	221e      	movs	r2, #30
 8000b22:	4915      	ldr	r1, [pc, #84]	; (8000b78 <WriteNumofFileSD+0xa4>)
 8000b24:	f008 f85f 	bl	8008be6 <f_write>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b2e:	701a      	strb	r2, [r3, #0]
	fres=f_close(&filInform);
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4618      	mov	r0, r3
 8000b36:	f008 fa49 	bl	8008fcc <f_close>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b40:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <WriteNumofFileSD+0x82>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b50:	f003 f8e6 	bl	8003d20 <HAL_GPIO_WritePin>
		while(1);
 8000b54:	e7fe      	b.n	8000b54 <WriteNumofFileSD+0x80>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b5c:	f003 f8e0 	bl	8003d20 <HAL_GPIO_WritePin>
}
 8000b60:	bf00      	nop
 8000b62:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	08009148 	.word	0x08009148
 8000b70:	20000810 	.word	0x20000810
 8000b74:	40020800 	.word	0x40020800
 8000b78:	20000000 	.word	0x20000000

08000b7c <CommandHistoryWrite>:
// Запись в файл InfoSD.txt команд и времени
void CommandHistoryWrite(uint8_t command)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4602      	mov	r2, r0
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	701a      	strb	r2, [r3, #0]
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_APPEND | FA_WRITE);
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2232      	movs	r2, #50	; 0x32
 8000b90:	4925      	ldr	r1, [pc, #148]	; (8000c28 <CommandHistoryWrite+0xac>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f007 fd2a 	bl	80085ec <f_open>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <CommandHistoryWrite+0xb0>)
 8000b9e:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <CommandHistoryWrite+0xb0>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <CommandHistoryWrite+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2102      	movs	r1, #2
 8000bac:	4820      	ldr	r0, [pc, #128]	; (8000c30 <CommandHistoryWrite+0xb4>)
 8000bae:	f003 f8b7 	bl	8003d20 <HAL_GPIO_WritePin>
		while(1);
 8000bb2:	e7fe      	b.n	8000bb2 <CommandHistoryWrite+0x36>
	}
	//Записываем количество данных
	//  Время в мс, когда ,прибыла команда
	uint32_t TimeHistory = HAL_GetTick();
 8000bb4:	f002 f9be 	bl	8002f34 <HAL_GetTick>
 8000bb8:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
	uint32_TO_charmass(TimeHistory, BufFileInfoWr, 0, 8);
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	491c      	ldr	r1, [pc, #112]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000bc2:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000bc6:	f7ff fea9 	bl	800091c <uint32_TO_charmass>
	BufFileInfoWr[8]=' ';
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000bcc:	2220      	movs	r2, #32
 8000bce:	721a      	strb	r2, [r3, #8]
	BufFileInfoWr[9]=command+'0';
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3330      	adds	r3, #48	; 0x30
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000bda:	725a      	strb	r2, [r3, #9]
	BufFileInfoWr[10]=';';
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000bde:	223b      	movs	r2, #59	; 0x3b
 8000be0:	729a      	strb	r2, [r3, #10]
	BufFileInfoWr[11]='\n';
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	72da      	strb	r2, [r3, #11]
	fres = f_write(&filInform, BufFileInfoWr, 12, &bytesWroteInform);
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	f107 000c 	add.w	r0, r7, #12
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	4910      	ldr	r1, [pc, #64]	; (8000c34 <CommandHistoryWrite+0xb8>)
 8000bf4:	f007 fff7 	bl	8008be6 <f_write>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <CommandHistoryWrite+0xb0>)
 8000bfe:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <CommandHistoryWrite+0xb0>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d005      	beq.n	8000c14 <CommandHistoryWrite+0x98>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4808      	ldr	r0, [pc, #32]	; (8000c30 <CommandHistoryWrite+0xb4>)
 8000c0e:	f003 f887 	bl	8003d20 <HAL_GPIO_WritePin>
		while(1);
 8000c12:	e7fe      	b.n	8000c12 <CommandHistoryWrite+0x96>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2102      	movs	r1, #2
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <CommandHistoryWrite+0xb4>)
 8000c1a:	f003 f881 	bl	8003d20 <HAL_GPIO_WritePin>
}
 8000c1e:	bf00      	nop
 8000c20:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	08009148 	.word	0x08009148
 8000c2c:	20000810 	.word	0x20000810
 8000c30:	40020800 	.word	0x40020800
 8000c34:	200003c0 	.word	0x200003c0

08000c38 <HistoryOnOffUSI>:
// Запись в файл InfoSD.txt метки о включении питания
void HistoryOnOffUSI(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000c3e:	af00      	add	r7, sp, #0
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_APPEND | FA_WRITE);
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	2232      	movs	r2, #50	; 0x32
 8000c46:	491d      	ldr	r1, [pc, #116]	; (8000cbc <HistoryOnOffUSI+0x84>)
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f007 fccf 	bl	80085ec <f_open>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HistoryOnOffUSI+0x88>)
 8000c54:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HistoryOnOffUSI+0x88>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d005      	beq.n	8000c6a <HistoryOnOffUSI+0x32>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2102      	movs	r1, #2
 8000c62:	4818      	ldr	r0, [pc, #96]	; (8000cc4 <HistoryOnOffUSI+0x8c>)
 8000c64:	f003 f85c 	bl	8003d20 <HAL_GPIO_WritePin>
		while(1);
 8000c68:	e7fe      	b.n	8000c68 <HistoryOnOffUSI+0x30>
	}
	//Записываем количество данных
	fres = f_write(&filInform, "Power On\n", 9, &bytesWroteInform);
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	f107 0008 	add.w	r0, r7, #8
 8000c70:	2209      	movs	r2, #9
 8000c72:	4915      	ldr	r1, [pc, #84]	; (8000cc8 <HistoryOnOffUSI+0x90>)
 8000c74:	f007 ffb7 	bl	8008be6 <f_write>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HistoryOnOffUSI+0x88>)
 8000c7e:	701a      	strb	r2, [r3, #0]
	fres=f_close(&filInform);
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 f9a1 	bl	8008fcc <f_close>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HistoryOnOffUSI+0x88>)
 8000c90:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HistoryOnOffUSI+0x88>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <HistoryOnOffUSI+0x6e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <HistoryOnOffUSI+0x8c>)
 8000ca0:	f003 f83e 	bl	8003d20 <HAL_GPIO_WritePin>
		while(1);
 8000ca4:	e7fe      	b.n	8000ca4 <HistoryOnOffUSI+0x6c>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <HistoryOnOffUSI+0x8c>)
 8000cac:	f003 f838 	bl	8003d20 <HAL_GPIO_WritePin>
}
 8000cb0:	bf00      	nop
 8000cb2:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	08009148 	.word	0x08009148
 8000cc0:	20000810 	.word	0x20000810
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	08009194 	.word	0x08009194

08000ccc <SyncCKT>:
	}
	ResolveSDWrite=0; // закрываем доступ к записи на SD данных с ЦКТ
}
// Функция синхронизации Usartа с ЦКТ
void SyncCKT(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	// Синхронизация
	if(readFlag==1)
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <SyncCKT+0x2c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d10d      	bne.n	8000cf4 <SyncCKT+0x28>
	{
		readFlag=0;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <SyncCKT+0x2c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f002 f934 	bl	8002f4c <HAL_Delay>
		HAL_UART_Abort(&huart5);
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <SyncCKT+0x30>)
 8000ce6:	f004 ffb5 	bl	8005c54 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5,BuffCkt, MaxBuffOfCKT);
 8000cea:	222b      	movs	r2, #43	; 0x2b
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <SyncCKT+0x34>)
 8000cee:	4803      	ldr	r0, [pc, #12]	; (8000cfc <SyncCKT+0x30>)
 8000cf0:	f004 ff30 	bl	8005b54 <HAL_UART_Receive_DMA>
	}
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000716 	.word	0x20000716
 8000cfc:	20000494 	.word	0x20000494
 8000d00:	20000410 	.word	0x20000410

08000d04 <CommandToRadio>:
// Функция передачи по радиоканалу
void CommandToRadio(uint8_t Comm)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e00a      	b.n	8000d2a <CommandToRadio+0x26>
	{
		TX_RX_Radio[i+1]=BuffMidW[i+4];
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	1d1a      	adds	r2, r3, #4
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4922      	ldr	r1, [pc, #136]	; (8000da8 <CommandToRadio+0xa4>)
 8000d1e:	5c89      	ldrb	r1, [r1, r2]
 8000d20:	4a22      	ldr	r2, [pc, #136]	; (8000dac <CommandToRadio+0xa8>)
 8000d22:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	3301      	adds	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b26      	cmp	r3, #38	; 0x26
 8000d2e:	d9f1      	bls.n	8000d14 <CommandToRadio+0x10>
	}
	// заносим в 1 элемент 4 команду
	TX_RX_Radio[0]=Comm;
 8000d30:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <CommandToRadio+0xa8>)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	7013      	strb	r3, [r2, #0]
	// Отсылаем ответ
	Rf96_Lora_TX_mode();
 8000d36:	f7ff fd68 	bl	800080a <Rf96_Lora_TX_mode>
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 8000d3a:	2128      	movs	r1, #40	; 0x28
 8000d3c:	481b      	ldr	r0, [pc, #108]	; (8000dac <CommandToRadio+0xa8>)
 8000d3e:	f7ff fdad 	bl	800089c <Crc16>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <CommandToRadio+0xac>)
 8000d48:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <CommandToRadio+0xac>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <CommandToRadio+0xa8>)
 8000d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <CommandToRadio+0xac>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <CommandToRadio+0xa8>)
 8000d62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 8000d66:	2080      	movs	r0, #128	; 0x80
 8000d68:	f7ff fcbc 	bl	80006e4 <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 8000d6c:	2080      	movs	r0, #128	; 0x80
 8000d6e:	f7ff fcd5 	bl	800071c <Rf96_FIFO_point>
	// Очистка флагов
	Rf96_LoRaClearIrq();
 8000d72:	f7ff fbc7 	bl	8000504 <Rf96_LoRaClearIrq>
	// Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8000d76:	212a      	movs	r1, #42	; 0x2a
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <CommandToRadio+0xa8>)
 8000d7a:	f7ff fd7e 	bl	800087a <Rf96_LoRaTxPacket>
	// следующее Прерывание будет по передаче
	ModeRadio=1;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <CommandToRadio+0xb0>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
	// Обнуляем массив
	for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	73bb      	strb	r3, [r7, #14]
 8000d88:	e006      	b.n	8000d98 <CommandToRadio+0x94>
		BuffMidW[i]=0;
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <CommandToRadio+0xa4>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	3301      	adds	r3, #1
 8000d96:	73bb      	strb	r3, [r7, #14]
 8000d98:	7bbb      	ldrb	r3, [r7, #14]
 8000d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d9c:	d9f5      	bls.n	8000d8a <CommandToRadio+0x86>
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000678 	.word	0x20000678
 8000dac:	200003e4 	.word	0x200003e4
 8000db0:	20000068 	.word	0x20000068
 8000db4:	2000006d 	.word	0x2000006d

08000db8 <RXCommande1>:
// Команда начала записи на SD карту
void RXCommande1(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	// Запрещаем запись на SD
	ResolveSDWrite=0;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <RXCommande1+0x50>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
	// Запись в память номера файла, на котором мы находимся
	CountFileNow=ReadNumofFileSD();
 8000dc2:	f7ff fde5 	bl	8000990 <ReadNumofFileSD>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <RXCommande1+0x54>)
 8000dcc:	701a      	strb	r2, [r3, #0]
	if(CountFileNow>=9) CountFileNow=0;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <RXCommande1+0x54>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b08      	cmp	r3, #8
 8000dd4:	d902      	bls.n	8000ddc <RXCommande1+0x24>
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <RXCommande1+0x54>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
	CountFileNow++;
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <RXCommande1+0x54>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <RXCommande1+0x54>)
 8000de6:	701a      	strb	r2, [r3, #0]
	WriteNumofFileSD(CountFileNow);
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <RXCommande1+0x54>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe71 	bl	8000ad4 <WriteNumofFileSD>
	//Записываем команду в историю
	CommandHistoryWrite(1);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f7ff fec2 	bl	8000b7c <CommandHistoryWrite>
	// Открываем доступ к записи на SD
	ResolveSDWrite=1;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <RXCommande1+0x50>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
	// Отсылаем ответ
	CommandToRadio(1);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff ff80 	bl	8000d04 <CommandToRadio>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000006a 	.word	0x2000006a
 8000e0c:	2000006c 	.word	0x2000006c

08000e10 <RXCommande2>:
// Команда включения клапаном
void RXCommande2(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <RXCommande2+0x20>)
 8000e1c:	f002 ff80 	bl	8003d20 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(2);
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff feab 	bl	8000b7c <CommandHistoryWrite>
	// Отсылаем ответ
    CommandToRadio(2);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f7ff ff6c 	bl	8000d04 <CommandToRadio>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40020400 	.word	0x40020400

08000e34 <RXCommande3>:

// Команда включения двигателя
void RXCommande3(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	// Подаем единицу на двигатель
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e3e:	480f      	ldr	r0, [pc, #60]	; (8000e7c <RXCommande3+0x48>)
 8000e40:	f002 ff6e 	bl	8003d20 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(3);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f7ff fe99 	bl	8000b7c <CommandHistoryWrite>
    if(TX_RX_Radio[1]==0)
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <RXCommande3+0x4c>)
 8000e4c:	785b      	ldrb	r3, [r3, #1]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d104      	bne.n	8000e5c <RXCommande3+0x28>
    {
        // Запускаем задержку
        UserDelayStart(5000);
 8000e52:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e56:	f7ff fd4d 	bl	80008f4 <UserDelayStart>
 8000e5a:	e009      	b.n	8000e70 <RXCommande3+0x3c>
    } else
    {
    	// Запускаем задержку
    	UserDelayStart((uint32_t)(TX_RX_Radio[1]*1000));
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <RXCommande3+0x4c>)
 8000e5e:	785b      	ldrb	r3, [r3, #1]
 8000e60:	461a      	mov	r2, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fb03 f302 	mul.w	r3, r3, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fd42 	bl	80008f4 <UserDelayStart>
    }
	// Отсылаем ответ
    CommandToRadio(3);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f7ff ff47 	bl	8000d04 <CommandToRadio>
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	200003e4 	.word	0x200003e4

08000e84 <RXCommande4>:
// Команда - запрос на отправку данных
void RXCommande4(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	// Отсылаем ответ
	CommandToRadio(4);
 8000e88:	2004      	movs	r0, #4
 8000e8a:	f7ff ff3b 	bl	8000d04 <CommandToRadio>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <RXCommande5>:
// Команда начала закрытия файла на SD карте
void RXCommande5(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	// запрещаем запись на SD
	ResolveSDWrite=0;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <RXCommande5+0x1c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
    //Записываем команду в историю
    CommandHistoryWrite(5);
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f7ff fe6c 	bl	8000b7c <CommandHistoryWrite>
    // Отсылаем ответ
    CommandToRadio(5);
 8000ea4:	2005      	movs	r0, #5
 8000ea6:	f7ff ff2d 	bl	8000d04 <CommandToRadio>
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000006a 	.word	0x2000006a

08000eb4 <RXCommande6>:
// Команда закрытия клапана
void RXCommande6(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <RXCommande6+0x20>)
 8000ec0:	f002 ff2e 	bl	8003d20 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(6);
 8000ec4:	2006      	movs	r0, #6
 8000ec6:	f7ff fe59 	bl	8000b7c <CommandHistoryWrite>
	// Отсылаем ответ
    CommandToRadio(6);
 8000eca:	2006      	movs	r0, #6
 8000ecc:	f7ff ff1a 	bl	8000d04 <CommandToRadio>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <DataConv>:
// Парсер
void DataConv(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	// Запись времени в буфер
	uint32_TO_charmass(reciveTime, SDbufWrite, 0, 8);
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <DataConv+0x60>)
 8000ee0:	6818      	ldr	r0, [r3, #0]
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4915      	ldr	r1, [pc, #84]	; (8000f3c <DataConv+0x64>)
 8000ee8:	f7ff fd18 	bl	800091c <uint32_TO_charmass>
	for(uint8_t i=0;i<38;i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	e017      	b.n	8000f22 <DataConv+0x4a>
	{
		uint32_TO_charmass(BuffMidW[i+4], SDbufWrite, 9+i*4, 3);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <DataConv+0x68>)
 8000ef8:	5cd3      	ldrb	r3, [r2, r3]
 8000efa:	4618      	mov	r0, r3
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3309      	adds	r3, #9
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	2303      	movs	r3, #3
 8000f0a:	490c      	ldr	r1, [pc, #48]	; (8000f3c <DataConv+0x64>)
 8000f0c:	f7ff fd06 	bl	800091c <uint32_TO_charmass>
		SDbufWrite[8+i*4]=',';
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	3302      	adds	r3, #2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <DataConv+0x64>)
 8000f18:	212c      	movs	r1, #44	; 0x2c
 8000f1a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<38;i++)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b25      	cmp	r3, #37	; 0x25
 8000f26:	d9e4      	bls.n	8000ef2 <DataConv+0x1a>
	}
	SDbufWrite[160]='\n';
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <DataConv+0x64>)
 8000f2a:	220a      	movs	r2, #10
 8000f2c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000064 	.word	0x20000064
 8000f3c:	200005d4 	.word	0x200005d4
 8000f40:	20000678 	.word	0x20000678

08000f44 <CKTcrc>:
// Расчет CRC8 с ЦКТ
uint8_t CKTcrc(uint8_t* data, uint8_t len)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
	uint8_t sign=0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=4;i<len+4;i++)
 8000f54:	2304      	movs	r3, #4
 8000f56:	73bb      	strb	r3, [r7, #14]
 8000f58:	e019      	b.n	8000f8e <CKTcrc+0x4a>
	{
		sign+=data[i-4];
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	3b04      	subs	r3, #4
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	4413      	add	r3, r2
 8000f68:	73fb      	strb	r3, [r7, #15]
		if(sign & 0x80)
 8000f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da07      	bge.n	8000f82 <CKTcrc+0x3e>
		{
			sign=sign<<1;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
			sign|=0x01;
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e002      	b.n	8000f88 <CKTcrc+0x44>
		} else sign=sign<<1;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=4;i<len+4;i++)
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	73bb      	strb	r3, [r7, #14]
 8000f8e:	7bba      	ldrb	r2, [r7, #14]
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	3304      	adds	r3, #4
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbe0      	blt.n	8000f5a <CKTcrc+0x16>
	}
	return sign;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f001 ff5c 	bl	8002e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f946 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 fba2 	bl	80016fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb8:	f000 fb5a 	bl	8001670 <MX_DMA_Init>
  MX_SPI1_Init();
 8000fbc:	f000 f9b2 	bl	8001324 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000fc0:	f000 fb02 	bl	80015c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fc4:	f000 fb2a 	bl	800161c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000fc8:	f000 fad4 	bl	8001574 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000fcc:	f005 fd22 	bl	8006a14 <MX_FATFS_Init>
  MX_SPI3_Init();
 8000fd0:	f000 f9de 	bl	8001390 <MX_SPI3_Init>
  MX_UART5_Init();
 8000fd4:	f000 faa2 	bl	800151c <MX_UART5_Init>
  MX_TIM6_Init();
 8000fd8:	f000 fa10 	bl	80013fc <MX_TIM6_Init>
  MX_TIM7_Init();
 8000fdc:	f000 fa44 	bl	8001468 <MX_TIM7_Init>
  MX_TIM10_Init();
 8000fe0:	f000 fa78 	bl	80014d4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	// Индикация включения УСИ ПРД
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4881      	ldr	r0, [pc, #516]	; (80011f0 <main+0x248>)
 8000fea:	f002 fe99 	bl	8003d20 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000fee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ff2:	f001 ffab 	bl	8002f4c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	487d      	ldr	r0, [pc, #500]	; (80011f0 <main+0x248>)
 8000ffc:	f002 fe90 	bl	8003d20 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001000:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001004:	f001 ffa2 	bl	8002f4c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2108      	movs	r1, #8
 800100c:	4878      	ldr	r0, [pc, #480]	; (80011f0 <main+0x248>)
 800100e:	f002 fe87 	bl	8003d20 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001012:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001016:	f001 ff99 	bl	8002f4c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2102      	movs	r1, #2
 800101e:	4874      	ldr	r0, [pc, #464]	; (80011f0 <main+0x248>)
 8001020:	f002 fe7e 	bl	8003d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2104      	movs	r1, #4
 8001028:	4871      	ldr	r0, [pc, #452]	; (80011f0 <main+0x248>)
 800102a:	f002 fe79 	bl	8003d20 <HAL_GPIO_WritePin>

    // Монтирование флешки
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800102e:	2201      	movs	r2, #1
 8001030:	4970      	ldr	r1, [pc, #448]	; (80011f4 <main+0x24c>)
 8001032:	4871      	ldr	r0, [pc, #452]	; (80011f8 <main+0x250>)
 8001034:	f007 fa94 	bl	8008560 <f_mount>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b6f      	ldr	r3, [pc, #444]	; (80011fc <main+0x254>)
 800103e:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8001040:	4b6e      	ldr	r3, [pc, #440]	; (80011fc <main+0x254>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <main+0xac>
	{ // Если проблема с флешкой  выключаем 1 светодиод
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2102      	movs	r1, #2
 800104c:	4868      	ldr	r0, [pc, #416]	; (80011f0 <main+0x248>)
 800104e:	f002 fe67 	bl	8003d20 <HAL_GPIO_WritePin>
		while(1);
 8001052:	e7fe      	b.n	8001052 <main+0xaa>
	}
	// Создание файла infoSD.txt
	ReadNumofFileSD();
 8001054:	f7ff fc9c 	bl	8000990 <ReadNumofFileSD>
	// Запись в историю информацию о подаче питания
	HistoryOnOffUSI();
 8001058:	f7ff fdee 	bl	8000c38 <HistoryOnOffUSI>
	// Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 800105c:	f7ff fba9 	bl	80007b2 <Rf96_Lora_init>
	// Режим приема
	Rf96_Lora_RX_mode();
 8001060:	f7ff fbee 	bl	8000840 <Rf96_Lora_RX_mode>
	// Запуск приема в дма с аксселерометров
	HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 8001064:	222b      	movs	r2, #43	; 0x2b
 8001066:	4966      	ldr	r1, [pc, #408]	; (8001200 <main+0x258>)
 8001068:	4866      	ldr	r0, [pc, #408]	; (8001204 <main+0x25c>)
 800106a:	f004 fd73 	bl	8005b54 <HAL_UART_Receive_DMA>
    // Запуск таймера с целью определения подключения ЦКТ
    HAL_TIM_Base_Start_IT(&htim10);
 800106e:	4866      	ldr	r0, [pc, #408]	; (8001208 <main+0x260>)
 8001070:	f004 fa73 	bl	800555a <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Синхронизация с ЦКТ
	    SyncCKT();
 8001074:	f7ff fe2a 	bl	8000ccc <SyncCKT>
	    // Прерывание по приему по радиоканалу
		if(Get_NIRQ_Di0())
 8001078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107c:	4863      	ldr	r0, [pc, #396]	; (800120c <main+0x264>)
 800107e:	f002 fe37 	bl	8003cf0 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d055      	beq.n	8001134 <main+0x18c>
		{
			if(ModeRadio==0) // если прерывание по приему
 8001088:	4b61      	ldr	r3, [pc, #388]	; (8001210 <main+0x268>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d144      	bne.n	800111a <main+0x172>
			{
            // Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8001090:	4860      	ldr	r0, [pc, #384]	; (8001214 <main+0x26c>)
 8001092:	f7ff fb71 	bl	8000778 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 8001096:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <main+0x26c>)
 8001098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800109c:	b29b      	uxth	r3, r3
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b5c      	ldr	r3, [pc, #368]	; (8001214 <main+0x26c>)
 80010a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	4b5a      	ldr	r3, [pc, #360]	; (8001218 <main+0x270>)
 80010b0:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 80010b2:	f7ff fa27 	bl	8000504 <Rf96_LoRaClearIrq>
			// Если CRC совпадает
			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2))
 80010b6:	2128      	movs	r1, #40	; 0x28
 80010b8:	4856      	ldr	r0, [pc, #344]	; (8001214 <main+0x26c>)
 80010ba:	f7ff fbef 	bl	800089c <Crc16>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b55      	ldr	r3, [pc, #340]	; (8001218 <main+0x270>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d134      	bne.n	8001134 <main+0x18c>
			{
				switch(TX_RX_Radio[CommIndex])
 80010ca:	4b52      	ldr	r3, [pc, #328]	; (8001214 <main+0x26c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	d82f      	bhi.n	8001134 <main+0x18c>
 80010d4:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <main+0x134>)
 80010d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010da:	bf00      	nop
 80010dc:	080010f5 	.word	0x080010f5
 80010e0:	080010fb 	.word	0x080010fb
 80010e4:	08001101 	.word	0x08001101
 80010e8:	08001107 	.word	0x08001107
 80010ec:	0800110d 	.word	0x0800110d
 80010f0:	08001113 	.word	0x08001113
				{
				case 1:   // Команда начала записи: Создаем файл
					RXCommande1();
 80010f4:	f7ff fe60 	bl	8000db8 <RXCommande1>
					break;
 80010f8:	e01c      	b.n	8001134 <main+0x18c>
				case 2:   // Команда открытия клапана
					RXCommande2();
 80010fa:	f7ff fe89 	bl	8000e10 <RXCommande2>
					break;
 80010fe:	e019      	b.n	8001134 <main+0x18c>
				case 3:   // Команда запуска двигателя
					RXCommande3();
 8001100:	f7ff fe98 	bl	8000e34 <RXCommande3>
					break;
 8001104:	e016      	b.n	8001134 <main+0x18c>
				case 4:   // Команда запроса данных
					RXCommande4();
 8001106:	f7ff febd 	bl	8000e84 <RXCommande4>
					break;
 800110a:	e013      	b.n	8001134 <main+0x18c>
				case 5:   // Команда закрытия файла на SD и запрет записи на SD
					RXCommande5();
 800110c:	f7ff fec2 	bl	8000e94 <RXCommande5>
					break;
 8001110:	e010      	b.n	8001134 <main+0x18c>
				case 6:    // Команда закрытия клапана
					RXCommande6();
 8001112:	f7ff fecf 	bl	8000eb4 <RXCommande6>
					break;
 8001116:	bf00      	nop
 8001118:	e00c      	b.n	8001134 <main+0x18c>
				}
			}
			} else if(ModeRadio==1) // если прерывание по передаче
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <main+0x268>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d108      	bne.n	8001134 <main+0x18c>
			{
				ModeRadio=0;
 8001122:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <main+0x268>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
				// Сбрасываем флаги
				Rf96_LoRaClearIrq();
 8001128:	f7ff f9ec 	bl	8000504 <Rf96_LoRaClearIrq>
	            // Заходим в Standby
				Rf96_Standby();
 800112c:	f7ff f9f2 	bl	8000514 <Rf96_Standby>
			    // Ожидаем команду
			    Rf96_Lora_RX_mode();
 8001130:	f7ff fb86 	bl	8000840 <Rf96_Lora_RX_mode>
			}
		}
		//  Если разрешена запись на Sd карту и если есть что записывать
		if(ResolveSDWrite==1 && ReadyToWrite==1)
 8001134:	4b39      	ldr	r3, [pc, #228]	; (800121c <main+0x274>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d149      	bne.n	80011d0 <main+0x228>
 800113c:	4b38      	ldr	r3, [pc, #224]	; (8001220 <main+0x278>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d145      	bne.n	80011d0 <main+0x228>
		{
			// Запись на SD
			DataConv();
 8001144:	f7ff fec8 	bl	8000ed8 <DataConv>
			// создаем новый файл
			fres = f_open(&fil, &(MassFileName[CountFileNow][0]), FA_OPEN_APPEND | FA_WRITE);
 8001148:	4b36      	ldr	r3, [pc, #216]	; (8001224 <main+0x27c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4a34      	ldr	r2, [pc, #208]	; (8001228 <main+0x280>)
 8001158:	4413      	add	r3, r2
 800115a:	2232      	movs	r2, #50	; 0x32
 800115c:	4619      	mov	r1, r3
 800115e:	4833      	ldr	r0, [pc, #204]	; (800122c <main+0x284>)
 8001160:	f007 fa44 	bl	80085ec <f_open>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <main+0x254>)
 800116a:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <main+0x254>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <main+0x1d8>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2102      	movs	r1, #2
 8001178:	481d      	ldr	r0, [pc, #116]	; (80011f0 <main+0x248>)
 800117a:	f002 fdd1 	bl	8003d20 <HAL_GPIO_WritePin>
				while(1);
 800117e:	e7fe      	b.n	800117e <main+0x1d6>
			}
			fres = f_write(&fil, SDbufWrite, 161, &bytesWrote);
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <main+0x288>)
 8001182:	22a1      	movs	r2, #161	; 0xa1
 8001184:	492b      	ldr	r1, [pc, #172]	; (8001234 <main+0x28c>)
 8001186:	4829      	ldr	r0, [pc, #164]	; (800122c <main+0x284>)
 8001188:	f007 fd2d 	bl	8008be6 <f_write>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <main+0x254>)
 8001192:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <main+0x254>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <main+0x200>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2102      	movs	r1, #2
 80011a0:	4813      	ldr	r0, [pc, #76]	; (80011f0 <main+0x248>)
 80011a2:	f002 fdbd 	bl	8003d20 <HAL_GPIO_WritePin>
				while(1);
 80011a6:	e7fe      	b.n	80011a6 <main+0x1fe>
			}
			// Синхронизация файла и sd карты
			//fres = f_sync(&fil);
			fres=f_close(&fil);
 80011a8:	4820      	ldr	r0, [pc, #128]	; (800122c <main+0x284>)
 80011aa:	f007 ff0f 	bl	8008fcc <f_close>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <main+0x254>)
 80011b4:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <main+0x254>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <main+0x222>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2102      	movs	r1, #2
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <main+0x248>)
 80011c4:	f002 fdac 	bl	8003d20 <HAL_GPIO_WritePin>
				while(1);
 80011c8:	e7fe      	b.n	80011c8 <main+0x220>
			}
            // Нечего записывать
			ReadyToWrite=0;
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <main+0x278>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
		}
		// Окончание задержки
		if(Timeout==1)
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <main+0x290>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	f47f af4d 	bne.w	8001074 <main+0xcc>
		{
			// Для 3 команды
			// Убираем единицу с двигателя
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e0:	4816      	ldr	r0, [pc, #88]	; (800123c <main+0x294>)
 80011e2:	f002 fd9d 	bl	8003d20 <HAL_GPIO_WritePin>
			Timeout=0;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <main+0x290>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
	    SyncCKT();
 80011ec:	e742      	b.n	8001074 <main+0xcc>
 80011ee:	bf00      	nop
 80011f0:	40020800 	.word	0x40020800
 80011f4:	080091a0 	.word	0x080091a0
 80011f8:	20000150 	.word	0x20000150
 80011fc:	20000810 	.word	0x20000810
 8001200:	20000410 	.word	0x20000410
 8001204:	20000494 	.word	0x20000494
 8001208:	20000380 	.word	0x20000380
 800120c:	40020000 	.word	0x40020000
 8001210:	2000006d 	.word	0x2000006d
 8001214:	200003e4 	.word	0x200003e4
 8001218:	20000068 	.word	0x20000068
 800121c:	2000006a 	.word	0x2000006a
 8001220:	2000006b 	.word	0x2000006b
 8001224:	2000006c 	.word	0x2000006c
 8001228:	080091fc 	.word	0x080091fc
 800122c:	20000814 	.word	0x20000814
 8001230:	200003e0 	.word	0x200003e0
 8001234:	200005d4 	.word	0x200005d4
 8001238:	20000075 	.word	0x20000075
 800123c:	40020400 	.word	0x40020400

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b094      	sub	sp, #80	; 0x50
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	2234      	movs	r2, #52	; 0x34
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f007 ff66 	bl	8009120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <SystemClock_Config+0xdc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a2b      	ldr	r2, [pc, #172]	; (800131c <SystemClock_Config+0xdc>)
 800126e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <SystemClock_Config+0xdc>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001280:	2300      	movs	r3, #0
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <SystemClock_Config+0xe0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a25      	ldr	r2, [pc, #148]	; (8001320 <SystemClock_Config+0xe0>)
 800128a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <SystemClock_Config+0xe0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800129c:	2302      	movs	r3, #2
 800129e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a0:	2301      	movs	r3, #1
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a4:	2310      	movs	r3, #16
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a8:	2302      	movs	r3, #2
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012b0:	2308      	movs	r3, #8
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012b4:	23b4      	movs	r3, #180	; 0xb4
 80012b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 f84d 	bl	8004368 <HAL_RCC_OscConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012d4:	f000 fbbe 	bl	8001a54 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012d8:	f002 fd3c 	bl	8003d54 <HAL_PWREx_EnableOverDrive>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012e2:	f000 fbb7 	bl	8001a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e6:	230f      	movs	r3, #15
 80012e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ea:	2302      	movs	r3, #2
 80012ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2105      	movs	r1, #5
 8001304:	4618      	mov	r0, r3
 8001306:	f002 fd75 	bl	8003df4 <HAL_RCC_ClockConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001310:	f000 fba0 	bl	8001a54 <Error_Handler>
  }
}
 8001314:	bf00      	nop
 8001316:	3750      	adds	r7, #80	; 0x50
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_SPI1_Init+0x64>)
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <MX_SPI1_Init+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_SPI1_Init+0x64>)
 8001330:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001334:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_SPI1_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_SPI1_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_SPI1_Init+0x64>)
 8001350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001354:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_SPI1_Init+0x64>)
 8001358:	2210      	movs	r2, #16
 800135a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_SPI1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_SPI1_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_SPI1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_SPI1_Init+0x64>)
 8001370:	220a      	movs	r2, #10
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_SPI1_Init+0x64>)
 8001376:	f003 fa51 	bl	800481c <HAL_SPI_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001380:	f000 fb68 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000718 	.word	0x20000718
 800138c:	40013000 	.word	0x40013000

08001390 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <MX_SPI3_Init+0x64>)
 8001396:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <MX_SPI3_Init+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <MX_SPI3_Init+0x64>)
 800139c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_SPI3_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_SPI3_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_SPI3_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_SPI3_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_SPI3_Init+0x64>)
 80013bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_SPI3_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <MX_SPI3_Init+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_SPI3_Init+0x64>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <MX_SPI3_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_SPI3_Init+0x64>)
 80013dc:	220a      	movs	r2, #10
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_SPI3_Init+0x64>)
 80013e2:	f003 fa1b 	bl	800481c <HAL_SPI_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80013ec:	f000 fb32 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2000043c 	.word	0x2000043c
 80013f8:	40003c00 	.word	0x40003c00

080013fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MX_TIM6_Init+0x64>)
 800140c:	4a15      	ldr	r2, [pc, #84]	; (8001464 <MX_TIM6_Init+0x68>)
 800140e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <MX_TIM6_Init+0x64>)
 8001412:	f242 3227 	movw	r2, #8999	; 0x2327
 8001416:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_TIM6_Init+0x64>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_TIM6_Init+0x64>)
 8001420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001424:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_TIM6_Init+0x64>)
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <MX_TIM6_Init+0x64>)
 800142e:	f004 f869 	bl	8005504 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001438:	f000 fb0c 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_TIM6_Init+0x64>)
 800144a:	f004 faa5 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001454:	f000 fafe 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200006a4 	.word	0x200006a4
 8001464:	40001000 	.word	0x40001000

08001468 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146e:	463b      	mov	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_TIM7_Init+0x64>)
 8001478:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <MX_TIM7_Init+0x68>)
 800147a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_TIM7_Init+0x64>)
 800147e:	f242 3227 	movw	r2, #8999	; 0x2327
 8001482:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_TIM7_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_TIM7_Init+0x64>)
 800148c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001490:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_TIM7_Init+0x64>)
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <MX_TIM7_Init+0x64>)
 800149a:	f004 f833 	bl	8005504 <HAL_TIM_Base_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80014a4:	f000 fad6 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_TIM7_Init+0x64>)
 80014b6:	f004 fa6f 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80014c0:	f000 fac8 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000a44 	.word	0x20000a44
 80014d0:	40001400 	.word	0x40001400

080014d4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_TIM10_Init+0x40>)
 80014da:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <MX_TIM10_Init+0x44>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <MX_TIM10_Init+0x40>)
 80014e0:	f242 3227 	movw	r2, #8999	; 0x2327
 80014e4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_TIM10_Init+0x40>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_TIM10_Init+0x40>)
 80014ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80014f2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_TIM10_Init+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_TIM10_Init+0x40>)
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_TIM10_Init+0x40>)
 8001502:	f003 ffff 	bl	8005504 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800150c:	f000 faa2 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000380 	.word	0x20000380
 8001518:	40014400 	.word	0x40014400

0800151c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_UART5_Init+0x50>)
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <MX_UART5_Init+0x54>)
 8001524:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_UART5_Init+0x50>)
 8001528:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800152c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_UART5_Init+0x50>)
 8001530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001534:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <MX_UART5_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_UART5_Init+0x50>)
 800153e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001542:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_UART5_Init+0x50>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_UART5_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_UART5_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_UART5_Init+0x50>)
 8001558:	f004 faae 	bl	8005ab8 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 8001562:	f000 fa77 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000494 	.word	0x20000494
 8001570:	40005000 	.word	0x40005000

08001574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_USART1_UART_Init+0x4c>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <MX_USART1_UART_Init+0x50>)
 800157c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <MX_USART1_UART_Init+0x4c>)
 8001580:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_USART1_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_USART1_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_USART1_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_USART1_UART_Init+0x4c>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_USART1_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_USART1_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_USART1_UART_Init+0x4c>)
 80015ac:	f004 fa84 	bl	8005ab8 <HAL_UART_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015b6:	f000 fa4d 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000594 	.word	0x20000594
 80015c4:	40011000 	.word	0x40011000

080015c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_USART2_UART_Init+0x4c>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	; (8001618 <MX_USART2_UART_Init+0x50>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_USART2_UART_Init+0x4c>)
 80015d4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80015d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_USART2_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_USART2_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_USART2_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_USART2_UART_Init+0x4c>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_USART2_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_USART2_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_USART2_UART_Init+0x4c>)
 8001600:	f004 fa5a 	bl	8005ab8 <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800160a:	f000 fa23 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000770 	.word	0x20000770
 8001618:	40004400 	.word	0x40004400

0800161c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_USART3_UART_Init+0x50>)
 8001624:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001628:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800162c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001654:	f004 fa30 	bl	8005ab8 <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800165e:	f000 f9f9 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000110 	.word	0x20000110
 800166c:	40004800 	.word	0x40004800

08001670 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_DMA_Init+0x88>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a1e      	ldr	r2, [pc, #120]	; (80016f8 <MX_DMA_Init+0x88>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_DMA_Init+0x88>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_DMA_Init+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <MX_DMA_Init+0x88>)
 800169c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_DMA_Init+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200b      	movs	r0, #11
 80016b4:	f001 fd47 	bl	8003146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f001 fd60 	bl	800317e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	200c      	movs	r0, #12
 80016c4:	f001 fd3f 	bl	8003146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016c8:	200c      	movs	r0, #12
 80016ca:	f001 fd58 	bl	800317e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2011      	movs	r0, #17
 80016d4:	f001 fd37 	bl	8003146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016d8:	2011      	movs	r0, #17
 80016da:	f001 fd50 	bl	800317e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	203a      	movs	r0, #58	; 0x3a
 80016e4:	f001 fd2f 	bl	8003146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80016e8:	203a      	movs	r0, #58	; 0x3a
 80016ea:	f001 fd48 	bl	800317e <HAL_NVIC_EnableIRQ>

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a66      	ldr	r2, [pc, #408]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b64      	ldr	r3, [pc, #400]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b60      	ldr	r3, [pc, #384]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a5f      	ldr	r2, [pc, #380]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b56      	ldr	r3, [pc, #344]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b52      	ldr	r3, [pc, #328]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a51      	ldr	r2, [pc, #324]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <MX_GPIO_Init+0x1b8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	210e      	movs	r1, #14
 8001786:	484c      	ldr	r0, [pc, #304]	; (80018b8 <MX_GPIO_Init+0x1bc>)
 8001788:	f002 faca 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	f248 0113 	movw	r1, #32787	; 0x8013
 8001792:	484a      	ldr	r0, [pc, #296]	; (80018bc <MX_GPIO_Init+0x1c0>)
 8001794:	f002 fac4 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800179e:	4846      	ldr	r0, [pc, #280]	; (80018b8 <MX_GPIO_Init+0x1bc>)
 80017a0:	f002 fabe 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|SSV_Pin|acel2_Pin|acel2_2_Pin 
 80017a4:	2200      	movs	r2, #0
 80017a6:	f24f 0142 	movw	r1, #61506	; 0xf042
 80017aa:	4845      	ldr	r0, [pc, #276]	; (80018c0 <MX_GPIO_Init+0x1c4>)
 80017ac:	f002 fab8 	bl	8003d20 <HAL_GPIO_WritePin>
                          |Motor_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017b6:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <MX_GPIO_Init+0x1c8>)
 80017b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	483c      	ldr	r0, [pc, #240]	; (80018b8 <MX_GPIO_Init+0x1bc>)
 80017c6:	f002 f901 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017ca:	230e      	movs	r3, #14
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4835      	ldr	r0, [pc, #212]	; (80018b8 <MX_GPIO_Init+0x1bc>)
 80017e2:	f002 f8f3 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 80017e6:	f248 0313 	movw	r3, #32787	; 0x8013
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	482f      	ldr	r0, [pc, #188]	; (80018bc <MX_GPIO_Init+0x1c0>)
 8001800:	f002 f8e4 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|acel1_Pin|acel1_1_Pin;
 8001804:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4826      	ldr	r0, [pc, #152]	; (80018b8 <MX_GPIO_Init+0x1bc>)
 800181e:	f002 f8d5 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001822:	2302      	movs	r3, #2
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182a:	2301      	movs	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4821      	ldr	r0, [pc, #132]	; (80018c0 <MX_GPIO_Init+0x1c4>)
 800183a:	f002 f8c7 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SSV_Pin acel2_2_Pin Motor_Pin PB6 */
  GPIO_InitStruct.Pin = SSV_Pin|acel2_2_Pin|Motor_Pin|GPIO_PIN_6;
 800183e:	f24d 0340 	movw	r3, #53312	; 0xd040
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	481a      	ldr	r0, [pc, #104]	; (80018c0 <MX_GPIO_Init+0x1c4>)
 8001858:	f002 f8b8 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 800185c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4812      	ldr	r0, [pc, #72]	; (80018c0 <MX_GPIO_Init+0x1c4>)
 8001876:	f002 f8a9 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800187a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	480b      	ldr	r0, [pc, #44]	; (80018bc <MX_GPIO_Init+0x1c0>)
 8001890:	f002 f89c 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001894:	2338      	movs	r3, #56	; 0x38
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <MX_GPIO_Init+0x1c4>)
 80018a8:	f002 f890 	bl	80039cc <HAL_GPIO_Init>

}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020400 	.word	0x40020400
 80018c4:	10210000 	.word	0x10210000

080018c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Обработчик прерываний Usartа по приему
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	if(huart==&huart5)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a2d      	ldr	r2, [pc, #180]	; (8001988 <HAL_UART_RxCpltCallback+0xc0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d152      	bne.n	800197e <HAL_UART_RxCpltCallback+0xb6>
	{
		// Остановка таймера, говорящая о том, что ЦКТ подключен
		HAL_TIM_Base_Stop_IT(&htim10);
 80018d8:	482c      	ldr	r0, [pc, #176]	; (800198c <HAL_UART_RxCpltCallback+0xc4>)
 80018da:	f003 fe62 	bl	80055a2 <HAL_TIM_Base_Stop_IT>
		TIM10->CNT=0;
 80018de:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <HAL_UART_RxCpltCallback+0xc8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24
        // Включение 2 светодиода, если ЦКТ подключен
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2104      	movs	r1, #4
 80018e8:	482a      	ldr	r0, [pc, #168]	; (8001994 <HAL_UART_RxCpltCallback+0xcc>)
 80018ea:	f002 fa19 	bl	8003d20 <HAL_GPIO_WritePin>
		// Если данные синхронизированы
		if(BuffCkt[0]==0x7C && BuffCkt[1]==0x6E && BuffCkt[2]==0xA1 && BuffCkt[3]==0x2C )
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_UART_RxCpltCallback+0xd0>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b7c      	cmp	r3, #124	; 0x7c
 80018f4:	d13b      	bne.n	800196e <HAL_UART_RxCpltCallback+0xa6>
 80018f6:	4b28      	ldr	r3, [pc, #160]	; (8001998 <HAL_UART_RxCpltCallback+0xd0>)
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	2b6e      	cmp	r3, #110	; 0x6e
 80018fc:	d137      	bne.n	800196e <HAL_UART_RxCpltCallback+0xa6>
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <HAL_UART_RxCpltCallback+0xd0>)
 8001900:	789b      	ldrb	r3, [r3, #2]
 8001902:	2ba1      	cmp	r3, #161	; 0xa1
 8001904:	d133      	bne.n	800196e <HAL_UART_RxCpltCallback+0xa6>
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_UART_RxCpltCallback+0xd0>)
 8001908:	78db      	ldrb	r3, [r3, #3]
 800190a:	2b2c      	cmp	r3, #44	; 0x2c
 800190c:	d12f      	bne.n	800196e <HAL_UART_RxCpltCallback+0xa6>
		{
			if(CountCKT==CountOfWriteToSD)
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_UART_RxCpltCallback+0xd4>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b05      	cmp	r3, #5
 8001914:	d124      	bne.n	8001960 <HAL_UART_RxCpltCallback+0x98>
			{
				CountCKT=0;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_UART_RxCpltCallback+0xd4>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
				// Готов к записи
				ReadyToWrite=1;
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_UART_RxCpltCallback+0xd8>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
				//  Время в мс, когда пришли данные
				reciveTime = HAL_GetTick();
 8001922:	f001 fb07 	bl	8002f34 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_UART_RxCpltCallback+0xdc>)
 800192a:	601a      	str	r2, [r3, #0]
				//Если CRC8 с ЦКТ совпадает
				if(BuffCkt[MaxBuffOfCKT-1]==CKTcrc(BuffCkt,MaxBuffOfCKT-1))
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_UART_RxCpltCallback+0xd0>)
 800192e:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 8001932:	212a      	movs	r1, #42	; 0x2a
 8001934:	4818      	ldr	r0, [pc, #96]	; (8001998 <HAL_UART_RxCpltCallback+0xd0>)
 8001936:	f7ff fb05 	bl	8000f44 <CKTcrc>
 800193a:	4603      	mov	r3, r0
 800193c:	429c      	cmp	r4, r3
 800193e:	d11a      	bne.n	8001976 <HAL_UART_RxCpltCallback+0xae>
				{
					// Перезаписываем данные в массив посредник
					for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e008      	b.n	8001958 <HAL_UART_RxCpltCallback+0x90>
					{
						BuffMidW[i]=BuffCkt[i];
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	4913      	ldr	r1, [pc, #76]	; (8001998 <HAL_UART_RxCpltCallback+0xd0>)
 800194c:	5c89      	ldrb	r1, [r1, r2]
 800194e:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <HAL_UART_RxCpltCallback+0xe0>)
 8001950:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	3301      	adds	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	2b2a      	cmp	r3, #42	; 0x2a
 800195c:	d9f3      	bls.n	8001946 <HAL_UART_RxCpltCallback+0x7e>
			if(CountCKT==CountOfWriteToSD)
 800195e:	e00a      	b.n	8001976 <HAL_UART_RxCpltCallback+0xae>
					}
				}
			} else CountCKT++;
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_UART_RxCpltCallback+0xd4>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_UART_RxCpltCallback+0xd4>)
 800196a:	701a      	strb	r2, [r3, #0]
			if(CountCKT==CountOfWriteToSD)
 800196c:	e003      	b.n	8001976 <HAL_UART_RxCpltCallback+0xae>
		} else readFlag=1;  // Если данные не синхронизированы
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_UART_RxCpltCallback+0xe4>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e000      	b.n	8001978 <HAL_UART_RxCpltCallback+0xb0>
			if(CountCKT==CountOfWriteToSD)
 8001976:	bf00      	nop
		// стартуем таймер для дальнейшей проверки на подключение ЦКТ
		HAL_TIM_Base_Start_IT(&htim10);
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <HAL_UART_RxCpltCallback+0xc4>)
 800197a:	f003 fdee 	bl	800555a <HAL_TIM_Base_Start_IT>
	}
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}
 8001986:	bf00      	nop
 8001988:	20000494 	.word	0x20000494
 800198c:	20000380 	.word	0x20000380
 8001990:	40014400 	.word	0x40014400
 8001994:	40020800 	.word	0x40020800
 8001998:	20000410 	.word	0x20000410
 800199c:	20000076 	.word	0x20000076
 80019a0:	2000006b 	.word	0x2000006b
 80019a4:	20000064 	.word	0x20000064
 80019a8:	20000678 	.word	0x20000678
 80019ac:	20000716 	.word	0x20000716

080019b0 <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	if(htim==&htim10)  // Если на ЦКТ ничего не пришло, выключаем 2 светодиод
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d112      	bne.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		TIM10->CNT=0;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim10);
 80019c6:	480a      	ldr	r0, [pc, #40]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80019c8:	f003 fdc7 	bl	800555a <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2104      	movs	r1, #4
 80019d0:	4809      	ldr	r0, [pc, #36]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019d2:	f002 f9a5 	bl	8003d20 <HAL_GPIO_WritePin>
		HAL_UART_Abort(&huart5);
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019d8:	f004 f93c 	bl	8005c54 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 80019dc:	222b      	movs	r2, #43	; 0x2b
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019e0:	4806      	ldr	r0, [pc, #24]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019e2:	f004 f8b7 	bl	8005b54 <HAL_UART_Receive_DMA>
	}
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000380 	.word	0x20000380
 80019f4:	40014400 	.word	0x40014400
 80019f8:	40020800 	.word	0x40020800
 80019fc:	20000494 	.word	0x20000494
 8001a00:	20000410 	.word	0x20000410

08001a04 <SysTick_Handler>:

// Прерывание по системному таймеру
void SysTick_Handler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Delay_start==1)
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <SysTick_Handler+0x40>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d114      	bne.n	8001a3a <SysTick_Handler+0x36>
	{
		if(Ms_Delay<TimeDelay)
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <SysTick_Handler+0x44>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <SysTick_Handler+0x48>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d205      	bcs.n	8001a28 <SysTick_Handler+0x24>
		{
			Ms_Delay++;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <SysTick_Handler+0x44>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <SysTick_Handler+0x44>)
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e008      	b.n	8001a3a <SysTick_Handler+0x36>
		}
		else
		{
			// произошло прерывание
			Timeout=1;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <SysTick_Handler+0x4c>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
			Delay_start=0;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Handler+0x40>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <SysTick_Handler+0x44>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001a3a:	f001 fa67 	bl	8002f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000074 	.word	0x20000074
 8001a48:	20000070 	.word	0x20000070
 8001a4c:	20000020 	.word	0x20000020
 8001a50:	20000075 	.word	0x20000075

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 8001a6e:	1df9      	adds	r1, r7, #7
 8001a70:	230a      	movs	r3, #10
 8001a72:	2201      	movs	r2, #1
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <SPICmd8bit+0x20>)
 8001a76:	f002 ff35 	bl	80048e4 <HAL_SPI_Transmit>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000718 	.word	0x20000718

08001a88 <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8001a92:	1df9      	adds	r1, r7, #7
 8001a94:	230a      	movs	r3, #10
 8001a96:	2201      	movs	r2, #1
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <SPIRead8bit+0x20>)
 8001a9a:	f003 f857 	bl	8004b4c <HAL_SPI_Receive>

  return(RdPara);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000718 	.word	0x20000718

08001aac <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2140      	movs	r1, #64	; 0x40
 8001aba:	480a      	ldr	r0, [pc, #40]	; (8001ae4 <SPIRead+0x38>)
 8001abc:	f002 f930 	bl	8003d20 <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ffce 	bl	8001a64 <SPICmd8bit>
  tmp = SPIRead8bit();
 8001ac8:	f7ff ffde 	bl	8001a88 <SPIRead8bit>
 8001acc:	4603      	mov	r3, r0
 8001ace:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2140      	movs	r1, #64	; 0x40
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <SPIRead+0x38>)
 8001ad6:	f002 f923 	bl	8003d20 <HAL_GPIO_WritePin>
  return(tmp);
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40020400 	.word	0x40020400

08001ae8 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 8001af8:	2200      	movs	r2, #0
 8001afa:	2140      	movs	r1, #64	; 0x40
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <SPIWrite+0x44>)
 8001afe:	f002 f90f 	bl	8003d20 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ffaa 	bl	8001a64 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001b10:	79bb      	ldrb	r3, [r7, #6]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ffa6 	bl	8001a64 <SPICmd8bit>
	NSS_H();
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2140      	movs	r1, #64	; 0x40
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <SPIWrite+0x44>)
 8001b1e:	f002 f8ff 	bl	8003d20 <HAL_GPIO_WritePin>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40020400 	.word	0x40020400

08001b30 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001b40:	79bb      	ldrb	r3, [r7, #6]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d91f      	bls.n	8001b86 <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 8001b46:	2200      	movs	r2, #0
 8001b48:	2140      	movs	r1, #64	; 0x40
 8001b4a:	4811      	ldr	r0, [pc, #68]	; (8001b90 <SPIBurstRead+0x60>)
 8001b4c:	f002 f8e8 	bl	8003d20 <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff86 	bl	8001a64 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e009      	b.n	8001b72 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	18d4      	adds	r4, r2, r3
 8001b64:	f7ff ff90 	bl	8001a88 <SPIRead8bit>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	79bb      	ldrb	r3, [r7, #6]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d3f1      	bcc.n	8001b5e <SPIBurstRead+0x2e>
      NSS_H();
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2140      	movs	r1, #64	; 0x40
 8001b7e:	4804      	ldr	r0, [pc, #16]	; (8001b90 <SPIBurstRead+0x60>)
 8001b80:	f002 f8ce 	bl	8003d20 <HAL_GPIO_WritePin>
 8001b84:	e000      	b.n	8001b88 <SPIBurstRead+0x58>
    return;
 8001b86:	bf00      	nop
  }
}
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd90      	pop	{r4, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40020400 	.word	0x40020400

08001b94 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001ba4:	79bb      	ldrb	r3, [r7, #6]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d922      	bls.n	8001bf0 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 8001baa:	2200      	movs	r2, #0
 8001bac:	2140      	movs	r1, #64	; 0x40
 8001bae:	4812      	ldr	r0, [pc, #72]	; (8001bf8 <BurstWrite+0x64>)
 8001bb0:	f002 f8b6 	bl	8003d20 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff51 	bl	8001a64 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	e009      	b.n	8001bdc <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff47 	bl	8001a64 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	79bb      	ldrb	r3, [r7, #6]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d3f1      	bcc.n	8001bc8 <BurstWrite+0x34>
    NSS_H();
 8001be4:	2201      	movs	r2, #1
 8001be6:	2140      	movs	r1, #64	; 0x40
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <BurstWrite+0x64>)
 8001bea:	f002 f899 	bl	8003d20 <HAL_GPIO_WritePin>
 8001bee:	e000      	b.n	8001bf2 <BurstWrite+0x5e>
    return;
 8001bf0:	bf00      	nop
  }
}
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40020400 	.word	0x40020400

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a4e      	ldr	r2, [pc, #312]	; (8001da4 <HAL_SPI_MspInit+0x158>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d12c      	bne.n	8001cc8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a4c      	ldr	r2, [pc, #304]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a45      	ldr	r2, [pc, #276]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ca6:	23e0      	movs	r3, #224	; 0xe0
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	483a      	ldr	r0, [pc, #232]	; (8001dac <HAL_SPI_MspInit+0x160>)
 8001cc2:	f001 fe83 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001cc6:	e068      	b.n	8001d9a <HAL_SPI_MspInit+0x14e>
  else if(hspi->Instance==SPI3)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a38      	ldr	r2, [pc, #224]	; (8001db0 <HAL_SPI_MspInit+0x164>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d163      	bne.n	8001d9a <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a33      	ldr	r2, [pc, #204]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a2c      	ldr	r2, [pc, #176]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_SPI_MspInit+0x15c>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001d36:	2307      	movs	r3, #7
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	481c      	ldr	r0, [pc, #112]	; (8001db4 <HAL_SPI_MspInit+0x168>)
 8001d42:	f001 fe43 	bl	80039cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d58:	2306      	movs	r3, #6
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	4815      	ldr	r0, [pc, #84]	; (8001db8 <HAL_SPI_MspInit+0x16c>)
 8001d64:	f001 fe32 	bl	80039cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d7a:	2306      	movs	r3, #6
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <HAL_SPI_MspInit+0x16c>)
 8001d86:	f001 fe21 	bl	80039cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2033      	movs	r0, #51	; 0x33
 8001d90:	f001 f9d9 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001d94:	2033      	movs	r0, #51	; 0x33
 8001d96:	f001 f9f2 	bl	800317e <HAL_NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3730      	adds	r7, #48	; 0x30
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40013000 	.word	0x40013000
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40003c00 	.word	0x40003c00
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40020800 	.word	0x40020800

08001dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a2a      	ldr	r2, [pc, #168]	; (8001e74 <HAL_TIM_Base_MspInit+0xb8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d116      	bne.n	8001dfc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <HAL_TIM_Base_MspInit+0xbc>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a28      	ldr	r2, [pc, #160]	; (8001e78 <HAL_TIM_Base_MspInit+0xbc>)
 8001dd8:	f043 0310 	orr.w	r3, r3, #16
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_TIM_Base_MspInit+0xbc>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2036      	movs	r0, #54	; 0x36
 8001df0:	f001 f9a9 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001df4:	2036      	movs	r0, #54	; 0x36
 8001df6:	f001 f9c2 	bl	800317e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001dfa:	e036      	b.n	8001e6a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_TIM_Base_MspInit+0xc0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d116      	bne.n	8001e34 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_TIM_Base_MspInit+0xbc>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <HAL_TIM_Base_MspInit+0xbc>)
 8001e10:	f043 0320 	orr.w	r3, r3, #32
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <HAL_TIM_Base_MspInit+0xbc>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2037      	movs	r0, #55	; 0x37
 8001e28:	f001 f98d 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e2c:	2037      	movs	r0, #55	; 0x37
 8001e2e:	f001 f9a6 	bl	800317e <HAL_NVIC_EnableIRQ>
}
 8001e32:	e01a      	b.n	8001e6a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_TIM_Base_MspInit+0xc4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d115      	bne.n	8001e6a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_TIM_Base_MspInit+0xbc>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_TIM_Base_MspInit+0xbc>)
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_TIM_Base_MspInit+0xbc>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2019      	movs	r0, #25
 8001e60:	f001 f971 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e64:	2019      	movs	r0, #25
 8001e66:	f001 f98a 	bl	800317e <HAL_NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40001000 	.word	0x40001000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40001400 	.word	0x40001400
 8001e80:	40014400 	.word	0x40014400

08001e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b092      	sub	sp, #72	; 0x48
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a87      	ldr	r2, [pc, #540]	; (80020c0 <HAL_UART_MspInit+0x23c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	f040 8083 	bne.w	8001fae <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8001eac:	4b85      	ldr	r3, [pc, #532]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	4a84      	ldr	r2, [pc, #528]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb8:	4b82      	ldr	r3, [pc, #520]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec8:	4b7e      	ldr	r3, [pc, #504]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4a7d      	ldr	r2, [pc, #500]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed4:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee4:	4b77      	ldr	r3, [pc, #476]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	4a76      	ldr	r2, [pc, #472]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001eea:	f043 0308 	orr.w	r3, r3, #8
 8001eee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef0:	4b74      	ldr	r3, [pc, #464]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f06:	2301      	movs	r3, #1
 8001f08:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f0e:	2308      	movs	r3, #8
 8001f10:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f16:	4619      	mov	r1, r3
 8001f18:	486b      	ldr	r0, [pc, #428]	; (80020c8 <HAL_UART_MspInit+0x244>)
 8001f1a:	f001 fd57 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f26:	2301      	movs	r3, #1
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f2e:	2308      	movs	r3, #8
 8001f30:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f36:	4619      	mov	r1, r3
 8001f38:	4864      	ldr	r0, [pc, #400]	; (80020cc <HAL_UART_MspInit+0x248>)
 8001f3a:	f001 fd47 	bl	80039cc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001f3e:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f40:	4a64      	ldr	r2, [pc, #400]	; (80020d4 <HAL_UART_MspInit+0x250>)
 8001f42:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001f44:	4b62      	ldr	r3, [pc, #392]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f4a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f4c:	4b60      	ldr	r3, [pc, #384]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f58:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f5e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f60:	4b5b      	ldr	r3, [pc, #364]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f66:	4b5a      	ldr	r3, [pc, #360]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001f6c:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f72:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f74:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f7a:	4b55      	ldr	r3, [pc, #340]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001f80:	4853      	ldr	r0, [pc, #332]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f82:	f001 f917 	bl	80031b4 <HAL_DMA_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001f8c:	f7ff fd62 	bl	8001a54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a4f      	ldr	r2, [pc, #316]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
 8001f96:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <HAL_UART_MspInit+0x24c>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2035      	movs	r0, #53	; 0x35
 8001fa2:	f001 f8d0 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001fa6:	2035      	movs	r0, #53	; 0x35
 8001fa8:	f001 f8e9 	bl	800317e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fac:	e18e      	b.n	80022cc <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a49      	ldr	r2, [pc, #292]	; (80020d8 <HAL_UART_MspInit+0x254>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	f040 8099 	bne.w	80020ec <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbe:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a40      	ldr	r2, [pc, #256]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b3e      	ldr	r3, [pc, #248]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a39      	ldr	r2, [pc, #228]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	623b      	str	r3, [r7, #32]
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a32      	ldr	r2, [pc, #200]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_UART_MspInit+0x240>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800200e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002020:	2307      	movs	r3, #7
 8002022:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002028:	4619      	mov	r1, r3
 800202a:	482c      	ldr	r0, [pc, #176]	; (80020dc <HAL_UART_MspInit+0x258>)
 800202c:	f001 fcce 	bl	80039cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002040:	2307      	movs	r3, #7
 8002042:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002048:	4619      	mov	r1, r3
 800204a:	4825      	ldr	r0, [pc, #148]	; (80020e0 <HAL_UART_MspInit+0x25c>)
 800204c:	f001 fcbe 	bl	80039cc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_UART_MspInit+0x260>)
 8002052:	4a25      	ldr	r2, [pc, #148]	; (80020e8 <HAL_UART_MspInit+0x264>)
 8002054:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_UART_MspInit+0x260>)
 8002058:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800205c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_UART_MspInit+0x260>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <HAL_UART_MspInit+0x260>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_UART_MspInit+0x260>)
 800206c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002070:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_UART_MspInit+0x260>)
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_UART_MspInit+0x260>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_UART_MspInit+0x260>)
 8002080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002084:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_UART_MspInit+0x260>)
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_UART_MspInit+0x260>)
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002092:	4814      	ldr	r0, [pc, #80]	; (80020e4 <HAL_UART_MspInit+0x260>)
 8002094:	f001 f88e 	bl	80031b4 <HAL_DMA_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 800209e:	f7ff fcd9 	bl	8001a54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <HAL_UART_MspInit+0x260>)
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34
 80020a8:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <HAL_UART_MspInit+0x260>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2025      	movs	r0, #37	; 0x25
 80020b4:	f001 f847 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020b8:	2025      	movs	r0, #37	; 0x25
 80020ba:	f001 f860 	bl	800317e <HAL_NVIC_EnableIRQ>
}
 80020be:	e105      	b.n	80022cc <HAL_UART_MspInit+0x448>
 80020c0:	40005000 	.word	0x40005000
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40020c00 	.word	0x40020c00
 80020d0:	200007b0 	.word	0x200007b0
 80020d4:	40026010 	.word	0x40026010
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	200004d4 	.word	0x200004d4
 80020e8:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a78      	ldr	r2, [pc, #480]	; (80022d4 <HAL_UART_MspInit+0x450>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d162      	bne.n	80021bc <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	4b77      	ldr	r3, [pc, #476]	; (80022d8 <HAL_UART_MspInit+0x454>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a76      	ldr	r2, [pc, #472]	; (80022d8 <HAL_UART_MspInit+0x454>)
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b74      	ldr	r3, [pc, #464]	; (80022d8 <HAL_UART_MspInit+0x454>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	4b70      	ldr	r3, [pc, #448]	; (80022d8 <HAL_UART_MspInit+0x454>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a6f      	ldr	r2, [pc, #444]	; (80022d8 <HAL_UART_MspInit+0x454>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <HAL_UART_MspInit+0x454>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800212e:	230c      	movs	r3, #12
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213e:	2307      	movs	r3, #7
 8002140:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002146:	4619      	mov	r1, r3
 8002148:	4864      	ldr	r0, [pc, #400]	; (80022dc <HAL_UART_MspInit+0x458>)
 800214a:	f001 fc3f 	bl	80039cc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800214e:	4b64      	ldr	r3, [pc, #400]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 8002150:	4a64      	ldr	r2, [pc, #400]	; (80022e4 <HAL_UART_MspInit+0x460>)
 8002152:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002154:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 8002156:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800215a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800215c:	4b60      	ldr	r3, [pc, #384]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 800215e:	2240      	movs	r2, #64	; 0x40
 8002160:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002168:	4b5d      	ldr	r3, [pc, #372]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 800216a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002170:	4b5b      	ldr	r3, [pc, #364]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 8002172:	2200      	movs	r2, #0
 8002174:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002176:	4b5a      	ldr	r3, [pc, #360]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800217c:	4b58      	ldr	r3, [pc, #352]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002182:	4b57      	ldr	r3, [pc, #348]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 8002184:	2200      	movs	r2, #0
 8002186:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002188:	4b55      	ldr	r3, [pc, #340]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 800218a:	2200      	movs	r2, #0
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800218e:	4854      	ldr	r0, [pc, #336]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 8002190:	f001 f810 	bl	80031b4 <HAL_DMA_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_UART_MspInit+0x31a>
      Error_Handler();
 800219a:	f7ff fc5b 	bl	8001a54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4f      	ldr	r2, [pc, #316]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
 80021a4:	4a4e      	ldr	r2, [pc, #312]	; (80022e0 <HAL_UART_MspInit+0x45c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	2026      	movs	r0, #38	; 0x26
 80021b0:	f000 ffc9 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021b4:	2026      	movs	r0, #38	; 0x26
 80021b6:	f000 ffe2 	bl	800317e <HAL_NVIC_EnableIRQ>
}
 80021ba:	e087      	b.n	80022cc <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a49      	ldr	r2, [pc, #292]	; (80022e8 <HAL_UART_MspInit+0x464>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	f040 8082 	bne.w	80022cc <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <HAL_UART_MspInit+0x454>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	4a41      	ldr	r2, [pc, #260]	; (80022d8 <HAL_UART_MspInit+0x454>)
 80021d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d6:	6413      	str	r3, [r2, #64]	; 0x40
 80021d8:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <HAL_UART_MspInit+0x454>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <HAL_UART_MspInit+0x454>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4a3a      	ldr	r2, [pc, #232]	; (80022d8 <HAL_UART_MspInit+0x454>)
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	6313      	str	r3, [r2, #48]	; 0x30
 80021f4:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <HAL_UART_MspInit+0x454>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_UART_MspInit+0x454>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	4a33      	ldr	r2, [pc, #204]	; (80022d8 <HAL_UART_MspInit+0x454>)
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	6313      	str	r3, [r2, #48]	; 0x30
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_UART_MspInit+0x454>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800221c:	2320      	movs	r3, #32
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800222c:	2307      	movs	r3, #7
 800222e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002230:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002234:	4619      	mov	r1, r3
 8002236:	482d      	ldr	r0, [pc, #180]	; (80022ec <HAL_UART_MspInit+0x468>)
 8002238:	f001 fbc8 	bl	80039cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800223c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224a:	2303      	movs	r3, #3
 800224c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800224e:	2307      	movs	r3, #7
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002252:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002256:	4619      	mov	r1, r3
 8002258:	4825      	ldr	r0, [pc, #148]	; (80022f0 <HAL_UART_MspInit+0x46c>)
 800225a:	f001 fbb7 	bl	80039cc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800225e:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_UART_MspInit+0x470>)
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <HAL_UART_MspInit+0x474>)
 8002262:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002264:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <HAL_UART_MspInit+0x470>)
 8002266:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800226a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_UART_MspInit+0x470>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_UART_MspInit+0x470>)
 8002274:	2200      	movs	r2, #0
 8002276:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002278:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <HAL_UART_MspInit+0x470>)
 800227a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800227e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_UART_MspInit+0x470>)
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002286:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_UART_MspInit+0x470>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_UART_MspInit+0x470>)
 800228e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002292:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_UART_MspInit+0x470>)
 8002296:	2200      	movs	r2, #0
 8002298:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <HAL_UART_MspInit+0x470>)
 800229c:	2200      	movs	r2, #0
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80022a0:	4814      	ldr	r0, [pc, #80]	; (80022f4 <HAL_UART_MspInit+0x470>)
 80022a2:	f000 ff87 	bl	80031b4 <HAL_DMA_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 80022ac:	f7ff fbd2 	bl	8001a54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a10      	ldr	r2, [pc, #64]	; (80022f4 <HAL_UART_MspInit+0x470>)
 80022b4:	635a      	str	r2, [r3, #52]	; 0x34
 80022b6:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <HAL_UART_MspInit+0x470>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	2027      	movs	r0, #39	; 0x27
 80022c2:	f000 ff40 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022c6:	2027      	movs	r0, #39	; 0x27
 80022c8:	f000 ff59 	bl	800317e <HAL_NVIC_EnableIRQ>
}
 80022cc:	bf00      	nop
 80022ce:	3748      	adds	r7, #72	; 0x48
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40004400 	.word	0x40004400
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	20000534 	.word	0x20000534
 80022e4:	400260a0 	.word	0x400260a0
 80022e8:	40004800 	.word	0x40004800
 80022ec:	40020800 	.word	0x40020800
 80022f0:	40020400 	.word	0x40020400
 80022f4:	200000ac 	.word	0x200000ac
 80022f8:	40026028 	.word	0x40026028

080022fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <HardFault_Handler+0x4>

08002310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <MemManage_Handler+0x4>

08002316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <BusFault_Handler+0x4>

0800231c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <UsageFault_Handler+0x4>

08002322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <DMA1_Stream0_IRQHandler+0x10>)
 8002352:	f001 f8c7 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200007b0 	.word	0x200007b0

08002360 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <DMA1_Stream1_IRQHandler+0x10>)
 8002366:	f001 f8bd 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200000ac 	.word	0x200000ac

08002374 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <DMA1_Stream6_IRQHandler+0x10>)
 800237a:	f001 f8b3 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000534 	.word	0x20000534

08002388 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800238e:	f003 f933 	bl	80055f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000380 	.word	0x20000380

0800239c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <USART1_IRQHandler+0x10>)
 80023a2:	f003 fcd9 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000594 	.word	0x20000594

080023b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <USART2_IRQHandler+0x10>)
 80023b6:	f003 fccf 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000770 	.word	0x20000770

080023c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <USART3_IRQHandler+0x10>)
 80023ca:	f003 fcc5 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000110 	.word	0x20000110

080023d8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <SPI3_IRQHandler+0x10>)
 80023de:	f002 fe61 	bl	80050a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000043c 	.word	0x2000043c

080023ec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <UART5_IRQHandler+0x10>)
 80023f2:	f003 fcb1 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000494 	.word	0x20000494

08002400 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <TIM6_DAC_IRQHandler+0x10>)
 8002406:	f003 f8f7 	bl	80055f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200006a4 	.word	0x200006a4

08002414 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <TIM7_IRQHandler+0x10>)
 800241a:	f003 f8ed 	bl	80055f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000a44 	.word	0x20000a44

08002428 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <DMA2_Stream2_IRQHandler+0x10>)
 800242e:	f001 f859 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200004d4 	.word	0x200004d4

0800243c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <SystemInit+0x28>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <SystemInit+0x28>)
 8002448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800244c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SystemInit+0x28>)
 8002452:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002456:	609a      	str	r2, [r3, #8]
#endif
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002470:	f000 fd60 	bl	8002f34 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <SPI_Timer_On+0x20>)
 8002478:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800247a:	4a04      	ldr	r2, [pc, #16]	; (800248c <SPI_Timer_On+0x24>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000a84 	.word	0x20000a84
 800248c:	20000a88 	.word	0x20000a88

08002490 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002494:	f000 fd4e 	bl	8002f34 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <SPI_Timer_Status+0x24>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	1ad2      	subs	r2, r2, r3
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <SPI_Timer_Status+0x28>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	bf34      	ite	cc
 80024a8:	2301      	movcc	r3, #1
 80024aa:	2300      	movcs	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000a84 	.word	0x20000a84
 80024b8:	20000a88 	.word	0x20000a88

080024bc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;

    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 80024c6:	f107 020f 	add.w	r2, r7, #15
 80024ca:	1df9      	adds	r1, r7, #7
 80024cc:	2332      	movs	r3, #50	; 0x32
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2301      	movs	r3, #1
 80024d2:	4804      	ldr	r0, [pc, #16]	; (80024e4 <xchg_spi+0x28>)
 80024d4:	f002 fc43 	bl	8004d5e <HAL_SPI_TransmitReceive>
    return rxDat;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000043c 	.word	0x2000043c

080024e8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	e00a      	b.n	800250e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	18d4      	adds	r4, r2, r3
 80024fe:	20ff      	movs	r0, #255	; 0xff
 8002500:	f7ff ffdc 	bl	80024bc <xchg_spi>
 8002504:	4603      	mov	r3, r0
 8002506:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3301      	adds	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d3f0      	bcc.n	80024f8 <rcvr_spi_multi+0x10>
	}
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bd90      	pop	{r4, r7, pc}

0800251e <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e009      	b.n	8002542 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ffc0 	bl	80024bc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3301      	adds	r3, #1
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d3f1      	bcc.n	800252e <xmit_spi_multi+0x10>
	}
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800255a:	f000 fceb 	bl	8002f34 <HAL_GetTick>
 800255e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002564:	20ff      	movs	r0, #255	; 0xff
 8002566:	f7ff ffa9 	bl	80024bc <xchg_spi>
 800256a:	4603      	mov	r3, r0
 800256c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2bff      	cmp	r3, #255	; 0xff
 8002572:	d007      	beq.n	8002584 <wait_ready+0x32>
 8002574:	f000 fcde 	bl	8002f34 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8ef      	bhi.n	8002564 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2bff      	cmp	r3, #255	; 0xff
 8002588:	bf0c      	ite	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	2300      	movne	r3, #0
 800258e:	b2db      	uxtb	r3, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800259c:	2201      	movs	r2, #1
 800259e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025a2:	4804      	ldr	r0, [pc, #16]	; (80025b4 <despiselect+0x1c>)
 80025a4:	f001 fbbc 	bl	8003d20 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80025a8:	20ff      	movs	r0, #255	; 0xff
 80025aa:	f7ff ff87 	bl	80024bc <xchg_spi>

}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40020000 	.word	0x40020000

080025b8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80025bc:	2200      	movs	r2, #0
 80025be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025c2:	480a      	ldr	r0, [pc, #40]	; (80025ec <spiselect+0x34>)
 80025c4:	f001 fbac 	bl	8003d20 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80025c8:	20ff      	movs	r0, #255	; 0xff
 80025ca:	f7ff ff77 	bl	80024bc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80025ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025d2:	f7ff ffbe 	bl	8002552 <wait_ready>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <spiselect+0x28>
 80025dc:	2301      	movs	r3, #1
 80025de:	e002      	b.n	80025e6 <spiselect+0x2e>

	despiselect();
 80025e0:	f7ff ffda 	bl	8002598 <despiselect>
	return 0;	/* Timeout */
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40020000 	.word	0x40020000

080025f0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80025fa:	20c8      	movs	r0, #200	; 0xc8
 80025fc:	f7ff ff34 	bl	8002468 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002600:	20ff      	movs	r0, #255	; 0xff
 8002602:	f7ff ff5b 	bl	80024bc <xchg_spi>
 8002606:	4603      	mov	r3, r0
 8002608:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2bff      	cmp	r3, #255	; 0xff
 800260e:	d104      	bne.n	800261a <rcvr_datablock+0x2a>
 8002610:	f7ff ff3e 	bl	8002490 <SPI_Timer_Status>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f2      	bne.n	8002600 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2bfe      	cmp	r3, #254	; 0xfe
 800261e:	d001      	beq.n	8002624 <rcvr_datablock+0x34>
 8002620:	2300      	movs	r3, #0
 8002622:	e00a      	b.n	800263a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ff5e 	bl	80024e8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800262c:	20ff      	movs	r0, #255	; 0xff
 800262e:	f7ff ff45 	bl	80024bc <xchg_spi>
 8002632:	20ff      	movs	r0, #255	; 0xff
 8002634:	f7ff ff42 	bl	80024bc <xchg_spi>

	return 1;						/* Function succeeded */
 8002638:	2301      	movs	r3, #1
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800264e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002652:	f7ff ff7e 	bl	8002552 <wait_ready>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <xmit_datablock+0x1e>
 800265c:	2300      	movs	r3, #0
 800265e:	e01e      	b.n	800269e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff2a 	bl	80024bc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	2bfd      	cmp	r3, #253	; 0xfd
 800266c:	d016      	beq.n	800269c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800266e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ff53 	bl	800251e <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002678:	20ff      	movs	r0, #255	; 0xff
 800267a:	f7ff ff1f 	bl	80024bc <xchg_spi>
 800267e:	20ff      	movs	r0, #255	; 0xff
 8002680:	f7ff ff1c 	bl	80024bc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002684:	20ff      	movs	r0, #255	; 0xff
 8002686:	f7ff ff19 	bl	80024bc <xchg_spi>
 800268a:	4603      	mov	r3, r0
 800268c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2b05      	cmp	r3, #5
 8002696:	d001      	beq.n	800269c <xmit_datablock+0x5a>
 8002698:	2300      	movs	r3, #0
 800269a:	e000      	b.n	800269e <xmit_datablock+0x5c>
	}
	return 1;
 800269c:	2301      	movs	r3, #1
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	6039      	str	r1, [r7, #0]
 80026b0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da0e      	bge.n	80026d8 <send_cmd+0x32>
		cmd &= 0x7F;
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80026c2:	2100      	movs	r1, #0
 80026c4:	2037      	movs	r0, #55	; 0x37
 80026c6:	f7ff ffee 	bl	80026a6 <send_cmd>
 80026ca:	4603      	mov	r3, r0
 80026cc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80026ce:	7bbb      	ldrb	r3, [r7, #14]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d901      	bls.n	80026d8 <send_cmd+0x32>
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	e051      	b.n	800277c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d008      	beq.n	80026f0 <send_cmd+0x4a>
		despiselect();
 80026de:	f7ff ff5b 	bl	8002598 <despiselect>
		if (!spiselect()) return 0xFF;
 80026e2:	f7ff ff69 	bl	80025b8 <spiselect>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <send_cmd+0x4a>
 80026ec:	23ff      	movs	r3, #255	; 0xff
 80026ee:	e045      	b.n	800277c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fedf 	bl	80024bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	0e1b      	lsrs	r3, r3, #24
 8002702:	b2db      	uxtb	r3, r3
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fed9 	bl	80024bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	0c1b      	lsrs	r3, r3, #16
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fed3 	bl	80024bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	b2db      	uxtb	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fecd 	bl	80024bc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fec8 	bl	80024bc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <send_cmd+0x94>
 8002736:	2395      	movs	r3, #149	; 0x95
 8002738:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d101      	bne.n	8002744 <send_cmd+0x9e>
 8002740:	2387      	movs	r3, #135	; 0x87
 8002742:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff feb8 	bl	80024bc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d102      	bne.n	8002758 <send_cmd+0xb2>
 8002752:	20ff      	movs	r0, #255	; 0xff
 8002754:	f7ff feb2 	bl	80024bc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002758:	230a      	movs	r3, #10
 800275a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800275c:	20ff      	movs	r0, #255	; 0xff
 800275e:	f7ff fead 	bl	80024bc <xchg_spi>
 8002762:	4603      	mov	r3, r0
 8002764:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800276a:	2b00      	cmp	r3, #0
 800276c:	da05      	bge.n	800277a <send_cmd+0xd4>
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	3b01      	subs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <send_cmd+0xb6>

	return res;							/* Return received response */
 800277a:	7bbb      	ldrb	r3, [r7, #14]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <USER_SPI_initialize+0x14>
 8002794:	2301      	movs	r3, #1
 8002796:	e0cb      	b.n	8002930 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002798:	4b67      	ldr	r3, [pc, #412]	; (8002938 <USER_SPI_initialize+0x1b4>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <USER_SPI_initialize+0x2a>
 80027a6:	4b64      	ldr	r3, [pc, #400]	; (8002938 <USER_SPI_initialize+0x1b4>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e0c0      	b.n	8002930 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 80027ae:	4b63      	ldr	r3, [pc, #396]	; (800293c <USER_SPI_initialize+0x1b8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b6:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80027b8:	230a      	movs	r3, #10
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e005      	b.n	80027ca <USER_SPI_initialize+0x46>
 80027be:	20ff      	movs	r0, #255	; 0xff
 80027c0:	f7ff fe7c 	bl	80024bc <xchg_spi>
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f6      	bne.n	80027be <USER_SPI_initialize+0x3a>

	ty = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80027d4:	2100      	movs	r1, #0
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7ff ff65 	bl	80026a6 <send_cmd>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b01      	cmp	r3, #1
 80027e0:	f040 808b 	bne.w	80028fa <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80027e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027e8:	f7ff fe3e 	bl	8002468 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80027ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80027f0:	2008      	movs	r0, #8
 80027f2:	f7ff ff58 	bl	80026a6 <send_cmd>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d151      	bne.n	80028a0 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	e00d      	b.n	800281e <USER_SPI_initialize+0x9a>
 8002802:	7bfc      	ldrb	r4, [r7, #15]
 8002804:	20ff      	movs	r0, #255	; 0xff
 8002806:	f7ff fe59 	bl	80024bc <xchg_spi>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	f107 0310 	add.w	r3, r7, #16
 8002812:	4423      	add	r3, r4
 8002814:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	3301      	adds	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d9ee      	bls.n	8002802 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002824:	7abb      	ldrb	r3, [r7, #10]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d167      	bne.n	80028fa <USER_SPI_initialize+0x176>
 800282a:	7afb      	ldrb	r3, [r7, #11]
 800282c:	2baa      	cmp	r3, #170	; 0xaa
 800282e:	d164      	bne.n	80028fa <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002830:	bf00      	nop
 8002832:	f7ff fe2d 	bl	8002490 <SPI_Timer_Status>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <USER_SPI_initialize+0xc8>
 800283c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002840:	20a9      	movs	r0, #169	; 0xa9
 8002842:	f7ff ff30 	bl	80026a6 <send_cmd>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f2      	bne.n	8002832 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800284c:	f7ff fe20 	bl	8002490 <SPI_Timer_Status>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d051      	beq.n	80028fa <USER_SPI_initialize+0x176>
 8002856:	2100      	movs	r1, #0
 8002858:	203a      	movs	r0, #58	; 0x3a
 800285a:	f7ff ff24 	bl	80026a6 <send_cmd>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d14a      	bne.n	80028fa <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e00d      	b.n	8002886 <USER_SPI_initialize+0x102>
 800286a:	7bfc      	ldrb	r4, [r7, #15]
 800286c:	20ff      	movs	r0, #255	; 0xff
 800286e:	f7ff fe25 	bl	80024bc <xchg_spi>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	f107 0310 	add.w	r3, r7, #16
 800287a:	4423      	add	r3, r4
 800287c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	3301      	adds	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d9ee      	bls.n	800286a <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800288c:	7a3b      	ldrb	r3, [r7, #8]
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <USER_SPI_initialize+0x116>
 8002896:	230c      	movs	r3, #12
 8002898:	e000      	b.n	800289c <USER_SPI_initialize+0x118>
 800289a:	2304      	movs	r3, #4
 800289c:	737b      	strb	r3, [r7, #13]
 800289e:	e02c      	b.n	80028fa <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80028a0:	2100      	movs	r1, #0
 80028a2:	20a9      	movs	r0, #169	; 0xa9
 80028a4:	f7ff feff 	bl	80026a6 <send_cmd>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d804      	bhi.n	80028b8 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80028ae:	2302      	movs	r3, #2
 80028b0:	737b      	strb	r3, [r7, #13]
 80028b2:	23a9      	movs	r3, #169	; 0xa9
 80028b4:	73bb      	strb	r3, [r7, #14]
 80028b6:	e003      	b.n	80028c0 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80028b8:	2301      	movs	r3, #1
 80028ba:	737b      	strb	r3, [r7, #13]
 80028bc:	2301      	movs	r3, #1
 80028be:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80028c0:	bf00      	nop
 80028c2:	f7ff fde5 	bl	8002490 <SPI_Timer_Status>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <USER_SPI_initialize+0x158>
 80028cc:	7bbb      	ldrb	r3, [r7, #14]
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fee8 	bl	80026a6 <send_cmd>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f2      	bne.n	80028c2 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80028dc:	f7ff fdd8 	bl	8002490 <SPI_Timer_Status>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <USER_SPI_initialize+0x172>
 80028e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ea:	2010      	movs	r0, #16
 80028ec:	f7ff fedb 	bl	80026a6 <send_cmd>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <USER_SPI_initialize+0x176>
				ty = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <USER_SPI_initialize+0x1bc>)
 80028fc:	7b7b      	ldrb	r3, [r7, #13]
 80028fe:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002900:	f7ff fe4a 	bl	8002598 <despiselect>

	if (ty) {			/* OK */
 8002904:	7b7b      	ldrb	r3, [r7, #13]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <USER_SPI_initialize+0x1b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2210      	movs	r2, #16
 8002910:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <USER_SPI_initialize+0x1b4>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <USER_SPI_initialize+0x1b4>)
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e002      	b.n	800292a <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <USER_SPI_initialize+0x1b4>)
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800292a:	4b03      	ldr	r3, [pc, #12]	; (8002938 <USER_SPI_initialize+0x1b4>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b2db      	uxtb	r3, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bd90      	pop	{r4, r7, pc}
 8002938:	20000028 	.word	0x20000028
 800293c:	2000043c 	.word	0x2000043c
 8002940:	20000077 	.word	0x20000077

08002944 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <USER_SPI_status+0x14>
 8002954:	2301      	movs	r3, #1
 8002956:	e002      	b.n	800295e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <USER_SPI_status+0x28>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b2db      	uxtb	r3, r3
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000028 	.word	0x20000028

08002970 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4603      	mov	r3, r0
 800297e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <USER_SPI_read+0x1c>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <USER_SPI_read+0x20>
 800298c:	2304      	movs	r3, #4
 800298e:	e04d      	b.n	8002a2c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002990:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <USER_SPI_read+0xc4>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <USER_SPI_read+0x32>
 800299e:	2303      	movs	r3, #3
 80029a0:	e044      	b.n	8002a2c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80029a2:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <USER_SPI_read+0xc8>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <USER_SPI_read+0x44>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	025b      	lsls	r3, r3, #9
 80029b2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d111      	bne.n	80029de <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	2011      	movs	r0, #17
 80029be:	f7ff fe72 	bl	80026a6 <send_cmd>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d129      	bne.n	8002a1c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80029c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029cc:	68b8      	ldr	r0, [r7, #8]
 80029ce:	f7ff fe0f 	bl	80025f0 <rcvr_datablock>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d021      	beq.n	8002a1c <USER_SPI_read+0xac>
			count = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	e01e      	b.n	8002a1c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	2012      	movs	r0, #18
 80029e2:	f7ff fe60 	bl	80026a6 <send_cmd>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d117      	bne.n	8002a1c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80029ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f0:	68b8      	ldr	r0, [r7, #8]
 80029f2:	f7ff fdfd 	bl	80025f0 <rcvr_datablock>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <USER_SPI_read+0xa2>
				buff += 512;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a02:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ed      	bne.n	80029ec <USER_SPI_read+0x7c>
 8002a10:	e000      	b.n	8002a14 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002a12:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002a14:	2100      	movs	r1, #0
 8002a16:	200c      	movs	r0, #12
 8002a18:	f7ff fe45 	bl	80026a6 <send_cmd>
		}
	}
	despiselect();
 8002a1c:	f7ff fdbc 	bl	8002598 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bf14      	ite	ne
 8002a26:	2301      	movne	r3, #1
 8002a28:	2300      	moveq	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000028 	.word	0x20000028
 8002a38:	20000077 	.word	0x20000077

08002a3c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4603      	mov	r3, r0
 8002a4a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <USER_SPI_write+0x1c>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <USER_SPI_write+0x20>
 8002a58:	2304      	movs	r3, #4
 8002a5a:	e063      	b.n	8002b24 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002a5c:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <USER_SPI_write+0xf0>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <USER_SPI_write+0x32>
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e05a      	b.n	8002b24 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002a6e:	4b2f      	ldr	r3, [pc, #188]	; (8002b2c <USER_SPI_write+0xf0>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <USER_SPI_write+0x44>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e051      	b.n	8002b24 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002a80:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <USER_SPI_write+0xf4>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <USER_SPI_write+0x56>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	025b      	lsls	r3, r3, #9
 8002a90:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d110      	bne.n	8002aba <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	2018      	movs	r0, #24
 8002a9c:	f7ff fe03 	bl	80026a6 <send_cmd>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d136      	bne.n	8002b14 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002aa6:	21fe      	movs	r1, #254	; 0xfe
 8002aa8:	68b8      	ldr	r0, [r7, #8]
 8002aaa:	f7ff fdca 	bl	8002642 <xmit_datablock>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d02f      	beq.n	8002b14 <USER_SPI_write+0xd8>
			count = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	e02c      	b.n	8002b14 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <USER_SPI_write+0xf4>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	f003 0306 	and.w	r3, r3, #6
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <USER_SPI_write+0x92>
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	2097      	movs	r0, #151	; 0x97
 8002aca:	f7ff fdec 	bl	80026a6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	2019      	movs	r0, #25
 8002ad2:	f7ff fde8 	bl	80026a6 <send_cmd>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d11b      	bne.n	8002b14 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002adc:	21fc      	movs	r1, #252	; 0xfc
 8002ade:	68b8      	ldr	r0, [r7, #8]
 8002ae0:	f7ff fdaf 	bl	8002642 <xmit_datablock>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <USER_SPI_write+0xc4>
				buff += 512;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002af0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ee      	bne.n	8002adc <USER_SPI_write+0xa0>
 8002afe:	e000      	b.n	8002b02 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b00:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002b02:	21fd      	movs	r1, #253	; 0xfd
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7ff fd9c 	bl	8002642 <xmit_datablock>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <USER_SPI_write+0xd8>
 8002b10:	2301      	movs	r3, #1
 8002b12:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002b14:	f7ff fd40 	bl	8002598 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf14      	ite	ne
 8002b1e:	2301      	movne	r3, #1
 8002b20:	2300      	moveq	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000028 	.word	0x20000028
 8002b30:	20000077 	.word	0x20000077

08002b34 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08c      	sub	sp, #48	; 0x30
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	603a      	str	r2, [r7, #0]
 8002b3e:	71fb      	strb	r3, [r7, #7]
 8002b40:	460b      	mov	r3, r1
 8002b42:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <USER_SPI_ioctl+0x1a>
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	e15a      	b.n	8002e04 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002b4e:	4baf      	ldr	r3, [pc, #700]	; (8002e0c <USER_SPI_ioctl+0x2d8>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <USER_SPI_ioctl+0x2c>
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e151      	b.n	8002e04 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002b66:	79bb      	ldrb	r3, [r7, #6]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	f200 8136 	bhi.w	8002dda <USER_SPI_ioctl+0x2a6>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <USER_SPI_ioctl+0x40>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b89 	.word	0x08002b89
 8002b78:	08002b9d 	.word	0x08002b9d
 8002b7c:	08002ddb 	.word	0x08002ddb
 8002b80:	08002c49 	.word	0x08002c49
 8002b84:	08002d3f 	.word	0x08002d3f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002b88:	f7ff fd16 	bl	80025b8 <spiselect>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8127 	beq.w	8002de2 <USER_SPI_ioctl+0x2ae>
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002b9a:	e122      	b.n	8002de2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	2009      	movs	r0, #9
 8002ba0:	f7ff fd81 	bl	80026a6 <send_cmd>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 811d 	bne.w	8002de6 <USER_SPI_ioctl+0x2b2>
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	2110      	movs	r1, #16
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fd1c 	bl	80025f0 <rcvr_datablock>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8113 	beq.w	8002de6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002bc0:	7b3b      	ldrb	r3, [r7, #12]
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d111      	bne.n	8002bee <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002bca:	7d7b      	ldrb	r3, [r7, #21]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	7d3b      	ldrb	r3, [r7, #20]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	4413      	add	r3, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002bde:	4413      	add	r3, r2
 8002be0:	3301      	adds	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	029a      	lsls	r2, r3, #10
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e028      	b.n	8002c40 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002bee:	7c7b      	ldrb	r3, [r7, #17]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	7dbb      	ldrb	r3, [r7, #22]
 8002bf8:	09db      	lsrs	r3, r3, #7
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	7d7b      	ldrb	r3, [r7, #21]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f003 0306 	and.w	r3, r3, #6
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3302      	adds	r3, #2
 8002c12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002c16:	7d3b      	ldrb	r3, [r7, #20]
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	441a      	add	r2, r3
 8002c24:	7cbb      	ldrb	r3, [r7, #18]
 8002c26:	029b      	lsls	r3, r3, #10
 8002c28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3301      	adds	r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002c32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c36:	3b09      	subs	r3, #9
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002c46:	e0ce      	b.n	8002de6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002c48:	4b71      	ldr	r3, [pc, #452]	; (8002e10 <USER_SPI_ioctl+0x2dc>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d031      	beq.n	8002cb8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002c54:	2100      	movs	r1, #0
 8002c56:	208d      	movs	r0, #141	; 0x8d
 8002c58:	f7ff fd25 	bl	80026a6 <send_cmd>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 80c3 	bne.w	8002dea <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002c64:	20ff      	movs	r0, #255	; 0xff
 8002c66:	f7ff fc29 	bl	80024bc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002c6a:	f107 030c 	add.w	r3, r7, #12
 8002c6e:	2110      	movs	r1, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fcbd 	bl	80025f0 <rcvr_datablock>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80b6 	beq.w	8002dea <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002c7e:	2330      	movs	r3, #48	; 0x30
 8002c80:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002c84:	e007      	b.n	8002c96 <USER_SPI_ioctl+0x162>
 8002c86:	20ff      	movs	r0, #255	; 0xff
 8002c88:	f7ff fc18 	bl	80024bc <xchg_spi>
 8002c8c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c90:	3b01      	subs	r3, #1
 8002c92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002c96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f3      	bne.n	8002c86 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002c9e:	7dbb      	ldrb	r3, [r7, #22]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	fa03 f202 	lsl.w	r2, r3, r2
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002cb6:	e098      	b.n	8002dea <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2009      	movs	r0, #9
 8002cbc:	f7ff fcf3 	bl	80026a6 <send_cmd>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 8091 	bne.w	8002dea <USER_SPI_ioctl+0x2b6>
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	2110      	movs	r1, #16
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fc8e 	bl	80025f0 <rcvr_datablock>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8087 	beq.w	8002dea <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002cdc:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <USER_SPI_ioctl+0x2dc>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002ce8:	7dbb      	ldrb	r3, [r7, #22]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002cf0:	7dfa      	ldrb	r2, [r7, #23]
 8002cf2:	09d2      	lsrs	r2, r2, #7
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	7e7b      	ldrb	r3, [r7, #25]
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e013      	b.n	8002d36 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002d0e:	7dbb      	ldrb	r3, [r7, #22]
 8002d10:	109b      	asrs	r3, r3, #2
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	3301      	adds	r3, #1
 8002d1a:	7dfa      	ldrb	r2, [r7, #23]
 8002d1c:	00d2      	lsls	r2, r2, #3
 8002d1e:	f002 0218 	and.w	r2, r2, #24
 8002d22:	7df9      	ldrb	r1, [r7, #23]
 8002d24:	0949      	lsrs	r1, r1, #5
 8002d26:	b2c9      	uxtb	r1, r1
 8002d28:	440a      	add	r2, r1
 8002d2a:	3201      	adds	r2, #1
 8002d2c:	fb02 f303 	mul.w	r3, r2, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002d3c:	e055      	b.n	8002dea <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002d3e:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <USER_SPI_ioctl+0x2dc>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	f003 0306 	and.w	r3, r3, #6
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d051      	beq.n	8002dee <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002d4a:	f107 020c 	add.w	r2, r7, #12
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	210b      	movs	r1, #11
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff feee 	bl	8002b34 <USER_SPI_ioctl>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d149      	bne.n	8002df2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002d5e:	7b3b      	ldrb	r3, [r7, #12]
 8002d60:	099b      	lsrs	r3, r3, #6
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d104      	bne.n	8002d72 <USER_SPI_ioctl+0x23e>
 8002d68:	7dbb      	ldrb	r3, [r7, #22]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d041      	beq.n	8002df6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	623b      	str	r3, [r7, #32]
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002d82:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <USER_SPI_ioctl+0x2dc>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	025b      	lsls	r3, r3, #9
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	025b      	lsls	r3, r3, #9
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002d9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d9c:	2020      	movs	r0, #32
 8002d9e:	f7ff fc82 	bl	80026a6 <send_cmd>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d128      	bne.n	8002dfa <USER_SPI_ioctl+0x2c6>
 8002da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002daa:	2021      	movs	r0, #33	; 0x21
 8002dac:	f7ff fc7b 	bl	80026a6 <send_cmd>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d121      	bne.n	8002dfa <USER_SPI_ioctl+0x2c6>
 8002db6:	2100      	movs	r1, #0
 8002db8:	2026      	movs	r0, #38	; 0x26
 8002dba:	f7ff fc74 	bl	80026a6 <send_cmd>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d11a      	bne.n	8002dfa <USER_SPI_ioctl+0x2c6>
 8002dc4:	f247 5030 	movw	r0, #30000	; 0x7530
 8002dc8:	f7ff fbc3 	bl	8002552 <wait_ready>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d013      	beq.n	8002dfa <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002dd8:	e00f      	b.n	8002dfa <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002dda:	2304      	movs	r3, #4
 8002ddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002de0:	e00c      	b.n	8002dfc <USER_SPI_ioctl+0x2c8>
		break;
 8002de2:	bf00      	nop
 8002de4:	e00a      	b.n	8002dfc <USER_SPI_ioctl+0x2c8>
		break;
 8002de6:	bf00      	nop
 8002de8:	e008      	b.n	8002dfc <USER_SPI_ioctl+0x2c8>
		break;
 8002dea:	bf00      	nop
 8002dec:	e006      	b.n	8002dfc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002dee:	bf00      	nop
 8002df0:	e004      	b.n	8002dfc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002df2:	bf00      	nop
 8002df4:	e002      	b.n	8002dfc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <USER_SPI_ioctl+0x2c8>
		break;
 8002dfa:	bf00      	nop
	}

	despiselect();
 8002dfc:	f7ff fbcc 	bl	8002598 <despiselect>

	return res;
 8002e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3730      	adds	r7, #48	; 0x30
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000028 	.word	0x20000028
 8002e10:	20000077 	.word	0x20000077

08002e14 <Reset_Handler>:
 8002e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e4c <LoopFillZerobss+0x14>
 8002e18:	2100      	movs	r1, #0
 8002e1a:	e003      	b.n	8002e24 <LoopCopyDataInit>

08002e1c <CopyDataInit>:
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <LoopFillZerobss+0x18>)
 8002e1e:	585b      	ldr	r3, [r3, r1]
 8002e20:	5043      	str	r3, [r0, r1]
 8002e22:	3104      	adds	r1, #4

08002e24 <LoopCopyDataInit>:
 8002e24:	480b      	ldr	r0, [pc, #44]	; (8002e54 <LoopFillZerobss+0x1c>)
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <LoopFillZerobss+0x20>)
 8002e28:	1842      	adds	r2, r0, r1
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d3f6      	bcc.n	8002e1c <CopyDataInit>
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <LoopFillZerobss+0x24>)
 8002e30:	e002      	b.n	8002e38 <LoopFillZerobss>

08002e32 <FillZerobss>:
 8002e32:	2300      	movs	r3, #0
 8002e34:	f842 3b04 	str.w	r3, [r2], #4

08002e38 <LoopFillZerobss>:
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <LoopFillZerobss+0x28>)
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d3f9      	bcc.n	8002e32 <FillZerobss>
 8002e3e:	f7ff fafd 	bl	800243c <SystemInit>
 8002e42:	f006 f949 	bl	80090d8 <__libc_init_array>
 8002e46:	f7fe f8af 	bl	8000fa8 <main>
 8002e4a:	4770      	bx	lr
 8002e4c:	20020000 	.word	0x20020000
 8002e50:	08009510 	.word	0x08009510
 8002e54:	20000000 	.word	0x20000000
 8002e58:	20000048 	.word	0x20000048
 8002e5c:	20000048 	.word	0x20000048
 8002e60:	20000ef8 	.word	0x20000ef8

08002e64 <ADC_IRQHandler>:
 8002e64:	e7fe      	b.n	8002e64 <ADC_IRQHandler>
	...

08002e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_Init+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <HAL_Init+0x40>)
 8002e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_Init+0x40>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HAL_Init+0x40>)
 8002e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_Init+0x40>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <HAL_Init+0x40>)
 8002e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e90:	2003      	movs	r0, #3
 8002e92:	f000 f94d 	bl	8003130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f000 f808 	bl	8002eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e9c:	f7fe feae 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00

08002eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_InitTick+0x54>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_InitTick+0x58>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f965 	bl	800319a <HAL_SYSTICK_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e00e      	b.n	8002ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b0f      	cmp	r3, #15
 8002ede:	d80a      	bhi.n	8002ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ee8:	f000 f92d 	bl	8003146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eec:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <HAL_InitTick+0x5c>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e000      	b.n	8002ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000024 	.word	0x20000024
 8002f04:	20000030 	.word	0x20000030
 8002f08:	2000002c 	.word	0x2000002c

08002f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_IncTick+0x20>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_IncTick+0x24>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <HAL_IncTick+0x24>)
 8002f1e:	6013      	str	r3, [r2, #0]
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000030 	.word	0x20000030
 8002f30:	20000a8c 	.word	0x20000a8c

08002f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return uwTick;
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_GetTick+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000a8c 	.word	0x20000a8c

08002f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff ffee 	bl	8002f34 <HAL_GetTick>
 8002f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f64:	d005      	beq.n	8002f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_Delay+0x40>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f72:	bf00      	nop
 8002f74:	f7ff ffde 	bl	8002f34 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d8f7      	bhi.n	8002f74 <HAL_Delay+0x28>
  {
  }
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000030 	.word	0x20000030

08002f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fac:	4013      	ands	r3, r2
 8002fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fc2:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	60d3      	str	r3, [r2, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	f003 0307 	and.w	r3, r3, #7
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	2b00      	cmp	r3, #0
 8003004:	db0b      	blt.n	800301e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	4907      	ldr	r1, [pc, #28]	; (800302c <__NVIC_EnableIRQ+0x38>)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2001      	movs	r0, #1
 8003016:	fa00 f202 	lsl.w	r2, r0, r2
 800301a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000e100 	.word	0xe000e100

08003030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	6039      	str	r1, [r7, #0]
 800303a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003040:	2b00      	cmp	r3, #0
 8003042:	db0a      	blt.n	800305a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	490c      	ldr	r1, [pc, #48]	; (800307c <__NVIC_SetPriority+0x4c>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	0112      	lsls	r2, r2, #4
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	440b      	add	r3, r1
 8003054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003058:	e00a      	b.n	8003070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4908      	ldr	r1, [pc, #32]	; (8003080 <__NVIC_SetPriority+0x50>)
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	3b04      	subs	r3, #4
 8003068:	0112      	lsls	r2, r2, #4
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	440b      	add	r3, r1
 800306e:	761a      	strb	r2, [r3, #24]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000e100 	.word	0xe000e100
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	; 0x24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f1c3 0307 	rsb	r3, r3, #7
 800309e:	2b04      	cmp	r3, #4
 80030a0:	bf28      	it	cs
 80030a2:	2304      	movcs	r3, #4
 80030a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d902      	bls.n	80030b4 <NVIC_EncodePriority+0x30>
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3b03      	subs	r3, #3
 80030b2:	e000      	b.n	80030b6 <NVIC_EncodePriority+0x32>
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	401a      	ands	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	43d9      	mvns	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	4313      	orrs	r3, r2
         );
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	; 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030fc:	d301      	bcc.n	8003102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fe:	2301      	movs	r3, #1
 8003100:	e00f      	b.n	8003122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003102:	4a0a      	ldr	r2, [pc, #40]	; (800312c <SysTick_Config+0x40>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800310a:	210f      	movs	r1, #15
 800310c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003110:	f7ff ff8e 	bl	8003030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <SysTick_Config+0x40>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800311a:	4b04      	ldr	r3, [pc, #16]	; (800312c <SysTick_Config+0x40>)
 800311c:	2207      	movs	r2, #7
 800311e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	e000e010 	.word	0xe000e010

08003130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ff29 	bl	8002f90 <__NVIC_SetPriorityGrouping>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003146:	b580      	push	{r7, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	4603      	mov	r3, r0
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003158:	f7ff ff3e 	bl	8002fd8 <__NVIC_GetPriorityGrouping>
 800315c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	6978      	ldr	r0, [r7, #20]
 8003164:	f7ff ff8e 	bl	8003084 <NVIC_EncodePriority>
 8003168:	4602      	mov	r2, r0
 800316a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff5d 	bl	8003030 <__NVIC_SetPriority>
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	4603      	mov	r3, r0
 8003186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff ff31 	bl	8002ff4 <__NVIC_EnableIRQ>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff ffa2 	bl	80030ec <SysTick_Config>
 80031a8:	4603      	mov	r3, r0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031c0:	f7ff feb8 	bl	8002f34 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e099      	b.n	8003304 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f0:	e00f      	b.n	8003212 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031f2:	f7ff fe9f 	bl	8002f34 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d908      	bls.n	8003212 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2203      	movs	r2, #3
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e078      	b.n	8003304 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e8      	bne.n	80031f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_DMA_Init+0x158>)
 800322c:	4013      	ands	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800323e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	2b04      	cmp	r3, #4
 800326a:	d107      	bne.n	800327c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4313      	orrs	r3, r2
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f023 0307 	bic.w	r3, r3, #7
 8003292:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d117      	bne.n	80032d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fb0d 	bl	80038d8 <DMA_CheckFifoParam>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2240      	movs	r2, #64	; 0x40
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032d2:	2301      	movs	r3, #1
 80032d4:	e016      	b.n	8003304 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fac4 	bl	800386c <DMA_CalcBaseAndBitshift>
 80032e4:	4603      	mov	r3, r0
 80032e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	223f      	movs	r2, #63	; 0x3f
 80032ee:	409a      	lsls	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	f010803f 	.word	0xf010803f

08003310 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_DMA_Start_IT+0x26>
 8003332:	2302      	movs	r3, #2
 8003334:	e040      	b.n	80033b8 <HAL_DMA_Start_IT+0xa8>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d12f      	bne.n	80033aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fa56 	bl	8003810 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	223f      	movs	r2, #63	; 0x3f
 800336a:	409a      	lsls	r2, r3
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0216 	orr.w	r2, r2, #22
 800337e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d007      	beq.n	8003398 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0208 	orr.w	r2, r2, #8
 8003396:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e005      	b.n	80033b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
 80033b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033ce:	f7ff fdb1 	bl	8002f34 <HAL_GetTick>
 80033d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d008      	beq.n	80033f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e052      	b.n	8003498 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0216 	bic.w	r2, r2, #22
 8003400:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695a      	ldr	r2, [r3, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003410:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <HAL_DMA_Abort+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0208 	bic.w	r2, r2, #8
 8003430:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003442:	e013      	b.n	800346c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003444:	f7ff fd76 	bl	8002f34 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b05      	cmp	r3, #5
 8003450:	d90c      	bls.n	800346c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2203      	movs	r2, #3
 8003464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e015      	b.n	8003498 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e4      	bne.n	8003444 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	223f      	movs	r2, #63	; 0x3f
 8003480:	409a      	lsls	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d004      	beq.n	80034be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00c      	b.n	80034d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2205      	movs	r2, #5
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034f0:	4b92      	ldr	r3, [pc, #584]	; (800373c <HAL_DMA_IRQHandler+0x258>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a92      	ldr	r2, [pc, #584]	; (8003740 <HAL_DMA_IRQHandler+0x25c>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	0a9b      	lsrs	r3, r3, #10
 80034fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	2208      	movs	r2, #8
 8003510:	409a      	lsls	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01a      	beq.n	8003550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0204 	bic.w	r2, r2, #4
 8003536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353c:	2208      	movs	r2, #8
 800353e:	409a      	lsls	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003548:	f043 0201 	orr.w	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003554:	2201      	movs	r2, #1
 8003556:	409a      	lsls	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d012      	beq.n	8003586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	2201      	movs	r2, #1
 8003574:	409a      	lsls	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	f043 0202 	orr.w	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	2204      	movs	r2, #4
 800358c:	409a      	lsls	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d012      	beq.n	80035bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00b      	beq.n	80035bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	2204      	movs	r2, #4
 80035aa:	409a      	lsls	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	2210      	movs	r2, #16
 80035c2:	409a      	lsls	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d043      	beq.n	8003654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d03c      	beq.n	8003654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	2210      	movs	r2, #16
 80035e0:	409a      	lsls	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d108      	bne.n	8003614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d024      	beq.n	8003654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
 8003612:	e01f      	b.n	8003654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01b      	beq.n	8003654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
 8003624:	e016      	b.n	8003654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d107      	bne.n	8003644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0208 	bic.w	r2, r2, #8
 8003642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	2220      	movs	r2, #32
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 808e 	beq.w	8003782 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8086 	beq.w	8003782 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	2220      	movs	r2, #32
 800367c:	409a      	lsls	r2, r3
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b05      	cmp	r3, #5
 800368c:	d136      	bne.n	80036fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0216 	bic.w	r2, r2, #22
 800369c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d103      	bne.n	80036be <HAL_DMA_IRQHandler+0x1da>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0208 	bic.w	r2, r2, #8
 80036cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	223f      	movs	r2, #63	; 0x3f
 80036d4:	409a      	lsls	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d07d      	beq.n	80037ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
        }
        return;
 80036fa:	e078      	b.n	80037ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d01c      	beq.n	8003744 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d108      	bne.n	800372a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	2b00      	cmp	r3, #0
 800371e:	d030      	beq.n	8003782 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
 8003728:	e02b      	b.n	8003782 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	2b00      	cmp	r3, #0
 8003730:	d027      	beq.n	8003782 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
 800373a:	e022      	b.n	8003782 <HAL_DMA_IRQHandler+0x29e>
 800373c:	20000024 	.word	0x20000024
 8003740:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0210 	bic.w	r2, r2, #16
 8003760:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	2b00      	cmp	r3, #0
 8003788:	d032      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d022      	beq.n	80037dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2205      	movs	r2, #5
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	3301      	adds	r3, #1
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d307      	bcc.n	80037ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f2      	bne.n	80037ae <HAL_DMA_IRQHandler+0x2ca>
 80037c8:	e000      	b.n	80037cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80037ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
 80037ec:	e000      	b.n	80037f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80037ee:	bf00      	nop
    }
  }
}
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop

080037f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800382c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d108      	bne.n	8003850 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800384e:	e007      	b.n	8003860 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	60da      	str	r2, [r3, #12]
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3b10      	subs	r3, #16
 800387c:	4a14      	ldr	r2, [pc, #80]	; (80038d0 <DMA_CalcBaseAndBitshift+0x64>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003886:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d909      	bls.n	80038ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038a2:	f023 0303 	bic.w	r3, r3, #3
 80038a6:	1d1a      	adds	r2, r3, #4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	659a      	str	r2, [r3, #88]	; 0x58
 80038ac:	e007      	b.n	80038be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	aaaaaaab 	.word	0xaaaaaaab
 80038d4:	08009478 	.word	0x08009478

080038d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11f      	bne.n	8003932 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d855      	bhi.n	80039a4 <DMA_CheckFifoParam+0xcc>
 80038f8:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <DMA_CheckFifoParam+0x28>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003911 	.word	0x08003911
 8003904:	08003923 	.word	0x08003923
 8003908:	08003911 	.word	0x08003911
 800390c:	080039a5 	.word	0x080039a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d045      	beq.n	80039a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003920:	e042      	b.n	80039a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800392a:	d13f      	bne.n	80039ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003930:	e03c      	b.n	80039ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393a:	d121      	bne.n	8003980 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b03      	cmp	r3, #3
 8003940:	d836      	bhi.n	80039b0 <DMA_CheckFifoParam+0xd8>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <DMA_CheckFifoParam+0x70>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	08003959 	.word	0x08003959
 800394c:	0800395f 	.word	0x0800395f
 8003950:	08003959 	.word	0x08003959
 8003954:	08003971 	.word	0x08003971
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
      break;
 800395c:	e02f      	b.n	80039be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d024      	beq.n	80039b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800396e:	e021      	b.n	80039b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003978:	d11e      	bne.n	80039b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800397e:	e01b      	b.n	80039b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d902      	bls.n	800398c <DMA_CheckFifoParam+0xb4>
 8003986:	2b03      	cmp	r3, #3
 8003988:	d003      	beq.n	8003992 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800398a:	e018      	b.n	80039be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      break;
 8003990:	e015      	b.n	80039be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00e      	beq.n	80039bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      break;
 80039a2:	e00b      	b.n	80039bc <DMA_CheckFifoParam+0xe4>
      break;
 80039a4:	bf00      	nop
 80039a6:	e00a      	b.n	80039be <DMA_CheckFifoParam+0xe6>
      break;
 80039a8:	bf00      	nop
 80039aa:	e008      	b.n	80039be <DMA_CheckFifoParam+0xe6>
      break;
 80039ac:	bf00      	nop
 80039ae:	e006      	b.n	80039be <DMA_CheckFifoParam+0xe6>
      break;
 80039b0:	bf00      	nop
 80039b2:	e004      	b.n	80039be <DMA_CheckFifoParam+0xe6>
      break;
 80039b4:	bf00      	nop
 80039b6:	e002      	b.n	80039be <DMA_CheckFifoParam+0xe6>
      break;   
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <DMA_CheckFifoParam+0xe6>
      break;
 80039bc:	bf00      	nop
    }
  } 
  
  return status; 
 80039be:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b089      	sub	sp, #36	; 0x24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	e165      	b.n	8003cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e8:	2201      	movs	r2, #1
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f040 8154 	bne.w	8003cae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d00b      	beq.n	8003a26 <HAL_GPIO_Init+0x5a>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d007      	beq.n	8003a26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a1a:	2b11      	cmp	r3, #17
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b12      	cmp	r3, #18
 8003a24:	d130      	bne.n	8003a88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	2203      	movs	r2, #3
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 0201 	and.w	r2, r3, #1
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	2203      	movs	r2, #3
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0xfc>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b12      	cmp	r3, #18
 8003ac6:	d123      	bne.n	8003b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	08da      	lsrs	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3208      	adds	r2, #8
 8003ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	220f      	movs	r2, #15
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	08da      	lsrs	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3208      	adds	r2, #8
 8003b0a:	69b9      	ldr	r1, [r7, #24]
 8003b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0203 	and.w	r2, r3, #3
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80ae 	beq.w	8003cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	4b5c      	ldr	r3, [pc, #368]	; (8003cc8 <HAL_GPIO_Init+0x2fc>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	4a5b      	ldr	r2, [pc, #364]	; (8003cc8 <HAL_GPIO_Init+0x2fc>)
 8003b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b60:	6453      	str	r3, [r2, #68]	; 0x44
 8003b62:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_GPIO_Init+0x2fc>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b6e:	4a57      	ldr	r2, [pc, #348]	; (8003ccc <HAL_GPIO_Init+0x300>)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	3302      	adds	r3, #2
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	220f      	movs	r2, #15
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4e      	ldr	r2, [pc, #312]	; (8003cd0 <HAL_GPIO_Init+0x304>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d025      	beq.n	8003be6 <HAL_GPIO_Init+0x21a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4d      	ldr	r2, [pc, #308]	; (8003cd4 <HAL_GPIO_Init+0x308>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01f      	beq.n	8003be2 <HAL_GPIO_Init+0x216>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a4c      	ldr	r2, [pc, #304]	; (8003cd8 <HAL_GPIO_Init+0x30c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d019      	beq.n	8003bde <HAL_GPIO_Init+0x212>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a4b      	ldr	r2, [pc, #300]	; (8003cdc <HAL_GPIO_Init+0x310>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_GPIO_Init+0x20e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4a      	ldr	r2, [pc, #296]	; (8003ce0 <HAL_GPIO_Init+0x314>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_GPIO_Init+0x20a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a49      	ldr	r2, [pc, #292]	; (8003ce4 <HAL_GPIO_Init+0x318>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <HAL_GPIO_Init+0x206>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a48      	ldr	r2, [pc, #288]	; (8003ce8 <HAL_GPIO_Init+0x31c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_GPIO_Init+0x202>
 8003bca:	2306      	movs	r3, #6
 8003bcc:	e00c      	b.n	8003be8 <HAL_GPIO_Init+0x21c>
 8003bce:	2307      	movs	r3, #7
 8003bd0:	e00a      	b.n	8003be8 <HAL_GPIO_Init+0x21c>
 8003bd2:	2305      	movs	r3, #5
 8003bd4:	e008      	b.n	8003be8 <HAL_GPIO_Init+0x21c>
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	e006      	b.n	8003be8 <HAL_GPIO_Init+0x21c>
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e004      	b.n	8003be8 <HAL_GPIO_Init+0x21c>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e002      	b.n	8003be8 <HAL_GPIO_Init+0x21c>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_GPIO_Init+0x21c>
 8003be6:	2300      	movs	r3, #0
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	f002 0203 	and.w	r2, r2, #3
 8003bee:	0092      	lsls	r2, r2, #2
 8003bf0:	4093      	lsls	r3, r2
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bf8:	4934      	ldr	r1, [pc, #208]	; (8003ccc <HAL_GPIO_Init+0x300>)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	089b      	lsrs	r3, r3, #2
 8003bfe:	3302      	adds	r3, #2
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c06:	4b39      	ldr	r3, [pc, #228]	; (8003cec <HAL_GPIO_Init+0x320>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4013      	ands	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c2a:	4a30      	ldr	r2, [pc, #192]	; (8003cec <HAL_GPIO_Init+0x320>)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c30:	4b2e      	ldr	r3, [pc, #184]	; (8003cec <HAL_GPIO_Init+0x320>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c54:	4a25      	ldr	r2, [pc, #148]	; (8003cec <HAL_GPIO_Init+0x320>)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c5a:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_GPIO_Init+0x320>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c7e:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <HAL_GPIO_Init+0x320>)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c84:	4b19      	ldr	r3, [pc, #100]	; (8003cec <HAL_GPIO_Init+0x320>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ca8:	4a10      	ldr	r2, [pc, #64]	; (8003cec <HAL_GPIO_Init+0x320>)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b0f      	cmp	r3, #15
 8003cb8:	f67f ae96 	bls.w	80039e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	3724      	adds	r7, #36	; 0x24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40013800 	.word	0x40013800
 8003cd0:	40020000 	.word	0x40020000
 8003cd4:	40020400 	.word	0x40020400
 8003cd8:	40020800 	.word	0x40020800
 8003cdc:	40020c00 	.word	0x40020c00
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40021400 	.word	0x40021400
 8003ce8:	40021800 	.word	0x40021800
 8003cec:	40013c00 	.word	0x40013c00

08003cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e001      	b.n	8003d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	807b      	strh	r3, [r7, #2]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d30:	787b      	ldrb	r3, [r7, #1]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d3c:	e003      	b.n	8003d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d3e:	887b      	ldrh	r3, [r7, #2]
 8003d40:	041a      	lsls	r2, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	619a      	str	r2, [r3, #24]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_PWREx_EnableOverDrive+0x94>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d80:	f7ff f8d8 	bl	8002f34 <HAL_GetTick>
 8003d84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d86:	e009      	b.n	8003d9c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d88:	f7ff f8d4 	bl	8002f34 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d96:	d901      	bls.n	8003d9c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e01f      	b.n	8003ddc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_PWREx_EnableOverDrive+0x98>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da8:	d1ee      	bne.n	8003d88 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003db0:	f7ff f8c0 	bl	8002f34 <HAL_GetTick>
 8003db4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003db6:	e009      	b.n	8003dcc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003db8:	f7ff f8bc 	bl	8002f34 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dc6:	d901      	bls.n	8003dcc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e007      	b.n	8003ddc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dcc:	4b07      	ldr	r3, [pc, #28]	; (8003dec <HAL_PWREx_EnableOverDrive+0x98>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dd8:	d1ee      	bne.n	8003db8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	420e0040 	.word	0x420e0040
 8003dec:	40007000 	.word	0x40007000
 8003df0:	420e0044 	.word	0x420e0044

08003df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0cc      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b68      	ldr	r3, [pc, #416]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d90c      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b65      	ldr	r3, [pc, #404]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b63      	ldr	r3, [pc, #396]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0b8      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d020      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e48:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a58      	ldr	r2, [pc, #352]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e60:	4b53      	ldr	r3, [pc, #332]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a52      	ldr	r2, [pc, #328]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	494d      	ldr	r1, [pc, #308]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d044      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d119      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e07f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb2:	4b3f      	ldr	r3, [pc, #252]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e06f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e067      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed2:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4934      	ldr	r1, [pc, #208]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee4:	f7ff f826 	bl	8002f34 <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7ff f822 	bl	8002f34 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e04f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b2b      	ldr	r3, [pc, #172]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 020c 	and.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1eb      	bne.n	8003eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d20c      	bcs.n	8003f3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b22      	ldr	r3, [pc, #136]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e032      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4916      	ldr	r1, [pc, #88]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	490e      	ldr	r1, [pc, #56]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f7a:	f000 f855 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003f7e:	4601      	mov	r1, r0
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	5cd3      	ldrb	r3, [r2, r3]
 8003f8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f92:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fe ff86 	bl	8002eac <HAL_InitTick>

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40023c00 	.word	0x40023c00
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	08009460 	.word	0x08009460
 8003fb8:	20000024 	.word	0x20000024
 8003fbc:	2000002c 	.word	0x2000002c

08003fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	; (8003fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000024 	.word	0x20000024

08003fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fdc:	f7ff fff0 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8003fe0:	4601      	mov	r1, r0
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	0a9b      	lsrs	r3, r3, #10
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	4a03      	ldr	r2, [pc, #12]	; (8003ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fee:	5cd3      	ldrb	r3, [r2, r3]
 8003ff0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	08009470 	.word	0x08009470

08004000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004004:	f7ff ffdc 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8004008:	4601      	mov	r1, r0
 800400a:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0b5b      	lsrs	r3, r3, #13
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4a03      	ldr	r2, [pc, #12]	; (8004024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004016:	5cd3      	ldrb	r3, [r2, r3]
 8004018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40023800 	.word	0x40023800
 8004024:	08009470 	.word	0x08009470

08004028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004042:	4bc6      	ldr	r3, [pc, #792]	; (800435c <HAL_RCC_GetSysClockFreq+0x334>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b0c      	cmp	r3, #12
 800404c:	f200 817e 	bhi.w	800434c <HAL_RCC_GetSysClockFreq+0x324>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <HAL_RCC_GetSysClockFreq+0x30>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	0800408d 	.word	0x0800408d
 800405c:	0800434d 	.word	0x0800434d
 8004060:	0800434d 	.word	0x0800434d
 8004064:	0800434d 	.word	0x0800434d
 8004068:	08004093 	.word	0x08004093
 800406c:	0800434d 	.word	0x0800434d
 8004070:	0800434d 	.word	0x0800434d
 8004074:	0800434d 	.word	0x0800434d
 8004078:	08004099 	.word	0x08004099
 800407c:	0800434d 	.word	0x0800434d
 8004080:	0800434d 	.word	0x0800434d
 8004084:	0800434d 	.word	0x0800434d
 8004088:	080041f5 	.word	0x080041f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800408c:	4bb4      	ldr	r3, [pc, #720]	; (8004360 <HAL_RCC_GetSysClockFreq+0x338>)
 800408e:	613b      	str	r3, [r7, #16]
       break;
 8004090:	e15f      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004092:	4bb4      	ldr	r3, [pc, #720]	; (8004364 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004094:	613b      	str	r3, [r7, #16]
      break;
 8004096:	e15c      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004098:	4bb0      	ldr	r3, [pc, #704]	; (800435c <HAL_RCC_GetSysClockFreq+0x334>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a2:	4bae      	ldr	r3, [pc, #696]	; (800435c <HAL_RCC_GetSysClockFreq+0x334>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d04a      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ae:	4bab      	ldr	r3, [pc, #684]	; (800435c <HAL_RCC_GetSysClockFreq+0x334>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	f04f 0400 	mov.w	r4, #0
 80040b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	ea03 0501 	and.w	r5, r3, r1
 80040c4:	ea04 0602 	and.w	r6, r4, r2
 80040c8:	4629      	mov	r1, r5
 80040ca:	4632      	mov	r2, r6
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	f04f 0400 	mov.w	r4, #0
 80040d4:	0154      	lsls	r4, r2, #5
 80040d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040da:	014b      	lsls	r3, r1, #5
 80040dc:	4619      	mov	r1, r3
 80040de:	4622      	mov	r2, r4
 80040e0:	1b49      	subs	r1, r1, r5
 80040e2:	eb62 0206 	sbc.w	r2, r2, r6
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	f04f 0400 	mov.w	r4, #0
 80040ee:	0194      	lsls	r4, r2, #6
 80040f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040f4:	018b      	lsls	r3, r1, #6
 80040f6:	1a5b      	subs	r3, r3, r1
 80040f8:	eb64 0402 	sbc.w	r4, r4, r2
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	00e2      	lsls	r2, r4, #3
 8004106:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800410a:	00d9      	lsls	r1, r3, #3
 800410c:	460b      	mov	r3, r1
 800410e:	4614      	mov	r4, r2
 8004110:	195b      	adds	r3, r3, r5
 8004112:	eb44 0406 	adc.w	r4, r4, r6
 8004116:	f04f 0100 	mov.w	r1, #0
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	0262      	lsls	r2, r4, #9
 8004120:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004124:	0259      	lsls	r1, r3, #9
 8004126:	460b      	mov	r3, r1
 8004128:	4614      	mov	r4, r2
 800412a:	4618      	mov	r0, r3
 800412c:	4621      	mov	r1, r4
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f04f 0400 	mov.w	r4, #0
 8004134:	461a      	mov	r2, r3
 8004136:	4623      	mov	r3, r4
 8004138:	f7fc f864 	bl	8000204 <__aeabi_uldivmod>
 800413c:	4603      	mov	r3, r0
 800413e:	460c      	mov	r4, r1
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e049      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004144:	4b85      	ldr	r3, [pc, #532]	; (800435c <HAL_RCC_GetSysClockFreq+0x334>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	099b      	lsrs	r3, r3, #6
 800414a:	f04f 0400 	mov.w	r4, #0
 800414e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	ea03 0501 	and.w	r5, r3, r1
 800415a:	ea04 0602 	and.w	r6, r4, r2
 800415e:	4629      	mov	r1, r5
 8004160:	4632      	mov	r2, r6
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	f04f 0400 	mov.w	r4, #0
 800416a:	0154      	lsls	r4, r2, #5
 800416c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004170:	014b      	lsls	r3, r1, #5
 8004172:	4619      	mov	r1, r3
 8004174:	4622      	mov	r2, r4
 8004176:	1b49      	subs	r1, r1, r5
 8004178:	eb62 0206 	sbc.w	r2, r2, r6
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	f04f 0400 	mov.w	r4, #0
 8004184:	0194      	lsls	r4, r2, #6
 8004186:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800418a:	018b      	lsls	r3, r1, #6
 800418c:	1a5b      	subs	r3, r3, r1
 800418e:	eb64 0402 	sbc.w	r4, r4, r2
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	00e2      	lsls	r2, r4, #3
 800419c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041a0:	00d9      	lsls	r1, r3, #3
 80041a2:	460b      	mov	r3, r1
 80041a4:	4614      	mov	r4, r2
 80041a6:	195b      	adds	r3, r3, r5
 80041a8:	eb44 0406 	adc.w	r4, r4, r6
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	02a2      	lsls	r2, r4, #10
 80041b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041ba:	0299      	lsls	r1, r3, #10
 80041bc:	460b      	mov	r3, r1
 80041be:	4614      	mov	r4, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	4621      	mov	r1, r4
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f04f 0400 	mov.w	r4, #0
 80041ca:	461a      	mov	r2, r3
 80041cc:	4623      	mov	r3, r4
 80041ce:	f7fc f819 	bl	8000204 <__aeabi_uldivmod>
 80041d2:	4603      	mov	r3, r0
 80041d4:	460c      	mov	r4, r1
 80041d6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041d8:	4b60      	ldr	r3, [pc, #384]	; (800435c <HAL_RCC_GetSysClockFreq+0x334>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	3301      	adds	r3, #1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	613b      	str	r3, [r7, #16]
      break;
 80041f2:	e0ae      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f4:	4b59      	ldr	r3, [pc, #356]	; (800435c <HAL_RCC_GetSysClockFreq+0x334>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041fc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041fe:	4b57      	ldr	r3, [pc, #348]	; (800435c <HAL_RCC_GetSysClockFreq+0x334>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d04a      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420a:	4b54      	ldr	r3, [pc, #336]	; (800435c <HAL_RCC_GetSysClockFreq+0x334>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	099b      	lsrs	r3, r3, #6
 8004210:	f04f 0400 	mov.w	r4, #0
 8004214:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	ea03 0501 	and.w	r5, r3, r1
 8004220:	ea04 0602 	and.w	r6, r4, r2
 8004224:	4629      	mov	r1, r5
 8004226:	4632      	mov	r2, r6
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	f04f 0400 	mov.w	r4, #0
 8004230:	0154      	lsls	r4, r2, #5
 8004232:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004236:	014b      	lsls	r3, r1, #5
 8004238:	4619      	mov	r1, r3
 800423a:	4622      	mov	r2, r4
 800423c:	1b49      	subs	r1, r1, r5
 800423e:	eb62 0206 	sbc.w	r2, r2, r6
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	f04f 0400 	mov.w	r4, #0
 800424a:	0194      	lsls	r4, r2, #6
 800424c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004250:	018b      	lsls	r3, r1, #6
 8004252:	1a5b      	subs	r3, r3, r1
 8004254:	eb64 0402 	sbc.w	r4, r4, r2
 8004258:	f04f 0100 	mov.w	r1, #0
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	00e2      	lsls	r2, r4, #3
 8004262:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004266:	00d9      	lsls	r1, r3, #3
 8004268:	460b      	mov	r3, r1
 800426a:	4614      	mov	r4, r2
 800426c:	195b      	adds	r3, r3, r5
 800426e:	eb44 0406 	adc.w	r4, r4, r6
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	0262      	lsls	r2, r4, #9
 800427c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004280:	0259      	lsls	r1, r3, #9
 8004282:	460b      	mov	r3, r1
 8004284:	4614      	mov	r4, r2
 8004286:	4618      	mov	r0, r3
 8004288:	4621      	mov	r1, r4
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f04f 0400 	mov.w	r4, #0
 8004290:	461a      	mov	r2, r3
 8004292:	4623      	mov	r3, r4
 8004294:	f7fb ffb6 	bl	8000204 <__aeabi_uldivmod>
 8004298:	4603      	mov	r3, r0
 800429a:	460c      	mov	r4, r1
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e049      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a0:	4b2e      	ldr	r3, [pc, #184]	; (800435c <HAL_RCC_GetSysClockFreq+0x334>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	099b      	lsrs	r3, r3, #6
 80042a6:	f04f 0400 	mov.w	r4, #0
 80042aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	ea03 0501 	and.w	r5, r3, r1
 80042b6:	ea04 0602 	and.w	r6, r4, r2
 80042ba:	4629      	mov	r1, r5
 80042bc:	4632      	mov	r2, r6
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	f04f 0400 	mov.w	r4, #0
 80042c6:	0154      	lsls	r4, r2, #5
 80042c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042cc:	014b      	lsls	r3, r1, #5
 80042ce:	4619      	mov	r1, r3
 80042d0:	4622      	mov	r2, r4
 80042d2:	1b49      	subs	r1, r1, r5
 80042d4:	eb62 0206 	sbc.w	r2, r2, r6
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	f04f 0400 	mov.w	r4, #0
 80042e0:	0194      	lsls	r4, r2, #6
 80042e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042e6:	018b      	lsls	r3, r1, #6
 80042e8:	1a5b      	subs	r3, r3, r1
 80042ea:	eb64 0402 	sbc.w	r4, r4, r2
 80042ee:	f04f 0100 	mov.w	r1, #0
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	00e2      	lsls	r2, r4, #3
 80042f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042fc:	00d9      	lsls	r1, r3, #3
 80042fe:	460b      	mov	r3, r1
 8004300:	4614      	mov	r4, r2
 8004302:	195b      	adds	r3, r3, r5
 8004304:	eb44 0406 	adc.w	r4, r4, r6
 8004308:	f04f 0100 	mov.w	r1, #0
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	02a2      	lsls	r2, r4, #10
 8004312:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004316:	0299      	lsls	r1, r3, #10
 8004318:	460b      	mov	r3, r1
 800431a:	4614      	mov	r4, r2
 800431c:	4618      	mov	r0, r3
 800431e:	4621      	mov	r1, r4
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f04f 0400 	mov.w	r4, #0
 8004326:	461a      	mov	r2, r3
 8004328:	4623      	mov	r3, r4
 800432a:	f7fb ff6b 	bl	8000204 <__aeabi_uldivmod>
 800432e:	4603      	mov	r3, r0
 8004330:	460c      	mov	r4, r1
 8004332:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_GetSysClockFreq+0x334>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0f1b      	lsrs	r3, r3, #28
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	613b      	str	r3, [r7, #16]
      break;
 800434a:	e002      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_RCC_GetSysClockFreq+0x338>)
 800434e:	613b      	str	r3, [r7, #16]
      break;
 8004350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004352:	693b      	ldr	r3, [r7, #16]
}
 8004354:	4618      	mov	r0, r3
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800435c:	40023800 	.word	0x40023800
 8004360:	00f42400 	.word	0x00f42400
 8004364:	007a1200 	.word	0x007a1200

08004368 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8083 	beq.w	8004488 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004382:	4b95      	ldr	r3, [pc, #596]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b04      	cmp	r3, #4
 800438c:	d019      	beq.n	80043c2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800438e:	4b92      	ldr	r3, [pc, #584]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004396:	2b08      	cmp	r3, #8
 8004398:	d106      	bne.n	80043a8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800439a:	4b8f      	ldr	r3, [pc, #572]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a6:	d00c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a8:	4b8b      	ldr	r3, [pc, #556]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043b0:	2b0c      	cmp	r3, #12
 80043b2:	d112      	bne.n	80043da <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b4:	4b88      	ldr	r3, [pc, #544]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c0:	d10b      	bne.n	80043da <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c2:	4b85      	ldr	r3, [pc, #532]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d05b      	beq.n	8004486 <HAL_RCC_OscConfig+0x11e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d157      	bne.n	8004486 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e216      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x8a>
 80043e4:	4b7c      	ldr	r3, [pc, #496]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a7b      	ldr	r2, [pc, #492]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e01d      	b.n	800442e <HAL_RCC_OscConfig+0xc6>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043fa:	d10c      	bne.n	8004416 <HAL_RCC_OscConfig+0xae>
 80043fc:	4b76      	ldr	r3, [pc, #472]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a75      	ldr	r2, [pc, #468]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	4b73      	ldr	r3, [pc, #460]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a72      	ldr	r2, [pc, #456]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	e00b      	b.n	800442e <HAL_RCC_OscConfig+0xc6>
 8004416:	4b70      	ldr	r3, [pc, #448]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a6f      	ldr	r2, [pc, #444]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800441c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b6d      	ldr	r3, [pc, #436]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6c      	ldr	r2, [pc, #432]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d013      	beq.n	800445e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fe fd7d 	bl	8002f34 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800443e:	f7fe fd79 	bl	8002f34 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b64      	cmp	r3, #100	; 0x64
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1db      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004450:	4b61      	ldr	r3, [pc, #388]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0xd6>
 800445c:	e014      	b.n	8004488 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fe fd69 	bl	8002f34 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004466:	f7fe fd65 	bl	8002f34 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b64      	cmp	r3, #100	; 0x64
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e1c7      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004478:	4b57      	ldr	r3, [pc, #348]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0xfe>
 8004484:	e000      	b.n	8004488 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004486:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d06f      	beq.n	8004574 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004494:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b00      	cmp	r3, #0
 800449e:	d017      	beq.n	80044d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044a0:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d105      	bne.n	80044b8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044ac:	4b4a      	ldr	r3, [pc, #296]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00b      	beq.n	80044d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b8:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044c0:	2b0c      	cmp	r3, #12
 80044c2:	d11c      	bne.n	80044fe <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c4:	4b44      	ldr	r3, [pc, #272]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d116      	bne.n	80044fe <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d0:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_OscConfig+0x180>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e18f      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4938      	ldr	r1, [pc, #224]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fc:	e03a      	b.n	8004574 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d020      	beq.n	8004548 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004506:	4b35      	ldr	r3, [pc, #212]	; (80045dc <HAL_RCC_OscConfig+0x274>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fe fd12 	bl	8002f34 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004514:	f7fe fd0e 	bl	8002f34 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e170      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004526:	4b2c      	ldr	r3, [pc, #176]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004532:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4925      	ldr	r1, [pc, #148]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004542:	4313      	orrs	r3, r2
 8004544:	600b      	str	r3, [r1, #0]
 8004546:	e015      	b.n	8004574 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004548:	4b24      	ldr	r3, [pc, #144]	; (80045dc <HAL_RCC_OscConfig+0x274>)
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454e:	f7fe fcf1 	bl	8002f34 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004556:	f7fe fced 	bl	8002f34 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e14f      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f0      	bne.n	8004556 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d037      	beq.n	80045f0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d016      	beq.n	80045b6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <HAL_RCC_OscConfig+0x278>)
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458e:	f7fe fcd1 	bl	8002f34 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004596:	f7fe fccd 	bl	8002f34 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e12f      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x22e>
 80045b4:	e01c      	b.n	80045f0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <HAL_RCC_OscConfig+0x278>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fe fcba 	bl	8002f34 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c2:	e00f      	b.n	80045e4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c4:	f7fe fcb6 	bl	8002f34 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d908      	bls.n	80045e4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e118      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	42470000 	.word	0x42470000
 80045e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	4b8a      	ldr	r3, [pc, #552]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 80045e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e9      	bne.n	80045c4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8097 	beq.w	800472c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004602:	4b83      	ldr	r3, [pc, #524]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10f      	bne.n	800462e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	4b7f      	ldr	r3, [pc, #508]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a7e      	ldr	r2, [pc, #504]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 8004618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
 800461e:	4b7c      	ldr	r3, [pc, #496]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462e:	4b79      	ldr	r3, [pc, #484]	; (8004814 <HAL_RCC_OscConfig+0x4ac>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d118      	bne.n	800466c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463a:	4b76      	ldr	r3, [pc, #472]	; (8004814 <HAL_RCC_OscConfig+0x4ac>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a75      	ldr	r2, [pc, #468]	; (8004814 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004646:	f7fe fc75 	bl	8002f34 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fe fc71 	bl	8002f34 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0d3      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	4b6c      	ldr	r3, [pc, #432]	; (8004814 <HAL_RCC_OscConfig+0x4ac>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x31a>
 8004674:	4b66      	ldr	r3, [pc, #408]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a65      	ldr	r2, [pc, #404]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	e01c      	b.n	80046bc <HAL_RCC_OscConfig+0x354>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b05      	cmp	r3, #5
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x33c>
 800468a:	4b61      	ldr	r3, [pc, #388]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a60      	ldr	r2, [pc, #384]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 8004690:	f043 0304 	orr.w	r3, r3, #4
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
 8004696:	4b5e      	ldr	r3, [pc, #376]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	4a5d      	ldr	r2, [pc, #372]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	6713      	str	r3, [r2, #112]	; 0x70
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0x354>
 80046a4:	4b5a      	ldr	r3, [pc, #360]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	4a59      	ldr	r2, [pc, #356]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	6713      	str	r3, [r2, #112]	; 0x70
 80046b0:	4b57      	ldr	r3, [pc, #348]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a56      	ldr	r2, [pc, #344]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 80046b6:	f023 0304 	bic.w	r3, r3, #4
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fe fc36 	bl	8002f34 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fe fc32 	bl	8002f34 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e092      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e2:	4b4b      	ldr	r3, [pc, #300]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0ee      	beq.n	80046cc <HAL_RCC_OscConfig+0x364>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fe fc20 	bl	8002f34 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f6:	e00a      	b.n	800470e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f8:	f7fe fc1c 	bl	8002f34 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	; 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e07c      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470e:	4b40      	ldr	r3, [pc, #256]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ee      	bne.n	80046f8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004720:	4b3b      	ldr	r3, [pc, #236]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	4a3a      	ldr	r2, [pc, #232]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 8004726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d068      	beq.n	8004806 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004734:	4b36      	ldr	r3, [pc, #216]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b08      	cmp	r3, #8
 800473e:	d060      	beq.n	8004802 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d145      	bne.n	80047d4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004748:	4b33      	ldr	r3, [pc, #204]	; (8004818 <HAL_RCC_OscConfig+0x4b0>)
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474e:	f7fe fbf1 	bl	8002f34 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004756:	f7fe fbed 	bl	8002f34 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e04f      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004768:	4b29      	ldr	r3, [pc, #164]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f0      	bne.n	8004756 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	019b      	lsls	r3, r3, #6
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	3b01      	subs	r3, #1
 800478e:	041b      	lsls	r3, r3, #16
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	061b      	lsls	r3, r3, #24
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	071b      	lsls	r3, r3, #28
 80047a0:	491b      	ldr	r1, [pc, #108]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <HAL_RCC_OscConfig+0x4b0>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fe fbc2 	bl	8002f34 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fe fbbe 	bl	8002f34 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e020      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x44c>
 80047d2:	e018      	b.n	8004806 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d4:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_RCC_OscConfig+0x4b0>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7fe fbab 	bl	8002f34 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fe fba7 	bl	8002f34 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e009      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_RCC_OscConfig+0x4a8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x47a>
 8004800:	e001      	b.n	8004806 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40023800 	.word	0x40023800
 8004814:	40007000 	.word	0x40007000
 8004818:	42470060 	.word	0x42470060

0800481c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e056      	b.n	80048dc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7fd f9ff 	bl	8001c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004864:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	ea42 0103 	orr.w	r1, r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	0c1b      	lsrs	r3, r3, #16
 80048ac:	f003 0104 	and.w	r1, r3, #4
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69da      	ldr	r2, [r3, #28]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_SPI_Transmit+0x22>
 8004902:	2302      	movs	r3, #2
 8004904:	e11e      	b.n	8004b44 <HAL_SPI_Transmit+0x260>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800490e:	f7fe fb11 	bl	8002f34 <HAL_GetTick>
 8004912:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d002      	beq.n	800492a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004924:	2302      	movs	r3, #2
 8004926:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004928:	e103      	b.n	8004b32 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_SPI_Transmit+0x52>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	77fb      	strb	r3, [r7, #31]
    goto error;
 800493a:	e0fa      	b.n	8004b32 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2203      	movs	r2, #3
 8004940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004982:	d107      	bne.n	8004994 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004992:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d007      	beq.n	80049b2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ba:	d14b      	bne.n	8004a54 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_SPI_Transmit+0xe6>
 80049c4:	8afb      	ldrh	r3, [r7, #22]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d13e      	bne.n	8004a48 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	881a      	ldrh	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	1c9a      	adds	r2, r3, #2
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049ee:	e02b      	b.n	8004a48 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d112      	bne.n	8004a24 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	1c9a      	adds	r2, r3, #2
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a22:	e011      	b.n	8004a48 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a24:	f7fe fa86 	bl	8002f34 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d803      	bhi.n	8004a3c <HAL_SPI_Transmit+0x158>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a3a:	d102      	bne.n	8004a42 <HAL_SPI_Transmit+0x15e>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a46:	e074      	b.n	8004b32 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1ce      	bne.n	80049f0 <HAL_SPI_Transmit+0x10c>
 8004a52:	e04c      	b.n	8004aee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <HAL_SPI_Transmit+0x17e>
 8004a5c:	8afb      	ldrh	r3, [r7, #22]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d140      	bne.n	8004ae4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a88:	e02c      	b.n	8004ae4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d113      	bne.n	8004ac0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	7812      	ldrb	r2, [r2, #0]
 8004aa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004abe:	e011      	b.n	8004ae4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ac0:	f7fe fa38 	bl	8002f34 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d803      	bhi.n	8004ad8 <HAL_SPI_Transmit+0x1f4>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad6:	d102      	bne.n	8004ade <HAL_SPI_Transmit+0x1fa>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ae2:	e026      	b.n	8004b32 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1cd      	bne.n	8004a8a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fcc4 	bl	8005480 <SPI_EndRxTxTransaction>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e000      	b.n	8004b32 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004b30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b68:	d112      	bne.n	8004b90 <HAL_SPI_Receive+0x44>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10e      	bne.n	8004b90 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2204      	movs	r2, #4
 8004b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	68b9      	ldr	r1, [r7, #8]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f8e9 	bl	8004d5e <HAL_SPI_TransmitReceive>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	e0e2      	b.n	8004d56 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_SPI_Receive+0x52>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e0db      	b.n	8004d56 <HAL_SPI_Receive+0x20a>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba6:	f7fe f9c5 	bl	8002f34 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d002      	beq.n	8004bbe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bbc:	e0c2      	b.n	8004d44 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <HAL_SPI_Receive+0x7e>
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bce:	e0b9      	b.n	8004d44 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	88fa      	ldrh	r2, [r7, #6]
 8004bee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c16:	d107      	bne.n	8004c28 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c26:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d007      	beq.n	8004c46 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d162      	bne.n	8004d14 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c4e:	e02e      	b.n	8004cae <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d115      	bne.n	8004c8a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f103 020c 	add.w	r2, r3, #12
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	7812      	ldrb	r2, [r2, #0]
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c88:	e011      	b.n	8004cae <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c8a:	f7fe f953 	bl	8002f34 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d803      	bhi.n	8004ca2 <HAL_SPI_Receive+0x156>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca0:	d102      	bne.n	8004ca8 <HAL_SPI_Receive+0x15c>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cac:	e04a      	b.n	8004d44 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1cb      	bne.n	8004c50 <HAL_SPI_Receive+0x104>
 8004cb8:	e031      	b.n	8004d1e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d113      	bne.n	8004cf0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	b292      	uxth	r2, r2
 8004cd4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	1c9a      	adds	r2, r3, #2
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cee:	e011      	b.n	8004d14 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cf0:	f7fe f920 	bl	8002f34 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d803      	bhi.n	8004d08 <HAL_SPI_Receive+0x1bc>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d06:	d102      	bne.n	8004d0e <HAL_SPI_Receive+0x1c2>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d12:	e017      	b.n	8004d44 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1cd      	bne.n	8004cba <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fb46 	bl	80053b4 <SPI_EndRxTransaction>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75fb      	strb	r3, [r7, #23]
 8004d40:	e000      	b.n	8004d44 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004d42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b08c      	sub	sp, #48	; 0x30
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x26>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e18a      	b.n	800509a <HAL_SPI_TransmitReceive+0x33c>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d8c:	f7fe f8d2 	bl	8002f34 <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004da2:	887b      	ldrh	r3, [r7, #2]
 8004da4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004da6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d00f      	beq.n	8004dce <HAL_SPI_TransmitReceive+0x70>
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004db4:	d107      	bne.n	8004dc6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d103      	bne.n	8004dc6 <HAL_SPI_TransmitReceive+0x68>
 8004dbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d003      	beq.n	8004dce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dcc:	e15b      	b.n	8005086 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_SPI_TransmitReceive+0x82>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_SPI_TransmitReceive+0x82>
 8004dda:	887b      	ldrh	r3, [r7, #2]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d103      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004de6:	e14e      	b.n	8005086 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d003      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2205      	movs	r2, #5
 8004df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	887a      	ldrh	r2, [r7, #2]
 8004e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	887a      	ldrh	r2, [r7, #2]
 8004e12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	887a      	ldrh	r2, [r7, #2]
 8004e1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	887a      	ldrh	r2, [r7, #2]
 8004e24:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d007      	beq.n	8004e50 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e58:	d178      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_TransmitReceive+0x10a>
 8004e62:	8b7b      	ldrh	r3, [r7, #26]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d166      	bne.n	8004f36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	881a      	ldrh	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	1c9a      	adds	r2, r3, #2
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e8c:	e053      	b.n	8004f36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_SPI_TransmitReceive+0x176>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d016      	beq.n	8004ed4 <HAL_SPI_TransmitReceive+0x176>
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d113      	bne.n	8004ed4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d119      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x1b8>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d014      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	1c9a      	adds	r2, r3, #2
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f12:	2301      	movs	r3, #1
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f16:	f7fe f80d 	bl	8002f34 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d807      	bhi.n	8004f36 <HAL_SPI_TransmitReceive+0x1d8>
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f2c:	d003      	beq.n	8004f36 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f34:	e0a7      	b.n	8005086 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1a6      	bne.n	8004e8e <HAL_SPI_TransmitReceive+0x130>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1a1      	bne.n	8004e8e <HAL_SPI_TransmitReceive+0x130>
 8004f4a:	e07c      	b.n	8005046 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0x1fc>
 8004f54:	8b7b      	ldrh	r3, [r7, #26]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d16b      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f80:	e057      	b.n	8005032 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d11c      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x26c>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d017      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x26c>
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d114      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	7812      	ldrb	r2, [r2, #0]
 8004fac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d119      	bne.n	800500c <HAL_SPI_TransmitReceive+0x2ae>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d014      	beq.n	800500c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005008:	2301      	movs	r3, #1
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800500c:	f7fd ff92 	bl	8002f34 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005018:	429a      	cmp	r2, r3
 800501a:	d803      	bhi.n	8005024 <HAL_SPI_TransmitReceive+0x2c6>
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005022:	d102      	bne.n	800502a <HAL_SPI_TransmitReceive+0x2cc>
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005030:	e029      	b.n	8005086 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1a2      	bne.n	8004f82 <HAL_SPI_TransmitReceive+0x224>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d19d      	bne.n	8004f82 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005048:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fa18 	bl	8005480 <SPI_EndRxTxTransaction>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005062:	e010      	b.n	8005086 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10b      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	e000      	b.n	8005086 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005084:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800509a:	4618      	mov	r0, r3
 800509c:	3730      	adds	r7, #48	; 0x30
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	099b      	lsrs	r3, r3, #6
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10f      	bne.n	80050e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	099b      	lsrs	r3, r3, #6
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	4798      	blx	r3
    return;
 80050e6:	e0d8      	b.n	800529a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_SPI_IRQHandler+0x66>
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	09db      	lsrs	r3, r3, #7
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	4798      	blx	r3
    return;
 8005108:	e0c7      	b.n	800529a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10c      	bne.n	8005130 <HAL_SPI_IRQHandler+0x8c>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	099b      	lsrs	r3, r3, #6
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	0a1b      	lsrs	r3, r3, #8
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 80b5 	beq.w	800529a <HAL_SPI_IRQHandler+0x1f6>
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80ae 	beq.w	800529a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	099b      	lsrs	r3, r3, #6
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d023      	beq.n	8005192 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b03      	cmp	r3, #3
 8005154:	d011      	beq.n	800517a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	f043 0204 	orr.w	r2, r3, #4
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	e00b      	b.n	8005192 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800517a:	2300      	movs	r3, #0
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	693b      	ldr	r3, [r7, #16]
        return;
 8005190:	e083      	b.n	800529a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d014      	beq.n	80051c8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	f043 0201 	orr.w	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00c      	beq.n	80051ee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d8:	f043 0208 	orr.w	r2, r3, #8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051e0:	2300      	movs	r3, #0
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]
 80051ec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d050      	beq.n	8005298 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005204:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <HAL_SPI_IRQHandler+0x17e>
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d034      	beq.n	800528c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0203 	bic.w	r2, r2, #3
 8005230:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d011      	beq.n	800525e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523e:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_SPI_IRQHandler+0x1fc>)
 8005240:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe f92a 	bl	80034a0 <HAL_DMA_Abort_IT>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005256:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005262:	2b00      	cmp	r3, #0
 8005264:	d016      	beq.n	8005294 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526a:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <HAL_SPI_IRQHandler+0x1fc>)
 800526c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe f914 	bl	80034a0 <HAL_DMA_Abort_IT>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800528a:	e003      	b.n	8005294 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f809 	bl	80052a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005292:	e000      	b.n	8005296 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005294:	bf00      	nop
    return;
 8005296:	bf00      	nop
 8005298:	bf00      	nop
  }
}
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	080052b9 	.word	0x080052b9

080052a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff ffe6 	bl	80052a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f0:	e04c      	b.n	800538c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052f8:	d048      	beq.n	800538c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80052fa:	f7fd fe1b 	bl	8002f34 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d902      	bls.n	8005310 <SPI_WaitFlagStateUntilTimeout+0x30>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d13d      	bne.n	800538c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800531e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005328:	d111      	bne.n	800534e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005332:	d004      	beq.n	800533e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533c:	d107      	bne.n	800534e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800534c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005356:	d10f      	bne.n	8005378 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005376:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e00f      	b.n	80053ac <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4013      	ands	r3, r2
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	429a      	cmp	r2, r3
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d1a3      	bne.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053c8:	d111      	bne.n	80053ee <SPI_EndRxTransaction+0x3a>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d2:	d004      	beq.n	80053de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053dc:	d107      	bne.n	80053ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f6:	d12a      	bne.n	800544e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005400:	d012      	beq.n	8005428 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2200      	movs	r2, #0
 800540a:	2180      	movs	r1, #128	; 0x80
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff ff67 	bl	80052e0 <SPI_WaitFlagStateUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d02d      	beq.n	8005474 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e026      	b.n	8005476 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2200      	movs	r2, #0
 8005430:	2101      	movs	r1, #1
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff ff54 	bl	80052e0 <SPI_WaitFlagStateUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01a      	beq.n	8005474 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e013      	b.n	8005476 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	2101      	movs	r1, #1
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7ff ff41 	bl	80052e0 <SPI_WaitFlagStateUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005468:	f043 0220 	orr.w	r2, r3, #32
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e000      	b.n	8005476 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <SPI_EndRxTxTransaction+0x7c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <SPI_EndRxTxTransaction+0x80>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	0d5b      	lsrs	r3, r3, #21
 8005498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054aa:	d112      	bne.n	80054d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2200      	movs	r2, #0
 80054b4:	2180      	movs	r1, #128	; 0x80
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f7ff ff12 	bl	80052e0 <SPI_WaitFlagStateUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d016      	beq.n	80054f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	f043 0220 	orr.w	r2, r3, #32
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e00f      	b.n	80054f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	3b01      	subs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e8:	2b80      	cmp	r3, #128	; 0x80
 80054ea:	d0f2      	beq.n	80054d2 <SPI_EndRxTxTransaction+0x52>
 80054ec:	e000      	b.n	80054f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80054ee:	bf00      	nop
  }

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000024 	.word	0x20000024
 8005500:	165e9f81 	.word	0x165e9f81

08005504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e01d      	b.n	8005552 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fc fc46 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f000 f988 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b06      	cmp	r3, #6
 8005582:	d007      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0201 	bic.w	r2, r2, #1
 80055b8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6a1a      	ldr	r2, [r3, #32]
 80055c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10f      	bne.n	80055ea <HAL_TIM_Base_Stop_IT+0x48>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a1a      	ldr	r2, [r3, #32]
 80055d0:	f240 4344 	movw	r3, #1092	; 0x444
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d107      	bne.n	80055ea <HAL_TIM_Base_Stop_IT+0x48>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0201 	bic.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b02      	cmp	r3, #2
 800560c:	d122      	bne.n	8005654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b02      	cmp	r3, #2
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0202 	mvn.w	r2, #2
 8005624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f8ee 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f8e0 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f8f1 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b04      	cmp	r3, #4
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b04      	cmp	r3, #4
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0204 	mvn.w	r2, #4
 8005678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f8c4 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8b6 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f8c7 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0208 	mvn.w	r2, #8
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2204      	movs	r2, #4
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f89a 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f88c 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f89d 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b10      	cmp	r3, #16
 8005708:	d122      	bne.n	8005750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b10      	cmp	r3, #16
 8005716:	d11b      	bne.n	8005750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0210 	mvn.w	r2, #16
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2208      	movs	r2, #8
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f870 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f862 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f873 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b01      	cmp	r3, #1
 800575c:	d10e      	bne.n	800577c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d107      	bne.n	800577c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0201 	mvn.w	r2, #1
 8005774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc f91a 	bl	80019b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005786:	2b80      	cmp	r3, #128	; 0x80
 8005788:	d10e      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005794:	2b80      	cmp	r3, #128	; 0x80
 8005796:	d107      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f97e 	bl	8005aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d10e      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d107      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f838 	bl	8005844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d10e      	bne.n	8005800 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d107      	bne.n	8005800 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0220 	mvn.w	r2, #32
 80057f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f948 	bl	8005a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a40      	ldr	r2, [pc, #256]	; (800596c <TIM_Base_SetConfig+0x114>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d00f      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3d      	ldr	r2, [pc, #244]	; (8005970 <TIM_Base_SetConfig+0x118>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00b      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3c      	ldr	r2, [pc, #240]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d007      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3b      	ldr	r2, [pc, #236]	; (8005978 <TIM_Base_SetConfig+0x120>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3a      	ldr	r2, [pc, #232]	; (800597c <TIM_Base_SetConfig+0x124>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d108      	bne.n	80058aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2f      	ldr	r2, [pc, #188]	; (800596c <TIM_Base_SetConfig+0x114>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d02b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d027      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <TIM_Base_SetConfig+0x118>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d023      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01f      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <TIM_Base_SetConfig+0x120>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a29      	ldr	r2, [pc, #164]	; (800597c <TIM_Base_SetConfig+0x124>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d017      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a28      	ldr	r2, [pc, #160]	; (8005980 <TIM_Base_SetConfig+0x128>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a27      	ldr	r2, [pc, #156]	; (8005984 <TIM_Base_SetConfig+0x12c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00f      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a26      	ldr	r2, [pc, #152]	; (8005988 <TIM_Base_SetConfig+0x130>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a25      	ldr	r2, [pc, #148]	; (800598c <TIM_Base_SetConfig+0x134>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a24      	ldr	r2, [pc, #144]	; (8005990 <TIM_Base_SetConfig+0x138>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a23      	ldr	r2, [pc, #140]	; (8005994 <TIM_Base_SetConfig+0x13c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d108      	bne.n	800591c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a0a      	ldr	r2, [pc, #40]	; (800596c <TIM_Base_SetConfig+0x114>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0c      	ldr	r2, [pc, #48]	; (800597c <TIM_Base_SetConfig+0x124>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d103      	bne.n	8005958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	615a      	str	r2, [r3, #20]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800
 800598c:	40001800 	.word	0x40001800
 8005990:	40001c00 	.word	0x40001c00
 8005994:	40002000 	.word	0x40002000

08005998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e05a      	b.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a21      	ldr	r2, [pc, #132]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fc:	d01d      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1a      	ldr	r2, [pc, #104]	; (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a18      	ldr	r2, [pc, #96]	; (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d10c      	bne.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40010400 	.word	0x40010400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40001800 	.word	0x40001800

08005a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e03f      	b.n	8005b4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fc f9d0 	bl	8001e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2224      	movs	r2, #36	; 0x24
 8005ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fc0d 	bl	800631c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d166      	bne.n	8005c3c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_UART_Receive_DMA+0x26>
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e05f      	b.n	8005c3e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_UART_Receive_DMA+0x38>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e058      	b.n	8005c3e <HAL_UART_Receive_DMA+0xea>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2222      	movs	r2, #34	; 0x22
 8005baa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <HAL_UART_Receive_DMA+0xf4>)
 8005bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	4a24      	ldr	r2, [pc, #144]	; (8005c4c <HAL_UART_Receive_DMA+0xf8>)
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <HAL_UART_Receive_DMA+0xfc>)
 8005bc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	2200      	movs	r2, #0
 8005bcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005bce:	f107 0308 	add.w	r3, r7, #8
 8005bd2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	f7fd fb93 	bl	8003310 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005bea:	2300      	movs	r3, #0
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c16:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c36:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e000      	b.n	8005c3e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005c3c:	2302      	movs	r3, #2
  }
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	08005f95 	.word	0x08005f95
 8005c4c:	08005ffd 	.word	0x08005ffd
 8005c50:	08006019 	.word	0x08006019

08005c54 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005c6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c86:	2b80      	cmp	r3, #128	; 0x80
 8005c88:	d124      	bne.n	8005cd4 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c98:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d018      	beq.n	8005cd4 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fd fb86 	bl	80033c0 <HAL_DMA_Abort>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fd fd9a 	bl	80037f8 <HAL_DMA_GetError>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d104      	bne.n	8005cd4 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2210      	movs	r2, #16
 8005cce:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e03d      	b.n	8005d50 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b40      	cmp	r3, #64	; 0x40
 8005ce0:	d124      	bne.n	8005d2c <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695a      	ldr	r2, [r3, #20]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d018      	beq.n	8005d2c <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	2200      	movs	r2, #0
 8005d00:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fd fb5a 	bl	80033c0 <HAL_DMA_Abort>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00c      	beq.n	8005d2c <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fd fd6e 	bl	80037f8 <HAL_DMA_GetError>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d104      	bne.n	8005d2c <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2210      	movs	r2, #16
 8005d26:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e011      	b.n	8005d50 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10d      	bne.n	8005daa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_UART_IRQHandler+0x52>
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fa38 	bl	8006218 <UART_Receive_IT>
      return;
 8005da8:	e0d1      	b.n	8005f4e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80b0 	beq.w	8005f12 <HAL_UART_IRQHandler+0x1ba>
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d105      	bne.n	8005dc8 <HAL_UART_IRQHandler+0x70>
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 80a5 	beq.w	8005f12 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_UART_IRQHandler+0x90>
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de0:	f043 0201 	orr.w	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_UART_IRQHandler+0xb0>
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e00:	f043 0202 	orr.w	r2, r3, #2
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_UART_IRQHandler+0xd0>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e20:	f043 0204 	orr.w	r2, r3, #4
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00f      	beq.n	8005e52 <HAL_UART_IRQHandler+0xfa>
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <HAL_UART_IRQHandler+0xee>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4a:	f043 0208 	orr.w	r2, r3, #8
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d078      	beq.n	8005f4c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <HAL_UART_IRQHandler+0x11c>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f9d2 	bl	8006218 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <HAL_UART_IRQHandler+0x144>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d031      	beq.n	8005f00 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f91b 	bl	80060d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d123      	bne.n	8005ef8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ebe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d013      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ecc:	4a21      	ldr	r2, [pc, #132]	; (8005f54 <HAL_UART_IRQHandler+0x1fc>)
 8005ece:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fd fae3 	bl	80034a0 <HAL_DMA_Abort_IT>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d016      	beq.n	8005f0e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005eea:	4610      	mov	r0, r2
 8005eec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eee:	e00e      	b.n	8005f0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f845 	bl	8005f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef6:	e00a      	b.n	8005f0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f841 	bl	8005f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efe:	e006      	b.n	8005f0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f83d 	bl	8005f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f0c:	e01e      	b.n	8005f4c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0e:	bf00      	nop
    return;
 8005f10:	e01c      	b.n	8005f4c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d008      	beq.n	8005f2e <HAL_UART_IRQHandler+0x1d6>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f908 	bl	800613c <UART_Transmit_IT>
    return;
 8005f2c:	e00f      	b.n	8005f4e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1f6>
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f950 	bl	80061e8 <UART_EndTransmit_IT>
    return;
 8005f48:	bf00      	nop
 8005f4a:	e000      	b.n	8005f4e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005f4c:	bf00      	nop
  }
}
 8005f4e:	3720      	adds	r7, #32
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	08006115 	.word	0x08006115

08005f58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d11e      	bne.n	8005fee <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fc4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695a      	ldr	r2, [r3, #20]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f7fb fc6a 	bl	80018c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ff4:	bf00      	nop
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f7ff ffae 	bl	8005f6c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	bf0c      	ite	eq
 8006038:	2301      	moveq	r3, #1
 800603a:	2300      	movne	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b21      	cmp	r3, #33	; 0x21
 800604a:	d108      	bne.n	800605e <UART_DMAError+0x46>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2200      	movs	r2, #0
 8006056:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006058:	68b8      	ldr	r0, [r7, #8]
 800605a:	f000 f827 	bl	80060ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b40      	cmp	r3, #64	; 0x40
 800606a:	bf0c      	ite	eq
 800606c:	2301      	moveq	r3, #1
 800606e:	2300      	movne	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b22      	cmp	r3, #34	; 0x22
 800607e:	d108      	bne.n	8006092 <UART_DMAError+0x7a>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2200      	movs	r2, #0
 800608a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800608c:	68b8      	ldr	r0, [r7, #8]
 800608e:	f000 f823 	bl	80060d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006096:	f043 0210 	orr.w	r2, r3, #16
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800609e:	68b8      	ldr	r0, [r7, #8]
 80060a0:	f7ff ff6e 	bl	8005f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80060c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695a      	ldr	r2, [r3, #20]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7ff ff26 	bl	8005f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006134:	bf00      	nop
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b21      	cmp	r3, #33	; 0x21
 800614e:	d144      	bne.n	80061da <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006158:	d11a      	bne.n	8006190 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800616e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d105      	bne.n	8006184 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	1c9a      	adds	r2, r3, #2
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	621a      	str	r2, [r3, #32]
 8006182:	e00e      	b.n	80061a2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	621a      	str	r2, [r3, #32]
 800618e:	e008      	b.n	80061a2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	1c59      	adds	r1, r3, #1
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6211      	str	r1, [r2, #32]
 800619a:	781a      	ldrb	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	4619      	mov	r1, r3
 80061b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10f      	bne.n	80061d6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e000      	b.n	80061dc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff fea5 	bl	8005f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b22      	cmp	r3, #34	; 0x22
 800622a:	d171      	bne.n	8006310 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006234:	d123      	bne.n	800627e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10e      	bne.n	8006262 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	1c9a      	adds	r2, r3, #2
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	629a      	str	r2, [r3, #40]	; 0x28
 8006260:	e029      	b.n	80062b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	b29b      	uxth	r3, r3
 800626a:	b2db      	uxtb	r3, r3
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	629a      	str	r2, [r3, #40]	; 0x28
 800627c:	e01b      	b.n	80062b6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6858      	ldr	r0, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	1c59      	adds	r1, r3, #1
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6291      	str	r1, [r2, #40]	; 0x28
 8006296:	b2c2      	uxtb	r2, r0
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e00c      	b.n	80062b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a8:	1c58      	adds	r0, r3, #1
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	6288      	str	r0, [r1, #40]	; 0x28
 80062ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29b      	uxth	r3, r3
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	4619      	mov	r1, r3
 80062c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d120      	bne.n	800630c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0220 	bic.w	r2, r2, #32
 80062d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695a      	ldr	r2, [r3, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0201 	bic.w	r2, r2, #1
 80062f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fb fae0 	bl	80018c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	e002      	b.n	8006312 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	e000      	b.n	8006312 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006310:	2302      	movs	r3, #2
  }
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800631c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	431a      	orrs	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800635e:	f023 030c 	bic.w	r3, r3, #12
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	430b      	orrs	r3, r1
 800636a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638a:	f040 818b 	bne.w	80066a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4ac1      	ldr	r2, [pc, #772]	; (8006698 <UART_SetConfig+0x37c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d005      	beq.n	80063a4 <UART_SetConfig+0x88>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4abf      	ldr	r2, [pc, #764]	; (800669c <UART_SetConfig+0x380>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	f040 80bd 	bne.w	800651e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063a4:	f7fd fe2c 	bl	8004000 <HAL_RCC_GetPCLK2Freq>
 80063a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	461d      	mov	r5, r3
 80063ae:	f04f 0600 	mov.w	r6, #0
 80063b2:	46a8      	mov	r8, r5
 80063b4:	46b1      	mov	r9, r6
 80063b6:	eb18 0308 	adds.w	r3, r8, r8
 80063ba:	eb49 0409 	adc.w	r4, r9, r9
 80063be:	4698      	mov	r8, r3
 80063c0:	46a1      	mov	r9, r4
 80063c2:	eb18 0805 	adds.w	r8, r8, r5
 80063c6:	eb49 0906 	adc.w	r9, r9, r6
 80063ca:	f04f 0100 	mov.w	r1, #0
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063de:	4688      	mov	r8, r1
 80063e0:	4691      	mov	r9, r2
 80063e2:	eb18 0005 	adds.w	r0, r8, r5
 80063e6:	eb49 0106 	adc.w	r1, r9, r6
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	461d      	mov	r5, r3
 80063f0:	f04f 0600 	mov.w	r6, #0
 80063f4:	196b      	adds	r3, r5, r5
 80063f6:	eb46 0406 	adc.w	r4, r6, r6
 80063fa:	461a      	mov	r2, r3
 80063fc:	4623      	mov	r3, r4
 80063fe:	f7f9 ff01 	bl	8000204 <__aeabi_uldivmod>
 8006402:	4603      	mov	r3, r0
 8006404:	460c      	mov	r4, r1
 8006406:	461a      	mov	r2, r3
 8006408:	4ba5      	ldr	r3, [pc, #660]	; (80066a0 <UART_SetConfig+0x384>)
 800640a:	fba3 2302 	umull	r2, r3, r3, r2
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	461d      	mov	r5, r3
 8006418:	f04f 0600 	mov.w	r6, #0
 800641c:	46a9      	mov	r9, r5
 800641e:	46b2      	mov	sl, r6
 8006420:	eb19 0309 	adds.w	r3, r9, r9
 8006424:	eb4a 040a 	adc.w	r4, sl, sl
 8006428:	4699      	mov	r9, r3
 800642a:	46a2      	mov	sl, r4
 800642c:	eb19 0905 	adds.w	r9, r9, r5
 8006430:	eb4a 0a06 	adc.w	sl, sl, r6
 8006434:	f04f 0100 	mov.w	r1, #0
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006440:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006444:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006448:	4689      	mov	r9, r1
 800644a:	4692      	mov	sl, r2
 800644c:	eb19 0005 	adds.w	r0, r9, r5
 8006450:	eb4a 0106 	adc.w	r1, sl, r6
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	461d      	mov	r5, r3
 800645a:	f04f 0600 	mov.w	r6, #0
 800645e:	196b      	adds	r3, r5, r5
 8006460:	eb46 0406 	adc.w	r4, r6, r6
 8006464:	461a      	mov	r2, r3
 8006466:	4623      	mov	r3, r4
 8006468:	f7f9 fecc 	bl	8000204 <__aeabi_uldivmod>
 800646c:	4603      	mov	r3, r0
 800646e:	460c      	mov	r4, r1
 8006470:	461a      	mov	r2, r3
 8006472:	4b8b      	ldr	r3, [pc, #556]	; (80066a0 <UART_SetConfig+0x384>)
 8006474:	fba3 1302 	umull	r1, r3, r3, r2
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	2164      	movs	r1, #100	; 0x64
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	3332      	adds	r3, #50	; 0x32
 8006486:	4a86      	ldr	r2, [pc, #536]	; (80066a0 <UART_SetConfig+0x384>)
 8006488:	fba2 2303 	umull	r2, r3, r2, r3
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006494:	4498      	add	r8, r3
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	461d      	mov	r5, r3
 800649a:	f04f 0600 	mov.w	r6, #0
 800649e:	46a9      	mov	r9, r5
 80064a0:	46b2      	mov	sl, r6
 80064a2:	eb19 0309 	adds.w	r3, r9, r9
 80064a6:	eb4a 040a 	adc.w	r4, sl, sl
 80064aa:	4699      	mov	r9, r3
 80064ac:	46a2      	mov	sl, r4
 80064ae:	eb19 0905 	adds.w	r9, r9, r5
 80064b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80064b6:	f04f 0100 	mov.w	r1, #0
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064ca:	4689      	mov	r9, r1
 80064cc:	4692      	mov	sl, r2
 80064ce:	eb19 0005 	adds.w	r0, r9, r5
 80064d2:	eb4a 0106 	adc.w	r1, sl, r6
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	461d      	mov	r5, r3
 80064dc:	f04f 0600 	mov.w	r6, #0
 80064e0:	196b      	adds	r3, r5, r5
 80064e2:	eb46 0406 	adc.w	r4, r6, r6
 80064e6:	461a      	mov	r2, r3
 80064e8:	4623      	mov	r3, r4
 80064ea:	f7f9 fe8b 	bl	8000204 <__aeabi_uldivmod>
 80064ee:	4603      	mov	r3, r0
 80064f0:	460c      	mov	r4, r1
 80064f2:	461a      	mov	r2, r3
 80064f4:	4b6a      	ldr	r3, [pc, #424]	; (80066a0 <UART_SetConfig+0x384>)
 80064f6:	fba3 1302 	umull	r1, r3, r3, r2
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	2164      	movs	r1, #100	; 0x64
 80064fe:	fb01 f303 	mul.w	r3, r1, r3
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	3332      	adds	r3, #50	; 0x32
 8006508:	4a65      	ldr	r2, [pc, #404]	; (80066a0 <UART_SetConfig+0x384>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	f003 0207 	and.w	r2, r3, #7
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4442      	add	r2, r8
 800651a:	609a      	str	r2, [r3, #8]
 800651c:	e26f      	b.n	80069fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800651e:	f7fd fd5b 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 8006522:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	461d      	mov	r5, r3
 8006528:	f04f 0600 	mov.w	r6, #0
 800652c:	46a8      	mov	r8, r5
 800652e:	46b1      	mov	r9, r6
 8006530:	eb18 0308 	adds.w	r3, r8, r8
 8006534:	eb49 0409 	adc.w	r4, r9, r9
 8006538:	4698      	mov	r8, r3
 800653a:	46a1      	mov	r9, r4
 800653c:	eb18 0805 	adds.w	r8, r8, r5
 8006540:	eb49 0906 	adc.w	r9, r9, r6
 8006544:	f04f 0100 	mov.w	r1, #0
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006550:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006554:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006558:	4688      	mov	r8, r1
 800655a:	4691      	mov	r9, r2
 800655c:	eb18 0005 	adds.w	r0, r8, r5
 8006560:	eb49 0106 	adc.w	r1, r9, r6
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	461d      	mov	r5, r3
 800656a:	f04f 0600 	mov.w	r6, #0
 800656e:	196b      	adds	r3, r5, r5
 8006570:	eb46 0406 	adc.w	r4, r6, r6
 8006574:	461a      	mov	r2, r3
 8006576:	4623      	mov	r3, r4
 8006578:	f7f9 fe44 	bl	8000204 <__aeabi_uldivmod>
 800657c:	4603      	mov	r3, r0
 800657e:	460c      	mov	r4, r1
 8006580:	461a      	mov	r2, r3
 8006582:	4b47      	ldr	r3, [pc, #284]	; (80066a0 <UART_SetConfig+0x384>)
 8006584:	fba3 2302 	umull	r2, r3, r3, r2
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	461d      	mov	r5, r3
 8006592:	f04f 0600 	mov.w	r6, #0
 8006596:	46a9      	mov	r9, r5
 8006598:	46b2      	mov	sl, r6
 800659a:	eb19 0309 	adds.w	r3, r9, r9
 800659e:	eb4a 040a 	adc.w	r4, sl, sl
 80065a2:	4699      	mov	r9, r3
 80065a4:	46a2      	mov	sl, r4
 80065a6:	eb19 0905 	adds.w	r9, r9, r5
 80065aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80065ae:	f04f 0100 	mov.w	r1, #0
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065c2:	4689      	mov	r9, r1
 80065c4:	4692      	mov	sl, r2
 80065c6:	eb19 0005 	adds.w	r0, r9, r5
 80065ca:	eb4a 0106 	adc.w	r1, sl, r6
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	461d      	mov	r5, r3
 80065d4:	f04f 0600 	mov.w	r6, #0
 80065d8:	196b      	adds	r3, r5, r5
 80065da:	eb46 0406 	adc.w	r4, r6, r6
 80065de:	461a      	mov	r2, r3
 80065e0:	4623      	mov	r3, r4
 80065e2:	f7f9 fe0f 	bl	8000204 <__aeabi_uldivmod>
 80065e6:	4603      	mov	r3, r0
 80065e8:	460c      	mov	r4, r1
 80065ea:	461a      	mov	r2, r3
 80065ec:	4b2c      	ldr	r3, [pc, #176]	; (80066a0 <UART_SetConfig+0x384>)
 80065ee:	fba3 1302 	umull	r1, r3, r3, r2
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	2164      	movs	r1, #100	; 0x64
 80065f6:	fb01 f303 	mul.w	r3, r1, r3
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	3332      	adds	r3, #50	; 0x32
 8006600:	4a27      	ldr	r2, [pc, #156]	; (80066a0 <UART_SetConfig+0x384>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800660e:	4498      	add	r8, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	461d      	mov	r5, r3
 8006614:	f04f 0600 	mov.w	r6, #0
 8006618:	46a9      	mov	r9, r5
 800661a:	46b2      	mov	sl, r6
 800661c:	eb19 0309 	adds.w	r3, r9, r9
 8006620:	eb4a 040a 	adc.w	r4, sl, sl
 8006624:	4699      	mov	r9, r3
 8006626:	46a2      	mov	sl, r4
 8006628:	eb19 0905 	adds.w	r9, r9, r5
 800662c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006630:	f04f 0100 	mov.w	r1, #0
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800663c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006640:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006644:	4689      	mov	r9, r1
 8006646:	4692      	mov	sl, r2
 8006648:	eb19 0005 	adds.w	r0, r9, r5
 800664c:	eb4a 0106 	adc.w	r1, sl, r6
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	461d      	mov	r5, r3
 8006656:	f04f 0600 	mov.w	r6, #0
 800665a:	196b      	adds	r3, r5, r5
 800665c:	eb46 0406 	adc.w	r4, r6, r6
 8006660:	461a      	mov	r2, r3
 8006662:	4623      	mov	r3, r4
 8006664:	f7f9 fdce 	bl	8000204 <__aeabi_uldivmod>
 8006668:	4603      	mov	r3, r0
 800666a:	460c      	mov	r4, r1
 800666c:	461a      	mov	r2, r3
 800666e:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <UART_SetConfig+0x384>)
 8006670:	fba3 1302 	umull	r1, r3, r3, r2
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	2164      	movs	r1, #100	; 0x64
 8006678:	fb01 f303 	mul.w	r3, r1, r3
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	3332      	adds	r3, #50	; 0x32
 8006682:	4a07      	ldr	r2, [pc, #28]	; (80066a0 <UART_SetConfig+0x384>)
 8006684:	fba2 2303 	umull	r2, r3, r2, r3
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	f003 0207 	and.w	r2, r3, #7
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4442      	add	r2, r8
 8006694:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006696:	e1b2      	b.n	80069fe <UART_SetConfig+0x6e2>
 8006698:	40011000 	.word	0x40011000
 800669c:	40011400 	.word	0x40011400
 80066a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4ad7      	ldr	r2, [pc, #860]	; (8006a08 <UART_SetConfig+0x6ec>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d005      	beq.n	80066ba <UART_SetConfig+0x39e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4ad6      	ldr	r2, [pc, #856]	; (8006a0c <UART_SetConfig+0x6f0>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	f040 80d1 	bne.w	800685c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80066ba:	f7fd fca1 	bl	8004000 <HAL_RCC_GetPCLK2Freq>
 80066be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	469a      	mov	sl, r3
 80066c4:	f04f 0b00 	mov.w	fp, #0
 80066c8:	46d0      	mov	r8, sl
 80066ca:	46d9      	mov	r9, fp
 80066cc:	eb18 0308 	adds.w	r3, r8, r8
 80066d0:	eb49 0409 	adc.w	r4, r9, r9
 80066d4:	4698      	mov	r8, r3
 80066d6:	46a1      	mov	r9, r4
 80066d8:	eb18 080a 	adds.w	r8, r8, sl
 80066dc:	eb49 090b 	adc.w	r9, r9, fp
 80066e0:	f04f 0100 	mov.w	r1, #0
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066f4:	4688      	mov	r8, r1
 80066f6:	4691      	mov	r9, r2
 80066f8:	eb1a 0508 	adds.w	r5, sl, r8
 80066fc:	eb4b 0609 	adc.w	r6, fp, r9
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4619      	mov	r1, r3
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	f04f 0400 	mov.w	r4, #0
 8006712:	0094      	lsls	r4, r2, #2
 8006714:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006718:	008b      	lsls	r3, r1, #2
 800671a:	461a      	mov	r2, r3
 800671c:	4623      	mov	r3, r4
 800671e:	4628      	mov	r0, r5
 8006720:	4631      	mov	r1, r6
 8006722:	f7f9 fd6f 	bl	8000204 <__aeabi_uldivmod>
 8006726:	4603      	mov	r3, r0
 8006728:	460c      	mov	r4, r1
 800672a:	461a      	mov	r2, r3
 800672c:	4bb8      	ldr	r3, [pc, #736]	; (8006a10 <UART_SetConfig+0x6f4>)
 800672e:	fba3 2302 	umull	r2, r3, r3, r2
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	469b      	mov	fp, r3
 800673c:	f04f 0c00 	mov.w	ip, #0
 8006740:	46d9      	mov	r9, fp
 8006742:	46e2      	mov	sl, ip
 8006744:	eb19 0309 	adds.w	r3, r9, r9
 8006748:	eb4a 040a 	adc.w	r4, sl, sl
 800674c:	4699      	mov	r9, r3
 800674e:	46a2      	mov	sl, r4
 8006750:	eb19 090b 	adds.w	r9, r9, fp
 8006754:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006758:	f04f 0100 	mov.w	r1, #0
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006764:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006768:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800676c:	4689      	mov	r9, r1
 800676e:	4692      	mov	sl, r2
 8006770:	eb1b 0509 	adds.w	r5, fp, r9
 8006774:	eb4c 060a 	adc.w	r6, ip, sl
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	4619      	mov	r1, r3
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	f04f 0400 	mov.w	r4, #0
 800678a:	0094      	lsls	r4, r2, #2
 800678c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006790:	008b      	lsls	r3, r1, #2
 8006792:	461a      	mov	r2, r3
 8006794:	4623      	mov	r3, r4
 8006796:	4628      	mov	r0, r5
 8006798:	4631      	mov	r1, r6
 800679a:	f7f9 fd33 	bl	8000204 <__aeabi_uldivmod>
 800679e:	4603      	mov	r3, r0
 80067a0:	460c      	mov	r4, r1
 80067a2:	461a      	mov	r2, r3
 80067a4:	4b9a      	ldr	r3, [pc, #616]	; (8006a10 <UART_SetConfig+0x6f4>)
 80067a6:	fba3 1302 	umull	r1, r3, r3, r2
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	2164      	movs	r1, #100	; 0x64
 80067ae:	fb01 f303 	mul.w	r3, r1, r3
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	3332      	adds	r3, #50	; 0x32
 80067b8:	4a95      	ldr	r2, [pc, #596]	; (8006a10 <UART_SetConfig+0x6f4>)
 80067ba:	fba2 2303 	umull	r2, r3, r2, r3
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067c4:	4498      	add	r8, r3
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	469b      	mov	fp, r3
 80067ca:	f04f 0c00 	mov.w	ip, #0
 80067ce:	46d9      	mov	r9, fp
 80067d0:	46e2      	mov	sl, ip
 80067d2:	eb19 0309 	adds.w	r3, r9, r9
 80067d6:	eb4a 040a 	adc.w	r4, sl, sl
 80067da:	4699      	mov	r9, r3
 80067dc:	46a2      	mov	sl, r4
 80067de:	eb19 090b 	adds.w	r9, r9, fp
 80067e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067e6:	f04f 0100 	mov.w	r1, #0
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067fa:	4689      	mov	r9, r1
 80067fc:	4692      	mov	sl, r2
 80067fe:	eb1b 0509 	adds.w	r5, fp, r9
 8006802:	eb4c 060a 	adc.w	r6, ip, sl
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4619      	mov	r1, r3
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	f04f 0400 	mov.w	r4, #0
 8006818:	0094      	lsls	r4, r2, #2
 800681a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800681e:	008b      	lsls	r3, r1, #2
 8006820:	461a      	mov	r2, r3
 8006822:	4623      	mov	r3, r4
 8006824:	4628      	mov	r0, r5
 8006826:	4631      	mov	r1, r6
 8006828:	f7f9 fcec 	bl	8000204 <__aeabi_uldivmod>
 800682c:	4603      	mov	r3, r0
 800682e:	460c      	mov	r4, r1
 8006830:	461a      	mov	r2, r3
 8006832:	4b77      	ldr	r3, [pc, #476]	; (8006a10 <UART_SetConfig+0x6f4>)
 8006834:	fba3 1302 	umull	r1, r3, r3, r2
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	2164      	movs	r1, #100	; 0x64
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	3332      	adds	r3, #50	; 0x32
 8006846:	4a72      	ldr	r2, [pc, #456]	; (8006a10 <UART_SetConfig+0x6f4>)
 8006848:	fba2 2303 	umull	r2, r3, r2, r3
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	f003 020f 	and.w	r2, r3, #15
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4442      	add	r2, r8
 8006858:	609a      	str	r2, [r3, #8]
 800685a:	e0d0      	b.n	80069fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800685c:	f7fd fbbc 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 8006860:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	469a      	mov	sl, r3
 8006866:	f04f 0b00 	mov.w	fp, #0
 800686a:	46d0      	mov	r8, sl
 800686c:	46d9      	mov	r9, fp
 800686e:	eb18 0308 	adds.w	r3, r8, r8
 8006872:	eb49 0409 	adc.w	r4, r9, r9
 8006876:	4698      	mov	r8, r3
 8006878:	46a1      	mov	r9, r4
 800687a:	eb18 080a 	adds.w	r8, r8, sl
 800687e:	eb49 090b 	adc.w	r9, r9, fp
 8006882:	f04f 0100 	mov.w	r1, #0
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800688e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006892:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006896:	4688      	mov	r8, r1
 8006898:	4691      	mov	r9, r2
 800689a:	eb1a 0508 	adds.w	r5, sl, r8
 800689e:	eb4b 0609 	adc.w	r6, fp, r9
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4619      	mov	r1, r3
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	f04f 0400 	mov.w	r4, #0
 80068b4:	0094      	lsls	r4, r2, #2
 80068b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068ba:	008b      	lsls	r3, r1, #2
 80068bc:	461a      	mov	r2, r3
 80068be:	4623      	mov	r3, r4
 80068c0:	4628      	mov	r0, r5
 80068c2:	4631      	mov	r1, r6
 80068c4:	f7f9 fc9e 	bl	8000204 <__aeabi_uldivmod>
 80068c8:	4603      	mov	r3, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	461a      	mov	r2, r3
 80068ce:	4b50      	ldr	r3, [pc, #320]	; (8006a10 <UART_SetConfig+0x6f4>)
 80068d0:	fba3 2302 	umull	r2, r3, r3, r2
 80068d4:	095b      	lsrs	r3, r3, #5
 80068d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	469b      	mov	fp, r3
 80068de:	f04f 0c00 	mov.w	ip, #0
 80068e2:	46d9      	mov	r9, fp
 80068e4:	46e2      	mov	sl, ip
 80068e6:	eb19 0309 	adds.w	r3, r9, r9
 80068ea:	eb4a 040a 	adc.w	r4, sl, sl
 80068ee:	4699      	mov	r9, r3
 80068f0:	46a2      	mov	sl, r4
 80068f2:	eb19 090b 	adds.w	r9, r9, fp
 80068f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068fa:	f04f 0100 	mov.w	r1, #0
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006906:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800690a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800690e:	4689      	mov	r9, r1
 8006910:	4692      	mov	sl, r2
 8006912:	eb1b 0509 	adds.w	r5, fp, r9
 8006916:	eb4c 060a 	adc.w	r6, ip, sl
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	4619      	mov	r1, r3
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	f04f 0400 	mov.w	r4, #0
 800692c:	0094      	lsls	r4, r2, #2
 800692e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006932:	008b      	lsls	r3, r1, #2
 8006934:	461a      	mov	r2, r3
 8006936:	4623      	mov	r3, r4
 8006938:	4628      	mov	r0, r5
 800693a:	4631      	mov	r1, r6
 800693c:	f7f9 fc62 	bl	8000204 <__aeabi_uldivmod>
 8006940:	4603      	mov	r3, r0
 8006942:	460c      	mov	r4, r1
 8006944:	461a      	mov	r2, r3
 8006946:	4b32      	ldr	r3, [pc, #200]	; (8006a10 <UART_SetConfig+0x6f4>)
 8006948:	fba3 1302 	umull	r1, r3, r3, r2
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	2164      	movs	r1, #100	; 0x64
 8006950:	fb01 f303 	mul.w	r3, r1, r3
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	3332      	adds	r3, #50	; 0x32
 800695a:	4a2d      	ldr	r2, [pc, #180]	; (8006a10 <UART_SetConfig+0x6f4>)
 800695c:	fba2 2303 	umull	r2, r3, r2, r3
 8006960:	095b      	lsrs	r3, r3, #5
 8006962:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006966:	4498      	add	r8, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	469b      	mov	fp, r3
 800696c:	f04f 0c00 	mov.w	ip, #0
 8006970:	46d9      	mov	r9, fp
 8006972:	46e2      	mov	sl, ip
 8006974:	eb19 0309 	adds.w	r3, r9, r9
 8006978:	eb4a 040a 	adc.w	r4, sl, sl
 800697c:	4699      	mov	r9, r3
 800697e:	46a2      	mov	sl, r4
 8006980:	eb19 090b 	adds.w	r9, r9, fp
 8006984:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006988:	f04f 0100 	mov.w	r1, #0
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006994:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006998:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800699c:	4689      	mov	r9, r1
 800699e:	4692      	mov	sl, r2
 80069a0:	eb1b 0509 	adds.w	r5, fp, r9
 80069a4:	eb4c 060a 	adc.w	r6, ip, sl
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	4619      	mov	r1, r3
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	f04f 0400 	mov.w	r4, #0
 80069ba:	0094      	lsls	r4, r2, #2
 80069bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069c0:	008b      	lsls	r3, r1, #2
 80069c2:	461a      	mov	r2, r3
 80069c4:	4623      	mov	r3, r4
 80069c6:	4628      	mov	r0, r5
 80069c8:	4631      	mov	r1, r6
 80069ca:	f7f9 fc1b 	bl	8000204 <__aeabi_uldivmod>
 80069ce:	4603      	mov	r3, r0
 80069d0:	460c      	mov	r4, r1
 80069d2:	461a      	mov	r2, r3
 80069d4:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <UART_SetConfig+0x6f4>)
 80069d6:	fba3 1302 	umull	r1, r3, r3, r2
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	2164      	movs	r1, #100	; 0x64
 80069de:	fb01 f303 	mul.w	r3, r1, r3
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	3332      	adds	r3, #50	; 0x32
 80069e8:	4a09      	ldr	r2, [pc, #36]	; (8006a10 <UART_SetConfig+0x6f4>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	f003 020f 	and.w	r2, r3, #15
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4442      	add	r2, r8
 80069fa:	609a      	str	r2, [r3, #8]
}
 80069fc:	e7ff      	b.n	80069fe <UART_SetConfig+0x6e2>
 80069fe:	bf00      	nop
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a08:	40011000 	.word	0x40011000
 8006a0c:	40011400 	.word	0x40011400
 8006a10:	51eb851f 	.word	0x51eb851f

08006a14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a18:	4904      	ldr	r1, [pc, #16]	; (8006a2c <MX_FATFS_Init+0x18>)
 8006a1a:	4805      	ldr	r0, [pc, #20]	; (8006a30 <MX_FATFS_Init+0x1c>)
 8006a1c:	f002 fb4c 	bl	80090b8 <FATFS_LinkDriver>
 8006a20:	4603      	mov	r3, r0
 8006a22:	461a      	mov	r2, r3
 8006a24:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <MX_FATFS_Init+0x20>)
 8006a26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006a28:	bf00      	nop
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20000a90 	.word	0x20000a90
 8006a30:	20000034 	.word	0x20000034
 8006a34:	20000a94 	.word	0x20000a94

08006a38 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fb fe95 	bl	8002784 <USER_SPI_initialize>
 8006a5a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fb ff67 	bl	8002944 <USER_SPI_status>
 8006a76:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	607a      	str	r2, [r7, #4]
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006a90:	7bf8      	ldrb	r0, [r7, #15]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	f7fb ff6a 	bl	8002970 <USER_SPI_read>
 8006a9c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */


    return USER_SPI_write(pdrv, buff, sector, count);
 8006ab6:	7bf8      	ldrb	r0, [r7, #15]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	f7fb ffbd 	bl	8002a3c <USER_SPI_write>
 8006ac2:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	603a      	str	r2, [r7, #0]
 8006ad6:	71fb      	strb	r3, [r7, #7]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006adc:	79b9      	ldrb	r1, [r7, #6]
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fc f826 	bl	8002b34 <USER_SPI_ioctl>
 8006ae8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006afe:	79fb      	ldrb	r3, [r7, #7]
 8006b00:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <disk_status+0x30>)
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	79fa      	ldrb	r2, [r7, #7]
 8006b0c:	4905      	ldr	r1, [pc, #20]	; (8006b24 <disk_status+0x30>)
 8006b0e:	440a      	add	r2, r1
 8006b10:	7a12      	ldrb	r2, [r2, #8]
 8006b12:	4610      	mov	r0, r2
 8006b14:	4798      	blx	r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	200000a0 	.word	0x200000a0

08006b28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	4a0d      	ldr	r2, [pc, #52]	; (8006b70 <disk_initialize+0x48>)
 8006b3a:	5cd3      	ldrb	r3, [r2, r3]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d111      	bne.n	8006b64 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	4a0b      	ldr	r2, [pc, #44]	; (8006b70 <disk_initialize+0x48>)
 8006b44:	2101      	movs	r1, #1
 8006b46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006b48:	79fb      	ldrb	r3, [r7, #7]
 8006b4a:	4a09      	ldr	r2, [pc, #36]	; (8006b70 <disk_initialize+0x48>)
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	79fa      	ldrb	r2, [r7, #7]
 8006b56:	4906      	ldr	r1, [pc, #24]	; (8006b70 <disk_initialize+0x48>)
 8006b58:	440a      	add	r2, r1
 8006b5a:	7a12      	ldrb	r2, [r2, #8]
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4798      	blx	r3
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	200000a0 	.word	0x200000a0

08006b74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	607a      	str	r2, [r7, #4]
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	4a0a      	ldr	r2, [pc, #40]	; (8006bb0 <disk_read+0x3c>)
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	689c      	ldr	r4, [r3, #8]
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	4a07      	ldr	r2, [pc, #28]	; (8006bb0 <disk_read+0x3c>)
 8006b94:	4413      	add	r3, r2
 8006b96:	7a18      	ldrb	r0, [r3, #8]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	47a0      	blx	r4
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd90      	pop	{r4, r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	200000a0 	.word	0x200000a0

08006bb4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006bb4:	b590      	push	{r4, r7, lr}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	4a0a      	ldr	r2, [pc, #40]	; (8006bf0 <disk_write+0x3c>)
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	68dc      	ldr	r4, [r3, #12]
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	4a07      	ldr	r2, [pc, #28]	; (8006bf0 <disk_write+0x3c>)
 8006bd4:	4413      	add	r3, r2
 8006bd6:	7a18      	ldrb	r0, [r3, #8]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	47a0      	blx	r4
 8006be0:	4603      	mov	r3, r0
 8006be2:	75fb      	strb	r3, [r7, #23]
  return res;
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd90      	pop	{r4, r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	200000a0 	.word	0x200000a0

08006bf4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	603a      	str	r2, [r7, #0]
 8006bfe:	71fb      	strb	r3, [r7, #7]
 8006c00:	460b      	mov	r3, r1
 8006c02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	4a09      	ldr	r2, [pc, #36]	; (8006c2c <disk_ioctl+0x38>)
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	79fa      	ldrb	r2, [r7, #7]
 8006c12:	4906      	ldr	r1, [pc, #24]	; (8006c2c <disk_ioctl+0x38>)
 8006c14:	440a      	add	r2, r1
 8006c16:	7a10      	ldrb	r0, [r2, #8]
 8006c18:	79b9      	ldrb	r1, [r7, #6]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	4798      	blx	r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	73fb      	strb	r3, [r7, #15]
  return res;
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	200000a0 	.word	0x200000a0

08006c30 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006c40:	89fb      	ldrh	r3, [r7, #14]
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	b21a      	sxth	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	b21b      	sxth	r3, r3
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	b21b      	sxth	r3, r3
 8006c50:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006c52:	89fb      	ldrh	r3, [r7, #14]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3303      	adds	r3, #3
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	3202      	adds	r2, #2
 8006c78:	7812      	ldrb	r2, [r2, #0]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	3201      	adds	r2, #1
 8006c86:	7812      	ldrb	r2, [r2, #0]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	7812      	ldrb	r2, [r2, #0]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
	return rv;
 8006c98:	68fb      	ldr	r3, [r7, #12]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	887a      	ldrh	r2, [r7, #2]
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	887b      	ldrh	r3, [r7, #2]
 8006cc0:	0a1b      	lsrs	r3, r3, #8
 8006cc2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	607a      	str	r2, [r7, #4]
 8006cca:	887a      	ldrh	r2, [r7, #2]
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	0a1b      	lsrs	r3, r3, #8
 8006cf6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	607a      	str	r2, [r7, #4]
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	0a1b      	lsrs	r3, r3, #8
 8006d08:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	0a1b      	lsrs	r3, r3, #8
 8006d1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	607a      	str	r2, [r7, #4]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00d      	beq.n	8006d6a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	1c53      	adds	r3, r2, #1
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	1c59      	adds	r1, r3, #1
 8006d58:	6179      	str	r1, [r7, #20]
 8006d5a:	7812      	ldrb	r2, [r2, #0]
 8006d5c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	607b      	str	r3, [r7, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f1      	bne.n	8006d4e <mem_cpy+0x1a>
	}
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006d76:	b480      	push	{r7}
 8006d78:	b087      	sub	sp, #28
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	617a      	str	r2, [r7, #20]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	607b      	str	r3, [r7, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1f3      	bne.n	8006d86 <mem_set+0x10>
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006daa:	b480      	push	{r7}
 8006dac:	b089      	sub	sp, #36	; 0x24
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	61fb      	str	r3, [r7, #28]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	61fa      	str	r2, [r7, #28]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	61ba      	str	r2, [r7, #24]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	1acb      	subs	r3, r1, r3
 8006dd6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	607b      	str	r3, [r7, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <mem_cmp+0x40>
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0eb      	beq.n	8006dc2 <mem_cmp+0x18>

	return r;
 8006dea:	697b      	ldr	r3, [r7, #20]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3724      	adds	r7, #36	; 0x24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006e02:	e002      	b.n	8006e0a <chk_chr+0x12>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3301      	adds	r3, #1
 8006e08:	607b      	str	r3, [r7, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <chk_chr+0x26>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d1f2      	bne.n	8006e04 <chk_chr+0xc>
	return *str;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	781b      	ldrb	r3, [r3, #0]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
	...

08006e30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e029      	b.n	8006e98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006e44:	4a27      	ldr	r2, [pc, #156]	; (8006ee4 <chk_lock+0xb4>)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	4413      	add	r3, r2
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01d      	beq.n	8006e8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e52:	4a24      	ldr	r2, [pc, #144]	; (8006ee4 <chk_lock+0xb4>)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	4413      	add	r3, r2
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d116      	bne.n	8006e92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006e64:	4a1f      	ldr	r2, [pc, #124]	; (8006ee4 <chk_lock+0xb4>)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d10c      	bne.n	8006e92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e78:	4a1a      	ldr	r2, [pc, #104]	; (8006ee4 <chk_lock+0xb4>)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	4413      	add	r3, r2
 8006e80:	3308      	adds	r3, #8
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d102      	bne.n	8006e92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e8c:	e007      	b.n	8006e9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3301      	adds	r3, #1
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d9d2      	bls.n	8006e44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d109      	bne.n	8006eb8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d102      	bne.n	8006eb0 <chk_lock+0x80>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d101      	bne.n	8006eb4 <chk_lock+0x84>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e010      	b.n	8006ed6 <chk_lock+0xa6>
 8006eb4:	2312      	movs	r3, #18
 8006eb6:	e00e      	b.n	8006ed6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d108      	bne.n	8006ed0 <chk_lock+0xa0>
 8006ebe:	4a09      	ldr	r2, [pc, #36]	; (8006ee4 <chk_lock+0xb4>)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	4413      	add	r3, r2
 8006ec6:	330c      	adds	r3, #12
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ece:	d101      	bne.n	8006ed4 <chk_lock+0xa4>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	e000      	b.n	8006ed6 <chk_lock+0xa6>
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000080 	.word	0x20000080

08006ee8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	607b      	str	r3, [r7, #4]
 8006ef2:	e002      	b.n	8006efa <enq_lock+0x12>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	607b      	str	r3, [r7, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d806      	bhi.n	8006f0e <enq_lock+0x26>
 8006f00:	4a09      	ldr	r2, [pc, #36]	; (8006f28 <enq_lock+0x40>)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	4413      	add	r3, r2
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f2      	bne.n	8006ef4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	bf14      	ite	ne
 8006f14:	2301      	movne	r3, #1
 8006f16:	2300      	moveq	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	20000080 	.word	0x20000080

08006f2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	e01f      	b.n	8006f7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006f3c:	4a41      	ldr	r2, [pc, #260]	; (8007044 <inc_lock+0x118>)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	4413      	add	r3, r2
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d113      	bne.n	8006f76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006f4e:	4a3d      	ldr	r2, [pc, #244]	; (8007044 <inc_lock+0x118>)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	4413      	add	r3, r2
 8006f56:	3304      	adds	r3, #4
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d109      	bne.n	8006f76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006f62:	4a38      	ldr	r2, [pc, #224]	; (8007044 <inc_lock+0x118>)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	4413      	add	r3, r2
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d006      	beq.n	8006f84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d9dc      	bls.n	8006f3c <inc_lock+0x10>
 8006f82:	e000      	b.n	8006f86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006f84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d132      	bne.n	8006ff2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	e002      	b.n	8006f98 <inc_lock+0x6c>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d806      	bhi.n	8006fac <inc_lock+0x80>
 8006f9e:	4a29      	ldr	r2, [pc, #164]	; (8007044 <inc_lock+0x118>)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	4413      	add	r3, r2
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1f2      	bne.n	8006f92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d101      	bne.n	8006fb6 <inc_lock+0x8a>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e040      	b.n	8007038 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4922      	ldr	r1, [pc, #136]	; (8007044 <inc_lock+0x118>)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	440b      	add	r3, r1
 8006fc2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	491e      	ldr	r1, [pc, #120]	; (8007044 <inc_lock+0x118>)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	440b      	add	r3, r1
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	695a      	ldr	r2, [r3, #20]
 8006fd8:	491a      	ldr	r1, [pc, #104]	; (8007044 <inc_lock+0x118>)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	440b      	add	r3, r1
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006fe4:	4a17      	ldr	r2, [pc, #92]	; (8007044 <inc_lock+0x118>)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	4413      	add	r3, r2
 8006fec:	330c      	adds	r3, #12
 8006fee:	2200      	movs	r2, #0
 8006ff0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <inc_lock+0xe0>
 8006ff8:	4a12      	ldr	r2, [pc, #72]	; (8007044 <inc_lock+0x118>)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	4413      	add	r3, r2
 8007000:	330c      	adds	r3, #12
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <inc_lock+0xe0>
 8007008:	2300      	movs	r3, #0
 800700a:	e015      	b.n	8007038 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d108      	bne.n	8007024 <inc_lock+0xf8>
 8007012:	4a0c      	ldr	r2, [pc, #48]	; (8007044 <inc_lock+0x118>)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	4413      	add	r3, r2
 800701a:	330c      	adds	r3, #12
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	3301      	adds	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	e001      	b.n	8007028 <inc_lock+0xfc>
 8007024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007028:	4906      	ldr	r1, [pc, #24]	; (8007044 <inc_lock+0x118>)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	440b      	add	r3, r1
 8007030:	330c      	adds	r3, #12
 8007032:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3301      	adds	r3, #1
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	20000080 	.word	0x20000080

08007048 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3b01      	subs	r3, #1
 8007054:	607b      	str	r3, [r7, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d825      	bhi.n	80070a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800705c:	4a17      	ldr	r2, [pc, #92]	; (80070bc <dec_lock+0x74>)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	4413      	add	r3, r2
 8007064:	330c      	adds	r3, #12
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800706a:	89fb      	ldrh	r3, [r7, #14]
 800706c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007070:	d101      	bne.n	8007076 <dec_lock+0x2e>
 8007072:	2300      	movs	r3, #0
 8007074:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007076:	89fb      	ldrh	r3, [r7, #14]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <dec_lock+0x3a>
 800707c:	89fb      	ldrh	r3, [r7, #14]
 800707e:	3b01      	subs	r3, #1
 8007080:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007082:	4a0e      	ldr	r2, [pc, #56]	; (80070bc <dec_lock+0x74>)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	4413      	add	r3, r2
 800708a:	330c      	adds	r3, #12
 800708c:	89fa      	ldrh	r2, [r7, #14]
 800708e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007090:	89fb      	ldrh	r3, [r7, #14]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d105      	bne.n	80070a2 <dec_lock+0x5a>
 8007096:	4a09      	ldr	r2, [pc, #36]	; (80070bc <dec_lock+0x74>)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	4413      	add	r3, r2
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	737b      	strb	r3, [r7, #13]
 80070a6:	e001      	b.n	80070ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80070a8:	2302      	movs	r3, #2
 80070aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80070ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20000080 	.word	0x20000080

080070c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	e010      	b.n	80070f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80070ce:	4a0d      	ldr	r2, [pc, #52]	; (8007104 <clear_lock+0x44>)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	4413      	add	r3, r2
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d105      	bne.n	80070ea <clear_lock+0x2a>
 80070de:	4a09      	ldr	r2, [pc, #36]	; (8007104 <clear_lock+0x44>)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	4413      	add	r3, r2
 80070e6:	2200      	movs	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3301      	adds	r3, #1
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d9eb      	bls.n	80070ce <clear_lock+0xe>
	}
}
 80070f6:	bf00      	nop
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000080 	.word	0x20000080

08007108 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	78db      	ldrb	r3, [r3, #3]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d034      	beq.n	8007186 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	7858      	ldrb	r0, [r3, #1]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800712c:	2301      	movs	r3, #1
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	f7ff fd40 	bl	8006bb4 <disk_write>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <sync_window+0x38>
			res = FR_DISK_ERR;
 800713a:	2301      	movs	r3, #1
 800713c:	73fb      	strb	r3, [r7, #15]
 800713e:	e022      	b.n	8007186 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	1ad2      	subs	r2, r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	429a      	cmp	r2, r3
 8007154:	d217      	bcs.n	8007186 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	789b      	ldrb	r3, [r3, #2]
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	e010      	b.n	8007180 <sync_window+0x78>
					wsect += fs->fsize;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4413      	add	r3, r2
 8007166:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	7858      	ldrb	r0, [r3, #1]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007172:	2301      	movs	r3, #1
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	f7ff fd1d 	bl	8006bb4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	3b01      	subs	r3, #1
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d8eb      	bhi.n	800715e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007186:	7bfb      	ldrb	r3, [r7, #15]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d01b      	beq.n	80071e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff ffad 	bl	8007108 <sync_window>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d113      	bne.n	80071e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	7858      	ldrb	r0, [r3, #1]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071c2:	2301      	movs	r3, #1
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	f7ff fcd5 	bl	8006b74 <disk_read>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80071d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff ff87 	bl	8007108 <sync_window>
 80071fa:	4603      	mov	r3, r0
 80071fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d158      	bne.n	80072b6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d148      	bne.n	800729e <sync_fs+0xb2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	791b      	ldrb	r3, [r3, #4]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d144      	bne.n	800729e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3330      	adds	r3, #48	; 0x30
 8007218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800721c:	2100      	movs	r1, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff fda9 	bl	8006d76 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3330      	adds	r3, #48	; 0x30
 8007228:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800722c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff fd38 	bl	8006ca6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3330      	adds	r3, #48	; 0x30
 800723a:	4921      	ldr	r1, [pc, #132]	; (80072c0 <sync_fs+0xd4>)
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fd4d 	bl	8006cdc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3330      	adds	r3, #48	; 0x30
 8007246:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800724a:	491e      	ldr	r1, [pc, #120]	; (80072c4 <sync_fs+0xd8>)
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff fd45 	bl	8006cdc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3330      	adds	r3, #48	; 0x30
 8007256:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f7ff fd3b 	bl	8006cdc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3330      	adds	r3, #48	; 0x30
 800726a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f7ff fd31 	bl	8006cdc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	7858      	ldrb	r0, [r3, #1]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007292:	2301      	movs	r3, #1
 8007294:	f7ff fc8e 	bl	8006bb4 <disk_write>
			fs->fsi_flag = 0;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	785b      	ldrb	r3, [r3, #1]
 80072a2:	2200      	movs	r2, #0
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff fca4 	bl	8006bf4 <disk_ioctl>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <sync_fs+0xca>
 80072b2:	2301      	movs	r3, #1
 80072b4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	41615252 	.word	0x41615252
 80072c4:	61417272 	.word	0x61417272

080072c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	3b02      	subs	r3, #2
 80072d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	3b02      	subs	r3, #2
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d301      	bcc.n	80072e8 <clust2sect+0x20>
 80072e4:	2300      	movs	r3, #0
 80072e6:	e008      	b.n	80072fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	895b      	ldrh	r3, [r3, #10]
 80072ec:	461a      	mov	r2, r3
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	fb03 f202 	mul.w	r2, r3, r2
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	4413      	add	r3, r2
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b086      	sub	sp, #24
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d904      	bls.n	8007326 <get_fat+0x20>
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d302      	bcc.n	800732c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007326:	2301      	movs	r3, #1
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	e08c      	b.n	8007446 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800732c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007330:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d045      	beq.n	80073c6 <get_fat+0xc0>
 800733a:	2b03      	cmp	r3, #3
 800733c:	d05d      	beq.n	80073fa <get_fat+0xf4>
 800733e:	2b01      	cmp	r3, #1
 8007340:	d177      	bne.n	8007432 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	085b      	lsrs	r3, r3, #1
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4413      	add	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	6a1a      	ldr	r2, [r3, #32]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	0a5b      	lsrs	r3, r3, #9
 8007358:	4413      	add	r3, r2
 800735a:	4619      	mov	r1, r3
 800735c:	6938      	ldr	r0, [r7, #16]
 800735e:	f7ff ff17 	bl	8007190 <move_window>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d167      	bne.n	8007438 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	60fa      	str	r2, [r7, #12]
 800736e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4413      	add	r3, r2
 8007376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800737a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	6a1a      	ldr	r2, [r3, #32]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	0a5b      	lsrs	r3, r3, #9
 8007384:	4413      	add	r3, r2
 8007386:	4619      	mov	r1, r3
 8007388:	6938      	ldr	r0, [r7, #16]
 800738a:	f7ff ff01 	bl	8007190 <move_window>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d153      	bne.n	800743c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4413      	add	r3, r2
 800739e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	461a      	mov	r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <get_fat+0xb6>
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	091b      	lsrs	r3, r3, #4
 80073ba:	e002      	b.n	80073c2 <get_fat+0xbc>
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073c2:	617b      	str	r3, [r7, #20]
			break;
 80073c4:	e03f      	b.n	8007446 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	6a1a      	ldr	r2, [r3, #32]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	0a1b      	lsrs	r3, r3, #8
 80073ce:	4413      	add	r3, r2
 80073d0:	4619      	mov	r1, r3
 80073d2:	6938      	ldr	r0, [r7, #16]
 80073d4:	f7ff fedc 	bl	8007190 <move_window>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d130      	bne.n	8007440 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80073ec:	4413      	add	r3, r2
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff fc1e 	bl	8006c30 <ld_word>
 80073f4:	4603      	mov	r3, r0
 80073f6:	617b      	str	r3, [r7, #20]
			break;
 80073f8:	e025      	b.n	8007446 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	6a1a      	ldr	r2, [r3, #32]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	09db      	lsrs	r3, r3, #7
 8007402:	4413      	add	r3, r2
 8007404:	4619      	mov	r1, r3
 8007406:	6938      	ldr	r0, [r7, #16]
 8007408:	f7ff fec2 	bl	8007190 <move_window>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d118      	bne.n	8007444 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007420:	4413      	add	r3, r2
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff fc1c 	bl	8006c60 <ld_dword>
 8007428:	4603      	mov	r3, r0
 800742a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800742e:	617b      	str	r3, [r7, #20]
			break;
 8007430:	e009      	b.n	8007446 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007432:	2301      	movs	r3, #1
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	e006      	b.n	8007446 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007438:	bf00      	nop
 800743a:	e004      	b.n	8007446 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800743c:	bf00      	nop
 800743e:	e002      	b.n	8007446 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007440:	bf00      	nop
 8007442:	e000      	b.n	8007446 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007444:	bf00      	nop
		}
	}

	return val;
 8007446:	697b      	ldr	r3, [r7, #20]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007450:	b590      	push	{r4, r7, lr}
 8007452:	b089      	sub	sp, #36	; 0x24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800745c:	2302      	movs	r3, #2
 800745e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b01      	cmp	r3, #1
 8007464:	f240 80d6 	bls.w	8007614 <put_fat+0x1c4>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	429a      	cmp	r2, r3
 8007470:	f080 80d0 	bcs.w	8007614 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d073      	beq.n	8007564 <put_fat+0x114>
 800747c:	2b03      	cmp	r3, #3
 800747e:	f000 8091 	beq.w	80075a4 <put_fat+0x154>
 8007482:	2b01      	cmp	r3, #1
 8007484:	f040 80c6 	bne.w	8007614 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	61bb      	str	r3, [r7, #24]
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	085b      	lsrs	r3, r3, #1
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	4413      	add	r3, r2
 8007494:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1a      	ldr	r2, [r3, #32]
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	0a5b      	lsrs	r3, r3, #9
 800749e:	4413      	add	r3, r2
 80074a0:	4619      	mov	r1, r3
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7ff fe74 	bl	8007190 <move_window>
 80074a8:	4603      	mov	r3, r0
 80074aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074ac:	7ffb      	ldrb	r3, [r7, #31]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f040 80a9 	bne.w	8007606 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	1c59      	adds	r1, r3, #1
 80074be:	61b9      	str	r1, [r7, #24]
 80074c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c4:	4413      	add	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00d      	beq.n	80074ee <put_fat+0x9e>
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b25b      	sxtb	r3, r3
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	b25a      	sxtb	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	4313      	orrs	r3, r2
 80074e8:	b25b      	sxtb	r3, r3
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	e001      	b.n	80074f2 <put_fat+0xa2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2201      	movs	r2, #1
 80074fa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a1a      	ldr	r2, [r3, #32]
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	0a5b      	lsrs	r3, r3, #9
 8007504:	4413      	add	r3, r2
 8007506:	4619      	mov	r1, r3
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f7ff fe41 	bl	8007190 <move_window>
 800750e:	4603      	mov	r3, r0
 8007510:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007512:	7ffb      	ldrb	r3, [r7, #31]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d178      	bne.n	800760a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007524:	4413      	add	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <put_fat+0xea>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	091b      	lsrs	r3, r3, #4
 8007536:	b2db      	uxtb	r3, r3
 8007538:	e00e      	b.n	8007558 <put_fat+0x108>
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	b25b      	sxtb	r3, r3
 8007540:	f023 030f 	bic.w	r3, r3, #15
 8007544:	b25a      	sxtb	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	b25b      	sxtb	r3, r3
 800754c:	f003 030f 	and.w	r3, r3, #15
 8007550:	b25b      	sxtb	r3, r3
 8007552:	4313      	orrs	r3, r2
 8007554:	b25b      	sxtb	r3, r3
 8007556:	b2db      	uxtb	r3, r3
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	70da      	strb	r2, [r3, #3]
			break;
 8007562:	e057      	b.n	8007614 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1a      	ldr	r2, [r3, #32]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	0a1b      	lsrs	r3, r3, #8
 800756c:	4413      	add	r3, r2
 800756e:	4619      	mov	r1, r3
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7ff fe0d 	bl	8007190 <move_window>
 8007576:	4603      	mov	r3, r0
 8007578:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800757a:	7ffb      	ldrb	r3, [r7, #31]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d146      	bne.n	800760e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800758e:	4413      	add	r3, r2
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	b292      	uxth	r2, r2
 8007594:	4611      	mov	r1, r2
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff fb85 	bl	8006ca6 <st_word>
			fs->wflag = 1;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	70da      	strb	r2, [r3, #3]
			break;
 80075a2:	e037      	b.n	8007614 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a1a      	ldr	r2, [r3, #32]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	09db      	lsrs	r3, r3, #7
 80075ac:	4413      	add	r3, r2
 80075ae:	4619      	mov	r1, r3
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f7ff fded 	bl	8007190 <move_window>
 80075b6:	4603      	mov	r3, r0
 80075b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075ba:	7ffb      	ldrb	r3, [r7, #31]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d128      	bne.n	8007612 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80075d4:	4413      	add	r3, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fb42 	bl	8006c60 <ld_dword>
 80075dc:	4603      	mov	r3, r0
 80075de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80075e2:	4323      	orrs	r3, r4
 80075e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80075f4:	4413      	add	r3, r2
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff fb6f 	bl	8006cdc <st_dword>
			fs->wflag = 1;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	70da      	strb	r2, [r3, #3]
			break;
 8007604:	e006      	b.n	8007614 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007606:	bf00      	nop
 8007608:	e004      	b.n	8007614 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800760a:	bf00      	nop
 800760c:	e002      	b.n	8007614 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800760e:	bf00      	nop
 8007610:	e000      	b.n	8007614 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007612:	bf00      	nop
		}
	}
	return res;
 8007614:	7ffb      	ldrb	r3, [r7, #31]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3724      	adds	r7, #36	; 0x24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd90      	pop	{r4, r7, pc}

0800761e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b088      	sub	sp, #32
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d904      	bls.n	8007644 <remove_chain+0x26>
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	429a      	cmp	r2, r3
 8007642:	d301      	bcc.n	8007648 <remove_chain+0x2a>
 8007644:	2302      	movs	r3, #2
 8007646:	e04b      	b.n	80076e0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00c      	beq.n	8007668 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800764e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	69b8      	ldr	r0, [r7, #24]
 8007656:	f7ff fefb 	bl	8007450 <put_fat>
 800765a:	4603      	mov	r3, r0
 800765c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800765e:	7ffb      	ldrb	r3, [r7, #31]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <remove_chain+0x4a>
 8007664:	7ffb      	ldrb	r3, [r7, #31]
 8007666:	e03b      	b.n	80076e0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007668:	68b9      	ldr	r1, [r7, #8]
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff fe4b 	bl	8007306 <get_fat>
 8007670:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d031      	beq.n	80076dc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <remove_chain+0x64>
 800767e:	2302      	movs	r3, #2
 8007680:	e02e      	b.n	80076e0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007688:	d101      	bne.n	800768e <remove_chain+0x70>
 800768a:	2301      	movs	r3, #1
 800768c:	e028      	b.n	80076e0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800768e:	2200      	movs	r2, #0
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	69b8      	ldr	r0, [r7, #24]
 8007694:	f7ff fedc 	bl	8007450 <put_fat>
 8007698:	4603      	mov	r3, r0
 800769a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800769c:	7ffb      	ldrb	r3, [r7, #31]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <remove_chain+0x88>
 80076a2:	7ffb      	ldrb	r3, [r7, #31]
 80076a4:	e01c      	b.n	80076e0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	3b02      	subs	r3, #2
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d20b      	bcs.n	80076cc <remove_chain+0xae>
			fs->free_clst++;
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	791b      	ldrb	r3, [r3, #4]
 80076c2:	f043 0301 	orr.w	r3, r3, #1
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d3c6      	bcc.n	8007668 <remove_chain+0x4a>
 80076da:	e000      	b.n	80076de <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80076dc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3720      	adds	r7, #32
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10d      	bne.n	800771a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <create_chain+0x2c>
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	429a      	cmp	r2, r3
 8007712:	d31b      	bcc.n	800774c <create_chain+0x64>
 8007714:	2301      	movs	r3, #1
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	e018      	b.n	800774c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff fdf2 	bl	8007306 <get_fat>
 8007722:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d801      	bhi.n	800772e <create_chain+0x46>
 800772a:	2301      	movs	r3, #1
 800772c:	e070      	b.n	8007810 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007734:	d101      	bne.n	800773a <create_chain+0x52>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	e06a      	b.n	8007810 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	429a      	cmp	r2, r3
 8007742:	d201      	bcs.n	8007748 <create_chain+0x60>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	e063      	b.n	8007810 <create_chain+0x128>
		scl = clst;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	3301      	adds	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	429a      	cmp	r2, r3
 800775e:	d307      	bcc.n	8007770 <create_chain+0x88>
				ncl = 2;
 8007760:	2302      	movs	r3, #2
 8007762:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	429a      	cmp	r2, r3
 800776a:	d901      	bls.n	8007770 <create_chain+0x88>
 800776c:	2300      	movs	r3, #0
 800776e:	e04f      	b.n	8007810 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007770:	69f9      	ldr	r1, [r7, #28]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fdc7 	bl	8007306 <get_fat>
 8007778:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00e      	beq.n	800779e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d003      	beq.n	800778e <create_chain+0xa6>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800778c:	d101      	bne.n	8007792 <create_chain+0xaa>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	e03e      	b.n	8007810 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007792:	69fa      	ldr	r2, [r7, #28]
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	429a      	cmp	r2, r3
 8007798:	d1da      	bne.n	8007750 <create_chain+0x68>
 800779a:	2300      	movs	r3, #0
 800779c:	e038      	b.n	8007810 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800779e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80077a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077a4:	69f9      	ldr	r1, [r7, #28]
 80077a6:	6938      	ldr	r0, [r7, #16]
 80077a8:	f7ff fe52 	bl	8007450 <put_fat>
 80077ac:	4603      	mov	r3, r0
 80077ae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <create_chain+0xe2>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d006      	beq.n	80077ca <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6938      	ldr	r0, [r7, #16]
 80077c2:	f7ff fe45 	bl	8007450 <put_fat>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d116      	bne.n	80077fe <create_chain+0x116>
		fs->last_clst = ncl;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	691a      	ldr	r2, [r3, #16]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	3b02      	subs	r3, #2
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d804      	bhi.n	80077ee <create_chain+0x106>
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	1e5a      	subs	r2, r3, #1
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	791b      	ldrb	r3, [r3, #4]
 80077f2:	f043 0301 	orr.w	r3, r3, #1
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	711a      	strb	r2, [r3, #4]
 80077fc:	e007      	b.n	800780e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d102      	bne.n	800780a <create_chain+0x122>
 8007804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007808:	e000      	b.n	800780c <create_chain+0x124>
 800780a:	2301      	movs	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800780e:	69fb      	ldr	r3, [r7, #28]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3720      	adds	r7, #32
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	3304      	adds	r3, #4
 800782e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	0a5b      	lsrs	r3, r3, #9
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	8952      	ldrh	r2, [r2, #10]
 8007838:	fbb3 f3f2 	udiv	r3, r3, r2
 800783c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1d1a      	adds	r2, r3, #4
 8007842:	613a      	str	r2, [r7, #16]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <clmt_clust+0x3a>
 800784e:	2300      	movs	r3, #0
 8007850:	e010      	b.n	8007874 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	429a      	cmp	r2, r3
 8007858:	d307      	bcc.n	800786a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	3304      	adds	r3, #4
 8007866:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007868:	e7e9      	b.n	800783e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800786a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	4413      	add	r3, r2
}
 8007874:	4618      	mov	r0, r3
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007896:	d204      	bcs.n	80078a2 <dir_sdi+0x22>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80078a2:	2302      	movs	r3, #2
 80078a4:	e063      	b.n	800796e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d106      	bne.n	80078c6 <dir_sdi+0x46>
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d902      	bls.n	80078c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10c      	bne.n	80078e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	095b      	lsrs	r3, r3, #5
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	8912      	ldrh	r2, [r2, #8]
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d301      	bcc.n	80078dc <dir_sdi+0x5c>
 80078d8:	2302      	movs	r3, #2
 80078da:	e048      	b.n	800796e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	61da      	str	r2, [r3, #28]
 80078e4:	e029      	b.n	800793a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	895b      	ldrh	r3, [r3, #10]
 80078ea:	025b      	lsls	r3, r3, #9
 80078ec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80078ee:	e019      	b.n	8007924 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6979      	ldr	r1, [r7, #20]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff fd06 	bl	8007306 <get_fat>
 80078fa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007902:	d101      	bne.n	8007908 <dir_sdi+0x88>
 8007904:	2301      	movs	r3, #1
 8007906:	e032      	b.n	800796e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d904      	bls.n	8007918 <dir_sdi+0x98>
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	429a      	cmp	r2, r3
 8007916:	d301      	bcc.n	800791c <dir_sdi+0x9c>
 8007918:	2302      	movs	r3, #2
 800791a:	e028      	b.n	800796e <dir_sdi+0xee>
			ofs -= csz;
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	429a      	cmp	r2, r3
 800792a:	d2e1      	bcs.n	80078f0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800792c:	6979      	ldr	r1, [r7, #20]
 800792e:	6938      	ldr	r0, [r7, #16]
 8007930:	f7ff fcca 	bl	80072c8 <clust2sect>
 8007934:	4602      	mov	r2, r0
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <dir_sdi+0xcc>
 8007948:	2302      	movs	r3, #2
 800794a:	e010      	b.n	800796e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	69da      	ldr	r2, [r3, #28]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	0a5b      	lsrs	r3, r3, #9
 8007954:	441a      	add	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007966:	441a      	add	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b086      	sub	sp, #24
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	3320      	adds	r3, #32
 800798c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <dir_next+0x28>
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800799c:	d301      	bcc.n	80079a2 <dir_next+0x2c>
 800799e:	2304      	movs	r3, #4
 80079a0:	e0aa      	b.n	8007af8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f040 8098 	bne.w	8007ade <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10b      	bne.n	80079d8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	8912      	ldrh	r2, [r2, #8]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	f0c0 8088 	bcc.w	8007ade <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	61da      	str	r2, [r3, #28]
 80079d4:	2304      	movs	r3, #4
 80079d6:	e08f      	b.n	8007af8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	0a5b      	lsrs	r3, r3, #9
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	8952      	ldrh	r2, [r2, #10]
 80079e0:	3a01      	subs	r2, #1
 80079e2:	4013      	ands	r3, r2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d17a      	bne.n	8007ade <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f7ff fc88 	bl	8007306 <get_fat>
 80079f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d801      	bhi.n	8007a02 <dir_next+0x8c>
 80079fe:	2302      	movs	r3, #2
 8007a00:	e07a      	b.n	8007af8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a08:	d101      	bne.n	8007a0e <dir_next+0x98>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e074      	b.n	8007af8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d358      	bcc.n	8007aca <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d104      	bne.n	8007a28 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	61da      	str	r2, [r3, #28]
 8007a24:	2304      	movs	r3, #4
 8007a26:	e067      	b.n	8007af8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4610      	mov	r0, r2
 8007a32:	f7ff fe59 	bl	80076e8 <create_chain>
 8007a36:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <dir_next+0xcc>
 8007a3e:	2307      	movs	r3, #7
 8007a40:	e05a      	b.n	8007af8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <dir_next+0xd6>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e055      	b.n	8007af8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a52:	d101      	bne.n	8007a58 <dir_next+0xe2>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e04f      	b.n	8007af8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff fb55 	bl	8007108 <sync_window>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <dir_next+0xf2>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e047      	b.n	8007af8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3330      	adds	r3, #48	; 0x30
 8007a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a70:	2100      	movs	r1, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff f97f 	bl	8006d76 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a78:	2300      	movs	r3, #0
 8007a7a:	613b      	str	r3, [r7, #16]
 8007a7c:	6979      	ldr	r1, [r7, #20]
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f7ff fc22 	bl	80072c8 <clust2sect>
 8007a84:	4602      	mov	r2, r0
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a8a:	e012      	b.n	8007ab2 <dir_next+0x13c>
						fs->wflag = 1;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f7ff fb38 	bl	8007108 <sync_window>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <dir_next+0x12c>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e02a      	b.n	8007af8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	613b      	str	r3, [r7, #16]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	895b      	ldrh	r3, [r3, #10]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d3e6      	bcc.n	8007a8c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	1ad2      	subs	r2, r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007ad0:	6979      	ldr	r1, [r7, #20]
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff fbf8 	bl	80072c8 <clust2sect>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af0:	441a      	add	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007b10:	2100      	movs	r1, #0
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7ff feb4 	bl	8007880 <dir_sdi>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d12b      	bne.n	8007b7a <dir_alloc+0x7a>
		n = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff fb2f 	bl	8007190 <move_window>
 8007b32:	4603      	mov	r3, r0
 8007b34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d11d      	bne.n	8007b78 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	2be5      	cmp	r3, #229	; 0xe5
 8007b44:	d004      	beq.n	8007b50 <dir_alloc+0x50>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d107      	bne.n	8007b60 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	3301      	adds	r3, #1
 8007b54:	613b      	str	r3, [r7, #16]
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d102      	bne.n	8007b64 <dir_alloc+0x64>
 8007b5e:	e00c      	b.n	8007b7a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007b60:	2300      	movs	r3, #0
 8007b62:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007b64:	2101      	movs	r1, #1
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff ff05 	bl	8007976 <dir_next>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0d7      	beq.n	8007b26 <dir_alloc+0x26>
 8007b76:	e000      	b.n	8007b7a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007b78:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d101      	bne.n	8007b84 <dir_alloc+0x84>
 8007b80:	2307      	movs	r3, #7
 8007b82:	75fb      	strb	r3, [r7, #23]
	return res;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	331a      	adds	r3, #26
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff f847 	bl	8006c30 <ld_word>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d109      	bne.n	8007bc2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	3314      	adds	r3, #20
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff f83c 	bl	8006c30 <ld_word>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	041b      	lsls	r3, r3, #16
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	331a      	adds	r3, #26
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	b292      	uxth	r2, r2
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7ff f85f 	bl	8006ca6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d109      	bne.n	8007c04 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f103 0214 	add.w	r2, r3, #20
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	0c1b      	lsrs	r3, r3, #16
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f7ff f851 	bl	8006ca6 <st_word>
	}
}
 8007c04:	bf00      	nop
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff fe2f 	bl	8007880 <dir_sdi>
 8007c22:	4603      	mov	r3, r0
 8007c24:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <dir_find+0x24>
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	e03e      	b.n	8007cae <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	4619      	mov	r1, r3
 8007c36:	6938      	ldr	r0, [r7, #16]
 8007c38:	f7ff faaa 	bl	8007190 <move_window>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d12f      	bne.n	8007ca6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d102      	bne.n	8007c5a <dir_find+0x4e>
 8007c54:	2304      	movs	r3, #4
 8007c56:	75fb      	strb	r3, [r7, #23]
 8007c58:	e028      	b.n	8007cac <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	330b      	adds	r3, #11
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	330b      	adds	r3, #11
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	f003 0308 	and.w	r3, r3, #8
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <dir_find+0x86>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a18      	ldr	r0, [r3, #32]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3324      	adds	r3, #36	; 0x24
 8007c84:	220b      	movs	r2, #11
 8007c86:	4619      	mov	r1, r3
 8007c88:	f7ff f88f 	bl	8006daa <mem_cmp>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00b      	beq.n	8007caa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007c92:	2100      	movs	r1, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff fe6e 	bl	8007976 <dir_next>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0c5      	beq.n	8007c30 <dir_find+0x24>
 8007ca4:	e002      	b.n	8007cac <dir_find+0xa0>
		if (res != FR_OK) break;
 8007ca6:	bf00      	nop
 8007ca8:	e000      	b.n	8007cac <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007caa:	bf00      	nop

	return res;
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7ff ff1a 	bl	8007b00 <dir_alloc>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d11c      	bne.n	8007d10 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	68b8      	ldr	r0, [r7, #8]
 8007cde:	f7ff fa57 	bl	8007190 <move_window>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d111      	bne.n	8007d10 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff f83e 	bl	8006d76 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a18      	ldr	r0, [r3, #32]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3324      	adds	r3, #36	; 0x24
 8007d02:	220b      	movs	r2, #11
 8007d04:	4619      	mov	r1, r3
 8007d06:	f7ff f815 	bl	8006d34 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3324      	adds	r3, #36	; 0x24
 8007d30:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007d32:	220b      	movs	r2, #11
 8007d34:	2120      	movs	r1, #32
 8007d36:	68b8      	ldr	r0, [r7, #8]
 8007d38:	f7ff f81d 	bl	8006d76 <mem_set>
	si = i = 0; ni = 8;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	613b      	str	r3, [r7, #16]
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	2308      	movs	r3, #8
 8007d46:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	617a      	str	r2, [r7, #20]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007d56:	7ffb      	ldrb	r3, [r7, #31]
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d94e      	bls.n	8007dfa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007d5c:	7ffb      	ldrb	r3, [r7, #31]
 8007d5e:	2b2f      	cmp	r3, #47	; 0x2f
 8007d60:	d006      	beq.n	8007d70 <create_name+0x54>
 8007d62:	7ffb      	ldrb	r3, [r7, #31]
 8007d64:	2b5c      	cmp	r3, #92	; 0x5c
 8007d66:	d110      	bne.n	8007d8a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d68:	e002      	b.n	8007d70 <create_name+0x54>
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	4413      	add	r3, r2
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b2f      	cmp	r3, #47	; 0x2f
 8007d7a:	d0f6      	beq.n	8007d6a <create_name+0x4e>
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	4413      	add	r3, r2
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b5c      	cmp	r3, #92	; 0x5c
 8007d86:	d0f0      	beq.n	8007d6a <create_name+0x4e>
			break;
 8007d88:	e038      	b.n	8007dfc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007d8a:	7ffb      	ldrb	r3, [r7, #31]
 8007d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d8e:	d003      	beq.n	8007d98 <create_name+0x7c>
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d30c      	bcc.n	8007db2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b0b      	cmp	r3, #11
 8007d9c:	d002      	beq.n	8007da4 <create_name+0x88>
 8007d9e:	7ffb      	ldrb	r3, [r7, #31]
 8007da0:	2b2e      	cmp	r3, #46	; 0x2e
 8007da2:	d001      	beq.n	8007da8 <create_name+0x8c>
 8007da4:	2306      	movs	r3, #6
 8007da6:	e044      	b.n	8007e32 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007da8:	2308      	movs	r3, #8
 8007daa:	613b      	str	r3, [r7, #16]
 8007dac:	230b      	movs	r3, #11
 8007dae:	61bb      	str	r3, [r7, #24]
			continue;
 8007db0:	e022      	b.n	8007df8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007db2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	da04      	bge.n	8007dc4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007dba:	7ffb      	ldrb	r3, [r7, #31]
 8007dbc:	3b80      	subs	r3, #128	; 0x80
 8007dbe:	4a1f      	ldr	r2, [pc, #124]	; (8007e3c <create_name+0x120>)
 8007dc0:	5cd3      	ldrb	r3, [r2, r3]
 8007dc2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007dc4:	7ffb      	ldrb	r3, [r7, #31]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	481d      	ldr	r0, [pc, #116]	; (8007e40 <create_name+0x124>)
 8007dca:	f7ff f815 	bl	8006df8 <chk_chr>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <create_name+0xbc>
 8007dd4:	2306      	movs	r3, #6
 8007dd6:	e02c      	b.n	8007e32 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007dd8:	7ffb      	ldrb	r3, [r7, #31]
 8007dda:	2b60      	cmp	r3, #96	; 0x60
 8007ddc:	d905      	bls.n	8007dea <create_name+0xce>
 8007dde:	7ffb      	ldrb	r3, [r7, #31]
 8007de0:	2b7a      	cmp	r3, #122	; 0x7a
 8007de2:	d802      	bhi.n	8007dea <create_name+0xce>
 8007de4:	7ffb      	ldrb	r3, [r7, #31]
 8007de6:	3b20      	subs	r3, #32
 8007de8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	613a      	str	r2, [r7, #16]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	4413      	add	r3, r2
 8007df4:	7ffa      	ldrb	r2, [r7, #31]
 8007df6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007df8:	e7a6      	b.n	8007d48 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007dfa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	441a      	add	r2, r3
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <create_name+0xf4>
 8007e0c:	2306      	movs	r3, #6
 8007e0e:	e010      	b.n	8007e32 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2be5      	cmp	r3, #229	; 0xe5
 8007e16:	d102      	bne.n	8007e1e <create_name+0x102>
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2205      	movs	r2, #5
 8007e1c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e1e:	7ffb      	ldrb	r3, [r7, #31]
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	d801      	bhi.n	8007e28 <create_name+0x10c>
 8007e24:	2204      	movs	r2, #4
 8007e26:	e000      	b.n	8007e2a <create_name+0x10e>
 8007e28:	2200      	movs	r2, #0
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	330b      	adds	r3, #11
 8007e2e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007e30:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	08009480 	.word	0x08009480
 8007e40:	080091a4 	.word	0x080091a4

08007e44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007e58:	e002      	b.n	8007e60 <follow_path+0x1c>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2b2f      	cmp	r3, #47	; 0x2f
 8007e66:	d0f8      	beq.n	8007e5a <follow_path+0x16>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b5c      	cmp	r3, #92	; 0x5c
 8007e6e:	d0f4      	beq.n	8007e5a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2200      	movs	r2, #0
 8007e74:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b1f      	cmp	r3, #31
 8007e7c:	d80a      	bhi.n	8007e94 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2280      	movs	r2, #128	; 0x80
 8007e82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e86:	2100      	movs	r1, #0
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff fcf9 	bl	8007880 <dir_sdi>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	75fb      	strb	r3, [r7, #23]
 8007e92:	e043      	b.n	8007f1c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e94:	463b      	mov	r3, r7
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff ff3f 	bl	8007d1c <create_name>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d134      	bne.n	8007f12 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff feaf 	bl	8007c0c <dir_find>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007eb8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	d127      	bne.n	8007f16 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ec6:	7afb      	ldrb	r3, [r7, #11]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d122      	bne.n	8007f16 <follow_path+0xd2>
 8007ed0:	2305      	movs	r3, #5
 8007ed2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007ed4:	e01f      	b.n	8007f16 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ed6:	7afb      	ldrb	r3, [r7, #11]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d11c      	bne.n	8007f1a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	799b      	ldrb	r3, [r3, #6]
 8007ee4:	f003 0310 	and.w	r3, r3, #16
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d102      	bne.n	8007ef2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007eec:	2305      	movs	r3, #5
 8007eee:	75fb      	strb	r3, [r7, #23]
 8007ef0:	e014      	b.n	8007f1c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f00:	4413      	add	r3, r2
 8007f02:	4619      	mov	r1, r3
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7ff fe42 	bl	8007b8e <ld_clust>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f10:	e7c0      	b.n	8007e94 <follow_path+0x50>
			if (res != FR_OK) break;
 8007f12:	bf00      	nop
 8007f14:	e002      	b.n	8007f1c <follow_path+0xd8>
				break;
 8007f16:	bf00      	nop
 8007f18:	e000      	b.n	8007f1c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f1a:	bf00      	nop
			}
		}
	}

	return res;
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b087      	sub	sp, #28
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f32:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d031      	beq.n	8007fa0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	617b      	str	r3, [r7, #20]
 8007f42:	e002      	b.n	8007f4a <get_ldnumber+0x24>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	3301      	adds	r3, #1
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b20      	cmp	r3, #32
 8007f50:	d903      	bls.n	8007f5a <get_ldnumber+0x34>
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2b3a      	cmp	r3, #58	; 0x3a
 8007f58:	d1f4      	bne.n	8007f44 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b3a      	cmp	r3, #58	; 0x3a
 8007f60:	d11c      	bne.n	8007f9c <get_ldnumber+0x76>
			tp = *path;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	60fa      	str	r2, [r7, #12]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	3b30      	subs	r3, #48	; 0x30
 8007f72:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b09      	cmp	r3, #9
 8007f78:	d80e      	bhi.n	8007f98 <get_ldnumber+0x72>
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d10a      	bne.n	8007f98 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d107      	bne.n	8007f98 <get_ldnumber+0x72>
					vol = (int)i;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	e002      	b.n	8007fa2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007fa0:	693b      	ldr	r3, [r7, #16]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
	...

08007fb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	70da      	strb	r2, [r3, #3]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fc6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff f8e0 	bl	8007190 <move_window>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <check_fs+0x2a>
 8007fd6:	2304      	movs	r3, #4
 8007fd8:	e038      	b.n	800804c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3330      	adds	r3, #48	; 0x30
 8007fde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe fe24 	bl	8006c30 <ld_word>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	461a      	mov	r2, r3
 8007fec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d001      	beq.n	8007ff8 <check_fs+0x48>
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e029      	b.n	800804c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ffe:	2be9      	cmp	r3, #233	; 0xe9
 8008000:	d009      	beq.n	8008016 <check_fs+0x66>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008008:	2beb      	cmp	r3, #235	; 0xeb
 800800a:	d11e      	bne.n	800804a <check_fs+0x9a>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008012:	2b90      	cmp	r3, #144	; 0x90
 8008014:	d119      	bne.n	800804a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3330      	adds	r3, #48	; 0x30
 800801a:	3336      	adds	r3, #54	; 0x36
 800801c:	4618      	mov	r0, r3
 800801e:	f7fe fe1f 	bl	8006c60 <ld_dword>
 8008022:	4603      	mov	r3, r0
 8008024:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008028:	4a0a      	ldr	r2, [pc, #40]	; (8008054 <check_fs+0xa4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d101      	bne.n	8008032 <check_fs+0x82>
 800802e:	2300      	movs	r3, #0
 8008030:	e00c      	b.n	800804c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3330      	adds	r3, #48	; 0x30
 8008036:	3352      	adds	r3, #82	; 0x52
 8008038:	4618      	mov	r0, r3
 800803a:	f7fe fe11 	bl	8006c60 <ld_dword>
 800803e:	4602      	mov	r2, r0
 8008040:	4b05      	ldr	r3, [pc, #20]	; (8008058 <check_fs+0xa8>)
 8008042:	429a      	cmp	r2, r3
 8008044:	d101      	bne.n	800804a <check_fs+0x9a>
 8008046:	2300      	movs	r3, #0
 8008048:	e000      	b.n	800804c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800804a:	2302      	movs	r3, #2
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	00544146 	.word	0x00544146
 8008058:	33544146 	.word	0x33544146

0800805c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b096      	sub	sp, #88	; 0x58
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff ff58 	bl	8007f26 <get_ldnumber>
 8008076:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807a:	2b00      	cmp	r3, #0
 800807c:	da01      	bge.n	8008082 <find_volume+0x26>
 800807e:	230b      	movs	r3, #11
 8008080:	e22e      	b.n	80084e0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008082:	4aa8      	ldr	r2, [pc, #672]	; (8008324 <find_volume+0x2c8>)
 8008084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800808a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <find_volume+0x3a>
 8008092:	230c      	movs	r3, #12
 8008094:	e224      	b.n	80084e0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800809a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	f023 0301 	bic.w	r3, r3, #1
 80080a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01a      	beq.n	80080e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe fd1f 	bl	8006af4 <disk_status>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80080bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10c      	bne.n	80080e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d007      	beq.n	80080de <find_volume+0x82>
 80080ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080d2:	f003 0304 	and.w	r3, r3, #4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80080da:	230a      	movs	r3, #10
 80080dc:	e200      	b.n	80084e0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80080de:	2300      	movs	r3, #0
 80080e0:	e1fe      	b.n	80084e0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80080e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	785b      	ldrb	r3, [r3, #1]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe fd17 	bl	8006b28 <disk_initialize>
 80080fa:	4603      	mov	r3, r0
 80080fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008100:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800810c:	2303      	movs	r3, #3
 800810e:	e1e7      	b.n	80084e0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d007      	beq.n	8008126 <find_volume+0xca>
 8008116:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008122:	230a      	movs	r3, #10
 8008124:	e1dc      	b.n	80084e0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800812a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800812c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800812e:	f7ff ff3f 	bl	8007fb0 <check_fs>
 8008132:	4603      	mov	r3, r0
 8008134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800813c:	2b02      	cmp	r3, #2
 800813e:	d14b      	bne.n	80081d8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008140:	2300      	movs	r3, #0
 8008142:	643b      	str	r3, [r7, #64]	; 0x40
 8008144:	e01f      	b.n	8008186 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800814c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008154:	4413      	add	r3, r2
 8008156:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	3304      	adds	r3, #4
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d006      	beq.n	8008170 <find_volume+0x114>
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	3308      	adds	r3, #8
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fd7a 	bl	8006c60 <ld_dword>
 800816c:	4602      	mov	r2, r0
 800816e:	e000      	b.n	8008172 <find_volume+0x116>
 8008170:	2200      	movs	r2, #0
 8008172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800817a:	440b      	add	r3, r1
 800817c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008182:	3301      	adds	r3, #1
 8008184:	643b      	str	r3, [r7, #64]	; 0x40
 8008186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008188:	2b03      	cmp	r3, #3
 800818a:	d9dc      	bls.n	8008146 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800818c:	2300      	movs	r3, #0
 800818e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <find_volume+0x140>
 8008196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008198:	3b01      	subs	r3, #1
 800819a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800819c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80081a4:	4413      	add	r3, r2
 80081a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80081aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80081ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <find_volume+0x162>
 80081b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081b6:	f7ff fefb 	bl	8007fb0 <check_fs>
 80081ba:	4603      	mov	r3, r0
 80081bc:	e000      	b.n	80081c0 <find_volume+0x164>
 80081be:	2303      	movs	r3, #3
 80081c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80081c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d905      	bls.n	80081d8 <find_volume+0x17c>
 80081cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ce:	3301      	adds	r3, #1
 80081d0:	643b      	str	r3, [r7, #64]	; 0x40
 80081d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d9e1      	bls.n	800819c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80081d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d101      	bne.n	80081e4 <find_volume+0x188>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e17d      	b.n	80084e0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80081e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d901      	bls.n	80081f0 <find_volume+0x194>
 80081ec:	230d      	movs	r3, #13
 80081ee:	e177      	b.n	80084e0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	3330      	adds	r3, #48	; 0x30
 80081f4:	330b      	adds	r3, #11
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe fd1a 	bl	8006c30 <ld_word>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008202:	d001      	beq.n	8008208 <find_volume+0x1ac>
 8008204:	230d      	movs	r3, #13
 8008206:	e16b      	b.n	80084e0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	3330      	adds	r3, #48	; 0x30
 800820c:	3316      	adds	r3, #22
 800820e:	4618      	mov	r0, r3
 8008210:	f7fe fd0e 	bl	8006c30 <ld_word>
 8008214:	4603      	mov	r3, r0
 8008216:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <find_volume+0x1d0>
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	3330      	adds	r3, #48	; 0x30
 8008222:	3324      	adds	r3, #36	; 0x24
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fd1b 	bl	8006c60 <ld_dword>
 800822a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008230:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	789b      	ldrb	r3, [r3, #2]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d005      	beq.n	8008250 <find_volume+0x1f4>
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	789b      	ldrb	r3, [r3, #2]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d001      	beq.n	8008250 <find_volume+0x1f4>
 800824c:	230d      	movs	r3, #13
 800824e:	e147      	b.n	80084e0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	789b      	ldrb	r3, [r3, #2]
 8008254:	461a      	mov	r2, r3
 8008256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008258:	fb02 f303 	mul.w	r3, r2, r3
 800825c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008264:	b29a      	uxth	r2, r3
 8008266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008268:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	895b      	ldrh	r3, [r3, #10]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d008      	beq.n	8008284 <find_volume+0x228>
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	895b      	ldrh	r3, [r3, #10]
 8008276:	461a      	mov	r2, r3
 8008278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827a:	895b      	ldrh	r3, [r3, #10]
 800827c:	3b01      	subs	r3, #1
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <find_volume+0x22c>
 8008284:	230d      	movs	r3, #13
 8008286:	e12b      	b.n	80084e0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	3330      	adds	r3, #48	; 0x30
 800828c:	3311      	adds	r3, #17
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fcce 	bl	8006c30 <ld_word>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800829c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829e:	891b      	ldrh	r3, [r3, #8]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <find_volume+0x252>
 80082aa:	230d      	movs	r3, #13
 80082ac:	e118      	b.n	80084e0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80082ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b0:	3330      	adds	r3, #48	; 0x30
 80082b2:	3313      	adds	r3, #19
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe fcbb 	bl	8006c30 <ld_word>
 80082ba:	4603      	mov	r3, r0
 80082bc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80082be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d106      	bne.n	80082d2 <find_volume+0x276>
 80082c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c6:	3330      	adds	r3, #48	; 0x30
 80082c8:	3320      	adds	r3, #32
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fcc8 	bl	8006c60 <ld_dword>
 80082d0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	3330      	adds	r3, #48	; 0x30
 80082d6:	330e      	adds	r3, #14
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fe fca9 	bl	8006c30 <ld_word>
 80082de:	4603      	mov	r3, r0
 80082e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80082e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <find_volume+0x290>
 80082e8:	230d      	movs	r3, #13
 80082ea:	e0f9      	b.n	80084e0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80082ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f0:	4413      	add	r3, r2
 80082f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082f4:	8912      	ldrh	r2, [r2, #8]
 80082f6:	0912      	lsrs	r2, r2, #4
 80082f8:	b292      	uxth	r2, r2
 80082fa:	4413      	add	r3, r2
 80082fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80082fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	429a      	cmp	r2, r3
 8008304:	d201      	bcs.n	800830a <find_volume+0x2ae>
 8008306:	230d      	movs	r3, #13
 8008308:	e0ea      	b.n	80084e0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800830a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008312:	8952      	ldrh	r2, [r2, #10]
 8008314:	fbb3 f3f2 	udiv	r3, r3, r2
 8008318:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	2b00      	cmp	r3, #0
 800831e:	d103      	bne.n	8008328 <find_volume+0x2cc>
 8008320:	230d      	movs	r3, #13
 8008322:	e0dd      	b.n	80084e0 <find_volume+0x484>
 8008324:	20000078 	.word	0x20000078
		fmt = FS_FAT32;
 8008328:	2303      	movs	r3, #3
 800832a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008334:	4293      	cmp	r3, r2
 8008336:	d802      	bhi.n	800833e <find_volume+0x2e2>
 8008338:	2302      	movs	r3, #2
 800833a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008344:	4293      	cmp	r3, r2
 8008346:	d802      	bhi.n	800834e <find_volume+0x2f2>
 8008348:	2301      	movs	r3, #1
 800834a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	1c9a      	adds	r2, r3, #2
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800835a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800835c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800835e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008360:	441a      	add	r2, r3
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008366:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	441a      	add	r2, r3
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008370:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008374:	2b03      	cmp	r3, #3
 8008376:	d11e      	bne.n	80083b6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	3330      	adds	r3, #48	; 0x30
 800837c:	332a      	adds	r3, #42	; 0x2a
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe fc56 	bl	8006c30 <ld_word>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <find_volume+0x332>
 800838a:	230d      	movs	r3, #13
 800838c:	e0a8      	b.n	80084e0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	891b      	ldrh	r3, [r3, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <find_volume+0x33e>
 8008396:	230d      	movs	r3, #13
 8008398:	e0a2      	b.n	80084e0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	3330      	adds	r3, #48	; 0x30
 800839e:	332c      	adds	r3, #44	; 0x2c
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fc5d 	bl	8006c60 <ld_dword>
 80083a6:	4602      	mov	r2, r0
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	647b      	str	r3, [r7, #68]	; 0x44
 80083b4:	e01f      	b.n	80083f6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	891b      	ldrh	r3, [r3, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <find_volume+0x366>
 80083be:	230d      	movs	r3, #13
 80083c0:	e08e      	b.n	80084e0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	6a1a      	ldr	r2, [r3, #32]
 80083c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c8:	441a      	add	r2, r3
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80083ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d103      	bne.n	80083de <find_volume+0x382>
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	e00a      	b.n	80083f4 <find_volume+0x398>
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	695a      	ldr	r2, [r3, #20]
 80083e2:	4613      	mov	r3, r2
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	4413      	add	r3, r2
 80083e8:	085a      	lsrs	r2, r3, #1
 80083ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80083f4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	699a      	ldr	r2, [r3, #24]
 80083fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008400:	0a5b      	lsrs	r3, r3, #9
 8008402:	429a      	cmp	r2, r3
 8008404:	d201      	bcs.n	800840a <find_volume+0x3ae>
 8008406:	230d      	movs	r3, #13
 8008408:	e06a      	b.n	80084e0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008410:	611a      	str	r2, [r3, #16]
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	691a      	ldr	r2, [r3, #16]
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	2280      	movs	r2, #128	; 0x80
 800841e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008424:	2b03      	cmp	r3, #3
 8008426:	d149      	bne.n	80084bc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	3330      	adds	r3, #48	; 0x30
 800842c:	3330      	adds	r3, #48	; 0x30
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fbfe 	bl	8006c30 <ld_word>
 8008434:	4603      	mov	r3, r0
 8008436:	2b01      	cmp	r3, #1
 8008438:	d140      	bne.n	80084bc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800843a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800843c:	3301      	adds	r3, #1
 800843e:	4619      	mov	r1, r3
 8008440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008442:	f7fe fea5 	bl	8007190 <move_window>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d137      	bne.n	80084bc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	2200      	movs	r2, #0
 8008450:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	3330      	adds	r3, #48	; 0x30
 8008456:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe fbe8 	bl	8006c30 <ld_word>
 8008460:	4603      	mov	r3, r0
 8008462:	461a      	mov	r2, r3
 8008464:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008468:	429a      	cmp	r2, r3
 800846a:	d127      	bne.n	80084bc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	3330      	adds	r3, #48	; 0x30
 8008470:	4618      	mov	r0, r3
 8008472:	f7fe fbf5 	bl	8006c60 <ld_dword>
 8008476:	4602      	mov	r2, r0
 8008478:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <find_volume+0x48c>)
 800847a:	429a      	cmp	r2, r3
 800847c:	d11e      	bne.n	80084bc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800847e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008480:	3330      	adds	r3, #48	; 0x30
 8008482:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fbea 	bl	8006c60 <ld_dword>
 800848c:	4602      	mov	r2, r0
 800848e:	4b17      	ldr	r3, [pc, #92]	; (80084ec <find_volume+0x490>)
 8008490:	429a      	cmp	r2, r3
 8008492:	d113      	bne.n	80084bc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	3330      	adds	r3, #48	; 0x30
 8008498:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe fbdf 	bl	8006c60 <ld_dword>
 80084a2:	4602      	mov	r2, r0
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	3330      	adds	r3, #48	; 0x30
 80084ac:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe fbd5 	bl	8006c60 <ld_dword>
 80084b6:	4602      	mov	r2, r0
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80084c2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80084c4:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <find_volume+0x494>)
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	4b08      	ldr	r3, [pc, #32]	; (80084f0 <find_volume+0x494>)
 80084ce:	801a      	strh	r2, [r3, #0]
 80084d0:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <find_volume+0x494>)
 80084d2:	881a      	ldrh	r2, [r3, #0]
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80084d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084da:	f7fe fdf1 	bl	80070c0 <clear_lock>
#endif
	return FR_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3758      	adds	r7, #88	; 0x58
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	41615252 	.word	0x41615252
 80084ec:	61417272 	.word	0x61417272
 80084f0:	2000007c 	.word	0x2000007c

080084f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80084fe:	2309      	movs	r3, #9
 8008500:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01c      	beq.n	8008542 <validate+0x4e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d018      	beq.n	8008542 <validate+0x4e>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d013      	beq.n	8008542 <validate+0x4e>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	889a      	ldrh	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	88db      	ldrh	r3, [r3, #6]
 8008524:	429a      	cmp	r2, r3
 8008526:	d10c      	bne.n	8008542 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe fae0 	bl	8006af4 <disk_status>
 8008534:	4603      	mov	r3, r0
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <validate+0x4e>
			res = FR_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d102      	bne.n	800854e <validate+0x5a>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	e000      	b.n	8008550 <validate+0x5c>
 800854e:	2300      	movs	r3, #0
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	6013      	str	r3, [r2, #0]
	return res;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	4613      	mov	r3, r2
 800856c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008572:	f107 0310 	add.w	r3, r7, #16
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff fcd5 	bl	8007f26 <get_ldnumber>
 800857c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	2b00      	cmp	r3, #0
 8008582:	da01      	bge.n	8008588 <f_mount+0x28>
 8008584:	230b      	movs	r3, #11
 8008586:	e02b      	b.n	80085e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008588:	4a17      	ldr	r2, [pc, #92]	; (80085e8 <f_mount+0x88>)
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008590:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008598:	69b8      	ldr	r0, [r7, #24]
 800859a:	f7fe fd91 	bl	80070c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	2200      	movs	r2, #0
 80085a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	490d      	ldr	r1, [pc, #52]	; (80085e8 <f_mount+0x88>)
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <f_mount+0x66>
 80085c0:	79fb      	ldrb	r3, [r7, #7]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d001      	beq.n	80085ca <f_mount+0x6a>
 80085c6:	2300      	movs	r3, #0
 80085c8:	e00a      	b.n	80085e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80085ca:	f107 010c 	add.w	r1, r7, #12
 80085ce:	f107 0308 	add.w	r3, r7, #8
 80085d2:	2200      	movs	r2, #0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff fd41 	bl	800805c <find_volume>
 80085da:	4603      	mov	r3, r0
 80085dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80085de:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3720      	adds	r7, #32
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	20000078 	.word	0x20000078

080085ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b098      	sub	sp, #96	; 0x60
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <f_open+0x18>
 8008600:	2309      	movs	r3, #9
 8008602:	e1ad      	b.n	8008960 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800860a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800860c:	79fa      	ldrb	r2, [r7, #7]
 800860e:	f107 0110 	add.w	r1, r7, #16
 8008612:	f107 0308 	add.w	r3, r7, #8
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff fd20 	bl	800805c <find_volume>
 800861c:	4603      	mov	r3, r0
 800861e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008626:	2b00      	cmp	r3, #0
 8008628:	f040 8191 	bne.w	800894e <f_open+0x362>
		dj.obj.fs = fs;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	f107 0314 	add.w	r3, r7, #20
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fc03 	bl	8007e44 <follow_path>
 800863e:	4603      	mov	r3, r0
 8008640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008648:	2b00      	cmp	r3, #0
 800864a:	d11a      	bne.n	8008682 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800864c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008650:	b25b      	sxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	da03      	bge.n	800865e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008656:	2306      	movs	r3, #6
 8008658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800865c:	e011      	b.n	8008682 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	f023 0301 	bic.w	r3, r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	bf14      	ite	ne
 8008668:	2301      	movne	r3, #1
 800866a:	2300      	moveq	r3, #0
 800866c:	b2db      	uxtb	r3, r3
 800866e:	461a      	mov	r2, r3
 8008670:	f107 0314 	add.w	r3, r7, #20
 8008674:	4611      	mov	r1, r2
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe fbda 	bl	8006e30 <chk_lock>
 800867c:	4603      	mov	r3, r0
 800867e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	f003 031c 	and.w	r3, r3, #28
 8008688:	2b00      	cmp	r3, #0
 800868a:	d07f      	beq.n	800878c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800868c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008690:	2b00      	cmp	r3, #0
 8008692:	d017      	beq.n	80086c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008698:	2b04      	cmp	r3, #4
 800869a:	d10e      	bne.n	80086ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800869c:	f7fe fc24 	bl	8006ee8 <enq_lock>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d006      	beq.n	80086b4 <f_open+0xc8>
 80086a6:	f107 0314 	add.w	r3, r7, #20
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff fb03 	bl	8007cb6 <dir_register>
 80086b0:	4603      	mov	r3, r0
 80086b2:	e000      	b.n	80086b6 <f_open+0xca>
 80086b4:	2312      	movs	r3, #18
 80086b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80086ba:	79fb      	ldrb	r3, [r7, #7]
 80086bc:	f043 0308 	orr.w	r3, r3, #8
 80086c0:	71fb      	strb	r3, [r7, #7]
 80086c2:	e010      	b.n	80086e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80086c4:	7ebb      	ldrb	r3, [r7, #26]
 80086c6:	f003 0311 	and.w	r3, r3, #17
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <f_open+0xea>
					res = FR_DENIED;
 80086ce:	2307      	movs	r3, #7
 80086d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80086d4:	e007      	b.n	80086e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <f_open+0xfa>
 80086e0:	2308      	movs	r3, #8
 80086e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80086e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d168      	bne.n	80087c0 <f_open+0x1d4>
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	f003 0308 	and.w	r3, r3, #8
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d063      	beq.n	80087c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80086f8:	f7fe f99e 	bl	8006a38 <get_fattime>
 80086fc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80086fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008700:	330e      	adds	r3, #14
 8008702:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe fae9 	bl	8006cdc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870c:	3316      	adds	r3, #22
 800870e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe fae3 	bl	8006cdc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008718:	330b      	adds	r3, #11
 800871a:	2220      	movs	r2, #32
 800871c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008722:	4611      	mov	r1, r2
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fa32 	bl	8007b8e <ld_clust>
 800872a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008730:	2200      	movs	r2, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff fa4a 	bl	8007bcc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873a:	331c      	adds	r3, #28
 800873c:	2100      	movs	r1, #0
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe facc 	bl	8006cdc <st_dword>
					fs->wflag = 1;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	2201      	movs	r2, #1
 8008748:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800874a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874c:	2b00      	cmp	r3, #0
 800874e:	d037      	beq.n	80087c0 <f_open+0x1d4>
						dw = fs->winsect;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008756:	f107 0314 	add.w	r3, r7, #20
 800875a:	2200      	movs	r2, #0
 800875c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe ff5d 	bl	800761e <remove_chain>
 8008764:	4603      	mov	r3, r0
 8008766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800876a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800876e:	2b00      	cmp	r3, #0
 8008770:	d126      	bne.n	80087c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fd0a 	bl	8007190 <move_window>
 800877c:	4603      	mov	r3, r0
 800877e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008786:	3a01      	subs	r2, #1
 8008788:	60da      	str	r2, [r3, #12]
 800878a:	e019      	b.n	80087c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800878c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008790:	2b00      	cmp	r3, #0
 8008792:	d115      	bne.n	80087c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008794:	7ebb      	ldrb	r3, [r7, #26]
 8008796:	f003 0310 	and.w	r3, r3, #16
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800879e:	2304      	movs	r3, #4
 80087a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80087a4:	e00c      	b.n	80087c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	f003 0302 	and.w	r3, r3, #2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d007      	beq.n	80087c0 <f_open+0x1d4>
 80087b0:	7ebb      	ldrb	r3, [r7, #26]
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <f_open+0x1d4>
						res = FR_DENIED;
 80087ba:	2307      	movs	r3, #7
 80087bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80087c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d128      	bne.n	800881a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	f003 0308 	and.w	r3, r3, #8
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80087e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	f023 0301 	bic.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bf14      	ite	ne
 80087f2:	2301      	movne	r3, #1
 80087f4:	2300      	moveq	r3, #0
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	461a      	mov	r2, r3
 80087fa:	f107 0314 	add.w	r3, r7, #20
 80087fe:	4611      	mov	r1, r2
 8008800:	4618      	mov	r0, r3
 8008802:	f7fe fb93 	bl	8006f2c <inc_lock>
 8008806:	4602      	mov	r2, r0
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d102      	bne.n	800881a <f_open+0x22e>
 8008814:	2302      	movs	r3, #2
 8008816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800881a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800881e:	2b00      	cmp	r3, #0
 8008820:	f040 8095 	bne.w	800894e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008828:	4611      	mov	r1, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f7ff f9af 	bl	8007b8e <ld_clust>
 8008830:	4602      	mov	r2, r0
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008838:	331c      	adds	r3, #28
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe fa10 	bl	8006c60 <ld_dword>
 8008840:	4602      	mov	r2, r0
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	88da      	ldrh	r2, [r3, #6]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	79fa      	ldrb	r2, [r7, #7]
 800885e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3330      	adds	r3, #48	; 0x30
 8008876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800887a:	2100      	movs	r1, #0
 800887c:	4618      	mov	r0, r3
 800887e:	f7fe fa7a 	bl	8006d76 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	f003 0320 	and.w	r3, r3, #32
 8008888:	2b00      	cmp	r3, #0
 800888a:	d060      	beq.n	800894e <f_open+0x362>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d05c      	beq.n	800894e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	895b      	ldrh	r3, [r3, #10]
 80088a0:	025b      	lsls	r3, r3, #9
 80088a2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	657b      	str	r3, [r7, #84]	; 0x54
 80088b0:	e016      	b.n	80088e0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fd25 	bl	8007306 <get_fat>
 80088bc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80088be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d802      	bhi.n	80088ca <f_open+0x2de>
 80088c4:	2302      	movs	r3, #2
 80088c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80088ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088d0:	d102      	bne.n	80088d8 <f_open+0x2ec>
 80088d2:	2301      	movs	r3, #1
 80088d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	657b      	str	r3, [r7, #84]	; 0x54
 80088e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d103      	bne.n	80088f0 <f_open+0x304>
 80088e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d8e0      	bhi.n	80088b2 <f_open+0x2c6>
				}
				fp->clust = clst;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80088f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d127      	bne.n	800894e <f_open+0x362>
 80088fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008904:	2b00      	cmp	r3, #0
 8008906:	d022      	beq.n	800894e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe fcdb 	bl	80072c8 <clust2sect>
 8008912:	6478      	str	r0, [r7, #68]	; 0x44
 8008914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008916:	2b00      	cmp	r3, #0
 8008918:	d103      	bne.n	8008922 <f_open+0x336>
						res = FR_INT_ERR;
 800891a:	2302      	movs	r3, #2
 800891c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008920:	e015      	b.n	800894e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008924:	0a5a      	lsrs	r2, r3, #9
 8008926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008928:	441a      	add	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	7858      	ldrb	r0, [r3, #1]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6a1a      	ldr	r2, [r3, #32]
 800893c:	2301      	movs	r3, #1
 800893e:	f7fe f919 	bl	8006b74 <disk_read>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <f_open+0x362>
 8008948:	2301      	movs	r3, #1
 800894a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800894e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <f_open+0x370>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800895c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008960:	4618      	mov	r0, r3
 8008962:	3760      	adds	r7, #96	; 0x60
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08e      	sub	sp, #56	; 0x38
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2200      	movs	r2, #0
 800897e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f107 0214 	add.w	r2, r7, #20
 8008986:	4611      	mov	r1, r2
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fdb3 	bl	80084f4 <validate>
 800898e:	4603      	mov	r3, r0
 8008990:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008994:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008998:	2b00      	cmp	r3, #0
 800899a:	d107      	bne.n	80089ac <f_read+0x44>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	7d5b      	ldrb	r3, [r3, #21]
 80089a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80089a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <f_read+0x4a>
 80089ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089b0:	e115      	b.n	8008bde <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	7d1b      	ldrb	r3, [r3, #20]
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <f_read+0x5a>
 80089be:	2307      	movs	r3, #7
 80089c0:	e10d      	b.n	8008bde <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	f240 80fe 	bls.w	8008bd4 <f_read+0x26c>
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80089dc:	e0fa      	b.n	8008bd4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f040 80c6 	bne.w	8008b78 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	0a5b      	lsrs	r3, r3, #9
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	8952      	ldrh	r2, [r2, #10]
 80089f6:	3a01      	subs	r2, #1
 80089f8:	4013      	ands	r3, r2
 80089fa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d12f      	bne.n	8008a62 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d103      	bne.n	8008a12 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a10:	e013      	b.n	8008a3a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d007      	beq.n	8008a2a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	4619      	mov	r1, r3
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f7fe fef9 	bl	8007818 <clmt_clust>
 8008a26:	6338      	str	r0, [r7, #48]	; 0x30
 8008a28:	e007      	b.n	8008a3a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f7fe fc67 	bl	8007306 <get_fat>
 8008a38:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d804      	bhi.n	8008a4a <f_read+0xe2>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2202      	movs	r2, #2
 8008a44:	755a      	strb	r2, [r3, #21]
 8008a46:	2302      	movs	r3, #2
 8008a48:	e0c9      	b.n	8008bde <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a50:	d104      	bne.n	8008a5c <f_read+0xf4>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2201      	movs	r2, #1
 8008a56:	755a      	strb	r2, [r3, #21]
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e0c0      	b.n	8008bde <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a60:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	69db      	ldr	r3, [r3, #28]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	f7fe fc2c 	bl	80072c8 <clust2sect>
 8008a70:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d104      	bne.n	8008a82 <f_read+0x11a>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	755a      	strb	r2, [r3, #21]
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e0ad      	b.n	8008bde <f_read+0x276>
			sect += csect;
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	0a5b      	lsrs	r3, r3, #9
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d039      	beq.n	8008b0a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a96:	69fa      	ldr	r2, [r7, #28]
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	4413      	add	r3, r2
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	8952      	ldrh	r2, [r2, #10]
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d905      	bls.n	8008ab0 <f_read+0x148>
					cc = fs->csize - csect;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	895b      	ldrh	r3, [r3, #10]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	7858      	ldrb	r0, [r3, #1]
 8008ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008aba:	f7fe f85b 	bl	8006b74 <disk_read>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d004      	beq.n	8008ace <f_read+0x166>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	755a      	strb	r2, [r3, #21]
 8008aca:	2301      	movs	r3, #1
 8008acc:	e087      	b.n	8008bde <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	7d1b      	ldrb	r3, [r3, #20]
 8008ad2:	b25b      	sxtb	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	da14      	bge.n	8008b02 <f_read+0x19a>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6a1a      	ldr	r2, [r3, #32]
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d90d      	bls.n	8008b02 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6a1a      	ldr	r2, [r3, #32]
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	025b      	lsls	r3, r3, #9
 8008af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af2:	18d0      	adds	r0, r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	3330      	adds	r3, #48	; 0x30
 8008af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008afc:	4619      	mov	r1, r3
 8008afe:	f7fe f919 	bl	8006d34 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	025b      	lsls	r3, r3, #9
 8008b06:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008b08:	e050      	b.n	8008bac <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d02e      	beq.n	8008b72 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	7d1b      	ldrb	r3, [r3, #20]
 8008b18:	b25b      	sxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da18      	bge.n	8008b50 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	7858      	ldrb	r0, [r3, #1]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a1a      	ldr	r2, [r3, #32]
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f7fe f841 	bl	8006bb4 <disk_write>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d004      	beq.n	8008b42 <f_read+0x1da>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	755a      	strb	r2, [r3, #21]
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e04d      	b.n	8008bde <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	7d1b      	ldrb	r3, [r3, #20]
 8008b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	7858      	ldrb	r0, [r3, #1]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	f7fe f809 	bl	8006b74 <disk_read>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d004      	beq.n	8008b72 <f_read+0x20a>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	755a      	strb	r2, [r3, #21]
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e035      	b.n	8008bde <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b80:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008b84:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d901      	bls.n	8008b92 <f_read+0x22a>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba0:	4413      	add	r3, r2
 8008ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ba8:	f7fe f8c4 	bl	8006d34 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb0:	4413      	add	r3, r2
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	699a      	ldr	r2, [r3, #24]
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	441a      	add	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	619a      	str	r2, [r3, #24]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc6:	441a      	add	r2, r3
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f47f af01 	bne.w	80089de <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3738      	adds	r7, #56	; 0x38
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b08c      	sub	sp, #48	; 0x30
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
 8008bf2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f107 0210 	add.w	r2, r7, #16
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff fc74 	bl	80084f4 <validate>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d107      	bne.n	8008c2a <f_write+0x44>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	7d5b      	ldrb	r3, [r3, #21]
 8008c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <f_write+0x4a>
 8008c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c2e:	e14b      	b.n	8008ec8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	7d1b      	ldrb	r3, [r3, #20]
 8008c34:	f003 0302 	and.w	r3, r3, #2
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <f_write+0x5a>
 8008c3c:	2307      	movs	r3, #7
 8008c3e:	e143      	b.n	8008ec8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	699a      	ldr	r2, [r3, #24]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	441a      	add	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	f080 812d 	bcs.w	8008eac <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	43db      	mvns	r3, r3
 8008c58:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008c5a:	e127      	b.n	8008eac <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f040 80e3 	bne.w	8008e30 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	0a5b      	lsrs	r3, r3, #9
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	8952      	ldrh	r2, [r2, #10]
 8008c74:	3a01      	subs	r2, #1
 8008c76:	4013      	ands	r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d143      	bne.n	8008d08 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10c      	bne.n	8008ca2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d11a      	bne.n	8008cca <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2100      	movs	r1, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe fd25 	bl	80076e8 <create_chain>
 8008c9e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008ca0:	e013      	b.n	8008cca <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d007      	beq.n	8008cba <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f7fe fdb1 	bl	8007818 <clmt_clust>
 8008cb6:	62b8      	str	r0, [r7, #40]	; 0x28
 8008cb8:	e007      	b.n	8008cca <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	f7fe fd10 	bl	80076e8 <create_chain>
 8008cc8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 80f2 	beq.w	8008eb6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d104      	bne.n	8008ce2 <f_write+0xfc>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	755a      	strb	r2, [r3, #21]
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e0f2      	b.n	8008ec8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ce8:	d104      	bne.n	8008cf4 <f_write+0x10e>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2201      	movs	r2, #1
 8008cee:	755a      	strb	r2, [r3, #21]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e0e9      	b.n	8008ec8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <f_write+0x122>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d06:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	7d1b      	ldrb	r3, [r3, #20]
 8008d0c:	b25b      	sxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	da18      	bge.n	8008d44 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	7858      	ldrb	r0, [r3, #1]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a1a      	ldr	r2, [r3, #32]
 8008d20:	2301      	movs	r3, #1
 8008d22:	f7fd ff47 	bl	8006bb4 <disk_write>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d004      	beq.n	8008d36 <f_write+0x150>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	755a      	strb	r2, [r3, #21]
 8008d32:	2301      	movs	r3, #1
 8008d34:	e0c8      	b.n	8008ec8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	7d1b      	ldrb	r3, [r3, #20]
 8008d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	f7fe fabb 	bl	80072c8 <clust2sect>
 8008d52:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d104      	bne.n	8008d64 <f_write+0x17e>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	755a      	strb	r2, [r3, #21]
 8008d60:	2302      	movs	r3, #2
 8008d62:	e0b1      	b.n	8008ec8 <f_write+0x2e2>
			sect += csect;
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	4413      	add	r3, r2
 8008d6a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	0a5b      	lsrs	r3, r3, #9
 8008d70:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d03c      	beq.n	8008df2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	8952      	ldrh	r2, [r2, #10]
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d905      	bls.n	8008d92 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	895b      	ldrh	r3, [r3, #10]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	7858      	ldrb	r0, [r3, #1]
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	69f9      	ldr	r1, [r7, #28]
 8008d9c:	f7fd ff0a 	bl	8006bb4 <disk_write>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d004      	beq.n	8008db0 <f_write+0x1ca>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2201      	movs	r2, #1
 8008daa:	755a      	strb	r2, [r3, #21]
 8008dac:	2301      	movs	r3, #1
 8008dae:	e08b      	b.n	8008ec8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a1a      	ldr	r2, [r3, #32]
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	6a3a      	ldr	r2, [r7, #32]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d915      	bls.n	8008dea <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a1a      	ldr	r2, [r3, #32]
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	025b      	lsls	r3, r3, #9
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	f7fd ffac 	bl	8006d34 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	7d1b      	ldrb	r3, [r3, #20]
 8008de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	025b      	lsls	r3, r3, #9
 8008dee:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008df0:	e03f      	b.n	8008e72 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d016      	beq.n	8008e2a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	699a      	ldr	r2, [r3, #24]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d210      	bcs.n	8008e2a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	7858      	ldrb	r0, [r3, #1]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e12:	2301      	movs	r3, #1
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	f7fd fead 	bl	8006b74 <disk_read>
 8008e1a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d004      	beq.n	8008e2a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2201      	movs	r2, #1
 8008e24:	755a      	strb	r2, [r3, #21]
 8008e26:	2301      	movs	r3, #1
 8008e28:	e04e      	b.n	8008ec8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d901      	bls.n	8008e4a <f_write+0x264>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e58:	4413      	add	r3, r2
 8008e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e5c:	69f9      	ldr	r1, [r7, #28]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fd ff68 	bl	8006d34 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	7d1b      	ldrb	r3, [r3, #20]
 8008e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	4413      	add	r3, r2
 8008e78:	61fb      	str	r3, [r7, #28]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	699a      	ldr	r2, [r3, #24]
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	441a      	add	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	619a      	str	r2, [r3, #24]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	bf38      	it	cc
 8008e92:	461a      	movcc	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	60da      	str	r2, [r3, #12]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	441a      	add	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f47f aed4 	bne.w	8008c5c <f_write+0x76>
 8008eb4:	e000      	b.n	8008eb8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008eb6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	7d1b      	ldrb	r3, [r3, #20]
 8008ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3730      	adds	r7, #48	; 0x30
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f107 0208 	add.w	r2, r7, #8
 8008ede:	4611      	mov	r1, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff fb07 	bl	80084f4 <validate>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d168      	bne.n	8008fc2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	7d1b      	ldrb	r3, [r3, #20]
 8008ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d062      	beq.n	8008fc2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	7d1b      	ldrb	r3, [r3, #20]
 8008f00:	b25b      	sxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	da15      	bge.n	8008f32 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	7858      	ldrb	r0, [r3, #1]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a1a      	ldr	r2, [r3, #32]
 8008f14:	2301      	movs	r3, #1
 8008f16:	f7fd fe4d 	bl	8006bb4 <disk_write>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <f_sync+0x54>
 8008f20:	2301      	movs	r3, #1
 8008f22:	e04f      	b.n	8008fc4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7d1b      	ldrb	r3, [r3, #20]
 8008f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008f32:	f7fd fd81 	bl	8006a38 <get_fattime>
 8008f36:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4610      	mov	r0, r2
 8008f42:	f7fe f925 	bl	8007190 <move_window>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d138      	bne.n	8008fc2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f54:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	330b      	adds	r3, #11
 8008f5a:	781a      	ldrb	r2, [r3, #0]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	330b      	adds	r3, #11
 8008f60:	f042 0220 	orr.w	r2, r2, #32
 8008f64:	b2d2      	uxtb	r2, r2
 8008f66:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6818      	ldr	r0, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	461a      	mov	r2, r3
 8008f72:	68f9      	ldr	r1, [r7, #12]
 8008f74:	f7fe fe2a 	bl	8007bcc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f103 021c 	add.w	r2, r3, #28
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	4619      	mov	r1, r3
 8008f84:	4610      	mov	r0, r2
 8008f86:	f7fd fea9 	bl	8006cdc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3316      	adds	r3, #22
 8008f8e:	6939      	ldr	r1, [r7, #16]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fd fea3 	bl	8006cdc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3312      	adds	r3, #18
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fd fe82 	bl	8006ca6 <st_word>
					fs->wflag = 1;
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe f91e 	bl	80071ec <sync_fs>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	7d1b      	ldrb	r3, [r3, #20]
 8008fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff ff7b 	bl	8008ed0 <f_sync>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d118      	bne.n	8009016 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f107 0208 	add.w	r2, r7, #8
 8008fea:	4611      	mov	r1, r2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff fa81 	bl	80084f4 <validate>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10c      	bne.n	8009016 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	4618      	mov	r0, r3
 8009002:	f7fe f821 	bl	8007048 <dec_lock>
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d102      	bne.n	8009016 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4613      	mov	r3, r2
 800902c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800902e:	2301      	movs	r3, #1
 8009030:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009036:	4b1f      	ldr	r3, [pc, #124]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009038:	7a5b      	ldrb	r3, [r3, #9]
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d131      	bne.n	80090a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009040:	4b1c      	ldr	r3, [pc, #112]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009042:	7a5b      	ldrb	r3, [r3, #9]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	461a      	mov	r2, r3
 8009048:	4b1a      	ldr	r3, [pc, #104]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 800904a:	2100      	movs	r1, #0
 800904c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800904e:	4b19      	ldr	r3, [pc, #100]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009050:	7a5b      	ldrb	r3, [r3, #9]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	4a17      	ldr	r2, [pc, #92]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800905e:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009060:	7a5b      	ldrb	r3, [r3, #9]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009068:	4413      	add	r3, r2
 800906a:	79fa      	ldrb	r2, [r7, #7]
 800906c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800906e:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009070:	7a5b      	ldrb	r3, [r3, #9]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	b2d1      	uxtb	r1, r2
 8009078:	4a0e      	ldr	r2, [pc, #56]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 800907a:	7251      	strb	r1, [r2, #9]
 800907c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800907e:	7dbb      	ldrb	r3, [r7, #22]
 8009080:	3330      	adds	r3, #48	; 0x30
 8009082:	b2da      	uxtb	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	3301      	adds	r3, #1
 800908c:	223a      	movs	r2, #58	; 0x3a
 800908e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	3302      	adds	r3, #2
 8009094:	222f      	movs	r2, #47	; 0x2f
 8009096:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	3303      	adds	r3, #3
 800909c:	2200      	movs	r2, #0
 800909e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	200000a0 	.word	0x200000a0

080090b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090c2:	2200      	movs	r2, #0
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff ffaa 	bl	8009020 <FATFS_LinkDriverEx>
 80090cc:	4603      	mov	r3, r0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <__libc_init_array>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	4e0d      	ldr	r6, [pc, #52]	; (8009110 <__libc_init_array+0x38>)
 80090dc:	4c0d      	ldr	r4, [pc, #52]	; (8009114 <__libc_init_array+0x3c>)
 80090de:	1ba4      	subs	r4, r4, r6
 80090e0:	10a4      	asrs	r4, r4, #2
 80090e2:	2500      	movs	r5, #0
 80090e4:	42a5      	cmp	r5, r4
 80090e6:	d109      	bne.n	80090fc <__libc_init_array+0x24>
 80090e8:	4e0b      	ldr	r6, [pc, #44]	; (8009118 <__libc_init_array+0x40>)
 80090ea:	4c0c      	ldr	r4, [pc, #48]	; (800911c <__libc_init_array+0x44>)
 80090ec:	f000 f820 	bl	8009130 <_init>
 80090f0:	1ba4      	subs	r4, r4, r6
 80090f2:	10a4      	asrs	r4, r4, #2
 80090f4:	2500      	movs	r5, #0
 80090f6:	42a5      	cmp	r5, r4
 80090f8:	d105      	bne.n	8009106 <__libc_init_array+0x2e>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009100:	4798      	blx	r3
 8009102:	3501      	adds	r5, #1
 8009104:	e7ee      	b.n	80090e4 <__libc_init_array+0xc>
 8009106:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800910a:	4798      	blx	r3
 800910c:	3501      	adds	r5, #1
 800910e:	e7f2      	b.n	80090f6 <__libc_init_array+0x1e>
 8009110:	08009508 	.word	0x08009508
 8009114:	08009508 	.word	0x08009508
 8009118:	08009508 	.word	0x08009508
 800911c:	0800950c 	.word	0x0800950c

08009120 <memset>:
 8009120:	4402      	add	r2, r0
 8009122:	4603      	mov	r3, r0
 8009124:	4293      	cmp	r3, r2
 8009126:	d100      	bne.n	800912a <memset+0xa>
 8009128:	4770      	bx	lr
 800912a:	f803 1b01 	strb.w	r1, [r3], #1
 800912e:	e7f9      	b.n	8009124 <memset+0x4>

08009130 <_init>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	bf00      	nop
 8009134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009136:	bc08      	pop	{r3}
 8009138:	469e      	mov	lr, r3
 800913a:	4770      	bx	lr

0800913c <_fini>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	bf00      	nop
 8009140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009142:	bc08      	pop	{r3}
 8009144:	469e      	mov	lr, r3
 8009146:	4770      	bx	lr
