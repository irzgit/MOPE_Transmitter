
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009050  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08009214  08009214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095dc  080095dc  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095e4  080095e4  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e4  080095e4  000195e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  080095ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e88  20000044  08009630  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ecc  08009630  00020ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad39  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003296  00000000  00000000  0003adad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001460  00000000  00000000  0003e048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e8  00000000  00000000  0003f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245de  00000000  00000000  00040790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d6c  00000000  00000000  00064d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2c32  00000000  00000000  00075ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014870c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005448  00000000  00000000  00148788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000044 	.word	0x20000044
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080091fc 	.word	0x080091fc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000048 	.word	0x20000048
 8000200:	080091fc 	.word	0x080091fc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f001 fb56 	bl	8001bbc <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f001 fb4e 	bl	8001bbc <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f001 fb46 	bl	8001bbc <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f001 fb3e 	bl	8001bbc <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f001 fb82 	bl	8001c68 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	080092c0 	.word	0x080092c0

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <Rf96_OutPower+0x28>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	4619      	mov	r1, r3
 8000582:	2009      	movs	r0, #9
 8000584:	f001 fb1a 	bl	8001bbc <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 8000588:	2187      	movs	r1, #135	; 0x87
 800058a:	205a      	movs	r0, #90	; 0x5a
 800058c:	f001 fb16 	bl	8001bbc <SPIWrite>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	080092cc 	.word	0x080092cc

0800059c <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <Rf96_OCP+0x20>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	4619      	mov	r1, r3
 80005ae:	200b      	movs	r0, #11
 80005b0:	f001 fb04 	bl	8001bbc <SPIWrite>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	080092d0 	.word	0x080092d0

080005c0 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <Rf96_LNA+0x20>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	4619      	mov	r1, r3
 80005d2:	200c      	movs	r0, #12
 80005d4:	f001 faf2 	bl	8001bbc <SPIWrite>

}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	080092d4 	.word	0x080092d4

080005e4 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	460b      	mov	r3, r1
 80005f0:	71bb      	strb	r3, [r7, #6]
 80005f2:	4613      	mov	r3, r2
 80005f4:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005f6:	210e      	movs	r1, #14
 80005f8:	201d      	movs	r0, #29
 80005fa:	f001 fadf 	bl	8001bbc <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // С CRC16
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	460b      	mov	r3, r1
 8000612:	71bb      	strb	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xC4);  // SF=12
 8000618:	21c4      	movs	r1, #196	; 0xc4
 800061a:	201e      	movs	r0, #30
 800061c:	f001 face 	bl	8001bbc <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	201f      	movs	r0, #31
 8000628:	f001 fac8 	bl	8001bbc <SPIWrite>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b29b      	uxth	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	2020      	movs	r0, #32
 800064a:	f001 fab7 	bl	8001bbc <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	2021      	movs	r0, #33	; 0x21
 8000656:	f001 fab1 	bl	8001bbc <SPIWrite>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 8000662:	b590      	push	{r4, r7, lr}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	4604      	mov	r4, r0
 800066a:	4608      	mov	r0, r1
 800066c:	4611      	mov	r1, r2
 800066e:	461a      	mov	r2, r3
 8000670:	4623      	mov	r3, r4
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4603      	mov	r3, r0
 8000676:	71bb      	strb	r3, [r7, #6]
 8000678:	460b      	mov	r3, r1
 800067a:	717b      	strb	r3, [r7, #5]
 800067c:	4613      	mov	r3, r2
 800067e:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	b2da      	uxtb	r2, r3
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4413      	add	r3, r2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4413      	add	r3, r2
 8000698:	b2da      	uxtb	r2, r3
 800069a:	793b      	ldrb	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	2040      	movs	r0, #64	; 0x40
 80006a4:	f001 fa8a 	bl	8001bbc <SPIWrite>
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd90      	pop	{r4, r7, pc}

080006b0 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006b4:	21f7      	movs	r1, #247	; 0xf7
 80006b6:	2011      	movs	r0, #17
 80006b8:	f001 fa80 	bl	8001bbc <SPIWrite>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
 80006c4:	213f      	movs	r1, #63	; 0x3f
 80006c6:	2011      	movs	r0, #17
 80006c8:	f001 fa78 	bl	8001bbc <SPIWrite>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4619      	mov	r1, r3
 80006de:	2022      	movs	r0, #34	; 0x22
 80006e0:	f001 fa6c 	bl	8001bbc <SPIWrite>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4619      	mov	r1, r3
 80006fa:	200e      	movs	r0, #14
 80006fc:	f001 fa5e 	bl	8001bbc <SPIWrite>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4619      	mov	r1, r3
 8000716:	200f      	movs	r0, #15
 8000718:	f001 fa50 	bl	8001bbc <SPIWrite>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4619      	mov	r1, r3
 8000732:	200d      	movs	r0, #13
 8000734:	f001 fa42 	bl	8001bbc <SPIWrite>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 8000744:	2185      	movs	r1, #133	; 0x85
 8000746:	2001      	movs	r0, #1
 8000748:	f001 fa38 	bl	8001bbc <SPIWrite>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <Rf96_TX_mode>:
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 8000754:	2183      	movs	r1, #131	; 0x83
 8000756:	2001      	movs	r0, #1
 8000758:	f001 fa30 	bl	8001bbc <SPIWrite>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	461a      	mov	r2, r3
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	2000      	movs	r0, #0
 8000774:	f001 fa78 	bl	8001c68 <BurstWrite>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000788:	2010      	movs	r0, #16
 800078a:	f001 f9f9 	bl	8001b80 <SPIRead>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	4619      	mov	r1, r3
 8000796:	200d      	movs	r0, #13
 8000798:	f001 fa10 	bl	8001bbc <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 800079c:	2013      	movs	r0, #19
 800079e:	f001 f9ef 	bl	8001b80 <SPIRead>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	461a      	mov	r2, r3
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	2000      	movs	r0, #0
 80007ae:	f001 fa29 	bl	8001c04 <SPIBurstRead>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007be:	f7ff feb1 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007c2:	f7ff feb7 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff febc 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fecf 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fee2 	bl	800059c <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fef1 	bl	80005c0 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2104      	movs	r1, #4
 80007e2:	2007      	movs	r0, #7
 80007e4:	f7ff fefe 	bl	80005e4 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x1FF);
 80007e8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007ec:	2101      	movs	r1, #1
 80007ee:	2006      	movs	r0, #6
 80007f0:	f7ff ff09 	bl	8000606 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007f4:	2008      	movs	r0, #8
 80007f6:	f7ff ff1d 	bl	8000634 <Rf96_Preamble>
	SPIWrite(0x37,0x0A);
 80007fa:	210a      	movs	r1, #10
 80007fc:	2037      	movs	r0, #55	; 0x37
 80007fe:	f001 f9dd 	bl	8001bbc <SPIWrite>
	SPIWrite(0x31,0xA3);
 8000802:	21a3      	movs	r1, #163	; 0xa3
 8000804:	2031      	movs	r0, #49	; 0x31
 8000806:	f001 f9d9 	bl	8001bbc <SPIWrite>
	// Заходим в StandBy
	Rf96_Standby();
 800080a:	f7ff fe83 	bl	8000514 <Rf96_Standby>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}

08000812 <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  SPIWrite(LR_RegHopPeriod,0x0);
 8000816:	2100      	movs	r1, #0
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f001 f9cf 	bl	8001bbc <SPIWrite>
	  // Настройка вывода Di0 на прерывание по отправке
	  Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 800081e:	2302      	movs	r3, #2
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff ff1c 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 800082a:	f7ff fe6b 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 800082e:	f7ff ff3f 	bl	80006b0 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000832:	202a      	movs	r0, #42	; 0x2a
 8000834:	f7ff ff4c 	bl	80006d0 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000838:	2080      	movs	r0, #128	; 0x80
 800083a:	f7ff ff57 	bl	80006ec <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 800083e:	2080      	movs	r0, #128	; 0x80
 8000840:	f7ff ff70 	bl	8000724 <Rf96_FIFO_point>

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 800084c:	2100      	movs	r1, #0
 800084e:	2024      	movs	r0, #36	; 0x24
 8000850:	f001 f9b4 	bl	8001bbc <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 8000854:	2302      	movs	r3, #2
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ff01 	bl	8000662 <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000860:	f7ff ff2e 	bl	80006c0 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000864:	f7ff fe4e 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000868:	202a      	movs	r0, #42	; 0x2a
 800086a:	f7ff ff31 	bl	80006d0 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff ff4a 	bl	8000708 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff ff55 	bl	8000724 <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 800087a:	f7ff ff61 	bl	8000740 <Rf96_RX_Continuous_mode>

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}

08000882 <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	4619      	mov	r1, r3
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ff64 	bl	8000760 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 8000898:	f7ff ff5a 	bl	8000750 <Rf96_TX_mode>
		}
	}
	*/


}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80008b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b4:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80008b6:	e012      	b.n	80008de <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 80008b8:	89fb      	ldrh	r3, [r7, #14]
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	b21a      	sxth	r2, r3
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	1c59      	adds	r1, r3, #1
 80008ca:	6079      	str	r1, [r7, #4]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4043      	eors	r3, r0
 80008d0:	4909      	ldr	r1, [pc, #36]	; (80008f8 <Crc16+0x54>)
 80008d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	4053      	eors	r3, r2
 80008da:	b21b      	sxth	r3, r3
 80008dc:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80008de:	887b      	ldrh	r3, [r7, #2]
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	807a      	strh	r2, [r7, #2]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1e7      	bne.n	80008b8 <Crc16+0x14>

    return crc;
 80008e8:	89fb      	ldrh	r3, [r7, #14]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	0800933c 	.word	0x0800933c

080008fc <CommandToRadio>:

// Функция передачи по радиоканалу
void CommandToRadio(uint8_t command)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	// Вход в режим передачи
	 Rf96_Lora_TX_mode();
 8000906:	f7ff ff84 	bl	8000812 <Rf96_Lora_TX_mode>
	// Обнуляем массив
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]
 800090e:	e006      	b.n	800091e <CommandToRadio+0x22>
	{
		TX_RX_Radio[i]=0;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <CommandToRadio+0x7c>)
 8000914:	2100      	movs	r1, #0
 8000916:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	3301      	adds	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	2b29      	cmp	r3, #41	; 0x29
 8000922:	d9f5      	bls.n	8000910 <CommandToRadio+0x14>
	}
    // Заносим команду
	TX_RX_Radio[CommIndex]=command;
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <CommandToRadio+0x7c>)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	7013      	strb	r3, [r2, #0]
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 800092a:	2128      	movs	r1, #40	; 0x28
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <CommandToRadio+0x7c>)
 800092e:	f7ff ffb9 	bl	80008a4 <Crc16>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <CommandToRadio+0x80>)
 8000938:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <CommandToRadio+0x80>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	b29b      	uxth	r3, r3
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <CommandToRadio+0x7c>)
 8000946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <CommandToRadio+0x80>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <CommandToRadio+0x7c>)
 8000952:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 8000956:	2080      	movs	r0, #128	; 0x80
 8000958:	f7ff fec8 	bl	80006ec <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 800095c:	2080      	movs	r0, #128	; 0x80
 800095e:	f7ff fee1 	bl	8000724 <Rf96_FIFO_point>
    // Очистка флагов
	Rf96_LoRaClearIrq();
 8000962:	f7ff fdcf 	bl	8000504 <Rf96_LoRaClearIrq>
    // Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8000966:	212a      	movs	r1, #42	; 0x2a
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <CommandToRadio+0x7c>)
 800096a:	f7ff ff8a 	bl	8000882 <Rf96_LoRaTxPacket>
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200003b8 	.word	0x200003b8
 800097c:	20000064 	.word	0x20000064

08000980 <uint32_TO_charmass>:
mass - массив, в который число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 8000980:	b480      	push	{r7}
 8000982:	b087      	sub	sp, #28
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	4611      	mov	r1, r2
 800098c:	461a      	mov	r2, r3
 800098e:	460b      	mov	r3, r1
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	4613      	mov	r3, r2
 8000994:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < len; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	82fb      	strh	r3, [r7, #22]
 800099a:	e01f      	b.n	80009dc <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 800099c:	68f9      	ldr	r1, [r7, #12]
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <uint32_TO_charmass+0x70>)
 80009a0:	fba3 2301 	umull	r2, r3, r3, r1
 80009a4:	08da      	lsrs	r2, r3, #3
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	1aca      	subs	r2, r1, r3
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	88bb      	ldrh	r3, [r7, #4]
 80009b4:	1e59      	subs	r1, r3, #1
 80009b6:	8afb      	ldrh	r3, [r7, #22]
 80009b8:	1ac9      	subs	r1, r1, r3
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	440b      	add	r3, r1
 80009be:	4619      	mov	r1, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	440b      	add	r3, r1
 80009c4:	3230      	adds	r2, #48	; 0x30
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <uint32_TO_charmass+0x70>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	3301      	adds	r3, #1
 80009da:	82fb      	strh	r3, [r7, #22]
 80009dc:	8afa      	ldrh	r2, [r7, #22]
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d3db      	bcc.n	800099c <uint32_TO_charmass+0x1c>
	}
}
 80009e4:	bf00      	nop
 80009e6:	371c      	adds	r7, #28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	cccccccd 	.word	0xcccccccd

080009f4 <ReadNumofFileSD>:
uint8_t ReadNumofFileSD(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80009fa:	af00      	add	r7, sp, #0
	    FIL filInform;
        uint8_t Num=0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
        UINT bytesWroteInform;
	    ///  Создание/открытие файла
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8000a02:	2201      	movs	r2, #1
 8000a04:	4948      	ldr	r1, [pc, #288]	; (8000b28 <ReadNumofFileSD+0x134>)
 8000a06:	4849      	ldr	r0, [pc, #292]	; (8000b2c <ReadNumofFileSD+0x138>)
 8000a08:	f007 fe10 	bl	800862c <f_mount>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <ReadNumofFileSD+0x13c>)
 8000a12:	701a      	strb	r2, [r3, #0]

		if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000a14:	4b46      	ldr	r3, [pc, #280]	; (8000b30 <ReadNumofFileSD+0x13c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <ReadNumofFileSD+0x34>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2102      	movs	r1, #2
 8000a20:	4844      	ldr	r0, [pc, #272]	; (8000b34 <ReadNumofFileSD+0x140>)
 8000a22:	f003 f9ed 	bl	8003e00 <HAL_GPIO_WritePin>
			while(1);
 8000a26:	e7fe      	b.n	8000a26 <ReadNumofFileSD+0x32>
		}
		// Открываем или создаем новый файл
		fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2212      	movs	r2, #18
 8000a2c:	4942      	ldr	r1, [pc, #264]	; (8000b38 <ReadNumofFileSD+0x144>)
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f007 fe42 	bl	80086b8 <f_open>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <ReadNumofFileSD+0x13c>)
 8000a3a:	701a      	strb	r2, [r3, #0]

		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000a3c:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <ReadNumofFileSD+0x13c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d005      	beq.n	8000a50 <ReadNumofFileSD+0x5c>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2102      	movs	r1, #2
 8000a48:	483a      	ldr	r0, [pc, #232]	; (8000b34 <ReadNumofFileSD+0x140>)
 8000a4a:	f003 f9d9 	bl	8003e00 <HAL_GPIO_WritePin>
			while(1);
 8000a4e:	e7fe      	b.n	8000a4e <ReadNumofFileSD+0x5a>
		}
		//Читаем количество файлов
		fres=f_read(&filInform,BuffSDRead,40,&bytesRead);
 8000a50:	1d38      	adds	r0, r7, #4
 8000a52:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <ReadNumofFileSD+0x148>)
 8000a54:	2228      	movs	r2, #40	; 0x28
 8000a56:	493a      	ldr	r1, [pc, #232]	; (8000b40 <ReadNumofFileSD+0x14c>)
 8000a58:	f007 ffec 	bl	8008a34 <f_read>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <ReadNumofFileSD+0x13c>)
 8000a62:	701a      	strb	r2, [r3, #0]
		//Если на флешке не было этого файла
		if(BuffSDRead[0]=='\t' && BuffSDRead[1]=='\t' && BuffSDRead[2]=='F' && BuffSDRead[3]=='i' && BuffSDRead[4]=='l')
 8000a64:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <ReadNumofFileSD+0x14c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b09      	cmp	r3, #9
 8000a6a:	d115      	bne.n	8000a98 <ReadNumofFileSD+0xa4>
 8000a6c:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <ReadNumofFileSD+0x14c>)
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	2b09      	cmp	r3, #9
 8000a72:	d111      	bne.n	8000a98 <ReadNumofFileSD+0xa4>
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <ReadNumofFileSD+0x14c>)
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	2b46      	cmp	r3, #70	; 0x46
 8000a7a:	d10d      	bne.n	8000a98 <ReadNumofFileSD+0xa4>
 8000a7c:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <ReadNumofFileSD+0x14c>)
 8000a7e:	78db      	ldrb	r3, [r3, #3]
 8000a80:	2b69      	cmp	r3, #105	; 0x69
 8000a82:	d109      	bne.n	8000a98 <ReadNumofFileSD+0xa4>
 8000a84:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <ReadNumofFileSD+0x14c>)
 8000a86:	791b      	ldrb	r3, [r3, #4]
 8000a88:	2b6c      	cmp	r3, #108	; 0x6c
 8000a8a:	d105      	bne.n	8000a98 <ReadNumofFileSD+0xa4>
		{
			Num=BuffSDRead[28]-'0'; // количество файлов
 8000a8c:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <ReadNumofFileSD+0x14c>)
 8000a8e:	7f1b      	ldrb	r3, [r3, #28]
 8000a90:	3b30      	subs	r3, #48	; 0x30
 8000a92:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 8000a96:	e016      	b.n	8000ac6 <ReadNumofFileSD+0xd2>
		}
		else
		{
			Num=0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			// Количество файлов
			fres = f_write(&filInform, "\t\tFile info\nNumber of files:0;\n", 31, &bytesWroteInform);
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	1d38      	adds	r0, r7, #4
 8000aa2:	221f      	movs	r2, #31
 8000aa4:	4927      	ldr	r1, [pc, #156]	; (8000b44 <ReadNumofFileSD+0x150>)
 8000aa6:	f008 f904 	bl	8008cb2 <f_write>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <ReadNumofFileSD+0x13c>)
 8000ab0:	701a      	strb	r2, [r3, #0]
			// История команд
			fres = f_write(&filInform, "\t\tCommand History\nTime\tcommand\n", 31, &bytesWroteInform);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	1d38      	adds	r0, r7, #4
 8000ab6:	221f      	movs	r2, #31
 8000ab8:	4923      	ldr	r1, [pc, #140]	; (8000b48 <ReadNumofFileSD+0x154>)
 8000aba:	f008 f8fa 	bl	8008cb2 <f_write>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <ReadNumofFileSD+0x13c>)
 8000ac4:	701a      	strb	r2, [r3, #0]
		}


	    fres=f_close(&filInform);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f008 fae5 	bl	8009098 <f_close>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <ReadNumofFileSD+0x13c>)
 8000ad4:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <ReadNumofFileSD+0x13c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d005      	beq.n	8000aea <ReadNumofFileSD+0xf6>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4814      	ldr	r0, [pc, #80]	; (8000b34 <ReadNumofFileSD+0x140>)
 8000ae4:	f003 f98c 	bl	8003e00 <HAL_GPIO_WritePin>
			while(1);
 8000ae8:	e7fe      	b.n	8000ae8 <ReadNumofFileSD+0xf4>
		}
	    fres=f_mount(NULL, "", 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	490e      	ldr	r1, [pc, #56]	; (8000b28 <ReadNumofFileSD+0x134>)
 8000aee:	2000      	movs	r0, #0
 8000af0:	f007 fd9c 	bl	800862c <f_mount>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <ReadNumofFileSD+0x13c>)
 8000afa:	701a      	strb	r2, [r3, #0]
		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <ReadNumofFileSD+0x13c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d005      	beq.n	8000b10 <ReadNumofFileSD+0x11c>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2102      	movs	r1, #2
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <ReadNumofFileSD+0x140>)
 8000b0a:	f003 f979 	bl	8003e00 <HAL_GPIO_WritePin>
			while(1);
 8000b0e:	e7fe      	b.n	8000b0e <ReadNumofFileSD+0x11a>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2102      	movs	r1, #2
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <ReadNumofFileSD+0x140>)
 8000b16:	f003 f973 	bl	8003e00 <HAL_GPIO_WritePin>

	return Num;
 8000b1a:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	08009214 	.word	0x08009214
 8000b2c:	20000144 	.word	0x20000144
 8000b30:	200007e4 	.word	0x200007e4
 8000b34:	40020800 	.word	0x40020800
 8000b38:	08009218 	.word	0x08009218
 8000b3c:	20000100 	.word	0x20000100
 8000b40:	200006b8 	.word	0x200006b8
 8000b44:	08009224 	.word	0x08009224
 8000b48:	08009244 	.word	0x08009244

08000b4c <WriteNumofFileSD>:
void WriteNumofFileSD(uint8_t Num)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4602      	mov	r2, r0
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	701a      	strb	r2, [r3, #0]
	        FIL filInform;
	        UINT bytesWroteInform;
	        ///  Создание/открытие файла
			fres = f_mount(&FatFs, "", 1); //1=mount now
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4934      	ldr	r1, [pc, #208]	; (8000c30 <WriteNumofFileSD+0xe4>)
 8000b5e:	4835      	ldr	r0, [pc, #212]	; (8000c34 <WriteNumofFileSD+0xe8>)
 8000b60:	f007 fd64 	bl	800862c <f_mount>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <WriteNumofFileSD+0xec>)
 8000b6a:	701a      	strb	r2, [r3, #0]

			if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <WriteNumofFileSD+0xec>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d005      	beq.n	8000b80 <WriteNumofFileSD+0x34>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2102      	movs	r1, #2
 8000b78:	4830      	ldr	r0, [pc, #192]	; (8000c3c <WriteNumofFileSD+0xf0>)
 8000b7a:	f003 f941 	bl	8003e00 <HAL_GPIO_WritePin>
				while(1);
 8000b7e:	e7fe      	b.n	8000b7e <WriteNumofFileSD+0x32>
			}
			// Открываем или создаем новый файл
			fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	2212      	movs	r2, #18
 8000b86:	492e      	ldr	r1, [pc, #184]	; (8000c40 <WriteNumofFileSD+0xf4>)
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f007 fd95 	bl	80086b8 <f_open>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <WriteNumofFileSD+0xec>)
 8000b94:	701a      	strb	r2, [r3, #0]

			if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <WriteNumofFileSD+0xec>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d005      	beq.n	8000baa <WriteNumofFileSD+0x5e>

			} else
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4826      	ldr	r0, [pc, #152]	; (8000c3c <WriteNumofFileSD+0xf0>)
 8000ba4:	f003 f92c 	bl	8003e00 <HAL_GPIO_WritePin>
				while(1);
 8000ba8:	e7fe      	b.n	8000ba8 <WriteNumofFileSD+0x5c>
			}
			//Записываем количество данных
			BuffSDWrite[28]=Num+'0';
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	3330      	adds	r3, #48	; 0x30
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <WriteNumofFileSD+0xf8>)
 8000bb4:	771a      	strb	r2, [r3, #28]
			fres = f_write(&filInform, BuffSDWrite, 30, &bytesWroteInform);
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	f107 0010 	add.w	r0, r7, #16
 8000bbe:	221e      	movs	r2, #30
 8000bc0:	4920      	ldr	r1, [pc, #128]	; (8000c44 <WriteNumofFileSD+0xf8>)
 8000bc2:	f008 f876 	bl	8008cb2 <f_write>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <WriteNumofFileSD+0xec>)
 8000bcc:	701a      	strb	r2, [r3, #0]
		    fres=f_close(&filInform);
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f008 fa60 	bl	8009098 <f_close>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <WriteNumofFileSD+0xec>)
 8000bde:	701a      	strb	r2, [r3, #0]
			if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <WriteNumofFileSD+0xec>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d005      	beq.n	8000bf4 <WriteNumofFileSD+0xa8>

			} else
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2102      	movs	r1, #2
 8000bec:	4813      	ldr	r0, [pc, #76]	; (8000c3c <WriteNumofFileSD+0xf0>)
 8000bee:	f003 f907 	bl	8003e00 <HAL_GPIO_WritePin>
				while(1);
 8000bf2:	e7fe      	b.n	8000bf2 <WriteNumofFileSD+0xa6>
			}
		    fres=f_mount(NULL, "", 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	490e      	ldr	r1, [pc, #56]	; (8000c30 <WriteNumofFileSD+0xe4>)
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f007 fd17 	bl	800862c <f_mount>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <WriteNumofFileSD+0xec>)
 8000c04:	701a      	strb	r2, [r3, #0]
			if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <WriteNumofFileSD+0xec>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d005      	beq.n	8000c1a <WriteNumofFileSD+0xce>

			} else
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2102      	movs	r1, #2
 8000c12:	480a      	ldr	r0, [pc, #40]	; (8000c3c <WriteNumofFileSD+0xf0>)
 8000c14:	f003 f8f4 	bl	8003e00 <HAL_GPIO_WritePin>
				while(1);
 8000c18:	e7fe      	b.n	8000c18 <WriteNumofFileSD+0xcc>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <WriteNumofFileSD+0xf0>)
 8000c20:	f003 f8ee 	bl	8003e00 <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	08009214 	.word	0x08009214
 8000c34:	20000144 	.word	0x20000144
 8000c38:	200007e4 	.word	0x200007e4
 8000c3c:	40020800 	.word	0x40020800
 8000c40:	08009218 	.word	0x08009218
 8000c44:	20000000 	.word	0x20000000

08000c48 <CommandHistoryWrite>:

void CommandHistoryWrite(uint8_t command)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4602      	mov	r2, r0
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	701a      	strb	r2, [r3, #0]
	            FIL filInform;
		        UINT bytesWroteInform;
		        ///  Создание/открытие файла
				fres = f_mount(&FatFs, "", 1); //1=mount now
 8000c56:	2201      	movs	r2, #1
 8000c58:	493e      	ldr	r1, [pc, #248]	; (8000d54 <CommandHistoryWrite+0x10c>)
 8000c5a:	483f      	ldr	r0, [pc, #252]	; (8000d58 <CommandHistoryWrite+0x110>)
 8000c5c:	f007 fce6 	bl	800862c <f_mount>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <CommandHistoryWrite+0x114>)
 8000c66:	701a      	strb	r2, [r3, #0]

				if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c68:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <CommandHistoryWrite+0x114>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d005      	beq.n	8000c7c <CommandHistoryWrite+0x34>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2102      	movs	r1, #2
 8000c74:	483a      	ldr	r0, [pc, #232]	; (8000d60 <CommandHistoryWrite+0x118>)
 8000c76:	f003 f8c3 	bl	8003e00 <HAL_GPIO_WritePin>
					while(1);
 8000c7a:	e7fe      	b.n	8000c7a <CommandHistoryWrite+0x32>
				}
				// Открываем или создаем новый файл
				fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_APPEND | FA_WRITE);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2232      	movs	r2, #50	; 0x32
 8000c82:	4938      	ldr	r1, [pc, #224]	; (8000d64 <CommandHistoryWrite+0x11c>)
 8000c84:	4618      	mov	r0, r3
 8000c86:	f007 fd17 	bl	80086b8 <f_open>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <CommandHistoryWrite+0x114>)
 8000c90:	701a      	strb	r2, [r3, #0]

				if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000c92:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <CommandHistoryWrite+0x114>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <CommandHistoryWrite+0x5e>

				} else
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	4830      	ldr	r0, [pc, #192]	; (8000d60 <CommandHistoryWrite+0x118>)
 8000ca0:	f003 f8ae 	bl	8003e00 <HAL_GPIO_WritePin>
					while(1);
 8000ca4:	e7fe      	b.n	8000ca4 <CommandHistoryWrite+0x5c>
				}
				//Записываем количество данных
				//  Время в мс, когда ,прибыла команда
				uint32_t TimeHistory = HAL_GetTick();
 8000ca6:	f002 f9b5 	bl	8003014 <HAL_GetTick>
 8000caa:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
				uint32_TO_charmass(TimeHistory, BuffSDWrite, 0, 8);
 8000cae:	2308      	movs	r3, #8
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	492d      	ldr	r1, [pc, #180]	; (8000d68 <CommandHistoryWrite+0x120>)
 8000cb4:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000cb8:	f7ff fe62 	bl	8000980 <uint32_TO_charmass>
				BuffSDWrite[8]=' ';
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <CommandHistoryWrite+0x120>)
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	721a      	strb	r2, [r3, #8]
				BuffSDWrite[9]=command+'0';
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	3330      	adds	r3, #48	; 0x30
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <CommandHistoryWrite+0x120>)
 8000ccc:	725a      	strb	r2, [r3, #9]
				BuffSDWrite[10]=';';
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <CommandHistoryWrite+0x120>)
 8000cd0:	223b      	movs	r2, #59	; 0x3b
 8000cd2:	729a      	strb	r2, [r3, #10]
				BuffSDWrite[11]='\n';
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <CommandHistoryWrite+0x120>)
 8000cd6:	220a      	movs	r2, #10
 8000cd8:	72da      	strb	r2, [r3, #11]
				fres = f_write(&filInform, BuffSDWrite, 12, &bytesWroteInform);
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	f107 000c 	add.w	r0, r7, #12
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	4920      	ldr	r1, [pc, #128]	; (8000d68 <CommandHistoryWrite+0x120>)
 8000ce6:	f007 ffe4 	bl	8008cb2 <f_write>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <CommandHistoryWrite+0x114>)
 8000cf0:	701a      	strb	r2, [r3, #0]
			    fres=f_close(&filInform);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f008 f9ce 	bl	8009098 <f_close>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <CommandHistoryWrite+0x114>)
 8000d02:	701a      	strb	r2, [r3, #0]
				if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <CommandHistoryWrite+0x114>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <CommandHistoryWrite+0xd0>

				} else
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4813      	ldr	r0, [pc, #76]	; (8000d60 <CommandHistoryWrite+0x118>)
 8000d12:	f003 f875 	bl	8003e00 <HAL_GPIO_WritePin>
					while(1);
 8000d16:	e7fe      	b.n	8000d16 <CommandHistoryWrite+0xce>
				}
			    fres=f_mount(NULL, "", 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	490e      	ldr	r1, [pc, #56]	; (8000d54 <CommandHistoryWrite+0x10c>)
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f007 fc85 	bl	800862c <f_mount>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <CommandHistoryWrite+0x114>)
 8000d28:	701a      	strb	r2, [r3, #0]
				if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <CommandHistoryWrite+0x114>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <CommandHistoryWrite+0xf6>

				} else
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2102      	movs	r1, #2
 8000d36:	480a      	ldr	r0, [pc, #40]	; (8000d60 <CommandHistoryWrite+0x118>)
 8000d38:	f003 f862 	bl	8003e00 <HAL_GPIO_WritePin>
					while(1);
 8000d3c:	e7fe      	b.n	8000d3c <CommandHistoryWrite+0xf4>
				}
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2102      	movs	r1, #2
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <CommandHistoryWrite+0x118>)
 8000d44:	f003 f85c 	bl	8003e00 <HAL_GPIO_WritePin>

}
 8000d48:	bf00      	nop
 8000d4a:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08009214 	.word	0x08009214
 8000d58:	20000144 	.word	0x20000144
 8000d5c:	200007e4 	.word	0x200007e4
 8000d60:	40020800 	.word	0x40020800
 8000d64:	08009218 	.word	0x08009218
 8000d68:	20000000 	.word	0x20000000

08000d6c <HistoryOnOffUSI>:
void HistoryOnOffUSI(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000d72:	af00      	add	r7, sp, #0

	                FIL filInform;
			        UINT bytesWroteInform;
			        ///  Создание/открытие файла
					fres = f_mount(&FatFs, "", 1); //1=mount now
 8000d74:	2201      	movs	r2, #1
 8000d76:	4931      	ldr	r1, [pc, #196]	; (8000e3c <HistoryOnOffUSI+0xd0>)
 8000d78:	4831      	ldr	r0, [pc, #196]	; (8000e40 <HistoryOnOffUSI+0xd4>)
 8000d7a:	f007 fc57 	bl	800862c <f_mount>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <HistoryOnOffUSI+0xd8>)
 8000d84:	701a      	strb	r2, [r3, #0]

					if (fres != FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <HistoryOnOffUSI+0xd8>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <HistoryOnOffUSI+0x2e>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2102      	movs	r1, #2
 8000d92:	482d      	ldr	r0, [pc, #180]	; (8000e48 <HistoryOnOffUSI+0xdc>)
 8000d94:	f003 f834 	bl	8003e00 <HAL_GPIO_WritePin>
						while(1);
 8000d98:	e7fe      	b.n	8000d98 <HistoryOnOffUSI+0x2c>
					}
					// Открываем или создаем новый файл
					fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_APPEND | FA_WRITE);
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	2232      	movs	r2, #50	; 0x32
 8000da0:	492a      	ldr	r1, [pc, #168]	; (8000e4c <HistoryOnOffUSI+0xe0>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f007 fc88 	bl	80086b8 <f_open>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <HistoryOnOffUSI+0xd8>)
 8000dae:	701a      	strb	r2, [r3, #0]

					if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <HistoryOnOffUSI+0xd8>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d005      	beq.n	8000dc4 <HistoryOnOffUSI+0x58>

					} else
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4822      	ldr	r0, [pc, #136]	; (8000e48 <HistoryOnOffUSI+0xdc>)
 8000dbe:	f003 f81f 	bl	8003e00 <HAL_GPIO_WritePin>
						while(1);
 8000dc2:	e7fe      	b.n	8000dc2 <HistoryOnOffUSI+0x56>
					}
					//Записываем количество данных
					fres = f_write(&filInform, "Power On\n", 9, &bytesWroteInform);
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	f107 0008 	add.w	r0, r7, #8
 8000dca:	2209      	movs	r2, #9
 8000dcc:	4920      	ldr	r1, [pc, #128]	; (8000e50 <HistoryOnOffUSI+0xe4>)
 8000dce:	f007 ff70 	bl	8008cb2 <f_write>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HistoryOnOffUSI+0xd8>)
 8000dd8:	701a      	strb	r2, [r3, #0]
				    fres=f_close(&filInform);
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	4618      	mov	r0, r3
 8000de0:	f008 f95a 	bl	8009098 <f_close>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HistoryOnOffUSI+0xd8>)
 8000dea:	701a      	strb	r2, [r3, #0]
					if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HistoryOnOffUSI+0xd8>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d005      	beq.n	8000e00 <HistoryOnOffUSI+0x94>

					} else
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2102      	movs	r1, #2
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <HistoryOnOffUSI+0xdc>)
 8000dfa:	f003 f801 	bl	8003e00 <HAL_GPIO_WritePin>
						while(1);
 8000dfe:	e7fe      	b.n	8000dfe <HistoryOnOffUSI+0x92>
					}
				    fres=f_mount(NULL, "", 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <HistoryOnOffUSI+0xd0>)
 8000e04:	2000      	movs	r0, #0
 8000e06:	f007 fc11 	bl	800862c <f_mount>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HistoryOnOffUSI+0xd8>)
 8000e10:	701a      	strb	r2, [r3, #0]
					if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HistoryOnOffUSI+0xd8>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <HistoryOnOffUSI+0xba>

					} else
					{
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	480a      	ldr	r0, [pc, #40]	; (8000e48 <HistoryOnOffUSI+0xdc>)
 8000e20:	f002 ffee 	bl	8003e00 <HAL_GPIO_WritePin>
						while(1);
 8000e24:	e7fe      	b.n	8000e24 <HistoryOnOffUSI+0xb8>
					}
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4807      	ldr	r0, [pc, #28]	; (8000e48 <HistoryOnOffUSI+0xdc>)
 8000e2c:	f002 ffe8 	bl	8003e00 <HAL_GPIO_WritePin>
}
 8000e30:	bf00      	nop
 8000e32:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08009214 	.word	0x08009214
 8000e40:	20000144 	.word	0x20000144
 8000e44:	200007e4 	.word	0x200007e4
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	08009218 	.word	0x08009218
 8000e50:	08009264 	.word	0x08009264

08000e54 <SyncCKT>:
// Функция синхронизации Usartа с ЦКТ
void SyncCKT(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	// Синхронизация
	if(readFlag==1)
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <SyncCKT+0x2c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d10d      	bne.n	8000e7c <SyncCKT+0x28>
	{
		readFlag=0;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <SyncCKT+0x2c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f002 f8e0 	bl	800302c <HAL_Delay>
		HAL_UART_Abort(&huart5);
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <SyncCKT+0x30>)
 8000e6e:	f004 ff61 	bl	8005d34 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5,BuffCkt, MaxBuffOfCKT);
 8000e72:	222b      	movs	r2, #43	; 0x2b
 8000e74:	4904      	ldr	r1, [pc, #16]	; (8000e88 <SyncCKT+0x34>)
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <SyncCKT+0x30>)
 8000e78:	f004 fedc 	bl	8005c34 <HAL_UART_Receive_DMA>
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200006ea 	.word	0x200006ea
 8000e84:	20000468 	.word	0x20000468
 8000e88:	200003e4 	.word	0x200003e4

08000e8c <RXCommande1>:
// Команда начала записи на SD карту
void RXCommande1(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    // Запись в память номера файла, на котором мы находимся

	CountFileNow=ReadNumofFileSD();
 8000e90:	f7ff fdb0 	bl	80009f4 <ReadNumofFileSD>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <RXCommande1+0xb0>)
 8000e9a:	701a      	strb	r2, [r3, #0]
	if(CountFileNow>=9)
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <RXCommande1+0xb0>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b08      	cmp	r3, #8
 8000ea2:	d903      	bls.n	8000eac <RXCommande1+0x20>
	{
		CountFileNow=0;
 8000ea4:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <RXCommande1+0xb0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e005      	b.n	8000eb8 <RXCommande1+0x2c>
	} else 	CountFileNow++;
 8000eac:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <RXCommande1+0xb0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <RXCommande1+0xb0>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	WriteNumofFileSD(CountFileNow);
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <RXCommande1+0xb0>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe45 	bl	8000b4c <WriteNumofFileSD>
	*/
	//flashErasePage(FLASH_SECTOR_6);
	//Flash_Write_single8bit(FilesAdr,CountFileNow);
	///ФЛЕШКА
	///  Создание файла
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	491e      	ldr	r1, [pc, #120]	; (8000f40 <RXCommande1+0xb4>)
 8000ec6:	481f      	ldr	r0, [pc, #124]	; (8000f44 <RXCommande1+0xb8>)
 8000ec8:	f007 fbb0 	bl	800862c <f_mount>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <RXCommande1+0xbc>)
 8000ed2:	701a      	strb	r2, [r3, #0]

		if (fres != FR_OK)
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <RXCommande1+0xbc>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <RXCommande1+0x5c>
		{ // Если проблема с флешкой  выключаем 1 светодиод
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2102      	movs	r1, #2
 8000ee0:	481a      	ldr	r0, [pc, #104]	; (8000f4c <RXCommande1+0xc0>)
 8000ee2:	f002 ff8d 	bl	8003e00 <HAL_GPIO_WritePin>
			while(1);
 8000ee6:	e7fe      	b.n	8000ee6 <RXCommande1+0x5a>
		}
		// Открываем или создаем новый файл
		fres = f_open(&fil, &(MassFileName[CountFileNow][0]), FA_CREATE_ALWAYS | FA_WRITE);
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <RXCommande1+0xb0>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <RXCommande1+0xc4>)
 8000ef8:	4413      	add	r3, r2
 8000efa:	220a      	movs	r2, #10
 8000efc:	4619      	mov	r1, r3
 8000efe:	4815      	ldr	r0, [pc, #84]	; (8000f54 <RXCommande1+0xc8>)
 8000f00:	f007 fbda 	bl	80086b8 <f_open>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <RXCommande1+0xbc>)
 8000f0a:	701a      	strb	r2, [r3, #0]

		if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <RXCommande1+0xbc>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <RXCommande1+0x94>

		} else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2102      	movs	r1, #2
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <RXCommande1+0xc0>)
 8000f1a:	f002 ff71 	bl	8003e00 <HAL_GPIO_WritePin>
			while(1);
 8000f1e:	e7fe      	b.n	8000f1e <RXCommande1+0x92>
		}
	    ResolveSDWrite=1; // Открываем доступ к записи на SD
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <RXCommande1+0xcc>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
	    //Записываем команду в историю
	    CommandHistoryWrite(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff fe8e 	bl	8000c48 <CommandHistoryWrite>
    // Отсылаем ответ
	    ModeRadio=1;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <RXCommande1+0xd0>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
    CommandToRadio(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff fce2 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
   // Rf96_Lora_RX_mode();
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000069 	.word	0x20000069
 8000f40:	08009214 	.word	0x08009214
 8000f44:	20000144 	.word	0x20000144
 8000f48:	200007e4 	.word	0x200007e4
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	080092d8 	.word	0x080092d8
 8000f54:	200007e8 	.word	0x200007e8
 8000f58:	20000066 	.word	0x20000066
 8000f5c:	2000006a 	.word	0x2000006a

08000f60 <RXCommande2>:
// Команда включения клапаном
void RXCommande2(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <RXCommande2+0x28>)
 8000f6c:	f002 ff48 	bl	8003e00 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(2);
 8000f70:	2002      	movs	r0, #2
 8000f72:	f7ff fe69 	bl	8000c48 <CommandHistoryWrite>
	// Отсылаем ответ
	ModeRadio=1;
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <RXCommande2+0x2c>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
    CommandToRadio(2);
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	f7ff fcbd 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
   // Rf96_Lora_RX_mode();
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	2000006a 	.word	0x2000006a

08000f90 <RXCommande3>:

// Команда включения двигателя
void RXCommande3(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	// Подаем единицу на двигатель
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9a:	480c      	ldr	r0, [pc, #48]	; (8000fcc <RXCommande3+0x3c>)
 8000f9c:	f002 ff30 	bl	8003e00 <HAL_GPIO_WritePin>
	// Ждем 5 секунд
	HAL_Delay(5000);
 8000fa0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fa4:	f002 f842 	bl	800302c <HAL_Delay>
	// Убираем единицу с двигателя
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fae:	4807      	ldr	r0, [pc, #28]	; (8000fcc <RXCommande3+0x3c>)
 8000fb0:	f002 ff26 	bl	8003e00 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(3);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f7ff fe47 	bl	8000c48 <CommandHistoryWrite>
	// Отсылаем ответ
	ModeRadio=1;
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <RXCommande3+0x40>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
    CommandToRadio(3);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f7ff fc9b 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
   // Rf96_Lora_RX_mode();
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	2000006a 	.word	0x2000006a

08000fd4 <RXCommande4>:
// Команда - запрос на отправку данных
void RXCommande4(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	RadioIrq=1;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <RXCommande4+0x14>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]

}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	20000068 	.word	0x20000068

08000fec <RXCommande5>:
// Команда начала закрытия файла на SD карте
void RXCommande5(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	///ФЛЕШКА
    // Закрываем файл
	fres=f_close(&fil);
 8000ff0:	4818      	ldr	r0, [pc, #96]	; (8001054 <RXCommande5+0x68>)
 8000ff2:	f008 f851 	bl	8009098 <f_close>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <RXCommande5+0x6c>)
 8000ffc:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <RXCommande5+0x6c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <RXCommande5+0x26>

	} else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2102      	movs	r1, #2
 800100a:	4814      	ldr	r0, [pc, #80]	; (800105c <RXCommande5+0x70>)
 800100c:	f002 fef8 	bl	8003e00 <HAL_GPIO_WritePin>
		while(1);
 8001010:	e7fe      	b.n	8001010 <RXCommande5+0x24>
	}
	fres=f_mount(NULL, "", 0);
 8001012:	2200      	movs	r2, #0
 8001014:	4912      	ldr	r1, [pc, #72]	; (8001060 <RXCommande5+0x74>)
 8001016:	2000      	movs	r0, #0
 8001018:	f007 fb08 	bl	800862c <f_mount>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <RXCommande5+0x6c>)
 8001022:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) { // Если проблема с флешкой  выключаем 1 светодиод
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <RXCommande5+0x6c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <RXCommande5+0x4c>

	} else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2102      	movs	r1, #2
 8001030:	480a      	ldr	r0, [pc, #40]	; (800105c <RXCommande5+0x70>)
 8001032:	f002 fee5 	bl	8003e00 <HAL_GPIO_WritePin>
		while(1);
 8001036:	e7fe      	b.n	8001036 <RXCommande5+0x4a>
	}
    ResolveSDWrite=0; // Закрываем доступ к записи на SD
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <RXCommande5+0x78>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
    //Записываем команду в историю
    CommandHistoryWrite(5);
 800103e:	2005      	movs	r0, #5
 8001040:	f7ff fe02 	bl	8000c48 <CommandHistoryWrite>
    // Отсылаем ответ
    ModeRadio=1;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <RXCommande5+0x7c>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
    CommandToRadio(5);
 800104a:	2005      	movs	r0, #5
 800104c:	f7ff fc56 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
  //  Rf96_Lora_RX_mode();
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200007e8 	.word	0x200007e8
 8001058:	200007e4 	.word	0x200007e4
 800105c:	40020800 	.word	0x40020800
 8001060:	08009214 	.word	0x08009214
 8001064:	20000066 	.word	0x20000066
 8001068:	2000006a 	.word	0x2000006a

0800106c <RXCommande6>:
// Команда закрытия клапана
void RXCommande6(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <RXCommande6+0x28>)
 8001078:	f002 fec2 	bl	8003e00 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(6);
 800107c:	2006      	movs	r0, #6
 800107e:	f7ff fde3 	bl	8000c48 <CommandHistoryWrite>
	// Отсылаем ответ
	ModeRadio=1;
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <RXCommande6+0x2c>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
    CommandToRadio(6);
 8001088:	2006      	movs	r0, #6
 800108a:	f7ff fc37 	bl	80008fc <CommandToRadio>
    // Ожидаем команду
  //  Rf96_Lora_RX_mode();
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020400 	.word	0x40020400
 8001098:	2000006a 	.word	0x2000006a

0800109c <DataConv>:



// Парсер
void DataConv(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	// Запись времени в буфер
	uint32_TO_charmass(reciveTime, SDbufWrite, 0, 8);
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <DataConv+0x60>)
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	2308      	movs	r3, #8
 80010a8:	2200      	movs	r2, #0
 80010aa:	4915      	ldr	r1, [pc, #84]	; (8001100 <DataConv+0x64>)
 80010ac:	f7ff fc68 	bl	8000980 <uint32_TO_charmass>
	for(uint8_t i=0;i<38;i++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	e017      	b.n	80010e6 <DataConv+0x4a>
	{
		uint32_TO_charmass(BuffMidW[i+4], SDbufWrite, 9+i*4, 3);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	3304      	adds	r3, #4
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <DataConv+0x68>)
 80010bc:	5cd3      	ldrb	r3, [r2, r3]
 80010be:	4618      	mov	r0, r3
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3309      	adds	r3, #9
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	2303      	movs	r3, #3
 80010ce:	490c      	ldr	r1, [pc, #48]	; (8001100 <DataConv+0x64>)
 80010d0:	f7ff fc56 	bl	8000980 <uint32_TO_charmass>
		SDbufWrite[8+i*4]=',';
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	3302      	adds	r3, #2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <DataConv+0x64>)
 80010dc:	212c      	movs	r1, #44	; 0x2c
 80010de:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<38;i++)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	3301      	adds	r3, #1
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b25      	cmp	r3, #37	; 0x25
 80010ea:	d9e4      	bls.n	80010b6 <DataConv+0x1a>
	}
	SDbufWrite[160]='\n';
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <DataConv+0x64>)
 80010ee:	220a      	movs	r2, #10
 80010f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000060 	.word	0x20000060
 8001100:	200005a8 	.word	0x200005a8
 8001104:	2000064c 	.word	0x2000064c

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110e:	f001 ff1b 	bl	8002f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001112:	f000 f939 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001116:	f000 fb95 	bl	8001844 <MX_GPIO_Init>
  MX_DMA_Init();
 800111a:	f000 fb4d 	bl	80017b8 <MX_DMA_Init>
  MX_SPI1_Init();
 800111e:	f000 f9a5 	bl	800146c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001122:	f000 faf5 	bl	8001710 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001126:	f000 fb1d 	bl	8001764 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800112a:	f000 fac7 	bl	80016bc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800112e:	f005 fcd7 	bl	8006ae0 <MX_FATFS_Init>
  MX_SPI3_Init();
 8001132:	f000 f9d1 	bl	80014d8 <MX_SPI3_Init>
  MX_UART5_Init();
 8001136:	f000 fa95 	bl	8001664 <MX_UART5_Init>
  MX_TIM6_Init();
 800113a:	f000 fa03 	bl	8001544 <MX_TIM6_Init>
  MX_TIM7_Init();
 800113e:	f000 fa37 	bl	80015b0 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001142:	f000 fa6b 	bl	800161c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	// Индикация включения УСИ ПРД
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2102      	movs	r1, #2
 800114a:	487f      	ldr	r0, [pc, #508]	; (8001348 <main+0x240>)
 800114c:	f002 fe58 	bl	8003e00 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001150:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001154:	f001 ff6a 	bl	800302c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2104      	movs	r1, #4
 800115c:	487a      	ldr	r0, [pc, #488]	; (8001348 <main+0x240>)
 800115e:	f002 fe4f 	bl	8003e00 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001162:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001166:	f001 ff61 	bl	800302c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2108      	movs	r1, #8
 800116e:	4876      	ldr	r0, [pc, #472]	; (8001348 <main+0x240>)
 8001170:	f002 fe46 	bl	8003e00 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001174:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001178:	f001 ff58 	bl	800302c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2102      	movs	r1, #2
 8001180:	4871      	ldr	r0, [pc, #452]	; (8001348 <main+0x240>)
 8001182:	f002 fe3d 	bl	8003e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2104      	movs	r1, #4
 800118a:	486f      	ldr	r0, [pc, #444]	; (8001348 <main+0x240>)
 800118c:	f002 fe38 	bl	8003e00 <HAL_GPIO_WritePin>
	//Проверка SD карты
	//CheckSD();
	// Создание файла infoSD.txt
	ReadNumofFileSD();
 8001190:	f7ff fc30 	bl	80009f4 <ReadNumofFileSD>
	HistoryOnOffUSI();
 8001194:	f7ff fdea 	bl	8000d6c <HistoryOnOffUSI>
	// Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 8001198:	f7ff fb0f 	bl	80007ba <Rf96_Lora_init>
	// Режим приема
	Rf96_Lora_RX_mode();
 800119c:	f7ff fb54 	bl	8000848 <Rf96_Lora_RX_mode>
	// Запуск приема в дма с аксселерометров
	HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 80011a0:	222b      	movs	r2, #43	; 0x2b
 80011a2:	496a      	ldr	r1, [pc, #424]	; (800134c <main+0x244>)
 80011a4:	486a      	ldr	r0, [pc, #424]	; (8001350 <main+0x248>)
 80011a6:	f004 fd45 	bl	8005c34 <HAL_UART_Receive_DMA>
    // Запуск таймера с целью определения подключения ЦКТ
    HAL_TIM_Base_Start_IT(&htim10);
 80011aa:	486a      	ldr	r0, [pc, #424]	; (8001354 <main+0x24c>)
 80011ac:	f004 fa45 	bl	800563a <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Синхронизация с ЦКТ
	    SyncCKT();
 80011b0:	f7ff fe50 	bl	8000e54 <SyncCKT>
	    // Прерывание по приему по радиоканалу
		if(Get_NIRQ_Di0())
 80011b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b8:	4867      	ldr	r0, [pc, #412]	; (8001358 <main+0x250>)
 80011ba:	f002 fe09 	bl	8003dd0 <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d055      	beq.n	8001270 <main+0x168>
		{
			if(ModeRadio==0) // если прерывание по приему
 80011c4:	4b65      	ldr	r3, [pc, #404]	; (800135c <main+0x254>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d144      	bne.n	8001256 <main+0x14e>
			{
            // Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 80011cc:	4864      	ldr	r0, [pc, #400]	; (8001360 <main+0x258>)
 80011ce:	f7ff fad7 	bl	8000780 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 80011d2:	4b63      	ldr	r3, [pc, #396]	; (8001360 <main+0x258>)
 80011d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80011d8:	b29b      	uxth	r3, r3
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b60      	ldr	r3, [pc, #384]	; (8001360 <main+0x258>)
 80011e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	4413      	add	r3, r2
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b5e      	ldr	r3, [pc, #376]	; (8001364 <main+0x25c>)
 80011ec:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 80011ee:	f7ff f989 	bl	8000504 <Rf96_LoRaClearIrq>
			// Если CRC совпадает
			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2))
 80011f2:	2128      	movs	r1, #40	; 0x28
 80011f4:	485a      	ldr	r0, [pc, #360]	; (8001360 <main+0x258>)
 80011f6:	f7ff fb55 	bl	80008a4 <Crc16>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b59      	ldr	r3, [pc, #356]	; (8001364 <main+0x25c>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d134      	bne.n	8001270 <main+0x168>
			{
				switch(TX_RX_Radio[CommIndex])
 8001206:	4b56      	ldr	r3, [pc, #344]	; (8001360 <main+0x258>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	2b05      	cmp	r3, #5
 800120e:	d82f      	bhi.n	8001270 <main+0x168>
 8001210:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <main+0x110>)
 8001212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001216:	bf00      	nop
 8001218:	08001231 	.word	0x08001231
 800121c:	08001237 	.word	0x08001237
 8001220:	0800123d 	.word	0x0800123d
 8001224:	08001243 	.word	0x08001243
 8001228:	08001249 	.word	0x08001249
 800122c:	0800124f 	.word	0x0800124f
				{
				case 1:   // Команда начала записи: Создаем файл
					RXCommande1();
 8001230:	f7ff fe2c 	bl	8000e8c <RXCommande1>
					break;
 8001234:	e01c      	b.n	8001270 <main+0x168>
				case 2:   // Команда открытия клапана
					RXCommande2();
 8001236:	f7ff fe93 	bl	8000f60 <RXCommande2>
					break;
 800123a:	e019      	b.n	8001270 <main+0x168>
				case 3:   // Команда запуска двигателя
					RXCommande3();
 800123c:	f7ff fea8 	bl	8000f90 <RXCommande3>
					break;
 8001240:	e016      	b.n	8001270 <main+0x168>
				case 4:   // Команда запроса данных
					RXCommande4();
 8001242:	f7ff fec7 	bl	8000fd4 <RXCommande4>
					break;
 8001246:	e013      	b.n	8001270 <main+0x168>
				case 5:   // Команда закрытия файла на SD и запрет записи на SD
					RXCommande5();
 8001248:	f7ff fed0 	bl	8000fec <RXCommande5>
					break;
 800124c:	e010      	b.n	8001270 <main+0x168>
				case 6:    // Команда закрытия клапана
					RXCommande6();
 800124e:	f7ff ff0d 	bl	800106c <RXCommande6>
					break;
 8001252:	bf00      	nop
 8001254:	e00c      	b.n	8001270 <main+0x168>
				}
			}
			} else if(ModeRadio==1) // если прерывание по передаче
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <main+0x254>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d108      	bne.n	8001270 <main+0x168>
			{
				ModeRadio=0;
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <main+0x254>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
				// Сбрасываем флаги
				Rf96_LoRaClearIrq();
 8001264:	f7ff f94e 	bl	8000504 <Rf96_LoRaClearIrq>
	            // Заходим в Standby
				Rf96_Standby();
 8001268:	f7ff f954 	bl	8000514 <Rf96_Standby>
			    // Ожидаем команду
			    Rf96_Lora_RX_mode();
 800126c:	f7ff faec 	bl	8000848 <Rf96_Lora_RX_mode>

			}
		}

		if(ResolveSDWrite==1 && ReadyToWrite==1) //  Если разрешена запись на Sd карту и если есть что записывать
 8001270:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <main+0x260>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d19b      	bne.n	80011b0 <main+0xa8>
 8001278:	4b3c      	ldr	r3, [pc, #240]	; (800136c <main+0x264>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d197      	bne.n	80011b0 <main+0xa8>
		{
			// Запись на SD
			DataConv();
 8001280:	f7ff ff0c 	bl	800109c <DataConv>
			fres = f_write(&fil, SDbufWrite, 161, &bytesWrote);
 8001284:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <main+0x268>)
 8001286:	22a1      	movs	r2, #161	; 0xa1
 8001288:	493a      	ldr	r1, [pc, #232]	; (8001374 <main+0x26c>)
 800128a:	483b      	ldr	r0, [pc, #236]	; (8001378 <main+0x270>)
 800128c:	f007 fd11 	bl	8008cb2 <f_write>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b39      	ldr	r3, [pc, #228]	; (800137c <main+0x274>)
 8001296:	701a      	strb	r2, [r3, #0]
			if (fres != FR_OK)
 8001298:	4b38      	ldr	r3, [pc, #224]	; (800137c <main+0x274>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <main+0x1a4>
			{
				while(1)
				{
					// Выключение 1 светодиода, если какая-то проблема с записью на SD
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2102      	movs	r1, #2
 80012a4:	4828      	ldr	r0, [pc, #160]	; (8001348 <main+0x240>)
 80012a6:	f002 fdab 	bl	8003e00 <HAL_GPIO_WritePin>
 80012aa:	e7f9      	b.n	80012a0 <main+0x198>

				}
			}
			if(RadioIrq==1)  // Если пришел запрос на отправку измерений по радио
 80012ac:	4b34      	ldr	r3, [pc, #208]	; (8001380 <main+0x278>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d13d      	bne.n	8001330 <main+0x228>
			{
				for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	e00a      	b.n	80012d0 <main+0x1c8>
				{
					TX_RX_Radio[i+1]=BuffMidW[i+4];
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	1d1a      	adds	r2, r3, #4
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4930      	ldr	r1, [pc, #192]	; (8001384 <main+0x27c>)
 80012c4:	5c89      	ldrb	r1, [r1, r2]
 80012c6:	4a26      	ldr	r2, [pc, #152]	; (8001360 <main+0x258>)
 80012c8:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	3301      	adds	r3, #1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b26      	cmp	r3, #38	; 0x26
 80012d4:	d9f1      	bls.n	80012ba <main+0x1b2>
				}
				// заносим в 1 элемент 4 команду
				TX_RX_Radio[0]=4;
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <main+0x258>)
 80012d8:	2204      	movs	r2, #4
 80012da:	701a      	strb	r2, [r3, #0]
				// Отсылаем ответ
			    Rf96_Lora_TX_mode();
 80012dc:	f7ff fa99 	bl	8000812 <Rf96_Lora_TX_mode>
				//Подсчет CRC16
				CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 80012e0:	2128      	movs	r1, #40	; 0x28
 80012e2:	481f      	ldr	r0, [pc, #124]	; (8001360 <main+0x258>)
 80012e4:	f7ff fade 	bl	80008a4 <Crc16>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <main+0x25c>)
 80012ee:	801a      	strh	r2, [r3, #0]
				TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <main+0x25c>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <main+0x258>)
 80012fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <main+0x25c>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <main+0x258>)
 8001308:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				// Установка адреса TX в буфере FIFO
				Rf96_TX_FifoAdr(0x80);
 800130c:	2080      	movs	r0, #128	; 0x80
 800130e:	f7ff f9ed 	bl	80006ec <Rf96_TX_FifoAdr>
				// Устанавливает указатель на адрес начала массива TX в FIFO
				Rf96_FIFO_point(0x80);
 8001312:	2080      	movs	r0, #128	; 0x80
 8001314:	f7ff fa06 	bl	8000724 <Rf96_FIFO_point>
			    // Очистка флагов
				Rf96_LoRaClearIrq();
 8001318:	f7ff f8f4 	bl	8000504 <Rf96_LoRaClearIrq>
			    // Отправка посылки
				Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 800131c:	212a      	movs	r1, #42	; 0x2a
 800131e:	4810      	ldr	r0, [pc, #64]	; (8001360 <main+0x258>)
 8001320:	f7ff faaf 	bl	8000882 <Rf96_LoRaTxPacket>
                // Запрещаем передачу по радио
				RadioIrq=0;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <main+0x278>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
				// следующее Прерывание будет по передаче
				ModeRadio=1;
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <main+0x254>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
			}
			// Синхронизация файла и sd карты
			fres = f_sync(&fil);
 8001330:	4811      	ldr	r0, [pc, #68]	; (8001378 <main+0x270>)
 8001332:	f007 fe33 	bl	8008f9c <f_sync>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <main+0x274>)
 800133c:	701a      	strb	r2, [r3, #0]
			ReadyToWrite=0;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <main+0x264>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
	    SyncCKT();
 8001344:	e734      	b.n	80011b0 <main+0xa8>
 8001346:	bf00      	nop
 8001348:	40020800 	.word	0x40020800
 800134c:	200003e4 	.word	0x200003e4
 8001350:	20000468 	.word	0x20000468
 8001354:	20000374 	.word	0x20000374
 8001358:	40020000 	.word	0x40020000
 800135c:	2000006a 	.word	0x2000006a
 8001360:	200003b8 	.word	0x200003b8
 8001364:	20000064 	.word	0x20000064
 8001368:	20000066 	.word	0x20000066
 800136c:	20000067 	.word	0x20000067
 8001370:	200003b4 	.word	0x200003b4
 8001374:	200005a8 	.word	0x200005a8
 8001378:	200007e8 	.word	0x200007e8
 800137c:	200007e4 	.word	0x200007e4
 8001380:	20000068 	.word	0x20000068
 8001384:	2000064c 	.word	0x2000064c

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	; 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	2234      	movs	r2, #52	; 0x34
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f007 ff28 	bl	80091ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <SystemClock_Config+0xdc>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a2b      	ldr	r2, [pc, #172]	; (8001464 <SystemClock_Config+0xdc>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <SystemClock_Config+0xdc>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	4b26      	ldr	r3, [pc, #152]	; (8001468 <SystemClock_Config+0xe0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a25      	ldr	r2, [pc, #148]	; (8001468 <SystemClock_Config+0xe0>)
 80013d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <SystemClock_Config+0xe0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e4:	2302      	movs	r3, #2
 80013e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ec:	2310      	movs	r3, #16
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f0:	2302      	movs	r3, #2
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f8:	2308      	movs	r3, #8
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013fc:	23b4      	movs	r3, #180	; 0xb4
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001404:	2302      	movs	r3, #2
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001408:	2302      	movs	r3, #2
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4618      	mov	r0, r3
 8001412:	f003 f819 	bl	8004448 <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800141c:	f000 fb84 	bl	8001b28 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001420:	f002 fd08 	bl	8003e34 <HAL_PWREx_EnableOverDrive>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800142a:	f000 fb7d 	bl	8001b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142e:	230f      	movs	r3, #15
 8001430:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001432:	2302      	movs	r3, #2
 8001434:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800143a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800143e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001444:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	2105      	movs	r1, #5
 800144c:	4618      	mov	r0, r3
 800144e:	f002 fd41 	bl	8003ed4 <HAL_RCC_ClockConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001458:	f000 fb66 	bl	8001b28 <Error_Handler>
  }
}
 800145c:	bf00      	nop
 800145e:	3750      	adds	r7, #80	; 0x50
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40007000 	.word	0x40007000

0800146c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_SPI1_Init+0x64>)
 8001472:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <MX_SPI1_Init+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <MX_SPI1_Init+0x64>)
 8001478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800147c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_SPI1_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_SPI1_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_SPI1_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_SPI1_Init+0x64>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_SPI1_Init+0x64>)
 8001498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_SPI1_Init+0x64>)
 80014a0:	2210      	movs	r2, #16
 80014a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <MX_SPI1_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_SPI1_Init+0x64>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_SPI1_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_SPI1_Init+0x64>)
 80014b8:	220a      	movs	r2, #10
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_SPI1_Init+0x64>)
 80014be:	f003 fa1d 	bl	80048fc <HAL_SPI_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014c8:	f000 fb2e 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200006ec 	.word	0x200006ec
 80014d4:	40013000 	.word	0x40013000

080014d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_SPI3_Init+0x64>)
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <MX_SPI3_Init+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_SPI3_Init+0x64>)
 80014e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_SPI3_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_SPI3_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_SPI3_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_SPI3_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_SPI3_Init+0x64>)
 8001504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001508:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_SPI3_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <MX_SPI3_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_SPI3_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <MX_SPI3_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_SPI3_Init+0x64>)
 8001524:	220a      	movs	r2, #10
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_SPI3_Init+0x64>)
 800152a:	f003 f9e7 	bl	80048fc <HAL_SPI_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001534:	f000 faf8 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000410 	.word	0x20000410
 8001540:	40003c00 	.word	0x40003c00

08001544 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001554:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_TIM6_Init+0x68>)
 8001556:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_TIM6_Init+0x64>)
 800155a:	f242 3227 	movw	r2, #8999	; 0x2327
 800155e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800156c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001576:	f004 f835 	bl	80055e4 <HAL_TIM_Base_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001580:	f000 fad2 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM6_Init+0x64>)
 8001592:	f004 fa71 	bl	8005a78 <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800159c:	f000 fac4 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000678 	.word	0x20000678
 80015ac:	40001000 	.word	0x40001000

080015b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_TIM7_Init+0x64>)
 80015c0:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_TIM7_Init+0x68>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_TIM7_Init+0x64>)
 80015c6:	f242 3227 	movw	r2, #8999	; 0x2327
 80015ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_TIM7_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_TIM7_Init+0x64>)
 80015d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_TIM7_Init+0x64>)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <MX_TIM7_Init+0x64>)
 80015e2:	f003 ffff 	bl	80055e4 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015ec:	f000 fa9c 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_TIM7_Init+0x64>)
 80015fe:	f004 fa3b 	bl	8005a78 <HAL_TIMEx_MasterConfigSynchronization>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001608:	f000 fa8e 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000a18 	.word	0x20000a18
 8001618:	40001400 	.word	0x40001400

0800161c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_TIM10_Init+0x40>)
 8001622:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <MX_TIM10_Init+0x44>)
 8001624:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <MX_TIM10_Init+0x40>)
 8001628:	f242 3227 	movw	r2, #8999	; 0x2327
 800162c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <MX_TIM10_Init+0x40>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_TIM10_Init+0x40>)
 8001636:	f242 7210 	movw	r2, #10000	; 0x2710
 800163a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_TIM10_Init+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_TIM10_Init+0x40>)
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_TIM10_Init+0x40>)
 800164a:	f003 ffcb 	bl	80055e4 <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001654:	f000 fa68 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000374 	.word	0x20000374
 8001660:	40014400 	.word	0x40014400

08001664 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_UART5_Init+0x50>)
 800166a:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <MX_UART5_Init+0x54>)
 800166c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_UART5_Init+0x50>)
 8001670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001674:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_UART5_Init+0x50>)
 8001678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800167c:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <MX_UART5_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <MX_UART5_Init+0x50>)
 8001686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800168a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_UART5_Init+0x50>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <MX_UART5_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_UART5_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_UART5_Init+0x50>)
 80016a0:	f004 fa7a 	bl	8005b98 <HAL_UART_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 80016aa:	f000 fa3d 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000468 	.word	0x20000468
 80016b8:	40005000 	.word	0x40005000

080016bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_USART1_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016c8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80016cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016f4:	f004 fa50 	bl	8005b98 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f000 fa13 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000568 	.word	0x20000568
 800170c:	40011000 	.word	0x40011000

08001710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <MX_USART2_UART_Init+0x50>)
 8001718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800171c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001748:	f004 fa26 	bl	8005b98 <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001752:	f000 f9e9 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000744 	.word	0x20000744
 8001760:	40004400 	.word	0x40004400

08001764 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART3_UART_Init+0x4c>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <MX_USART3_UART_Init+0x50>)
 800176c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <MX_USART3_UART_Init+0x4c>)
 8001770:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001774:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART3_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART3_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART3_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART3_UART_Init+0x4c>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART3_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART3_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART3_UART_Init+0x4c>)
 800179c:	f004 f9fc 	bl	8005b98 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017a6:	f000 f9bf 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000104 	.word	0x20000104
 80017b4:	40004800 	.word	0x40004800

080017b8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <MX_DMA_Init+0x88>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <MX_DMA_Init+0x88>)
 80017c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <MX_DMA_Init+0x88>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <MX_DMA_Init+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <MX_DMA_Init+0x88>)
 80017e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_DMA_Init+0x88>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	200b      	movs	r0, #11
 80017fc:	f001 fd13 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001800:	200b      	movs	r0, #11
 8001802:	f001 fd2c 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	200c      	movs	r0, #12
 800180c:	f001 fd0b 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001810:	200c      	movs	r0, #12
 8001812:	f001 fd24 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2011      	movs	r0, #17
 800181c:	f001 fd03 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001820:	2011      	movs	r0, #17
 8001822:	f001 fd1c 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	203a      	movs	r0, #58	; 0x3a
 800182c:	f001 fcfb 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001830:	203a      	movs	r0, #58	; 0x3a
 8001832:	f001 fd14 	bl	800325e <HAL_NVIC_EnableIRQ>

}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <MX_GPIO_Init+0x1b8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a66      	ldr	r2, [pc, #408]	; (80019fc <MX_GPIO_Init+0x1b8>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b64      	ldr	r3, [pc, #400]	; (80019fc <MX_GPIO_Init+0x1b8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b60      	ldr	r3, [pc, #384]	; (80019fc <MX_GPIO_Init+0x1b8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a5f      	ldr	r2, [pc, #380]	; (80019fc <MX_GPIO_Init+0x1b8>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b5d      	ldr	r3, [pc, #372]	; (80019fc <MX_GPIO_Init+0x1b8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	4b59      	ldr	r3, [pc, #356]	; (80019fc <MX_GPIO_Init+0x1b8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a58      	ldr	r2, [pc, #352]	; (80019fc <MX_GPIO_Init+0x1b8>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b56      	ldr	r3, [pc, #344]	; (80019fc <MX_GPIO_Init+0x1b8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	4b52      	ldr	r3, [pc, #328]	; (80019fc <MX_GPIO_Init+0x1b8>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a51      	ldr	r2, [pc, #324]	; (80019fc <MX_GPIO_Init+0x1b8>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <MX_GPIO_Init+0x1b8>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	210e      	movs	r1, #14
 80018ce:	484c      	ldr	r0, [pc, #304]	; (8001a00 <MX_GPIO_Init+0x1bc>)
 80018d0:	f002 fa96 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f248 0112 	movw	r1, #32786	; 0x8012
 80018da:	484a      	ldr	r0, [pc, #296]	; (8001a04 <MX_GPIO_Init+0x1c0>)
 80018dc:	f002 fa90 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80018e6:	4846      	ldr	r0, [pc, #280]	; (8001a00 <MX_GPIO_Init+0x1bc>)
 80018e8:	f002 fa8a 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|SSV_Pin|acel2_Pin|acel2_2_Pin 
 80018ec:	2200      	movs	r2, #0
 80018ee:	f24f 0142 	movw	r1, #61506	; 0xf042
 80018f2:	4845      	ldr	r0, [pc, #276]	; (8001a08 <MX_GPIO_Init+0x1c4>)
 80018f4:	f002 fa84 	bl	8003e00 <HAL_GPIO_WritePin>
                          |Motor_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018fe:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <MX_GPIO_Init+0x1c8>)
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	483c      	ldr	r0, [pc, #240]	; (8001a00 <MX_GPIO_Init+0x1bc>)
 800190e:	f002 f8cd 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001912:	230e      	movs	r3, #14
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	4835      	ldr	r0, [pc, #212]	; (8001a00 <MX_GPIO_Init+0x1bc>)
 800192a:	f002 f8bf 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 800192e:	f240 4301 	movw	r3, #1025	; 0x401
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4830      	ldr	r0, [pc, #192]	; (8001a04 <MX_GPIO_Init+0x1c0>)
 8001944:	f002 f8b2 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pins : acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001948:	f248 0312 	movw	r3, #32786	; 0x8012
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4828      	ldr	r0, [pc, #160]	; (8001a04 <MX_GPIO_Init+0x1c0>)
 8001962:	f002 f8a3 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|acel1_Pin|acel1_1_Pin;
 8001966:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	4820      	ldr	r0, [pc, #128]	; (8001a00 <MX_GPIO_Init+0x1bc>)
 8001980:	f002 f894 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001984:	2302      	movs	r3, #2
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198c:	2301      	movs	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	481b      	ldr	r0, [pc, #108]	; (8001a08 <MX_GPIO_Init+0x1c4>)
 800199c:	f002 f886 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pins : SSV_Pin acel2_2_Pin Motor_Pin PB6 */
  GPIO_InitStruct.Pin = SSV_Pin|acel2_2_Pin|Motor_Pin|GPIO_PIN_6;
 80019a0:	f24d 0340 	movw	r3, #53312	; 0xd040
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	4813      	ldr	r0, [pc, #76]	; (8001a08 <MX_GPIO_Init+0x1c4>)
 80019ba:	f002 f877 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 80019be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <MX_GPIO_Init+0x1c4>)
 80019d8:	f002 f868 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019dc:	2338      	movs	r3, #56	; 0x38
 80019de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	4806      	ldr	r0, [pc, #24]	; (8001a08 <MX_GPIO_Init+0x1c4>)
 80019f0:	f002 f85c 	bl	8003aac <HAL_GPIO_Init>

}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	; 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020800 	.word	0x40020800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	10210000 	.word	0x10210000

08001a10 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Обработчик прерываний Usartа по приему
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if(huart==&huart5)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a20      	ldr	r2, [pc, #128]	; (8001a9c <HAL_UART_RxCpltCallback+0x8c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d138      	bne.n	8001a92 <HAL_UART_RxCpltCallback+0x82>
	{
		// Остановка таймера, говорящая о том, что ЦКТ подключен
		HAL_TIM_Base_Stop_IT(&htim10);
 8001a20:	481f      	ldr	r0, [pc, #124]	; (8001aa0 <HAL_UART_RxCpltCallback+0x90>)
 8001a22:	f003 fe2e 	bl	8005682 <HAL_TIM_Base_Stop_IT>
		TIM10->CNT=0;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <HAL_UART_RxCpltCallback+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
        // Включение 2 светодиода, если ЦКТ подключен
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2104      	movs	r1, #4
 8001a30:	481d      	ldr	r0, [pc, #116]	; (8001aa8 <HAL_UART_RxCpltCallback+0x98>)
 8001a32:	f002 f9e5 	bl	8003e00 <HAL_GPIO_WritePin>
		// Если данные синхронизированы
		if(BuffCkt[0]==0x7C && BuffCkt[1]==0x6E && BuffCkt[2]==0xA1 && BuffCkt[3]==0x2C )
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_UART_RxCpltCallback+0x9c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b7c      	cmp	r3, #124	; 0x7c
 8001a3c:	d123      	bne.n	8001a86 <HAL_UART_RxCpltCallback+0x76>
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_UART_RxCpltCallback+0x9c>)
 8001a40:	785b      	ldrb	r3, [r3, #1]
 8001a42:	2b6e      	cmp	r3, #110	; 0x6e
 8001a44:	d11f      	bne.n	8001a86 <HAL_UART_RxCpltCallback+0x76>
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_UART_RxCpltCallback+0x9c>)
 8001a48:	789b      	ldrb	r3, [r3, #2]
 8001a4a:	2ba1      	cmp	r3, #161	; 0xa1
 8001a4c:	d11b      	bne.n	8001a86 <HAL_UART_RxCpltCallback+0x76>
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_UART_RxCpltCallback+0x9c>)
 8001a50:	78db      	ldrb	r3, [r3, #3]
 8001a52:	2b2c      	cmp	r3, #44	; 0x2c
 8001a54:	d117      	bne.n	8001a86 <HAL_UART_RxCpltCallback+0x76>
		{
			// Готов к записи
			ReadyToWrite=1;
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_UART_RxCpltCallback+0xa0>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
			//  Время в мс, когда пришли данные
			reciveTime = HAL_GetTick();
 8001a5c:	f001 fada 	bl	8003014 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_UART_RxCpltCallback+0xa4>)
 8001a64:	601a      	str	r2, [r3, #0]
			// Перезаписываем данные в массив посредник
			for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	e008      	b.n	8001a7e <HAL_UART_RxCpltCallback+0x6e>
			{
				BuffMidW[i]=BuffCkt[i];
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	490e      	ldr	r1, [pc, #56]	; (8001aac <HAL_UART_RxCpltCallback+0x9c>)
 8001a72:	5c89      	ldrb	r1, [r1, r2]
 8001a74:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_UART_RxCpltCallback+0xa8>)
 8001a76:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	2b2a      	cmp	r3, #42	; 0x2a
 8001a82:	d9f3      	bls.n	8001a6c <HAL_UART_RxCpltCallback+0x5c>
 8001a84:	e002      	b.n	8001a8c <HAL_UART_RxCpltCallback+0x7c>
			}
		} else  // Если данные не синхронизированы
		{
			readFlag=1;
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_UART_RxCpltCallback+0xac>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
		}
		// стартуем таймер для дальнейшей проверки на подключение ЦКТ
		HAL_TIM_Base_Start_IT(&htim10);
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <HAL_UART_RxCpltCallback+0x90>)
 8001a8e:	f003 fdd4 	bl	800563a <HAL_TIM_Base_Start_IT>
	}

}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000468 	.word	0x20000468
 8001aa0:	20000374 	.word	0x20000374
 8001aa4:	40014400 	.word	0x40014400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	200003e4 	.word	0x200003e4
 8001ab0:	20000067 	.word	0x20000067
 8001ab4:	20000060 	.word	0x20000060
 8001ab8:	2000064c 	.word	0x2000064c
 8001abc:	200006ea 	.word	0x200006ea

08001ac0 <HAL_UART_TxCpltCallback>:
// Обработчик прерываний Usartа по передаче
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]


}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	if(htim==&htim10)  // Если на ЦКТ ничего не пришло, выключаем 2 светодиод
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d112      	bne.n	8001b0a <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		TIM10->CNT=0;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim10);
 8001aea:	480a      	ldr	r0, [pc, #40]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001aec:	f003 fda5 	bl	800563a <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2104      	movs	r1, #4
 8001af4:	4809      	ldr	r0, [pc, #36]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001af6:	f002 f983 	bl	8003e00 <HAL_GPIO_WritePin>
		HAL_UART_Abort(&huart5);
 8001afa:	4809      	ldr	r0, [pc, #36]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001afc:	f004 f91a 	bl	8005d34 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 8001b00:	222b      	movs	r2, #43	; 0x2b
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b04:	4806      	ldr	r0, [pc, #24]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b06:	f004 f895 	bl	8005c34 <HAL_UART_Receive_DMA>
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000374 	.word	0x20000374
 8001b18:	40014400 	.word	0x40014400
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	20000468 	.word	0x20000468
 8001b24:	200003e4 	.word	0x200003e4

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 8001b42:	1df9      	adds	r1, r7, #7
 8001b44:	230a      	movs	r3, #10
 8001b46:	2201      	movs	r2, #1
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <SPICmd8bit+0x20>)
 8001b4a:	f002 ff3b 	bl	80049c4 <HAL_SPI_Transmit>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200006ec 	.word	0x200006ec

08001b5c <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8001b66:	1df9      	adds	r1, r7, #7
 8001b68:	230a      	movs	r3, #10
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <SPIRead8bit+0x20>)
 8001b6e:	f003 f85d 	bl	8004c2c <HAL_SPI_Receive>

  return(RdPara);
 8001b72:	79fb      	ldrb	r3, [r7, #7]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200006ec 	.word	0x200006ec

08001b80 <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2140      	movs	r1, #64	; 0x40
 8001b8e:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <SPIRead+0x38>)
 8001b90:	f002 f936 	bl	8003e00 <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ffce 	bl	8001b38 <SPICmd8bit>
  tmp = SPIRead8bit();
 8001b9c:	f7ff ffde 	bl	8001b5c <SPIRead8bit>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2140      	movs	r1, #64	; 0x40
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <SPIRead+0x38>)
 8001baa:	f002 f929 	bl	8003e00 <HAL_GPIO_WritePin>
  return(tmp);
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40020400 	.word	0x40020400

08001bbc <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	460a      	mov	r2, r1
 8001bc6:	71fb      	strb	r3, [r7, #7]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2140      	movs	r1, #64	; 0x40
 8001bd0:	480b      	ldr	r0, [pc, #44]	; (8001c00 <SPIWrite+0x44>)
 8001bd2:	f002 f915 	bl	8003e00 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ffaa 	bl	8001b38 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001be4:	79bb      	ldrb	r3, [r7, #6]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ffa6 	bl	8001b38 <SPICmd8bit>
	NSS_H();
 8001bec:	2201      	movs	r2, #1
 8001bee:	2140      	movs	r1, #64	; 0x40
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <SPIWrite+0x44>)
 8001bf2:	f002 f905 	bl	8003e00 <HAL_GPIO_WritePin>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40020400 	.word	0x40020400

08001c04 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001c14:	79bb      	ldrb	r3, [r7, #6]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d91f      	bls.n	8001c5a <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2140      	movs	r1, #64	; 0x40
 8001c1e:	4811      	ldr	r0, [pc, #68]	; (8001c64 <SPIBurstRead+0x60>)
 8001c20:	f002 f8ee 	bl	8003e00 <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff86 	bl	8001b38 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e009      	b.n	8001c46 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	18d4      	adds	r4, r2, r3
 8001c38:	f7ff ff90 	bl	8001b5c <SPIRead8bit>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	3301      	adds	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d3f1      	bcc.n	8001c32 <SPIBurstRead+0x2e>
      NSS_H();
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2140      	movs	r1, #64	; 0x40
 8001c52:	4804      	ldr	r0, [pc, #16]	; (8001c64 <SPIBurstRead+0x60>)
 8001c54:	f002 f8d4 	bl	8003e00 <HAL_GPIO_WritePin>
 8001c58:	e000      	b.n	8001c5c <SPIBurstRead+0x58>
    return;
 8001c5a:	bf00      	nop
  }
}
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd90      	pop	{r4, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40020400 	.word	0x40020400

08001c68 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	4613      	mov	r3, r2
 8001c76:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001c78:	79bb      	ldrb	r3, [r7, #6]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d922      	bls.n	8001cc4 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2140      	movs	r1, #64	; 0x40
 8001c82:	4812      	ldr	r0, [pc, #72]	; (8001ccc <BurstWrite+0x64>)
 8001c84:	f002 f8bc 	bl	8003e00 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff51 	bl	8001b38 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	e009      	b.n	8001cb0 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff47 	bl	8001b38 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	3301      	adds	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d3f1      	bcc.n	8001c9c <BurstWrite+0x34>
    NSS_H();
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2140      	movs	r1, #64	; 0x40
 8001cbc:	4803      	ldr	r0, [pc, #12]	; (8001ccc <BurstWrite+0x64>)
 8001cbe:	f002 f89f 	bl	8003e00 <HAL_GPIO_WritePin>
 8001cc2:	e000      	b.n	8001cc6 <BurstWrite+0x5e>
    return;
 8001cc4:	bf00      	nop
  }
}
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <HAL_MspInit+0x4c>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_MspInit+0x4c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_MspInit+0x4c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a4e      	ldr	r2, [pc, #312]	; (8001e78 <HAL_SPI_MspInit+0x158>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d12c      	bne.n	8001d9c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	4b4d      	ldr	r3, [pc, #308]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a4c      	ldr	r2, [pc, #304]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b4a      	ldr	r3, [pc, #296]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a45      	ldr	r2, [pc, #276]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d7a:	23e0      	movs	r3, #224	; 0xe0
 8001d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 031c 	add.w	r3, r7, #28
 8001d92:	4619      	mov	r1, r3
 8001d94:	483a      	ldr	r0, [pc, #232]	; (8001e80 <HAL_SPI_MspInit+0x160>)
 8001d96:	f001 fe89 	bl	8003aac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d9a:	e068      	b.n	8001e6e <HAL_SPI_MspInit+0x14e>
  else if(hspi->Instance==SPI3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a38      	ldr	r2, [pc, #224]	; (8001e84 <HAL_SPI_MspInit+0x164>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d163      	bne.n	8001e6e <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a33      	ldr	r2, [pc, #204]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a2c      	ldr	r2, [pc, #176]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_SPI_MspInit+0x15c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4619      	mov	r1, r3
 8001e14:	481c      	ldr	r0, [pc, #112]	; (8001e88 <HAL_SPI_MspInit+0x168>)
 8001e16:	f001 fe49 	bl	8003aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e2c:	2306      	movs	r3, #6
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4815      	ldr	r0, [pc, #84]	; (8001e8c <HAL_SPI_MspInit+0x16c>)
 8001e38:	f001 fe38 	bl	8003aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e4e:	2306      	movs	r3, #6
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	4619      	mov	r1, r3
 8001e58:	480c      	ldr	r0, [pc, #48]	; (8001e8c <HAL_SPI_MspInit+0x16c>)
 8001e5a:	f001 fe27 	bl	8003aac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2033      	movs	r0, #51	; 0x33
 8001e64:	f001 f9df 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001e68:	2033      	movs	r0, #51	; 0x33
 8001e6a:	f001 f9f8 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8001e6e:	bf00      	nop
 8001e70:	3730      	adds	r7, #48	; 0x30
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40013000 	.word	0x40013000
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40003c00 	.word	0x40003c00
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800

08001e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <HAL_TIM_Base_MspInit+0xb8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d116      	bne.n	8001ed0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_TIM_Base_MspInit+0xbc>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a28      	ldr	r2, [pc, #160]	; (8001f4c <HAL_TIM_Base_MspInit+0xbc>)
 8001eac:	f043 0310 	orr.w	r3, r3, #16
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <HAL_TIM_Base_MspInit+0xbc>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2036      	movs	r0, #54	; 0x36
 8001ec4:	f001 f9af 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ec8:	2036      	movs	r0, #54	; 0x36
 8001eca:	f001 f9c8 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001ece:	e036      	b.n	8001f3e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <HAL_TIM_Base_MspInit+0xc0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d116      	bne.n	8001f08 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_TIM_Base_MspInit+0xbc>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <HAL_TIM_Base_MspInit+0xbc>)
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <HAL_TIM_Base_MspInit+0xbc>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2037      	movs	r0, #55	; 0x37
 8001efc:	f001 f993 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f00:	2037      	movs	r0, #55	; 0x37
 8001f02:	f001 f9ac 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8001f06:	e01a      	b.n	8001f3e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_TIM_Base_MspInit+0xc4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d115      	bne.n	8001f3e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_TIM_Base_MspInit+0xbc>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <HAL_TIM_Base_MspInit+0xbc>)
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f20:	6453      	str	r3, [r2, #68]	; 0x44
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_TIM_Base_MspInit+0xbc>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	2019      	movs	r0, #25
 8001f34:	f001 f977 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f38:	2019      	movs	r0, #25
 8001f3a:	f001 f990 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40001000 	.word	0x40001000
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40001400 	.word	0x40001400
 8001f54:	40014400 	.word	0x40014400

08001f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b092      	sub	sp, #72	; 0x48
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a87      	ldr	r2, [pc, #540]	; (8002194 <HAL_UART_MspInit+0x23c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	f040 8083 	bne.w	8002082 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f80:	4b85      	ldr	r3, [pc, #532]	; (8002198 <HAL_UART_MspInit+0x240>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	4a84      	ldr	r2, [pc, #528]	; (8002198 <HAL_UART_MspInit+0x240>)
 8001f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8c:	4b82      	ldr	r3, [pc, #520]	; (8002198 <HAL_UART_MspInit+0x240>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f9c:	4b7e      	ldr	r3, [pc, #504]	; (8002198 <HAL_UART_MspInit+0x240>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	4a7d      	ldr	r2, [pc, #500]	; (8002198 <HAL_UART_MspInit+0x240>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa8:	4b7b      	ldr	r3, [pc, #492]	; (8002198 <HAL_UART_MspInit+0x240>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb8:	4b77      	ldr	r3, [pc, #476]	; (8002198 <HAL_UART_MspInit+0x240>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	4a76      	ldr	r2, [pc, #472]	; (8002198 <HAL_UART_MspInit+0x240>)
 8001fbe:	f043 0308 	orr.w	r3, r3, #8
 8001fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc4:	4b74      	ldr	r3, [pc, #464]	; (8002198 <HAL_UART_MspInit+0x240>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fea:	4619      	mov	r1, r3
 8001fec:	486b      	ldr	r0, [pc, #428]	; (800219c <HAL_UART_MspInit+0x244>)
 8001fee:	f001 fd5d 	bl	8003aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002002:	2308      	movs	r3, #8
 8002004:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002006:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800200a:	4619      	mov	r1, r3
 800200c:	4864      	ldr	r0, [pc, #400]	; (80021a0 <HAL_UART_MspInit+0x248>)
 800200e:	f001 fd4d 	bl	8003aac <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002012:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 8002014:	4a64      	ldr	r2, [pc, #400]	; (80021a8 <HAL_UART_MspInit+0x250>)
 8002016:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002018:	4b62      	ldr	r3, [pc, #392]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 800201a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800201e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002020:	4b60      	ldr	r3, [pc, #384]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002026:	4b5f      	ldr	r3, [pc, #380]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800202c:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 800202e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002032:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002034:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800203a:	4b5a      	ldr	r3, [pc, #360]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002040:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 8002042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002046:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002048:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 800204a:	2200      	movs	r2, #0
 800204c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800204e:	4b55      	ldr	r3, [pc, #340]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 8002050:	2200      	movs	r2, #0
 8002052:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002054:	4853      	ldr	r0, [pc, #332]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 8002056:	f001 f91d 	bl	8003294 <HAL_DMA_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002060:	f7ff fd62 	bl	8001b28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a4f      	ldr	r2, [pc, #316]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 8002068:	635a      	str	r2, [r3, #52]	; 0x34
 800206a:	4a4e      	ldr	r2, [pc, #312]	; (80021a4 <HAL_UART_MspInit+0x24c>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002070:	2200      	movs	r2, #0
 8002072:	2100      	movs	r1, #0
 8002074:	2035      	movs	r0, #53	; 0x35
 8002076:	f001 f8d6 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800207a:	2035      	movs	r0, #53	; 0x35
 800207c:	f001 f8ef 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002080:	e18e      	b.n	80023a0 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a49      	ldr	r2, [pc, #292]	; (80021ac <HAL_UART_MspInit+0x254>)
 8002088:	4293      	cmp	r3, r2
 800208a:	f040 8099 	bne.w	80021c0 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
 8002092:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_UART_MspInit+0x240>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	4a40      	ldr	r2, [pc, #256]	; (8002198 <HAL_UART_MspInit+0x240>)
 8002098:	f043 0310 	orr.w	r3, r3, #16
 800209c:	6453      	str	r3, [r2, #68]	; 0x44
 800209e:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_UART_MspInit+0x240>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <HAL_UART_MspInit+0x240>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a39      	ldr	r2, [pc, #228]	; (8002198 <HAL_UART_MspInit+0x240>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_UART_MspInit+0x240>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_UART_MspInit+0x240>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a32      	ldr	r2, [pc, #200]	; (8002198 <HAL_UART_MspInit+0x240>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_UART_MspInit+0x240>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020f4:	2307      	movs	r3, #7
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020fc:	4619      	mov	r1, r3
 80020fe:	482c      	ldr	r0, [pc, #176]	; (80021b0 <HAL_UART_MspInit+0x258>)
 8002100:	f001 fcd4 	bl	8003aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002114:	2307      	movs	r3, #7
 8002116:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800211c:	4619      	mov	r1, r3
 800211e:	4825      	ldr	r0, [pc, #148]	; (80021b4 <HAL_UART_MspInit+0x25c>)
 8002120:	f001 fcc4 	bl	8003aac <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_UART_MspInit+0x260>)
 8002126:	4a25      	ldr	r2, [pc, #148]	; (80021bc <HAL_UART_MspInit+0x264>)
 8002128:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800212a:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_UART_MspInit+0x260>)
 800212c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002130:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_UART_MspInit+0x260>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002138:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <HAL_UART_MspInit+0x260>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_UART_MspInit+0x260>)
 8002140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002144:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_UART_MspInit+0x260>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_UART_MspInit+0x260>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_UART_MspInit+0x260>)
 8002154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002158:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_UART_MspInit+0x260>)
 800215c:	2200      	movs	r2, #0
 800215e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_UART_MspInit+0x260>)
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002166:	4814      	ldr	r0, [pc, #80]	; (80021b8 <HAL_UART_MspInit+0x260>)
 8002168:	f001 f894 	bl	8003294 <HAL_DMA_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8002172:	f7ff fcd9 	bl	8001b28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <HAL_UART_MspInit+0x260>)
 800217a:	635a      	str	r2, [r3, #52]	; 0x34
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <HAL_UART_MspInit+0x260>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	2025      	movs	r0, #37	; 0x25
 8002188:	f001 f84d 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800218c:	2025      	movs	r0, #37	; 0x25
 800218e:	f001 f866 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8002192:	e105      	b.n	80023a0 <HAL_UART_MspInit+0x448>
 8002194:	40005000 	.word	0x40005000
 8002198:	40023800 	.word	0x40023800
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	20000784 	.word	0x20000784
 80021a8:	40026010 	.word	0x40026010
 80021ac:	40011000 	.word	0x40011000
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	200004a8 	.word	0x200004a8
 80021bc:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a78      	ldr	r2, [pc, #480]	; (80023a8 <HAL_UART_MspInit+0x450>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d162      	bne.n	8002290 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	4b77      	ldr	r3, [pc, #476]	; (80023ac <HAL_UART_MspInit+0x454>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a76      	ldr	r2, [pc, #472]	; (80023ac <HAL_UART_MspInit+0x454>)
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b74      	ldr	r3, [pc, #464]	; (80023ac <HAL_UART_MspInit+0x454>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	4b70      	ldr	r3, [pc, #448]	; (80023ac <HAL_UART_MspInit+0x454>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a6f      	ldr	r2, [pc, #444]	; (80023ac <HAL_UART_MspInit+0x454>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <HAL_UART_MspInit+0x454>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002202:	230c      	movs	r3, #12
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002212:	2307      	movs	r3, #7
 8002214:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800221a:	4619      	mov	r1, r3
 800221c:	4864      	ldr	r0, [pc, #400]	; (80023b0 <HAL_UART_MspInit+0x458>)
 800221e:	f001 fc45 	bl	8003aac <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002222:	4b64      	ldr	r3, [pc, #400]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 8002224:	4a64      	ldr	r2, [pc, #400]	; (80023b8 <HAL_UART_MspInit+0x460>)
 8002226:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002228:	4b62      	ldr	r3, [pc, #392]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 800222a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800222e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002230:	4b60      	ldr	r3, [pc, #384]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002236:	4b5f      	ldr	r3, [pc, #380]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800223c:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 800223e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002242:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002244:	4b5b      	ldr	r3, [pc, #364]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800224a:	4b5a      	ldr	r3, [pc, #360]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002250:	4b58      	ldr	r3, [pc, #352]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002256:	4b57      	ldr	r3, [pc, #348]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 8002258:	2200      	movs	r2, #0
 800225a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800225c:	4b55      	ldr	r3, [pc, #340]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 800225e:	2200      	movs	r2, #0
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002262:	4854      	ldr	r0, [pc, #336]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 8002264:	f001 f816 	bl	8003294 <HAL_DMA_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_UART_MspInit+0x31a>
      Error_Handler();
 800226e:	f7ff fc5b 	bl	8001b28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
 8002278:	4a4e      	ldr	r2, [pc, #312]	; (80023b4 <HAL_UART_MspInit+0x45c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2026      	movs	r0, #38	; 0x26
 8002284:	f000 ffcf 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002288:	2026      	movs	r0, #38	; 0x26
 800228a:	f000 ffe8 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 800228e:	e087      	b.n	80023a0 <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a49      	ldr	r2, [pc, #292]	; (80023bc <HAL_UART_MspInit+0x464>)
 8002296:	4293      	cmp	r3, r2
 8002298:	f040 8082 	bne.w	80023a0 <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	4b42      	ldr	r3, [pc, #264]	; (80023ac <HAL_UART_MspInit+0x454>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	4a41      	ldr	r2, [pc, #260]	; (80023ac <HAL_UART_MspInit+0x454>)
 80022a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022aa:	6413      	str	r3, [r2, #64]	; 0x40
 80022ac:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_UART_MspInit+0x454>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_UART_MspInit+0x454>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	4a3a      	ldr	r2, [pc, #232]	; (80023ac <HAL_UART_MspInit+0x454>)
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	6313      	str	r3, [r2, #48]	; 0x30
 80022c8:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_UART_MspInit+0x454>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_UART_MspInit+0x454>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	4a33      	ldr	r2, [pc, #204]	; (80023ac <HAL_UART_MspInit+0x454>)
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	6313      	str	r3, [r2, #48]	; 0x30
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_UART_MspInit+0x454>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022f0:	2320      	movs	r3, #32
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002300:	2307      	movs	r3, #7
 8002302:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002304:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002308:	4619      	mov	r1, r3
 800230a:	482d      	ldr	r0, [pc, #180]	; (80023c0 <HAL_UART_MspInit+0x468>)
 800230c:	f001 fbce 	bl	8003aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002322:	2307      	movs	r3, #7
 8002324:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800232a:	4619      	mov	r1, r3
 800232c:	4825      	ldr	r0, [pc, #148]	; (80023c4 <HAL_UART_MspInit+0x46c>)
 800232e:	f001 fbbd 	bl	8003aac <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002332:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <HAL_UART_MspInit+0x470>)
 8002334:	4a25      	ldr	r2, [pc, #148]	; (80023cc <HAL_UART_MspInit+0x474>)
 8002336:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_UART_MspInit+0x470>)
 800233a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800233e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002340:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_UART_MspInit+0x470>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_UART_MspInit+0x470>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <HAL_UART_MspInit+0x470>)
 800234e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002352:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_UART_MspInit+0x470>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_UART_MspInit+0x470>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_UART_MspInit+0x470>)
 8002362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002366:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_UART_MspInit+0x470>)
 800236a:	2200      	movs	r2, #0
 800236c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_UART_MspInit+0x470>)
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002374:	4814      	ldr	r0, [pc, #80]	; (80023c8 <HAL_UART_MspInit+0x470>)
 8002376:	f000 ff8d 	bl	8003294 <HAL_DMA_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8002380:	f7ff fbd2 	bl	8001b28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_UART_MspInit+0x470>)
 8002388:	635a      	str	r2, [r3, #52]	; 0x34
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <HAL_UART_MspInit+0x470>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2100      	movs	r1, #0
 8002394:	2027      	movs	r0, #39	; 0x27
 8002396:	f000 ff46 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800239a:	2027      	movs	r0, #39	; 0x27
 800239c:	f000 ff5f 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 80023a0:	bf00      	nop
 80023a2:	3748      	adds	r7, #72	; 0x48
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40004400 	.word	0x40004400
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	20000508 	.word	0x20000508
 80023b8:	400260a0 	.word	0x400260a0
 80023bc:	40004800 	.word	0x40004800
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020400 	.word	0x40020400
 80023c8:	200000a0 	.word	0x200000a0
 80023cc:	40026028 	.word	0x40026028

080023d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <HardFault_Handler+0x4>

080023e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <MemManage_Handler+0x4>

080023ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <BusFault_Handler+0x4>

080023f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <UsageFault_Handler+0x4>

080023f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002424:	f000 fde2 	bl	8002fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}

0800242c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <DMA1_Stream0_IRQHandler+0x10>)
 8002432:	f001 f8c7 	bl	80035c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000784 	.word	0x20000784

08002440 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <DMA1_Stream1_IRQHandler+0x10>)
 8002446:	f001 f8bd 	bl	80035c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200000a0 	.word	0x200000a0

08002454 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <DMA1_Stream6_IRQHandler+0x10>)
 800245a:	f001 f8b3 	bl	80035c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000508 	.word	0x20000508

08002468 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800246e:	f003 f933 	bl	80056d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000374 	.word	0x20000374

0800247c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <USART1_IRQHandler+0x10>)
 8002482:	f003 fcd9 	bl	8005e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000568 	.word	0x20000568

08002490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <USART2_IRQHandler+0x10>)
 8002496:	f003 fccf 	bl	8005e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000744 	.word	0x20000744

080024a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <USART3_IRQHandler+0x10>)
 80024aa:	f003 fcc5 	bl	8005e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000104 	.word	0x20000104

080024b8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <SPI3_IRQHandler+0x10>)
 80024be:	f002 fe61 	bl	8005184 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000410 	.word	0x20000410

080024cc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <UART5_IRQHandler+0x10>)
 80024d2:	f003 fcb1 	bl	8005e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000468 	.word	0x20000468

080024e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <TIM6_DAC_IRQHandler+0x10>)
 80024e6:	f003 f8f7 	bl	80056d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000678 	.word	0x20000678

080024f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <TIM7_IRQHandler+0x10>)
 80024fa:	f003 f8ed 	bl	80056d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000a18 	.word	0x20000a18

08002508 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <DMA2_Stream2_IRQHandler+0x10>)
 800250e:	f001 f859 	bl	80035c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200004a8 	.word	0x200004a8

0800251c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <SystemInit+0x28>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <SystemInit+0x28>)
 8002528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800252c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <SystemInit+0x28>)
 8002532:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002536:	609a      	str	r2, [r3, #8]
#endif
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002550:	f000 fd60 	bl	8003014 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <SPI_Timer_On+0x20>)
 8002558:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <SPI_Timer_On+0x24>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000a58 	.word	0x20000a58
 800256c:	20000a5c 	.word	0x20000a5c

08002570 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002574:	f000 fd4e 	bl	8003014 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <SPI_Timer_Status+0x24>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1ad2      	subs	r2, r2, r3
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <SPI_Timer_Status+0x28>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	bf34      	ite	cc
 8002588:	2301      	movcc	r3, #1
 800258a:	2300      	movcs	r3, #0
 800258c:	b2db      	uxtb	r3, r3
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000a58 	.word	0x20000a58
 8002598:	20000a5c 	.word	0x20000a5c

0800259c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;

    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 80025a6:	f107 020f 	add.w	r2, r7, #15
 80025aa:	1df9      	adds	r1, r7, #7
 80025ac:	2332      	movs	r3, #50	; 0x32
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2301      	movs	r3, #1
 80025b2:	4804      	ldr	r0, [pc, #16]	; (80025c4 <xchg_spi+0x28>)
 80025b4:	f002 fc43 	bl	8004e3e <HAL_SPI_TransmitReceive>
    return rxDat;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000410 	.word	0x20000410

080025c8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e00a      	b.n	80025ee <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	18d4      	adds	r4, r2, r3
 80025de:	20ff      	movs	r0, #255	; 0xff
 80025e0:	f7ff ffdc 	bl	800259c <xchg_spi>
 80025e4:	4603      	mov	r3, r0
 80025e6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3301      	adds	r3, #1
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d3f0      	bcc.n	80025d8 <rcvr_spi_multi+0x10>
	}
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}

080025fe <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e009      	b.n	8002622 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ffc0 	bl	800259c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d3f1      	bcc.n	800260e <xmit_spi_multi+0x10>
	}
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800263a:	f000 fceb 	bl	8003014 <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002644:	20ff      	movs	r0, #255	; 0xff
 8002646:	f7ff ffa9 	bl	800259c <xchg_spi>
 800264a:	4603      	mov	r3, r0
 800264c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2bff      	cmp	r3, #255	; 0xff
 8002652:	d007      	beq.n	8002664 <wait_ready+0x32>
 8002654:	f000 fcde 	bl	8003014 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d8ef      	bhi.n	8002644 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2bff      	cmp	r3, #255	; 0xff
 8002668:	bf0c      	ite	eq
 800266a:	2301      	moveq	r3, #1
 800266c:	2300      	movne	r3, #0
 800266e:	b2db      	uxtb	r3, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800267c:	2201      	movs	r2, #1
 800267e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002682:	4804      	ldr	r0, [pc, #16]	; (8002694 <despiselect+0x1c>)
 8002684:	f001 fbbc 	bl	8003e00 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002688:	20ff      	movs	r0, #255	; 0xff
 800268a:	f7ff ff87 	bl	800259c <xchg_spi>

}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40020000 	.word	0x40020000

08002698 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800269c:	2200      	movs	r2, #0
 800269e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a2:	480a      	ldr	r0, [pc, #40]	; (80026cc <spiselect+0x34>)
 80026a4:	f001 fbac 	bl	8003e00 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80026a8:	20ff      	movs	r0, #255	; 0xff
 80026aa:	f7ff ff77 	bl	800259c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80026ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026b2:	f7ff ffbe 	bl	8002632 <wait_ready>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <spiselect+0x28>
 80026bc:	2301      	movs	r3, #1
 80026be:	e002      	b.n	80026c6 <spiselect+0x2e>

	despiselect();
 80026c0:	f7ff ffda 	bl	8002678 <despiselect>
	return 0;	/* Timeout */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40020000 	.word	0x40020000

080026d0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80026da:	20c8      	movs	r0, #200	; 0xc8
 80026dc:	f7ff ff34 	bl	8002548 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80026e0:	20ff      	movs	r0, #255	; 0xff
 80026e2:	f7ff ff5b 	bl	800259c <xchg_spi>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2bff      	cmp	r3, #255	; 0xff
 80026ee:	d104      	bne.n	80026fa <rcvr_datablock+0x2a>
 80026f0:	f7ff ff3e 	bl	8002570 <SPI_Timer_Status>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f2      	bne.n	80026e0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2bfe      	cmp	r3, #254	; 0xfe
 80026fe:	d001      	beq.n	8002704 <rcvr_datablock+0x34>
 8002700:	2300      	movs	r3, #0
 8002702:	e00a      	b.n	800271a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002704:	6839      	ldr	r1, [r7, #0]
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ff5e 	bl	80025c8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800270c:	20ff      	movs	r0, #255	; 0xff
 800270e:	f7ff ff45 	bl	800259c <xchg_spi>
 8002712:	20ff      	movs	r0, #255	; 0xff
 8002714:	f7ff ff42 	bl	800259c <xchg_spi>

	return 1;						/* Function succeeded */
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800272e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002732:	f7ff ff7e 	bl	8002632 <wait_ready>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <xmit_datablock+0x1e>
 800273c:	2300      	movs	r3, #0
 800273e:	e01e      	b.n	800277e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff2a 	bl	800259c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	2bfd      	cmp	r3, #253	; 0xfd
 800274c:	d016      	beq.n	800277c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800274e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ff53 	bl	80025fe <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002758:	20ff      	movs	r0, #255	; 0xff
 800275a:	f7ff ff1f 	bl	800259c <xchg_spi>
 800275e:	20ff      	movs	r0, #255	; 0xff
 8002760:	f7ff ff1c 	bl	800259c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002764:	20ff      	movs	r0, #255	; 0xff
 8002766:	f7ff ff19 	bl	800259c <xchg_spi>
 800276a:	4603      	mov	r3, r0
 800276c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2b05      	cmp	r3, #5
 8002776:	d001      	beq.n	800277c <xmit_datablock+0x5a>
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <xmit_datablock+0x5c>
	}
	return 1;
 800277c:	2301      	movs	r3, #1
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	6039      	str	r1, [r7, #0]
 8002790:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	da0e      	bge.n	80027b8 <send_cmd+0x32>
		cmd &= 0x7F;
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80027a2:	2100      	movs	r1, #0
 80027a4:	2037      	movs	r0, #55	; 0x37
 80027a6:	f7ff ffee 	bl	8002786 <send_cmd>
 80027aa:	4603      	mov	r3, r0
 80027ac:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80027ae:	7bbb      	ldrb	r3, [r7, #14]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d901      	bls.n	80027b8 <send_cmd+0x32>
 80027b4:	7bbb      	ldrb	r3, [r7, #14]
 80027b6:	e051      	b.n	800285c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d008      	beq.n	80027d0 <send_cmd+0x4a>
		despiselect();
 80027be:	f7ff ff5b 	bl	8002678 <despiselect>
		if (!spiselect()) return 0xFF;
 80027c2:	f7ff ff69 	bl	8002698 <spiselect>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <send_cmd+0x4a>
 80027cc:	23ff      	movs	r3, #255	; 0xff
 80027ce:	e045      	b.n	800285c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fedf 	bl	800259c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	0e1b      	lsrs	r3, r3, #24
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fed9 	bl	800259c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	0c1b      	lsrs	r3, r3, #16
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fed3 	bl	800259c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fecd 	bl	800259c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fec8 	bl	800259c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <send_cmd+0x94>
 8002816:	2395      	movs	r3, #149	; 0x95
 8002818:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d101      	bne.n	8002824 <send_cmd+0x9e>
 8002820:	2387      	movs	r3, #135	; 0x87
 8002822:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff feb8 	bl	800259c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d102      	bne.n	8002838 <send_cmd+0xb2>
 8002832:	20ff      	movs	r0, #255	; 0xff
 8002834:	f7ff feb2 	bl	800259c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002838:	230a      	movs	r3, #10
 800283a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800283c:	20ff      	movs	r0, #255	; 0xff
 800283e:	f7ff fead 	bl	800259c <xchg_spi>
 8002842:	4603      	mov	r3, r0
 8002844:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002846:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800284a:	2b00      	cmp	r3, #0
 800284c:	da05      	bge.n	800285a <send_cmd+0xd4>
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	3b01      	subs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <send_cmd+0xb6>

	return res;							/* Return received response */
 800285a:	7bbb      	ldrb	r3, [r7, #14]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <USER_SPI_initialize+0x14>
 8002874:	2301      	movs	r3, #1
 8002876:	e0cb      	b.n	8002a10 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002878:	4b67      	ldr	r3, [pc, #412]	; (8002a18 <USER_SPI_initialize+0x1b4>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <USER_SPI_initialize+0x2a>
 8002886:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <USER_SPI_initialize+0x1b4>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	e0c0      	b.n	8002a10 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <USER_SPI_initialize+0x1b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002896:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002898:	230a      	movs	r3, #10
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e005      	b.n	80028aa <USER_SPI_initialize+0x46>
 800289e:	20ff      	movs	r0, #255	; 0xff
 80028a0:	f7ff fe7c 	bl	800259c <xchg_spi>
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f6      	bne.n	800289e <USER_SPI_initialize+0x3a>

	ty = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80028b4:	2100      	movs	r1, #0
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7ff ff65 	bl	8002786 <send_cmd>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 808b 	bne.w	80029da <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80028c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028c8:	f7ff fe3e 	bl	8002548 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80028cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80028d0:	2008      	movs	r0, #8
 80028d2:	f7ff ff58 	bl	8002786 <send_cmd>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d151      	bne.n	8002980 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	e00d      	b.n	80028fe <USER_SPI_initialize+0x9a>
 80028e2:	7bfc      	ldrb	r4, [r7, #15]
 80028e4:	20ff      	movs	r0, #255	; 0xff
 80028e6:	f7ff fe59 	bl	800259c <xchg_spi>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	f107 0310 	add.w	r3, r7, #16
 80028f2:	4423      	add	r3, r4
 80028f4:	f803 2c08 	strb.w	r2, [r3, #-8]
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	3301      	adds	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d9ee      	bls.n	80028e2 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002904:	7abb      	ldrb	r3, [r7, #10]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d167      	bne.n	80029da <USER_SPI_initialize+0x176>
 800290a:	7afb      	ldrb	r3, [r7, #11]
 800290c:	2baa      	cmp	r3, #170	; 0xaa
 800290e:	d164      	bne.n	80029da <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002910:	bf00      	nop
 8002912:	f7ff fe2d 	bl	8002570 <SPI_Timer_Status>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <USER_SPI_initialize+0xc8>
 800291c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002920:	20a9      	movs	r0, #169	; 0xa9
 8002922:	f7ff ff30 	bl	8002786 <send_cmd>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f2      	bne.n	8002912 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800292c:	f7ff fe20 	bl	8002570 <SPI_Timer_Status>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d051      	beq.n	80029da <USER_SPI_initialize+0x176>
 8002936:	2100      	movs	r1, #0
 8002938:	203a      	movs	r0, #58	; 0x3a
 800293a:	f7ff ff24 	bl	8002786 <send_cmd>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d14a      	bne.n	80029da <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	e00d      	b.n	8002966 <USER_SPI_initialize+0x102>
 800294a:	7bfc      	ldrb	r4, [r7, #15]
 800294c:	20ff      	movs	r0, #255	; 0xff
 800294e:	f7ff fe25 	bl	800259c <xchg_spi>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4423      	add	r3, r4
 800295c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	3301      	adds	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d9ee      	bls.n	800294a <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800296c:	7a3b      	ldrb	r3, [r7, #8]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <USER_SPI_initialize+0x116>
 8002976:	230c      	movs	r3, #12
 8002978:	e000      	b.n	800297c <USER_SPI_initialize+0x118>
 800297a:	2304      	movs	r3, #4
 800297c:	737b      	strb	r3, [r7, #13]
 800297e:	e02c      	b.n	80029da <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002980:	2100      	movs	r1, #0
 8002982:	20a9      	movs	r0, #169	; 0xa9
 8002984:	f7ff feff 	bl	8002786 <send_cmd>
 8002988:	4603      	mov	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	d804      	bhi.n	8002998 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800298e:	2302      	movs	r3, #2
 8002990:	737b      	strb	r3, [r7, #13]
 8002992:	23a9      	movs	r3, #169	; 0xa9
 8002994:	73bb      	strb	r3, [r7, #14]
 8002996:	e003      	b.n	80029a0 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002998:	2301      	movs	r3, #1
 800299a:	737b      	strb	r3, [r7, #13]
 800299c:	2301      	movs	r3, #1
 800299e:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80029a0:	bf00      	nop
 80029a2:	f7ff fde5 	bl	8002570 <SPI_Timer_Status>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <USER_SPI_initialize+0x158>
 80029ac:	7bbb      	ldrb	r3, [r7, #14]
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fee8 	bl	8002786 <send_cmd>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f2      	bne.n	80029a2 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80029bc:	f7ff fdd8 	bl	8002570 <SPI_Timer_Status>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d007      	beq.n	80029d6 <USER_SPI_initialize+0x172>
 80029c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029ca:	2010      	movs	r0, #16
 80029cc:	f7ff fedb 	bl	8002786 <send_cmd>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <USER_SPI_initialize+0x176>
				ty = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <USER_SPI_initialize+0x1bc>)
 80029dc:	7b7b      	ldrb	r3, [r7, #13]
 80029de:	7013      	strb	r3, [r2, #0]
	despiselect();
 80029e0:	f7ff fe4a 	bl	8002678 <despiselect>

	if (ty) {			/* OK */
 80029e4:	7b7b      	ldrb	r3, [r7, #13]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <USER_SPI_initialize+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2210      	movs	r2, #16
 80029f0:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <USER_SPI_initialize+0x1b4>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <USER_SPI_initialize+0x1b4>)
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e002      	b.n	8002a0a <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002a04:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <USER_SPI_initialize+0x1b4>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002a0a:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <USER_SPI_initialize+0x1b4>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	b2db      	uxtb	r3, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd90      	pop	{r4, r7, pc}
 8002a18:	20000024 	.word	0x20000024
 8002a1c:	20000410 	.word	0x20000410
 8002a20:	2000006b 	.word	0x2000006b

08002a24 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <USER_SPI_status+0x14>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e002      	b.n	8002a3e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <USER_SPI_status+0x28>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b2db      	uxtb	r3, r3
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000024 	.word	0x20000024

08002a50 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <USER_SPI_read+0x1c>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <USER_SPI_read+0x20>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	e04d      	b.n	8002b0c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002a70:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <USER_SPI_read+0xc4>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <USER_SPI_read+0x32>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e044      	b.n	8002b0c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002a82:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <USER_SPI_read+0xc8>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <USER_SPI_read+0x44>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	025b      	lsls	r3, r3, #9
 8002a92:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d111      	bne.n	8002abe <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	2011      	movs	r0, #17
 8002a9e:	f7ff fe72 	bl	8002786 <send_cmd>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d129      	bne.n	8002afc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002aac:	68b8      	ldr	r0, [r7, #8]
 8002aae:	f7ff fe0f 	bl	80026d0 <rcvr_datablock>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d021      	beq.n	8002afc <USER_SPI_read+0xac>
			count = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	e01e      	b.n	8002afc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	2012      	movs	r0, #18
 8002ac2:	f7ff fe60 	bl	8002786 <send_cmd>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d117      	bne.n	8002afc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ad0:	68b8      	ldr	r0, [r7, #8]
 8002ad2:	f7ff fdfd 	bl	80026d0 <rcvr_datablock>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <USER_SPI_read+0xa2>
				buff += 512;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ae2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ed      	bne.n	8002acc <USER_SPI_read+0x7c>
 8002af0:	e000      	b.n	8002af4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002af2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002af4:	2100      	movs	r1, #0
 8002af6:	200c      	movs	r0, #12
 8002af8:	f7ff fe45 	bl	8002786 <send_cmd>
		}
	}
	despiselect();
 8002afc:	f7ff fdbc 	bl	8002678 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000024 	.word	0x20000024
 8002b18:	2000006b 	.word	0x2000006b

08002b1c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <USER_SPI_write+0x1c>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <USER_SPI_write+0x20>
 8002b38:	2304      	movs	r3, #4
 8002b3a:	e063      	b.n	8002c04 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002b3c:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <USER_SPI_write+0xf0>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <USER_SPI_write+0x32>
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e05a      	b.n	8002c04 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002b4e:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <USER_SPI_write+0xf0>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <USER_SPI_write+0x44>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e051      	b.n	8002c04 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <USER_SPI_write+0xf4>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <USER_SPI_write+0x56>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	025b      	lsls	r3, r3, #9
 8002b70:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d110      	bne.n	8002b9a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	2018      	movs	r0, #24
 8002b7c:	f7ff fe03 	bl	8002786 <send_cmd>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d136      	bne.n	8002bf4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002b86:	21fe      	movs	r1, #254	; 0xfe
 8002b88:	68b8      	ldr	r0, [r7, #8]
 8002b8a:	f7ff fdca 	bl	8002722 <xmit_datablock>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d02f      	beq.n	8002bf4 <USER_SPI_write+0xd8>
			count = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	e02c      	b.n	8002bf4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <USER_SPI_write+0xf4>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	f003 0306 	and.w	r3, r3, #6
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <USER_SPI_write+0x92>
 8002ba6:	6839      	ldr	r1, [r7, #0]
 8002ba8:	2097      	movs	r0, #151	; 0x97
 8002baa:	f7ff fdec 	bl	8002786 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	2019      	movs	r0, #25
 8002bb2:	f7ff fde8 	bl	8002786 <send_cmd>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11b      	bne.n	8002bf4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002bbc:	21fc      	movs	r1, #252	; 0xfc
 8002bbe:	68b8      	ldr	r0, [r7, #8]
 8002bc0:	f7ff fdaf 	bl	8002722 <xmit_datablock>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <USER_SPI_write+0xc4>
				buff += 512;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002bd0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ee      	bne.n	8002bbc <USER_SPI_write+0xa0>
 8002bde:	e000      	b.n	8002be2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002be0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002be2:	21fd      	movs	r1, #253	; 0xfd
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7ff fd9c 	bl	8002722 <xmit_datablock>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <USER_SPI_write+0xd8>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002bf4:	f7ff fd40 	bl	8002678 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000024 	.word	0x20000024
 8002c10:	2000006b 	.word	0x2000006b

08002c14 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	603a      	str	r2, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
 8002c20:	460b      	mov	r3, r1
 8002c22:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <USER_SPI_ioctl+0x1a>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	e15a      	b.n	8002ee4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002c2e:	4baf      	ldr	r3, [pc, #700]	; (8002eec <USER_SPI_ioctl+0x2d8>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <USER_SPI_ioctl+0x2c>
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e151      	b.n	8002ee4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002c46:	79bb      	ldrb	r3, [r7, #6]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	f200 8136 	bhi.w	8002eba <USER_SPI_ioctl+0x2a6>
 8002c4e:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <USER_SPI_ioctl+0x40>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002c69 	.word	0x08002c69
 8002c58:	08002c7d 	.word	0x08002c7d
 8002c5c:	08002ebb 	.word	0x08002ebb
 8002c60:	08002d29 	.word	0x08002d29
 8002c64:	08002e1f 	.word	0x08002e1f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002c68:	f7ff fd16 	bl	8002698 <spiselect>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8127 	beq.w	8002ec2 <USER_SPI_ioctl+0x2ae>
 8002c74:	2300      	movs	r3, #0
 8002c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002c7a:	e122      	b.n	8002ec2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2009      	movs	r0, #9
 8002c80:	f7ff fd81 	bl	8002786 <send_cmd>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 811d 	bne.w	8002ec6 <USER_SPI_ioctl+0x2b2>
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	2110      	movs	r1, #16
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fd1c 	bl	80026d0 <rcvr_datablock>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8113 	beq.w	8002ec6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002ca0:	7b3b      	ldrb	r3, [r7, #12]
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d111      	bne.n	8002cce <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002caa:	7d7b      	ldrb	r3, [r7, #21]
 8002cac:	461a      	mov	r2, r3
 8002cae:	7d3b      	ldrb	r3, [r7, #20]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	4413      	add	r3, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	029a      	lsls	r2, r3, #10
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e028      	b.n	8002d20 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002cce:	7c7b      	ldrb	r3, [r7, #17]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	7dbb      	ldrb	r3, [r7, #22]
 8002cd8:	09db      	lsrs	r3, r3, #7
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	7d7b      	ldrb	r3, [r7, #21]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 0306 	and.w	r3, r3, #6
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002cf6:	7d3b      	ldrb	r3, [r7, #20]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	441a      	add	r2, r3
 8002d04:	7cbb      	ldrb	r3, [r7, #18]
 8002d06:	029b      	lsls	r3, r3, #10
 8002d08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3301      	adds	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002d12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d16:	3b09      	subs	r3, #9
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002d26:	e0ce      	b.n	8002ec6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002d28:	4b71      	ldr	r3, [pc, #452]	; (8002ef0 <USER_SPI_ioctl+0x2dc>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d031      	beq.n	8002d98 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002d34:	2100      	movs	r1, #0
 8002d36:	208d      	movs	r0, #141	; 0x8d
 8002d38:	f7ff fd25 	bl	8002786 <send_cmd>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 80c3 	bne.w	8002eca <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002d44:	20ff      	movs	r0, #255	; 0xff
 8002d46:	f7ff fc29 	bl	800259c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002d4a:	f107 030c 	add.w	r3, r7, #12
 8002d4e:	2110      	movs	r1, #16
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fcbd 	bl	80026d0 <rcvr_datablock>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80b6 	beq.w	8002eca <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002d5e:	2330      	movs	r3, #48	; 0x30
 8002d60:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002d64:	e007      	b.n	8002d76 <USER_SPI_ioctl+0x162>
 8002d66:	20ff      	movs	r0, #255	; 0xff
 8002d68:	f7ff fc18 	bl	800259c <xchg_spi>
 8002d6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d70:	3b01      	subs	r3, #1
 8002d72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002d76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f3      	bne.n	8002d66 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002d7e:	7dbb      	ldrb	r3, [r7, #22]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	2310      	movs	r3, #16
 8002d88:	fa03 f202 	lsl.w	r2, r3, r2
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002d96:	e098      	b.n	8002eca <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002d98:	2100      	movs	r1, #0
 8002d9a:	2009      	movs	r0, #9
 8002d9c:	f7ff fcf3 	bl	8002786 <send_cmd>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 8091 	bne.w	8002eca <USER_SPI_ioctl+0x2b6>
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	2110      	movs	r1, #16
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fc8e 	bl	80026d0 <rcvr_datablock>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8087 	beq.w	8002eca <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002dbc:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <USER_SPI_ioctl+0x2dc>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d012      	beq.n	8002dee <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002dc8:	7dbb      	ldrb	r3, [r7, #22]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002dd0:	7dfa      	ldrb	r2, [r7, #23]
 8002dd2:	09d2      	lsrs	r2, r2, #7
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	7e7b      	ldrb	r3, [r7, #25]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e013      	b.n	8002e16 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002dee:	7dbb      	ldrb	r3, [r7, #22]
 8002df0:	109b      	asrs	r3, r3, #2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	3301      	adds	r3, #1
 8002dfa:	7dfa      	ldrb	r2, [r7, #23]
 8002dfc:	00d2      	lsls	r2, r2, #3
 8002dfe:	f002 0218 	and.w	r2, r2, #24
 8002e02:	7df9      	ldrb	r1, [r7, #23]
 8002e04:	0949      	lsrs	r1, r1, #5
 8002e06:	b2c9      	uxtb	r1, r1
 8002e08:	440a      	add	r2, r1
 8002e0a:	3201      	adds	r2, #1
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002e1c:	e055      	b.n	8002eca <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002e1e:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <USER_SPI_ioctl+0x2dc>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	f003 0306 	and.w	r3, r3, #6
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d051      	beq.n	8002ece <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002e2a:	f107 020c 	add.w	r2, r7, #12
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	210b      	movs	r1, #11
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff feee 	bl	8002c14 <USER_SPI_ioctl>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d149      	bne.n	8002ed2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002e3e:	7b3b      	ldrb	r3, [r7, #12]
 8002e40:	099b      	lsrs	r3, r3, #6
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <USER_SPI_ioctl+0x23e>
 8002e48:	7dbb      	ldrb	r3, [r7, #22]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d041      	beq.n	8002ed6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	623b      	str	r3, [r7, #32]
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <USER_SPI_ioctl+0x2dc>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d105      	bne.n	8002e7a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	025b      	lsls	r3, r3, #9
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	025b      	lsls	r3, r3, #9
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e7c:	2020      	movs	r0, #32
 8002e7e:	f7ff fc82 	bl	8002786 <send_cmd>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d128      	bne.n	8002eda <USER_SPI_ioctl+0x2c6>
 8002e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e8a:	2021      	movs	r0, #33	; 0x21
 8002e8c:	f7ff fc7b 	bl	8002786 <send_cmd>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d121      	bne.n	8002eda <USER_SPI_ioctl+0x2c6>
 8002e96:	2100      	movs	r1, #0
 8002e98:	2026      	movs	r0, #38	; 0x26
 8002e9a:	f7ff fc74 	bl	8002786 <send_cmd>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11a      	bne.n	8002eda <USER_SPI_ioctl+0x2c6>
 8002ea4:	f247 5030 	movw	r0, #30000	; 0x7530
 8002ea8:	f7ff fbc3 	bl	8002632 <wait_ready>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d013      	beq.n	8002eda <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002eb8:	e00f      	b.n	8002eda <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002eba:	2304      	movs	r3, #4
 8002ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002ec0:	e00c      	b.n	8002edc <USER_SPI_ioctl+0x2c8>
		break;
 8002ec2:	bf00      	nop
 8002ec4:	e00a      	b.n	8002edc <USER_SPI_ioctl+0x2c8>
		break;
 8002ec6:	bf00      	nop
 8002ec8:	e008      	b.n	8002edc <USER_SPI_ioctl+0x2c8>
		break;
 8002eca:	bf00      	nop
 8002ecc:	e006      	b.n	8002edc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002ece:	bf00      	nop
 8002ed0:	e004      	b.n	8002edc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002ed2:	bf00      	nop
 8002ed4:	e002      	b.n	8002edc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002ed6:	bf00      	nop
 8002ed8:	e000      	b.n	8002edc <USER_SPI_ioctl+0x2c8>
		break;
 8002eda:	bf00      	nop
	}

	despiselect();
 8002edc:	f7ff fbcc 	bl	8002678 <despiselect>

	return res;
 8002ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3730      	adds	r7, #48	; 0x30
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000024 	.word	0x20000024
 8002ef0:	2000006b 	.word	0x2000006b

08002ef4 <Reset_Handler>:
 8002ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f2c <LoopFillZerobss+0x14>
 8002ef8:	2100      	movs	r1, #0
 8002efa:	e003      	b.n	8002f04 <LoopCopyDataInit>

08002efc <CopyDataInit>:
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <LoopFillZerobss+0x18>)
 8002efe:	585b      	ldr	r3, [r3, r1]
 8002f00:	5043      	str	r3, [r0, r1]
 8002f02:	3104      	adds	r1, #4

08002f04 <LoopCopyDataInit>:
 8002f04:	480b      	ldr	r0, [pc, #44]	; (8002f34 <LoopFillZerobss+0x1c>)
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <LoopFillZerobss+0x20>)
 8002f08:	1842      	adds	r2, r0, r1
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d3f6      	bcc.n	8002efc <CopyDataInit>
 8002f0e:	4a0b      	ldr	r2, [pc, #44]	; (8002f3c <LoopFillZerobss+0x24>)
 8002f10:	e002      	b.n	8002f18 <LoopFillZerobss>

08002f12 <FillZerobss>:
 8002f12:	2300      	movs	r3, #0
 8002f14:	f842 3b04 	str.w	r3, [r2], #4

08002f18 <LoopFillZerobss>:
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <LoopFillZerobss+0x28>)
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d3f9      	bcc.n	8002f12 <FillZerobss>
 8002f1e:	f7ff fafd 	bl	800251c <SystemInit>
 8002f22:	f006 f93f 	bl	80091a4 <__libc_init_array>
 8002f26:	f7fe f8ef 	bl	8001108 <main>
 8002f2a:	4770      	bx	lr
 8002f2c:	20020000 	.word	0x20020000
 8002f30:	080095ec 	.word	0x080095ec
 8002f34:	20000000 	.word	0x20000000
 8002f38:	20000044 	.word	0x20000044
 8002f3c:	20000044 	.word	0x20000044
 8002f40:	20000ecc 	.word	0x20000ecc

08002f44 <ADC_IRQHandler>:
 8002f44:	e7fe      	b.n	8002f44 <ADC_IRQHandler>
	...

08002f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <HAL_Init+0x40>)
 8002f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <HAL_Init+0x40>)
 8002f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <HAL_Init+0x40>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f70:	2003      	movs	r0, #3
 8002f72:	f000 f94d 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f000 f808 	bl	8002f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f7c:	f7fe fea8 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40023c00 	.word	0x40023c00

08002f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_InitTick+0x54>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_InitTick+0x58>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f965 	bl	800327a <HAL_SYSTICK_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e00e      	b.n	8002fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b0f      	cmp	r3, #15
 8002fbe:	d80a      	bhi.n	8002fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fc8:	f000 f92d 	bl	8003226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fcc:	4a06      	ldr	r2, [pc, #24]	; (8002fe8 <HAL_InitTick+0x5c>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e000      	b.n	8002fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000020 	.word	0x20000020
 8002fe4:	2000002c 	.word	0x2000002c
 8002fe8:	20000028 	.word	0x20000028

08002fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_IncTick+0x20>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_IncTick+0x24>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_IncTick+0x24>)
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	2000002c 	.word	0x2000002c
 8003010:	20000a60 	.word	0x20000a60

08003014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return uwTick;
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <HAL_GetTick+0x14>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000a60 	.word	0x20000a60

0800302c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003034:	f7ff ffee 	bl	8003014 <HAL_GetTick>
 8003038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003044:	d005      	beq.n	8003052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_Delay+0x40>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4413      	add	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003052:	bf00      	nop
 8003054:	f7ff ffde 	bl	8003014 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	429a      	cmp	r2, r3
 8003062:	d8f7      	bhi.n	8003054 <HAL_Delay+0x28>
  {
  }
}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	2000002c 	.word	0x2000002c

08003070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a2:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	60d3      	str	r3, [r2, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <__NVIC_GetPriorityGrouping+0x18>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0307 	and.w	r3, r3, #7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <__NVIC_EnableIRQ+0x38>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	; (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	; (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031dc:	d301      	bcc.n	80031e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031de:	2301      	movs	r3, #1
 80031e0:	e00f      	b.n	8003202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <SysTick_Config+0x40>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ea:	210f      	movs	r1, #15
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031f0:	f7ff ff8e 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <SysTick_Config+0x40>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <SysTick_Config+0x40>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000e010 	.word	0xe000e010

08003210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff29 	bl	8003070 <__NVIC_SetPriorityGrouping>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff ff3e 	bl	80030b8 <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff8e 	bl	8003164 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5d 	bl	8003110 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff31 	bl	80030d4 <__NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffa2 	bl	80031cc <SysTick_Config>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032a0:	f7ff feb8 	bl	8003014 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e099      	b.n	80033e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d0:	e00f      	b.n	80032f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d2:	f7ff fe9f 	bl	8003014 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d908      	bls.n	80032f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e078      	b.n	80033e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e8      	bne.n	80032d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_DMA_Init+0x158>)
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b04      	cmp	r3, #4
 800334a:	d107      	bne.n	800335c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	4313      	orrs	r3, r2
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b04      	cmp	r3, #4
 8003384:	d117      	bne.n	80033b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fb0d 	bl	80039b8 <DMA_CheckFifoParam>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2240      	movs	r2, #64	; 0x40
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033b2:	2301      	movs	r3, #1
 80033b4:	e016      	b.n	80033e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fac4 	bl	800394c <DMA_CalcBaseAndBitshift>
 80033c4:	4603      	mov	r3, r0
 80033c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	223f      	movs	r2, #63	; 0x3f
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	f010803f 	.word	0xf010803f

080033f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Start_IT+0x26>
 8003412:	2302      	movs	r3, #2
 8003414:	e040      	b.n	8003498 <HAL_DMA_Start_IT+0xa8>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b01      	cmp	r3, #1
 8003428:	d12f      	bne.n	800348a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fa56 	bl	80038f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	223f      	movs	r2, #63	; 0x3f
 800344a:	409a      	lsls	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0216 	orr.w	r2, r2, #22
 800345e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0208 	orr.w	r2, r2, #8
 8003476:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e005      	b.n	8003496 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003492:	2302      	movs	r3, #2
 8003494:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003496:	7dfb      	ldrb	r3, [r7, #23]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034ae:	f7ff fdb1 	bl	8003014 <HAL_GetTick>
 80034b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d008      	beq.n	80034d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e052      	b.n	8003578 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0216 	bic.w	r2, r2, #22
 80034e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_DMA_Abort+0x62>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0208 	bic.w	r2, r2, #8
 8003510:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003522:	e013      	b.n	800354c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003524:	f7ff fd76 	bl	8003014 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b05      	cmp	r3, #5
 8003530:	d90c      	bls.n	800354c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2203      	movs	r2, #3
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e015      	b.n	8003578 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e4      	bne.n	8003524 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	223f      	movs	r2, #63	; 0x3f
 8003560:	409a      	lsls	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d004      	beq.n	800359e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e00c      	b.n	80035b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2205      	movs	r2, #5
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035d0:	4b92      	ldr	r3, [pc, #584]	; (800381c <HAL_DMA_IRQHandler+0x258>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a92      	ldr	r2, [pc, #584]	; (8003820 <HAL_DMA_IRQHandler+0x25c>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	2208      	movs	r2, #8
 80035f0:	409a      	lsls	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01a      	beq.n	8003630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0204 	bic.w	r2, r2, #4
 8003616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	2208      	movs	r2, #8
 800361e:	409a      	lsls	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2201      	movs	r2, #1
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	2204      	movs	r2, #4
 800366c:	409a      	lsls	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	2204      	movs	r2, #4
 800368a:	409a      	lsls	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	2210      	movs	r2, #16
 80036a2:	409a      	lsls	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d043      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d03c      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	2210      	movs	r2, #16
 80036c0:	409a      	lsls	r2, r3
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d018      	beq.n	8003706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d108      	bne.n	80036f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d024      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
 80036f2:	e01f      	b.n	8003734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
 8003704:	e016      	b.n	8003734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0208 	bic.w	r2, r2, #8
 8003722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	2220      	movs	r2, #32
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 808e 	beq.w	8003862 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8086 	beq.w	8003862 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	2220      	movs	r2, #32
 800375c:	409a      	lsls	r2, r3
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b05      	cmp	r3, #5
 800376c:	d136      	bne.n	80037dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0216 	bic.w	r2, r2, #22
 800377c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800378c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_DMA_IRQHandler+0x1da>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0208 	bic.w	r2, r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	223f      	movs	r2, #63	; 0x3f
 80037b4:	409a      	lsls	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d07d      	beq.n	80038ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
        }
        return;
 80037da:	e078      	b.n	80038ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01c      	beq.n	8003824 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d108      	bne.n	800380a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d030      	beq.n	8003862 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
 8003808:	e02b      	b.n	8003862 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d027      	beq.n	8003862 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
 800381a:	e022      	b.n	8003862 <HAL_DMA_IRQHandler+0x29e>
 800381c:	20000020 	.word	0x20000020
 8003820:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0210 	bic.w	r2, r2, #16
 8003840:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	2b00      	cmp	r3, #0
 8003868:	d032      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d022      	beq.n	80038bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2205      	movs	r2, #5
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3301      	adds	r3, #1
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	429a      	cmp	r2, r3
 8003898:	d307      	bcc.n	80038aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f2      	bne.n	800388e <HAL_DMA_IRQHandler+0x2ca>
 80038a8:	e000      	b.n	80038ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
 80038cc:	e000      	b.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80038ce:	bf00      	nop
    }
  }
}
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop

080038d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800390c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d108      	bne.n	8003930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800392e:	e007      	b.n	8003940 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	3b10      	subs	r3, #16
 800395c:	4a14      	ldr	r2, [pc, #80]	; (80039b0 <DMA_CalcBaseAndBitshift+0x64>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003966:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d909      	bls.n	800398e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	1d1a      	adds	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	; 0x58
 800398c:	e007      	b.n	800399e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	aaaaaaab 	.word	0xaaaaaaab
 80039b4:	08009554 	.word	0x08009554

080039b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d11f      	bne.n	8003a12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d855      	bhi.n	8003a84 <DMA_CheckFifoParam+0xcc>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <DMA_CheckFifoParam+0x28>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	08003a03 	.word	0x08003a03
 80039e8:	080039f1 	.word	0x080039f1
 80039ec:	08003a85 	.word	0x08003a85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d045      	beq.n	8003a88 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a00:	e042      	b.n	8003a88 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a0a:	d13f      	bne.n	8003a8c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a10:	e03c      	b.n	8003a8c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1a:	d121      	bne.n	8003a60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d836      	bhi.n	8003a90 <DMA_CheckFifoParam+0xd8>
 8003a22:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <DMA_CheckFifoParam+0x70>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a3f 	.word	0x08003a3f
 8003a30:	08003a39 	.word	0x08003a39
 8003a34:	08003a51 	.word	0x08003a51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3c:	e02f      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d024      	beq.n	8003a94 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4e:	e021      	b.n	8003a94 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a58:	d11e      	bne.n	8003a98 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a5e:	e01b      	b.n	8003a98 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d902      	bls.n	8003a6c <DMA_CheckFifoParam+0xb4>
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d003      	beq.n	8003a72 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a6a:	e018      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a70:	e015      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00e      	beq.n	8003a9c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
      break;
 8003a82:	e00b      	b.n	8003a9c <DMA_CheckFifoParam+0xe4>
      break;
 8003a84:	bf00      	nop
 8003a86:	e00a      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      break;
 8003a88:	bf00      	nop
 8003a8a:	e008      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      break;
 8003a8c:	bf00      	nop
 8003a8e:	e006      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      break;
 8003a90:	bf00      	nop
 8003a92:	e004      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      break;
 8003a94:	bf00      	nop
 8003a96:	e002      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      break;   
 8003a98:	bf00      	nop
 8003a9a:	e000      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      break;
 8003a9c:	bf00      	nop
    }
  } 
  
  return status; 
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b089      	sub	sp, #36	; 0x24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	e165      	b.n	8003d94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ac8:	2201      	movs	r2, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	f040 8154 	bne.w	8003d8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d00b      	beq.n	8003b06 <HAL_GPIO_Init+0x5a>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d007      	beq.n	8003b06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003afa:	2b11      	cmp	r3, #17
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b12      	cmp	r3, #18
 8003b04:	d130      	bne.n	8003b68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	2203      	movs	r2, #3
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 0201 	and.w	r2, r3, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	2203      	movs	r2, #3
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d003      	beq.n	8003ba8 <HAL_GPIO_Init+0xfc>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b12      	cmp	r3, #18
 8003ba6:	d123      	bne.n	8003bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	08da      	lsrs	r2, r3, #3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3208      	adds	r2, #8
 8003bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	220f      	movs	r2, #15
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	08da      	lsrs	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3208      	adds	r2, #8
 8003bea:	69b9      	ldr	r1, [r7, #24]
 8003bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0203 	and.w	r2, r3, #3
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80ae 	beq.w	8003d8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	4b5c      	ldr	r3, [pc, #368]	; (8003da8 <HAL_GPIO_Init+0x2fc>)
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	4a5b      	ldr	r2, [pc, #364]	; (8003da8 <HAL_GPIO_Init+0x2fc>)
 8003c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c40:	6453      	str	r3, [r2, #68]	; 0x44
 8003c42:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_GPIO_Init+0x2fc>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c4e:	4a57      	ldr	r2, [pc, #348]	; (8003dac <HAL_GPIO_Init+0x300>)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	089b      	lsrs	r3, r3, #2
 8003c54:	3302      	adds	r3, #2
 8003c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	220f      	movs	r2, #15
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a4e      	ldr	r2, [pc, #312]	; (8003db0 <HAL_GPIO_Init+0x304>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d025      	beq.n	8003cc6 <HAL_GPIO_Init+0x21a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a4d      	ldr	r2, [pc, #308]	; (8003db4 <HAL_GPIO_Init+0x308>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01f      	beq.n	8003cc2 <HAL_GPIO_Init+0x216>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a4c      	ldr	r2, [pc, #304]	; (8003db8 <HAL_GPIO_Init+0x30c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d019      	beq.n	8003cbe <HAL_GPIO_Init+0x212>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a4b      	ldr	r2, [pc, #300]	; (8003dbc <HAL_GPIO_Init+0x310>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_GPIO_Init+0x20e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4a      	ldr	r2, [pc, #296]	; (8003dc0 <HAL_GPIO_Init+0x314>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00d      	beq.n	8003cb6 <HAL_GPIO_Init+0x20a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a49      	ldr	r2, [pc, #292]	; (8003dc4 <HAL_GPIO_Init+0x318>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <HAL_GPIO_Init+0x206>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a48      	ldr	r2, [pc, #288]	; (8003dc8 <HAL_GPIO_Init+0x31c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_GPIO_Init+0x202>
 8003caa:	2306      	movs	r3, #6
 8003cac:	e00c      	b.n	8003cc8 <HAL_GPIO_Init+0x21c>
 8003cae:	2307      	movs	r3, #7
 8003cb0:	e00a      	b.n	8003cc8 <HAL_GPIO_Init+0x21c>
 8003cb2:	2305      	movs	r3, #5
 8003cb4:	e008      	b.n	8003cc8 <HAL_GPIO_Init+0x21c>
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	e006      	b.n	8003cc8 <HAL_GPIO_Init+0x21c>
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e004      	b.n	8003cc8 <HAL_GPIO_Init+0x21c>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e002      	b.n	8003cc8 <HAL_GPIO_Init+0x21c>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <HAL_GPIO_Init+0x21c>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	f002 0203 	and.w	r2, r2, #3
 8003cce:	0092      	lsls	r2, r2, #2
 8003cd0:	4093      	lsls	r3, r2
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd8:	4934      	ldr	r1, [pc, #208]	; (8003dac <HAL_GPIO_Init+0x300>)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	089b      	lsrs	r3, r3, #2
 8003cde:	3302      	adds	r3, #2
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ce6:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <HAL_GPIO_Init+0x320>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d0a:	4a30      	ldr	r2, [pc, #192]	; (8003dcc <HAL_GPIO_Init+0x320>)
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d10:	4b2e      	ldr	r3, [pc, #184]	; (8003dcc <HAL_GPIO_Init+0x320>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d34:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <HAL_GPIO_Init+0x320>)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_GPIO_Init+0x320>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d5e:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <HAL_GPIO_Init+0x320>)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_GPIO_Init+0x320>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d88:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <HAL_GPIO_Init+0x320>)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3301      	adds	r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b0f      	cmp	r3, #15
 8003d98:	f67f ae96 	bls.w	8003ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3724      	adds	r7, #36	; 0x24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40013800 	.word	0x40013800
 8003db0:	40020000 	.word	0x40020000
 8003db4:	40020400 	.word	0x40020400
 8003db8:	40020800 	.word	0x40020800
 8003dbc:	40020c00 	.word	0x40020c00
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40021400 	.word	0x40021400
 8003dc8:	40021800 	.word	0x40021800
 8003dcc:	40013c00 	.word	0x40013c00

08003dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	e001      	b.n	8003df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	807b      	strh	r3, [r7, #2]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e10:	787b      	ldrb	r3, [r7, #1]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e1c:	e003      	b.n	8003e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	041a      	lsls	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	619a      	str	r2, [r3, #24]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <HAL_PWREx_EnableOverDrive+0x94>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e60:	f7ff f8d8 	bl	8003014 <HAL_GetTick>
 8003e64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e66:	e009      	b.n	8003e7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e68:	f7ff f8d4 	bl	8003014 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e76:	d901      	bls.n	8003e7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e01f      	b.n	8003ebc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e7c:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e88:	d1ee      	bne.n	8003e68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e8a:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e90:	f7ff f8c0 	bl	8003014 <HAL_GetTick>
 8003e94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e96:	e009      	b.n	8003eac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e98:	f7ff f8bc 	bl	8003014 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ea6:	d901      	bls.n	8003eac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e007      	b.n	8003ebc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003eac:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb8:	d1ee      	bne.n	8003e98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	420e0040 	.word	0x420e0040
 8003ecc:	40007000 	.word	0x40007000
 8003ed0:	420e0044 	.word	0x420e0044

08003ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0cc      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b68      	ldr	r3, [pc, #416]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90c      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e067      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4934      	ldr	r1, [pc, #208]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc4:	f7ff f826 	bl	8003014 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7ff f822 	bl	8003014 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e04f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20c      	bcs.n	800401c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f855 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 800405e:	4601      	mov	r1, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	5cd3      	ldrb	r3, [r2, r3]
 800406e:	fa21 f303 	lsr.w	r3, r1, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe ff86 	bl	8002f8c <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00
 8004090:	40023800 	.word	0x40023800
 8004094:	0800953c 	.word	0x0800953c
 8004098:	20000020 	.word	0x20000020
 800409c:	20000028 	.word	0x20000028

080040a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000020 	.word	0x20000020

080040b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040bc:	f7ff fff0 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040c0:	4601      	mov	r1, r0
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	0a9b      	lsrs	r3, r3, #10
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4a03      	ldr	r2, [pc, #12]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ce:	5cd3      	ldrb	r3, [r2, r3]
 80040d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	0800954c 	.word	0x0800954c

080040e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040e4:	f7ff ffdc 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040e8:	4601      	mov	r1, r0
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0b5b      	lsrs	r3, r3, #13
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4a03      	ldr	r2, [pc, #12]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f6:	5cd3      	ldrb	r3, [r2, r3]
 80040f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40023800 	.word	0x40023800
 8004104:	0800954c 	.word	0x0800954c

08004108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004122:	4bc6      	ldr	r3, [pc, #792]	; (800443c <HAL_RCC_GetSysClockFreq+0x334>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	2b0c      	cmp	r3, #12
 800412c:	f200 817e 	bhi.w	800442c <HAL_RCC_GetSysClockFreq+0x324>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <HAL_RCC_GetSysClockFreq+0x30>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	0800416d 	.word	0x0800416d
 800413c:	0800442d 	.word	0x0800442d
 8004140:	0800442d 	.word	0x0800442d
 8004144:	0800442d 	.word	0x0800442d
 8004148:	08004173 	.word	0x08004173
 800414c:	0800442d 	.word	0x0800442d
 8004150:	0800442d 	.word	0x0800442d
 8004154:	0800442d 	.word	0x0800442d
 8004158:	08004179 	.word	0x08004179
 800415c:	0800442d 	.word	0x0800442d
 8004160:	0800442d 	.word	0x0800442d
 8004164:	0800442d 	.word	0x0800442d
 8004168:	080042d5 	.word	0x080042d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800416c:	4bb4      	ldr	r3, [pc, #720]	; (8004440 <HAL_RCC_GetSysClockFreq+0x338>)
 800416e:	613b      	str	r3, [r7, #16]
       break;
 8004170:	e15f      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004172:	4bb4      	ldr	r3, [pc, #720]	; (8004444 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004174:	613b      	str	r3, [r7, #16]
      break;
 8004176:	e15c      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004178:	4bb0      	ldr	r3, [pc, #704]	; (800443c <HAL_RCC_GetSysClockFreq+0x334>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004180:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004182:	4bae      	ldr	r3, [pc, #696]	; (800443c <HAL_RCC_GetSysClockFreq+0x334>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d04a      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418e:	4bab      	ldr	r3, [pc, #684]	; (800443c <HAL_RCC_GetSysClockFreq+0x334>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	f04f 0400 	mov.w	r4, #0
 8004198:	f240 11ff 	movw	r1, #511	; 0x1ff
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	ea03 0501 	and.w	r5, r3, r1
 80041a4:	ea04 0602 	and.w	r6, r4, r2
 80041a8:	4629      	mov	r1, r5
 80041aa:	4632      	mov	r2, r6
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	f04f 0400 	mov.w	r4, #0
 80041b4:	0154      	lsls	r4, r2, #5
 80041b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041ba:	014b      	lsls	r3, r1, #5
 80041bc:	4619      	mov	r1, r3
 80041be:	4622      	mov	r2, r4
 80041c0:	1b49      	subs	r1, r1, r5
 80041c2:	eb62 0206 	sbc.w	r2, r2, r6
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	f04f 0400 	mov.w	r4, #0
 80041ce:	0194      	lsls	r4, r2, #6
 80041d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041d4:	018b      	lsls	r3, r1, #6
 80041d6:	1a5b      	subs	r3, r3, r1
 80041d8:	eb64 0402 	sbc.w	r4, r4, r2
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	00e2      	lsls	r2, r4, #3
 80041e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041ea:	00d9      	lsls	r1, r3, #3
 80041ec:	460b      	mov	r3, r1
 80041ee:	4614      	mov	r4, r2
 80041f0:	195b      	adds	r3, r3, r5
 80041f2:	eb44 0406 	adc.w	r4, r4, r6
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	0262      	lsls	r2, r4, #9
 8004200:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004204:	0259      	lsls	r1, r3, #9
 8004206:	460b      	mov	r3, r1
 8004208:	4614      	mov	r4, r2
 800420a:	4618      	mov	r0, r3
 800420c:	4621      	mov	r1, r4
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f04f 0400 	mov.w	r4, #0
 8004214:	461a      	mov	r2, r3
 8004216:	4623      	mov	r3, r4
 8004218:	f7fb fff4 	bl	8000204 <__aeabi_uldivmod>
 800421c:	4603      	mov	r3, r0
 800421e:	460c      	mov	r4, r1
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e049      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004224:	4b85      	ldr	r3, [pc, #532]	; (800443c <HAL_RCC_GetSysClockFreq+0x334>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	099b      	lsrs	r3, r3, #6
 800422a:	f04f 0400 	mov.w	r4, #0
 800422e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	ea03 0501 	and.w	r5, r3, r1
 800423a:	ea04 0602 	and.w	r6, r4, r2
 800423e:	4629      	mov	r1, r5
 8004240:	4632      	mov	r2, r6
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	f04f 0400 	mov.w	r4, #0
 800424a:	0154      	lsls	r4, r2, #5
 800424c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004250:	014b      	lsls	r3, r1, #5
 8004252:	4619      	mov	r1, r3
 8004254:	4622      	mov	r2, r4
 8004256:	1b49      	subs	r1, r1, r5
 8004258:	eb62 0206 	sbc.w	r2, r2, r6
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	f04f 0400 	mov.w	r4, #0
 8004264:	0194      	lsls	r4, r2, #6
 8004266:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800426a:	018b      	lsls	r3, r1, #6
 800426c:	1a5b      	subs	r3, r3, r1
 800426e:	eb64 0402 	sbc.w	r4, r4, r2
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	00e2      	lsls	r2, r4, #3
 800427c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004280:	00d9      	lsls	r1, r3, #3
 8004282:	460b      	mov	r3, r1
 8004284:	4614      	mov	r4, r2
 8004286:	195b      	adds	r3, r3, r5
 8004288:	eb44 0406 	adc.w	r4, r4, r6
 800428c:	f04f 0100 	mov.w	r1, #0
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	02a2      	lsls	r2, r4, #10
 8004296:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800429a:	0299      	lsls	r1, r3, #10
 800429c:	460b      	mov	r3, r1
 800429e:	4614      	mov	r4, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	4621      	mov	r1, r4
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f04f 0400 	mov.w	r4, #0
 80042aa:	461a      	mov	r2, r3
 80042ac:	4623      	mov	r3, r4
 80042ae:	f7fb ffa9 	bl	8000204 <__aeabi_uldivmod>
 80042b2:	4603      	mov	r3, r0
 80042b4:	460c      	mov	r4, r1
 80042b6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042b8:	4b60      	ldr	r3, [pc, #384]	; (800443c <HAL_RCC_GetSysClockFreq+0x334>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	613b      	str	r3, [r7, #16]
      break;
 80042d2:	e0ae      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d4:	4b59      	ldr	r3, [pc, #356]	; (800443c <HAL_RCC_GetSysClockFreq+0x334>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042dc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042de:	4b57      	ldr	r3, [pc, #348]	; (800443c <HAL_RCC_GetSysClockFreq+0x334>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d04a      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ea:	4b54      	ldr	r3, [pc, #336]	; (800443c <HAL_RCC_GetSysClockFreq+0x334>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	099b      	lsrs	r3, r3, #6
 80042f0:	f04f 0400 	mov.w	r4, #0
 80042f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	ea03 0501 	and.w	r5, r3, r1
 8004300:	ea04 0602 	and.w	r6, r4, r2
 8004304:	4629      	mov	r1, r5
 8004306:	4632      	mov	r2, r6
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	f04f 0400 	mov.w	r4, #0
 8004310:	0154      	lsls	r4, r2, #5
 8004312:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004316:	014b      	lsls	r3, r1, #5
 8004318:	4619      	mov	r1, r3
 800431a:	4622      	mov	r2, r4
 800431c:	1b49      	subs	r1, r1, r5
 800431e:	eb62 0206 	sbc.w	r2, r2, r6
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	f04f 0400 	mov.w	r4, #0
 800432a:	0194      	lsls	r4, r2, #6
 800432c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004330:	018b      	lsls	r3, r1, #6
 8004332:	1a5b      	subs	r3, r3, r1
 8004334:	eb64 0402 	sbc.w	r4, r4, r2
 8004338:	f04f 0100 	mov.w	r1, #0
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	00e2      	lsls	r2, r4, #3
 8004342:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004346:	00d9      	lsls	r1, r3, #3
 8004348:	460b      	mov	r3, r1
 800434a:	4614      	mov	r4, r2
 800434c:	195b      	adds	r3, r3, r5
 800434e:	eb44 0406 	adc.w	r4, r4, r6
 8004352:	f04f 0100 	mov.w	r1, #0
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	0262      	lsls	r2, r4, #9
 800435c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004360:	0259      	lsls	r1, r3, #9
 8004362:	460b      	mov	r3, r1
 8004364:	4614      	mov	r4, r2
 8004366:	4618      	mov	r0, r3
 8004368:	4621      	mov	r1, r4
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f04f 0400 	mov.w	r4, #0
 8004370:	461a      	mov	r2, r3
 8004372:	4623      	mov	r3, r4
 8004374:	f7fb ff46 	bl	8000204 <__aeabi_uldivmod>
 8004378:	4603      	mov	r3, r0
 800437a:	460c      	mov	r4, r1
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e049      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004380:	4b2e      	ldr	r3, [pc, #184]	; (800443c <HAL_RCC_GetSysClockFreq+0x334>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	099b      	lsrs	r3, r3, #6
 8004386:	f04f 0400 	mov.w	r4, #0
 800438a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	ea03 0501 	and.w	r5, r3, r1
 8004396:	ea04 0602 	and.w	r6, r4, r2
 800439a:	4629      	mov	r1, r5
 800439c:	4632      	mov	r2, r6
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	f04f 0400 	mov.w	r4, #0
 80043a6:	0154      	lsls	r4, r2, #5
 80043a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043ac:	014b      	lsls	r3, r1, #5
 80043ae:	4619      	mov	r1, r3
 80043b0:	4622      	mov	r2, r4
 80043b2:	1b49      	subs	r1, r1, r5
 80043b4:	eb62 0206 	sbc.w	r2, r2, r6
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	f04f 0400 	mov.w	r4, #0
 80043c0:	0194      	lsls	r4, r2, #6
 80043c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043c6:	018b      	lsls	r3, r1, #6
 80043c8:	1a5b      	subs	r3, r3, r1
 80043ca:	eb64 0402 	sbc.w	r4, r4, r2
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	00e2      	lsls	r2, r4, #3
 80043d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043dc:	00d9      	lsls	r1, r3, #3
 80043de:	460b      	mov	r3, r1
 80043e0:	4614      	mov	r4, r2
 80043e2:	195b      	adds	r3, r3, r5
 80043e4:	eb44 0406 	adc.w	r4, r4, r6
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	02a2      	lsls	r2, r4, #10
 80043f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043f6:	0299      	lsls	r1, r3, #10
 80043f8:	460b      	mov	r3, r1
 80043fa:	4614      	mov	r4, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	4621      	mov	r1, r4
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f04f 0400 	mov.w	r4, #0
 8004406:	461a      	mov	r2, r3
 8004408:	4623      	mov	r3, r4
 800440a:	f7fb fefb 	bl	8000204 <__aeabi_uldivmod>
 800440e:	4603      	mov	r3, r0
 8004410:	460c      	mov	r4, r1
 8004412:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <HAL_RCC_GetSysClockFreq+0x334>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	0f1b      	lsrs	r3, r3, #28
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	613b      	str	r3, [r7, #16]
      break;
 800442a:	e002      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <HAL_RCC_GetSysClockFreq+0x338>)
 800442e:	613b      	str	r3, [r7, #16]
      break;
 8004430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004432:	693b      	ldr	r3, [r7, #16]
}
 8004434:	4618      	mov	r0, r3
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443c:	40023800 	.word	0x40023800
 8004440:	00f42400 	.word	0x00f42400
 8004444:	007a1200 	.word	0x007a1200

08004448 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8083 	beq.w	8004568 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004462:	4b95      	ldr	r3, [pc, #596]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b04      	cmp	r3, #4
 800446c:	d019      	beq.n	80044a2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800446e:	4b92      	ldr	r3, [pc, #584]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004476:	2b08      	cmp	r3, #8
 8004478:	d106      	bne.n	8004488 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800447a:	4b8f      	ldr	r3, [pc, #572]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004486:	d00c      	beq.n	80044a2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004488:	4b8b      	ldr	r3, [pc, #556]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d112      	bne.n	80044ba <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004494:	4b88      	ldr	r3, [pc, #544]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a0:	d10b      	bne.n	80044ba <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a2:	4b85      	ldr	r3, [pc, #532]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d05b      	beq.n	8004566 <HAL_RCC_OscConfig+0x11e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d157      	bne.n	8004566 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e216      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c2:	d106      	bne.n	80044d2 <HAL_RCC_OscConfig+0x8a>
 80044c4:	4b7c      	ldr	r3, [pc, #496]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a7b      	ldr	r2, [pc, #492]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80044ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	e01d      	b.n	800450e <HAL_RCC_OscConfig+0xc6>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044da:	d10c      	bne.n	80044f6 <HAL_RCC_OscConfig+0xae>
 80044dc:	4b76      	ldr	r3, [pc, #472]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a75      	ldr	r2, [pc, #468]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80044e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	4b73      	ldr	r3, [pc, #460]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a72      	ldr	r2, [pc, #456]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80044ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	e00b      	b.n	800450e <HAL_RCC_OscConfig+0xc6>
 80044f6:	4b70      	ldr	r3, [pc, #448]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a6f      	ldr	r2, [pc, #444]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80044fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b6d      	ldr	r3, [pc, #436]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6c      	ldr	r2, [pc, #432]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d013      	beq.n	800453e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004516:	f7fe fd7d 	bl	8003014 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800451e:	f7fe fd79 	bl	8003014 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b64      	cmp	r3, #100	; 0x64
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e1db      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004530:	4b61      	ldr	r3, [pc, #388]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0xd6>
 800453c:	e014      	b.n	8004568 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453e:	f7fe fd69 	bl	8003014 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004546:	f7fe fd65 	bl	8003014 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	; 0x64
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e1c7      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004558:	4b57      	ldr	r3, [pc, #348]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0xfe>
 8004564:	e000      	b.n	8004568 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004566:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d06f      	beq.n	8004654 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004574:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b00      	cmp	r3, #0
 800457e:	d017      	beq.n	80045b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004580:	4b4d      	ldr	r3, [pc, #308]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004588:	2b08      	cmp	r3, #8
 800458a:	d105      	bne.n	8004598 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800458c:	4b4a      	ldr	r3, [pc, #296]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004598:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045a0:	2b0c      	cmp	r3, #12
 80045a2:	d11c      	bne.n	80045de <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a4:	4b44      	ldr	r3, [pc, #272]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d116      	bne.n	80045de <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b0:	4b41      	ldr	r3, [pc, #260]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_OscConfig+0x180>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e18f      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b3b      	ldr	r3, [pc, #236]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4938      	ldr	r1, [pc, #224]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045dc:	e03a      	b.n	8004654 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d020      	beq.n	8004628 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e6:	4b35      	ldr	r3, [pc, #212]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fe fd12 	bl	8003014 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f4:	f7fe fd0e 	bl	8003014 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e170      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004606:	4b2c      	ldr	r3, [pc, #176]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004612:	4b29      	ldr	r3, [pc, #164]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4925      	ldr	r1, [pc, #148]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]
 8004626:	e015      	b.n	8004654 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004628:	4b24      	ldr	r3, [pc, #144]	; (80046bc <HAL_RCC_OscConfig+0x274>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462e:	f7fe fcf1 	bl	8003014 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004636:	f7fe fced 	bl	8003014 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e14f      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d037      	beq.n	80046d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d016      	beq.n	8004696 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <HAL_RCC_OscConfig+0x278>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fe fcd1 	bl	8003014 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004676:	f7fe fccd 	bl	8003014 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e12f      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_OscConfig+0x270>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x22e>
 8004694:	e01c      	b.n	80046d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <HAL_RCC_OscConfig+0x278>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fe fcba 	bl	8003014 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a2:	e00f      	b.n	80046c4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a4:	f7fe fcb6 	bl	8003014 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d908      	bls.n	80046c4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e118      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	42470000 	.word	0x42470000
 80046c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c4:	4b8a      	ldr	r3, [pc, #552]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 80046c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e9      	bne.n	80046a4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8097 	beq.w	800480c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046de:	2300      	movs	r3, #0
 80046e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e2:	4b83      	ldr	r3, [pc, #524]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10f      	bne.n	800470e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	4b7f      	ldr	r3, [pc, #508]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	4a7e      	ldr	r2, [pc, #504]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 80046f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fc:	6413      	str	r3, [r2, #64]	; 0x40
 80046fe:	4b7c      	ldr	r3, [pc, #496]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800470a:	2301      	movs	r3, #1
 800470c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470e:	4b79      	ldr	r3, [pc, #484]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d118      	bne.n	800474c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800471a:	4b76      	ldr	r3, [pc, #472]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a75      	ldr	r2, [pc, #468]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 8004720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004726:	f7fe fc75 	bl	8003014 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472e:	f7fe fc71 	bl	8003014 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0d3      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	4b6c      	ldr	r3, [pc, #432]	; (80048f4 <HAL_RCC_OscConfig+0x4ac>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d106      	bne.n	8004762 <HAL_RCC_OscConfig+0x31a>
 8004754:	4b66      	ldr	r3, [pc, #408]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4a65      	ldr	r2, [pc, #404]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	6713      	str	r3, [r2, #112]	; 0x70
 8004760:	e01c      	b.n	800479c <HAL_RCC_OscConfig+0x354>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b05      	cmp	r3, #5
 8004768:	d10c      	bne.n	8004784 <HAL_RCC_OscConfig+0x33c>
 800476a:	4b61      	ldr	r3, [pc, #388]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	4a60      	ldr	r2, [pc, #384]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 8004770:	f043 0304 	orr.w	r3, r3, #4
 8004774:	6713      	str	r3, [r2, #112]	; 0x70
 8004776:	4b5e      	ldr	r3, [pc, #376]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477a:	4a5d      	ldr	r2, [pc, #372]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	6713      	str	r3, [r2, #112]	; 0x70
 8004782:	e00b      	b.n	800479c <HAL_RCC_OscConfig+0x354>
 8004784:	4b5a      	ldr	r3, [pc, #360]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	4a59      	ldr	r2, [pc, #356]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 800478a:	f023 0301 	bic.w	r3, r3, #1
 800478e:	6713      	str	r3, [r2, #112]	; 0x70
 8004790:	4b57      	ldr	r3, [pc, #348]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	4a56      	ldr	r2, [pc, #344]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 8004796:	f023 0304 	bic.w	r3, r3, #4
 800479a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d015      	beq.n	80047d0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fe fc36 	bl	8003014 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ac:	f7fe fc32 	bl	8003014 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e092      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c2:	4b4b      	ldr	r3, [pc, #300]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0ee      	beq.n	80047ac <HAL_RCC_OscConfig+0x364>
 80047ce:	e014      	b.n	80047fa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d0:	f7fe fc20 	bl	8003014 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d8:	f7fe fc1c 	bl	8003014 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e07c      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ee:	4b40      	ldr	r3, [pc, #256]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1ee      	bne.n	80047d8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d105      	bne.n	800480c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004800:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	4a3a      	ldr	r2, [pc, #232]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 8004806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800480a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d068      	beq.n	80048e6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004814:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	2b08      	cmp	r3, #8
 800481e:	d060      	beq.n	80048e2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d145      	bne.n	80048b4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004828:	4b33      	ldr	r3, [pc, #204]	; (80048f8 <HAL_RCC_OscConfig+0x4b0>)
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fe fbf1 	bl	8003014 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004836:	f7fe fbed 	bl	8003014 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e04f      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004848:	4b29      	ldr	r3, [pc, #164]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	019b      	lsls	r3, r3, #6
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	3b01      	subs	r3, #1
 800486e:	041b      	lsls	r3, r3, #16
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	061b      	lsls	r3, r3, #24
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	071b      	lsls	r3, r3, #28
 8004880:	491b      	ldr	r1, [pc, #108]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <HAL_RCC_OscConfig+0x4b0>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fe fbc2 	bl	8003014 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004894:	f7fe fbbe 	bl	8003014 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e020      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x44c>
 80048b2:	e018      	b.n	80048e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <HAL_RCC_OscConfig+0x4b0>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ba:	f7fe fbab 	bl	8003014 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c2:	f7fe fba7 	bl	8003014 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e009      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d4:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCC_OscConfig+0x4a8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f0      	bne.n	80048c2 <HAL_RCC_OscConfig+0x47a>
 80048e0:	e001      	b.n	80048e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40023800 	.word	0x40023800
 80048f4:	40007000 	.word	0x40007000
 80048f8:	42470060 	.word	0x42470060

080048fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e056      	b.n	80049bc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7fd f9f9 	bl	8001d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004944:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	ea42 0103 	orr.w	r1, r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	f003 0104 	and.w	r1, r3, #4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69da      	ldr	r2, [r3, #28]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_SPI_Transmit+0x22>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e11e      	b.n	8004c24 <HAL_SPI_Transmit+0x260>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ee:	f7fe fb11 	bl	8003014 <HAL_GetTick>
 80049f2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d002      	beq.n	8004a0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a04:	2302      	movs	r3, #2
 8004a06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a08:	e103      	b.n	8004c12 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_SPI_Transmit+0x52>
 8004a10:	88fb      	ldrh	r3, [r7, #6]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d102      	bne.n	8004a1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a1a:	e0fa      	b.n	8004c12 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2203      	movs	r2, #3
 8004a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	88fa      	ldrh	r2, [r7, #6]
 8004a34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	88fa      	ldrh	r2, [r7, #6]
 8004a3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a62:	d107      	bne.n	8004a74 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d007      	beq.n	8004a92 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9a:	d14b      	bne.n	8004b34 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_SPI_Transmit+0xe6>
 8004aa4:	8afb      	ldrh	r3, [r7, #22]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d13e      	bne.n	8004b28 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	881a      	ldrh	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	1c9a      	adds	r2, r3, #2
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ace:	e02b      	b.n	8004b28 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d112      	bne.n	8004b04 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	881a      	ldrh	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	1c9a      	adds	r2, r3, #2
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b02:	e011      	b.n	8004b28 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b04:	f7fe fa86 	bl	8003014 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d803      	bhi.n	8004b1c <HAL_SPI_Transmit+0x158>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b1a:	d102      	bne.n	8004b22 <HAL_SPI_Transmit+0x15e>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b26:	e074      	b.n	8004c12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ce      	bne.n	8004ad0 <HAL_SPI_Transmit+0x10c>
 8004b32:	e04c      	b.n	8004bce <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_SPI_Transmit+0x17e>
 8004b3c:	8afb      	ldrh	r3, [r7, #22]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d140      	bne.n	8004bc4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b68:	e02c      	b.n	8004bc4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d113      	bne.n	8004ba0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	7812      	ldrb	r2, [r2, #0]
 8004b84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b9e:	e011      	b.n	8004bc4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba0:	f7fe fa38 	bl	8003014 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d803      	bhi.n	8004bb8 <HAL_SPI_Transmit+0x1f4>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb6:	d102      	bne.n	8004bbe <HAL_SPI_Transmit+0x1fa>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bc2:	e026      	b.n	8004c12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1cd      	bne.n	8004b6a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	6839      	ldr	r1, [r7, #0]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 fcc4 	bl	8005560 <SPI_EndRxTxTransaction>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e000      	b.n	8004c12 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004c10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c22:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c48:	d112      	bne.n	8004c70 <HAL_SPI_Receive+0x44>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10e      	bne.n	8004c70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2204      	movs	r2, #4
 8004c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c5a:	88fa      	ldrh	r2, [r7, #6]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f8e9 	bl	8004e3e <HAL_SPI_TransmitReceive>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	e0e2      	b.n	8004e36 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_SPI_Receive+0x52>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e0db      	b.n	8004e36 <HAL_SPI_Receive+0x20a>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c86:	f7fe f9c5 	bl	8003014 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d002      	beq.n	8004c9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c9c:	e0c2      	b.n	8004e24 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_Receive+0x7e>
 8004ca4:	88fb      	ldrh	r3, [r7, #6]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d102      	bne.n	8004cb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cae:	e0b9      	b.n	8004e24 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2204      	movs	r2, #4
 8004cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	88fa      	ldrh	r2, [r7, #6]
 8004cce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf6:	d107      	bne.n	8004d08 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d007      	beq.n	8004d26 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d162      	bne.n	8004df4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d2e:	e02e      	b.n	8004d8e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d115      	bne.n	8004d6a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f103 020c 	add.w	r2, r3, #12
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	7812      	ldrb	r2, [r2, #0]
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d68:	e011      	b.n	8004d8e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d6a:	f7fe f953 	bl	8003014 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d803      	bhi.n	8004d82 <HAL_SPI_Receive+0x156>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d80:	d102      	bne.n	8004d88 <HAL_SPI_Receive+0x15c>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d8c:	e04a      	b.n	8004e24 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1cb      	bne.n	8004d30 <HAL_SPI_Receive+0x104>
 8004d98:	e031      	b.n	8004dfe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d113      	bne.n	8004dd0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	b292      	uxth	r2, r2
 8004db4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	1c9a      	adds	r2, r3, #2
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dce:	e011      	b.n	8004df4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd0:	f7fe f920 	bl	8003014 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d803      	bhi.n	8004de8 <HAL_SPI_Receive+0x1bc>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de6:	d102      	bne.n	8004dee <HAL_SPI_Receive+0x1c2>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004df2:	e017      	b.n	8004e24 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1cd      	bne.n	8004d9a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	6839      	ldr	r1, [r7, #0]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fb46 	bl	8005494 <SPI_EndRxTransaction>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	75fb      	strb	r3, [r7, #23]
 8004e20:	e000      	b.n	8004e24 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004e22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b08c      	sub	sp, #48	; 0x30
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x26>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e18a      	b.n	800517a <HAL_SPI_TransmitReceive+0x33c>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e6c:	f7fe f8d2 	bl	8003014 <HAL_GetTick>
 8004e70:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e82:	887b      	ldrh	r3, [r7, #2]
 8004e84:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d00f      	beq.n	8004eae <HAL_SPI_TransmitReceive+0x70>
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e94:	d107      	bne.n	8004ea6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d103      	bne.n	8004ea6 <HAL_SPI_TransmitReceive+0x68>
 8004e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d003      	beq.n	8004eae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004eac:	e15b      	b.n	8005166 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_SPI_TransmitReceive+0x82>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_SPI_TransmitReceive+0x82>
 8004eba:	887b      	ldrh	r3, [r7, #2]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ec6:	e14e      	b.n	8005166 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d003      	beq.n	8004edc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2205      	movs	r2, #5
 8004ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	887a      	ldrh	r2, [r7, #2]
 8004ef2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	887a      	ldrh	r2, [r7, #2]
 8004efe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	887a      	ldrh	r2, [r7, #2]
 8004f04:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d007      	beq.n	8004f30 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f38:	d178      	bne.n	800502c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x10a>
 8004f42:	8b7b      	ldrh	r3, [r7, #26]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d166      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	881a      	ldrh	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	1c9a      	adds	r2, r3, #2
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f6c:	e053      	b.n	8005016 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d11b      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x176>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d016      	beq.n	8004fb4 <HAL_SPI_TransmitReceive+0x176>
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d113      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	1c9a      	adds	r2, r3, #2
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d119      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x1b8>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d014      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	b292      	uxth	r2, r2
 8004fd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	1c9a      	adds	r2, r3, #2
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ff6:	f7fe f80d 	bl	8003014 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005002:	429a      	cmp	r2, r3
 8005004:	d807      	bhi.n	8005016 <HAL_SPI_TransmitReceive+0x1d8>
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800500c:	d003      	beq.n	8005016 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005014:	e0a7      	b.n	8005166 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1a6      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x130>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1a1      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x130>
 800502a:	e07c      	b.n	8005126 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_SPI_TransmitReceive+0x1fc>
 8005034:	8b7b      	ldrh	r3, [r7, #26]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d16b      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	330c      	adds	r3, #12
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005060:	e057      	b.n	8005112 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b02      	cmp	r3, #2
 800506e:	d11c      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x26c>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d017      	beq.n	80050aa <HAL_SPI_TransmitReceive+0x26c>
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d114      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	7812      	ldrb	r2, [r2, #0]
 800508c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d119      	bne.n	80050ec <HAL_SPI_TransmitReceive+0x2ae>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d014      	beq.n	80050ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050e8:	2301      	movs	r3, #1
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050ec:	f7fd ff92 	bl	8003014 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d803      	bhi.n	8005104 <HAL_SPI_TransmitReceive+0x2c6>
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005102:	d102      	bne.n	800510a <HAL_SPI_TransmitReceive+0x2cc>
 8005104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005110:	e029      	b.n	8005166 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1a2      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x224>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d19d      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005128:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fa18 	bl	8005560 <SPI_EndRxTxTransaction>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d006      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005142:	e010      	b.n	8005166 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	e000      	b.n	8005166 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005164:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005176:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800517a:	4618      	mov	r0, r3
 800517c:	3730      	adds	r7, #48	; 0x30
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	099b      	lsrs	r3, r3, #6
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10f      	bne.n	80051c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	099b      	lsrs	r3, r3, #6
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	4798      	blx	r3
    return;
 80051c6:	e0d8      	b.n	800537a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_SPI_IRQHandler+0x66>
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	09db      	lsrs	r3, r3, #7
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	4798      	blx	r3
    return;
 80051e8:	e0c7      	b.n	800537a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10c      	bne.n	8005210 <HAL_SPI_IRQHandler+0x8c>
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	099b      	lsrs	r3, r3, #6
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	0a1b      	lsrs	r3, r3, #8
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80b5 	beq.w	800537a <HAL_SPI_IRQHandler+0x1f6>
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80ae 	beq.w	800537a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	099b      	lsrs	r3, r3, #6
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d023      	beq.n	8005272 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b03      	cmp	r3, #3
 8005234:	d011      	beq.n	800525a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523a:	f043 0204 	orr.w	r2, r3, #4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	e00b      	b.n	8005272 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800525a:	2300      	movs	r3, #0
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	693b      	ldr	r3, [r7, #16]
        return;
 8005270:	e083      	b.n	800537a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d014      	beq.n	80052a8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	f043 0201 	orr.w	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00c      	beq.n	80052ce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b8:	f043 0208 	orr.w	r2, r3, #8
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80052c0:	2300      	movs	r3, #0
 80052c2:	60bb      	str	r3, [r7, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d050      	beq.n	8005378 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052e4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d104      	bne.n	8005302 <HAL_SPI_IRQHandler+0x17e>
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d034      	beq.n	800536c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0203 	bic.w	r2, r2, #3
 8005310:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d011      	beq.n	800533e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	4a18      	ldr	r2, [pc, #96]	; (8005380 <HAL_SPI_IRQHandler+0x1fc>)
 8005320:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe f92a 	bl	8003580 <HAL_DMA_Abort_IT>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005342:	2b00      	cmp	r3, #0
 8005344:	d016      	beq.n	8005374 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534a:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <HAL_SPI_IRQHandler+0x1fc>)
 800534c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005352:	4618      	mov	r0, r3
 8005354:	f7fe f914 	bl	8003580 <HAL_DMA_Abort_IT>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800536a:	e003      	b.n	8005374 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f809 	bl	8005384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005372:	e000      	b.n	8005376 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005374:	bf00      	nop
    return;
 8005376:	bf00      	nop
 8005378:	bf00      	nop
  }
}
 800537a:	3720      	adds	r7, #32
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	08005399 	.word	0x08005399

08005384 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff ffe6 	bl	8005384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d0:	e04c      	b.n	800546c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d8:	d048      	beq.n	800546c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80053da:	f7fd fe1b 	bl	8003014 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d902      	bls.n	80053f0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d13d      	bne.n	800546c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005408:	d111      	bne.n	800542e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005412:	d004      	beq.n	800541e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541c:	d107      	bne.n	800542e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005436:	d10f      	bne.n	8005458 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005456:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e00f      	b.n	800548c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	429a      	cmp	r2, r3
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	429a      	cmp	r2, r3
 8005488:	d1a3      	bne.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a8:	d111      	bne.n	80054ce <SPI_EndRxTransaction+0x3a>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b2:	d004      	beq.n	80054be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054bc:	d107      	bne.n	80054ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d6:	d12a      	bne.n	800552e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e0:	d012      	beq.n	8005508 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2200      	movs	r2, #0
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f7ff ff67 	bl	80053c0 <SPI_WaitFlagStateUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02d      	beq.n	8005554 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e026      	b.n	8005556 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2200      	movs	r2, #0
 8005510:	2101      	movs	r1, #1
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f7ff ff54 	bl	80053c0 <SPI_WaitFlagStateUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01a      	beq.n	8005554 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	f043 0220 	orr.w	r2, r3, #32
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e013      	b.n	8005556 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2200      	movs	r2, #0
 8005536:	2101      	movs	r1, #1
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f7ff ff41 	bl	80053c0 <SPI_WaitFlagStateUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005548:	f043 0220 	orr.w	r2, r3, #32
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e000      	b.n	8005556 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800556c:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <SPI_EndRxTxTransaction+0x7c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <SPI_EndRxTxTransaction+0x80>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	0d5b      	lsrs	r3, r3, #21
 8005578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800557c:	fb02 f303 	mul.w	r3, r2, r3
 8005580:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800558a:	d112      	bne.n	80055b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2200      	movs	r2, #0
 8005594:	2180      	movs	r1, #128	; 0x80
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff ff12 	bl	80053c0 <SPI_WaitFlagStateUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d016      	beq.n	80055d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e00f      	b.n	80055d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d0f2      	beq.n	80055b2 <SPI_EndRxTxTransaction+0x52>
 80055cc:	e000      	b.n	80055d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80055ce:	bf00      	nop
  }

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000020 	.word	0x20000020
 80055e0:	165e9f81 	.word	0x165e9f81

080055e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e01d      	b.n	8005632 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fc fc40 	bl	8001e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3304      	adds	r3, #4
 8005620:	4619      	mov	r1, r3
 8005622:	4610      	mov	r0, r2
 8005624:	f000 f988 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b06      	cmp	r3, #6
 8005662:	d007      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0201 	bic.w	r2, r2, #1
 8005698:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6a1a      	ldr	r2, [r3, #32]
 80056a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10f      	bne.n	80056ca <HAL_TIM_Base_Stop_IT+0x48>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6a1a      	ldr	r2, [r3, #32]
 80056b0:	f240 4344 	movw	r3, #1092	; 0x444
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d107      	bne.n	80056ca <HAL_TIM_Base_Stop_IT+0x48>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d122      	bne.n	8005734 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d11b      	bne.n	8005734 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0202 	mvn.w	r2, #2
 8005704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f8ee 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8e0 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f8f1 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b04      	cmp	r3, #4
 8005740:	d122      	bne.n	8005788 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b04      	cmp	r3, #4
 800574e:	d11b      	bne.n	8005788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0204 	mvn.w	r2, #4
 8005758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f8c4 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 8005774:	e005      	b.n	8005782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8b6 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f8c7 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b08      	cmp	r3, #8
 8005794:	d122      	bne.n	80057dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d11b      	bne.n	80057dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0208 	mvn.w	r2, #8
 80057ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2204      	movs	r2, #4
 80057b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f89a 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 80057c8:	e005      	b.n	80057d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f88c 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f89d 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2b10      	cmp	r3, #16
 80057e8:	d122      	bne.n	8005830 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d11b      	bne.n	8005830 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0210 	mvn.w	r2, #16
 8005800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2208      	movs	r2, #8
 8005806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f870 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 800581c:	e005      	b.n	800582a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f862 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f873 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b01      	cmp	r3, #1
 800583c:	d10e      	bne.n	800585c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b01      	cmp	r3, #1
 800584a:	d107      	bne.n	800585c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f06f 0201 	mvn.w	r2, #1
 8005854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fc f93c 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b80      	cmp	r3, #128	; 0x80
 8005868:	d10e      	bne.n	8005888 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005874:	2b80      	cmp	r3, #128	; 0x80
 8005876:	d107      	bne.n	8005888 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f97e 	bl	8005b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d10e      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d107      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f838 	bl	8005924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d10e      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d107      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0220 	mvn.w	r2, #32
 80058d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f948 	bl	8005b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a40      	ldr	r2, [pc, #256]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d013      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005956:	d00f      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a3d      	ldr	r2, [pc, #244]	; (8005a50 <TIM_Base_SetConfig+0x118>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00b      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a3c      	ldr	r2, [pc, #240]	; (8005a54 <TIM_Base_SetConfig+0x11c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a3b      	ldr	r2, [pc, #236]	; (8005a58 <TIM_Base_SetConfig+0x120>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a3a      	ldr	r2, [pc, #232]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d108      	bne.n	800598a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2f      	ldr	r2, [pc, #188]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d02b      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005998:	d027      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a2c      	ldr	r2, [pc, #176]	; (8005a50 <TIM_Base_SetConfig+0x118>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d023      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a2b      	ldr	r2, [pc, #172]	; (8005a54 <TIM_Base_SetConfig+0x11c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01f      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2a      	ldr	r2, [pc, #168]	; (8005a58 <TIM_Base_SetConfig+0x120>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01b      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d017      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a28      	ldr	r2, [pc, #160]	; (8005a60 <TIM_Base_SetConfig+0x128>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a27      	ldr	r2, [pc, #156]	; (8005a64 <TIM_Base_SetConfig+0x12c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00f      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a26      	ldr	r2, [pc, #152]	; (8005a68 <TIM_Base_SetConfig+0x130>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00b      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a25      	ldr	r2, [pc, #148]	; (8005a6c <TIM_Base_SetConfig+0x134>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a24      	ldr	r2, [pc, #144]	; (8005a70 <TIM_Base_SetConfig+0x138>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a23      	ldr	r2, [pc, #140]	; (8005a74 <TIM_Base_SetConfig+0x13c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d108      	bne.n	80059fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0xf8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a0c      	ldr	r2, [pc, #48]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d103      	bne.n	8005a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	615a      	str	r2, [r3, #20]
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40010400 	.word	0x40010400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800
 8005a6c:	40001800 	.word	0x40001800
 8005a70:	40001c00 	.word	0x40001c00
 8005a74:	40002000 	.word	0x40002000

08005a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e05a      	b.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a21      	ldr	r2, [pc, #132]	; (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d022      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005adc:	d01d      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1d      	ldr	r2, [pc, #116]	; (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d018      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1a      	ldr	r2, [pc, #104]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00e      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d004      	beq.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a15      	ldr	r2, [pc, #84]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d10c      	bne.n	8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40000400 	.word	0x40000400
 8005b5c:	40000800 	.word	0x40000800
 8005b60:	40000c00 	.word	0x40000c00
 8005b64:	40010400 	.word	0x40010400
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40001800 	.word	0x40001800

08005b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e03f      	b.n	8005c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fc f9ca 	bl	8001f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2224      	movs	r2, #36	; 0x24
 8005bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fc03 	bl	80063e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695a      	ldr	r2, [r3, #20]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d166      	bne.n	8005d1c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_UART_Receive_DMA+0x26>
 8005c54:	88fb      	ldrh	r3, [r7, #6]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e05f      	b.n	8005d1e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_UART_Receive_DMA+0x38>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e058      	b.n	8005d1e <HAL_UART_Receive_DMA+0xea>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	88fa      	ldrh	r2, [r7, #6]
 8005c7e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2222      	movs	r2, #34	; 0x22
 8005c8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c92:	4a25      	ldr	r2, [pc, #148]	; (8005d28 <HAL_UART_Receive_DMA+0xf4>)
 8005c94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9a:	4a24      	ldr	r2, [pc, #144]	; (8005d2c <HAL_UART_Receive_DMA+0xf8>)
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca2:	4a23      	ldr	r2, [pc, #140]	; (8005d30 <HAL_UART_Receive_DMA+0xfc>)
 8005ca4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005caa:	2200      	movs	r2, #0
 8005cac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005cae:	f107 0308 	add.w	r3, r7, #8
 8005cb2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	f7fd fb93 	bl	80033f0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005cca:	2300      	movs	r3, #0
 8005ccc:	613b      	str	r3, [r7, #16]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0201 	orr.w	r2, r2, #1
 8005d06:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d16:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e000      	b.n	8005d1e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005d1c:	2302      	movs	r3, #2
  }
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	08006061 	.word	0x08006061
 8005d2c:	080060c9 	.word	0x080060c9
 8005d30:	080060e5 	.word	0x080060e5

08005d34 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005d4a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695a      	ldr	r2, [r3, #20]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0201 	bic.w	r2, r2, #1
 8005d5a:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d66:	2b80      	cmp	r3, #128	; 0x80
 8005d68:	d124      	bne.n	8005db4 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d78:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d018      	beq.n	8005db4 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	2200      	movs	r2, #0
 8005d88:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fd fb86 	bl	80034a0 <HAL_DMA_Abort>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00c      	beq.n	8005db4 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fd fd9a 	bl	80038d8 <HAL_DMA_GetError>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	d104      	bne.n	8005db4 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2210      	movs	r2, #16
 8005dae:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e03d      	b.n	8005e30 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	d124      	bne.n	8005e0c <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dd0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d018      	beq.n	8005e0c <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	2200      	movs	r2, #0
 8005de0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fd fb5a 	bl	80034a0 <HAL_DMA_Abort>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00c      	beq.n	8005e0c <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fd fd6e 	bl	80038d8 <HAL_DMA_GetError>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d104      	bne.n	8005e0c <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2210      	movs	r2, #16
 8005e06:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e011      	b.n	8005e30 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10d      	bne.n	8005e8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d008      	beq.n	8005e8a <HAL_UART_IRQHandler+0x52>
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fa2e 	bl	80062e4 <UART_Receive_IT>
      return;
 8005e88:	e0d1      	b.n	800602e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80b0 	beq.w	8005ff2 <HAL_UART_IRQHandler+0x1ba>
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <HAL_UART_IRQHandler+0x70>
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 80a5 	beq.w	8005ff2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x90>
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec0:	f043 0201 	orr.w	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <HAL_UART_IRQHandler+0xb0>
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee0:	f043 0202 	orr.w	r2, r3, #2
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <HAL_UART_IRQHandler+0xd0>
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f00:	f043 0204 	orr.w	r2, r3, #4
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00f      	beq.n	8005f32 <HAL_UART_IRQHandler+0xfa>
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <HAL_UART_IRQHandler+0xee>
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	f043 0208 	orr.w	r2, r3, #8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d078      	beq.n	800602c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <HAL_UART_IRQHandler+0x11c>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9c8 	bl	80062e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5e:	2b40      	cmp	r3, #64	; 0x40
 8005f60:	bf0c      	ite	eq
 8005f62:	2301      	moveq	r3, #1
 8005f64:	2300      	movne	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <HAL_UART_IRQHandler+0x144>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d031      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f911 	bl	80061a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d123      	bne.n	8005fd8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695a      	ldr	r2, [r3, #20]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fac:	4a21      	ldr	r2, [pc, #132]	; (8006034 <HAL_UART_IRQHandler+0x1fc>)
 8005fae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fd fae3 	bl	8003580 <HAL_DMA_Abort_IT>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d016      	beq.n	8005fee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fca:	4610      	mov	r0, r2
 8005fcc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fce:	e00e      	b.n	8005fee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f83b 	bl	800604c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd6:	e00a      	b.n	8005fee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f837 	bl	800604c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fde:	e006      	b.n	8005fee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f833 	bl	800604c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005fec:	e01e      	b.n	800602c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fee:	bf00      	nop
    return;
 8005ff0:	e01c      	b.n	800602c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <HAL_UART_IRQHandler+0x1d6>
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f8fe 	bl	8006208 <UART_Transmit_IT>
    return;
 800600c:	e00f      	b.n	800602e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <HAL_UART_IRQHandler+0x1f6>
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f946 	bl	80062b4 <UART_EndTransmit_IT>
    return;
 8006028:	bf00      	nop
 800602a:	e000      	b.n	800602e <HAL_UART_IRQHandler+0x1f6>
    return;
 800602c:	bf00      	nop
  }
}
 800602e:	3720      	adds	r7, #32
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	080061e1 	.word	0x080061e1

08006038 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d11e      	bne.n	80060ba <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006090:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695a      	ldr	r2, [r3, #20]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695a      	ldr	r2, [r3, #20]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f7fb fca8 	bl	8001a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff ffae 	bl	8006038 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006100:	2b80      	cmp	r3, #128	; 0x80
 8006102:	bf0c      	ite	eq
 8006104:	2301      	moveq	r3, #1
 8006106:	2300      	movne	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b21      	cmp	r3, #33	; 0x21
 8006116:	d108      	bne.n	800612a <UART_DMAError+0x46>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2200      	movs	r2, #0
 8006122:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006124:	68b8      	ldr	r0, [r7, #8]
 8006126:	f000 f827 	bl	8006178 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006134:	2b40      	cmp	r3, #64	; 0x40
 8006136:	bf0c      	ite	eq
 8006138:	2301      	moveq	r3, #1
 800613a:	2300      	movne	r3, #0
 800613c:	b2db      	uxtb	r3, r3
 800613e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b22      	cmp	r3, #34	; 0x22
 800614a:	d108      	bne.n	800615e <UART_DMAError+0x7a>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2200      	movs	r2, #0
 8006156:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006158:	68b8      	ldr	r0, [r7, #8]
 800615a:	f000 f823 	bl	80061a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	f043 0210 	orr.w	r2, r3, #16
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800616a:	68b8      	ldr	r0, [r7, #8]
 800616c:	f7ff ff6e 	bl	800604c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006170:	bf00      	nop
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800618e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0201 	bic.w	r2, r2, #1
 80061ca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff ff26 	bl	800604c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b21      	cmp	r3, #33	; 0x21
 800621a:	d144      	bne.n	80062a6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006224:	d11a      	bne.n	800625c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800623a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	1c9a      	adds	r2, r3, #2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	621a      	str	r2, [r3, #32]
 800624e:	e00e      	b.n	800626e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	621a      	str	r2, [r3, #32]
 800625a:	e008      	b.n	800626e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6211      	str	r1, [r2, #32]
 8006266:	781a      	ldrb	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29b      	uxth	r3, r3
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4619      	mov	r1, r3
 800627c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10f      	bne.n	80062a2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006290:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e000      	b.n	80062a8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80062a6:	2302      	movs	r3, #2
  }
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7fb fbf3 	bl	8001ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b22      	cmp	r3, #34	; 0x22
 80062f6:	d171      	bne.n	80063dc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006300:	d123      	bne.n	800634a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10e      	bne.n	800632e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	1c9a      	adds	r2, r3, #2
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28
 800632c:	e029      	b.n	8006382 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	b29b      	uxth	r3, r3
 8006336:	b2db      	uxtb	r3, r3
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	629a      	str	r2, [r3, #40]	; 0x28
 8006348:	e01b      	b.n	8006382 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6858      	ldr	r0, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	1c59      	adds	r1, r3, #1
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6291      	str	r1, [r2, #40]	; 0x28
 8006362:	b2c2      	uxtb	r2, r0
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	e00c      	b.n	8006382 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006374:	1c58      	adds	r0, r3, #1
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	6288      	str	r0, [r1, #40]	; 0x28
 800637a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29b      	uxth	r3, r3
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	4619      	mov	r1, r3
 8006390:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006392:	2b00      	cmp	r3, #0
 8006394:	d120      	bne.n	80063d8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0220 	bic.w	r2, r2, #32
 80063a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fb fb1e 	bl	8001a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	e002      	b.n	80063de <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	e000      	b.n	80063de <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
  }
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800642a:	f023 030c 	bic.w	r3, r3, #12
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	68f9      	ldr	r1, [r7, #12]
 8006434:	430b      	orrs	r3, r1
 8006436:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006456:	f040 818b 	bne.w	8006770 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4ac1      	ldr	r2, [pc, #772]	; (8006764 <UART_SetConfig+0x37c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d005      	beq.n	8006470 <UART_SetConfig+0x88>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4abf      	ldr	r2, [pc, #764]	; (8006768 <UART_SetConfig+0x380>)
 800646a:	4293      	cmp	r3, r2
 800646c:	f040 80bd 	bne.w	80065ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006470:	f7fd fe36 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 8006474:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	461d      	mov	r5, r3
 800647a:	f04f 0600 	mov.w	r6, #0
 800647e:	46a8      	mov	r8, r5
 8006480:	46b1      	mov	r9, r6
 8006482:	eb18 0308 	adds.w	r3, r8, r8
 8006486:	eb49 0409 	adc.w	r4, r9, r9
 800648a:	4698      	mov	r8, r3
 800648c:	46a1      	mov	r9, r4
 800648e:	eb18 0805 	adds.w	r8, r8, r5
 8006492:	eb49 0906 	adc.w	r9, r9, r6
 8006496:	f04f 0100 	mov.w	r1, #0
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064aa:	4688      	mov	r8, r1
 80064ac:	4691      	mov	r9, r2
 80064ae:	eb18 0005 	adds.w	r0, r8, r5
 80064b2:	eb49 0106 	adc.w	r1, r9, r6
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	461d      	mov	r5, r3
 80064bc:	f04f 0600 	mov.w	r6, #0
 80064c0:	196b      	adds	r3, r5, r5
 80064c2:	eb46 0406 	adc.w	r4, r6, r6
 80064c6:	461a      	mov	r2, r3
 80064c8:	4623      	mov	r3, r4
 80064ca:	f7f9 fe9b 	bl	8000204 <__aeabi_uldivmod>
 80064ce:	4603      	mov	r3, r0
 80064d0:	460c      	mov	r4, r1
 80064d2:	461a      	mov	r2, r3
 80064d4:	4ba5      	ldr	r3, [pc, #660]	; (800676c <UART_SetConfig+0x384>)
 80064d6:	fba3 2302 	umull	r2, r3, r3, r2
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	461d      	mov	r5, r3
 80064e4:	f04f 0600 	mov.w	r6, #0
 80064e8:	46a9      	mov	r9, r5
 80064ea:	46b2      	mov	sl, r6
 80064ec:	eb19 0309 	adds.w	r3, r9, r9
 80064f0:	eb4a 040a 	adc.w	r4, sl, sl
 80064f4:	4699      	mov	r9, r3
 80064f6:	46a2      	mov	sl, r4
 80064f8:	eb19 0905 	adds.w	r9, r9, r5
 80064fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8006500:	f04f 0100 	mov.w	r1, #0
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800650c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006510:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006514:	4689      	mov	r9, r1
 8006516:	4692      	mov	sl, r2
 8006518:	eb19 0005 	adds.w	r0, r9, r5
 800651c:	eb4a 0106 	adc.w	r1, sl, r6
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	461d      	mov	r5, r3
 8006526:	f04f 0600 	mov.w	r6, #0
 800652a:	196b      	adds	r3, r5, r5
 800652c:	eb46 0406 	adc.w	r4, r6, r6
 8006530:	461a      	mov	r2, r3
 8006532:	4623      	mov	r3, r4
 8006534:	f7f9 fe66 	bl	8000204 <__aeabi_uldivmod>
 8006538:	4603      	mov	r3, r0
 800653a:	460c      	mov	r4, r1
 800653c:	461a      	mov	r2, r3
 800653e:	4b8b      	ldr	r3, [pc, #556]	; (800676c <UART_SetConfig+0x384>)
 8006540:	fba3 1302 	umull	r1, r3, r3, r2
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	2164      	movs	r1, #100	; 0x64
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	3332      	adds	r3, #50	; 0x32
 8006552:	4a86      	ldr	r2, [pc, #536]	; (800676c <UART_SetConfig+0x384>)
 8006554:	fba2 2303 	umull	r2, r3, r2, r3
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006560:	4498      	add	r8, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	461d      	mov	r5, r3
 8006566:	f04f 0600 	mov.w	r6, #0
 800656a:	46a9      	mov	r9, r5
 800656c:	46b2      	mov	sl, r6
 800656e:	eb19 0309 	adds.w	r3, r9, r9
 8006572:	eb4a 040a 	adc.w	r4, sl, sl
 8006576:	4699      	mov	r9, r3
 8006578:	46a2      	mov	sl, r4
 800657a:	eb19 0905 	adds.w	r9, r9, r5
 800657e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006582:	f04f 0100 	mov.w	r1, #0
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800658e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006592:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006596:	4689      	mov	r9, r1
 8006598:	4692      	mov	sl, r2
 800659a:	eb19 0005 	adds.w	r0, r9, r5
 800659e:	eb4a 0106 	adc.w	r1, sl, r6
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	461d      	mov	r5, r3
 80065a8:	f04f 0600 	mov.w	r6, #0
 80065ac:	196b      	adds	r3, r5, r5
 80065ae:	eb46 0406 	adc.w	r4, r6, r6
 80065b2:	461a      	mov	r2, r3
 80065b4:	4623      	mov	r3, r4
 80065b6:	f7f9 fe25 	bl	8000204 <__aeabi_uldivmod>
 80065ba:	4603      	mov	r3, r0
 80065bc:	460c      	mov	r4, r1
 80065be:	461a      	mov	r2, r3
 80065c0:	4b6a      	ldr	r3, [pc, #424]	; (800676c <UART_SetConfig+0x384>)
 80065c2:	fba3 1302 	umull	r1, r3, r3, r2
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	2164      	movs	r1, #100	; 0x64
 80065ca:	fb01 f303 	mul.w	r3, r1, r3
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	3332      	adds	r3, #50	; 0x32
 80065d4:	4a65      	ldr	r2, [pc, #404]	; (800676c <UART_SetConfig+0x384>)
 80065d6:	fba2 2303 	umull	r2, r3, r2, r3
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	f003 0207 	and.w	r2, r3, #7
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4442      	add	r2, r8
 80065e6:	609a      	str	r2, [r3, #8]
 80065e8:	e26f      	b.n	8006aca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ea:	f7fd fd65 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 80065ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	461d      	mov	r5, r3
 80065f4:	f04f 0600 	mov.w	r6, #0
 80065f8:	46a8      	mov	r8, r5
 80065fa:	46b1      	mov	r9, r6
 80065fc:	eb18 0308 	adds.w	r3, r8, r8
 8006600:	eb49 0409 	adc.w	r4, r9, r9
 8006604:	4698      	mov	r8, r3
 8006606:	46a1      	mov	r9, r4
 8006608:	eb18 0805 	adds.w	r8, r8, r5
 800660c:	eb49 0906 	adc.w	r9, r9, r6
 8006610:	f04f 0100 	mov.w	r1, #0
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800661c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006620:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006624:	4688      	mov	r8, r1
 8006626:	4691      	mov	r9, r2
 8006628:	eb18 0005 	adds.w	r0, r8, r5
 800662c:	eb49 0106 	adc.w	r1, r9, r6
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	461d      	mov	r5, r3
 8006636:	f04f 0600 	mov.w	r6, #0
 800663a:	196b      	adds	r3, r5, r5
 800663c:	eb46 0406 	adc.w	r4, r6, r6
 8006640:	461a      	mov	r2, r3
 8006642:	4623      	mov	r3, r4
 8006644:	f7f9 fdde 	bl	8000204 <__aeabi_uldivmod>
 8006648:	4603      	mov	r3, r0
 800664a:	460c      	mov	r4, r1
 800664c:	461a      	mov	r2, r3
 800664e:	4b47      	ldr	r3, [pc, #284]	; (800676c <UART_SetConfig+0x384>)
 8006650:	fba3 2302 	umull	r2, r3, r3, r2
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	461d      	mov	r5, r3
 800665e:	f04f 0600 	mov.w	r6, #0
 8006662:	46a9      	mov	r9, r5
 8006664:	46b2      	mov	sl, r6
 8006666:	eb19 0309 	adds.w	r3, r9, r9
 800666a:	eb4a 040a 	adc.w	r4, sl, sl
 800666e:	4699      	mov	r9, r3
 8006670:	46a2      	mov	sl, r4
 8006672:	eb19 0905 	adds.w	r9, r9, r5
 8006676:	eb4a 0a06 	adc.w	sl, sl, r6
 800667a:	f04f 0100 	mov.w	r1, #0
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006686:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800668a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800668e:	4689      	mov	r9, r1
 8006690:	4692      	mov	sl, r2
 8006692:	eb19 0005 	adds.w	r0, r9, r5
 8006696:	eb4a 0106 	adc.w	r1, sl, r6
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	461d      	mov	r5, r3
 80066a0:	f04f 0600 	mov.w	r6, #0
 80066a4:	196b      	adds	r3, r5, r5
 80066a6:	eb46 0406 	adc.w	r4, r6, r6
 80066aa:	461a      	mov	r2, r3
 80066ac:	4623      	mov	r3, r4
 80066ae:	f7f9 fda9 	bl	8000204 <__aeabi_uldivmod>
 80066b2:	4603      	mov	r3, r0
 80066b4:	460c      	mov	r4, r1
 80066b6:	461a      	mov	r2, r3
 80066b8:	4b2c      	ldr	r3, [pc, #176]	; (800676c <UART_SetConfig+0x384>)
 80066ba:	fba3 1302 	umull	r1, r3, r3, r2
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	2164      	movs	r1, #100	; 0x64
 80066c2:	fb01 f303 	mul.w	r3, r1, r3
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	3332      	adds	r3, #50	; 0x32
 80066cc:	4a27      	ldr	r2, [pc, #156]	; (800676c <UART_SetConfig+0x384>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066da:	4498      	add	r8, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	461d      	mov	r5, r3
 80066e0:	f04f 0600 	mov.w	r6, #0
 80066e4:	46a9      	mov	r9, r5
 80066e6:	46b2      	mov	sl, r6
 80066e8:	eb19 0309 	adds.w	r3, r9, r9
 80066ec:	eb4a 040a 	adc.w	r4, sl, sl
 80066f0:	4699      	mov	r9, r3
 80066f2:	46a2      	mov	sl, r4
 80066f4:	eb19 0905 	adds.w	r9, r9, r5
 80066f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80066fc:	f04f 0100 	mov.w	r1, #0
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006708:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800670c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006710:	4689      	mov	r9, r1
 8006712:	4692      	mov	sl, r2
 8006714:	eb19 0005 	adds.w	r0, r9, r5
 8006718:	eb4a 0106 	adc.w	r1, sl, r6
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	461d      	mov	r5, r3
 8006722:	f04f 0600 	mov.w	r6, #0
 8006726:	196b      	adds	r3, r5, r5
 8006728:	eb46 0406 	adc.w	r4, r6, r6
 800672c:	461a      	mov	r2, r3
 800672e:	4623      	mov	r3, r4
 8006730:	f7f9 fd68 	bl	8000204 <__aeabi_uldivmod>
 8006734:	4603      	mov	r3, r0
 8006736:	460c      	mov	r4, r1
 8006738:	461a      	mov	r2, r3
 800673a:	4b0c      	ldr	r3, [pc, #48]	; (800676c <UART_SetConfig+0x384>)
 800673c:	fba3 1302 	umull	r1, r3, r3, r2
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	2164      	movs	r1, #100	; 0x64
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	3332      	adds	r3, #50	; 0x32
 800674e:	4a07      	ldr	r2, [pc, #28]	; (800676c <UART_SetConfig+0x384>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	f003 0207 	and.w	r2, r3, #7
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4442      	add	r2, r8
 8006760:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006762:	e1b2      	b.n	8006aca <UART_SetConfig+0x6e2>
 8006764:	40011000 	.word	0x40011000
 8006768:	40011400 	.word	0x40011400
 800676c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4ad7      	ldr	r2, [pc, #860]	; (8006ad4 <UART_SetConfig+0x6ec>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d005      	beq.n	8006786 <UART_SetConfig+0x39e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4ad6      	ldr	r2, [pc, #856]	; (8006ad8 <UART_SetConfig+0x6f0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	f040 80d1 	bne.w	8006928 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006786:	f7fd fcab 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 800678a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	469a      	mov	sl, r3
 8006790:	f04f 0b00 	mov.w	fp, #0
 8006794:	46d0      	mov	r8, sl
 8006796:	46d9      	mov	r9, fp
 8006798:	eb18 0308 	adds.w	r3, r8, r8
 800679c:	eb49 0409 	adc.w	r4, r9, r9
 80067a0:	4698      	mov	r8, r3
 80067a2:	46a1      	mov	r9, r4
 80067a4:	eb18 080a 	adds.w	r8, r8, sl
 80067a8:	eb49 090b 	adc.w	r9, r9, fp
 80067ac:	f04f 0100 	mov.w	r1, #0
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067c0:	4688      	mov	r8, r1
 80067c2:	4691      	mov	r9, r2
 80067c4:	eb1a 0508 	adds.w	r5, sl, r8
 80067c8:	eb4b 0609 	adc.w	r6, fp, r9
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	4619      	mov	r1, r3
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	f04f 0400 	mov.w	r4, #0
 80067de:	0094      	lsls	r4, r2, #2
 80067e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067e4:	008b      	lsls	r3, r1, #2
 80067e6:	461a      	mov	r2, r3
 80067e8:	4623      	mov	r3, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	4631      	mov	r1, r6
 80067ee:	f7f9 fd09 	bl	8000204 <__aeabi_uldivmod>
 80067f2:	4603      	mov	r3, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	461a      	mov	r2, r3
 80067f8:	4bb8      	ldr	r3, [pc, #736]	; (8006adc <UART_SetConfig+0x6f4>)
 80067fa:	fba3 2302 	umull	r2, r3, r3, r2
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	469b      	mov	fp, r3
 8006808:	f04f 0c00 	mov.w	ip, #0
 800680c:	46d9      	mov	r9, fp
 800680e:	46e2      	mov	sl, ip
 8006810:	eb19 0309 	adds.w	r3, r9, r9
 8006814:	eb4a 040a 	adc.w	r4, sl, sl
 8006818:	4699      	mov	r9, r3
 800681a:	46a2      	mov	sl, r4
 800681c:	eb19 090b 	adds.w	r9, r9, fp
 8006820:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006824:	f04f 0100 	mov.w	r1, #0
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006830:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006834:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006838:	4689      	mov	r9, r1
 800683a:	4692      	mov	sl, r2
 800683c:	eb1b 0509 	adds.w	r5, fp, r9
 8006840:	eb4c 060a 	adc.w	r6, ip, sl
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	4619      	mov	r1, r3
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	f04f 0400 	mov.w	r4, #0
 8006856:	0094      	lsls	r4, r2, #2
 8006858:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800685c:	008b      	lsls	r3, r1, #2
 800685e:	461a      	mov	r2, r3
 8006860:	4623      	mov	r3, r4
 8006862:	4628      	mov	r0, r5
 8006864:	4631      	mov	r1, r6
 8006866:	f7f9 fccd 	bl	8000204 <__aeabi_uldivmod>
 800686a:	4603      	mov	r3, r0
 800686c:	460c      	mov	r4, r1
 800686e:	461a      	mov	r2, r3
 8006870:	4b9a      	ldr	r3, [pc, #616]	; (8006adc <UART_SetConfig+0x6f4>)
 8006872:	fba3 1302 	umull	r1, r3, r3, r2
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	2164      	movs	r1, #100	; 0x64
 800687a:	fb01 f303 	mul.w	r3, r1, r3
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	3332      	adds	r3, #50	; 0x32
 8006884:	4a95      	ldr	r2, [pc, #596]	; (8006adc <UART_SetConfig+0x6f4>)
 8006886:	fba2 2303 	umull	r2, r3, r2, r3
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006890:	4498      	add	r8, r3
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	469b      	mov	fp, r3
 8006896:	f04f 0c00 	mov.w	ip, #0
 800689a:	46d9      	mov	r9, fp
 800689c:	46e2      	mov	sl, ip
 800689e:	eb19 0309 	adds.w	r3, r9, r9
 80068a2:	eb4a 040a 	adc.w	r4, sl, sl
 80068a6:	4699      	mov	r9, r3
 80068a8:	46a2      	mov	sl, r4
 80068aa:	eb19 090b 	adds.w	r9, r9, fp
 80068ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068b2:	f04f 0100 	mov.w	r1, #0
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068c6:	4689      	mov	r9, r1
 80068c8:	4692      	mov	sl, r2
 80068ca:	eb1b 0509 	adds.w	r5, fp, r9
 80068ce:	eb4c 060a 	adc.w	r6, ip, sl
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	4619      	mov	r1, r3
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	f04f 0400 	mov.w	r4, #0
 80068e4:	0094      	lsls	r4, r2, #2
 80068e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068ea:	008b      	lsls	r3, r1, #2
 80068ec:	461a      	mov	r2, r3
 80068ee:	4623      	mov	r3, r4
 80068f0:	4628      	mov	r0, r5
 80068f2:	4631      	mov	r1, r6
 80068f4:	f7f9 fc86 	bl	8000204 <__aeabi_uldivmod>
 80068f8:	4603      	mov	r3, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	461a      	mov	r2, r3
 80068fe:	4b77      	ldr	r3, [pc, #476]	; (8006adc <UART_SetConfig+0x6f4>)
 8006900:	fba3 1302 	umull	r1, r3, r3, r2
 8006904:	095b      	lsrs	r3, r3, #5
 8006906:	2164      	movs	r1, #100	; 0x64
 8006908:	fb01 f303 	mul.w	r3, r1, r3
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	3332      	adds	r3, #50	; 0x32
 8006912:	4a72      	ldr	r2, [pc, #456]	; (8006adc <UART_SetConfig+0x6f4>)
 8006914:	fba2 2303 	umull	r2, r3, r2, r3
 8006918:	095b      	lsrs	r3, r3, #5
 800691a:	f003 020f 	and.w	r2, r3, #15
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4442      	add	r2, r8
 8006924:	609a      	str	r2, [r3, #8]
 8006926:	e0d0      	b.n	8006aca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006928:	f7fd fbc6 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 800692c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	469a      	mov	sl, r3
 8006932:	f04f 0b00 	mov.w	fp, #0
 8006936:	46d0      	mov	r8, sl
 8006938:	46d9      	mov	r9, fp
 800693a:	eb18 0308 	adds.w	r3, r8, r8
 800693e:	eb49 0409 	adc.w	r4, r9, r9
 8006942:	4698      	mov	r8, r3
 8006944:	46a1      	mov	r9, r4
 8006946:	eb18 080a 	adds.w	r8, r8, sl
 800694a:	eb49 090b 	adc.w	r9, r9, fp
 800694e:	f04f 0100 	mov.w	r1, #0
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800695a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800695e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006962:	4688      	mov	r8, r1
 8006964:	4691      	mov	r9, r2
 8006966:	eb1a 0508 	adds.w	r5, sl, r8
 800696a:	eb4b 0609 	adc.w	r6, fp, r9
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	4619      	mov	r1, r3
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	f04f 0400 	mov.w	r4, #0
 8006980:	0094      	lsls	r4, r2, #2
 8006982:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006986:	008b      	lsls	r3, r1, #2
 8006988:	461a      	mov	r2, r3
 800698a:	4623      	mov	r3, r4
 800698c:	4628      	mov	r0, r5
 800698e:	4631      	mov	r1, r6
 8006990:	f7f9 fc38 	bl	8000204 <__aeabi_uldivmod>
 8006994:	4603      	mov	r3, r0
 8006996:	460c      	mov	r4, r1
 8006998:	461a      	mov	r2, r3
 800699a:	4b50      	ldr	r3, [pc, #320]	; (8006adc <UART_SetConfig+0x6f4>)
 800699c:	fba3 2302 	umull	r2, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	469b      	mov	fp, r3
 80069aa:	f04f 0c00 	mov.w	ip, #0
 80069ae:	46d9      	mov	r9, fp
 80069b0:	46e2      	mov	sl, ip
 80069b2:	eb19 0309 	adds.w	r3, r9, r9
 80069b6:	eb4a 040a 	adc.w	r4, sl, sl
 80069ba:	4699      	mov	r9, r3
 80069bc:	46a2      	mov	sl, r4
 80069be:	eb19 090b 	adds.w	r9, r9, fp
 80069c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069c6:	f04f 0100 	mov.w	r1, #0
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069da:	4689      	mov	r9, r1
 80069dc:	4692      	mov	sl, r2
 80069de:	eb1b 0509 	adds.w	r5, fp, r9
 80069e2:	eb4c 060a 	adc.w	r6, ip, sl
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	4619      	mov	r1, r3
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	f04f 0400 	mov.w	r4, #0
 80069f8:	0094      	lsls	r4, r2, #2
 80069fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069fe:	008b      	lsls	r3, r1, #2
 8006a00:	461a      	mov	r2, r3
 8006a02:	4623      	mov	r3, r4
 8006a04:	4628      	mov	r0, r5
 8006a06:	4631      	mov	r1, r6
 8006a08:	f7f9 fbfc 	bl	8000204 <__aeabi_uldivmod>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	461a      	mov	r2, r3
 8006a12:	4b32      	ldr	r3, [pc, #200]	; (8006adc <UART_SetConfig+0x6f4>)
 8006a14:	fba3 1302 	umull	r1, r3, r3, r2
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	2164      	movs	r1, #100	; 0x64
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	3332      	adds	r3, #50	; 0x32
 8006a26:	4a2d      	ldr	r2, [pc, #180]	; (8006adc <UART_SetConfig+0x6f4>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a32:	4498      	add	r8, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	469b      	mov	fp, r3
 8006a38:	f04f 0c00 	mov.w	ip, #0
 8006a3c:	46d9      	mov	r9, fp
 8006a3e:	46e2      	mov	sl, ip
 8006a40:	eb19 0309 	adds.w	r3, r9, r9
 8006a44:	eb4a 040a 	adc.w	r4, sl, sl
 8006a48:	4699      	mov	r9, r3
 8006a4a:	46a2      	mov	sl, r4
 8006a4c:	eb19 090b 	adds.w	r9, r9, fp
 8006a50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a54:	f04f 0100 	mov.w	r1, #0
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a68:	4689      	mov	r9, r1
 8006a6a:	4692      	mov	sl, r2
 8006a6c:	eb1b 0509 	adds.w	r5, fp, r9
 8006a70:	eb4c 060a 	adc.w	r6, ip, sl
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	f04f 0400 	mov.w	r4, #0
 8006a86:	0094      	lsls	r4, r2, #2
 8006a88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a8c:	008b      	lsls	r3, r1, #2
 8006a8e:	461a      	mov	r2, r3
 8006a90:	4623      	mov	r3, r4
 8006a92:	4628      	mov	r0, r5
 8006a94:	4631      	mov	r1, r6
 8006a96:	f7f9 fbb5 	bl	8000204 <__aeabi_uldivmod>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4b0e      	ldr	r3, [pc, #56]	; (8006adc <UART_SetConfig+0x6f4>)
 8006aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa6:	095b      	lsrs	r3, r3, #5
 8006aa8:	2164      	movs	r1, #100	; 0x64
 8006aaa:	fb01 f303 	mul.w	r3, r1, r3
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	3332      	adds	r3, #50	; 0x32
 8006ab4:	4a09      	ldr	r2, [pc, #36]	; (8006adc <UART_SetConfig+0x6f4>)
 8006ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aba:	095b      	lsrs	r3, r3, #5
 8006abc:	f003 020f 	and.w	r2, r3, #15
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4442      	add	r2, r8
 8006ac6:	609a      	str	r2, [r3, #8]
}
 8006ac8:	e7ff      	b.n	8006aca <UART_SetConfig+0x6e2>
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad4:	40011000 	.word	0x40011000
 8006ad8:	40011400 	.word	0x40011400
 8006adc:	51eb851f 	.word	0x51eb851f

08006ae0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006ae4:	4904      	ldr	r1, [pc, #16]	; (8006af8 <MX_FATFS_Init+0x18>)
 8006ae6:	4805      	ldr	r0, [pc, #20]	; (8006afc <MX_FATFS_Init+0x1c>)
 8006ae8:	f002 fb4c 	bl	8009184 <FATFS_LinkDriver>
 8006aec:	4603      	mov	r3, r0
 8006aee:	461a      	mov	r2, r3
 8006af0:	4b03      	ldr	r3, [pc, #12]	; (8006b00 <MX_FATFS_Init+0x20>)
 8006af2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006af4:	bf00      	nop
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000a64 	.word	0x20000a64
 8006afc:	20000030 	.word	0x20000030
 8006b00:	20000a68 	.word	0x20000a68

08006b04 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006b08:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fb fe9f 	bl	8002864 <USER_SPI_initialize>
 8006b26:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fb ff71 	bl	8002a24 <USER_SPI_status>
 8006b42:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006b5c:	7bf8      	ldrb	r0, [r7, #15]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	f7fb ff74 	bl	8002a50 <USER_SPI_read>
 8006b68:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */


    return USER_SPI_write(pdrv, buff, sector, count);
 8006b82:	7bf8      	ldrb	r0, [r7, #15]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	f7fb ffc7 	bl	8002b1c <USER_SPI_write>
 8006b8e:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	603a      	str	r2, [r7, #0]
 8006ba2:	71fb      	strb	r3, [r7, #7]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006ba8:	79b9      	ldrb	r1, [r7, #6]
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fc f830 	bl	8002c14 <USER_SPI_ioctl>
 8006bb4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	4a08      	ldr	r2, [pc, #32]	; (8006bf0 <disk_status+0x30>)
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	79fa      	ldrb	r2, [r7, #7]
 8006bd8:	4905      	ldr	r1, [pc, #20]	; (8006bf0 <disk_status+0x30>)
 8006bda:	440a      	add	r2, r1
 8006bdc:	7a12      	ldrb	r2, [r2, #8]
 8006bde:	4610      	mov	r0, r2
 8006be0:	4798      	blx	r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20000094 	.word	0x20000094

08006bf4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006c02:	79fb      	ldrb	r3, [r7, #7]
 8006c04:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <disk_initialize+0x48>)
 8006c06:	5cd3      	ldrb	r3, [r2, r3]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d111      	bne.n	8006c30 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	4a0b      	ldr	r2, [pc, #44]	; (8006c3c <disk_initialize+0x48>)
 8006c10:	2101      	movs	r1, #1
 8006c12:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	4a09      	ldr	r2, [pc, #36]	; (8006c3c <disk_initialize+0x48>)
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	79fa      	ldrb	r2, [r7, #7]
 8006c22:	4906      	ldr	r1, [pc, #24]	; (8006c3c <disk_initialize+0x48>)
 8006c24:	440a      	add	r2, r1
 8006c26:	7a12      	ldrb	r2, [r2, #8]
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4798      	blx	r3
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20000094 	.word	0x20000094

08006c40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006c40:	b590      	push	{r4, r7, lr}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	4a0a      	ldr	r2, [pc, #40]	; (8006c7c <disk_read+0x3c>)
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	689c      	ldr	r4, [r3, #8]
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	4a07      	ldr	r2, [pc, #28]	; (8006c7c <disk_read+0x3c>)
 8006c60:	4413      	add	r3, r2
 8006c62:	7a18      	ldrb	r0, [r3, #8]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	47a0      	blx	r4
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd90      	pop	{r4, r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000094 	.word	0x20000094

08006c80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c80:	b590      	push	{r4, r7, lr}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <disk_write+0x3c>)
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	68dc      	ldr	r4, [r3, #12]
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	4a07      	ldr	r2, [pc, #28]	; (8006cbc <disk_write+0x3c>)
 8006ca0:	4413      	add	r3, r2
 8006ca2:	7a18      	ldrb	r0, [r3, #8]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	47a0      	blx	r4
 8006cac:	4603      	mov	r3, r0
 8006cae:	75fb      	strb	r3, [r7, #23]
  return res;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd90      	pop	{r4, r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000094 	.word	0x20000094

08006cc0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	603a      	str	r2, [r7, #0]
 8006cca:	71fb      	strb	r3, [r7, #7]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	4a09      	ldr	r2, [pc, #36]	; (8006cf8 <disk_ioctl+0x38>)
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	79fa      	ldrb	r2, [r7, #7]
 8006cde:	4906      	ldr	r1, [pc, #24]	; (8006cf8 <disk_ioctl+0x38>)
 8006ce0:	440a      	add	r2, r1
 8006ce2:	7a10      	ldrb	r0, [r2, #8]
 8006ce4:	79b9      	ldrb	r1, [r7, #6]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	4798      	blx	r3
 8006cea:	4603      	mov	r3, r0
 8006cec:	73fb      	strb	r3, [r7, #15]
  return res;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20000094 	.word	0x20000094

08006cfc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3301      	adds	r3, #1
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006d0c:	89fb      	ldrh	r3, [r7, #14]
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	b21a      	sxth	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b21b      	sxth	r3, r3
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	b21b      	sxth	r3, r3
 8006d1c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006d1e:	89fb      	ldrh	r3, [r7, #14]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3303      	adds	r3, #3
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	3202      	adds	r2, #2
 8006d44:	7812      	ldrb	r2, [r2, #0]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	021b      	lsls	r3, r3, #8
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	3201      	adds	r2, #1
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
	return rv;
 8006d64:	68fb      	ldr	r3, [r7, #12]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	887a      	ldrh	r2, [r7, #2]
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	887b      	ldrh	r3, [r7, #2]
 8006d8c:	0a1b      	lsrs	r3, r3, #8
 8006d8e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	607a      	str	r2, [r7, #4]
 8006d96:	887a      	ldrh	r2, [r7, #2]
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	0a1b      	lsrs	r3, r3, #8
 8006dc2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	0a1b      	lsrs	r3, r3, #8
 8006dd4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	0a1b      	lsrs	r3, r3, #8
 8006de6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	607a      	str	r2, [r7, #4]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00d      	beq.n	8006e36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	1c53      	adds	r3, r2, #1
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	1c59      	adds	r1, r3, #1
 8006e24:	6179      	str	r1, [r7, #20]
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	607b      	str	r3, [r7, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1f1      	bne.n	8006e1a <mem_cpy+0x1a>
	}
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006e42:	b480      	push	{r7}
 8006e44:	b087      	sub	sp, #28
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	617a      	str	r2, [r7, #20]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1f3      	bne.n	8006e52 <mem_set+0x10>
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006e76:	b480      	push	{r7}
 8006e78:	b089      	sub	sp, #36	; 0x24
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	61fa      	str	r2, [r7, #28]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	4619      	mov	r1, r3
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	61ba      	str	r2, [r7, #24]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	1acb      	subs	r3, r1, r3
 8006ea2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	607b      	str	r3, [r7, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <mem_cmp+0x40>
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0eb      	beq.n	8006e8e <mem_cmp+0x18>

	return r;
 8006eb6:	697b      	ldr	r3, [r7, #20]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3724      	adds	r7, #36	; 0x24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006ece:	e002      	b.n	8006ed6 <chk_chr+0x12>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	607b      	str	r3, [r7, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d005      	beq.n	8006eea <chk_chr+0x26>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d1f2      	bne.n	8006ed0 <chk_chr+0xc>
	return *str;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	781b      	ldrb	r3, [r3, #0]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f06:	2300      	movs	r3, #0
 8006f08:	60bb      	str	r3, [r7, #8]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	e029      	b.n	8006f64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006f10:	4a27      	ldr	r2, [pc, #156]	; (8006fb0 <chk_lock+0xb4>)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	4413      	add	r3, r2
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01d      	beq.n	8006f5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f1e:	4a24      	ldr	r2, [pc, #144]	; (8006fb0 <chk_lock+0xb4>)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	4413      	add	r3, r2
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d116      	bne.n	8006f5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006f30:	4a1f      	ldr	r2, [pc, #124]	; (8006fb0 <chk_lock+0xb4>)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	4413      	add	r3, r2
 8006f38:	3304      	adds	r3, #4
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d10c      	bne.n	8006f5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f44:	4a1a      	ldr	r2, [pc, #104]	; (8006fb0 <chk_lock+0xb4>)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	4413      	add	r3, r2
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d102      	bne.n	8006f5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f58:	e007      	b.n	8006f6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d9d2      	bls.n	8006f10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d109      	bne.n	8006f84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d102      	bne.n	8006f7c <chk_lock+0x80>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d101      	bne.n	8006f80 <chk_lock+0x84>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e010      	b.n	8006fa2 <chk_lock+0xa6>
 8006f80:	2312      	movs	r3, #18
 8006f82:	e00e      	b.n	8006fa2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d108      	bne.n	8006f9c <chk_lock+0xa0>
 8006f8a:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <chk_lock+0xb4>)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	4413      	add	r3, r2
 8006f92:	330c      	adds	r3, #12
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9a:	d101      	bne.n	8006fa0 <chk_lock+0xa4>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	e000      	b.n	8006fa2 <chk_lock+0xa6>
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20000074 	.word	0x20000074

08006fb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	607b      	str	r3, [r7, #4]
 8006fbe:	e002      	b.n	8006fc6 <enq_lock+0x12>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d806      	bhi.n	8006fda <enq_lock+0x26>
 8006fcc:	4a09      	ldr	r2, [pc, #36]	; (8006ff4 <enq_lock+0x40>)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	4413      	add	r3, r2
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f2      	bne.n	8006fc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000074 	.word	0x20000074

08006ff8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	e01f      	b.n	8007048 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007008:	4a41      	ldr	r2, [pc, #260]	; (8007110 <inc_lock+0x118>)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	011b      	lsls	r3, r3, #4
 800700e:	4413      	add	r3, r2
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d113      	bne.n	8007042 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800701a:	4a3d      	ldr	r2, [pc, #244]	; (8007110 <inc_lock+0x118>)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	4413      	add	r3, r2
 8007022:	3304      	adds	r3, #4
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800702a:	429a      	cmp	r2, r3
 800702c:	d109      	bne.n	8007042 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800702e:	4a38      	ldr	r2, [pc, #224]	; (8007110 <inc_lock+0x118>)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	4413      	add	r3, r2
 8007036:	3308      	adds	r3, #8
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800703e:	429a      	cmp	r2, r3
 8007040:	d006      	beq.n	8007050 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d9dc      	bls.n	8007008 <inc_lock+0x10>
 800704e:	e000      	b.n	8007052 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007050:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d132      	bne.n	80070be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e002      	b.n	8007064 <inc_lock+0x6c>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d806      	bhi.n	8007078 <inc_lock+0x80>
 800706a:	4a29      	ldr	r2, [pc, #164]	; (8007110 <inc_lock+0x118>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	4413      	add	r3, r2
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1f2      	bne.n	800705e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d101      	bne.n	8007082 <inc_lock+0x8a>
 800707e:	2300      	movs	r3, #0
 8007080:	e040      	b.n	8007104 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4922      	ldr	r1, [pc, #136]	; (8007110 <inc_lock+0x118>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	440b      	add	r3, r1
 800708e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	491e      	ldr	r1, [pc, #120]	; (8007110 <inc_lock+0x118>)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	440b      	add	r3, r1
 800709c:	3304      	adds	r3, #4
 800709e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	695a      	ldr	r2, [r3, #20]
 80070a4:	491a      	ldr	r1, [pc, #104]	; (8007110 <inc_lock+0x118>)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	440b      	add	r3, r1
 80070ac:	3308      	adds	r3, #8
 80070ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80070b0:	4a17      	ldr	r2, [pc, #92]	; (8007110 <inc_lock+0x118>)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	4413      	add	r3, r2
 80070b8:	330c      	adds	r3, #12
 80070ba:	2200      	movs	r2, #0
 80070bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <inc_lock+0xe0>
 80070c4:	4a12      	ldr	r2, [pc, #72]	; (8007110 <inc_lock+0x118>)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	4413      	add	r3, r2
 80070cc:	330c      	adds	r3, #12
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <inc_lock+0xe0>
 80070d4:	2300      	movs	r3, #0
 80070d6:	e015      	b.n	8007104 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d108      	bne.n	80070f0 <inc_lock+0xf8>
 80070de:	4a0c      	ldr	r2, [pc, #48]	; (8007110 <inc_lock+0x118>)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	4413      	add	r3, r2
 80070e6:	330c      	adds	r3, #12
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	3301      	adds	r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	e001      	b.n	80070f4 <inc_lock+0xfc>
 80070f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070f4:	4906      	ldr	r1, [pc, #24]	; (8007110 <inc_lock+0x118>)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	440b      	add	r3, r1
 80070fc:	330c      	adds	r3, #12
 80070fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	20000074 	.word	0x20000074

08007114 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3b01      	subs	r3, #1
 8007120:	607b      	str	r3, [r7, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d825      	bhi.n	8007174 <dec_lock+0x60>
		n = Files[i].ctr;
 8007128:	4a17      	ldr	r2, [pc, #92]	; (8007188 <dec_lock+0x74>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	4413      	add	r3, r2
 8007130:	330c      	adds	r3, #12
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007136:	89fb      	ldrh	r3, [r7, #14]
 8007138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800713c:	d101      	bne.n	8007142 <dec_lock+0x2e>
 800713e:	2300      	movs	r3, #0
 8007140:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007142:	89fb      	ldrh	r3, [r7, #14]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <dec_lock+0x3a>
 8007148:	89fb      	ldrh	r3, [r7, #14]
 800714a:	3b01      	subs	r3, #1
 800714c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800714e:	4a0e      	ldr	r2, [pc, #56]	; (8007188 <dec_lock+0x74>)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	4413      	add	r3, r2
 8007156:	330c      	adds	r3, #12
 8007158:	89fa      	ldrh	r2, [r7, #14]
 800715a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800715c:	89fb      	ldrh	r3, [r7, #14]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d105      	bne.n	800716e <dec_lock+0x5a>
 8007162:	4a09      	ldr	r2, [pc, #36]	; (8007188 <dec_lock+0x74>)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	4413      	add	r3, r2
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	737b      	strb	r3, [r7, #13]
 8007172:	e001      	b.n	8007178 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007174:	2302      	movs	r3, #2
 8007176:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007178:	7b7b      	ldrb	r3, [r7, #13]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20000074 	.word	0x20000074

0800718c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	e010      	b.n	80071bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800719a:	4a0d      	ldr	r2, [pc, #52]	; (80071d0 <clear_lock+0x44>)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	4413      	add	r3, r2
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d105      	bne.n	80071b6 <clear_lock+0x2a>
 80071aa:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <clear_lock+0x44>)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	4413      	add	r3, r2
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3301      	adds	r3, #1
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d9eb      	bls.n	800719a <clear_lock+0xe>
	}
}
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20000074 	.word	0x20000074

080071d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	78db      	ldrb	r3, [r3, #3]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d034      	beq.n	8007252 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7858      	ldrb	r0, [r3, #1]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071f8:	2301      	movs	r3, #1
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	f7ff fd40 	bl	8006c80 <disk_write>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007206:	2301      	movs	r3, #1
 8007208:	73fb      	strb	r3, [r7, #15]
 800720a:	e022      	b.n	8007252 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	1ad2      	subs	r2, r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	429a      	cmp	r2, r3
 8007220:	d217      	bcs.n	8007252 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	789b      	ldrb	r3, [r3, #2]
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	e010      	b.n	800724c <sync_window+0x78>
					wsect += fs->fsize;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4413      	add	r3, r2
 8007232:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	7858      	ldrb	r0, [r3, #1]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800723e:	2301      	movs	r3, #1
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	f7ff fd1d 	bl	8006c80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	3b01      	subs	r3, #1
 800724a:	613b      	str	r3, [r7, #16]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d8eb      	bhi.n	800722a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007252:	7bfb      	ldrb	r3, [r7, #15]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d01b      	beq.n	80072ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff ffad 	bl	80071d4 <sync_window>
 800727a:	4603      	mov	r3, r0
 800727c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d113      	bne.n	80072ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	7858      	ldrb	r0, [r3, #1]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800728e:	2301      	movs	r3, #1
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	f7ff fcd5 	bl	8006c40 <disk_read>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800729c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff ff87 	bl	80071d4 <sync_window>
 80072c6:	4603      	mov	r3, r0
 80072c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d158      	bne.n	8007382 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d148      	bne.n	800736a <sync_fs+0xb2>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	791b      	ldrb	r3, [r3, #4]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d144      	bne.n	800736a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3330      	adds	r3, #48	; 0x30
 80072e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072e8:	2100      	movs	r1, #0
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff fda9 	bl	8006e42 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3330      	adds	r3, #48	; 0x30
 80072f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072f8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff fd38 	bl	8006d72 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	3330      	adds	r3, #48	; 0x30
 8007306:	4921      	ldr	r1, [pc, #132]	; (800738c <sync_fs+0xd4>)
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fd4d 	bl	8006da8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3330      	adds	r3, #48	; 0x30
 8007312:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007316:	491e      	ldr	r1, [pc, #120]	; (8007390 <sync_fs+0xd8>)
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff fd45 	bl	8006da8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3330      	adds	r3, #48	; 0x30
 8007322:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f7ff fd3b 	bl	8006da8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3330      	adds	r3, #48	; 0x30
 8007336:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	4619      	mov	r1, r3
 8007340:	4610      	mov	r0, r2
 8007342:	f7ff fd31 	bl	8006da8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	7858      	ldrb	r0, [r3, #1]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735e:	2301      	movs	r3, #1
 8007360:	f7ff fc8e 	bl	8006c80 <disk_write>
			fs->fsi_flag = 0;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2200      	movs	r2, #0
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fca4 	bl	8006cc0 <disk_ioctl>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <sync_fs+0xca>
 800737e:	2301      	movs	r3, #1
 8007380:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007382:	7bfb      	ldrb	r3, [r7, #15]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	41615252 	.word	0x41615252
 8007390:	61417272 	.word	0x61417272

08007394 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	3b02      	subs	r3, #2
 80073a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	3b02      	subs	r3, #2
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d301      	bcc.n	80073b4 <clust2sect+0x20>
 80073b0:	2300      	movs	r3, #0
 80073b2:	e008      	b.n	80073c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	895b      	ldrh	r3, [r3, #10]
 80073b8:	461a      	mov	r2, r3
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	fb03 f202 	mul.w	r2, r3, r2
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c4:	4413      	add	r3, r2
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d904      	bls.n	80073f2 <get_fat+0x20>
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d302      	bcc.n	80073f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80073f2:	2301      	movs	r3, #1
 80073f4:	617b      	str	r3, [r7, #20]
 80073f6:	e08c      	b.n	8007512 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80073f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b02      	cmp	r3, #2
 8007404:	d045      	beq.n	8007492 <get_fat+0xc0>
 8007406:	2b03      	cmp	r3, #3
 8007408:	d05d      	beq.n	80074c6 <get_fat+0xf4>
 800740a:	2b01      	cmp	r3, #1
 800740c:	d177      	bne.n	80074fe <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4413      	add	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	0a5b      	lsrs	r3, r3, #9
 8007424:	4413      	add	r3, r2
 8007426:	4619      	mov	r1, r3
 8007428:	6938      	ldr	r0, [r7, #16]
 800742a:	f7ff ff17 	bl	800725c <move_window>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d167      	bne.n	8007504 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	60fa      	str	r2, [r7, #12]
 800743a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4413      	add	r3, r2
 8007442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007446:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	6a1a      	ldr	r2, [r3, #32]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	0a5b      	lsrs	r3, r3, #9
 8007450:	4413      	add	r3, r2
 8007452:	4619      	mov	r1, r3
 8007454:	6938      	ldr	r0, [r7, #16]
 8007456:	f7ff ff01 	bl	800725c <move_window>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d153      	bne.n	8007508 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4413      	add	r3, r2
 800746a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800746e:	021b      	lsls	r3, r3, #8
 8007470:	461a      	mov	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	4313      	orrs	r3, r2
 8007476:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <get_fat+0xb6>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	091b      	lsrs	r3, r3, #4
 8007486:	e002      	b.n	800748e <get_fat+0xbc>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800748e:	617b      	str	r3, [r7, #20]
			break;
 8007490:	e03f      	b.n	8007512 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	6a1a      	ldr	r2, [r3, #32]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	0a1b      	lsrs	r3, r3, #8
 800749a:	4413      	add	r3, r2
 800749c:	4619      	mov	r1, r3
 800749e:	6938      	ldr	r0, [r7, #16]
 80074a0:	f7ff fedc 	bl	800725c <move_window>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d130      	bne.n	800750c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80074b8:	4413      	add	r3, r2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff fc1e 	bl	8006cfc <ld_word>
 80074c0:	4603      	mov	r3, r0
 80074c2:	617b      	str	r3, [r7, #20]
			break;
 80074c4:	e025      	b.n	8007512 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	09db      	lsrs	r3, r3, #7
 80074ce:	4413      	add	r3, r2
 80074d0:	4619      	mov	r1, r3
 80074d2:	6938      	ldr	r0, [r7, #16]
 80074d4:	f7ff fec2 	bl	800725c <move_window>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d118      	bne.n	8007510 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80074ec:	4413      	add	r3, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff fc1c 	bl	8006d2c <ld_dword>
 80074f4:	4603      	mov	r3, r0
 80074f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80074fa:	617b      	str	r3, [r7, #20]
			break;
 80074fc:	e009      	b.n	8007512 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80074fe:	2301      	movs	r3, #1
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	e006      	b.n	8007512 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007504:	bf00      	nop
 8007506:	e004      	b.n	8007512 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007508:	bf00      	nop
 800750a:	e002      	b.n	8007512 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800750c:	bf00      	nop
 800750e:	e000      	b.n	8007512 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007510:	bf00      	nop
		}
	}

	return val;
 8007512:	697b      	ldr	r3, [r7, #20]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800751c:	b590      	push	{r4, r7, lr}
 800751e:	b089      	sub	sp, #36	; 0x24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007528:	2302      	movs	r3, #2
 800752a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b01      	cmp	r3, #1
 8007530:	f240 80d6 	bls.w	80076e0 <put_fat+0x1c4>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	429a      	cmp	r2, r3
 800753c:	f080 80d0 	bcs.w	80076e0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b02      	cmp	r3, #2
 8007546:	d073      	beq.n	8007630 <put_fat+0x114>
 8007548:	2b03      	cmp	r3, #3
 800754a:	f000 8091 	beq.w	8007670 <put_fat+0x154>
 800754e:	2b01      	cmp	r3, #1
 8007550:	f040 80c6 	bne.w	80076e0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	61bb      	str	r3, [r7, #24]
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	085b      	lsrs	r3, r3, #1
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	4413      	add	r3, r2
 8007560:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a1a      	ldr	r2, [r3, #32]
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	0a5b      	lsrs	r3, r3, #9
 800756a:	4413      	add	r3, r2
 800756c:	4619      	mov	r1, r3
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff fe74 	bl	800725c <move_window>
 8007574:	4603      	mov	r3, r0
 8007576:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007578:	7ffb      	ldrb	r3, [r7, #31]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f040 80a9 	bne.w	80076d2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	1c59      	adds	r1, r3, #1
 800758a:	61b9      	str	r1, [r7, #24]
 800758c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007590:	4413      	add	r3, r2
 8007592:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00d      	beq.n	80075ba <put_fat+0x9e>
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b25b      	sxtb	r3, r3
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	b25a      	sxtb	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	b25b      	sxtb	r3, r3
 80075b2:	4313      	orrs	r3, r2
 80075b4:	b25b      	sxtb	r3, r3
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	e001      	b.n	80075be <put_fat+0xa2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a1a      	ldr	r2, [r3, #32]
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	0a5b      	lsrs	r3, r3, #9
 80075d0:	4413      	add	r3, r2
 80075d2:	4619      	mov	r1, r3
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7ff fe41 	bl	800725c <move_window>
 80075da:	4603      	mov	r3, r0
 80075dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075de:	7ffb      	ldrb	r3, [r7, #31]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d178      	bne.n	80076d6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f0:	4413      	add	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <put_fat+0xea>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	091b      	lsrs	r3, r3, #4
 8007602:	b2db      	uxtb	r3, r3
 8007604:	e00e      	b.n	8007624 <put_fat+0x108>
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	b25b      	sxtb	r3, r3
 800760c:	f023 030f 	bic.w	r3, r3, #15
 8007610:	b25a      	sxtb	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	0a1b      	lsrs	r3, r3, #8
 8007616:	b25b      	sxtb	r3, r3
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	b25b      	sxtb	r3, r3
 800761e:	4313      	orrs	r3, r2
 8007620:	b25b      	sxtb	r3, r3
 8007622:	b2db      	uxtb	r3, r3
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	70da      	strb	r2, [r3, #3]
			break;
 800762e:	e057      	b.n	80076e0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a1a      	ldr	r2, [r3, #32]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	4413      	add	r3, r2
 800763a:	4619      	mov	r1, r3
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f7ff fe0d 	bl	800725c <move_window>
 8007642:	4603      	mov	r3, r0
 8007644:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007646:	7ffb      	ldrb	r3, [r7, #31]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d146      	bne.n	80076da <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800765a:	4413      	add	r3, r2
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	b292      	uxth	r2, r2
 8007660:	4611      	mov	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff fb85 	bl	8006d72 <st_word>
			fs->wflag = 1;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2201      	movs	r2, #1
 800766c:	70da      	strb	r2, [r3, #3]
			break;
 800766e:	e037      	b.n	80076e0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a1a      	ldr	r2, [r3, #32]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	09db      	lsrs	r3, r3, #7
 8007678:	4413      	add	r3, r2
 800767a:	4619      	mov	r1, r3
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fded 	bl	800725c <move_window>
 8007682:	4603      	mov	r3, r0
 8007684:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007686:	7ffb      	ldrb	r3, [r7, #31]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d128      	bne.n	80076de <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076a0:	4413      	add	r3, r2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fb42 	bl	8006d2c <ld_dword>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80076ae:	4323      	orrs	r3, r4
 80076b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076c0:	4413      	add	r3, r2
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff fb6f 	bl	8006da8 <st_dword>
			fs->wflag = 1;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	70da      	strb	r2, [r3, #3]
			break;
 80076d0:	e006      	b.n	80076e0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80076d2:	bf00      	nop
 80076d4:	e004      	b.n	80076e0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80076d6:	bf00      	nop
 80076d8:	e002      	b.n	80076e0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80076da:	bf00      	nop
 80076dc:	e000      	b.n	80076e0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80076de:	bf00      	nop
		}
	}
	return res;
 80076e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3724      	adds	r7, #36	; 0x24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd90      	pop	{r4, r7, pc}

080076ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b088      	sub	sp, #32
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d904      	bls.n	8007710 <remove_chain+0x26>
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	429a      	cmp	r2, r3
 800770e:	d301      	bcc.n	8007714 <remove_chain+0x2a>
 8007710:	2302      	movs	r3, #2
 8007712:	e04b      	b.n	80077ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800771a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	69b8      	ldr	r0, [r7, #24]
 8007722:	f7ff fefb 	bl	800751c <put_fat>
 8007726:	4603      	mov	r3, r0
 8007728:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800772a:	7ffb      	ldrb	r3, [r7, #31]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <remove_chain+0x4a>
 8007730:	7ffb      	ldrb	r3, [r7, #31]
 8007732:	e03b      	b.n	80077ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7ff fe4b 	bl	80073d2 <get_fat>
 800773c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d031      	beq.n	80077a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d101      	bne.n	800774e <remove_chain+0x64>
 800774a:	2302      	movs	r3, #2
 800774c:	e02e      	b.n	80077ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007754:	d101      	bne.n	800775a <remove_chain+0x70>
 8007756:	2301      	movs	r3, #1
 8007758:	e028      	b.n	80077ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800775a:	2200      	movs	r2, #0
 800775c:	68b9      	ldr	r1, [r7, #8]
 800775e:	69b8      	ldr	r0, [r7, #24]
 8007760:	f7ff fedc 	bl	800751c <put_fat>
 8007764:	4603      	mov	r3, r0
 8007766:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007768:	7ffb      	ldrb	r3, [r7, #31]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <remove_chain+0x88>
 800776e:	7ffb      	ldrb	r3, [r7, #31]
 8007770:	e01c      	b.n	80077ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	3b02      	subs	r3, #2
 800777c:	429a      	cmp	r2, r3
 800777e:	d20b      	bcs.n	8007798 <remove_chain+0xae>
			fs->free_clst++;
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	791b      	ldrb	r3, [r3, #4]
 800778e:	f043 0301 	orr.w	r3, r3, #1
 8007792:	b2da      	uxtb	r2, r3
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d3c6      	bcc.n	8007734 <remove_chain+0x4a>
 80077a6:	e000      	b.n	80077aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80077a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3720      	adds	r7, #32
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10d      	bne.n	80077e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d004      	beq.n	80077e0 <create_chain+0x2c>
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d31b      	bcc.n	8007818 <create_chain+0x64>
 80077e0:	2301      	movs	r3, #1
 80077e2:	61bb      	str	r3, [r7, #24]
 80077e4:	e018      	b.n	8007818 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fdf2 	bl	80073d2 <get_fat>
 80077ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d801      	bhi.n	80077fa <create_chain+0x46>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e070      	b.n	80078dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007800:	d101      	bne.n	8007806 <create_chain+0x52>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	e06a      	b.n	80078dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	429a      	cmp	r2, r3
 800780e:	d201      	bcs.n	8007814 <create_chain+0x60>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	e063      	b.n	80078dc <create_chain+0x128>
		scl = clst;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	3301      	adds	r3, #1
 8007820:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	429a      	cmp	r2, r3
 800782a:	d307      	bcc.n	800783c <create_chain+0x88>
				ncl = 2;
 800782c:	2302      	movs	r3, #2
 800782e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007830:	69fa      	ldr	r2, [r7, #28]
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	429a      	cmp	r2, r3
 8007836:	d901      	bls.n	800783c <create_chain+0x88>
 8007838:	2300      	movs	r3, #0
 800783a:	e04f      	b.n	80078dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800783c:	69f9      	ldr	r1, [r7, #28]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff fdc7 	bl	80073d2 <get_fat>
 8007844:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00e      	beq.n	800786a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d003      	beq.n	800785a <create_chain+0xa6>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007858:	d101      	bne.n	800785e <create_chain+0xaa>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	e03e      	b.n	80078dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	429a      	cmp	r2, r3
 8007864:	d1da      	bne.n	800781c <create_chain+0x68>
 8007866:	2300      	movs	r3, #0
 8007868:	e038      	b.n	80078dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800786a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800786c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007870:	69f9      	ldr	r1, [r7, #28]
 8007872:	6938      	ldr	r0, [r7, #16]
 8007874:	f7ff fe52 	bl	800751c <put_fat>
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <create_chain+0xe2>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d006      	beq.n	8007896 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007888:	69fa      	ldr	r2, [r7, #28]
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6938      	ldr	r0, [r7, #16]
 800788e:	f7ff fe45 	bl	800751c <put_fat>
 8007892:	4603      	mov	r3, r0
 8007894:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d116      	bne.n	80078ca <create_chain+0x116>
		fs->last_clst = ncl;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	691a      	ldr	r2, [r3, #16]
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	3b02      	subs	r3, #2
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d804      	bhi.n	80078ba <create_chain+0x106>
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	1e5a      	subs	r2, r3, #1
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	791b      	ldrb	r3, [r3, #4]
 80078be:	f043 0301 	orr.w	r3, r3, #1
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	711a      	strb	r2, [r3, #4]
 80078c8:	e007      	b.n	80078da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d102      	bne.n	80078d6 <create_chain+0x122>
 80078d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078d4:	e000      	b.n	80078d8 <create_chain+0x124>
 80078d6:	2301      	movs	r3, #1
 80078d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80078da:	69fb      	ldr	r3, [r7, #28]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3720      	adds	r7, #32
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	3304      	adds	r3, #4
 80078fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	0a5b      	lsrs	r3, r3, #9
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	8952      	ldrh	r2, [r2, #10]
 8007904:	fbb3 f3f2 	udiv	r3, r3, r2
 8007908:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1d1a      	adds	r2, r3, #4
 800790e:	613a      	str	r2, [r7, #16]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <clmt_clust+0x3a>
 800791a:	2300      	movs	r3, #0
 800791c:	e010      	b.n	8007940 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	429a      	cmp	r2, r3
 8007924:	d307      	bcc.n	8007936 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	3304      	adds	r3, #4
 8007932:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007934:	e7e9      	b.n	800790a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007936:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	4413      	add	r3, r2
}
 8007940:	4618      	mov	r0, r3
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007962:	d204      	bcs.n	800796e <dir_sdi+0x22>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f003 031f 	and.w	r3, r3, #31
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <dir_sdi+0x26>
		return FR_INT_ERR;
 800796e:	2302      	movs	r3, #2
 8007970:	e063      	b.n	8007a3a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d106      	bne.n	8007992 <dir_sdi+0x46>
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d902      	bls.n	8007992 <dir_sdi+0x46>
		clst = fs->dirbase;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10c      	bne.n	80079b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	095b      	lsrs	r3, r3, #5
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	8912      	ldrh	r2, [r2, #8]
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d301      	bcc.n	80079a8 <dir_sdi+0x5c>
 80079a4:	2302      	movs	r3, #2
 80079a6:	e048      	b.n	8007a3a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	61da      	str	r2, [r3, #28]
 80079b0:	e029      	b.n	8007a06 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	895b      	ldrh	r3, [r3, #10]
 80079b6:	025b      	lsls	r3, r3, #9
 80079b8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079ba:	e019      	b.n	80079f0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6979      	ldr	r1, [r7, #20]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff fd06 	bl	80073d2 <get_fat>
 80079c6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ce:	d101      	bne.n	80079d4 <dir_sdi+0x88>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e032      	b.n	8007a3a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d904      	bls.n	80079e4 <dir_sdi+0x98>
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d301      	bcc.n	80079e8 <dir_sdi+0x9c>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e028      	b.n	8007a3a <dir_sdi+0xee>
			ofs -= csz;
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d2e1      	bcs.n	80079bc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80079f8:	6979      	ldr	r1, [r7, #20]
 80079fa:	6938      	ldr	r0, [r7, #16]
 80079fc:	f7ff fcca 	bl	8007394 <clust2sect>
 8007a00:	4602      	mov	r2, r0
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <dir_sdi+0xcc>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e010      	b.n	8007a3a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69da      	ldr	r2, [r3, #28]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	0a5b      	lsrs	r3, r3, #9
 8007a20:	441a      	add	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a32:	441a      	add	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b086      	sub	sp, #24
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	3320      	adds	r3, #32
 8007a58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <dir_next+0x28>
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a68:	d301      	bcc.n	8007a6e <dir_next+0x2c>
 8007a6a:	2304      	movs	r3, #4
 8007a6c:	e0aa      	b.n	8007bc4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f040 8098 	bne.w	8007baa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10b      	bne.n	8007aa4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	8912      	ldrh	r2, [r2, #8]
 8007a94:	4293      	cmp	r3, r2
 8007a96:	f0c0 8088 	bcc.w	8007baa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	61da      	str	r2, [r3, #28]
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	e08f      	b.n	8007bc4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	0a5b      	lsrs	r3, r3, #9
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	8952      	ldrh	r2, [r2, #10]
 8007aac:	3a01      	subs	r2, #1
 8007aae:	4013      	ands	r3, r2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d17a      	bne.n	8007baa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f7ff fc88 	bl	80073d2 <get_fat>
 8007ac2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d801      	bhi.n	8007ace <dir_next+0x8c>
 8007aca:	2302      	movs	r3, #2
 8007acc:	e07a      	b.n	8007bc4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ad4:	d101      	bne.n	8007ada <dir_next+0x98>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e074      	b.n	8007bc4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d358      	bcc.n	8007b96 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d104      	bne.n	8007af4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	61da      	str	r2, [r3, #28]
 8007af0:	2304      	movs	r3, #4
 8007af2:	e067      	b.n	8007bc4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	4619      	mov	r1, r3
 8007afc:	4610      	mov	r0, r2
 8007afe:	f7ff fe59 	bl	80077b4 <create_chain>
 8007b02:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <dir_next+0xcc>
 8007b0a:	2307      	movs	r3, #7
 8007b0c:	e05a      	b.n	8007bc4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d101      	bne.n	8007b18 <dir_next+0xd6>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e055      	b.n	8007bc4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b1e:	d101      	bne.n	8007b24 <dir_next+0xe2>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e04f      	b.n	8007bc4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff fb55 	bl	80071d4 <sync_window>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <dir_next+0xf2>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e047      	b.n	8007bc4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3330      	adds	r3, #48	; 0x30
 8007b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff f97f 	bl	8006e42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b44:	2300      	movs	r3, #0
 8007b46:	613b      	str	r3, [r7, #16]
 8007b48:	6979      	ldr	r1, [r7, #20]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f7ff fc22 	bl	8007394 <clust2sect>
 8007b50:	4602      	mov	r2, r0
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b56:	e012      	b.n	8007b7e <dir_next+0x13c>
						fs->wflag = 1;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f7ff fb38 	bl	80071d4 <sync_window>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <dir_next+0x12c>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e02a      	b.n	8007bc4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	3301      	adds	r3, #1
 8007b72:	613b      	str	r3, [r7, #16]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	895b      	ldrh	r3, [r3, #10]
 8007b82:	461a      	mov	r2, r3
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d3e6      	bcc.n	8007b58 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	1ad2      	subs	r2, r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007b9c:	6979      	ldr	r1, [r7, #20]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff fbf8 	bl	8007394 <clust2sect>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bbc:	441a      	add	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007bdc:	2100      	movs	r1, #0
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff feb4 	bl	800794c <dir_sdi>
 8007be4:	4603      	mov	r3, r0
 8007be6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d12b      	bne.n	8007c46 <dir_alloc+0x7a>
		n = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f7ff fb2f 	bl	800725c <move_window>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d11d      	bne.n	8007c44 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2be5      	cmp	r3, #229	; 0xe5
 8007c10:	d004      	beq.n	8007c1c <dir_alloc+0x50>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d107      	bne.n	8007c2c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	613b      	str	r3, [r7, #16]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d102      	bne.n	8007c30 <dir_alloc+0x64>
 8007c2a:	e00c      	b.n	8007c46 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007c30:	2101      	movs	r1, #1
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7ff ff05 	bl	8007a42 <dir_next>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0d7      	beq.n	8007bf2 <dir_alloc+0x26>
 8007c42:	e000      	b.n	8007c46 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007c44:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d101      	bne.n	8007c50 <dir_alloc+0x84>
 8007c4c:	2307      	movs	r3, #7
 8007c4e:	75fb      	strb	r3, [r7, #23]
	return res;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	331a      	adds	r3, #26
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff f847 	bl	8006cfc <ld_word>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d109      	bne.n	8007c8e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	3314      	adds	r3, #20
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff f83c 	bl	8006cfc <ld_word>
 8007c84:	4603      	mov	r3, r0
 8007c86:	041b      	lsls	r3, r3, #16
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	331a      	adds	r3, #26
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	b292      	uxth	r2, r2
 8007cac:	4611      	mov	r1, r2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff f85f 	bl	8006d72 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d109      	bne.n	8007cd0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f103 0214 	add.w	r2, r3, #20
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	0c1b      	lsrs	r3, r3, #16
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4610      	mov	r0, r2
 8007ccc:	f7ff f851 	bl	8006d72 <st_word>
	}
}
 8007cd0:	bf00      	nop
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff fe2f 	bl	800794c <dir_sdi>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <dir_find+0x24>
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	e03e      	b.n	8007d7a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	4619      	mov	r1, r3
 8007d02:	6938      	ldr	r0, [r7, #16]
 8007d04:	f7ff faaa 	bl	800725c <move_window>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d12f      	bne.n	8007d72 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <dir_find+0x4e>
 8007d20:	2304      	movs	r3, #4
 8007d22:	75fb      	strb	r3, [r7, #23]
 8007d24:	e028      	b.n	8007d78 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	330b      	adds	r3, #11
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	330b      	adds	r3, #11
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <dir_find+0x86>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a18      	ldr	r0, [r3, #32]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3324      	adds	r3, #36	; 0x24
 8007d50:	220b      	movs	r2, #11
 8007d52:	4619      	mov	r1, r3
 8007d54:	f7ff f88f 	bl	8006e76 <mem_cmp>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00b      	beq.n	8007d76 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007d5e:	2100      	movs	r1, #0
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff fe6e 	bl	8007a42 <dir_next>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0c5      	beq.n	8007cfc <dir_find+0x24>
 8007d70:	e002      	b.n	8007d78 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007d72:	bf00      	nop
 8007d74:	e000      	b.n	8007d78 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d76:	bf00      	nop

	return res;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007d90:	2101      	movs	r1, #1
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff ff1a 	bl	8007bcc <dir_alloc>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d11c      	bne.n	8007ddc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	4619      	mov	r1, r3
 8007da8:	68b8      	ldr	r0, [r7, #8]
 8007daa:	f7ff fa57 	bl	800725c <move_window>
 8007dae:	4603      	mov	r3, r0
 8007db0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d111      	bne.n	8007ddc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff f83e 	bl	8006e42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a18      	ldr	r0, [r3, #32]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3324      	adds	r3, #36	; 0x24
 8007dce:	220b      	movs	r2, #11
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	f7ff f815 	bl	8006e00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b088      	sub	sp, #32
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3324      	adds	r3, #36	; 0x24
 8007dfc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007dfe:	220b      	movs	r2, #11
 8007e00:	2120      	movs	r1, #32
 8007e02:	68b8      	ldr	r0, [r7, #8]
 8007e04:	f7ff f81d 	bl	8006e42 <mem_set>
	si = i = 0; ni = 8;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	2308      	movs	r3, #8
 8007e12:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	617a      	str	r2, [r7, #20]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007e22:	7ffb      	ldrb	r3, [r7, #31]
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	d94e      	bls.n	8007ec6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007e28:	7ffb      	ldrb	r3, [r7, #31]
 8007e2a:	2b2f      	cmp	r3, #47	; 0x2f
 8007e2c:	d006      	beq.n	8007e3c <create_name+0x54>
 8007e2e:	7ffb      	ldrb	r3, [r7, #31]
 8007e30:	2b5c      	cmp	r3, #92	; 0x5c
 8007e32:	d110      	bne.n	8007e56 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007e34:	e002      	b.n	8007e3c <create_name+0x54>
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	617b      	str	r3, [r7, #20]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	4413      	add	r3, r2
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b2f      	cmp	r3, #47	; 0x2f
 8007e46:	d0f6      	beq.n	8007e36 <create_name+0x4e>
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b5c      	cmp	r3, #92	; 0x5c
 8007e52:	d0f0      	beq.n	8007e36 <create_name+0x4e>
			break;
 8007e54:	e038      	b.n	8007ec8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007e56:	7ffb      	ldrb	r3, [r7, #31]
 8007e58:	2b2e      	cmp	r3, #46	; 0x2e
 8007e5a:	d003      	beq.n	8007e64 <create_name+0x7c>
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d30c      	bcc.n	8007e7e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	2b0b      	cmp	r3, #11
 8007e68:	d002      	beq.n	8007e70 <create_name+0x88>
 8007e6a:	7ffb      	ldrb	r3, [r7, #31]
 8007e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e6e:	d001      	beq.n	8007e74 <create_name+0x8c>
 8007e70:	2306      	movs	r3, #6
 8007e72:	e044      	b.n	8007efe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007e74:	2308      	movs	r3, #8
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	230b      	movs	r3, #11
 8007e7a:	61bb      	str	r3, [r7, #24]
			continue;
 8007e7c:	e022      	b.n	8007ec4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007e7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da04      	bge.n	8007e90 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007e86:	7ffb      	ldrb	r3, [r7, #31]
 8007e88:	3b80      	subs	r3, #128	; 0x80
 8007e8a:	4a1f      	ldr	r2, [pc, #124]	; (8007f08 <create_name+0x120>)
 8007e8c:	5cd3      	ldrb	r3, [r2, r3]
 8007e8e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007e90:	7ffb      	ldrb	r3, [r7, #31]
 8007e92:	4619      	mov	r1, r3
 8007e94:	481d      	ldr	r0, [pc, #116]	; (8007f0c <create_name+0x124>)
 8007e96:	f7ff f815 	bl	8006ec4 <chk_chr>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <create_name+0xbc>
 8007ea0:	2306      	movs	r3, #6
 8007ea2:	e02c      	b.n	8007efe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007ea4:	7ffb      	ldrb	r3, [r7, #31]
 8007ea6:	2b60      	cmp	r3, #96	; 0x60
 8007ea8:	d905      	bls.n	8007eb6 <create_name+0xce>
 8007eaa:	7ffb      	ldrb	r3, [r7, #31]
 8007eac:	2b7a      	cmp	r3, #122	; 0x7a
 8007eae:	d802      	bhi.n	8007eb6 <create_name+0xce>
 8007eb0:	7ffb      	ldrb	r3, [r7, #31]
 8007eb2:	3b20      	subs	r3, #32
 8007eb4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	613a      	str	r2, [r7, #16]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	7ffa      	ldrb	r2, [r7, #31]
 8007ec2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007ec4:	e7a6      	b.n	8007e14 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007ec6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	441a      	add	r2, r3
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <create_name+0xf4>
 8007ed8:	2306      	movs	r3, #6
 8007eda:	e010      	b.n	8007efe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2be5      	cmp	r3, #229	; 0xe5
 8007ee2:	d102      	bne.n	8007eea <create_name+0x102>
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2205      	movs	r2, #5
 8007ee8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007eea:	7ffb      	ldrb	r3, [r7, #31]
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d801      	bhi.n	8007ef4 <create_name+0x10c>
 8007ef0:	2204      	movs	r2, #4
 8007ef2:	e000      	b.n	8007ef6 <create_name+0x10e>
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	330b      	adds	r3, #11
 8007efa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007efc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	0800955c 	.word	0x0800955c
 8007f0c:	0800927c 	.word	0x0800927c

08007f10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007f24:	e002      	b.n	8007f2c <follow_path+0x1c>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b2f      	cmp	r3, #47	; 0x2f
 8007f32:	d0f8      	beq.n	8007f26 <follow_path+0x16>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b5c      	cmp	r3, #92	; 0x5c
 8007f3a:	d0f4      	beq.n	8007f26 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b1f      	cmp	r3, #31
 8007f48:	d80a      	bhi.n	8007f60 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2280      	movs	r2, #128	; 0x80
 8007f4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007f52:	2100      	movs	r1, #0
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff fcf9 	bl	800794c <dir_sdi>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]
 8007f5e:	e043      	b.n	8007fe8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f60:	463b      	mov	r3, r7
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff ff3f 	bl	8007de8 <create_name>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d134      	bne.n	8007fde <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff feaf 	bl	8007cd8 <dir_find>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f84:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00a      	beq.n	8007fa2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d127      	bne.n	8007fe2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f92:	7afb      	ldrb	r3, [r7, #11]
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d122      	bne.n	8007fe2 <follow_path+0xd2>
 8007f9c:	2305      	movs	r3, #5
 8007f9e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007fa0:	e01f      	b.n	8007fe2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fa2:	7afb      	ldrb	r3, [r7, #11]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d11c      	bne.n	8007fe6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	799b      	ldrb	r3, [r3, #6]
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d102      	bne.n	8007fbe <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007fb8:	2305      	movs	r3, #5
 8007fba:	75fb      	strb	r3, [r7, #23]
 8007fbc:	e014      	b.n	8007fe8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fcc:	4413      	add	r3, r2
 8007fce:	4619      	mov	r1, r3
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff fe42 	bl	8007c5a <ld_clust>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fdc:	e7c0      	b.n	8007f60 <follow_path+0x50>
			if (res != FR_OK) break;
 8007fde:	bf00      	nop
 8007fe0:	e002      	b.n	8007fe8 <follow_path+0xd8>
				break;
 8007fe2:	bf00      	nop
 8007fe4:	e000      	b.n	8007fe8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fe6:	bf00      	nop
			}
		}
	}

	return res;
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b087      	sub	sp, #28
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ffe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d031      	beq.n	800806c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	617b      	str	r3, [r7, #20]
 800800e:	e002      	b.n	8008016 <get_ldnumber+0x24>
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	3301      	adds	r3, #1
 8008014:	617b      	str	r3, [r7, #20]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b20      	cmp	r3, #32
 800801c:	d903      	bls.n	8008026 <get_ldnumber+0x34>
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b3a      	cmp	r3, #58	; 0x3a
 8008024:	d1f4      	bne.n	8008010 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b3a      	cmp	r3, #58	; 0x3a
 800802c:	d11c      	bne.n	8008068 <get_ldnumber+0x76>
			tp = *path;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	60fa      	str	r2, [r7, #12]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	3b30      	subs	r3, #48	; 0x30
 800803e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b09      	cmp	r3, #9
 8008044:	d80e      	bhi.n	8008064 <get_ldnumber+0x72>
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	429a      	cmp	r2, r3
 800804c:	d10a      	bne.n	8008064 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d107      	bne.n	8008064 <get_ldnumber+0x72>
					vol = (int)i;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	3301      	adds	r3, #1
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	e002      	b.n	800806e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008068:	2300      	movs	r3, #0
 800806a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800806c:	693b      	ldr	r3, [r7, #16]
}
 800806e:	4618      	mov	r0, r3
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	70da      	strb	r2, [r3, #3]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008092:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff f8e0 	bl	800725c <move_window>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <check_fs+0x2a>
 80080a2:	2304      	movs	r3, #4
 80080a4:	e038      	b.n	8008118 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3330      	adds	r3, #48	; 0x30
 80080aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fe24 	bl	8006cfc <ld_word>
 80080b4:	4603      	mov	r3, r0
 80080b6:	461a      	mov	r2, r3
 80080b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080bc:	429a      	cmp	r2, r3
 80080be:	d001      	beq.n	80080c4 <check_fs+0x48>
 80080c0:	2303      	movs	r3, #3
 80080c2:	e029      	b.n	8008118 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080ca:	2be9      	cmp	r3, #233	; 0xe9
 80080cc:	d009      	beq.n	80080e2 <check_fs+0x66>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080d4:	2beb      	cmp	r3, #235	; 0xeb
 80080d6:	d11e      	bne.n	8008116 <check_fs+0x9a>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80080de:	2b90      	cmp	r3, #144	; 0x90
 80080e0:	d119      	bne.n	8008116 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3330      	adds	r3, #48	; 0x30
 80080e6:	3336      	adds	r3, #54	; 0x36
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fe fe1f 	bl	8006d2c <ld_dword>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80080f4:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <check_fs+0xa4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d101      	bne.n	80080fe <check_fs+0x82>
 80080fa:	2300      	movs	r3, #0
 80080fc:	e00c      	b.n	8008118 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3330      	adds	r3, #48	; 0x30
 8008102:	3352      	adds	r3, #82	; 0x52
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe fe11 	bl	8006d2c <ld_dword>
 800810a:	4602      	mov	r2, r0
 800810c:	4b05      	ldr	r3, [pc, #20]	; (8008124 <check_fs+0xa8>)
 800810e:	429a      	cmp	r2, r3
 8008110:	d101      	bne.n	8008116 <check_fs+0x9a>
 8008112:	2300      	movs	r3, #0
 8008114:	e000      	b.n	8008118 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008116:	2302      	movs	r3, #2
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	00544146 	.word	0x00544146
 8008124:	33544146 	.word	0x33544146

08008128 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b096      	sub	sp, #88	; 0x58
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	4613      	mov	r3, r2
 8008134:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f7ff ff58 	bl	8007ff2 <get_ldnumber>
 8008142:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008146:	2b00      	cmp	r3, #0
 8008148:	da01      	bge.n	800814e <find_volume+0x26>
 800814a:	230b      	movs	r3, #11
 800814c:	e22e      	b.n	80085ac <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800814e:	4aa8      	ldr	r2, [pc, #672]	; (80083f0 <find_volume+0x2c8>)
 8008150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008156:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <find_volume+0x3a>
 800815e:	230c      	movs	r3, #12
 8008160:	e224      	b.n	80085ac <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008166:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	f023 0301 	bic.w	r3, r3, #1
 800816e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d01a      	beq.n	80081ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817a:	785b      	ldrb	r3, [r3, #1]
 800817c:	4618      	mov	r0, r3
 800817e:	f7fe fd1f 	bl	8006bc0 <disk_status>
 8008182:	4603      	mov	r3, r0
 8008184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10c      	bne.n	80081ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008194:	79fb      	ldrb	r3, [r7, #7]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d007      	beq.n	80081aa <find_volume+0x82>
 800819a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80081a6:	230a      	movs	r3, #10
 80081a8:	e200      	b.n	80085ac <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80081aa:	2300      	movs	r3, #0
 80081ac:	e1fe      	b.n	80085ac <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80081ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80081b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	785b      	ldrb	r3, [r3, #1]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fd17 	bl	8006bf4 <disk_initialize>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80081cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80081d8:	2303      	movs	r3, #3
 80081da:	e1e7      	b.n	80085ac <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80081dc:	79fb      	ldrb	r3, [r7, #7]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d007      	beq.n	80081f2 <find_volume+0xca>
 80081e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081e6:	f003 0304 	and.w	r3, r3, #4
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80081ee:	230a      	movs	r3, #10
 80081f0:	e1dc      	b.n	80085ac <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80081f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081fa:	f7ff ff3f 	bl	800807c <check_fs>
 80081fe:	4603      	mov	r3, r0
 8008200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008208:	2b02      	cmp	r3, #2
 800820a:	d14b      	bne.n	80082a4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800820c:	2300      	movs	r3, #0
 800820e:	643b      	str	r3, [r7, #64]	; 0x40
 8008210:	e01f      	b.n	8008252 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008220:	4413      	add	r3, r2
 8008222:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008226:	3304      	adds	r3, #4
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d006      	beq.n	800823c <find_volume+0x114>
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	3308      	adds	r3, #8
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fd7a 	bl	8006d2c <ld_dword>
 8008238:	4602      	mov	r2, r0
 800823a:	e000      	b.n	800823e <find_volume+0x116>
 800823c:	2200      	movs	r2, #0
 800823e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008246:	440b      	add	r3, r1
 8008248:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800824c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800824e:	3301      	adds	r3, #1
 8008250:	643b      	str	r3, [r7, #64]	; 0x40
 8008252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008254:	2b03      	cmp	r3, #3
 8008256:	d9dc      	bls.n	8008212 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008258:	2300      	movs	r3, #0
 800825a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800825c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <find_volume+0x140>
 8008262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008264:	3b01      	subs	r3, #1
 8008266:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008270:	4413      	add	r3, r2
 8008272:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008276:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <find_volume+0x162>
 800827e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008282:	f7ff fefb 	bl	800807c <check_fs>
 8008286:	4603      	mov	r3, r0
 8008288:	e000      	b.n	800828c <find_volume+0x164>
 800828a:	2303      	movs	r3, #3
 800828c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008294:	2b01      	cmp	r3, #1
 8008296:	d905      	bls.n	80082a4 <find_volume+0x17c>
 8008298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800829a:	3301      	adds	r3, #1
 800829c:	643b      	str	r3, [r7, #64]	; 0x40
 800829e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d9e1      	bls.n	8008268 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80082a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d101      	bne.n	80082b0 <find_volume+0x188>
 80082ac:	2301      	movs	r3, #1
 80082ae:	e17d      	b.n	80085ac <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80082b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d901      	bls.n	80082bc <find_volume+0x194>
 80082b8:	230d      	movs	r3, #13
 80082ba:	e177      	b.n	80085ac <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	3330      	adds	r3, #48	; 0x30
 80082c0:	330b      	adds	r3, #11
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fd1a 	bl	8006cfc <ld_word>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082ce:	d001      	beq.n	80082d4 <find_volume+0x1ac>
 80082d0:	230d      	movs	r3, #13
 80082d2:	e16b      	b.n	80085ac <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	3330      	adds	r3, #48	; 0x30
 80082d8:	3316      	adds	r3, #22
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fd0e 	bl	8006cfc <ld_word>
 80082e0:	4603      	mov	r3, r0
 80082e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80082e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d106      	bne.n	80082f8 <find_volume+0x1d0>
 80082ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ec:	3330      	adds	r3, #48	; 0x30
 80082ee:	3324      	adds	r3, #36	; 0x24
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe fd1b 	bl	8006d2c <ld_dword>
 80082f6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082fc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	789b      	ldrb	r3, [r3, #2]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d005      	beq.n	800831c <find_volume+0x1f4>
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	789b      	ldrb	r3, [r3, #2]
 8008314:	2b02      	cmp	r3, #2
 8008316:	d001      	beq.n	800831c <find_volume+0x1f4>
 8008318:	230d      	movs	r3, #13
 800831a:	e147      	b.n	80085ac <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	789b      	ldrb	r3, [r3, #2]
 8008320:	461a      	mov	r2, r3
 8008322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008324:	fb02 f303 	mul.w	r3, r2, r3
 8008328:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008330:	b29a      	uxth	r2, r3
 8008332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008334:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008338:	895b      	ldrh	r3, [r3, #10]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d008      	beq.n	8008350 <find_volume+0x228>
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	895b      	ldrh	r3, [r3, #10]
 8008342:	461a      	mov	r2, r3
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	895b      	ldrh	r3, [r3, #10]
 8008348:	3b01      	subs	r3, #1
 800834a:	4013      	ands	r3, r2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <find_volume+0x22c>
 8008350:	230d      	movs	r3, #13
 8008352:	e12b      	b.n	80085ac <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	3330      	adds	r3, #48	; 0x30
 8008358:	3311      	adds	r3, #17
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fcce 	bl	8006cfc <ld_word>
 8008360:	4603      	mov	r3, r0
 8008362:	461a      	mov	r2, r3
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	891b      	ldrh	r3, [r3, #8]
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	b29b      	uxth	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <find_volume+0x252>
 8008376:	230d      	movs	r3, #13
 8008378:	e118      	b.n	80085ac <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	3330      	adds	r3, #48	; 0x30
 800837e:	3313      	adds	r3, #19
 8008380:	4618      	mov	r0, r3
 8008382:	f7fe fcbb 	bl	8006cfc <ld_word>
 8008386:	4603      	mov	r3, r0
 8008388:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800838a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <find_volume+0x276>
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	3330      	adds	r3, #48	; 0x30
 8008394:	3320      	adds	r3, #32
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe fcc8 	bl	8006d2c <ld_dword>
 800839c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800839e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a0:	3330      	adds	r3, #48	; 0x30
 80083a2:	330e      	adds	r3, #14
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe fca9 	bl	8006cfc <ld_word>
 80083aa:	4603      	mov	r3, r0
 80083ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80083ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <find_volume+0x290>
 80083b4:	230d      	movs	r3, #13
 80083b6:	e0f9      	b.n	80085ac <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80083b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083bc:	4413      	add	r3, r2
 80083be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083c0:	8912      	ldrh	r2, [r2, #8]
 80083c2:	0912      	lsrs	r2, r2, #4
 80083c4:	b292      	uxth	r2, r2
 80083c6:	4413      	add	r3, r2
 80083c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80083ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d201      	bcs.n	80083d6 <find_volume+0x2ae>
 80083d2:	230d      	movs	r3, #13
 80083d4:	e0ea      	b.n	80085ac <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80083d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083de:	8952      	ldrh	r2, [r2, #10]
 80083e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d103      	bne.n	80083f4 <find_volume+0x2cc>
 80083ec:	230d      	movs	r3, #13
 80083ee:	e0dd      	b.n	80085ac <find_volume+0x484>
 80083f0:	2000006c 	.word	0x2000006c
		fmt = FS_FAT32;
 80083f4:	2303      	movs	r3, #3
 80083f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008400:	4293      	cmp	r3, r2
 8008402:	d802      	bhi.n	800840a <find_volume+0x2e2>
 8008404:	2302      	movs	r3, #2
 8008406:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008410:	4293      	cmp	r3, r2
 8008412:	d802      	bhi.n	800841a <find_volume+0x2f2>
 8008414:	2301      	movs	r3, #1
 8008416:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	1c9a      	adds	r2, r3, #2
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008426:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008428:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800842a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800842c:	441a      	add	r2, r3
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008432:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	441a      	add	r2, r3
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800843c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008440:	2b03      	cmp	r3, #3
 8008442:	d11e      	bne.n	8008482 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008446:	3330      	adds	r3, #48	; 0x30
 8008448:	332a      	adds	r3, #42	; 0x2a
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe fc56 	bl	8006cfc <ld_word>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <find_volume+0x332>
 8008456:	230d      	movs	r3, #13
 8008458:	e0a8      	b.n	80085ac <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845c:	891b      	ldrh	r3, [r3, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <find_volume+0x33e>
 8008462:	230d      	movs	r3, #13
 8008464:	e0a2      	b.n	80085ac <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008468:	3330      	adds	r3, #48	; 0x30
 800846a:	332c      	adds	r3, #44	; 0x2c
 800846c:	4618      	mov	r0, r3
 800846e:	f7fe fc5d 	bl	8006d2c <ld_dword>
 8008472:	4602      	mov	r2, r0
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	647b      	str	r3, [r7, #68]	; 0x44
 8008480:	e01f      	b.n	80084c2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	891b      	ldrh	r3, [r3, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <find_volume+0x366>
 800848a:	230d      	movs	r3, #13
 800848c:	e08e      	b.n	80085ac <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	6a1a      	ldr	r2, [r3, #32]
 8008492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008494:	441a      	add	r2, r3
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800849a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d103      	bne.n	80084aa <find_volume+0x382>
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	e00a      	b.n	80084c0 <find_volume+0x398>
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	695a      	ldr	r2, [r3, #20]
 80084ae:	4613      	mov	r3, r2
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	4413      	add	r3, r2
 80084b4:	085a      	lsrs	r2, r3, #1
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80084c0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80084cc:	0a5b      	lsrs	r3, r3, #9
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d201      	bcs.n	80084d6 <find_volume+0x3ae>
 80084d2:	230d      	movs	r3, #13
 80084d4:	e06a      	b.n	80085ac <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084dc:	611a      	str	r2, [r3, #16]
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	691a      	ldr	r2, [r3, #16]
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80084e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e8:	2280      	movs	r2, #128	; 0x80
 80084ea:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80084ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d149      	bne.n	8008588 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	3330      	adds	r3, #48	; 0x30
 80084f8:	3330      	adds	r3, #48	; 0x30
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe fbfe 	bl	8006cfc <ld_word>
 8008500:	4603      	mov	r3, r0
 8008502:	2b01      	cmp	r3, #1
 8008504:	d140      	bne.n	8008588 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008508:	3301      	adds	r3, #1
 800850a:	4619      	mov	r1, r3
 800850c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800850e:	f7fe fea5 	bl	800725c <move_window>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d137      	bne.n	8008588 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	2200      	movs	r2, #0
 800851c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	3330      	adds	r3, #48	; 0x30
 8008522:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe fbe8 	bl	8006cfc <ld_word>
 800852c:	4603      	mov	r3, r0
 800852e:	461a      	mov	r2, r3
 8008530:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008534:	429a      	cmp	r2, r3
 8008536:	d127      	bne.n	8008588 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	3330      	adds	r3, #48	; 0x30
 800853c:	4618      	mov	r0, r3
 800853e:	f7fe fbf5 	bl	8006d2c <ld_dword>
 8008542:	4602      	mov	r2, r0
 8008544:	4b1b      	ldr	r3, [pc, #108]	; (80085b4 <find_volume+0x48c>)
 8008546:	429a      	cmp	r2, r3
 8008548:	d11e      	bne.n	8008588 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	3330      	adds	r3, #48	; 0x30
 800854e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008552:	4618      	mov	r0, r3
 8008554:	f7fe fbea 	bl	8006d2c <ld_dword>
 8008558:	4602      	mov	r2, r0
 800855a:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <find_volume+0x490>)
 800855c:	429a      	cmp	r2, r3
 800855e:	d113      	bne.n	8008588 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	3330      	adds	r3, #48	; 0x30
 8008564:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008568:	4618      	mov	r0, r3
 800856a:	f7fe fbdf 	bl	8006d2c <ld_dword>
 800856e:	4602      	mov	r2, r0
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	3330      	adds	r3, #48	; 0x30
 8008578:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe fbd5 	bl	8006d2c <ld_dword>
 8008582:	4602      	mov	r2, r0
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800858e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008590:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <find_volume+0x494>)
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	b29a      	uxth	r2, r3
 8008598:	4b08      	ldr	r3, [pc, #32]	; (80085bc <find_volume+0x494>)
 800859a:	801a      	strh	r2, [r3, #0]
 800859c:	4b07      	ldr	r3, [pc, #28]	; (80085bc <find_volume+0x494>)
 800859e:	881a      	ldrh	r2, [r3, #0]
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80085a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085a6:	f7fe fdf1 	bl	800718c <clear_lock>
#endif
	return FR_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3758      	adds	r7, #88	; 0x58
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	41615252 	.word	0x41615252
 80085b8:	61417272 	.word	0x61417272
 80085bc:	20000070 	.word	0x20000070

080085c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80085ca:	2309      	movs	r3, #9
 80085cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01c      	beq.n	800860e <validate+0x4e>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d018      	beq.n	800860e <validate+0x4e>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d013      	beq.n	800860e <validate+0x4e>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	889a      	ldrh	r2, [r3, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	88db      	ldrh	r3, [r3, #6]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d10c      	bne.n	800860e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	785b      	ldrb	r3, [r3, #1]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fae0 	bl	8006bc0 <disk_status>
 8008600:	4603      	mov	r3, r0
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <validate+0x4e>
			res = FR_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <validate+0x5a>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	e000      	b.n	800861c <validate+0x5c>
 800861a:	2300      	movs	r3, #0
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	6013      	str	r3, [r2, #0]
	return res;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
	...

0800862c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800863e:	f107 0310 	add.w	r3, r7, #16
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff fcd5 	bl	8007ff2 <get_ldnumber>
 8008648:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	2b00      	cmp	r3, #0
 800864e:	da01      	bge.n	8008654 <f_mount+0x28>
 8008650:	230b      	movs	r3, #11
 8008652:	e02b      	b.n	80086ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008654:	4a17      	ldr	r2, [pc, #92]	; (80086b4 <f_mount+0x88>)
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800865c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d005      	beq.n	8008670 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008664:	69b8      	ldr	r0, [r7, #24]
 8008666:	f7fe fd91 	bl	800718c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	490d      	ldr	r1, [pc, #52]	; (80086b4 <f_mount+0x88>)
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <f_mount+0x66>
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d001      	beq.n	8008696 <f_mount+0x6a>
 8008692:	2300      	movs	r3, #0
 8008694:	e00a      	b.n	80086ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008696:	f107 010c 	add.w	r1, r7, #12
 800869a:	f107 0308 	add.w	r3, r7, #8
 800869e:	2200      	movs	r2, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff fd41 	bl	8008128 <find_volume>
 80086a6:	4603      	mov	r3, r0
 80086a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	2000006c 	.word	0x2000006c

080086b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b098      	sub	sp, #96	; 0x60
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	4613      	mov	r3, r2
 80086c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <f_open+0x18>
 80086cc:	2309      	movs	r3, #9
 80086ce:	e1ad      	b.n	8008a2c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80086d8:	79fa      	ldrb	r2, [r7, #7]
 80086da:	f107 0110 	add.w	r1, r7, #16
 80086de:	f107 0308 	add.w	r3, r7, #8
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff fd20 	bl	8008128 <find_volume>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80086ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f040 8191 	bne.w	8008a1a <f_open+0x362>
		dj.obj.fs = fs;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	f107 0314 	add.w	r3, r7, #20
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f7ff fc03 	bl	8007f10 <follow_path>
 800870a:	4603      	mov	r3, r0
 800870c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008714:	2b00      	cmp	r3, #0
 8008716:	d11a      	bne.n	800874e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008718:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800871c:	b25b      	sxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	da03      	bge.n	800872a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008722:	2306      	movs	r3, #6
 8008724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008728:	e011      	b.n	800874e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	f023 0301 	bic.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	bf14      	ite	ne
 8008734:	2301      	movne	r3, #1
 8008736:	2300      	moveq	r3, #0
 8008738:	b2db      	uxtb	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	f107 0314 	add.w	r3, r7, #20
 8008740:	4611      	mov	r1, r2
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe fbda 	bl	8006efc <chk_lock>
 8008748:	4603      	mov	r3, r0
 800874a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	f003 031c 	and.w	r3, r3, #28
 8008754:	2b00      	cmp	r3, #0
 8008756:	d07f      	beq.n	8008858 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800875c:	2b00      	cmp	r3, #0
 800875e:	d017      	beq.n	8008790 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008764:	2b04      	cmp	r3, #4
 8008766:	d10e      	bne.n	8008786 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008768:	f7fe fc24 	bl	8006fb4 <enq_lock>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d006      	beq.n	8008780 <f_open+0xc8>
 8008772:	f107 0314 	add.w	r3, r7, #20
 8008776:	4618      	mov	r0, r3
 8008778:	f7ff fb03 	bl	8007d82 <dir_register>
 800877c:	4603      	mov	r3, r0
 800877e:	e000      	b.n	8008782 <f_open+0xca>
 8008780:	2312      	movs	r3, #18
 8008782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	f043 0308 	orr.w	r3, r3, #8
 800878c:	71fb      	strb	r3, [r7, #7]
 800878e:	e010      	b.n	80087b2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008790:	7ebb      	ldrb	r3, [r7, #26]
 8008792:	f003 0311 	and.w	r3, r3, #17
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <f_open+0xea>
					res = FR_DENIED;
 800879a:	2307      	movs	r3, #7
 800879c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80087a0:	e007      	b.n	80087b2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <f_open+0xfa>
 80087ac:	2308      	movs	r3, #8
 80087ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80087b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d168      	bne.n	800888c <f_open+0x1d4>
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	f003 0308 	and.w	r3, r3, #8
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d063      	beq.n	800888c <f_open+0x1d4>
				dw = GET_FATTIME();
 80087c4:	f7fe f99e 	bl	8006b04 <get_fattime>
 80087c8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80087ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087cc:	330e      	adds	r3, #14
 80087ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe fae9 	bl	8006da8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80087d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d8:	3316      	adds	r3, #22
 80087da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fe fae3 	bl	8006da8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80087e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e4:	330b      	adds	r3, #11
 80087e6:	2220      	movs	r2, #32
 80087e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087ee:	4611      	mov	r1, r2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff fa32 	bl	8007c5a <ld_clust>
 80087f6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087fc:	2200      	movs	r2, #0
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff fa4a 	bl	8007c98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008806:	331c      	adds	r3, #28
 8008808:	2100      	movs	r1, #0
 800880a:	4618      	mov	r0, r3
 800880c:	f7fe facc 	bl	8006da8 <st_dword>
					fs->wflag = 1;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	2201      	movs	r2, #1
 8008814:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008818:	2b00      	cmp	r3, #0
 800881a:	d037      	beq.n	800888c <f_open+0x1d4>
						dw = fs->winsect;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008822:	f107 0314 	add.w	r3, r7, #20
 8008826:	2200      	movs	r2, #0
 8008828:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800882a:	4618      	mov	r0, r3
 800882c:	f7fe ff5d 	bl	80076ea <remove_chain>
 8008830:	4603      	mov	r3, r0
 8008832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800883a:	2b00      	cmp	r3, #0
 800883c:	d126      	bne.n	800888c <f_open+0x1d4>
							res = move_window(fs, dw);
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fd0a 	bl	800725c <move_window>
 8008848:	4603      	mov	r3, r0
 800884a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008852:	3a01      	subs	r2, #1
 8008854:	60da      	str	r2, [r3, #12]
 8008856:	e019      	b.n	800888c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008858:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800885c:	2b00      	cmp	r3, #0
 800885e:	d115      	bne.n	800888c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008860:	7ebb      	ldrb	r3, [r7, #26]
 8008862:	f003 0310 	and.w	r3, r3, #16
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <f_open+0x1ba>
					res = FR_NO_FILE;
 800886a:	2304      	movs	r3, #4
 800886c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008870:	e00c      	b.n	800888c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d007      	beq.n	800888c <f_open+0x1d4>
 800887c:	7ebb      	ldrb	r3, [r7, #26]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d002      	beq.n	800888c <f_open+0x1d4>
						res = FR_DENIED;
 8008886:	2307      	movs	r3, #7
 8008888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800888c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008890:	2b00      	cmp	r3, #0
 8008892:	d128      	bne.n	80088e6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80088ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	f023 0301 	bic.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	bf14      	ite	ne
 80088be:	2301      	movne	r3, #1
 80088c0:	2300      	moveq	r3, #0
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	f107 0314 	add.w	r3, r7, #20
 80088ca:	4611      	mov	r1, r2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe fb93 	bl	8006ff8 <inc_lock>
 80088d2:	4602      	mov	r2, r0
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d102      	bne.n	80088e6 <f_open+0x22e>
 80088e0:	2302      	movs	r3, #2
 80088e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80088e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f040 8095 	bne.w	8008a1a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f4:	4611      	mov	r1, r2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff f9af 	bl	8007c5a <ld_clust>
 80088fc:	4602      	mov	r2, r0
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008904:	331c      	adds	r3, #28
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fa10 	bl	8006d2c <ld_dword>
 800890c:	4602      	mov	r2, r0
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	88da      	ldrh	r2, [r3, #6]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	79fa      	ldrb	r2, [r7, #7]
 800892a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3330      	adds	r3, #48	; 0x30
 8008942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008946:	2100      	movs	r1, #0
 8008948:	4618      	mov	r0, r3
 800894a:	f7fe fa7a 	bl	8006e42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	f003 0320 	and.w	r3, r3, #32
 8008954:	2b00      	cmp	r3, #0
 8008956:	d060      	beq.n	8008a1a <f_open+0x362>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d05c      	beq.n	8008a1a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	895b      	ldrh	r3, [r3, #10]
 800896c:	025b      	lsls	r3, r3, #9
 800896e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	657b      	str	r3, [r7, #84]	; 0x54
 800897c:	e016      	b.n	80089ac <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fd25 	bl	80073d2 <get_fat>
 8008988:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800898a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800898c:	2b01      	cmp	r3, #1
 800898e:	d802      	bhi.n	8008996 <f_open+0x2de>
 8008990:	2302      	movs	r3, #2
 8008992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800899c:	d102      	bne.n	80089a4 <f_open+0x2ec>
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80089a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	657b      	str	r3, [r7, #84]	; 0x54
 80089ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d103      	bne.n	80089bc <f_open+0x304>
 80089b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d8e0      	bhi.n	800897e <f_open+0x2c6>
				}
				fp->clust = clst;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80089c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d127      	bne.n	8008a1a <f_open+0x362>
 80089ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d022      	beq.n	8008a1a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fe fcdb 	bl	8007394 <clust2sect>
 80089de:	6478      	str	r0, [r7, #68]	; 0x44
 80089e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d103      	bne.n	80089ee <f_open+0x336>
						res = FR_INT_ERR;
 80089e6:	2302      	movs	r3, #2
 80089e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80089ec:	e015      	b.n	8008a1a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80089ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089f0:	0a5a      	lsrs	r2, r3, #9
 80089f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f4:	441a      	add	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	7858      	ldrb	r0, [r3, #1]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a1a      	ldr	r2, [r3, #32]
 8008a08:	2301      	movs	r3, #1
 8008a0a:	f7fe f919 	bl	8006c40 <disk_read>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <f_open+0x362>
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <f_open+0x370>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008a28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3760      	adds	r7, #96	; 0x60
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08e      	sub	sp, #56	; 0x38
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f107 0214 	add.w	r2, r7, #20
 8008a52:	4611      	mov	r1, r2
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff fdb3 	bl	80085c0 <validate>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d107      	bne.n	8008a78 <f_read+0x44>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	7d5b      	ldrb	r3, [r3, #21]
 8008a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d002      	beq.n	8008a7e <f_read+0x4a>
 8008a78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a7c:	e115      	b.n	8008caa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	7d1b      	ldrb	r3, [r3, #20]
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <f_read+0x5a>
 8008a8a:	2307      	movs	r3, #7
 8008a8c:	e10d      	b.n	8008caa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	f240 80fe 	bls.w	8008ca0 <f_read+0x26c>
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008aa8:	e0fa      	b.n	8008ca0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f040 80c6 	bne.w	8008c44 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	0a5b      	lsrs	r3, r3, #9
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	8952      	ldrh	r2, [r2, #10]
 8008ac2:	3a01      	subs	r2, #1
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d12f      	bne.n	8008b2e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d103      	bne.n	8008ade <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	633b      	str	r3, [r7, #48]	; 0x30
 8008adc:	e013      	b.n	8008b06 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d007      	beq.n	8008af6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	4619      	mov	r1, r3
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f7fe fef9 	bl	80078e4 <clmt_clust>
 8008af2:	6338      	str	r0, [r7, #48]	; 0x30
 8008af4:	e007      	b.n	8008b06 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	69db      	ldr	r3, [r3, #28]
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f7fe fc67 	bl	80073d2 <get_fat>
 8008b04:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d804      	bhi.n	8008b16 <f_read+0xe2>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	755a      	strb	r2, [r3, #21]
 8008b12:	2302      	movs	r3, #2
 8008b14:	e0c9      	b.n	8008caa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b1c:	d104      	bne.n	8008b28 <f_read+0xf4>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2201      	movs	r2, #1
 8008b22:	755a      	strb	r2, [r3, #21]
 8008b24:	2301      	movs	r3, #1
 8008b26:	e0c0      	b.n	8008caa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b2c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	4619      	mov	r1, r3
 8008b36:	4610      	mov	r0, r2
 8008b38:	f7fe fc2c 	bl	8007394 <clust2sect>
 8008b3c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d104      	bne.n	8008b4e <f_read+0x11a>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2202      	movs	r2, #2
 8008b48:	755a      	strb	r2, [r3, #21]
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	e0ad      	b.n	8008caa <f_read+0x276>
			sect += csect;
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	4413      	add	r3, r2
 8008b54:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	0a5b      	lsrs	r3, r3, #9
 8008b5a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d039      	beq.n	8008bd6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b62:	69fa      	ldr	r2, [r7, #28]
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	4413      	add	r3, r2
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	8952      	ldrh	r2, [r2, #10]
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d905      	bls.n	8008b7c <f_read+0x148>
					cc = fs->csize - csect;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	895b      	ldrh	r3, [r3, #10]
 8008b74:	461a      	mov	r2, r3
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	7858      	ldrb	r0, [r3, #1]
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b86:	f7fe f85b 	bl	8006c40 <disk_read>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d004      	beq.n	8008b9a <f_read+0x166>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2201      	movs	r2, #1
 8008b94:	755a      	strb	r2, [r3, #21]
 8008b96:	2301      	movs	r3, #1
 8008b98:	e087      	b.n	8008caa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	7d1b      	ldrb	r3, [r3, #20]
 8008b9e:	b25b      	sxtb	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da14      	bge.n	8008bce <f_read+0x19a>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a1a      	ldr	r2, [r3, #32]
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d90d      	bls.n	8008bce <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6a1a      	ldr	r2, [r3, #32]
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	025b      	lsls	r3, r3, #9
 8008bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bbe:	18d0      	adds	r0, r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3330      	adds	r3, #48	; 0x30
 8008bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f7fe f919 	bl	8006e00 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	025b      	lsls	r3, r3, #9
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008bd4:	e050      	b.n	8008c78 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d02e      	beq.n	8008c3e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	7d1b      	ldrb	r3, [r3, #20]
 8008be4:	b25b      	sxtb	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	da18      	bge.n	8008c1c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	7858      	ldrb	r0, [r3, #1]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a1a      	ldr	r2, [r3, #32]
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	f7fe f841 	bl	8006c80 <disk_write>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d004      	beq.n	8008c0e <f_read+0x1da>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	755a      	strb	r2, [r3, #21]
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e04d      	b.n	8008caa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	7d1b      	ldrb	r3, [r3, #20]
 8008c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	7858      	ldrb	r0, [r3, #1]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c26:	2301      	movs	r3, #1
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	f7fe f809 	bl	8006c40 <disk_read>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d004      	beq.n	8008c3e <f_read+0x20a>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2201      	movs	r2, #1
 8008c38:	755a      	strb	r2, [r3, #21]
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e035      	b.n	8008caa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d901      	bls.n	8008c5e <f_read+0x22a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c6c:	4413      	add	r3, r2
 8008c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c70:	4619      	mov	r1, r3
 8008c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c74:	f7fe f8c4 	bl	8006e00 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7c:	4413      	add	r3, r2
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	699a      	ldr	r2, [r3, #24]
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	441a      	add	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	619a      	str	r2, [r3, #24]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c92:	441a      	add	r2, r3
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f47f af01 	bne.w	8008aaa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3738      	adds	r7, #56	; 0x38
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b08c      	sub	sp, #48	; 0x30
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	607a      	str	r2, [r7, #4]
 8008cbe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f107 0210 	add.w	r2, r7, #16
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff fc74 	bl	80085c0 <validate>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d107      	bne.n	8008cf6 <f_write+0x44>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	7d5b      	ldrb	r3, [r3, #21]
 8008cea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008cee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <f_write+0x4a>
 8008cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cfa:	e14b      	b.n	8008f94 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	7d1b      	ldrb	r3, [r3, #20]
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <f_write+0x5a>
 8008d08:	2307      	movs	r3, #7
 8008d0a:	e143      	b.n	8008f94 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	699a      	ldr	r2, [r3, #24]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	441a      	add	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	f080 812d 	bcs.w	8008f78 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	43db      	mvns	r3, r3
 8008d24:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008d26:	e127      	b.n	8008f78 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f040 80e3 	bne.w	8008efc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	0a5b      	lsrs	r3, r3, #9
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	8952      	ldrh	r2, [r2, #10]
 8008d40:	3a01      	subs	r2, #1
 8008d42:	4013      	ands	r3, r2
 8008d44:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d143      	bne.n	8008dd4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10c      	bne.n	8008d6e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d11a      	bne.n	8008d96 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2100      	movs	r1, #0
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe fd25 	bl	80077b4 <create_chain>
 8008d6a:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d6c:	e013      	b.n	8008d96 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d007      	beq.n	8008d86 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f7fe fdb1 	bl	80078e4 <clmt_clust>
 8008d82:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d84:	e007      	b.n	8008d96 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4610      	mov	r0, r2
 8008d90:	f7fe fd10 	bl	80077b4 <create_chain>
 8008d94:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 80f2 	beq.w	8008f82 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d104      	bne.n	8008dae <f_write+0xfc>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2202      	movs	r2, #2
 8008da8:	755a      	strb	r2, [r3, #21]
 8008daa:	2302      	movs	r3, #2
 8008dac:	e0f2      	b.n	8008f94 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008db4:	d104      	bne.n	8008dc0 <f_write+0x10e>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	755a      	strb	r2, [r3, #21]
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e0e9      	b.n	8008f94 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dc4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <f_write+0x122>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	7d1b      	ldrb	r3, [r3, #20]
 8008dd8:	b25b      	sxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	da18      	bge.n	8008e10 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	7858      	ldrb	r0, [r3, #1]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6a1a      	ldr	r2, [r3, #32]
 8008dec:	2301      	movs	r3, #1
 8008dee:	f7fd ff47 	bl	8006c80 <disk_write>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <f_write+0x150>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	755a      	strb	r2, [r3, #21]
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e0c8      	b.n	8008f94 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	7d1b      	ldrb	r3, [r3, #20]
 8008e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	4619      	mov	r1, r3
 8008e18:	4610      	mov	r0, r2
 8008e1a:	f7fe fabb 	bl	8007394 <clust2sect>
 8008e1e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d104      	bne.n	8008e30 <f_write+0x17e>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2202      	movs	r2, #2
 8008e2a:	755a      	strb	r2, [r3, #21]
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	e0b1      	b.n	8008f94 <f_write+0x2e2>
			sect += csect;
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	4413      	add	r3, r2
 8008e36:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	0a5b      	lsrs	r3, r3, #9
 8008e3c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d03c      	beq.n	8008ebe <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	4413      	add	r3, r2
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	8952      	ldrh	r2, [r2, #10]
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d905      	bls.n	8008e5e <f_write+0x1ac>
					cc = fs->csize - csect;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	895b      	ldrh	r3, [r3, #10]
 8008e56:	461a      	mov	r2, r3
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	7858      	ldrb	r0, [r3, #1]
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	69f9      	ldr	r1, [r7, #28]
 8008e68:	f7fd ff0a 	bl	8006c80 <disk_write>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d004      	beq.n	8008e7c <f_write+0x1ca>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	755a      	strb	r2, [r3, #21]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e08b      	b.n	8008f94 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a1a      	ldr	r2, [r3, #32]
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	6a3a      	ldr	r2, [r7, #32]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d915      	bls.n	8008eb6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6a1a      	ldr	r2, [r3, #32]
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	025b      	lsls	r3, r3, #9
 8008e9a:	69fa      	ldr	r2, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	f7fd ffac 	bl	8006e00 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	7d1b      	ldrb	r3, [r3, #20]
 8008eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	025b      	lsls	r3, r3, #9
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008ebc:	e03f      	b.n	8008f3e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d016      	beq.n	8008ef6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	699a      	ldr	r2, [r3, #24]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d210      	bcs.n	8008ef6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	7858      	ldrb	r0, [r3, #1]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ede:	2301      	movs	r3, #1
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	f7fd fead 	bl	8006c40 <disk_read>
 8008ee6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d004      	beq.n	8008ef6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	755a      	strb	r2, [r3, #21]
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e04e      	b.n	8008f94 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f04:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008f08:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d901      	bls.n	8008f16 <f_write+0x264>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f24:	4413      	add	r3, r2
 8008f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f28:	69f9      	ldr	r1, [r7, #28]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fd ff68 	bl	8006e00 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	7d1b      	ldrb	r3, [r3, #20]
 8008f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008f3e:	69fa      	ldr	r2, [r7, #28]
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	4413      	add	r3, r2
 8008f44:	61fb      	str	r3, [r7, #28]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	699a      	ldr	r2, [r3, #24]
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	441a      	add	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	619a      	str	r2, [r3, #24]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	bf38      	it	cc
 8008f5e:	461a      	movcc	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	60da      	str	r2, [r3, #12]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	441a      	add	r2, r3
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f47f aed4 	bne.w	8008d28 <f_write+0x76>
 8008f80:	e000      	b.n	8008f84 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f82:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	7d1b      	ldrb	r3, [r3, #20]
 8008f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3730      	adds	r7, #48	; 0x30
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f107 0208 	add.w	r2, r7, #8
 8008faa:	4611      	mov	r1, r2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7ff fb07 	bl	80085c0 <validate>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d168      	bne.n	800908e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	7d1b      	ldrb	r3, [r3, #20]
 8008fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d062      	beq.n	800908e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	7d1b      	ldrb	r3, [r3, #20]
 8008fcc:	b25b      	sxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	da15      	bge.n	8008ffe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	7858      	ldrb	r0, [r3, #1]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a1a      	ldr	r2, [r3, #32]
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	f7fd fe4d 	bl	8006c80 <disk_write>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <f_sync+0x54>
 8008fec:	2301      	movs	r3, #1
 8008fee:	e04f      	b.n	8009090 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	7d1b      	ldrb	r3, [r3, #20]
 8008ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ffe:	f7fd fd81 	bl	8006b04 <get_fattime>
 8009002:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900a:	4619      	mov	r1, r3
 800900c:	4610      	mov	r0, r2
 800900e:	f7fe f925 	bl	800725c <move_window>
 8009012:	4603      	mov	r3, r0
 8009014:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009016:	7dfb      	ldrb	r3, [r7, #23]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d138      	bne.n	800908e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009020:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	330b      	adds	r3, #11
 8009026:	781a      	ldrb	r2, [r3, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	330b      	adds	r3, #11
 800902c:	f042 0220 	orr.w	r2, r2, #32
 8009030:	b2d2      	uxtb	r2, r2
 8009032:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	461a      	mov	r2, r3
 800903e:	68f9      	ldr	r1, [r7, #12]
 8009040:	f7fe fe2a 	bl	8007c98 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f103 021c 	add.w	r2, r3, #28
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	4619      	mov	r1, r3
 8009050:	4610      	mov	r0, r2
 8009052:	f7fd fea9 	bl	8006da8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3316      	adds	r3, #22
 800905a:	6939      	ldr	r1, [r7, #16]
 800905c:	4618      	mov	r0, r3
 800905e:	f7fd fea3 	bl	8006da8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3312      	adds	r3, #18
 8009066:	2100      	movs	r1, #0
 8009068:	4618      	mov	r0, r3
 800906a:	f7fd fe82 	bl	8006d72 <st_word>
					fs->wflag = 1;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2201      	movs	r2, #1
 8009072:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe f91e 	bl	80072b8 <sync_fs>
 800907c:	4603      	mov	r3, r0
 800907e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	7d1b      	ldrb	r3, [r3, #20]
 8009084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009088:	b2da      	uxtb	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800908e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff ff7b 	bl	8008f9c <f_sync>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d118      	bne.n	80090e2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f107 0208 	add.w	r2, r7, #8
 80090b6:	4611      	mov	r1, r2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7ff fa81 	bl	80085c0 <validate>
 80090be:	4603      	mov	r3, r0
 80090c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10c      	bne.n	80090e2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fe f821 	bl	8007114 <dec_lock>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d102      	bne.n	80090e2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	4613      	mov	r3, r2
 80090f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80090fa:	2301      	movs	r3, #1
 80090fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80090fe:	2300      	movs	r3, #0
 8009100:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009102:	4b1f      	ldr	r3, [pc, #124]	; (8009180 <FATFS_LinkDriverEx+0x94>)
 8009104:	7a5b      	ldrb	r3, [r3, #9]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d131      	bne.n	8009170 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800910c:	4b1c      	ldr	r3, [pc, #112]	; (8009180 <FATFS_LinkDriverEx+0x94>)
 800910e:	7a5b      	ldrb	r3, [r3, #9]
 8009110:	b2db      	uxtb	r3, r3
 8009112:	461a      	mov	r2, r3
 8009114:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <FATFS_LinkDriverEx+0x94>)
 8009116:	2100      	movs	r1, #0
 8009118:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800911a:	4b19      	ldr	r3, [pc, #100]	; (8009180 <FATFS_LinkDriverEx+0x94>)
 800911c:	7a5b      	ldrb	r3, [r3, #9]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	4a17      	ldr	r2, [pc, #92]	; (8009180 <FATFS_LinkDriverEx+0x94>)
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800912a:	4b15      	ldr	r3, [pc, #84]	; (8009180 <FATFS_LinkDriverEx+0x94>)
 800912c:	7a5b      	ldrb	r3, [r3, #9]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	461a      	mov	r2, r3
 8009132:	4b13      	ldr	r3, [pc, #76]	; (8009180 <FATFS_LinkDriverEx+0x94>)
 8009134:	4413      	add	r3, r2
 8009136:	79fa      	ldrb	r2, [r7, #7]
 8009138:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800913a:	4b11      	ldr	r3, [pc, #68]	; (8009180 <FATFS_LinkDriverEx+0x94>)
 800913c:	7a5b      	ldrb	r3, [r3, #9]
 800913e:	b2db      	uxtb	r3, r3
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	b2d1      	uxtb	r1, r2
 8009144:	4a0e      	ldr	r2, [pc, #56]	; (8009180 <FATFS_LinkDriverEx+0x94>)
 8009146:	7251      	strb	r1, [r2, #9]
 8009148:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800914a:	7dbb      	ldrb	r3, [r7, #22]
 800914c:	3330      	adds	r3, #48	; 0x30
 800914e:	b2da      	uxtb	r2, r3
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	3301      	adds	r3, #1
 8009158:	223a      	movs	r2, #58	; 0x3a
 800915a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	3302      	adds	r3, #2
 8009160:	222f      	movs	r2, #47	; 0x2f
 8009162:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	3303      	adds	r3, #3
 8009168:	2200      	movs	r2, #0
 800916a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009170:	7dfb      	ldrb	r3, [r7, #23]
}
 8009172:	4618      	mov	r0, r3
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	20000094 	.word	0x20000094

08009184 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800918e:	2200      	movs	r2, #0
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7ff ffaa 	bl	80090ec <FATFS_LinkDriverEx>
 8009198:	4603      	mov	r3, r0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <__libc_init_array>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	4e0d      	ldr	r6, [pc, #52]	; (80091dc <__libc_init_array+0x38>)
 80091a8:	4c0d      	ldr	r4, [pc, #52]	; (80091e0 <__libc_init_array+0x3c>)
 80091aa:	1ba4      	subs	r4, r4, r6
 80091ac:	10a4      	asrs	r4, r4, #2
 80091ae:	2500      	movs	r5, #0
 80091b0:	42a5      	cmp	r5, r4
 80091b2:	d109      	bne.n	80091c8 <__libc_init_array+0x24>
 80091b4:	4e0b      	ldr	r6, [pc, #44]	; (80091e4 <__libc_init_array+0x40>)
 80091b6:	4c0c      	ldr	r4, [pc, #48]	; (80091e8 <__libc_init_array+0x44>)
 80091b8:	f000 f820 	bl	80091fc <_init>
 80091bc:	1ba4      	subs	r4, r4, r6
 80091be:	10a4      	asrs	r4, r4, #2
 80091c0:	2500      	movs	r5, #0
 80091c2:	42a5      	cmp	r5, r4
 80091c4:	d105      	bne.n	80091d2 <__libc_init_array+0x2e>
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091cc:	4798      	blx	r3
 80091ce:	3501      	adds	r5, #1
 80091d0:	e7ee      	b.n	80091b0 <__libc_init_array+0xc>
 80091d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091d6:	4798      	blx	r3
 80091d8:	3501      	adds	r5, #1
 80091da:	e7f2      	b.n	80091c2 <__libc_init_array+0x1e>
 80091dc:	080095e4 	.word	0x080095e4
 80091e0:	080095e4 	.word	0x080095e4
 80091e4:	080095e4 	.word	0x080095e4
 80091e8:	080095e8 	.word	0x080095e8

080091ec <memset>:
 80091ec:	4402      	add	r2, r0
 80091ee:	4603      	mov	r3, r0
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d100      	bne.n	80091f6 <memset+0xa>
 80091f4:	4770      	bx	lr
 80091f6:	f803 1b01 	strb.w	r1, [r3], #1
 80091fa:	e7f9      	b.n	80091f0 <memset+0x4>

080091fc <_init>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	bf00      	nop
 8009200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009202:	bc08      	pop	{r3}
 8009204:	469e      	mov	lr, r3
 8009206:	4770      	bx	lr

08009208 <_fini>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	bf00      	nop
 800920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920e:	bc08      	pop	{r3}
 8009210:	469e      	mov	lr, r3
 8009212:	4770      	bx	lr
