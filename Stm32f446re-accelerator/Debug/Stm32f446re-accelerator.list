
Stm32f446re-accelerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fe4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080091a8  080091a8  000191a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009560  08009560  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08009560  08009560  00019560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009568  08009568  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009568  08009568  00019568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800956c  0800956c  0001956c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08009570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb0  20000048  080095b8  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef8  080095b8  00020ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acde  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003296  00000000  00000000  0003ad56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003dff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  0003f440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245de  00000000  00000000  00040718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d14  00000000  00000000  00064cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2bf5  00000000  00000000  00075a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001485ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f4  00000000  00000000  0014867c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000048 	.word	0x20000048
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009190 	.word	0x08009190

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	08009190 	.word	0x08009190

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000508:	21ff      	movs	r1, #255	; 0xff
 800050a:	2012      	movs	r0, #18
 800050c:	f001 fb1c 	bl	8001b48 <SPIWrite>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000518:	2101      	movs	r1, #1
 800051a:	2001      	movs	r0, #1
 800051c:	f001 fb14 	bl	8001b48 <SPIWrite>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f001 fb0c 	bl	8001b48 <SPIWrite>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	2001      	movs	r0, #1
 800053c:	f001 fb04 	bl	8001b48 <SPIWrite>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <Rf96_FreqChoose+0x28>)
 8000558:	4413      	add	r3, r2
 800055a:	2203      	movs	r2, #3
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f001 fb48 	bl	8001bf4 <BurstWrite>

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	08009248 	.word	0x08009248

08000570 <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	//SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
	SPIWrite(LR_RegPaConfig,0x0F); //14 Дб
 800057a:	210f      	movs	r1, #15
 800057c:	2009      	movs	r0, #9
 800057e:	f001 fae3 	bl	8001b48 <SPIWrite>
	//SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84
	SPIWrite(0x5A,0x84); // обычный режим( без макс усиления: до 14 Дб)
 8000582:	2184      	movs	r1, #132	; 0x84
 8000584:	205a      	movs	r0, #90	; 0x5a
 8000586:	f001 fadf 	bl	8001b48 <SPIWrite>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <Rf96_OCP+0x20>)
 80005a2:	5cd3      	ldrb	r3, [r2, r3]
 80005a4:	4619      	mov	r1, r3
 80005a6:	200b      	movs	r0, #11
 80005a8:	f001 face 	bl	8001b48 <SPIWrite>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08009254 	.word	0x08009254

080005b8 <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <Rf96_LNA+0x20>)
 80005c6:	5cd3      	ldrb	r3, [r2, r3]
 80005c8:	4619      	mov	r1, r3
 80005ca:	200c      	movs	r0, #12
 80005cc:	f001 fabc 	bl	8001b48 <SPIWrite>

}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	08009258 	.word	0x08009258

080005dc <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	//SPIWrite(LR_RegModemConfig1,0x0E); // 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
	SPIWrite(LR_RegModemConfig1,0x25); //   0x21 8C    Без CRC16 , 125 khz, cr 4/8, optimize on
 80005ee:	2125      	movs	r1, #37	; 0x25
 80005f0:	201d      	movs	r0, #29
 80005f2:	f001 faa9 	bl	8001b48 <SPIWrite>
	//SPIWrite(LR_RegModemConfig1,0x8E); // С CRC16
	//SPIWrite(LR_RegDetectOptimize,0xC5);
	//SPIWrite(LR_RegDetecionThreshold,0x0C);
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	460b      	mov	r3, r1
 800060a:	71bb      	strb	r3, [r7, #6]
 800060c:	4613      	mov	r3, r2
 800060e:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0xB4);  // SF=11
 8000610:	21b4      	movs	r1, #180	; 0xb4
 8000612:	201e      	movs	r0, #30
 8000614:	f001 fa98 	bl	8001b48 <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 8000618:	88bb      	ldrh	r3, [r7, #4]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	201f      	movs	r0, #31
 8000620:	f001 fa92 	bl	8001b48 <SPIWrite>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b29b      	uxth	r3, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	2020      	movs	r0, #32
 8000642:	f001 fa81 	bl	8001b48 <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	2021      	movs	r0, #33	; 0x21
 800064e:	f001 fa7b 	bl	8001b48 <SPIWrite>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1_Di2_Di3(uint8_t Di0_value, uint8_t Di1_value,uint8_t Di2_value ,uint8_t Di3_value)
{
 800065a:	b590      	push	{r4, r7, lr}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	4604      	mov	r4, r0
 8000662:	4608      	mov	r0, r1
 8000664:	4611      	mov	r1, r2
 8000666:	461a      	mov	r2, r3
 8000668:	4623      	mov	r3, r4
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4603      	mov	r3, r0
 800066e:	71bb      	strb	r3, [r7, #6]
 8000670:	460b      	mov	r3, r1
 8000672:	717b      	strb	r3, [r7, #5]
 8000674:	4613      	mov	r3, r2
 8000676:	713b      	strb	r3, [r7, #4]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4)+ (Di2_value<<2)+(Di3_value));
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	019b      	lsls	r3, r3, #6
 800067c:	b2da      	uxtb	r2, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4413      	add	r3, r2
 8000686:	b2da      	uxtb	r2, r3
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4413      	add	r3, r2
 8000690:	b2da      	uxtb	r2, r3
 8000692:	793b      	ldrb	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	2040      	movs	r0, #64	; 0x40
 800069c:	f001 fa54 	bl	8001b48 <SPIWrite>
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd90      	pop	{r4, r7, pc}

080006a8 <Rf96_irqMaskTX>:
//Снятие маски с прерывания по TX
void Rf96_irqMaskTX(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
 80006ac:	21f7      	movs	r1, #247	; 0xf7
 80006ae:	2011      	movs	r0, #17
 80006b0:	f001 fa4a 	bl	8001b48 <SPIWrite>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Rf96_irqMaskRX>:
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
 80006bc:	213f      	movs	r1, #63	; 0x3f
 80006be:	2011      	movs	r0, #17
 80006c0:	f001 fa42 	bl	8001b48 <SPIWrite>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4619      	mov	r1, r3
 80006d6:	2022      	movs	r0, #34	; 0x22
 80006d8:	f001 fa36 	bl	8001b48 <SPIWrite>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <Rf96_TX_FifoAdr>:
//Установка Адресса  TX в буфере
void Rf96_TX_FifoAdr(uint8_t TX_adr_value)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4619      	mov	r1, r3
 80006f2:	200e      	movs	r0, #14
 80006f4:	f001 fa28 	bl	8001b48 <SPIWrite>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <Rf96_RX_FifoAdr>:
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4619      	mov	r1, r3
 800070e:	200f      	movs	r0, #15
 8000710:	f001 fa1a 	bl	8001b48 <SPIWrite>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4619      	mov	r1, r3
 800072a:	200d      	movs	r0, #13
 800072c:	f001 fa0c 	bl	8001b48 <SPIWrite>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 800073c:	2185      	movs	r1, #133	; 0x85
 800073e:	2001      	movs	r0, #1
 8000740:	f001 fa02 	bl	8001b48 <SPIWrite>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <Rf96_TX_mode>:
// Вход в режим передачи
void Rf96_TX_mode(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8B);
	SPIWrite(LR_RegOpMode,0x83);                            		 //High Frequency Mode
 800074c:	2183      	movs	r1, #131	; 0x83
 800074e:	2001      	movs	r0, #1
 8000750:	f001 f9fa 	bl	8001b48 <SPIWrite>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <Rf96_DataTX_to_FiFO>:

// Запись данных в FiFO
void Rf96_DataTX_to_FiFO(char* str, uint8_t LenghtStr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	461a      	mov	r2, r3
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	2000      	movs	r0, #0
 800076c:	f001 fa42 	bl	8001bf4 <BurstWrite>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <Rf96_DataRX_From_FiFO>:
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 8000780:	2010      	movs	r0, #16
 8000782:	f001 f9c3 	bl	8001b0c <SPIRead>
 8000786:	4603      	mov	r3, r0
 8000788:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	4619      	mov	r1, r3
 800078e:	200d      	movs	r0, #13
 8000790:	f001 f9da 	bl	8001b48 <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 8000794:	2013      	movs	r0, #19
 8000796:	f001 f9b9 	bl	8001b0c <SPIRead>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	461a      	mov	r2, r3
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	2000      	movs	r0, #0
 80007a6:	f001 f9f3 	bl	8001b90 <SPIBurstRead>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007b6:	f7ff feb5 	bl	8000524 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007ba:	f7ff febb 	bl	8000534 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fec0 	bl	8000544 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fed3 	bl	8000570 <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fee2 	bl	8000594 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fef1 	bl	80005b8 <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2104      	movs	r1, #4
 80007da:	2007      	movs	r0, #7
 80007dc:	f7ff fefe 	bl	80005dc <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x1FF);
 80007e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007e4:	2101      	movs	r1, #1
 80007e6:	2006      	movs	r0, #6
 80007e8:	f7ff ff09 	bl	80005fe <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007ec:	2008      	movs	r0, #8
 80007ee:	f7ff ff1d 	bl	800062c <Rf96_Preamble>
	SPIWrite(0x37,0x0A);
 80007f2:	210a      	movs	r1, #10
 80007f4:	2037      	movs	r0, #55	; 0x37
 80007f6:	f001 f9a7 	bl	8001b48 <SPIWrite>
	SPIWrite(0x31,0xA3);
 80007fa:	21a3      	movs	r1, #163	; 0xa3
 80007fc:	2031      	movs	r0, #49	; 0x31
 80007fe:	f001 f9a3 	bl	8001b48 <SPIWrite>
	// Заходим в StandBy
	Rf96_Standby();
 8000802:	f7ff fe87 	bl	8000514 <Rf96_Standby>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}

0800080a <Rf96_Lora_TX_mode>:



// Инициализация TX
void Rf96_Lora_TX_mode(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
	//RAK811antTx();
	  SPIWrite(LR_RegHopPeriod,0x0);
 800080e:	2100      	movs	r1, #0
 8000810:	2024      	movs	r0, #36	; 0x24
 8000812:	f001 f999 	bl	8001b48 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по отправке
	  Rf96_PinOut_Di0_Di1_Di2_Di3(1,0,0,2);
 8000816:	2302      	movs	r3, #2
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ff1c 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
      // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000822:	f7ff fe6f 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Снимаем маску с прерывания по TX
	  Rf96_irqMaskTX();
 8000826:	f7ff ff3f 	bl	80006a8 <Rf96_irqMaskTX>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 800082a:	202a      	movs	r0, #42	; 0x2a
 800082c:	f7ff ff4c 	bl	80006c8 <Rf96_PayloadLength>
	  // Установка адреса TX в буфере FIFO
	  Rf96_TX_FifoAdr(0x80);
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	f7ff ff57 	bl	80006e4 <Rf96_TX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива TX в FIFO
	  Rf96_FIFO_point(0x80);
 8000836:	2080      	movs	r0, #128	; 0x80
 8000838:	f7ff ff70 	bl	800071c <Rf96_FIFO_point>

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <Rf96_Lora_RX_mode>:
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	//  SPIWrite(0x5A,0x87);                            //Normal and Rx
	//  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
	  SPIWrite(LR_RegHopPeriod,0x0);   //??????
 8000844:	2100      	movs	r1, #0
 8000846:	2024      	movs	r0, #36	; 0x24
 8000848:	f001 f97e 	bl	8001b48 <SPIWrite>
	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1_Di2_Di3(0,0,0,2);
 800084c:	2302      	movs	r3, #2
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff ff01 	bl	800065a <Rf96_PinOut_Di0_Di1_Di2_Di3>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000858:	f7ff ff2e 	bl	80006b8 <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 800085c:	f7ff fe52 	bl	8000504 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(42);
 8000860:	202a      	movs	r0, #42	; 0x2a
 8000862:	f7ff ff31 	bl	80006c8 <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff ff4a 	bl	8000700 <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ff55 	bl	800071c <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 8000872:	f7ff ff61 	bl	8000738 <Rf96_RX_Continuous_mode>

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}

0800087a <Rf96_LoRaTxPacket>:

// Отправка пакета данных
void Rf96_LoRaTxPacket(char* Str, uint8_t LenStr)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	460b      	mov	r3, r1
 8000884:	70fb      	strb	r3, [r7, #3]
    // Записываем данные в буфер
    Rf96_DataTX_to_FiFO(Str,LenStr);
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	4619      	mov	r1, r3
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ff64 	bl	8000758 <Rf96_DataTX_to_FiFO>
	// Вход в режим передачи
	Rf96_TX_mode();
 8000890:	f7ff ff5a 	bl	8000748 <Rf96_TX_mode>
		}
	}
	*/


}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80008a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ac:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80008ae:	e012      	b.n	80008d6 <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 80008b0:	89fb      	ldrh	r3, [r7, #14]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	89fb      	ldrh	r3, [r7, #14]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	1c59      	adds	r1, r3, #1
 80008c2:	6079      	str	r1, [r7, #4]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4043      	eors	r3, r0
 80008c8:	4909      	ldr	r1, [pc, #36]	; (80008f0 <Crc16+0x54>)
 80008ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	4053      	eors	r3, r2
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80008d6:	887b      	ldrh	r3, [r7, #2]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	807a      	strh	r2, [r7, #2]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1e7      	bne.n	80008b0 <Crc16+0x14>

    return crc;
 80008e0:	89fb      	ldrh	r3, [r7, #14]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	080092c0 	.word	0x080092c0

080008f4 <UserDelayStart>:
// Функция пользовательской задержки
void UserDelayStart(uint32_t Delay)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	TimeDelay=Delay;
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <UserDelayStart+0x20>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
	Delay_start=1;
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <UserDelayStart+0x24>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	20000020 	.word	0x20000020
 8000918:	20000074 	.word	0x20000074

0800091c <uint32_TO_charmass>:
mass - массив, в который число будет переведено
startMass - начальный элемент массива
len - длина переводимого числа
*/
void uint32_TO_charmass(uint32_t Number, uint8_t *mass, uint16_t startMass, uint16_t len)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	4611      	mov	r1, r2
 8000928:	461a      	mov	r2, r3
 800092a:	460b      	mov	r3, r1
 800092c:	80fb      	strh	r3, [r7, #6]
 800092e:	4613      	mov	r3, r2
 8000930:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < len; i++)
 8000932:	2300      	movs	r3, #0
 8000934:	82fb      	strh	r3, [r7, #22]
 8000936:	e01f      	b.n	8000978 <uint32_TO_charmass+0x5c>
	{
		mass[len - 1 - i + startMass] = Number % 10 + 48;
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <uint32_TO_charmass+0x70>)
 800093c:	fba3 2301 	umull	r2, r3, r3, r1
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	4613      	mov	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	1aca      	subs	r2, r1, r3
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	1e59      	subs	r1, r3, #1
 8000952:	8afb      	ldrh	r3, [r7, #22]
 8000954:	1ac9      	subs	r1, r1, r3
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	440b      	add	r3, r1
 800095a:	4619      	mov	r1, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	440b      	add	r3, r1
 8000960:	3230      	adds	r2, #48	; 0x30
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	701a      	strb	r2, [r3, #0]
		Number = Number / 10;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <uint32_TO_charmass+0x70>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < len; i++)
 8000972:	8afb      	ldrh	r3, [r7, #22]
 8000974:	3301      	adds	r3, #1
 8000976:	82fb      	strh	r3, [r7, #22]
 8000978:	8afa      	ldrh	r2, [r7, #22]
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d3db      	bcc.n	8000938 <uint32_TO_charmass+0x1c>
	}
}
 8000980:	bf00      	nop
 8000982:	371c      	adds	r7, #28
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	cccccccd 	.word	0xcccccccd

08000990 <ReadNumofFileSD>:
// Чтение количества созданных файлов из файла InfoSD.txt
uint8_t ReadNumofFileSD(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000996:	af00      	add	r7, sp, #0
	FIL filInform;
	uint8_t Num=255;
 8000998:	23ff      	movs	r3, #255	; 0xff
 800099a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_READ);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2211      	movs	r2, #17
 80009a2:	4945      	ldr	r1, [pc, #276]	; (8000ab8 <ReadNumofFileSD+0x128>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f007 fe51 	bl	800864c <f_open>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b43      	ldr	r3, [pc, #268]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009b0:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 80009b2:	4b42      	ldr	r3, [pc, #264]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d005      	beq.n	80009c6 <ReadNumofFileSD+0x36>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2102      	movs	r1, #2
 80009be:	4840      	ldr	r0, [pc, #256]	; (8000ac0 <ReadNumofFileSD+0x130>)
 80009c0:	f003 f9de 	bl	8003d80 <HAL_GPIO_WritePin>
		while(1);
 80009c4:	e7fe      	b.n	80009c4 <ReadNumofFileSD+0x34>
	}
	//Читаем количество файлов
	fres=f_read(&filInform,BuffSDRead,40,&bytesRead);
 80009c6:	1d38      	adds	r0, r7, #4
 80009c8:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <ReadNumofFileSD+0x134>)
 80009ca:	2228      	movs	r2, #40	; 0x28
 80009cc:	493e      	ldr	r1, [pc, #248]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009ce:	f007 fffb 	bl	80089c8 <f_read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b39      	ldr	r3, [pc, #228]	; (8000abc <ReadNumofFileSD+0x12c>)
 80009d8:	701a      	strb	r2, [r3, #0]
	//Если на флешке не было этого файла
	if(BuffSDRead[0]=='\t' && BuffSDRead[1]=='\t' && BuffSDRead[2]=='F' && BuffSDRead[3]=='i' && BuffSDRead[4]=='l')
 80009da:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b09      	cmp	r3, #9
 80009e0:	d114      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009e2:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	2b09      	cmp	r3, #9
 80009e8:	d110      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009ea:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	2b46      	cmp	r3, #70	; 0x46
 80009f0:	d10c      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009f4:	78db      	ldrb	r3, [r3, #3]
 80009f6:	2b69      	cmp	r3, #105	; 0x69
 80009f8:	d108      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <ReadNumofFileSD+0x138>)
 80009fc:	791b      	ldrb	r3, [r3, #4]
 80009fe:	2b6c      	cmp	r3, #108	; 0x6c
 8000a00:	d104      	bne.n	8000a0c <ReadNumofFileSD+0x7c>
	{
		Num=BuffSDRead[28]-'0'; // количество файлов
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <ReadNumofFileSD+0x138>)
 8000a04:	7f1b      	ldrb	r3, [r3, #28]
 8000a06:	3b30      	subs	r3, #48	; 0x30
 8000a08:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	}
	fres=f_close(&filInform);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f008 fb0c 	bl	800902c <f_close>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a1a:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000a1c:	4b27      	ldr	r3, [pc, #156]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d005      	beq.n	8000a30 <ReadNumofFileSD+0xa0>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2102      	movs	r1, #2
 8000a28:	4825      	ldr	r0, [pc, #148]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000a2a:	f003 f9a9 	bl	8003d80 <HAL_GPIO_WritePin>
		while(1);
 8000a2e:	e7fe      	b.n	8000a2e <ReadNumofFileSD+0x9e>
	}
	if(Num==255)
 8000a30:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000a34:	2bff      	cmp	r3, #255	; 0xff
 8000a36:	d132      	bne.n	8000a9e <ReadNumofFileSD+0x10e>
	{
		Num=0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2212      	movs	r2, #18
 8000a42:	491d      	ldr	r1, [pc, #116]	; (8000ab8 <ReadNumofFileSD+0x128>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 fe01 	bl	800864c <f_open>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a50:	701a      	strb	r2, [r3, #0]
		// Количество файлов
		fres = f_write(&filInform, "\t\tFile info\nNumber of files:0;\n", 31, &bytesWroteInform);
 8000a52:	463b      	mov	r3, r7
 8000a54:	1d38      	adds	r0, r7, #4
 8000a56:	221f      	movs	r2, #31
 8000a58:	491c      	ldr	r1, [pc, #112]	; (8000acc <ReadNumofFileSD+0x13c>)
 8000a5a:	f008 f8f4 	bl	8008c46 <f_write>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a64:	701a      	strb	r2, [r3, #0]
		// История команд
		fres = f_write(&filInform, "\t\tCommand History\nTime\tcommand\n", 31, &bytesWroteInform);
 8000a66:	463b      	mov	r3, r7
 8000a68:	1d38      	adds	r0, r7, #4
 8000a6a:	221f      	movs	r2, #31
 8000a6c:	4918      	ldr	r1, [pc, #96]	; (8000ad0 <ReadNumofFileSD+0x140>)
 8000a6e:	f008 f8ea 	bl	8008c46 <f_write>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a78:	701a      	strb	r2, [r3, #0]
		fres=f_close(&filInform);
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fad5 	bl	800902c <f_close>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a88:	701a      	strb	r2, [r3, #0]
		if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <ReadNumofFileSD+0x12c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <ReadNumofFileSD+0x10e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2102      	movs	r1, #2
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000a98:	f003 f972 	bl	8003d80 <HAL_GPIO_WritePin>
			while(1);
 8000a9c:	e7fe      	b.n	8000a9c <ReadNumofFileSD+0x10c>
		}
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <ReadNumofFileSD+0x130>)
 8000aa4:	f003 f96c 	bl	8003d80 <HAL_GPIO_WritePin>

	return Num;
 8000aa8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	080091a8 	.word	0x080091a8
 8000abc:	20000810 	.word	0x20000810
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	2000010c 	.word	0x2000010c
 8000ac8:	200006e4 	.word	0x200006e4
 8000acc:	080091b4 	.word	0x080091b4
 8000ad0:	080091d4 	.word	0x080091d4

08000ad4 <WriteNumofFileSD>:
// Запись в фаил  InfoSD.txt количество созданных файлов
void WriteNumofFileSD(uint8_t Num)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4602      	mov	r2, r0
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	701a      	strb	r2, [r3, #0]
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	2212      	movs	r2, #18
 8000ae8:	4920      	ldr	r1, [pc, #128]	; (8000b6c <WriteNumofFileSD+0x98>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f007 fdae 	bl	800864c <f_open>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000af6:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d005      	beq.n	8000b0c <WriteNumofFileSD+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2102      	movs	r1, #2
 8000b04:	481b      	ldr	r0, [pc, #108]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b06:	f003 f93b 	bl	8003d80 <HAL_GPIO_WritePin>
		while(1);
 8000b0a:	e7fe      	b.n	8000b0a <WriteNumofFileSD+0x36>
	}
	//Записываем количество данных
	BuffSDfileinfo[28]=Num+'0';
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	3330      	adds	r3, #48	; 0x30
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <WriteNumofFileSD+0xa4>)
 8000b16:	771a      	strb	r2, [r3, #28]
	fres = f_write(&filInform, BuffSDfileinfo, 30, &bytesWroteInform);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	f107 0010 	add.w	r0, r7, #16
 8000b20:	221e      	movs	r2, #30
 8000b22:	4915      	ldr	r1, [pc, #84]	; (8000b78 <WriteNumofFileSD+0xa4>)
 8000b24:	f008 f88f 	bl	8008c46 <f_write>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b2e:	701a      	strb	r2, [r3, #0]
	fres=f_close(&filInform);
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4618      	mov	r0, r3
 8000b36:	f008 fa79 	bl	800902c <f_close>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b40:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <WriteNumofFileSD+0x9c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <WriteNumofFileSD+0x82>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b50:	f003 f916 	bl	8003d80 <HAL_GPIO_WritePin>
		while(1);
 8000b54:	e7fe      	b.n	8000b54 <WriteNumofFileSD+0x80>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <WriteNumofFileSD+0xa0>)
 8000b5c:	f003 f910 	bl	8003d80 <HAL_GPIO_WritePin>
}
 8000b60:	bf00      	nop
 8000b62:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	080091a8 	.word	0x080091a8
 8000b70:	20000810 	.word	0x20000810
 8000b74:	40020800 	.word	0x40020800
 8000b78:	20000000 	.word	0x20000000

08000b7c <CommandHistoryWrite>:
// Запись в файл InfoSD.txt команд и времени
void CommandHistoryWrite(uint8_t command)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4602      	mov	r2, r0
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	701a      	strb	r2, [r3, #0]
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_APPEND | FA_WRITE);
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2232      	movs	r2, #50	; 0x32
 8000b90:	492a      	ldr	r1, [pc, #168]	; (8000c3c <CommandHistoryWrite+0xc0>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f007 fd5a 	bl	800864c <f_open>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <CommandHistoryWrite+0xc4>)
 8000b9e:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <CommandHistoryWrite+0xc4>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <CommandHistoryWrite+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2102      	movs	r1, #2
 8000bac:	4825      	ldr	r0, [pc, #148]	; (8000c44 <CommandHistoryWrite+0xc8>)
 8000bae:	f003 f8e7 	bl	8003d80 <HAL_GPIO_WritePin>
		while(1);
 8000bb2:	e7fe      	b.n	8000bb2 <CommandHistoryWrite+0x36>
	}
	//Записываем количество данных
	//  Время в мс, когда ,прибыла команда
	uint32_t TimeHistory = HAL_GetTick();
 8000bb4:	f002 f9ee 	bl	8002f94 <HAL_GetTick>
 8000bb8:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
	uint32_TO_charmass(TimeHistory, BufFileInfoWr, 0, 8);
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4921      	ldr	r1, [pc, #132]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000bc2:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000bc6:	f7ff fea9 	bl	800091c <uint32_TO_charmass>
	BufFileInfoWr[8]=' ';
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000bcc:	2220      	movs	r2, #32
 8000bce:	721a      	strb	r2, [r3, #8]
	BufFileInfoWr[9]=command+'0';
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3330      	adds	r3, #48	; 0x30
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000bda:	725a      	strb	r2, [r3, #9]
	BufFileInfoWr[10]=';';
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000bde:	223b      	movs	r2, #59	; 0x3b
 8000be0:	729a      	strb	r2, [r3, #10]
	BufFileInfoWr[11]='\n';
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	72da      	strb	r2, [r3, #11]
	fres = f_write(&filInform, BufFileInfoWr, 12, &bytesWroteInform);
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	f107 000c 	add.w	r0, r7, #12
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	4915      	ldr	r1, [pc, #84]	; (8000c48 <CommandHistoryWrite+0xcc>)
 8000bf4:	f008 f827 	bl	8008c46 <f_write>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <CommandHistoryWrite+0xc4>)
 8000bfe:	701a      	strb	r2, [r3, #0]
	fres=f_close(&filInform);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4618      	mov	r0, r3
 8000c06:	f008 fa11 	bl	800902c <f_close>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <CommandHistoryWrite+0xc4>)
 8000c10:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <CommandHistoryWrite+0xc4>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d005      	beq.n	8000c26 <CommandHistoryWrite+0xaa>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <CommandHistoryWrite+0xc8>)
 8000c20:	f003 f8ae 	bl	8003d80 <HAL_GPIO_WritePin>
		while(1);
 8000c24:	e7fe      	b.n	8000c24 <CommandHistoryWrite+0xa8>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2102      	movs	r1, #2
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <CommandHistoryWrite+0xc8>)
 8000c2c:	f003 f8a8 	bl	8003d80 <HAL_GPIO_WritePin>
}
 8000c30:	bf00      	nop
 8000c32:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	080091a8 	.word	0x080091a8
 8000c40:	20000810 	.word	0x20000810
 8000c44:	40020800 	.word	0x40020800
 8000c48:	200003c0 	.word	0x200003c0

08000c4c <HistoryOnOffUSI>:
// Запись в файл InfoSD.txt метки о включении питания
void HistoryOnOffUSI(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000c52:	af00      	add	r7, sp, #0
	FIL filInform;
	UINT bytesWroteInform;
	// Открываем или создаем новый файл
	fres = f_open(&filInform, "InfoSD.txt", FA_OPEN_APPEND | FA_WRITE);
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	2232      	movs	r2, #50	; 0x32
 8000c5a:	491d      	ldr	r1, [pc, #116]	; (8000cd0 <HistoryOnOffUSI+0x84>)
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f007 fcf5 	bl	800864c <f_open>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HistoryOnOffUSI+0x88>)
 8000c68:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <HistoryOnOffUSI+0x88>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <HistoryOnOffUSI+0x32>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2102      	movs	r1, #2
 8000c76:	4818      	ldr	r0, [pc, #96]	; (8000cd8 <HistoryOnOffUSI+0x8c>)
 8000c78:	f003 f882 	bl	8003d80 <HAL_GPIO_WritePin>
		while(1);
 8000c7c:	e7fe      	b.n	8000c7c <HistoryOnOffUSI+0x30>
	}
	//Записываем количество данных
	fres = f_write(&filInform, "Power On\n", 9, &bytesWroteInform);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	f107 0008 	add.w	r0, r7, #8
 8000c84:	2209      	movs	r2, #9
 8000c86:	4915      	ldr	r1, [pc, #84]	; (8000cdc <HistoryOnOffUSI+0x90>)
 8000c88:	f007 ffdd 	bl	8008c46 <f_write>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HistoryOnOffUSI+0x88>)
 8000c92:	701a      	strb	r2, [r3, #0]
	fres=f_close(&filInform);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f008 f9c7 	bl	800902c <f_close>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HistoryOnOffUSI+0x88>)
 8000ca4:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HistoryOnOffUSI+0x88>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <HistoryOnOffUSI+0x6e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <HistoryOnOffUSI+0x8c>)
 8000cb4:	f003 f864 	bl	8003d80 <HAL_GPIO_WritePin>
		while(1);
 8000cb8:	e7fe      	b.n	8000cb8 <HistoryOnOffUSI+0x6c>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <HistoryOnOffUSI+0x8c>)
 8000cc0:	f003 f85e 	bl	8003d80 <HAL_GPIO_WritePin>
}
 8000cc4:	bf00      	nop
 8000cc6:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	080091a8 	.word	0x080091a8
 8000cd4:	20000810 	.word	0x20000810
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	080091f4 	.word	0x080091f4

08000ce0 <SyncCKT>:
	}
	ResolveSDWrite=0; // закрываем доступ к записи на SD данных с ЦКТ
}
// Функция синхронизации Usartа с ЦКТ
void SyncCKT(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	// Синхронизация
	if(readFlag==1)
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <SyncCKT+0x2c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10d      	bne.n	8000d08 <SyncCKT+0x28>
	{
		readFlag=0;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <SyncCKT+0x2c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2);
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f002 f95a 	bl	8002fac <HAL_Delay>
		HAL_UART_Abort(&huart5);
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <SyncCKT+0x30>)
 8000cfa:	f004 ffdb 	bl	8005cb4 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5,BuffCkt, MaxBuffOfCKT);
 8000cfe:	222b      	movs	r2, #43	; 0x2b
 8000d00:	4904      	ldr	r1, [pc, #16]	; (8000d14 <SyncCKT+0x34>)
 8000d02:	4803      	ldr	r0, [pc, #12]	; (8000d10 <SyncCKT+0x30>)
 8000d04:	f004 ff56 	bl	8005bb4 <HAL_UART_Receive_DMA>
	}
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000716 	.word	0x20000716
 8000d10:	20000494 	.word	0x20000494
 8000d14:	20000410 	.word	0x20000410

08000d18 <CommandToRadio>:
// Функция передачи по радиоканалу
void CommandToRadio(uint8_t Comm)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	e00a      	b.n	8000d3e <CommandToRadio+0x26>
	{
		TX_RX_Radio[i+1]=BuffMidW[i+4];
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	1d1a      	adds	r2, r3, #4
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	491b      	ldr	r1, [pc, #108]	; (8000da0 <CommandToRadio+0x88>)
 8000d32:	5c89      	ldrb	r1, [r1, r2]
 8000d34:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <CommandToRadio+0x8c>)
 8000d36:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff-3;i++)
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	2b26      	cmp	r3, #38	; 0x26
 8000d42:	d9f1      	bls.n	8000d28 <CommandToRadio+0x10>
	}
	// заносим в 1 элемент 4 команду
	TX_RX_Radio[0]=Comm;
 8000d44:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <CommandToRadio+0x8c>)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	7013      	strb	r3, [r2, #0]
	// Отсылаем ответ
	Rf96_Lora_TX_mode();
 8000d4a:	f7ff fd5e 	bl	800080a <Rf96_Lora_TX_mode>
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 8000d4e:	2128      	movs	r1, #40	; 0x28
 8000d50:	4814      	ldr	r0, [pc, #80]	; (8000da4 <CommandToRadio+0x8c>)
 8000d52:	f7ff fda3 	bl	800089c <Crc16>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <CommandToRadio+0x90>)
 8000d5c:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <CommandToRadio+0x90>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <CommandToRadio+0x8c>)
 8000d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <CommandToRadio+0x90>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <CommandToRadio+0x8c>)
 8000d76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// Установка адреса TX в буфере FIFO
	Rf96_TX_FifoAdr(0x80);
 8000d7a:	2080      	movs	r0, #128	; 0x80
 8000d7c:	f7ff fcb2 	bl	80006e4 <Rf96_TX_FifoAdr>
	// Устанавливает указатель на адрес начала массива TX в FIFO
	Rf96_FIFO_point(0x80);
 8000d80:	2080      	movs	r0, #128	; 0x80
 8000d82:	f7ff fccb 	bl	800071c <Rf96_FIFO_point>
	// Очистка флагов
	Rf96_LoRaClearIrq();
 8000d86:	f7ff fbbd 	bl	8000504 <Rf96_LoRaClearIrq>
	// Отправка посылки
	Rf96_LoRaTxPacket((char*)TX_RX_Radio,RadioMaxBuff);
 8000d8a:	212a      	movs	r1, #42	; 0x2a
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <CommandToRadio+0x8c>)
 8000d8e:	f7ff fd74 	bl	800087a <Rf96_LoRaTxPacket>
	// следующее Прерывание будет по передаче
	ModeRadio=1;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <CommandToRadio+0x94>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000678 	.word	0x20000678
 8000da4:	200003e4 	.word	0x200003e4
 8000da8:	20000068 	.word	0x20000068
 8000dac:	2000006d 	.word	0x2000006d

08000db0 <RXCommande1>:
// Команда начала записи на SD карту
void RXCommande1(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	// Запрещаем запись на SD
	ResolveSDWrite=0;
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <RXCommande1+0xac>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
	// Запись в память номера файла, на котором мы находимся
	CountFileNow=ReadNumofFileSD();
 8000dba:	f7ff fde9 	bl	8000990 <ReadNumofFileSD>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <RXCommande1+0xb0>)
 8000dc4:	701a      	strb	r2, [r3, #0]
	if(CountFileNow>=9) CountFileNow=0;
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <RXCommande1+0xb0>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d902      	bls.n	8000dd4 <RXCommande1+0x24>
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <RXCommande1+0xb0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
	CountFileNow++;
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <RXCommande1+0xb0>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <RXCommande1+0xb0>)
 8000dde:	701a      	strb	r2, [r3, #0]
	WriteNumofFileSD(CountFileNow);
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <RXCommande1+0xb0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe75 	bl	8000ad4 <WriteNumofFileSD>
	//Записываем команду в историю
	CommandHistoryWrite(1);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f7ff fec6 	bl	8000b7c <CommandHistoryWrite>
	// создаем новый файл и сразу его закрываем
	fres = f_open(&fil, &(MassFileName[CountFileNow][0]), FA_CREATE_ALWAYS | FA_WRITE);
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <RXCommande1+0xb0>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <RXCommande1+0xb4>)
 8000e00:	4413      	add	r3, r2
 8000e02:	220a      	movs	r2, #10
 8000e04:	4619      	mov	r1, r3
 8000e06:	4818      	ldr	r0, [pc, #96]	; (8000e68 <RXCommande1+0xb8>)
 8000e08:	f007 fc20 	bl	800864c <f_open>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <RXCommande1+0xbc>)
 8000e12:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <RXCommande1+0xbc>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d005      	beq.n	8000e28 <RXCommande1+0x78>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <RXCommande1+0xc0>)
 8000e22:	f002 ffad 	bl	8003d80 <HAL_GPIO_WritePin>
		while(1);
 8000e26:	e7fe      	b.n	8000e26 <RXCommande1+0x76>
	}
	// Закрытие файла и sd карты
	fres=f_close(&fil);
 8000e28:	480f      	ldr	r0, [pc, #60]	; (8000e68 <RXCommande1+0xb8>)
 8000e2a:	f008 f8ff 	bl	800902c <f_close>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <RXCommande1+0xbc>)
 8000e34:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <RXCommande1+0xbc>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <RXCommande1+0x9a>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2102      	movs	r1, #2
 8000e42:	480b      	ldr	r0, [pc, #44]	; (8000e70 <RXCommande1+0xc0>)
 8000e44:	f002 ff9c 	bl	8003d80 <HAL_GPIO_WritePin>
		while(1);
 8000e48:	e7fe      	b.n	8000e48 <RXCommande1+0x98>
	}
	// Открываем доступ к записи на SD
	ResolveSDWrite=1;
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <RXCommande1+0xac>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
	// Отсылаем ответ
	CommandToRadio(1);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff ff61 	bl	8000d18 <CommandToRadio>
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000006a 	.word	0x2000006a
 8000e60:	2000006c 	.word	0x2000006c
 8000e64:	0800925c 	.word	0x0800925c
 8000e68:	20000814 	.word	0x20000814
 8000e6c:	20000810 	.word	0x20000810
 8000e70:	40020800 	.word	0x40020800

08000e74 <RXCommande2>:
// Команда включения клапаном
void RXCommande2(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <RXCommande2+0x20>)
 8000e80:	f002 ff7e 	bl	8003d80 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(2);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f7ff fe79 	bl	8000b7c <CommandHistoryWrite>
	// Отсылаем ответ
    CommandToRadio(2);
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f7ff ff44 	bl	8000d18 <CommandToRadio>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40020400 	.word	0x40020400

08000e98 <RXCommande3>:

// Команда включения двигателя
void RXCommande3(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	// Подаем единицу на двигатель
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea2:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <RXCommande3+0x48>)
 8000ea4:	f002 ff6c 	bl	8003d80 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(3);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f7ff fe67 	bl	8000b7c <CommandHistoryWrite>
    if(TX_RX_Radio[1]==0)
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <RXCommande3+0x4c>)
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d104      	bne.n	8000ec0 <RXCommande3+0x28>
    {
        // Запускаем задержку
        UserDelayStart(5000);
 8000eb6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000eba:	f7ff fd1b 	bl	80008f4 <UserDelayStart>
 8000ebe:	e009      	b.n	8000ed4 <RXCommande3+0x3c>
    } else
    {
    	// Запускаем задержку
    	UserDelayStart((uint32_t)(TX_RX_Radio[1]*1000));
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <RXCommande3+0x4c>)
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fb03 f302 	mul.w	r3, r3, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fd10 	bl	80008f4 <UserDelayStart>
    }
	// Отсылаем ответ
    CommandToRadio(3);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f7ff ff1f 	bl	8000d18 <CommandToRadio>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	200003e4 	.word	0x200003e4

08000ee8 <RXCommande4>:
// Команда - запрос на отправку данных
void RXCommande4(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	// Отсылаем ответ
	CommandToRadio(4);
 8000eec:	2004      	movs	r0, #4
 8000eee:	f7ff ff13 	bl	8000d18 <CommandToRadio>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <RXCommande5>:
// Команда начала закрытия файла на SD карте
void RXCommande5(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	// запрещаем запись на SD
	ResolveSDWrite=0;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <RXCommande5+0x1c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
    //Записываем команду в историю
    CommandHistoryWrite(5);
 8000f02:	2005      	movs	r0, #5
 8000f04:	f7ff fe3a 	bl	8000b7c <CommandHistoryWrite>
    // Отсылаем ответ
    CommandToRadio(5);
 8000f08:	2005      	movs	r0, #5
 8000f0a:	f7ff ff05 	bl	8000d18 <CommandToRadio>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000006a 	.word	0x2000006a

08000f18 <RXCommande6>:
// Команда закрытия клапана
void RXCommande6(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	// Подаем единицу на клапан
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <RXCommande6+0x20>)
 8000f24:	f002 ff2c 	bl	8003d80 <HAL_GPIO_WritePin>
    //Записываем команду в историю
    CommandHistoryWrite(6);
 8000f28:	2006      	movs	r0, #6
 8000f2a:	f7ff fe27 	bl	8000b7c <CommandHistoryWrite>
	// Отсылаем ответ
    CommandToRadio(6);
 8000f2e:	2006      	movs	r0, #6
 8000f30:	f7ff fef2 	bl	8000d18 <CommandToRadio>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40020400 	.word	0x40020400

08000f3c <DataConv>:
// Парсер
void DataConv(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	// Запись времени в буфер
	uint32_TO_charmass(reciveTime, SDbufWrite, 0, 8);
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <DataConv+0x60>)
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	2308      	movs	r3, #8
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4915      	ldr	r1, [pc, #84]	; (8000fa0 <DataConv+0x64>)
 8000f4c:	f7ff fce6 	bl	800091c <uint32_TO_charmass>
	for(uint8_t i=0;i<38;i++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	e017      	b.n	8000f86 <DataConv+0x4a>
	{
		uint32_TO_charmass(BuffMidW[i+4], SDbufWrite, 9+i*4, 3);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <DataConv+0x68>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	3309      	adds	r3, #9
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <DataConv+0x64>)
 8000f70:	f7ff fcd4 	bl	800091c <uint32_TO_charmass>
		SDbufWrite[8+i*4]=',';
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	3302      	adds	r3, #2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <DataConv+0x64>)
 8000f7c:	212c      	movs	r1, #44	; 0x2c
 8000f7e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<38;i++)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	3301      	adds	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b25      	cmp	r3, #37	; 0x25
 8000f8a:	d9e4      	bls.n	8000f56 <DataConv+0x1a>
	}
	SDbufWrite[160]='\n';
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <DataConv+0x64>)
 8000f8e:	220a      	movs	r2, #10
 8000f90:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000064 	.word	0x20000064
 8000fa0:	200005d4 	.word	0x200005d4
 8000fa4:	20000678 	.word	0x20000678

08000fa8 <CKTcrc>:
// Расчет CRC8 с ЦКТ
uint8_t CKTcrc(uint8_t* data, uint8_t len)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
	uint8_t sign=0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=4;i<len;i++)
 8000fb8:	2304      	movs	r3, #4
 8000fba:	73bb      	strb	r3, [r7, #14]
 8000fbc:	e018      	b.n	8000ff0 <CKTcrc+0x48>
	{
		sign+=data[i];
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	4413      	add	r3, r2
 8000fca:	73fb      	strb	r3, [r7, #15]
		if(sign & 0x80)
 8000fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	da07      	bge.n	8000fe4 <CKTcrc+0x3c>
		{
			sign=sign<<1;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
			sign|=0x01;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e002      	b.n	8000fea <CKTcrc+0x42>
		} else sign=sign<<1;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=4;i<len;i++)
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	3301      	adds	r3, #1
 8000fee:	73bb      	strb	r3, [r7, #14]
 8000ff0:	7bba      	ldrb	r2, [r7, #14]
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d3e2      	bcc.n	8000fbe <CKTcrc+0x16>
	}
	return sign;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f001 ff5c 	bl	8002ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f946 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 fba2 	bl	800175c <MX_GPIO_Init>
  MX_DMA_Init();
 8001018:	f000 fb5a 	bl	80016d0 <MX_DMA_Init>
  MX_SPI1_Init();
 800101c:	f000 f9b2 	bl	8001384 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001020:	f000 fb02 	bl	8001628 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001024:	f000 fb2a 	bl	800167c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001028:	f000 fad4 	bl	80015d4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800102c:	f005 fd22 	bl	8006a74 <MX_FATFS_Init>
  MX_SPI3_Init();
 8001030:	f000 f9de 	bl	80013f0 <MX_SPI3_Init>
  MX_UART5_Init();
 8001034:	f000 faa2 	bl	800157c <MX_UART5_Init>
  MX_TIM6_Init();
 8001038:	f000 fa10 	bl	800145c <MX_TIM6_Init>
  MX_TIM7_Init();
 800103c:	f000 fa44 	bl	80014c8 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001040:	f000 fa78 	bl	8001534 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	// Индикация включения УСИ ПРД
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2102      	movs	r1, #2
 8001048:	4881      	ldr	r0, [pc, #516]	; (8001250 <main+0x248>)
 800104a:	f002 fe99 	bl	8003d80 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800104e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001052:	f001 ffab 	bl	8002fac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2104      	movs	r1, #4
 800105a:	487d      	ldr	r0, [pc, #500]	; (8001250 <main+0x248>)
 800105c:	f002 fe90 	bl	8003d80 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001060:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001064:	f001 ffa2 	bl	8002fac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	2108      	movs	r1, #8
 800106c:	4878      	ldr	r0, [pc, #480]	; (8001250 <main+0x248>)
 800106e:	f002 fe87 	bl	8003d80 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001072:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001076:	f001 ff99 	bl	8002fac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2102      	movs	r1, #2
 800107e:	4874      	ldr	r0, [pc, #464]	; (8001250 <main+0x248>)
 8001080:	f002 fe7e 	bl	8003d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2104      	movs	r1, #4
 8001088:	4871      	ldr	r0, [pc, #452]	; (8001250 <main+0x248>)
 800108a:	f002 fe79 	bl	8003d80 <HAL_GPIO_WritePin>

    // Монтирование флешки
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800108e:	2201      	movs	r2, #1
 8001090:	4970      	ldr	r1, [pc, #448]	; (8001254 <main+0x24c>)
 8001092:	4871      	ldr	r0, [pc, #452]	; (8001258 <main+0x250>)
 8001094:	f007 fa94 	bl	80085c0 <f_mount>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b6f      	ldr	r3, [pc, #444]	; (800125c <main+0x254>)
 800109e:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 80010a0:	4b6e      	ldr	r3, [pc, #440]	; (800125c <main+0x254>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <main+0xac>
	{ // Если проблема с флешкой  выключаем 1 светодиод
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2102      	movs	r1, #2
 80010ac:	4868      	ldr	r0, [pc, #416]	; (8001250 <main+0x248>)
 80010ae:	f002 fe67 	bl	8003d80 <HAL_GPIO_WritePin>
		while(1);
 80010b2:	e7fe      	b.n	80010b2 <main+0xaa>
	}
	// Создание файла infoSD.txt
	ReadNumofFileSD();
 80010b4:	f7ff fc6c 	bl	8000990 <ReadNumofFileSD>
	// Запись в историю информацию о подаче питания
	HistoryOnOffUSI();
 80010b8:	f7ff fdc8 	bl	8000c4c <HistoryOnOffUSI>
	// Инициализация радиоканала (sx1272)
	Rf96_Lora_init();
 80010bc:	f7ff fb79 	bl	80007b2 <Rf96_Lora_init>
	// Режим приема
	Rf96_Lora_RX_mode();
 80010c0:	f7ff fbbe 	bl	8000840 <Rf96_Lora_RX_mode>
	// Запуск приема в дма с аксселерометров
	HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 80010c4:	222b      	movs	r2, #43	; 0x2b
 80010c6:	4966      	ldr	r1, [pc, #408]	; (8001260 <main+0x258>)
 80010c8:	4866      	ldr	r0, [pc, #408]	; (8001264 <main+0x25c>)
 80010ca:	f004 fd73 	bl	8005bb4 <HAL_UART_Receive_DMA>
    // Запуск таймера с целью определения подключения ЦКТ
    HAL_TIM_Base_Start_IT(&htim10);
 80010ce:	4866      	ldr	r0, [pc, #408]	; (8001268 <main+0x260>)
 80010d0:	f004 fa73 	bl	80055ba <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Синхронизация с ЦКТ
	    SyncCKT();
 80010d4:	f7ff fe04 	bl	8000ce0 <SyncCKT>
	    // Прерывание по приему по радиоканалу
		if(Get_NIRQ_Di0())
 80010d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010dc:	4863      	ldr	r0, [pc, #396]	; (800126c <main+0x264>)
 80010de:	f002 fe37 	bl	8003d50 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d055      	beq.n	8001194 <main+0x18c>
		{
			if(ModeRadio==0) // если прерывание по приему
 80010e8:	4b61      	ldr	r3, [pc, #388]	; (8001270 <main+0x268>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d144      	bne.n	800117a <main+0x172>
			{
            // Достаем посылку из буфера
			Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 80010f0:	4860      	ldr	r0, [pc, #384]	; (8001274 <main+0x26c>)
 80010f2:	f7ff fb41 	bl	8000778 <Rf96_DataRX_From_FiFO>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 80010f6:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <main+0x26c>)
 80010f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <main+0x26c>)
 8001104:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001108:	b29b      	uxth	r3, r3
 800110a:	4413      	add	r3, r2
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b5a      	ldr	r3, [pc, #360]	; (8001278 <main+0x270>)
 8001110:	801a      	strh	r2, [r3, #0]
			// Очистка флагов
			Rf96_LoRaClearIrq();
 8001112:	f7ff f9f7 	bl	8000504 <Rf96_LoRaClearIrq>
			// Если CRC совпадает
			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2))
 8001116:	2128      	movs	r1, #40	; 0x28
 8001118:	4856      	ldr	r0, [pc, #344]	; (8001274 <main+0x26c>)
 800111a:	f7ff fbbf 	bl	800089c <Crc16>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b55      	ldr	r3, [pc, #340]	; (8001278 <main+0x270>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d134      	bne.n	8001194 <main+0x18c>
			{
				switch(TX_RX_Radio[CommIndex])
 800112a:	4b52      	ldr	r3, [pc, #328]	; (8001274 <main+0x26c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3b01      	subs	r3, #1
 8001130:	2b05      	cmp	r3, #5
 8001132:	d82f      	bhi.n	8001194 <main+0x18c>
 8001134:	a201      	add	r2, pc, #4	; (adr r2, 800113c <main+0x134>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	08001155 	.word	0x08001155
 8001140:	0800115b 	.word	0x0800115b
 8001144:	08001161 	.word	0x08001161
 8001148:	08001167 	.word	0x08001167
 800114c:	0800116d 	.word	0x0800116d
 8001150:	08001173 	.word	0x08001173
				{
				case 1:   // Команда начала записи: Создаем файл
					RXCommande1();
 8001154:	f7ff fe2c 	bl	8000db0 <RXCommande1>
					break;
 8001158:	e01c      	b.n	8001194 <main+0x18c>
				case 2:   // Команда открытия клапана
					RXCommande2();
 800115a:	f7ff fe8b 	bl	8000e74 <RXCommande2>
					break;
 800115e:	e019      	b.n	8001194 <main+0x18c>
				case 3:   // Команда запуска двигателя
					RXCommande3();
 8001160:	f7ff fe9a 	bl	8000e98 <RXCommande3>
					break;
 8001164:	e016      	b.n	8001194 <main+0x18c>
				case 4:   // Команда запроса данных
					RXCommande4();
 8001166:	f7ff febf 	bl	8000ee8 <RXCommande4>
					break;
 800116a:	e013      	b.n	8001194 <main+0x18c>
				case 5:   // Команда закрытия файла на SD и запрет записи на SD
					RXCommande5();
 800116c:	f7ff fec4 	bl	8000ef8 <RXCommande5>
					break;
 8001170:	e010      	b.n	8001194 <main+0x18c>
				case 6:    // Команда закрытия клапана
					RXCommande6();
 8001172:	f7ff fed1 	bl	8000f18 <RXCommande6>
					break;
 8001176:	bf00      	nop
 8001178:	e00c      	b.n	8001194 <main+0x18c>
				}
			}
			} else if(ModeRadio==1) // если прерывание по передаче
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <main+0x268>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <main+0x18c>
			{
				ModeRadio=0;
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <main+0x268>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
				// Сбрасываем флаги
				Rf96_LoRaClearIrq();
 8001188:	f7ff f9bc 	bl	8000504 <Rf96_LoRaClearIrq>
	            // Заходим в Standby
				Rf96_Standby();
 800118c:	f7ff f9c2 	bl	8000514 <Rf96_Standby>
			    // Ожидаем команду
			    Rf96_Lora_RX_mode();
 8001190:	f7ff fb56 	bl	8000840 <Rf96_Lora_RX_mode>
			}
		}
		//  Если разрешена запись на Sd карту и если есть что записывать
		if(ResolveSDWrite==1 && ReadyToWrite==1)
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <main+0x274>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d149      	bne.n	8001230 <main+0x228>
 800119c:	4b38      	ldr	r3, [pc, #224]	; (8001280 <main+0x278>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d145      	bne.n	8001230 <main+0x228>
		{
			// Запись на SD
			DataConv();
 80011a4:	f7ff feca 	bl	8000f3c <DataConv>
			// создаем новый файл
			fres = f_open(&fil, &(MassFileName[CountFileNow][0]), FA_OPEN_APPEND | FA_WRITE);
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <main+0x27c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4a34      	ldr	r2, [pc, #208]	; (8001288 <main+0x280>)
 80011b8:	4413      	add	r3, r2
 80011ba:	2232      	movs	r2, #50	; 0x32
 80011bc:	4619      	mov	r1, r3
 80011be:	4833      	ldr	r0, [pc, #204]	; (800128c <main+0x284>)
 80011c0:	f007 fa44 	bl	800864c <f_open>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <main+0x254>)
 80011ca:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <main+0x254>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <main+0x1d8>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2102      	movs	r1, #2
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <main+0x248>)
 80011da:	f002 fdd1 	bl	8003d80 <HAL_GPIO_WritePin>
				while(1);
 80011de:	e7fe      	b.n	80011de <main+0x1d6>
			}
			fres = f_write(&fil, SDbufWrite, 161, &bytesWrote);
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <main+0x288>)
 80011e2:	22a1      	movs	r2, #161	; 0xa1
 80011e4:	492b      	ldr	r1, [pc, #172]	; (8001294 <main+0x28c>)
 80011e6:	4829      	ldr	r0, [pc, #164]	; (800128c <main+0x284>)
 80011e8:	f007 fd2d 	bl	8008c46 <f_write>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <main+0x254>)
 80011f2:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <main+0x254>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <main+0x200>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2102      	movs	r1, #2
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <main+0x248>)
 8001202:	f002 fdbd 	bl	8003d80 <HAL_GPIO_WritePin>
				while(1);
 8001206:	e7fe      	b.n	8001206 <main+0x1fe>
			}
			// Закрытие файла и sd карты
			fres=f_close(&fil);
 8001208:	4820      	ldr	r0, [pc, #128]	; (800128c <main+0x284>)
 800120a:	f007 ff0f 	bl	800902c <f_close>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <main+0x254>)
 8001214:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) // Если проблема с флешкой  выключаем 1 светодиод
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <main+0x254>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <main+0x222>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	2102      	movs	r1, #2
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <main+0x248>)
 8001224:	f002 fdac 	bl	8003d80 <HAL_GPIO_WritePin>
				while(1);
 8001228:	e7fe      	b.n	8001228 <main+0x220>
			}
            // Нечего записывать
			ReadyToWrite=0;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <main+0x278>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
		}
		// Окончание задержки
		if(Timeout==1)
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <main+0x290>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	f47f af4d 	bne.w	80010d4 <main+0xcc>
		{
			// Для 3 команды
			// Убираем единицу с двигателя
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001240:	4816      	ldr	r0, [pc, #88]	; (800129c <main+0x294>)
 8001242:	f002 fd9d 	bl	8003d80 <HAL_GPIO_WritePin>
			Timeout=0;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <main+0x290>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
	    SyncCKT();
 800124c:	e742      	b.n	80010d4 <main+0xcc>
 800124e:	bf00      	nop
 8001250:	40020800 	.word	0x40020800
 8001254:	08009200 	.word	0x08009200
 8001258:	20000150 	.word	0x20000150
 800125c:	20000810 	.word	0x20000810
 8001260:	20000410 	.word	0x20000410
 8001264:	20000494 	.word	0x20000494
 8001268:	20000380 	.word	0x20000380
 800126c:	40020000 	.word	0x40020000
 8001270:	2000006d 	.word	0x2000006d
 8001274:	200003e4 	.word	0x200003e4
 8001278:	20000068 	.word	0x20000068
 800127c:	2000006a 	.word	0x2000006a
 8001280:	2000006b 	.word	0x2000006b
 8001284:	2000006c 	.word	0x2000006c
 8001288:	0800925c 	.word	0x0800925c
 800128c:	20000814 	.word	0x20000814
 8001290:	200003e0 	.word	0x200003e0
 8001294:	200005d4 	.word	0x200005d4
 8001298:	20000075 	.word	0x20000075
 800129c:	40020400 	.word	0x40020400

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	; 0x50
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	2234      	movs	r2, #52	; 0x34
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 ff66 	bl	8009180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4b2c      	ldr	r3, [pc, #176]	; (800137c <SystemClock_Config+0xdc>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a2b      	ldr	r2, [pc, #172]	; (800137c <SystemClock_Config+0xdc>)
 80012ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b29      	ldr	r3, [pc, #164]	; (800137c <SystemClock_Config+0xdc>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e0:	2300      	movs	r3, #0
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <SystemClock_Config+0xe0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a25      	ldr	r2, [pc, #148]	; (8001380 <SystemClock_Config+0xe0>)
 80012ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <SystemClock_Config+0xe0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001300:	2301      	movs	r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001304:	2310      	movs	r3, #16
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001308:	2302      	movs	r3, #2
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800130c:	2300      	movs	r3, #0
 800130e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001310:	2308      	movs	r3, #8
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001314:	23b4      	movs	r3, #180	; 0xb4
 8001316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800131c:	2302      	movs	r3, #2
 800131e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001320:	2302      	movs	r3, #2
 8001322:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4618      	mov	r0, r3
 800132a:	f003 f84d 	bl	80043c8 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001334:	f000 fbbe 	bl	8001ab4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001338:	f002 fd3c 	bl	8003db4 <HAL_PWREx_EnableOverDrive>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001342:	f000 fbb7 	bl	8001ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001346:	230f      	movs	r3, #15
 8001348:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134a:	2302      	movs	r3, #2
 800134c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001352:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001356:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2105      	movs	r1, #5
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fd75 	bl	8003e54 <HAL_RCC_ClockConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001370:	f000 fba0 	bl	8001ab4 <Error_Handler>
  }
}
 8001374:	bf00      	nop
 8001376:	3750      	adds	r7, #80	; 0x50
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000

08001384 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_SPI1_Init+0x64>)
 800138a:	4a18      	ldr	r2, [pc, #96]	; (80013ec <MX_SPI1_Init+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_SPI1_Init+0x64>)
 8001390:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001394:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_SPI1_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013b8:	2210      	movs	r2, #16
 80013ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013d0:	220a      	movs	r2, #10
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_SPI1_Init+0x64>)
 80013d6:	f003 fa51 	bl	800487c <HAL_SPI_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013e0:	f000 fb68 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000718 	.word	0x20000718
 80013ec:	40013000 	.word	0x40013000

080013f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_SPI3_Init+0x64>)
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <MX_SPI3_Init+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_SPI3_Init+0x64>)
 80013fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001400:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_SPI3_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_SPI3_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_SPI3_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_SPI3_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_SPI3_Init+0x64>)
 800141c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001420:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_SPI3_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MX_SPI3_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_SPI3_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <MX_SPI3_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_SPI3_Init+0x64>)
 800143c:	220a      	movs	r2, #10
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_SPI3_Init+0x64>)
 8001442:	f003 fa1b 	bl	800487c <HAL_SPI_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800144c:	f000 fb32 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000043c 	.word	0x2000043c
 8001458:	40003c00 	.word	0x40003c00

0800145c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001462:	463b      	mov	r3, r7
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_TIM6_Init+0x64>)
 800146c:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <MX_TIM6_Init+0x68>)
 800146e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <MX_TIM6_Init+0x64>)
 8001472:	f242 3227 	movw	r2, #8999	; 0x2327
 8001476:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_TIM6_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_TIM6_Init+0x64>)
 8001480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001484:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_TIM6_Init+0x64>)
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <MX_TIM6_Init+0x64>)
 800148e:	f004 f869 	bl	8005564 <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001498:	f000 fb0c 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_TIM6_Init+0x64>)
 80014aa:	f004 faa5 	bl	80059f8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014b4:	f000 fafe 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200006a4 	.word	0x200006a4
 80014c4:	40001000 	.word	0x40001000

080014c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ce:	463b      	mov	r3, r7
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_TIM7_Init+0x64>)
 80014d8:	4a15      	ldr	r2, [pc, #84]	; (8001530 <MX_TIM7_Init+0x68>)
 80014da:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_TIM7_Init+0x64>)
 80014de:	f242 3227 	movw	r2, #8999	; 0x2327
 80014e2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_TIM7_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_TIM7_Init+0x64>)
 80014ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_TIM7_Init+0x64>)
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_TIM7_Init+0x64>)
 80014fa:	f004 f833 	bl	8005564 <HAL_TIM_Base_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001504:	f000 fad6 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_TIM7_Init+0x64>)
 8001516:	f004 fa6f 	bl	80059f8 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001520:	f000 fac8 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000a44 	.word	0x20000a44
 8001530:	40001400 	.word	0x40001400

08001534 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_TIM10_Init+0x40>)
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <MX_TIM10_Init+0x44>)
 800153c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9000-1;
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <MX_TIM10_Init+0x40>)
 8001540:	f242 3227 	movw	r2, #8999	; 0x2327
 8001544:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_TIM10_Init+0x40>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_TIM10_Init+0x40>)
 800154e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001552:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <MX_TIM10_Init+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_TIM10_Init+0x40>)
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_TIM10_Init+0x40>)
 8001562:	f003 ffff 	bl	8005564 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800156c:	f000 faa2 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000380 	.word	0x20000380
 8001578:	40014400 	.word	0x40014400

0800157c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_UART5_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <MX_UART5_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_UART5_Init+0x50>)
 8001588:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800158c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_UART5_Init+0x50>)
 8001590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001594:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <MX_UART5_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_UART5_Init+0x50>)
 800159e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_UART5_Init+0x50>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_UART5_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_UART5_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_UART5_Init+0x50>)
 80015b8:	f004 faae 	bl	8005b18 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 80015c2:	f000 fa77 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000494 	.word	0x20000494
 80015d0:	40005000 	.word	0x40005000

080015d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <MX_USART1_UART_Init+0x50>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015e0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80015e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_USART1_UART_Init+0x4c>)
 800160c:	f004 fa84 	bl	8005b18 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001616:	f000 fa4d 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000594 	.word	0x20000594
 8001624:	40011000 	.word	0x40011000

08001628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_USART2_UART_Init+0x4c>)
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <MX_USART2_UART_Init+0x50>)
 8001630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <MX_USART2_UART_Init+0x4c>)
 8001634:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_USART2_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_USART2_UART_Init+0x4c>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <MX_USART2_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_USART2_UART_Init+0x4c>)
 800164e:	220c      	movs	r2, #12
 8001650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <MX_USART2_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_USART2_UART_Init+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_USART2_UART_Init+0x4c>)
 8001660:	f004 fa5a 	bl	8005b18 <HAL_UART_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800166a:	f000 fa23 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000770 	.word	0x20000770
 8001678:	40004400 	.word	0x40004400

0800167c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_USART3_UART_Init+0x4c>)
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <MX_USART3_UART_Init+0x50>)
 8001684:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <MX_USART3_UART_Init+0x4c>)
 8001688:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800168c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_USART3_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_USART3_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_USART3_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_USART3_UART_Init+0x4c>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_USART3_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_USART3_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_USART3_UART_Init+0x4c>)
 80016b4:	f004 fa30 	bl	8005b18 <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016be:	f000 f9f9 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000110 	.word	0x20000110
 80016cc:	40004800 	.word	0x40004800

080016d0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <MX_DMA_Init+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <MX_DMA_Init+0x88>)
 80016e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_DMA_Init+0x88>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_DMA_Init+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <MX_DMA_Init+0x88>)
 80016fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_DMA_Init+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	200b      	movs	r0, #11
 8001714:	f001 fd47 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001718:	200b      	movs	r0, #11
 800171a:	f001 fd60 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	200c      	movs	r0, #12
 8001724:	f001 fd3f 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001728:	200c      	movs	r0, #12
 800172a:	f001 fd58 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2011      	movs	r0, #17
 8001734:	f001 fd37 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001738:	2011      	movs	r0, #17
 800173a:	f001 fd50 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	203a      	movs	r0, #58	; 0x3a
 8001744:	f001 fd2f 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001748:	203a      	movs	r0, #58	; 0x3a
 800174a:	f001 fd48 	bl	80031de <HAL_NVIC_EnableIRQ>

}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b67      	ldr	r3, [pc, #412]	; (8001914 <MX_GPIO_Init+0x1b8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a66      	ldr	r2, [pc, #408]	; (8001914 <MX_GPIO_Init+0x1b8>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b64      	ldr	r3, [pc, #400]	; (8001914 <MX_GPIO_Init+0x1b8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b60      	ldr	r3, [pc, #384]	; (8001914 <MX_GPIO_Init+0x1b8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a5f      	ldr	r2, [pc, #380]	; (8001914 <MX_GPIO_Init+0x1b8>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <MX_GPIO_Init+0x1b8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b59      	ldr	r3, [pc, #356]	; (8001914 <MX_GPIO_Init+0x1b8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a58      	ldr	r2, [pc, #352]	; (8001914 <MX_GPIO_Init+0x1b8>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b56      	ldr	r3, [pc, #344]	; (8001914 <MX_GPIO_Init+0x1b8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b52      	ldr	r3, [pc, #328]	; (8001914 <MX_GPIO_Init+0x1b8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a51      	ldr	r2, [pc, #324]	; (8001914 <MX_GPIO_Init+0x1b8>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b4f      	ldr	r3, [pc, #316]	; (8001914 <MX_GPIO_Init+0x1b8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	210e      	movs	r1, #14
 80017e6:	484c      	ldr	r0, [pc, #304]	; (8001918 <MX_GPIO_Init+0x1bc>)
 80017e8:	f002 faca 	bl	8003d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|acel3_Pin|acel3_3_Pin|SPI3_nss_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f248 0113 	movw	r1, #32787	; 0x8013
 80017f2:	484a      	ldr	r0, [pc, #296]	; (800191c <MX_GPIO_Init+0x1c0>)
 80017f4:	f002 fac4 	bl	8003d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|acel1_Pin|acel1_1_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80017fe:	4846      	ldr	r0, [pc, #280]	; (8001918 <MX_GPIO_Init+0x1bc>)
 8001800:	f002 fabe 	bl	8003d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|SSV_Pin|acel2_Pin|acel2_2_Pin 
 8001804:	2200      	movs	r2, #0
 8001806:	f24f 0142 	movw	r1, #61506	; 0xf042
 800180a:	4845      	ldr	r0, [pc, #276]	; (8001920 <MX_GPIO_Init+0x1c4>)
 800180c:	f002 fab8 	bl	8003d80 <HAL_GPIO_WritePin>
                          |Motor_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001816:	4b43      	ldr	r3, [pc, #268]	; (8001924 <MX_GPIO_Init+0x1c8>)
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	483c      	ldr	r0, [pc, #240]	; (8001918 <MX_GPIO_Init+0x1bc>)
 8001826:	f002 f901 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800182a:	230e      	movs	r3, #14
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4835      	ldr	r0, [pc, #212]	; (8001918 <MX_GPIO_Init+0x1bc>)
 8001842:	f002 f8f3 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 acel3_Pin acel3_3_Pin SPI3_nss_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|acel3_Pin|acel3_3_Pin|SPI3_nss_Pin;
 8001846:	f248 0313 	movw	r3, #32787	; 0x8013
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	482f      	ldr	r0, [pc, #188]	; (800191c <MX_GPIO_Init+0x1c0>)
 8001860:	f002 f8e4 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 acel1_Pin acel1_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|acel1_Pin|acel1_1_Pin;
 8001864:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4826      	ldr	r0, [pc, #152]	; (8001918 <MX_GPIO_Init+0x1bc>)
 800187e:	f002 f8d5 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001882:	2302      	movs	r3, #2
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188a:	2301      	movs	r3, #1
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4821      	ldr	r0, [pc, #132]	; (8001920 <MX_GPIO_Init+0x1c4>)
 800189a:	f002 f8c7 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SSV_Pin acel2_2_Pin Motor_Pin PB6 */
  GPIO_InitStruct.Pin = SSV_Pin|acel2_2_Pin|Motor_Pin|GPIO_PIN_6;
 800189e:	f24d 0340 	movw	r3, #53312	; 0xd040
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	481a      	ldr	r0, [pc, #104]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80018b8:	f002 f8b8 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : acel2_Pin */
  GPIO_InitStruct.Pin = acel2_Pin;
 80018bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(acel2_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4812      	ldr	r0, [pc, #72]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80018d6:	f002 f8a9 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	480b      	ldr	r0, [pc, #44]	; (800191c <MX_GPIO_Init+0x1c0>)
 80018f0:	f002 f89c 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018f4:	2338      	movs	r3, #56	; 0x38
 80018f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4806      	ldr	r0, [pc, #24]	; (8001920 <MX_GPIO_Init+0x1c4>)
 8001908:	f002 f890 	bl	8003a2c <HAL_GPIO_Init>

}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	40020800 	.word	0x40020800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	10210000 	.word	0x10210000

08001928 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// Обработчик прерываний Usartа по приему
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	if(huart==&huart5)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <HAL_UART_RxCpltCallback+0xc0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d152      	bne.n	80019de <HAL_UART_RxCpltCallback+0xb6>
	{
		// Остановка таймера, говорящая о том, что ЦКТ подключен
		HAL_TIM_Base_Stop_IT(&htim10);
 8001938:	482c      	ldr	r0, [pc, #176]	; (80019ec <HAL_UART_RxCpltCallback+0xc4>)
 800193a:	f003 fe62 	bl	8005602 <HAL_TIM_Base_Stop_IT>
		TIM10->CNT=0;
 800193e:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <HAL_UART_RxCpltCallback+0xc8>)
 8001940:	2200      	movs	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	; 0x24
        // Включение 2 светодиода, если ЦКТ подключен
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2104      	movs	r1, #4
 8001948:	482a      	ldr	r0, [pc, #168]	; (80019f4 <HAL_UART_RxCpltCallback+0xcc>)
 800194a:	f002 fa19 	bl	8003d80 <HAL_GPIO_WritePin>
		// Если данные синхронизированы
		if(BuffCkt[0]==0x7C && BuffCkt[1]==0x6E && BuffCkt[2]==0xA1 && BuffCkt[3]==0x2C )
 800194e:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <HAL_UART_RxCpltCallback+0xd0>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b7c      	cmp	r3, #124	; 0x7c
 8001954:	d13b      	bne.n	80019ce <HAL_UART_RxCpltCallback+0xa6>
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_UART_RxCpltCallback+0xd0>)
 8001958:	785b      	ldrb	r3, [r3, #1]
 800195a:	2b6e      	cmp	r3, #110	; 0x6e
 800195c:	d137      	bne.n	80019ce <HAL_UART_RxCpltCallback+0xa6>
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_UART_RxCpltCallback+0xd0>)
 8001960:	789b      	ldrb	r3, [r3, #2]
 8001962:	2ba1      	cmp	r3, #161	; 0xa1
 8001964:	d133      	bne.n	80019ce <HAL_UART_RxCpltCallback+0xa6>
 8001966:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_UART_RxCpltCallback+0xd0>)
 8001968:	78db      	ldrb	r3, [r3, #3]
 800196a:	2b2c      	cmp	r3, #44	; 0x2c
 800196c:	d12f      	bne.n	80019ce <HAL_UART_RxCpltCallback+0xa6>
		{
			if(CountCKT==CountOfWriteToSD)
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_UART_RxCpltCallback+0xd4>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b05      	cmp	r3, #5
 8001974:	d124      	bne.n	80019c0 <HAL_UART_RxCpltCallback+0x98>
			{
				CountCKT=0;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_UART_RxCpltCallback+0xd4>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
				// Готов к записи
				ReadyToWrite=1;
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_UART_RxCpltCallback+0xd8>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
				//  Время в мс, когда пришли данные
				reciveTime = HAL_GetTick();
 8001982:	f001 fb07 	bl	8002f94 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_UART_RxCpltCallback+0xdc>)
 800198a:	601a      	str	r2, [r3, #0]
				//Если CRC8 с ЦКТ совпадает
				if(BuffCkt[MaxBuffOfCKT-1]==CKTcrc(BuffCkt,MaxBuffOfCKT-1))
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_UART_RxCpltCallback+0xd0>)
 800198e:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 8001992:	212a      	movs	r1, #42	; 0x2a
 8001994:	4818      	ldr	r0, [pc, #96]	; (80019f8 <HAL_UART_RxCpltCallback+0xd0>)
 8001996:	f7ff fb07 	bl	8000fa8 <CKTcrc>
 800199a:	4603      	mov	r3, r0
 800199c:	429c      	cmp	r4, r3
 800199e:	d11a      	bne.n	80019d6 <HAL_UART_RxCpltCallback+0xae>
				{
					// Перезаписываем данные в массив посредник
					for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e008      	b.n	80019b8 <HAL_UART_RxCpltCallback+0x90>
					{
						BuffMidW[i]=BuffCkt[i];
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	4913      	ldr	r1, [pc, #76]	; (80019f8 <HAL_UART_RxCpltCallback+0xd0>)
 80019ac:	5c89      	ldrb	r1, [r1, r2]
 80019ae:	4a16      	ldr	r2, [pc, #88]	; (8001a08 <HAL_UART_RxCpltCallback+0xe0>)
 80019b0:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	3301      	adds	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b2a      	cmp	r3, #42	; 0x2a
 80019bc:	d9f3      	bls.n	80019a6 <HAL_UART_RxCpltCallback+0x7e>
			if(CountCKT==CountOfWriteToSD)
 80019be:	e00a      	b.n	80019d6 <HAL_UART_RxCpltCallback+0xae>
					}
				}
			} else CountCKT++;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_UART_RxCpltCallback+0xd4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_UART_RxCpltCallback+0xd4>)
 80019ca:	701a      	strb	r2, [r3, #0]
			if(CountCKT==CountOfWriteToSD)
 80019cc:	e003      	b.n	80019d6 <HAL_UART_RxCpltCallback+0xae>
		} else readFlag=1;  // Если данные не синхронизированы
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_UART_RxCpltCallback+0xe4>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	e000      	b.n	80019d8 <HAL_UART_RxCpltCallback+0xb0>
			if(CountCKT==CountOfWriteToSD)
 80019d6:	bf00      	nop
		// стартуем таймер для дальнейшей проверки на подключение ЦКТ
		HAL_TIM_Base_Start_IT(&htim10);
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <HAL_UART_RxCpltCallback+0xc4>)
 80019da:	f003 fdee 	bl	80055ba <HAL_TIM_Base_Start_IT>
	}
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd90      	pop	{r4, r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000494 	.word	0x20000494
 80019ec:	20000380 	.word	0x20000380
 80019f0:	40014400 	.word	0x40014400
 80019f4:	40020800 	.word	0x40020800
 80019f8:	20000410 	.word	0x20000410
 80019fc:	20000076 	.word	0x20000076
 8001a00:	2000006b 	.word	0x2000006b
 8001a04:	20000064 	.word	0x20000064
 8001a08:	20000678 	.word	0x20000678
 8001a0c:	20000716 	.word	0x20000716

08001a10 <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if(htim==&htim10)  // Если на ЦКТ ничего не пришло, выключаем 2 светодиод
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d112      	bne.n	8001a46 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		TIM10->CNT=0;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim10);
 8001a26:	480a      	ldr	r0, [pc, #40]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a28:	f003 fdc7 	bl	80055ba <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2104      	movs	r1, #4
 8001a30:	4809      	ldr	r0, [pc, #36]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a32:	f002 f9a5 	bl	8003d80 <HAL_GPIO_WritePin>
		HAL_UART_Abort(&huart5);
 8001a36:	4809      	ldr	r0, [pc, #36]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a38:	f004 f93c 	bl	8005cb4 <HAL_UART_Abort>
		HAL_UART_Receive_DMA(&huart5, BuffCkt, MaxBuffOfCKT);
 8001a3c:	222b      	movs	r2, #43	; 0x2b
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001a40:	4806      	ldr	r0, [pc, #24]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a42:	f004 f8b7 	bl	8005bb4 <HAL_UART_Receive_DMA>
	}
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000380 	.word	0x20000380
 8001a54:	40014400 	.word	0x40014400
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	20000494 	.word	0x20000494
 8001a60:	20000410 	.word	0x20000410

08001a64 <SysTick_Handler>:

// Прерывание по системному таймеру
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Delay_start==1)
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <SysTick_Handler+0x40>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d114      	bne.n	8001a9a <SysTick_Handler+0x36>
	{
		if(Ms_Delay<TimeDelay)
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <SysTick_Handler+0x44>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <SysTick_Handler+0x48>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d205      	bcs.n	8001a88 <SysTick_Handler+0x24>
		{
			Ms_Delay++;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <SysTick_Handler+0x44>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <SysTick_Handler+0x44>)
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e008      	b.n	8001a9a <SysTick_Handler+0x36>
		}
		else
		{
			// произошло прерывание
			Timeout=1;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <SysTick_Handler+0x4c>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
			Delay_start=0;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <SysTick_Handler+0x40>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Handler+0x44>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001a9a:	f001 fa67 	bl	8002f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000074 	.word	0x20000074
 8001aa8:	20000070 	.word	0x20000070
 8001aac:	20000020 	.word	0x20000020
 8001ab0:	20000075 	.word	0x20000075

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 8001ace:	1df9      	adds	r1, r7, #7
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <SPICmd8bit+0x20>)
 8001ad6:	f002 ff35 	bl	8004944 <HAL_SPI_Transmit>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000718 	.word	0x20000718

08001ae8 <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 8001af2:	1df9      	adds	r1, r7, #7
 8001af4:	230a      	movs	r3, #10
 8001af6:	2201      	movs	r2, #1
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <SPIRead8bit+0x20>)
 8001afa:	f003 f857 	bl	8004bac <HAL_SPI_Receive>

  return(RdPara);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000718 	.word	0x20000718

08001b0c <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 8001b16:	2200      	movs	r2, #0
 8001b18:	2140      	movs	r1, #64	; 0x40
 8001b1a:	480a      	ldr	r0, [pc, #40]	; (8001b44 <SPIRead+0x38>)
 8001b1c:	f002 f930 	bl	8003d80 <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ffce 	bl	8001ac4 <SPICmd8bit>
  tmp = SPIRead8bit();
 8001b28:	f7ff ffde 	bl	8001ae8 <SPIRead8bit>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 8001b30:	2201      	movs	r2, #1
 8001b32:	2140      	movs	r1, #64	; 0x40
 8001b34:	4803      	ldr	r0, [pc, #12]	; (8001b44 <SPIRead+0x38>)
 8001b36:	f002 f923 	bl	8003d80 <HAL_GPIO_WritePin>
  return(tmp);
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40020400 	.word	0x40020400

08001b48 <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460a      	mov	r2, r1
 8001b52:	71fb      	strb	r3, [r7, #7]
 8001b54:	4613      	mov	r3, r2
 8001b56:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2140      	movs	r1, #64	; 0x40
 8001b5c:	480b      	ldr	r0, [pc, #44]	; (8001b8c <SPIWrite+0x44>)
 8001b5e:	f002 f90f 	bl	8003d80 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ffaa 	bl	8001ac4 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001b70:	79bb      	ldrb	r3, [r7, #6]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ffa6 	bl	8001ac4 <SPICmd8bit>
	NSS_H();
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2140      	movs	r1, #64	; 0x40
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <SPIWrite+0x44>)
 8001b7e:	f002 f8ff 	bl	8003d80 <HAL_GPIO_WritePin>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40020400 	.word	0x40020400

08001b90 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d91f      	bls.n	8001be6 <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2140      	movs	r1, #64	; 0x40
 8001baa:	4811      	ldr	r0, [pc, #68]	; (8001bf0 <SPIBurstRead+0x60>)
 8001bac:	f002 f8e8 	bl	8003d80 <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff86 	bl	8001ac4 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	e009      	b.n	8001bd2 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	18d4      	adds	r4, r2, r3
 8001bc4:	f7ff ff90 	bl	8001ae8 <SPIRead8bit>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d3f1      	bcc.n	8001bbe <SPIBurstRead+0x2e>
      NSS_H();
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2140      	movs	r1, #64	; 0x40
 8001bde:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <SPIBurstRead+0x60>)
 8001be0:	f002 f8ce 	bl	8003d80 <HAL_GPIO_WritePin>
 8001be4:	e000      	b.n	8001be8 <SPIBurstRead+0x58>
    return;
 8001be6:	bf00      	nop
  }
}
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40020400 	.word	0x40020400

08001bf4 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	4613      	mov	r3, r2
 8001c02:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 8001c04:	79bb      	ldrb	r3, [r7, #6]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d922      	bls.n	8001c50 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2140      	movs	r1, #64	; 0x40
 8001c0e:	4812      	ldr	r0, [pc, #72]	; (8001c58 <BurstWrite+0x64>)
 8001c10:	f002 f8b6 	bl	8003d80 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff51 	bl	8001ac4 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	e009      	b.n	8001c3c <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff47 	bl	8001ac4 <SPICmd8bit>
    for(i=0;i<length;i++)
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	79bb      	ldrb	r3, [r7, #6]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d3f1      	bcc.n	8001c28 <BurstWrite+0x34>
    NSS_H();
 8001c44:	2201      	movs	r2, #1
 8001c46:	2140      	movs	r1, #64	; 0x40
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <BurstWrite+0x64>)
 8001c4a:	f002 f899 	bl	8003d80 <HAL_GPIO_WritePin>
 8001c4e:	e000      	b.n	8001c52 <BurstWrite+0x5e>
    return;
 8001c50:	bf00      	nop
  }
}
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40020400 	.word	0x40020400

08001c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a4e      	ldr	r2, [pc, #312]	; (8001e04 <HAL_SPI_MspInit+0x158>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12c      	bne.n	8001d28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a4c      	ldr	r2, [pc, #304]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d06:	23e0      	movs	r3, #224	; 0xe0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d16:	2305      	movs	r3, #5
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	4619      	mov	r1, r3
 8001d20:	483a      	ldr	r0, [pc, #232]	; (8001e0c <HAL_SPI_MspInit+0x160>)
 8001d22:	f001 fe83 	bl	8003a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d26:	e068      	b.n	8001dfa <HAL_SPI_MspInit+0x14e>
  else if(hspi->Instance==SPI3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_SPI_MspInit+0x164>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d163      	bne.n	8001dfa <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a33      	ldr	r2, [pc, #204]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a2c      	ldr	r2, [pc, #176]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_SPI_MspInit+0x15c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001d96:	2307      	movs	r3, #7
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481c      	ldr	r0, [pc, #112]	; (8001e14 <HAL_SPI_MspInit+0x168>)
 8001da2:	f001 fe43 	bl	8003a2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001db8:	2306      	movs	r3, #6
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4815      	ldr	r0, [pc, #84]	; (8001e18 <HAL_SPI_MspInit+0x16c>)
 8001dc4:	f001 fe32 	bl	8003a2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dda:	2306      	movs	r3, #6
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <HAL_SPI_MspInit+0x16c>)
 8001de6:	f001 fe21 	bl	8003a2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2033      	movs	r0, #51	; 0x33
 8001df0:	f001 f9d9 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001df4:	2033      	movs	r0, #51	; 0x33
 8001df6:	f001 f9f2 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3730      	adds	r7, #48	; 0x30
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40013000 	.word	0x40013000
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40003c00 	.word	0x40003c00
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800

08001e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d116      	bne.n	8001e5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e38:	f043 0310 	orr.w	r3, r3, #16
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2036      	movs	r0, #54	; 0x36
 8001e50:	f001 f9a9 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e54:	2036      	movs	r0, #54	; 0x36
 8001e56:	f001 f9c2 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001e5a:	e036      	b.n	8001eca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <HAL_TIM_Base_MspInit+0xc0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d116      	bne.n	8001e94 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e70:	f043 0320 	orr.w	r3, r3, #32
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	2037      	movs	r0, #55	; 0x37
 8001e88:	f001 f98d 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e8c:	2037      	movs	r0, #55	; 0x37
 8001e8e:	f001 f9a6 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 8001e92:	e01a      	b.n	8001eca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <HAL_TIM_Base_MspInit+0xc4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d115      	bne.n	8001eca <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_TIM_Base_MspInit+0xbc>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <HAL_TIM_Base_MspInit+0xbc>)
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_TIM_Base_MspInit+0xbc>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2019      	movs	r0, #25
 8001ec0:	f001 f971 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ec4:	2019      	movs	r0, #25
 8001ec6:	f001 f98a 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40001000 	.word	0x40001000
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40001400 	.word	0x40001400
 8001ee0:	40014400 	.word	0x40014400

08001ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b092      	sub	sp, #72	; 0x48
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a87      	ldr	r2, [pc, #540]	; (8002120 <HAL_UART_MspInit+0x23c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	f040 8083 	bne.w	800200e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f0c:	4b85      	ldr	r3, [pc, #532]	; (8002124 <HAL_UART_MspInit+0x240>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	4a84      	ldr	r2, [pc, #528]	; (8002124 <HAL_UART_MspInit+0x240>)
 8001f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f16:	6413      	str	r3, [r2, #64]	; 0x40
 8001f18:	4b82      	ldr	r3, [pc, #520]	; (8002124 <HAL_UART_MspInit+0x240>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f28:	4b7e      	ldr	r3, [pc, #504]	; (8002124 <HAL_UART_MspInit+0x240>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	4a7d      	ldr	r2, [pc, #500]	; (8002124 <HAL_UART_MspInit+0x240>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6313      	str	r3, [r2, #48]	; 0x30
 8001f34:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <HAL_UART_MspInit+0x240>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f44:	4b77      	ldr	r3, [pc, #476]	; (8002124 <HAL_UART_MspInit+0x240>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	4a76      	ldr	r2, [pc, #472]	; (8002124 <HAL_UART_MspInit+0x240>)
 8001f4a:	f043 0308 	orr.w	r3, r3, #8
 8001f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f50:	4b74      	ldr	r3, [pc, #464]	; (8002124 <HAL_UART_MspInit+0x240>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f6e:	2308      	movs	r3, #8
 8001f70:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f76:	4619      	mov	r1, r3
 8001f78:	486b      	ldr	r0, [pc, #428]	; (8002128 <HAL_UART_MspInit+0x244>)
 8001f7a:	f001 fd57 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f8e:	2308      	movs	r3, #8
 8001f90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f96:	4619      	mov	r1, r3
 8001f98:	4864      	ldr	r0, [pc, #400]	; (800212c <HAL_UART_MspInit+0x248>)
 8001f9a:	f001 fd47 	bl	8003a2c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001f9e:	4b64      	ldr	r3, [pc, #400]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001fa0:	4a64      	ldr	r2, [pc, #400]	; (8002134 <HAL_UART_MspInit+0x250>)
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001fa4:	4b62      	ldr	r3, [pc, #392]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001fa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001faa:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fac:	4b60      	ldr	r3, [pc, #384]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb8:	4b5d      	ldr	r3, [pc, #372]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fbe:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc0:	4b5b      	ldr	r3, [pc, #364]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc6:	4b5a      	ldr	r3, [pc, #360]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001fcc:	4b58      	ldr	r3, [pc, #352]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd4:	4b56      	ldr	r3, [pc, #344]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fda:	4b55      	ldr	r3, [pc, #340]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001fe0:	4853      	ldr	r0, [pc, #332]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001fe2:	f001 f917 	bl	8003214 <HAL_DMA_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001fec:	f7ff fd62 	bl	8001ab4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff6:	4a4e      	ldr	r2, [pc, #312]	; (8002130 <HAL_UART_MspInit+0x24c>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	2035      	movs	r0, #53	; 0x35
 8002002:	f001 f8d0 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002006:	2035      	movs	r0, #53	; 0x35
 8002008:	f001 f8e9 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800200c:	e18e      	b.n	800232c <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a49      	ldr	r2, [pc, #292]	; (8002138 <HAL_UART_MspInit+0x254>)
 8002014:	4293      	cmp	r3, r2
 8002016:	f040 8099 	bne.w	800214c <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART1_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_UART_MspInit+0x240>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a40      	ldr	r2, [pc, #256]	; (8002124 <HAL_UART_MspInit+0x240>)
 8002024:	f043 0310 	orr.w	r3, r3, #16
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_UART_MspInit+0x240>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
 800203a:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <HAL_UART_MspInit+0x240>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a39      	ldr	r2, [pc, #228]	; (8002124 <HAL_UART_MspInit+0x240>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b37      	ldr	r3, [pc, #220]	; (8002124 <HAL_UART_MspInit+0x240>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	623b      	str	r3, [r7, #32]
 8002050:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	4b33      	ldr	r3, [pc, #204]	; (8002124 <HAL_UART_MspInit+0x240>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a32      	ldr	r2, [pc, #200]	; (8002124 <HAL_UART_MspInit+0x240>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_UART_MspInit+0x240>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800206e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002080:	2307      	movs	r3, #7
 8002082:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002088:	4619      	mov	r1, r3
 800208a:	482c      	ldr	r0, [pc, #176]	; (800213c <HAL_UART_MspInit+0x258>)
 800208c:	f001 fcce 	bl	8003a2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209c:	2303      	movs	r3, #3
 800209e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020a0:	2307      	movs	r3, #7
 80020a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020a8:	4619      	mov	r1, r3
 80020aa:	4825      	ldr	r0, [pc, #148]	; (8002140 <HAL_UART_MspInit+0x25c>)
 80020ac:	f001 fcbe 	bl	8003a2c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80020b0:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_UART_MspInit+0x260>)
 80020b2:	4a25      	ldr	r2, [pc, #148]	; (8002148 <HAL_UART_MspInit+0x264>)
 80020b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_UART_MspInit+0x260>)
 80020b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_UART_MspInit+0x260>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_UART_MspInit+0x260>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_UART_MspInit+0x260>)
 80020cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <HAL_UART_MspInit+0x260>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <HAL_UART_MspInit+0x260>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_UART_MspInit+0x260>)
 80020e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_UART_MspInit+0x260>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_UART_MspInit+0x260>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020f2:	4814      	ldr	r0, [pc, #80]	; (8002144 <HAL_UART_MspInit+0x260>)
 80020f4:	f001 f88e 	bl	8003214 <HAL_DMA_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 80020fe:	f7ff fcd9 	bl	8001ab4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_UART_MspInit+0x260>)
 8002106:	635a      	str	r2, [r3, #52]	; 0x34
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_UART_MspInit+0x260>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	2025      	movs	r0, #37	; 0x25
 8002114:	f001 f847 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002118:	2025      	movs	r0, #37	; 0x25
 800211a:	f001 f860 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 800211e:	e105      	b.n	800232c <HAL_UART_MspInit+0x448>
 8002120:	40005000 	.word	0x40005000
 8002124:	40023800 	.word	0x40023800
 8002128:	40020800 	.word	0x40020800
 800212c:	40020c00 	.word	0x40020c00
 8002130:	200007b0 	.word	0x200007b0
 8002134:	40026010 	.word	0x40026010
 8002138:	40011000 	.word	0x40011000
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	200004d4 	.word	0x200004d4
 8002148:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a78      	ldr	r2, [pc, #480]	; (8002334 <HAL_UART_MspInit+0x450>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d162      	bne.n	800221c <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	4b77      	ldr	r3, [pc, #476]	; (8002338 <HAL_UART_MspInit+0x454>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a76      	ldr	r2, [pc, #472]	; (8002338 <HAL_UART_MspInit+0x454>)
 8002160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b74      	ldr	r3, [pc, #464]	; (8002338 <HAL_UART_MspInit+0x454>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	4b70      	ldr	r3, [pc, #448]	; (8002338 <HAL_UART_MspInit+0x454>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a6f      	ldr	r2, [pc, #444]	; (8002338 <HAL_UART_MspInit+0x454>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b6d      	ldr	r3, [pc, #436]	; (8002338 <HAL_UART_MspInit+0x454>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800218e:	230c      	movs	r3, #12
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219a:	2303      	movs	r3, #3
 800219c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800219e:	2307      	movs	r3, #7
 80021a0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021a6:	4619      	mov	r1, r3
 80021a8:	4864      	ldr	r0, [pc, #400]	; (800233c <HAL_UART_MspInit+0x458>)
 80021aa:	f001 fc3f 	bl	8003a2c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80021ae:	4b64      	ldr	r3, [pc, #400]	; (8002340 <HAL_UART_MspInit+0x45c>)
 80021b0:	4a64      	ldr	r2, [pc, #400]	; (8002344 <HAL_UART_MspInit+0x460>)
 80021b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80021b4:	4b62      	ldr	r3, [pc, #392]	; (8002340 <HAL_UART_MspInit+0x45c>)
 80021b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021bc:	4b60      	ldr	r3, [pc, #384]	; (8002340 <HAL_UART_MspInit+0x45c>)
 80021be:	2240      	movs	r2, #64	; 0x40
 80021c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c2:	4b5f      	ldr	r3, [pc, #380]	; (8002340 <HAL_UART_MspInit+0x45c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021c8:	4b5d      	ldr	r3, [pc, #372]	; (8002340 <HAL_UART_MspInit+0x45c>)
 80021ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d0:	4b5b      	ldr	r3, [pc, #364]	; (8002340 <HAL_UART_MspInit+0x45c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d6:	4b5a      	ldr	r3, [pc, #360]	; (8002340 <HAL_UART_MspInit+0x45c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021dc:	4b58      	ldr	r3, [pc, #352]	; (8002340 <HAL_UART_MspInit+0x45c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021e2:	4b57      	ldr	r3, [pc, #348]	; (8002340 <HAL_UART_MspInit+0x45c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e8:	4b55      	ldr	r3, [pc, #340]	; (8002340 <HAL_UART_MspInit+0x45c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021ee:	4854      	ldr	r0, [pc, #336]	; (8002340 <HAL_UART_MspInit+0x45c>)
 80021f0:	f001 f810 	bl	8003214 <HAL_DMA_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_UART_MspInit+0x31a>
      Error_Handler();
 80021fa:	f7ff fc5b 	bl	8001ab4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4f      	ldr	r2, [pc, #316]	; (8002340 <HAL_UART_MspInit+0x45c>)
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
 8002204:	4a4e      	ldr	r2, [pc, #312]	; (8002340 <HAL_UART_MspInit+0x45c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	2026      	movs	r0, #38	; 0x26
 8002210:	f000 ffc9 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002214:	2026      	movs	r0, #38	; 0x26
 8002216:	f000 ffe2 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 800221a:	e087      	b.n	800232c <HAL_UART_MspInit+0x448>
  else if(huart->Instance==USART3)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a49      	ldr	r2, [pc, #292]	; (8002348 <HAL_UART_MspInit+0x464>)
 8002222:	4293      	cmp	r3, r2
 8002224:	f040 8082 	bne.w	800232c <HAL_UART_MspInit+0x448>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	4b42      	ldr	r3, [pc, #264]	; (8002338 <HAL_UART_MspInit+0x454>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a41      	ldr	r2, [pc, #260]	; (8002338 <HAL_UART_MspInit+0x454>)
 8002232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
 8002238:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_UART_MspInit+0x454>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <HAL_UART_MspInit+0x454>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4a3a      	ldr	r2, [pc, #232]	; (8002338 <HAL_UART_MspInit+0x454>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6313      	str	r3, [r2, #48]	; 0x30
 8002254:	4b38      	ldr	r3, [pc, #224]	; (8002338 <HAL_UART_MspInit+0x454>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	4b34      	ldr	r3, [pc, #208]	; (8002338 <HAL_UART_MspInit+0x454>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	4a33      	ldr	r2, [pc, #204]	; (8002338 <HAL_UART_MspInit+0x454>)
 800226a:	f043 0302 	orr.w	r3, r3, #2
 800226e:	6313      	str	r3, [r2, #48]	; 0x30
 8002270:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_UART_MspInit+0x454>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800227c:	2320      	movs	r3, #32
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002288:	2303      	movs	r3, #3
 800228a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800228c:	2307      	movs	r3, #7
 800228e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002294:	4619      	mov	r1, r3
 8002296:	482d      	ldr	r0, [pc, #180]	; (800234c <HAL_UART_MspInit+0x468>)
 8002298:	f001 fbc8 	bl	8003a2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800229c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022ae:	2307      	movs	r3, #7
 80022b0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022b6:	4619      	mov	r1, r3
 80022b8:	4825      	ldr	r0, [pc, #148]	; (8002350 <HAL_UART_MspInit+0x46c>)
 80022ba:	f001 fbb7 	bl	8003a2c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80022be:	4b25      	ldr	r3, [pc, #148]	; (8002354 <HAL_UART_MspInit+0x470>)
 80022c0:	4a25      	ldr	r2, [pc, #148]	; (8002358 <HAL_UART_MspInit+0x474>)
 80022c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80022c4:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_UART_MspInit+0x470>)
 80022c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_UART_MspInit+0x470>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_UART_MspInit+0x470>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022d8:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <HAL_UART_MspInit+0x470>)
 80022da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022de:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <HAL_UART_MspInit+0x470>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_UART_MspInit+0x470>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_UART_MspInit+0x470>)
 80022ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_UART_MspInit+0x470>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022fa:	4b16      	ldr	r3, [pc, #88]	; (8002354 <HAL_UART_MspInit+0x470>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002300:	4814      	ldr	r0, [pc, #80]	; (8002354 <HAL_UART_MspInit+0x470>)
 8002302:	f000 ff87 	bl	8003214 <HAL_DMA_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 800230c:	f7ff fbd2 	bl	8001ab4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a10      	ldr	r2, [pc, #64]	; (8002354 <HAL_UART_MspInit+0x470>)
 8002314:	635a      	str	r2, [r3, #52]	; 0x34
 8002316:	4a0f      	ldr	r2, [pc, #60]	; (8002354 <HAL_UART_MspInit+0x470>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	2027      	movs	r0, #39	; 0x27
 8002322:	f000 ff40 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002326:	2027      	movs	r0, #39	; 0x27
 8002328:	f000 ff59 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 800232c:	bf00      	nop
 800232e:	3748      	adds	r7, #72	; 0x48
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40004400 	.word	0x40004400
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000
 8002340:	20000534 	.word	0x20000534
 8002344:	400260a0 	.word	0x400260a0
 8002348:	40004800 	.word	0x40004800
 800234c:	40020800 	.word	0x40020800
 8002350:	40020400 	.word	0x40020400
 8002354:	200000ac 	.word	0x200000ac
 8002358:	40026028 	.word	0x40026028

0800235c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236e:	e7fe      	b.n	800236e <HardFault_Handler+0x4>

08002370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <MemManage_Handler+0x4>

08002376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237a:	e7fe      	b.n	800237a <BusFault_Handler+0x4>

0800237c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <UsageFault_Handler+0x4>

08002382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA1_Stream0_IRQHandler+0x10>)
 80023b2:	f001 f8c7 	bl	8003544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200007b0 	.word	0x200007b0

080023c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <DMA1_Stream1_IRQHandler+0x10>)
 80023c6:	f001 f8bd 	bl	8003544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200000ac 	.word	0x200000ac

080023d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <DMA1_Stream6_IRQHandler+0x10>)
 80023da:	f001 f8b3 	bl	8003544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000534 	.word	0x20000534

080023e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80023ee:	f003 f933 	bl	8005658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000380 	.word	0x20000380

080023fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <USART1_IRQHandler+0x10>)
 8002402:	f003 fcd9 	bl	8005db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000594 	.word	0x20000594

08002410 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <USART2_IRQHandler+0x10>)
 8002416:	f003 fccf 	bl	8005db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000770 	.word	0x20000770

08002424 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <USART3_IRQHandler+0x10>)
 800242a:	f003 fcc5 	bl	8005db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000110 	.word	0x20000110

08002438 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <SPI3_IRQHandler+0x10>)
 800243e:	f002 fe61 	bl	8005104 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	2000043c 	.word	0x2000043c

0800244c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <UART5_IRQHandler+0x10>)
 8002452:	f003 fcb1 	bl	8005db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000494 	.word	0x20000494

08002460 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <TIM6_DAC_IRQHandler+0x10>)
 8002466:	f003 f8f7 	bl	8005658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200006a4 	.word	0x200006a4

08002474 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <TIM7_IRQHandler+0x10>)
 800247a:	f003 f8ed 	bl	8005658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000a44 	.word	0x20000a44

08002488 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <DMA2_Stream2_IRQHandler+0x10>)
 800248e:	f001 f859 	bl	8003544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200004d4 	.word	0x200004d4

0800249c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <SystemInit+0x28>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	4a07      	ldr	r2, [pc, #28]	; (80024c4 <SystemInit+0x28>)
 80024a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <SystemInit+0x28>)
 80024b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024b6:	609a      	str	r2, [r3, #8]
#endif
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80024d0:	f000 fd60 	bl	8002f94 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SPI_Timer_On+0x20>)
 80024d8:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <SPI_Timer_On+0x24>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000a84 	.word	0x20000a84
 80024ec:	20000a88 	.word	0x20000a88

080024f0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80024f4:	f000 fd4e 	bl	8002f94 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <SPI_Timer_Status+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1ad2      	subs	r2, r2, r3
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SPI_Timer_Status+0x28>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	bf34      	ite	cc
 8002508:	2301      	movcc	r3, #1
 800250a:	2300      	movcs	r3, #0
 800250c:	b2db      	uxtb	r3, r3
}
 800250e:	4618      	mov	r0, r3
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000a84 	.word	0x20000a84
 8002518:	20000a88 	.word	0x20000a88

0800251c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af02      	add	r7, sp, #8
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;

    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 8002526:	f107 020f 	add.w	r2, r7, #15
 800252a:	1df9      	adds	r1, r7, #7
 800252c:	2332      	movs	r3, #50	; 0x32
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2301      	movs	r3, #1
 8002532:	4804      	ldr	r0, [pc, #16]	; (8002544 <xchg_spi+0x28>)
 8002534:	f002 fc43 	bl	8004dbe <HAL_SPI_TransmitReceive>
    return rxDat;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2000043c 	.word	0x2000043c

08002548 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e00a      	b.n	800256e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	18d4      	adds	r4, r2, r3
 800255e:	20ff      	movs	r0, #255	; 0xff
 8002560:	f7ff ffdc 	bl	800251c <xchg_spi>
 8002564:	4603      	mov	r3, r0
 8002566:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	3301      	adds	r3, #1
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d3f0      	bcc.n	8002558 <rcvr_spi_multi+0x10>
	}
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bd90      	pop	{r4, r7, pc}

0800257e <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	e009      	b.n	80025a2 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ffc0 	bl	800251c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3f1      	bcc.n	800258e <xmit_spi_multi+0x10>
	}
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80025ba:	f000 fceb 	bl	8002f94 <HAL_GetTick>
 80025be:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80025c4:	20ff      	movs	r0, #255	; 0xff
 80025c6:	f7ff ffa9 	bl	800251c <xchg_spi>
 80025ca:	4603      	mov	r3, r0
 80025cc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	2bff      	cmp	r3, #255	; 0xff
 80025d2:	d007      	beq.n	80025e4 <wait_ready+0x32>
 80025d4:	f000 fcde 	bl	8002f94 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d8ef      	bhi.n	80025c4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2bff      	cmp	r3, #255	; 0xff
 80025e8:	bf0c      	ite	eq
 80025ea:	2301      	moveq	r3, #1
 80025ec:	2300      	movne	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80025fc:	2201      	movs	r2, #1
 80025fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002602:	4804      	ldr	r0, [pc, #16]	; (8002614 <despiselect+0x1c>)
 8002604:	f001 fbbc 	bl	8003d80 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002608:	20ff      	movs	r0, #255	; 0xff
 800260a:	f7ff ff87 	bl	800251c <xchg_spi>

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40020000 	.word	0x40020000

08002618 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800261c:	2200      	movs	r2, #0
 800261e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002622:	480a      	ldr	r0, [pc, #40]	; (800264c <spiselect+0x34>)
 8002624:	f001 fbac 	bl	8003d80 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002628:	20ff      	movs	r0, #255	; 0xff
 800262a:	f7ff ff77 	bl	800251c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800262e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002632:	f7ff ffbe 	bl	80025b2 <wait_ready>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <spiselect+0x28>
 800263c:	2301      	movs	r3, #1
 800263e:	e002      	b.n	8002646 <spiselect+0x2e>

	despiselect();
 8002640:	f7ff ffda 	bl	80025f8 <despiselect>
	return 0;	/* Timeout */
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40020000 	.word	0x40020000

08002650 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800265a:	20c8      	movs	r0, #200	; 0xc8
 800265c:	f7ff ff34 	bl	80024c8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002660:	20ff      	movs	r0, #255	; 0xff
 8002662:	f7ff ff5b 	bl	800251c <xchg_spi>
 8002666:	4603      	mov	r3, r0
 8002668:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	2bff      	cmp	r3, #255	; 0xff
 800266e:	d104      	bne.n	800267a <rcvr_datablock+0x2a>
 8002670:	f7ff ff3e 	bl	80024f0 <SPI_Timer_Status>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f2      	bne.n	8002660 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2bfe      	cmp	r3, #254	; 0xfe
 800267e:	d001      	beq.n	8002684 <rcvr_datablock+0x34>
 8002680:	2300      	movs	r3, #0
 8002682:	e00a      	b.n	800269a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ff5e 	bl	8002548 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800268c:	20ff      	movs	r0, #255	; 0xff
 800268e:	f7ff ff45 	bl	800251c <xchg_spi>
 8002692:	20ff      	movs	r0, #255	; 0xff
 8002694:	f7ff ff42 	bl	800251c <xchg_spi>

	return 1;						/* Function succeeded */
 8002698:	2301      	movs	r3, #1
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80026ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026b2:	f7ff ff7e 	bl	80025b2 <wait_ready>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <xmit_datablock+0x1e>
 80026bc:	2300      	movs	r3, #0
 80026be:	e01e      	b.n	80026fe <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff2a 	bl	800251c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	2bfd      	cmp	r3, #253	; 0xfd
 80026cc:	d016      	beq.n	80026fc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80026ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ff53 	bl	800257e <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80026d8:	20ff      	movs	r0, #255	; 0xff
 80026da:	f7ff ff1f 	bl	800251c <xchg_spi>
 80026de:	20ff      	movs	r0, #255	; 0xff
 80026e0:	f7ff ff1c 	bl	800251c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80026e4:	20ff      	movs	r0, #255	; 0xff
 80026e6:	f7ff ff19 	bl	800251c <xchg_spi>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d001      	beq.n	80026fc <xmit_datablock+0x5a>
 80026f8:	2300      	movs	r3, #0
 80026fa:	e000      	b.n	80026fe <xmit_datablock+0x5c>
	}
	return 1;
 80026fc:	2301      	movs	r3, #1
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	6039      	str	r1, [r7, #0]
 8002710:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	da0e      	bge.n	8002738 <send_cmd+0x32>
		cmd &= 0x7F;
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002720:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002722:	2100      	movs	r1, #0
 8002724:	2037      	movs	r0, #55	; 0x37
 8002726:	f7ff ffee 	bl	8002706 <send_cmd>
 800272a:	4603      	mov	r3, r0
 800272c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800272e:	7bbb      	ldrb	r3, [r7, #14]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d901      	bls.n	8002738 <send_cmd+0x32>
 8002734:	7bbb      	ldrb	r3, [r7, #14]
 8002736:	e051      	b.n	80027dc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d008      	beq.n	8002750 <send_cmd+0x4a>
		despiselect();
 800273e:	f7ff ff5b 	bl	80025f8 <despiselect>
		if (!spiselect()) return 0xFF;
 8002742:	f7ff ff69 	bl	8002618 <spiselect>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <send_cmd+0x4a>
 800274c:	23ff      	movs	r3, #255	; 0xff
 800274e:	e045      	b.n	80027dc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002756:	b2db      	uxtb	r3, r3
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fedf 	bl	800251c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	0e1b      	lsrs	r3, r3, #24
 8002762:	b2db      	uxtb	r3, r3
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fed9 	bl	800251c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	b2db      	uxtb	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fed3 	bl	800251c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fecd 	bl	800251c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fec8 	bl	800251c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <send_cmd+0x94>
 8002796:	2395      	movs	r3, #149	; 0x95
 8002798:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d101      	bne.n	80027a4 <send_cmd+0x9e>
 80027a0:	2387      	movs	r3, #135	; 0x87
 80027a2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff feb8 	bl	800251c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d102      	bne.n	80027b8 <send_cmd+0xb2>
 80027b2:	20ff      	movs	r0, #255	; 0xff
 80027b4:	f7ff feb2 	bl	800251c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80027b8:	230a      	movs	r3, #10
 80027ba:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80027bc:	20ff      	movs	r0, #255	; 0xff
 80027be:	f7ff fead 	bl	800251c <xchg_spi>
 80027c2:	4603      	mov	r3, r0
 80027c4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80027c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	da05      	bge.n	80027da <send_cmd+0xd4>
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <send_cmd+0xb6>

	return res;							/* Return received response */
 80027da:	7bbb      	ldrb	r3, [r7, #14]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <USER_SPI_initialize+0x14>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cb      	b.n	8002990 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80027f8:	4b67      	ldr	r3, [pc, #412]	; (8002998 <USER_SPI_initialize+0x1b4>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <USER_SPI_initialize+0x2a>
 8002806:	4b64      	ldr	r3, [pc, #400]	; (8002998 <USER_SPI_initialize+0x1b4>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	e0c0      	b.n	8002990 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <USER_SPI_initialize+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002816:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002818:	230a      	movs	r3, #10
 800281a:	73fb      	strb	r3, [r7, #15]
 800281c:	e005      	b.n	800282a <USER_SPI_initialize+0x46>
 800281e:	20ff      	movs	r0, #255	; 0xff
 8002820:	f7ff fe7c 	bl	800251c <xchg_spi>
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	3b01      	subs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f6      	bne.n	800281e <USER_SPI_initialize+0x3a>

	ty = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002834:	2100      	movs	r1, #0
 8002836:	2000      	movs	r0, #0
 8002838:	f7ff ff65 	bl	8002706 <send_cmd>
 800283c:	4603      	mov	r3, r0
 800283e:	2b01      	cmp	r3, #1
 8002840:	f040 808b 	bne.w	800295a <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002848:	f7ff fe3e 	bl	80024c8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800284c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002850:	2008      	movs	r0, #8
 8002852:	f7ff ff58 	bl	8002706 <send_cmd>
 8002856:	4603      	mov	r3, r0
 8002858:	2b01      	cmp	r3, #1
 800285a:	d151      	bne.n	8002900 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e00d      	b.n	800287e <USER_SPI_initialize+0x9a>
 8002862:	7bfc      	ldrb	r4, [r7, #15]
 8002864:	20ff      	movs	r0, #255	; 0xff
 8002866:	f7ff fe59 	bl	800251c <xchg_spi>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	f107 0310 	add.w	r3, r7, #16
 8002872:	4423      	add	r3, r4
 8002874:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	3301      	adds	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d9ee      	bls.n	8002862 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002884:	7abb      	ldrb	r3, [r7, #10]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d167      	bne.n	800295a <USER_SPI_initialize+0x176>
 800288a:	7afb      	ldrb	r3, [r7, #11]
 800288c:	2baa      	cmp	r3, #170	; 0xaa
 800288e:	d164      	bne.n	800295a <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002890:	bf00      	nop
 8002892:	f7ff fe2d 	bl	80024f0 <SPI_Timer_Status>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <USER_SPI_initialize+0xc8>
 800289c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028a0:	20a9      	movs	r0, #169	; 0xa9
 80028a2:	f7ff ff30 	bl	8002706 <send_cmd>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f2      	bne.n	8002892 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80028ac:	f7ff fe20 	bl	80024f0 <SPI_Timer_Status>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d051      	beq.n	800295a <USER_SPI_initialize+0x176>
 80028b6:	2100      	movs	r1, #0
 80028b8:	203a      	movs	r0, #58	; 0x3a
 80028ba:	f7ff ff24 	bl	8002706 <send_cmd>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d14a      	bne.n	800295a <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
 80028c8:	e00d      	b.n	80028e6 <USER_SPI_initialize+0x102>
 80028ca:	7bfc      	ldrb	r4, [r7, #15]
 80028cc:	20ff      	movs	r0, #255	; 0xff
 80028ce:	f7ff fe25 	bl	800251c <xchg_spi>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	f107 0310 	add.w	r3, r7, #16
 80028da:	4423      	add	r3, r4
 80028dc:	f803 2c08 	strb.w	r2, [r3, #-8]
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	3301      	adds	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d9ee      	bls.n	80028ca <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80028ec:	7a3b      	ldrb	r3, [r7, #8]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <USER_SPI_initialize+0x116>
 80028f6:	230c      	movs	r3, #12
 80028f8:	e000      	b.n	80028fc <USER_SPI_initialize+0x118>
 80028fa:	2304      	movs	r3, #4
 80028fc:	737b      	strb	r3, [r7, #13]
 80028fe:	e02c      	b.n	800295a <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002900:	2100      	movs	r1, #0
 8002902:	20a9      	movs	r0, #169	; 0xa9
 8002904:	f7ff feff 	bl	8002706 <send_cmd>
 8002908:	4603      	mov	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d804      	bhi.n	8002918 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800290e:	2302      	movs	r3, #2
 8002910:	737b      	strb	r3, [r7, #13]
 8002912:	23a9      	movs	r3, #169	; 0xa9
 8002914:	73bb      	strb	r3, [r7, #14]
 8002916:	e003      	b.n	8002920 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002918:	2301      	movs	r3, #1
 800291a:	737b      	strb	r3, [r7, #13]
 800291c:	2301      	movs	r3, #1
 800291e:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002920:	bf00      	nop
 8002922:	f7ff fde5 	bl	80024f0 <SPI_Timer_Status>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <USER_SPI_initialize+0x158>
 800292c:	7bbb      	ldrb	r3, [r7, #14]
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fee8 	bl	8002706 <send_cmd>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f2      	bne.n	8002922 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800293c:	f7ff fdd8 	bl	80024f0 <SPI_Timer_Status>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d007      	beq.n	8002956 <USER_SPI_initialize+0x172>
 8002946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800294a:	2010      	movs	r0, #16
 800294c:	f7ff fedb 	bl	8002706 <send_cmd>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <USER_SPI_initialize+0x176>
				ty = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 800295a:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <USER_SPI_initialize+0x1bc>)
 800295c:	7b7b      	ldrb	r3, [r7, #13]
 800295e:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002960:	f7ff fe4a 	bl	80025f8 <despiselect>

	if (ty) {			/* OK */
 8002964:	7b7b      	ldrb	r3, [r7, #13]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <USER_SPI_initialize+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2210      	movs	r2, #16
 8002970:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <USER_SPI_initialize+0x1b4>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <USER_SPI_initialize+0x1b4>)
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e002      	b.n	800298a <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <USER_SPI_initialize+0x1b4>)
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800298a:	4b03      	ldr	r3, [pc, #12]	; (8002998 <USER_SPI_initialize+0x1b4>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	b2db      	uxtb	r3, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bd90      	pop	{r4, r7, pc}
 8002998:	20000028 	.word	0x20000028
 800299c:	2000043c 	.word	0x2000043c
 80029a0:	20000077 	.word	0x20000077

080029a4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <USER_SPI_status+0x14>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e002      	b.n	80029be <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <USER_SPI_status+0x28>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	b2db      	uxtb	r3, r3
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000028 	.word	0x20000028

080029d0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4603      	mov	r3, r0
 80029de:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <USER_SPI_read+0x1c>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <USER_SPI_read+0x20>
 80029ec:	2304      	movs	r3, #4
 80029ee:	e04d      	b.n	8002a8c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80029f0:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <USER_SPI_read+0xc4>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <USER_SPI_read+0x32>
 80029fe:	2303      	movs	r3, #3
 8002a00:	e044      	b.n	8002a8c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002a02:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <USER_SPI_read+0xc8>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <USER_SPI_read+0x44>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	025b      	lsls	r3, r3, #9
 8002a12:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d111      	bne.n	8002a3e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	2011      	movs	r0, #17
 8002a1e:	f7ff fe72 	bl	8002706 <send_cmd>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d129      	bne.n	8002a7c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a2c:	68b8      	ldr	r0, [r7, #8]
 8002a2e:	f7ff fe0f 	bl	8002650 <rcvr_datablock>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d021      	beq.n	8002a7c <USER_SPI_read+0xac>
			count = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	e01e      	b.n	8002a7c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	2012      	movs	r0, #18
 8002a42:	f7ff fe60 	bl	8002706 <send_cmd>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d117      	bne.n	8002a7c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a50:	68b8      	ldr	r0, [r7, #8]
 8002a52:	f7ff fdfd 	bl	8002650 <rcvr_datablock>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <USER_SPI_read+0xa2>
				buff += 512;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ed      	bne.n	8002a4c <USER_SPI_read+0x7c>
 8002a70:	e000      	b.n	8002a74 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002a72:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002a74:	2100      	movs	r1, #0
 8002a76:	200c      	movs	r0, #12
 8002a78:	f7ff fe45 	bl	8002706 <send_cmd>
		}
	}
	despiselect();
 8002a7c:	f7ff fdbc 	bl	80025f8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf14      	ite	ne
 8002a86:	2301      	movne	r3, #1
 8002a88:	2300      	moveq	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000028 	.word	0x20000028
 8002a98:	20000077 	.word	0x20000077

08002a9c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <USER_SPI_write+0x1c>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <USER_SPI_write+0x20>
 8002ab8:	2304      	movs	r3, #4
 8002aba:	e063      	b.n	8002b84 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002abc:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <USER_SPI_write+0xf0>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <USER_SPI_write+0x32>
 8002aca:	2303      	movs	r3, #3
 8002acc:	e05a      	b.n	8002b84 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <USER_SPI_write+0xf0>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <USER_SPI_write+0x44>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e051      	b.n	8002b84 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <USER_SPI_write+0xf4>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <USER_SPI_write+0x56>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	025b      	lsls	r3, r3, #9
 8002af0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d110      	bne.n	8002b1a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	2018      	movs	r0, #24
 8002afc:	f7ff fe03 	bl	8002706 <send_cmd>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d136      	bne.n	8002b74 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002b06:	21fe      	movs	r1, #254	; 0xfe
 8002b08:	68b8      	ldr	r0, [r7, #8]
 8002b0a:	f7ff fdca 	bl	80026a2 <xmit_datablock>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d02f      	beq.n	8002b74 <USER_SPI_write+0xd8>
			count = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	e02c      	b.n	8002b74 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <USER_SPI_write+0xf4>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f003 0306 	and.w	r3, r3, #6
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <USER_SPI_write+0x92>
 8002b26:	6839      	ldr	r1, [r7, #0]
 8002b28:	2097      	movs	r0, #151	; 0x97
 8002b2a:	f7ff fdec 	bl	8002706 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	2019      	movs	r0, #25
 8002b32:	f7ff fde8 	bl	8002706 <send_cmd>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11b      	bne.n	8002b74 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b3c:	21fc      	movs	r1, #252	; 0xfc
 8002b3e:	68b8      	ldr	r0, [r7, #8]
 8002b40:	f7ff fdaf 	bl	80026a2 <xmit_datablock>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <USER_SPI_write+0xc4>
				buff += 512;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b50:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ee      	bne.n	8002b3c <USER_SPI_write+0xa0>
 8002b5e:	e000      	b.n	8002b62 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b60:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002b62:	21fd      	movs	r1, #253	; 0xfd
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7ff fd9c 	bl	80026a2 <xmit_datablock>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <USER_SPI_write+0xd8>
 8002b70:	2301      	movs	r3, #1
 8002b72:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002b74:	f7ff fd40 	bl	80025f8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000028 	.word	0x20000028
 8002b90:	20000077 	.word	0x20000077

08002b94 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	603a      	str	r2, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <USER_SPI_ioctl+0x1a>
 8002baa:	2304      	movs	r3, #4
 8002bac:	e15a      	b.n	8002e64 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002bae:	4baf      	ldr	r3, [pc, #700]	; (8002e6c <USER_SPI_ioctl+0x2d8>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <USER_SPI_ioctl+0x2c>
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e151      	b.n	8002e64 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002bc6:	79bb      	ldrb	r3, [r7, #6]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	f200 8136 	bhi.w	8002e3a <USER_SPI_ioctl+0x2a6>
 8002bce:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <USER_SPI_ioctl+0x40>)
 8002bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd4:	08002be9 	.word	0x08002be9
 8002bd8:	08002bfd 	.word	0x08002bfd
 8002bdc:	08002e3b 	.word	0x08002e3b
 8002be0:	08002ca9 	.word	0x08002ca9
 8002be4:	08002d9f 	.word	0x08002d9f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002be8:	f7ff fd16 	bl	8002618 <spiselect>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8127 	beq.w	8002e42 <USER_SPI_ioctl+0x2ae>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002bfa:	e122      	b.n	8002e42 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	2009      	movs	r0, #9
 8002c00:	f7ff fd81 	bl	8002706 <send_cmd>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 811d 	bne.w	8002e46 <USER_SPI_ioctl+0x2b2>
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	2110      	movs	r1, #16
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fd1c 	bl	8002650 <rcvr_datablock>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8113 	beq.w	8002e46 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002c20:	7b3b      	ldrb	r3, [r7, #12]
 8002c22:	099b      	lsrs	r3, r3, #6
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d111      	bne.n	8002c4e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002c2a:	7d7b      	ldrb	r3, [r7, #21]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	7d3b      	ldrb	r3, [r7, #20]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	4413      	add	r3, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002c3e:	4413      	add	r3, r2
 8002c40:	3301      	adds	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	029a      	lsls	r2, r3, #10
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e028      	b.n	8002ca0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002c4e:	7c7b      	ldrb	r3, [r7, #17]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	7dbb      	ldrb	r3, [r7, #22]
 8002c58:	09db      	lsrs	r3, r3, #7
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	7d7b      	ldrb	r3, [r7, #21]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f003 0306 	and.w	r3, r3, #6
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3302      	adds	r3, #2
 8002c72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002c76:	7d3b      	ldrb	r3, [r7, #20]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	7cfb      	ldrb	r3, [r7, #19]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	441a      	add	r2, r3
 8002c84:	7cbb      	ldrb	r3, [r7, #18]
 8002c86:	029b      	lsls	r3, r3, #10
 8002c88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3301      	adds	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002c92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c96:	3b09      	subs	r3, #9
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002ca6:	e0ce      	b.n	8002e46 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002ca8:	4b71      	ldr	r3, [pc, #452]	; (8002e70 <USER_SPI_ioctl+0x2dc>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d031      	beq.n	8002d18 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	208d      	movs	r0, #141	; 0x8d
 8002cb8:	f7ff fd25 	bl	8002706 <send_cmd>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 80c3 	bne.w	8002e4a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002cc4:	20ff      	movs	r0, #255	; 0xff
 8002cc6:	f7ff fc29 	bl	800251c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002cca:	f107 030c 	add.w	r3, r7, #12
 8002cce:	2110      	movs	r1, #16
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fcbd 	bl	8002650 <rcvr_datablock>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80b6 	beq.w	8002e4a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002cde:	2330      	movs	r3, #48	; 0x30
 8002ce0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002ce4:	e007      	b.n	8002cf6 <USER_SPI_ioctl+0x162>
 8002ce6:	20ff      	movs	r0, #255	; 0xff
 8002ce8:	f7ff fc18 	bl	800251c <xchg_spi>
 8002cec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002cf6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f3      	bne.n	8002ce6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002cfe:	7dbb      	ldrb	r3, [r7, #22]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	2310      	movs	r3, #16
 8002d08:	fa03 f202 	lsl.w	r2, r3, r2
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002d16:	e098      	b.n	8002e4a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2009      	movs	r0, #9
 8002d1c:	f7ff fcf3 	bl	8002706 <send_cmd>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f040 8091 	bne.w	8002e4a <USER_SPI_ioctl+0x2b6>
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	2110      	movs	r1, #16
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fc8e 	bl	8002650 <rcvr_datablock>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8087 	beq.w	8002e4a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <USER_SPI_ioctl+0x2dc>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d012      	beq.n	8002d6e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002d48:	7dbb      	ldrb	r3, [r7, #22]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002d50:	7dfa      	ldrb	r2, [r7, #23]
 8002d52:	09d2      	lsrs	r2, r2, #7
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	4413      	add	r3, r2
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	7e7b      	ldrb	r3, [r7, #25]
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e013      	b.n	8002d96 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002d6e:	7dbb      	ldrb	r3, [r7, #22]
 8002d70:	109b      	asrs	r3, r3, #2
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	3301      	adds	r3, #1
 8002d7a:	7dfa      	ldrb	r2, [r7, #23]
 8002d7c:	00d2      	lsls	r2, r2, #3
 8002d7e:	f002 0218 	and.w	r2, r2, #24
 8002d82:	7df9      	ldrb	r1, [r7, #23]
 8002d84:	0949      	lsrs	r1, r1, #5
 8002d86:	b2c9      	uxtb	r1, r1
 8002d88:	440a      	add	r2, r1
 8002d8a:	3201      	adds	r2, #1
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002d9c:	e055      	b.n	8002e4a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002d9e:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <USER_SPI_ioctl+0x2dc>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	f003 0306 	and.w	r3, r3, #6
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d051      	beq.n	8002e4e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002daa:	f107 020c 	add.w	r2, r7, #12
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	210b      	movs	r1, #11
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff feee 	bl	8002b94 <USER_SPI_ioctl>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d149      	bne.n	8002e52 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002dbe:	7b3b      	ldrb	r3, [r7, #12]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d104      	bne.n	8002dd2 <USER_SPI_ioctl+0x23e>
 8002dc8:	7dbb      	ldrb	r3, [r7, #22]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d041      	beq.n	8002e56 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	623b      	str	r3, [r7, #32]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <USER_SPI_ioctl+0x2dc>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	025b      	lsls	r3, r3, #9
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	025b      	lsls	r3, r3, #9
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dfc:	2020      	movs	r0, #32
 8002dfe:	f7ff fc82 	bl	8002706 <send_cmd>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d128      	bne.n	8002e5a <USER_SPI_ioctl+0x2c6>
 8002e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0a:	2021      	movs	r0, #33	; 0x21
 8002e0c:	f7ff fc7b 	bl	8002706 <send_cmd>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d121      	bne.n	8002e5a <USER_SPI_ioctl+0x2c6>
 8002e16:	2100      	movs	r1, #0
 8002e18:	2026      	movs	r0, #38	; 0x26
 8002e1a:	f7ff fc74 	bl	8002706 <send_cmd>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d11a      	bne.n	8002e5a <USER_SPI_ioctl+0x2c6>
 8002e24:	f247 5030 	movw	r0, #30000	; 0x7530
 8002e28:	f7ff fbc3 	bl	80025b2 <wait_ready>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d013      	beq.n	8002e5a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002e38:	e00f      	b.n	8002e5a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002e40:	e00c      	b.n	8002e5c <USER_SPI_ioctl+0x2c8>
		break;
 8002e42:	bf00      	nop
 8002e44:	e00a      	b.n	8002e5c <USER_SPI_ioctl+0x2c8>
		break;
 8002e46:	bf00      	nop
 8002e48:	e008      	b.n	8002e5c <USER_SPI_ioctl+0x2c8>
		break;
 8002e4a:	bf00      	nop
 8002e4c:	e006      	b.n	8002e5c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002e4e:	bf00      	nop
 8002e50:	e004      	b.n	8002e5c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002e52:	bf00      	nop
 8002e54:	e002      	b.n	8002e5c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <USER_SPI_ioctl+0x2c8>
		break;
 8002e5a:	bf00      	nop
	}

	despiselect();
 8002e5c:	f7ff fbcc 	bl	80025f8 <despiselect>

	return res;
 8002e60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3730      	adds	r7, #48	; 0x30
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000028 	.word	0x20000028
 8002e70:	20000077 	.word	0x20000077

08002e74 <Reset_Handler>:
 8002e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eac <LoopFillZerobss+0x14>
 8002e78:	2100      	movs	r1, #0
 8002e7a:	e003      	b.n	8002e84 <LoopCopyDataInit>

08002e7c <CopyDataInit>:
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <LoopFillZerobss+0x18>)
 8002e7e:	585b      	ldr	r3, [r3, r1]
 8002e80:	5043      	str	r3, [r0, r1]
 8002e82:	3104      	adds	r1, #4

08002e84 <LoopCopyDataInit>:
 8002e84:	480b      	ldr	r0, [pc, #44]	; (8002eb4 <LoopFillZerobss+0x1c>)
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <LoopFillZerobss+0x20>)
 8002e88:	1842      	adds	r2, r0, r1
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d3f6      	bcc.n	8002e7c <CopyDataInit>
 8002e8e:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <LoopFillZerobss+0x24>)
 8002e90:	e002      	b.n	8002e98 <LoopFillZerobss>

08002e92 <FillZerobss>:
 8002e92:	2300      	movs	r3, #0
 8002e94:	f842 3b04 	str.w	r3, [r2], #4

08002e98 <LoopFillZerobss>:
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <LoopFillZerobss+0x28>)
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d3f9      	bcc.n	8002e92 <FillZerobss>
 8002e9e:	f7ff fafd 	bl	800249c <SystemInit>
 8002ea2:	f006 f949 	bl	8009138 <__libc_init_array>
 8002ea6:	f7fe f8af 	bl	8001008 <main>
 8002eaa:	4770      	bx	lr
 8002eac:	20020000 	.word	0x20020000
 8002eb0:	08009570 	.word	0x08009570
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20000048 	.word	0x20000048
 8002ebc:	20000048 	.word	0x20000048
 8002ec0:	20000ef8 	.word	0x20000ef8

08002ec4 <ADC_IRQHandler>:
 8002ec4:	e7fe      	b.n	8002ec4 <ADC_IRQHandler>
	...

08002ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_Init+0x40>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <HAL_Init+0x40>)
 8002ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_Init+0x40>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <HAL_Init+0x40>)
 8002ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a07      	ldr	r2, [pc, #28]	; (8002f08 <HAL_Init+0x40>)
 8002eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef0:	2003      	movs	r0, #3
 8002ef2:	f000 f94d 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f000 f808 	bl	8002f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002efc:	f7fe feae 	bl	8001c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023c00 	.word	0x40023c00

08002f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_InitTick+0x54>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_InitTick+0x58>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f965 	bl	80031fa <HAL_SYSTICK_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e00e      	b.n	8002f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b0f      	cmp	r3, #15
 8002f3e:	d80a      	bhi.n	8002f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f40:	2200      	movs	r2, #0
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f48:	f000 f92d 	bl	80031a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f4c:	4a06      	ldr	r2, [pc, #24]	; (8002f68 <HAL_InitTick+0x5c>)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000024 	.word	0x20000024
 8002f64:	20000030 	.word	0x20000030
 8002f68:	2000002c 	.word	0x2000002c

08002f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_IncTick+0x20>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_IncTick+0x24>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <HAL_IncTick+0x24>)
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000030 	.word	0x20000030
 8002f90:	20000a8c 	.word	0x20000a8c

08002f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return uwTick;
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <HAL_GetTick+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000a8c 	.word	0x20000a8c

08002fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff ffee 	bl	8002f94 <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc4:	d005      	beq.n	8002fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_Delay+0x40>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fd2:	bf00      	nop
 8002fd4:	f7ff ffde 	bl	8002f94 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d8f7      	bhi.n	8002fd4 <HAL_Delay+0x28>
  {
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000030 	.word	0x20000030

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	; (800308c <__NVIC_EnableIRQ+0x38>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff29 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff3e 	bl	8003038 <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff31 	bl	8003054 <__NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffa2 	bl	800314c <SysTick_Config>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003220:	f7ff feb8 	bl	8002f94 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e099      	b.n	8003364 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003250:	e00f      	b.n	8003272 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003252:	f7ff fe9f 	bl	8002f94 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b05      	cmp	r3, #5
 800325e:	d908      	bls.n	8003272 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e078      	b.n	8003364 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e8      	bne.n	8003252 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4b38      	ldr	r3, [pc, #224]	; (800336c <HAL_DMA_Init+0x158>)
 800328c:	4013      	ands	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800329e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d107      	bne.n	80032dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	4313      	orrs	r3, r2
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0307 	bic.w	r3, r3, #7
 80032f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2b04      	cmp	r3, #4
 8003304:	d117      	bne.n	8003336 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fb0d 	bl	8003938 <DMA_CheckFifoParam>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2240      	movs	r2, #64	; 0x40
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003332:	2301      	movs	r3, #1
 8003334:	e016      	b.n	8003364 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fac4 	bl	80038cc <DMA_CalcBaseAndBitshift>
 8003344:	4603      	mov	r3, r0
 8003346:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	223f      	movs	r2, #63	; 0x3f
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	f010803f 	.word	0xf010803f

08003370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_DMA_Start_IT+0x26>
 8003392:	2302      	movs	r3, #2
 8003394:	e040      	b.n	8003418 <HAL_DMA_Start_IT+0xa8>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d12f      	bne.n	800340a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fa56 	bl	8003870 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	223f      	movs	r2, #63	; 0x3f
 80033ca:	409a      	lsls	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0216 	orr.w	r2, r2, #22
 80033de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0208 	orr.w	r2, r2, #8
 80033f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e005      	b.n	8003416 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003412:	2302      	movs	r3, #2
 8003414:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003416:	7dfb      	ldrb	r3, [r7, #23]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800342e:	f7ff fdb1 	bl	8002f94 <HAL_GetTick>
 8003432:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d008      	beq.n	8003452 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2280      	movs	r2, #128	; 0x80
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e052      	b.n	80034f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0216 	bic.w	r2, r2, #22
 8003460:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003470:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <HAL_DMA_Abort+0x62>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0208 	bic.w	r2, r2, #8
 8003490:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0201 	bic.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034a2:	e013      	b.n	80034cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034a4:	f7ff fd76 	bl	8002f94 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d90c      	bls.n	80034cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2203      	movs	r2, #3
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e015      	b.n	80034f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e4      	bne.n	80034a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	223f      	movs	r2, #63	; 0x3f
 80034e0:	409a      	lsls	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d004      	beq.n	800351e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e00c      	b.n	8003538 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2205      	movs	r2, #5
 8003522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003550:	4b92      	ldr	r3, [pc, #584]	; (800379c <HAL_DMA_IRQHandler+0x258>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a92      	ldr	r2, [pc, #584]	; (80037a0 <HAL_DMA_IRQHandler+0x25c>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	0a9b      	lsrs	r3, r3, #10
 800355c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	2208      	movs	r2, #8
 8003570:	409a      	lsls	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01a      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0204 	bic.w	r2, r2, #4
 8003596:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	2208      	movs	r2, #8
 800359e:	409a      	lsls	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	f043 0201 	orr.w	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	2201      	movs	r2, #1
 80035b6:	409a      	lsls	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d012      	beq.n	80035e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d2:	2201      	movs	r2, #1
 80035d4:	409a      	lsls	r2, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f043 0202 	orr.w	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ea:	2204      	movs	r2, #4
 80035ec:	409a      	lsls	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	2204      	movs	r2, #4
 800360a:	409a      	lsls	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	f043 0204 	orr.w	r2, r3, #4
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003620:	2210      	movs	r2, #16
 8003622:	409a      	lsls	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d043      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d03c      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	2210      	movs	r2, #16
 8003640:	409a      	lsls	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d018      	beq.n	8003686 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d108      	bne.n	8003674 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d024      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
 8003672:	e01f      	b.n	80036b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
 8003684:	e016      	b.n	80036b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d107      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0208 	bic.w	r2, r2, #8
 80036a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	2220      	movs	r2, #32
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 808e 	beq.w	80037e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8086 	beq.w	80037e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	2220      	movs	r2, #32
 80036dc:	409a      	lsls	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b05      	cmp	r3, #5
 80036ec:	d136      	bne.n	800375c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0216 	bic.w	r2, r2, #22
 80036fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800370c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <HAL_DMA_IRQHandler+0x1da>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0208 	bic.w	r2, r2, #8
 800372c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003732:	223f      	movs	r2, #63	; 0x3f
 8003734:	409a      	lsls	r2, r3
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374e:	2b00      	cmp	r3, #0
 8003750:	d07d      	beq.n	800384e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
        }
        return;
 800375a:	e078      	b.n	800384e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01c      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d108      	bne.n	800378a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377c:	2b00      	cmp	r3, #0
 800377e:	d030      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4798      	blx	r3
 8003788:	e02b      	b.n	80037e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	2b00      	cmp	r3, #0
 8003790:	d027      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	4798      	blx	r3
 800379a:	e022      	b.n	80037e2 <HAL_DMA_IRQHandler+0x29e>
 800379c:	20000024 	.word	0x20000024
 80037a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10f      	bne.n	80037d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0210 	bic.w	r2, r2, #16
 80037c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d032      	beq.n	8003850 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d022      	beq.n	800383c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2205      	movs	r2, #5
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3301      	adds	r3, #1
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	429a      	cmp	r2, r3
 8003818:	d307      	bcc.n	800382a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f2      	bne.n	800380e <HAL_DMA_IRQHandler+0x2ca>
 8003828:	e000      	b.n	800382c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800382a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
 800384c:	e000      	b.n	8003850 <HAL_DMA_IRQHandler+0x30c>
        return;
 800384e:	bf00      	nop
    }
  }
}
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop

08003858 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800388c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b40      	cmp	r3, #64	; 0x40
 800389c:	d108      	bne.n	80038b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038ae:	e007      	b.n	80038c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	3b10      	subs	r3, #16
 80038dc:	4a14      	ldr	r2, [pc, #80]	; (8003930 <DMA_CalcBaseAndBitshift+0x64>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038e6:	4a13      	ldr	r2, [pc, #76]	; (8003934 <DMA_CalcBaseAndBitshift+0x68>)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d909      	bls.n	800390e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	1d1a      	adds	r2, r3, #4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	659a      	str	r2, [r3, #88]	; 0x58
 800390c:	e007      	b.n	800391e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	aaaaaaab 	.word	0xaaaaaaab
 8003934:	080094d8 	.word	0x080094d8

08003938 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d11f      	bne.n	8003992 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d855      	bhi.n	8003a04 <DMA_CheckFifoParam+0xcc>
 8003958:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <DMA_CheckFifoParam+0x28>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003971 	.word	0x08003971
 8003964:	08003983 	.word	0x08003983
 8003968:	08003971 	.word	0x08003971
 800396c:	08003a05 	.word	0x08003a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d045      	beq.n	8003a08 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003980:	e042      	b.n	8003a08 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800398a:	d13f      	bne.n	8003a0c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003990:	e03c      	b.n	8003a0c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399a:	d121      	bne.n	80039e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d836      	bhi.n	8003a10 <DMA_CheckFifoParam+0xd8>
 80039a2:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <DMA_CheckFifoParam+0x70>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	080039b9 	.word	0x080039b9
 80039ac:	080039bf 	.word	0x080039bf
 80039b0:	080039b9 	.word	0x080039b9
 80039b4:	080039d1 	.word	0x080039d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      break;
 80039bc:	e02f      	b.n	8003a1e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d024      	beq.n	8003a14 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ce:	e021      	b.n	8003a14 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039d8:	d11e      	bne.n	8003a18 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039de:	e01b      	b.n	8003a18 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d902      	bls.n	80039ec <DMA_CheckFifoParam+0xb4>
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d003      	beq.n	80039f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039ea:	e018      	b.n	8003a1e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
      break;
 80039f0:	e015      	b.n	8003a1e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00e      	beq.n	8003a1c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
      break;
 8003a02:	e00b      	b.n	8003a1c <DMA_CheckFifoParam+0xe4>
      break;
 8003a04:	bf00      	nop
 8003a06:	e00a      	b.n	8003a1e <DMA_CheckFifoParam+0xe6>
      break;
 8003a08:	bf00      	nop
 8003a0a:	e008      	b.n	8003a1e <DMA_CheckFifoParam+0xe6>
      break;
 8003a0c:	bf00      	nop
 8003a0e:	e006      	b.n	8003a1e <DMA_CheckFifoParam+0xe6>
      break;
 8003a10:	bf00      	nop
 8003a12:	e004      	b.n	8003a1e <DMA_CheckFifoParam+0xe6>
      break;
 8003a14:	bf00      	nop
 8003a16:	e002      	b.n	8003a1e <DMA_CheckFifoParam+0xe6>
      break;   
 8003a18:	bf00      	nop
 8003a1a:	e000      	b.n	8003a1e <DMA_CheckFifoParam+0xe6>
      break;
 8003a1c:	bf00      	nop
    }
  } 
  
  return status; 
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e165      	b.n	8003d14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a48:	2201      	movs	r2, #1
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	f040 8154 	bne.w	8003d0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d00b      	beq.n	8003a86 <HAL_GPIO_Init+0x5a>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d007      	beq.n	8003a86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a7a:	2b11      	cmp	r3, #17
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b12      	cmp	r3, #18
 8003a84:	d130      	bne.n	8003ae8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	2203      	movs	r2, #3
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003abc:	2201      	movs	r2, #1
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	f003 0201 	and.w	r2, r3, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2203      	movs	r2, #3
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0xfc>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b12      	cmp	r3, #18
 8003b26:	d123      	bne.n	8003b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	08da      	lsrs	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3208      	adds	r2, #8
 8003b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	220f      	movs	r2, #15
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	08da      	lsrs	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3208      	adds	r2, #8
 8003b6a:	69b9      	ldr	r1, [r7, #24]
 8003b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0203 	and.w	r2, r3, #3
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80ae 	beq.w	8003d0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b5c      	ldr	r3, [pc, #368]	; (8003d28 <HAL_GPIO_Init+0x2fc>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	4a5b      	ldr	r2, [pc, #364]	; (8003d28 <HAL_GPIO_Init+0x2fc>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc2:	4b59      	ldr	r3, [pc, #356]	; (8003d28 <HAL_GPIO_Init+0x2fc>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bce:	4a57      	ldr	r2, [pc, #348]	; (8003d2c <HAL_GPIO_Init+0x300>)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4e      	ldr	r2, [pc, #312]	; (8003d30 <HAL_GPIO_Init+0x304>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d025      	beq.n	8003c46 <HAL_GPIO_Init+0x21a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4d      	ldr	r2, [pc, #308]	; (8003d34 <HAL_GPIO_Init+0x308>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01f      	beq.n	8003c42 <HAL_GPIO_Init+0x216>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4c      	ldr	r2, [pc, #304]	; (8003d38 <HAL_GPIO_Init+0x30c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d019      	beq.n	8003c3e <HAL_GPIO_Init+0x212>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4b      	ldr	r2, [pc, #300]	; (8003d3c <HAL_GPIO_Init+0x310>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_GPIO_Init+0x20e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <HAL_GPIO_Init+0x314>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00d      	beq.n	8003c36 <HAL_GPIO_Init+0x20a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a49      	ldr	r2, [pc, #292]	; (8003d44 <HAL_GPIO_Init+0x318>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <HAL_GPIO_Init+0x206>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a48      	ldr	r2, [pc, #288]	; (8003d48 <HAL_GPIO_Init+0x31c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d101      	bne.n	8003c2e <HAL_GPIO_Init+0x202>
 8003c2a:	2306      	movs	r3, #6
 8003c2c:	e00c      	b.n	8003c48 <HAL_GPIO_Init+0x21c>
 8003c2e:	2307      	movs	r3, #7
 8003c30:	e00a      	b.n	8003c48 <HAL_GPIO_Init+0x21c>
 8003c32:	2305      	movs	r3, #5
 8003c34:	e008      	b.n	8003c48 <HAL_GPIO_Init+0x21c>
 8003c36:	2304      	movs	r3, #4
 8003c38:	e006      	b.n	8003c48 <HAL_GPIO_Init+0x21c>
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e004      	b.n	8003c48 <HAL_GPIO_Init+0x21c>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e002      	b.n	8003c48 <HAL_GPIO_Init+0x21c>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_GPIO_Init+0x21c>
 8003c46:	2300      	movs	r3, #0
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	f002 0203 	and.w	r2, r2, #3
 8003c4e:	0092      	lsls	r2, r2, #2
 8003c50:	4093      	lsls	r3, r2
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c58:	4934      	ldr	r1, [pc, #208]	; (8003d2c <HAL_GPIO_Init+0x300>)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c66:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <HAL_GPIO_Init+0x320>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c8a:	4a30      	ldr	r2, [pc, #192]	; (8003d4c <HAL_GPIO_Init+0x320>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c90:	4b2e      	ldr	r3, [pc, #184]	; (8003d4c <HAL_GPIO_Init+0x320>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cb4:	4a25      	ldr	r2, [pc, #148]	; (8003d4c <HAL_GPIO_Init+0x320>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <HAL_GPIO_Init+0x320>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cde:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <HAL_GPIO_Init+0x320>)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_GPIO_Init+0x320>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d08:	4a10      	ldr	r2, [pc, #64]	; (8003d4c <HAL_GPIO_Init+0x320>)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	f67f ae96 	bls.w	8003a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3724      	adds	r7, #36	; 0x24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	40020000 	.word	0x40020000
 8003d34:	40020400 	.word	0x40020400
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40020c00 	.word	0x40020c00
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40021400 	.word	0x40021400
 8003d48:	40021800 	.word	0x40021800
 8003d4c:	40013c00 	.word	0x40013c00

08003d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	887b      	ldrh	r3, [r7, #2]
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	e001      	b.n	8003d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	807b      	strh	r3, [r7, #2]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d90:	787b      	ldrb	r3, [r7, #1]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d9c:	e003      	b.n	8003da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	041a      	lsls	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	619a      	str	r2, [r3, #24]
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003dda:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <HAL_PWREx_EnableOverDrive+0x94>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de0:	f7ff f8d8 	bl	8002f94 <HAL_GetTick>
 8003de4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003de6:	e009      	b.n	8003dfc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003de8:	f7ff f8d4 	bl	8002f94 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df6:	d901      	bls.n	8003dfc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e01f      	b.n	8003e3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d1ee      	bne.n	8003de8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e10:	f7ff f8c0 	bl	8002f94 <HAL_GetTick>
 8003e14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e16:	e009      	b.n	8003e2c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e18:	f7ff f8bc 	bl	8002f94 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e26:	d901      	bls.n	8003e2c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e007      	b.n	8003e3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e38:	d1ee      	bne.n	8003e18 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40023800 	.word	0x40023800
 8003e48:	420e0040 	.word	0x420e0040
 8003e4c:	40007000 	.word	0x40007000
 8003e50:	420e0044 	.word	0x420e0044

08003e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0cc      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e68:	4b68      	ldr	r3, [pc, #416]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d90c      	bls.n	8003e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b65      	ldr	r3, [pc, #404]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b63      	ldr	r3, [pc, #396]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0b8      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea8:	4b59      	ldr	r3, [pc, #356]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a58      	ldr	r2, [pc, #352]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec0:	4b53      	ldr	r3, [pc, #332]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4a52      	ldr	r2, [pc, #328]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ecc:	4b50      	ldr	r3, [pc, #320]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	494d      	ldr	r1, [pc, #308]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d044      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef2:	4b47      	ldr	r3, [pc, #284]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d119      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e07f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d003      	beq.n	8003f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	4b3f      	ldr	r3, [pc, #252]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e06f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f22:	4b3b      	ldr	r3, [pc, #236]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e067      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f32:	4b37      	ldr	r3, [pc, #220]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4934      	ldr	r1, [pc, #208]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f44:	f7ff f826 	bl	8002f94 <HAL_GetTick>
 8003f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f4c:	f7ff f822 	bl	8002f94 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e04f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f62:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 020c 	and.w	r2, r3, #12
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d1eb      	bne.n	8003f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f74:	4b25      	ldr	r3, [pc, #148]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d20c      	bcs.n	8003f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b22      	ldr	r3, [pc, #136]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b20      	ldr	r3, [pc, #128]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e032      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4916      	ldr	r1, [pc, #88]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	490e      	ldr	r1, [pc, #56]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fda:	f000 f855 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8003fde:	4601      	mov	r1, r0
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003fec:	5cd3      	ldrb	r3, [r2, r3]
 8003fee:	fa21 f303 	lsr.w	r3, r1, r3
 8003ff2:	4a09      	ldr	r2, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe ff86 	bl	8002f0c <HAL_InitTick>

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40023c00 	.word	0x40023c00
 8004010:	40023800 	.word	0x40023800
 8004014:	080094c0 	.word	0x080094c0
 8004018:	20000024 	.word	0x20000024
 800401c:	2000002c 	.word	0x2000002c

08004020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <HAL_RCC_GetHCLKFreq+0x14>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000024 	.word	0x20000024

08004038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800403c:	f7ff fff0 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004040:	4601      	mov	r1, r0
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0a9b      	lsrs	r3, r3, #10
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4a03      	ldr	r2, [pc, #12]	; (800405c <HAL_RCC_GetPCLK1Freq+0x24>)
 800404e:	5cd3      	ldrb	r3, [r2, r3]
 8004050:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	080094d0 	.word	0x080094d0

08004060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004064:	f7ff ffdc 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004068:	4601      	mov	r1, r0
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0b5b      	lsrs	r3, r3, #13
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4a03      	ldr	r2, [pc, #12]	; (8004084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004076:	5cd3      	ldrb	r3, [r2, r3]
 8004078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	080094d0 	.word	0x080094d0

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a2:	4bc6      	ldr	r3, [pc, #792]	; (80043bc <HAL_RCC_GetSysClockFreq+0x334>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	f200 817e 	bhi.w	80043ac <HAL_RCC_GetSysClockFreq+0x324>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <HAL_RCC_GetSysClockFreq+0x30>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	080043ad 	.word	0x080043ad
 80040c0:	080043ad 	.word	0x080043ad
 80040c4:	080043ad 	.word	0x080043ad
 80040c8:	080040f3 	.word	0x080040f3
 80040cc:	080043ad 	.word	0x080043ad
 80040d0:	080043ad 	.word	0x080043ad
 80040d4:	080043ad 	.word	0x080043ad
 80040d8:	080040f9 	.word	0x080040f9
 80040dc:	080043ad 	.word	0x080043ad
 80040e0:	080043ad 	.word	0x080043ad
 80040e4:	080043ad 	.word	0x080043ad
 80040e8:	08004255 	.word	0x08004255
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4bb4      	ldr	r3, [pc, #720]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x338>)
 80040ee:	613b      	str	r3, [r7, #16]
       break;
 80040f0:	e15f      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040f2:	4bb4      	ldr	r3, [pc, #720]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80040f4:	613b      	str	r3, [r7, #16]
      break;
 80040f6:	e15c      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f8:	4bb0      	ldr	r3, [pc, #704]	; (80043bc <HAL_RCC_GetSysClockFreq+0x334>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004100:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004102:	4bae      	ldr	r3, [pc, #696]	; (80043bc <HAL_RCC_GetSysClockFreq+0x334>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04a      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410e:	4bab      	ldr	r3, [pc, #684]	; (80043bc <HAL_RCC_GetSysClockFreq+0x334>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	099b      	lsrs	r3, r3, #6
 8004114:	f04f 0400 	mov.w	r4, #0
 8004118:	f240 11ff 	movw	r1, #511	; 0x1ff
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	ea03 0501 	and.w	r5, r3, r1
 8004124:	ea04 0602 	and.w	r6, r4, r2
 8004128:	4629      	mov	r1, r5
 800412a:	4632      	mov	r2, r6
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	f04f 0400 	mov.w	r4, #0
 8004134:	0154      	lsls	r4, r2, #5
 8004136:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800413a:	014b      	lsls	r3, r1, #5
 800413c:	4619      	mov	r1, r3
 800413e:	4622      	mov	r2, r4
 8004140:	1b49      	subs	r1, r1, r5
 8004142:	eb62 0206 	sbc.w	r2, r2, r6
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	f04f 0400 	mov.w	r4, #0
 800414e:	0194      	lsls	r4, r2, #6
 8004150:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004154:	018b      	lsls	r3, r1, #6
 8004156:	1a5b      	subs	r3, r3, r1
 8004158:	eb64 0402 	sbc.w	r4, r4, r2
 800415c:	f04f 0100 	mov.w	r1, #0
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	00e2      	lsls	r2, r4, #3
 8004166:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800416a:	00d9      	lsls	r1, r3, #3
 800416c:	460b      	mov	r3, r1
 800416e:	4614      	mov	r4, r2
 8004170:	195b      	adds	r3, r3, r5
 8004172:	eb44 0406 	adc.w	r4, r4, r6
 8004176:	f04f 0100 	mov.w	r1, #0
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	0262      	lsls	r2, r4, #9
 8004180:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004184:	0259      	lsls	r1, r3, #9
 8004186:	460b      	mov	r3, r1
 8004188:	4614      	mov	r4, r2
 800418a:	4618      	mov	r0, r3
 800418c:	4621      	mov	r1, r4
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f04f 0400 	mov.w	r4, #0
 8004194:	461a      	mov	r2, r3
 8004196:	4623      	mov	r3, r4
 8004198:	f7fc f834 	bl	8000204 <__aeabi_uldivmod>
 800419c:	4603      	mov	r3, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	e049      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a4:	4b85      	ldr	r3, [pc, #532]	; (80043bc <HAL_RCC_GetSysClockFreq+0x334>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	099b      	lsrs	r3, r3, #6
 80041aa:	f04f 0400 	mov.w	r4, #0
 80041ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	ea03 0501 	and.w	r5, r3, r1
 80041ba:	ea04 0602 	and.w	r6, r4, r2
 80041be:	4629      	mov	r1, r5
 80041c0:	4632      	mov	r2, r6
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	f04f 0400 	mov.w	r4, #0
 80041ca:	0154      	lsls	r4, r2, #5
 80041cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041d0:	014b      	lsls	r3, r1, #5
 80041d2:	4619      	mov	r1, r3
 80041d4:	4622      	mov	r2, r4
 80041d6:	1b49      	subs	r1, r1, r5
 80041d8:	eb62 0206 	sbc.w	r2, r2, r6
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	f04f 0400 	mov.w	r4, #0
 80041e4:	0194      	lsls	r4, r2, #6
 80041e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041ea:	018b      	lsls	r3, r1, #6
 80041ec:	1a5b      	subs	r3, r3, r1
 80041ee:	eb64 0402 	sbc.w	r4, r4, r2
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	00e2      	lsls	r2, r4, #3
 80041fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004200:	00d9      	lsls	r1, r3, #3
 8004202:	460b      	mov	r3, r1
 8004204:	4614      	mov	r4, r2
 8004206:	195b      	adds	r3, r3, r5
 8004208:	eb44 0406 	adc.w	r4, r4, r6
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	02a2      	lsls	r2, r4, #10
 8004216:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800421a:	0299      	lsls	r1, r3, #10
 800421c:	460b      	mov	r3, r1
 800421e:	4614      	mov	r4, r2
 8004220:	4618      	mov	r0, r3
 8004222:	4621      	mov	r1, r4
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f04f 0400 	mov.w	r4, #0
 800422a:	461a      	mov	r2, r3
 800422c:	4623      	mov	r3, r4
 800422e:	f7fb ffe9 	bl	8000204 <__aeabi_uldivmod>
 8004232:	4603      	mov	r3, r0
 8004234:	460c      	mov	r4, r1
 8004236:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004238:	4b60      	ldr	r3, [pc, #384]	; (80043bc <HAL_RCC_GetSysClockFreq+0x334>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	3301      	adds	r3, #1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	613b      	str	r3, [r7, #16]
      break;
 8004252:	e0ae      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004254:	4b59      	ldr	r3, [pc, #356]	; (80043bc <HAL_RCC_GetSysClockFreq+0x334>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800425c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800425e:	4b57      	ldr	r3, [pc, #348]	; (80043bc <HAL_RCC_GetSysClockFreq+0x334>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d04a      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426a:	4b54      	ldr	r3, [pc, #336]	; (80043bc <HAL_RCC_GetSysClockFreq+0x334>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	099b      	lsrs	r3, r3, #6
 8004270:	f04f 0400 	mov.w	r4, #0
 8004274:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	ea03 0501 	and.w	r5, r3, r1
 8004280:	ea04 0602 	and.w	r6, r4, r2
 8004284:	4629      	mov	r1, r5
 8004286:	4632      	mov	r2, r6
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	f04f 0400 	mov.w	r4, #0
 8004290:	0154      	lsls	r4, r2, #5
 8004292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004296:	014b      	lsls	r3, r1, #5
 8004298:	4619      	mov	r1, r3
 800429a:	4622      	mov	r2, r4
 800429c:	1b49      	subs	r1, r1, r5
 800429e:	eb62 0206 	sbc.w	r2, r2, r6
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	f04f 0400 	mov.w	r4, #0
 80042aa:	0194      	lsls	r4, r2, #6
 80042ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042b0:	018b      	lsls	r3, r1, #6
 80042b2:	1a5b      	subs	r3, r3, r1
 80042b4:	eb64 0402 	sbc.w	r4, r4, r2
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	00e2      	lsls	r2, r4, #3
 80042c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042c6:	00d9      	lsls	r1, r3, #3
 80042c8:	460b      	mov	r3, r1
 80042ca:	4614      	mov	r4, r2
 80042cc:	195b      	adds	r3, r3, r5
 80042ce:	eb44 0406 	adc.w	r4, r4, r6
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	0262      	lsls	r2, r4, #9
 80042dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042e0:	0259      	lsls	r1, r3, #9
 80042e2:	460b      	mov	r3, r1
 80042e4:	4614      	mov	r4, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	4621      	mov	r1, r4
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f04f 0400 	mov.w	r4, #0
 80042f0:	461a      	mov	r2, r3
 80042f2:	4623      	mov	r3, r4
 80042f4:	f7fb ff86 	bl	8000204 <__aeabi_uldivmod>
 80042f8:	4603      	mov	r3, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e049      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004300:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <HAL_RCC_GetSysClockFreq+0x334>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	099b      	lsrs	r3, r3, #6
 8004306:	f04f 0400 	mov.w	r4, #0
 800430a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	ea03 0501 	and.w	r5, r3, r1
 8004316:	ea04 0602 	and.w	r6, r4, r2
 800431a:	4629      	mov	r1, r5
 800431c:	4632      	mov	r2, r6
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	f04f 0400 	mov.w	r4, #0
 8004326:	0154      	lsls	r4, r2, #5
 8004328:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800432c:	014b      	lsls	r3, r1, #5
 800432e:	4619      	mov	r1, r3
 8004330:	4622      	mov	r2, r4
 8004332:	1b49      	subs	r1, r1, r5
 8004334:	eb62 0206 	sbc.w	r2, r2, r6
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	f04f 0400 	mov.w	r4, #0
 8004340:	0194      	lsls	r4, r2, #6
 8004342:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004346:	018b      	lsls	r3, r1, #6
 8004348:	1a5b      	subs	r3, r3, r1
 800434a:	eb64 0402 	sbc.w	r4, r4, r2
 800434e:	f04f 0100 	mov.w	r1, #0
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	00e2      	lsls	r2, r4, #3
 8004358:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800435c:	00d9      	lsls	r1, r3, #3
 800435e:	460b      	mov	r3, r1
 8004360:	4614      	mov	r4, r2
 8004362:	195b      	adds	r3, r3, r5
 8004364:	eb44 0406 	adc.w	r4, r4, r6
 8004368:	f04f 0100 	mov.w	r1, #0
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	02a2      	lsls	r2, r4, #10
 8004372:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004376:	0299      	lsls	r1, r3, #10
 8004378:	460b      	mov	r3, r1
 800437a:	4614      	mov	r4, r2
 800437c:	4618      	mov	r0, r3
 800437e:	4621      	mov	r1, r4
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f04f 0400 	mov.w	r4, #0
 8004386:	461a      	mov	r2, r3
 8004388:	4623      	mov	r3, r4
 800438a:	f7fb ff3b 	bl	8000204 <__aeabi_uldivmod>
 800438e:	4603      	mov	r3, r0
 8004390:	460c      	mov	r4, r1
 8004392:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCC_GetSysClockFreq+0x334>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	0f1b      	lsrs	r3, r3, #28
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	613b      	str	r3, [r7, #16]
      break;
 80043aa:	e002      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x338>)
 80043ae:	613b      	str	r3, [r7, #16]
      break;
 80043b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043b2:	693b      	ldr	r3, [r7, #16]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	007a1200 	.word	0x007a1200

080043c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8083 	beq.w	80044e8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043e2:	4b95      	ldr	r3, [pc, #596]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d019      	beq.n	8004422 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043ee:	4b92      	ldr	r3, [pc, #584]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d106      	bne.n	8004408 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043fa:	4b8f      	ldr	r3, [pc, #572]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004406:	d00c      	beq.n	8004422 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004408:	4b8b      	ldr	r3, [pc, #556]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004410:	2b0c      	cmp	r3, #12
 8004412:	d112      	bne.n	800443a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004414:	4b88      	ldr	r3, [pc, #544]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004420:	d10b      	bne.n	800443a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004422:	4b85      	ldr	r3, [pc, #532]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d05b      	beq.n	80044e6 <HAL_RCC_OscConfig+0x11e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d157      	bne.n	80044e6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e216      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x8a>
 8004444:	4b7c      	ldr	r3, [pc, #496]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a7b      	ldr	r2, [pc, #492]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800444a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	e01d      	b.n	800448e <HAL_RCC_OscConfig+0xc6>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800445a:	d10c      	bne.n	8004476 <HAL_RCC_OscConfig+0xae>
 800445c:	4b76      	ldr	r3, [pc, #472]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a75      	ldr	r2, [pc, #468]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b73      	ldr	r3, [pc, #460]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a72      	ldr	r2, [pc, #456]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800446e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	e00b      	b.n	800448e <HAL_RCC_OscConfig+0xc6>
 8004476:	4b70      	ldr	r3, [pc, #448]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6f      	ldr	r2, [pc, #444]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800447c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	4b6d      	ldr	r3, [pc, #436]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a6c      	ldr	r2, [pc, #432]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d013      	beq.n	80044be <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fe fd7d 	bl	8002f94 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800449e:	f7fe fd79 	bl	8002f94 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b64      	cmp	r3, #100	; 0x64
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1db      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b0:	4b61      	ldr	r3, [pc, #388]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0xd6>
 80044bc:	e014      	b.n	80044e8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fe fd69 	bl	8002f94 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c6:	f7fe fd65 	bl	8002f94 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b64      	cmp	r3, #100	; 0x64
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e1c7      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d8:	4b57      	ldr	r3, [pc, #348]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0xfe>
 80044e4:	e000      	b.n	80044e8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d06f      	beq.n	80045d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044f4:	4b50      	ldr	r3, [pc, #320]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 030c 	and.w	r3, r3, #12
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d017      	beq.n	8004530 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004500:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004508:	2b08      	cmp	r3, #8
 800450a:	d105      	bne.n	8004518 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800450c:	4b4a      	ldr	r3, [pc, #296]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00b      	beq.n	8004530 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004518:	4b47      	ldr	r3, [pc, #284]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004520:	2b0c      	cmp	r3, #12
 8004522:	d11c      	bne.n	800455e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004524:	4b44      	ldr	r3, [pc, #272]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d116      	bne.n	800455e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004530:	4b41      	ldr	r3, [pc, #260]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_OscConfig+0x180>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d001      	beq.n	8004548 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e18f      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004548:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4938      	ldr	r1, [pc, #224]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004558:	4313      	orrs	r3, r2
 800455a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455c:	e03a      	b.n	80045d4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d020      	beq.n	80045a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004566:	4b35      	ldr	r3, [pc, #212]	; (800463c <HAL_RCC_OscConfig+0x274>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fe fd12 	bl	8002f94 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004574:	f7fe fd0e 	bl	8002f94 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e170      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004586:	4b2c      	ldr	r3, [pc, #176]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004592:	4b29      	ldr	r3, [pc, #164]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4925      	ldr	r1, [pc, #148]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]
 80045a6:	e015      	b.n	80045d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a8:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_RCC_OscConfig+0x274>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ae:	f7fe fcf1 	bl	8002f94 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b6:	f7fe fced 	bl	8002f94 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e14f      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c8:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f0      	bne.n	80045b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d037      	beq.n	8004650 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d016      	beq.n	8004616 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <HAL_RCC_OscConfig+0x278>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ee:	f7fe fcd1 	bl	8002f94 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f6:	f7fe fccd 	bl	8002f94 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e12f      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800460a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x22e>
 8004614:	e01c      	b.n	8004650 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <HAL_RCC_OscConfig+0x278>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461c:	f7fe fcba 	bl	8002f94 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004622:	e00f      	b.n	8004644 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004624:	f7fe fcb6 	bl	8002f94 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d908      	bls.n	8004644 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e118      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800
 800463c:	42470000 	.word	0x42470000
 8004640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004644:	4b8a      	ldr	r3, [pc, #552]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e9      	bne.n	8004624 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8097 	beq.w	800478c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004662:	4b83      	ldr	r3, [pc, #524]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10f      	bne.n	800468e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	4b7f      	ldr	r3, [pc, #508]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a7e      	ldr	r2, [pc, #504]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b7c      	ldr	r3, [pc, #496]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468e:	4b79      	ldr	r3, [pc, #484]	; (8004874 <HAL_RCC_OscConfig+0x4ac>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d118      	bne.n	80046cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800469a:	4b76      	ldr	r3, [pc, #472]	; (8004874 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a75      	ldr	r2, [pc, #468]	; (8004874 <HAL_RCC_OscConfig+0x4ac>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a6:	f7fe fc75 	bl	8002f94 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ae:	f7fe fc71 	bl	8002f94 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0d3      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	4b6c      	ldr	r3, [pc, #432]	; (8004874 <HAL_RCC_OscConfig+0x4ac>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d106      	bne.n	80046e2 <HAL_RCC_OscConfig+0x31a>
 80046d4:	4b66      	ldr	r3, [pc, #408]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	4a65      	ldr	r2, [pc, #404]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	6713      	str	r3, [r2, #112]	; 0x70
 80046e0:	e01c      	b.n	800471c <HAL_RCC_OscConfig+0x354>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x33c>
 80046ea:	4b61      	ldr	r3, [pc, #388]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a60      	ldr	r2, [pc, #384]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 80046f0:	f043 0304 	orr.w	r3, r3, #4
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
 80046f6:	4b5e      	ldr	r3, [pc, #376]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a5d      	ldr	r2, [pc, #372]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	6713      	str	r3, [r2, #112]	; 0x70
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0x354>
 8004704:	4b5a      	ldr	r3, [pc, #360]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	4a59      	ldr	r2, [pc, #356]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	6713      	str	r3, [r2, #112]	; 0x70
 8004710:	4b57      	ldr	r3, [pc, #348]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	4a56      	ldr	r2, [pc, #344]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004716:	f023 0304 	bic.w	r3, r3, #4
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d015      	beq.n	8004750 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7fe fc36 	bl	8002f94 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472a:	e00a      	b.n	8004742 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fe fc32 	bl	8002f94 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	; 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e092      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004742:	4b4b      	ldr	r3, [pc, #300]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0ee      	beq.n	800472c <HAL_RCC_OscConfig+0x364>
 800474e:	e014      	b.n	800477a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fe fc20 	bl	8002f94 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004756:	e00a      	b.n	800476e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004758:	f7fe fc1c 	bl	8002f94 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f241 3288 	movw	r2, #5000	; 0x1388
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e07c      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476e:	4b40      	ldr	r3, [pc, #256]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ee      	bne.n	8004758 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800477a:	7dfb      	ldrb	r3, [r7, #23]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d105      	bne.n	800478c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004780:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	4a3a      	ldr	r2, [pc, #232]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d068      	beq.n	8004866 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 030c 	and.w	r3, r3, #12
 800479c:	2b08      	cmp	r3, #8
 800479e:	d060      	beq.n	8004862 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d145      	bne.n	8004834 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a8:	4b33      	ldr	r3, [pc, #204]	; (8004878 <HAL_RCC_OscConfig+0x4b0>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fe fbf1 	bl	8002f94 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fe fbed 	bl	8002f94 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e04f      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c8:	4b29      	ldr	r3, [pc, #164]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	019b      	lsls	r3, r3, #6
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	3b01      	subs	r3, #1
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	061b      	lsls	r3, r3, #24
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	071b      	lsls	r3, r3, #28
 8004800:	491b      	ldr	r1, [pc, #108]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004802:	4313      	orrs	r3, r2
 8004804:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004806:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <HAL_RCC_OscConfig+0x4b0>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fe fbc2 	bl	8002f94 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004814:	f7fe fbbe 	bl	8002f94 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e020      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x44c>
 8004832:	e018      	b.n	8004866 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004834:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_RCC_OscConfig+0x4b0>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7fe fbab 	bl	8002f94 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004842:	f7fe fba7 	bl	8002f94 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e009      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_RCC_OscConfig+0x4a8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x47a>
 8004860:	e001      	b.n	8004866 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40023800 	.word	0x40023800
 8004874:	40007000 	.word	0x40007000
 8004878:	42470060 	.word	0x42470060

0800487c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e056      	b.n	800493c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fd f9ff 	bl	8001cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	ea42 0103 	orr.w	r1, r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	0c1b      	lsrs	r3, r3, #16
 800490c:	f003 0104 	and.w	r1, r3, #4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69da      	ldr	r2, [r3, #28]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800492a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_SPI_Transmit+0x22>
 8004962:	2302      	movs	r3, #2
 8004964:	e11e      	b.n	8004ba4 <HAL_SPI_Transmit+0x260>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800496e:	f7fe fb11 	bl	8002f94 <HAL_GetTick>
 8004972:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d002      	beq.n	800498a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004984:	2302      	movs	r3, #2
 8004986:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004988:	e103      	b.n	8004b92 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_SPI_Transmit+0x52>
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	77fb      	strb	r3, [r7, #31]
    goto error;
 800499a:	e0fa      	b.n	8004b92 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2203      	movs	r2, #3
 80049a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	88fa      	ldrh	r2, [r7, #6]
 80049b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	88fa      	ldrh	r2, [r7, #6]
 80049ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e2:	d107      	bne.n	80049f4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d007      	beq.n	8004a12 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1a:	d14b      	bne.n	8004ab4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_SPI_Transmit+0xe6>
 8004a24:	8afb      	ldrh	r3, [r7, #22]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d13e      	bne.n	8004aa8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	881a      	ldrh	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	1c9a      	adds	r2, r3, #2
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a4e:	e02b      	b.n	8004aa8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d112      	bne.n	8004a84 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	881a      	ldrh	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	1c9a      	adds	r2, r3, #2
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a82:	e011      	b.n	8004aa8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a84:	f7fe fa86 	bl	8002f94 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d803      	bhi.n	8004a9c <HAL_SPI_Transmit+0x158>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a9a:	d102      	bne.n	8004aa2 <HAL_SPI_Transmit+0x15e>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004aa6:	e074      	b.n	8004b92 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1ce      	bne.n	8004a50 <HAL_SPI_Transmit+0x10c>
 8004ab2:	e04c      	b.n	8004b4e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_SPI_Transmit+0x17e>
 8004abc:	8afb      	ldrh	r3, [r7, #22]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d140      	bne.n	8004b44 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	330c      	adds	r3, #12
 8004acc:	7812      	ldrb	r2, [r2, #0]
 8004ace:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ae8:	e02c      	b.n	8004b44 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d113      	bne.n	8004b20 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b1e:	e011      	b.n	8004b44 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b20:	f7fe fa38 	bl	8002f94 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d803      	bhi.n	8004b38 <HAL_SPI_Transmit+0x1f4>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b36:	d102      	bne.n	8004b3e <HAL_SPI_Transmit+0x1fa>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b42:	e026      	b.n	8004b92 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1cd      	bne.n	8004aea <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fcc4 	bl	80054e0 <SPI_EndRxTxTransaction>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	77fb      	strb	r3, [r7, #31]
 8004b8e:	e000      	b.n	8004b92 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004b90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ba2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc8:	d112      	bne.n	8004bf0 <HAL_SPI_Receive+0x44>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f8e9 	bl	8004dbe <HAL_SPI_TransmitReceive>
 8004bec:	4603      	mov	r3, r0
 8004bee:	e0e2      	b.n	8004db6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_SPI_Receive+0x52>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e0db      	b.n	8004db6 <HAL_SPI_Receive+0x20a>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c06:	f7fe f9c5 	bl	8002f94 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d002      	beq.n	8004c1e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c1c:	e0c2      	b.n	8004da4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <HAL_SPI_Receive+0x7e>
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d102      	bne.n	8004c30 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c2e:	e0b9      	b.n	8004da4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2204      	movs	r2, #4
 8004c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	88fa      	ldrh	r2, [r7, #6]
 8004c48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	88fa      	ldrh	r2, [r7, #6]
 8004c4e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c76:	d107      	bne.n	8004c88 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d007      	beq.n	8004ca6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d162      	bne.n	8004d74 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004cae:	e02e      	b.n	8004d0e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d115      	bne.n	8004cea <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f103 020c 	add.w	r2, r3, #12
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ce8:	e011      	b.n	8004d0e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cea:	f7fe f953 	bl	8002f94 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d803      	bhi.n	8004d02 <HAL_SPI_Receive+0x156>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d00:	d102      	bne.n	8004d08 <HAL_SPI_Receive+0x15c>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d0c:	e04a      	b.n	8004da4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1cb      	bne.n	8004cb0 <HAL_SPI_Receive+0x104>
 8004d18:	e031      	b.n	8004d7e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d113      	bne.n	8004d50 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	b292      	uxth	r2, r2
 8004d34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	1c9a      	adds	r2, r3, #2
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d4e:	e011      	b.n	8004d74 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d50:	f7fe f920 	bl	8002f94 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d803      	bhi.n	8004d68 <HAL_SPI_Receive+0x1bc>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d66:	d102      	bne.n	8004d6e <HAL_SPI_Receive+0x1c2>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d72:	e017      	b.n	8004da4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1cd      	bne.n	8004d1a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	6839      	ldr	r1, [r7, #0]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fb46 	bl	8005414 <SPI_EndRxTransaction>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	75fb      	strb	r3, [r7, #23]
 8004da0:	e000      	b.n	8004da4 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004da2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b08c      	sub	sp, #48	; 0x30
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x26>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e18a      	b.n	80050fa <HAL_SPI_TransmitReceive+0x33c>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dec:	f7fe f8d2 	bl	8002f94 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e02:	887b      	ldrh	r3, [r7, #2]
 8004e04:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d00f      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0x70>
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e14:	d107      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x68>
 8004e1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d003      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e26:	2302      	movs	r3, #2
 8004e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e2c:	e15b      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_SPI_TransmitReceive+0x82>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_SPI_TransmitReceive+0x82>
 8004e3a:	887b      	ldrh	r3, [r7, #2]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d103      	bne.n	8004e48 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e46:	e14e      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d003      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2205      	movs	r2, #5
 8004e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	887a      	ldrh	r2, [r7, #2]
 8004e72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	887a      	ldrh	r2, [r7, #2]
 8004e7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	887a      	ldrh	r2, [r7, #2]
 8004e84:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d007      	beq.n	8004eb0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb8:	d178      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_SPI_TransmitReceive+0x10a>
 8004ec2:	8b7b      	ldrh	r3, [r7, #26]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d166      	bne.n	8004f96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	881a      	ldrh	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	1c9a      	adds	r2, r3, #2
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eec:	e053      	b.n	8004f96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d11b      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x176>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d016      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x176>
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d113      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d119      	bne.n	8004f76 <HAL_SPI_TransmitReceive+0x1b8>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d014      	beq.n	8004f76 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	b292      	uxth	r2, r2
 8004f58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	1c9a      	adds	r2, r3, #2
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f72:	2301      	movs	r3, #1
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f76:	f7fe f80d 	bl	8002f94 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d807      	bhi.n	8004f96 <HAL_SPI_TransmitReceive+0x1d8>
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f8c:	d003      	beq.n	8004f96 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f94:	e0a7      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1a6      	bne.n	8004eee <HAL_SPI_TransmitReceive+0x130>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1a1      	bne.n	8004eee <HAL_SPI_TransmitReceive+0x130>
 8004faa:	e07c      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x1fc>
 8004fb4:	8b7b      	ldrh	r3, [r7, #26]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d16b      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fe0:	e057      	b.n	8005092 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d11c      	bne.n	800502a <HAL_SPI_TransmitReceive+0x26c>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d017      	beq.n	800502a <HAL_SPI_TransmitReceive+0x26c>
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d114      	bne.n	800502a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	7812      	ldrb	r2, [r2, #0]
 800500c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b01      	cmp	r3, #1
 8005036:	d119      	bne.n	800506c <HAL_SPI_TransmitReceive+0x2ae>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d014      	beq.n	800506c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005068:	2301      	movs	r3, #1
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800506c:	f7fd ff92 	bl	8002f94 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005078:	429a      	cmp	r2, r3
 800507a:	d803      	bhi.n	8005084 <HAL_SPI_TransmitReceive+0x2c6>
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005082:	d102      	bne.n	800508a <HAL_SPI_TransmitReceive+0x2cc>
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005090:	e029      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1a2      	bne.n	8004fe2 <HAL_SPI_TransmitReceive+0x224>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d19d      	bne.n	8004fe2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fa18 	bl	80054e0 <SPI_EndRxTxTransaction>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d006      	beq.n	80050c4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050c2:	e010      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	e000      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3730      	adds	r7, #48	; 0x30
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	099b      	lsrs	r3, r3, #6
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10f      	bne.n	8005148 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	099b      	lsrs	r3, r3, #6
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
    return;
 8005146:	e0d8      	b.n	80052fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_SPI_IRQHandler+0x66>
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	09db      	lsrs	r3, r3, #7
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4798      	blx	r3
    return;
 8005168:	e0c7      	b.n	80052fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10c      	bne.n	8005190 <HAL_SPI_IRQHandler+0x8c>
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	099b      	lsrs	r3, r3, #6
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	0a1b      	lsrs	r3, r3, #8
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80b5 	beq.w	80052fa <HAL_SPI_IRQHandler+0x1f6>
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80ae 	beq.w	80052fa <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	099b      	lsrs	r3, r3, #6
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d023      	beq.n	80051f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d011      	beq.n	80051da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	f043 0204 	orr.w	r2, r3, #4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	e00b      	b.n	80051f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	613b      	str	r3, [r7, #16]
 80051ee:	693b      	ldr	r3, [r7, #16]
        return;
 80051f0:	e083      	b.n	80052fa <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d014      	beq.n	8005228 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	f043 0201 	orr.w	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00c      	beq.n	800524e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005238:	f043 0208 	orr.w	r2, r3, #8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005240:	2300      	movs	r3, #0
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	2b00      	cmp	r3, #0
 8005254:	d050      	beq.n	80052f8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005264:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_SPI_IRQHandler+0x17e>
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d034      	beq.n	80052ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0203 	bic.w	r2, r2, #3
 8005290:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d011      	beq.n	80052be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529e:	4a18      	ldr	r2, [pc, #96]	; (8005300 <HAL_SPI_IRQHandler+0x1fc>)
 80052a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe f92a 	bl	8003500 <HAL_DMA_Abort_IT>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d016      	beq.n	80052f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ca:	4a0d      	ldr	r2, [pc, #52]	; (8005300 <HAL_SPI_IRQHandler+0x1fc>)
 80052cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe f914 	bl	8003500 <HAL_DMA_Abort_IT>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80052ea:	e003      	b.n	80052f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f809 	bl	8005304 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80052f2:	e000      	b.n	80052f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80052f4:	bf00      	nop
    return;
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
  }
}
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	08005319 	.word	0x08005319

08005304 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f7ff ffe6 	bl	8005304 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005350:	e04c      	b.n	80053ec <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005358:	d048      	beq.n	80053ec <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800535a:	f7fd fe1b 	bl	8002f94 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d902      	bls.n	8005370 <SPI_WaitFlagStateUntilTimeout+0x30>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d13d      	bne.n	80053ec <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800537e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005388:	d111      	bne.n	80053ae <SPI_WaitFlagStateUntilTimeout+0x6e>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005392:	d004      	beq.n	800539e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800539c:	d107      	bne.n	80053ae <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b6:	d10f      	bne.n	80053d8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e00f      	b.n	800540c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4013      	ands	r3, r2
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	461a      	mov	r2, r3
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	429a      	cmp	r2, r3
 8005408:	d1a3      	bne.n	8005352 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005428:	d111      	bne.n	800544e <SPI_EndRxTransaction+0x3a>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005432:	d004      	beq.n	800543e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543c:	d107      	bne.n	800544e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005456:	d12a      	bne.n	80054ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005460:	d012      	beq.n	8005488 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2200      	movs	r2, #0
 800546a:	2180      	movs	r1, #128	; 0x80
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff ff67 	bl	8005340 <SPI_WaitFlagStateUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02d      	beq.n	80054d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e026      	b.n	80054d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2200      	movs	r2, #0
 8005490:	2101      	movs	r1, #1
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7ff ff54 	bl	8005340 <SPI_WaitFlagStateUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01a      	beq.n	80054d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e013      	b.n	80054d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2101      	movs	r1, #1
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7ff ff41 	bl	8005340 <SPI_WaitFlagStateUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c8:	f043 0220 	orr.w	r2, r3, #32
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e000      	b.n	80054d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054ec:	4b1b      	ldr	r3, [pc, #108]	; (800555c <SPI_EndRxTxTransaction+0x7c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1b      	ldr	r2, [pc, #108]	; (8005560 <SPI_EndRxTxTransaction+0x80>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	0d5b      	lsrs	r3, r3, #21
 80054f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550a:	d112      	bne.n	8005532 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	2180      	movs	r1, #128	; 0x80
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff ff12 	bl	8005340 <SPI_WaitFlagStateUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d016      	beq.n	8005550 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	f043 0220 	orr.w	r2, r3, #32
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e00f      	b.n	8005552 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	3b01      	subs	r3, #1
 800553c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d0f2      	beq.n	8005532 <SPI_EndRxTxTransaction+0x52>
 800554c:	e000      	b.n	8005550 <SPI_EndRxTxTransaction+0x70>
        break;
 800554e:	bf00      	nop
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000024 	.word	0x20000024
 8005560:	165e9f81 	.word	0x165e9f81

08005564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e01d      	b.n	80055b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc fc46 	bl	8001e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f000 f988 	bl	80058b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b085      	sub	sp, #20
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0201 	orr.w	r2, r2, #1
 80055d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d007      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0201 	bic.w	r2, r2, #1
 8005618:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6a1a      	ldr	r2, [r3, #32]
 8005620:	f241 1311 	movw	r3, #4369	; 0x1111
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10f      	bne.n	800564a <HAL_TIM_Base_Stop_IT+0x48>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6a1a      	ldr	r2, [r3, #32]
 8005630:	f240 4344 	movw	r3, #1092	; 0x444
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d107      	bne.n	800564a <HAL_TIM_Base_Stop_IT+0x48>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0201 	bic.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b02      	cmp	r3, #2
 800566c:	d122      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d11b      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0202 	mvn.w	r2, #2
 8005684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f8ee 	bl	800587c <HAL_TIM_IC_CaptureCallback>
 80056a0:	e005      	b.n	80056ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8e0 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f8f1 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d122      	bne.n	8005708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d11b      	bne.n	8005708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0204 	mvn.w	r2, #4
 80056d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f8c4 	bl	800587c <HAL_TIM_IC_CaptureCallback>
 80056f4:	e005      	b.n	8005702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f8b6 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f8c7 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b08      	cmp	r3, #8
 8005714:	d122      	bne.n	800575c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b08      	cmp	r3, #8
 8005722:	d11b      	bne.n	800575c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f06f 0208 	mvn.w	r2, #8
 800572c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2204      	movs	r2, #4
 8005732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f89a 	bl	800587c <HAL_TIM_IC_CaptureCallback>
 8005748:	e005      	b.n	8005756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f88c 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f89d 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b10      	cmp	r3, #16
 8005768:	d122      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b10      	cmp	r3, #16
 8005776:	d11b      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0210 	mvn.w	r2, #16
 8005780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2208      	movs	r2, #8
 8005786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f870 	bl	800587c <HAL_TIM_IC_CaptureCallback>
 800579c:	e005      	b.n	80057aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f862 	bl	8005868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f873 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d10e      	bne.n	80057dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d107      	bne.n	80057dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0201 	mvn.w	r2, #1
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fc f91a 	bl	8001a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e6:	2b80      	cmp	r3, #128	; 0x80
 80057e8:	d10e      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f4:	2b80      	cmp	r3, #128	; 0x80
 80057f6:	d107      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f97e 	bl	8005b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d10e      	bne.n	8005834 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d107      	bne.n	8005834 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f838 	bl	80058a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b20      	cmp	r3, #32
 8005840:	d10e      	bne.n	8005860 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b20      	cmp	r3, #32
 800584e:	d107      	bne.n	8005860 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0220 	mvn.w	r2, #32
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f948 	bl	8005af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a40      	ldr	r2, [pc, #256]	; (80059cc <TIM_Base_SetConfig+0x114>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d013      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d6:	d00f      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a3d      	ldr	r2, [pc, #244]	; (80059d0 <TIM_Base_SetConfig+0x118>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00b      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a3c      	ldr	r2, [pc, #240]	; (80059d4 <TIM_Base_SetConfig+0x11c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a3b      	ldr	r2, [pc, #236]	; (80059d8 <TIM_Base_SetConfig+0x120>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3a      	ldr	r2, [pc, #232]	; (80059dc <TIM_Base_SetConfig+0x124>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d108      	bne.n	800590a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2f      	ldr	r2, [pc, #188]	; (80059cc <TIM_Base_SetConfig+0x114>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d02b      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005918:	d027      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a2c      	ldr	r2, [pc, #176]	; (80059d0 <TIM_Base_SetConfig+0x118>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d023      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2b      	ldr	r2, [pc, #172]	; (80059d4 <TIM_Base_SetConfig+0x11c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01f      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2a      	ldr	r2, [pc, #168]	; (80059d8 <TIM_Base_SetConfig+0x120>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01b      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a29      	ldr	r2, [pc, #164]	; (80059dc <TIM_Base_SetConfig+0x124>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d017      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a28      	ldr	r2, [pc, #160]	; (80059e0 <TIM_Base_SetConfig+0x128>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a27      	ldr	r2, [pc, #156]	; (80059e4 <TIM_Base_SetConfig+0x12c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00f      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a26      	ldr	r2, [pc, #152]	; (80059e8 <TIM_Base_SetConfig+0x130>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00b      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a25      	ldr	r2, [pc, #148]	; (80059ec <TIM_Base_SetConfig+0x134>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d007      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a24      	ldr	r2, [pc, #144]	; (80059f0 <TIM_Base_SetConfig+0x138>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d003      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a23      	ldr	r2, [pc, #140]	; (80059f4 <TIM_Base_SetConfig+0x13c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d108      	bne.n	800597c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <TIM_Base_SetConfig+0x114>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_Base_SetConfig+0xf8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a0c      	ldr	r2, [pc, #48]	; (80059dc <TIM_Base_SetConfig+0x124>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d103      	bne.n	80059b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	615a      	str	r2, [r3, #20]
}
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	40000c00 	.word	0x40000c00
 80059dc:	40010400 	.word	0x40010400
 80059e0:	40014000 	.word	0x40014000
 80059e4:	40014400 	.word	0x40014400
 80059e8:	40014800 	.word	0x40014800
 80059ec:	40001800 	.word	0x40001800
 80059f0:	40001c00 	.word	0x40001c00
 80059f4:	40002000 	.word	0x40002000

080059f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e05a      	b.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a21      	ldr	r2, [pc, #132]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d022      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5c:	d01d      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1d      	ldr	r2, [pc, #116]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d018      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d013      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00e      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d009      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d004      	beq.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a15      	ldr	r2, [pc, #84]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d10c      	bne.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	40010400 	.word	0x40010400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40001800 	.word	0x40001800

08005af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e03f      	b.n	8005baa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc f9d0 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2224      	movs	r2, #36	; 0x24
 8005b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fc0d 	bl	800637c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d166      	bne.n	8005c9c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_UART_Receive_DMA+0x26>
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e05f      	b.n	8005c9e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_UART_Receive_DMA+0x38>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e058      	b.n	8005c9e <HAL_UART_Receive_DMA+0xea>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	88fa      	ldrh	r2, [r7, #6]
 8005bfe:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2222      	movs	r2, #34	; 0x22
 8005c0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	4a25      	ldr	r2, [pc, #148]	; (8005ca8 <HAL_UART_Receive_DMA+0xf4>)
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1a:	4a24      	ldr	r2, [pc, #144]	; (8005cac <HAL_UART_Receive_DMA+0xf8>)
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c22:	4a23      	ldr	r2, [pc, #140]	; (8005cb0 <HAL_UART_Receive_DMA+0xfc>)
 8005c24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005c2e:	f107 0308 	add.w	r3, r7, #8
 8005c32:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	f7fd fb93 	bl	8003370 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c76:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695a      	ldr	r2, [r3, #20]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695a      	ldr	r2, [r3, #20]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c96:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e000      	b.n	8005c9e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	08005ff5 	.word	0x08005ff5
 8005cac:	0800605d 	.word	0x0800605d
 8005cb0:	08006079 	.word	0x08006079

08005cb4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005cca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695a      	ldr	r2, [r3, #20]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0201 	bic.w	r2, r2, #1
 8005cda:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce6:	2b80      	cmp	r3, #128	; 0x80
 8005ce8:	d124      	bne.n	8005d34 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cf8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d018      	beq.n	8005d34 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	2200      	movs	r2, #0
 8005d08:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fd fb86 	bl	8003420 <HAL_DMA_Abort>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00c      	beq.n	8005d34 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fd fd9a 	bl	8003858 <HAL_DMA_GetError>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d104      	bne.n	8005d34 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2210      	movs	r2, #16
 8005d2e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e03d      	b.n	8005db0 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b40      	cmp	r3, #64	; 0x40
 8005d40:	d124      	bne.n	8005d8c <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695a      	ldr	r2, [r3, #20]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d50:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d018      	beq.n	8005d8c <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5e:	2200      	movs	r2, #0
 8005d60:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fd fb5a 	bl	8003420 <HAL_DMA_Abort>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fd fd6e 	bl	8003858 <HAL_DMA_GetError>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d104      	bne.n	8005d8c <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2210      	movs	r2, #16
 8005d86:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e011      	b.n	8005db0 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10d      	bne.n	8005e0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d008      	beq.n	8005e0a <HAL_UART_IRQHandler+0x52>
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fa38 	bl	8006278 <UART_Receive_IT>
      return;
 8005e08:	e0d1      	b.n	8005fae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 80b0 	beq.w	8005f72 <HAL_UART_IRQHandler+0x1ba>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d105      	bne.n	8005e28 <HAL_UART_IRQHandler+0x70>
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80a5 	beq.w	8005f72 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_UART_IRQHandler+0x90>
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e40:	f043 0201 	orr.w	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <HAL_UART_IRQHandler+0xb0>
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	f043 0202 	orr.w	r2, r3, #2
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <HAL_UART_IRQHandler+0xd0>
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e80:	f043 0204 	orr.w	r2, r3, #4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00f      	beq.n	8005eb2 <HAL_UART_IRQHandler+0xfa>
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <HAL_UART_IRQHandler+0xee>
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eaa:	f043 0208 	orr.w	r2, r3, #8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d078      	beq.n	8005fac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x11c>
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f9d2 	bl	8006278 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	bf0c      	ite	eq
 8005ee2:	2301      	moveq	r3, #1
 8005ee4:	2300      	movne	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <HAL_UART_IRQHandler+0x144>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d031      	beq.n	8005f60 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f91b 	bl	8006138 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d123      	bne.n	8005f58 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d013      	beq.n	8005f50 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2c:	4a21      	ldr	r2, [pc, #132]	; (8005fb4 <HAL_UART_IRQHandler+0x1fc>)
 8005f2e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fd fae3 	bl	8003500 <HAL_DMA_Abort_IT>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d016      	beq.n	8005f6e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4e:	e00e      	b.n	8005f6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f845 	bl	8005fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f56:	e00a      	b.n	8005f6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f841 	bl	8005fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5e:	e006      	b.n	8005f6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f83d 	bl	8005fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f6c:	e01e      	b.n	8005fac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6e:	bf00      	nop
    return;
 8005f70:	e01c      	b.n	8005fac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <HAL_UART_IRQHandler+0x1d6>
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f908 	bl	800619c <UART_Transmit_IT>
    return;
 8005f8c:	e00f      	b.n	8005fae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <HAL_UART_IRQHandler+0x1f6>
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f950 	bl	8006248 <UART_EndTransmit_IT>
    return;
 8005fa8:	bf00      	nop
 8005faa:	e000      	b.n	8005fae <HAL_UART_IRQHandler+0x1f6>
    return;
 8005fac:	bf00      	nop
  }
}
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	08006175 	.word	0x08006175

08005fb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d11e      	bne.n	800604e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006024:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0201 	bic.w	r2, r2, #1
 8006034:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006044:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7fb fc6a 	bl	8001928 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff ffae 	bl	8005fcc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006094:	2b80      	cmp	r3, #128	; 0x80
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b21      	cmp	r3, #33	; 0x21
 80060aa:	d108      	bne.n	80060be <UART_DMAError+0x46>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2200      	movs	r2, #0
 80060b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80060b8:	68b8      	ldr	r0, [r7, #8]
 80060ba:	f000 f827 	bl	800610c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	bf0c      	ite	eq
 80060cc:	2301      	moveq	r3, #1
 80060ce:	2300      	movne	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b22      	cmp	r3, #34	; 0x22
 80060de:	d108      	bne.n	80060f2 <UART_DMAError+0x7a>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2200      	movs	r2, #0
 80060ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80060ec:	68b8      	ldr	r0, [r7, #8]
 80060ee:	f000 f823 	bl	8006138 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f6:	f043 0210 	orr.w	r2, r3, #16
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060fe:	68b8      	ldr	r0, [r7, #8]
 8006100:	f7ff ff6e 	bl	8005fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006104:	bf00      	nop
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006122:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800614e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff ff26 	bl	8005fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006194:	bf00      	nop
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b21      	cmp	r3, #33	; 0x21
 80061ae:	d144      	bne.n	800623a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b8:	d11a      	bne.n	80061f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	1c9a      	adds	r2, r3, #2
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	621a      	str	r2, [r3, #32]
 80061e2:	e00e      	b.n	8006202 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	621a      	str	r2, [r3, #32]
 80061ee:	e008      	b.n	8006202 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	1c59      	adds	r1, r3, #1
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6211      	str	r1, [r2, #32]
 80061fa:	781a      	ldrb	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29b      	uxth	r3, r3
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	4619      	mov	r1, r3
 8006210:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10f      	bne.n	8006236 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006224:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006234:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	e000      	b.n	800623c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800623a:	2302      	movs	r3, #2
  }
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800625e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff fea5 	bl	8005fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b22      	cmp	r3, #34	; 0x22
 800628a:	d171      	bne.n	8006370 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006294:	d123      	bne.n	80062de <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10e      	bne.n	80062c2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	1c9a      	adds	r2, r3, #2
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	629a      	str	r2, [r3, #40]	; 0x28
 80062c0:	e029      	b.n	8006316 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	629a      	str	r2, [r3, #40]	; 0x28
 80062dc:	e01b      	b.n	8006316 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10a      	bne.n	80062fc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6858      	ldr	r0, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	1c59      	adds	r1, r3, #1
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6291      	str	r1, [r2, #40]	; 0x28
 80062f6:	b2c2      	uxtb	r2, r0
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	e00c      	b.n	8006316 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	b2da      	uxtb	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	1c58      	adds	r0, r3, #1
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	6288      	str	r0, [r1, #40]	; 0x28
 800630e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29b      	uxth	r3, r3
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4619      	mov	r1, r3
 8006324:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006326:	2b00      	cmp	r3, #0
 8006328:	d120      	bne.n	800636c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0220 	bic.w	r2, r2, #32
 8006338:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fb fae0 	bl	8001928 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	e002      	b.n	8006372 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	e000      	b.n	8006372 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006370:	2302      	movs	r3, #2
  }
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80063be:	f023 030c 	bic.w	r3, r3, #12
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6812      	ldr	r2, [r2, #0]
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	430b      	orrs	r3, r1
 80063ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ea:	f040 818b 	bne.w	8006704 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4ac1      	ldr	r2, [pc, #772]	; (80066f8 <UART_SetConfig+0x37c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d005      	beq.n	8006404 <UART_SetConfig+0x88>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4abf      	ldr	r2, [pc, #764]	; (80066fc <UART_SetConfig+0x380>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	f040 80bd 	bne.w	800657e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006404:	f7fd fe2c 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8006408:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	461d      	mov	r5, r3
 800640e:	f04f 0600 	mov.w	r6, #0
 8006412:	46a8      	mov	r8, r5
 8006414:	46b1      	mov	r9, r6
 8006416:	eb18 0308 	adds.w	r3, r8, r8
 800641a:	eb49 0409 	adc.w	r4, r9, r9
 800641e:	4698      	mov	r8, r3
 8006420:	46a1      	mov	r9, r4
 8006422:	eb18 0805 	adds.w	r8, r8, r5
 8006426:	eb49 0906 	adc.w	r9, r9, r6
 800642a:	f04f 0100 	mov.w	r1, #0
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006436:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800643a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800643e:	4688      	mov	r8, r1
 8006440:	4691      	mov	r9, r2
 8006442:	eb18 0005 	adds.w	r0, r8, r5
 8006446:	eb49 0106 	adc.w	r1, r9, r6
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	461d      	mov	r5, r3
 8006450:	f04f 0600 	mov.w	r6, #0
 8006454:	196b      	adds	r3, r5, r5
 8006456:	eb46 0406 	adc.w	r4, r6, r6
 800645a:	461a      	mov	r2, r3
 800645c:	4623      	mov	r3, r4
 800645e:	f7f9 fed1 	bl	8000204 <__aeabi_uldivmod>
 8006462:	4603      	mov	r3, r0
 8006464:	460c      	mov	r4, r1
 8006466:	461a      	mov	r2, r3
 8006468:	4ba5      	ldr	r3, [pc, #660]	; (8006700 <UART_SetConfig+0x384>)
 800646a:	fba3 2302 	umull	r2, r3, r3, r2
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	461d      	mov	r5, r3
 8006478:	f04f 0600 	mov.w	r6, #0
 800647c:	46a9      	mov	r9, r5
 800647e:	46b2      	mov	sl, r6
 8006480:	eb19 0309 	adds.w	r3, r9, r9
 8006484:	eb4a 040a 	adc.w	r4, sl, sl
 8006488:	4699      	mov	r9, r3
 800648a:	46a2      	mov	sl, r4
 800648c:	eb19 0905 	adds.w	r9, r9, r5
 8006490:	eb4a 0a06 	adc.w	sl, sl, r6
 8006494:	f04f 0100 	mov.w	r1, #0
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064a8:	4689      	mov	r9, r1
 80064aa:	4692      	mov	sl, r2
 80064ac:	eb19 0005 	adds.w	r0, r9, r5
 80064b0:	eb4a 0106 	adc.w	r1, sl, r6
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	461d      	mov	r5, r3
 80064ba:	f04f 0600 	mov.w	r6, #0
 80064be:	196b      	adds	r3, r5, r5
 80064c0:	eb46 0406 	adc.w	r4, r6, r6
 80064c4:	461a      	mov	r2, r3
 80064c6:	4623      	mov	r3, r4
 80064c8:	f7f9 fe9c 	bl	8000204 <__aeabi_uldivmod>
 80064cc:	4603      	mov	r3, r0
 80064ce:	460c      	mov	r4, r1
 80064d0:	461a      	mov	r2, r3
 80064d2:	4b8b      	ldr	r3, [pc, #556]	; (8006700 <UART_SetConfig+0x384>)
 80064d4:	fba3 1302 	umull	r1, r3, r3, r2
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	2164      	movs	r1, #100	; 0x64
 80064dc:	fb01 f303 	mul.w	r3, r1, r3
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	3332      	adds	r3, #50	; 0x32
 80064e6:	4a86      	ldr	r2, [pc, #536]	; (8006700 <UART_SetConfig+0x384>)
 80064e8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064f4:	4498      	add	r8, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	461d      	mov	r5, r3
 80064fa:	f04f 0600 	mov.w	r6, #0
 80064fe:	46a9      	mov	r9, r5
 8006500:	46b2      	mov	sl, r6
 8006502:	eb19 0309 	adds.w	r3, r9, r9
 8006506:	eb4a 040a 	adc.w	r4, sl, sl
 800650a:	4699      	mov	r9, r3
 800650c:	46a2      	mov	sl, r4
 800650e:	eb19 0905 	adds.w	r9, r9, r5
 8006512:	eb4a 0a06 	adc.w	sl, sl, r6
 8006516:	f04f 0100 	mov.w	r1, #0
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006522:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006526:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800652a:	4689      	mov	r9, r1
 800652c:	4692      	mov	sl, r2
 800652e:	eb19 0005 	adds.w	r0, r9, r5
 8006532:	eb4a 0106 	adc.w	r1, sl, r6
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	461d      	mov	r5, r3
 800653c:	f04f 0600 	mov.w	r6, #0
 8006540:	196b      	adds	r3, r5, r5
 8006542:	eb46 0406 	adc.w	r4, r6, r6
 8006546:	461a      	mov	r2, r3
 8006548:	4623      	mov	r3, r4
 800654a:	f7f9 fe5b 	bl	8000204 <__aeabi_uldivmod>
 800654e:	4603      	mov	r3, r0
 8006550:	460c      	mov	r4, r1
 8006552:	461a      	mov	r2, r3
 8006554:	4b6a      	ldr	r3, [pc, #424]	; (8006700 <UART_SetConfig+0x384>)
 8006556:	fba3 1302 	umull	r1, r3, r3, r2
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	2164      	movs	r1, #100	; 0x64
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	3332      	adds	r3, #50	; 0x32
 8006568:	4a65      	ldr	r2, [pc, #404]	; (8006700 <UART_SetConfig+0x384>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	f003 0207 	and.w	r2, r3, #7
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4442      	add	r2, r8
 800657a:	609a      	str	r2, [r3, #8]
 800657c:	e26f      	b.n	8006a5e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800657e:	f7fd fd5b 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 8006582:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	461d      	mov	r5, r3
 8006588:	f04f 0600 	mov.w	r6, #0
 800658c:	46a8      	mov	r8, r5
 800658e:	46b1      	mov	r9, r6
 8006590:	eb18 0308 	adds.w	r3, r8, r8
 8006594:	eb49 0409 	adc.w	r4, r9, r9
 8006598:	4698      	mov	r8, r3
 800659a:	46a1      	mov	r9, r4
 800659c:	eb18 0805 	adds.w	r8, r8, r5
 80065a0:	eb49 0906 	adc.w	r9, r9, r6
 80065a4:	f04f 0100 	mov.w	r1, #0
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065b8:	4688      	mov	r8, r1
 80065ba:	4691      	mov	r9, r2
 80065bc:	eb18 0005 	adds.w	r0, r8, r5
 80065c0:	eb49 0106 	adc.w	r1, r9, r6
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	461d      	mov	r5, r3
 80065ca:	f04f 0600 	mov.w	r6, #0
 80065ce:	196b      	adds	r3, r5, r5
 80065d0:	eb46 0406 	adc.w	r4, r6, r6
 80065d4:	461a      	mov	r2, r3
 80065d6:	4623      	mov	r3, r4
 80065d8:	f7f9 fe14 	bl	8000204 <__aeabi_uldivmod>
 80065dc:	4603      	mov	r3, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	461a      	mov	r2, r3
 80065e2:	4b47      	ldr	r3, [pc, #284]	; (8006700 <UART_SetConfig+0x384>)
 80065e4:	fba3 2302 	umull	r2, r3, r3, r2
 80065e8:	095b      	lsrs	r3, r3, #5
 80065ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	461d      	mov	r5, r3
 80065f2:	f04f 0600 	mov.w	r6, #0
 80065f6:	46a9      	mov	r9, r5
 80065f8:	46b2      	mov	sl, r6
 80065fa:	eb19 0309 	adds.w	r3, r9, r9
 80065fe:	eb4a 040a 	adc.w	r4, sl, sl
 8006602:	4699      	mov	r9, r3
 8006604:	46a2      	mov	sl, r4
 8006606:	eb19 0905 	adds.w	r9, r9, r5
 800660a:	eb4a 0a06 	adc.w	sl, sl, r6
 800660e:	f04f 0100 	mov.w	r1, #0
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800661a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800661e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006622:	4689      	mov	r9, r1
 8006624:	4692      	mov	sl, r2
 8006626:	eb19 0005 	adds.w	r0, r9, r5
 800662a:	eb4a 0106 	adc.w	r1, sl, r6
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	461d      	mov	r5, r3
 8006634:	f04f 0600 	mov.w	r6, #0
 8006638:	196b      	adds	r3, r5, r5
 800663a:	eb46 0406 	adc.w	r4, r6, r6
 800663e:	461a      	mov	r2, r3
 8006640:	4623      	mov	r3, r4
 8006642:	f7f9 fddf 	bl	8000204 <__aeabi_uldivmod>
 8006646:	4603      	mov	r3, r0
 8006648:	460c      	mov	r4, r1
 800664a:	461a      	mov	r2, r3
 800664c:	4b2c      	ldr	r3, [pc, #176]	; (8006700 <UART_SetConfig+0x384>)
 800664e:	fba3 1302 	umull	r1, r3, r3, r2
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	2164      	movs	r1, #100	; 0x64
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	3332      	adds	r3, #50	; 0x32
 8006660:	4a27      	ldr	r2, [pc, #156]	; (8006700 <UART_SetConfig+0x384>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800666e:	4498      	add	r8, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	461d      	mov	r5, r3
 8006674:	f04f 0600 	mov.w	r6, #0
 8006678:	46a9      	mov	r9, r5
 800667a:	46b2      	mov	sl, r6
 800667c:	eb19 0309 	adds.w	r3, r9, r9
 8006680:	eb4a 040a 	adc.w	r4, sl, sl
 8006684:	4699      	mov	r9, r3
 8006686:	46a2      	mov	sl, r4
 8006688:	eb19 0905 	adds.w	r9, r9, r5
 800668c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006690:	f04f 0100 	mov.w	r1, #0
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800669c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066a4:	4689      	mov	r9, r1
 80066a6:	4692      	mov	sl, r2
 80066a8:	eb19 0005 	adds.w	r0, r9, r5
 80066ac:	eb4a 0106 	adc.w	r1, sl, r6
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	461d      	mov	r5, r3
 80066b6:	f04f 0600 	mov.w	r6, #0
 80066ba:	196b      	adds	r3, r5, r5
 80066bc:	eb46 0406 	adc.w	r4, r6, r6
 80066c0:	461a      	mov	r2, r3
 80066c2:	4623      	mov	r3, r4
 80066c4:	f7f9 fd9e 	bl	8000204 <__aeabi_uldivmod>
 80066c8:	4603      	mov	r3, r0
 80066ca:	460c      	mov	r4, r1
 80066cc:	461a      	mov	r2, r3
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <UART_SetConfig+0x384>)
 80066d0:	fba3 1302 	umull	r1, r3, r3, r2
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	2164      	movs	r1, #100	; 0x64
 80066d8:	fb01 f303 	mul.w	r3, r1, r3
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	3332      	adds	r3, #50	; 0x32
 80066e2:	4a07      	ldr	r2, [pc, #28]	; (8006700 <UART_SetConfig+0x384>)
 80066e4:	fba2 2303 	umull	r2, r3, r2, r3
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	f003 0207 	and.w	r2, r3, #7
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4442      	add	r2, r8
 80066f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80066f6:	e1b2      	b.n	8006a5e <UART_SetConfig+0x6e2>
 80066f8:	40011000 	.word	0x40011000
 80066fc:	40011400 	.word	0x40011400
 8006700:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4ad7      	ldr	r2, [pc, #860]	; (8006a68 <UART_SetConfig+0x6ec>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d005      	beq.n	800671a <UART_SetConfig+0x39e>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4ad6      	ldr	r2, [pc, #856]	; (8006a6c <UART_SetConfig+0x6f0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	f040 80d1 	bne.w	80068bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800671a:	f7fd fca1 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 800671e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	469a      	mov	sl, r3
 8006724:	f04f 0b00 	mov.w	fp, #0
 8006728:	46d0      	mov	r8, sl
 800672a:	46d9      	mov	r9, fp
 800672c:	eb18 0308 	adds.w	r3, r8, r8
 8006730:	eb49 0409 	adc.w	r4, r9, r9
 8006734:	4698      	mov	r8, r3
 8006736:	46a1      	mov	r9, r4
 8006738:	eb18 080a 	adds.w	r8, r8, sl
 800673c:	eb49 090b 	adc.w	r9, r9, fp
 8006740:	f04f 0100 	mov.w	r1, #0
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800674c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006750:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006754:	4688      	mov	r8, r1
 8006756:	4691      	mov	r9, r2
 8006758:	eb1a 0508 	adds.w	r5, sl, r8
 800675c:	eb4b 0609 	adc.w	r6, fp, r9
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	4619      	mov	r1, r3
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	f04f 0300 	mov.w	r3, #0
 800676e:	f04f 0400 	mov.w	r4, #0
 8006772:	0094      	lsls	r4, r2, #2
 8006774:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006778:	008b      	lsls	r3, r1, #2
 800677a:	461a      	mov	r2, r3
 800677c:	4623      	mov	r3, r4
 800677e:	4628      	mov	r0, r5
 8006780:	4631      	mov	r1, r6
 8006782:	f7f9 fd3f 	bl	8000204 <__aeabi_uldivmod>
 8006786:	4603      	mov	r3, r0
 8006788:	460c      	mov	r4, r1
 800678a:	461a      	mov	r2, r3
 800678c:	4bb8      	ldr	r3, [pc, #736]	; (8006a70 <UART_SetConfig+0x6f4>)
 800678e:	fba3 2302 	umull	r2, r3, r3, r2
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	469b      	mov	fp, r3
 800679c:	f04f 0c00 	mov.w	ip, #0
 80067a0:	46d9      	mov	r9, fp
 80067a2:	46e2      	mov	sl, ip
 80067a4:	eb19 0309 	adds.w	r3, r9, r9
 80067a8:	eb4a 040a 	adc.w	r4, sl, sl
 80067ac:	4699      	mov	r9, r3
 80067ae:	46a2      	mov	sl, r4
 80067b0:	eb19 090b 	adds.w	r9, r9, fp
 80067b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067b8:	f04f 0100 	mov.w	r1, #0
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067cc:	4689      	mov	r9, r1
 80067ce:	4692      	mov	sl, r2
 80067d0:	eb1b 0509 	adds.w	r5, fp, r9
 80067d4:	eb4c 060a 	adc.w	r6, ip, sl
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	4619      	mov	r1, r3
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	f04f 0400 	mov.w	r4, #0
 80067ea:	0094      	lsls	r4, r2, #2
 80067ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067f0:	008b      	lsls	r3, r1, #2
 80067f2:	461a      	mov	r2, r3
 80067f4:	4623      	mov	r3, r4
 80067f6:	4628      	mov	r0, r5
 80067f8:	4631      	mov	r1, r6
 80067fa:	f7f9 fd03 	bl	8000204 <__aeabi_uldivmod>
 80067fe:	4603      	mov	r3, r0
 8006800:	460c      	mov	r4, r1
 8006802:	461a      	mov	r2, r3
 8006804:	4b9a      	ldr	r3, [pc, #616]	; (8006a70 <UART_SetConfig+0x6f4>)
 8006806:	fba3 1302 	umull	r1, r3, r3, r2
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	2164      	movs	r1, #100	; 0x64
 800680e:	fb01 f303 	mul.w	r3, r1, r3
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	3332      	adds	r3, #50	; 0x32
 8006818:	4a95      	ldr	r2, [pc, #596]	; (8006a70 <UART_SetConfig+0x6f4>)
 800681a:	fba2 2303 	umull	r2, r3, r2, r3
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006824:	4498      	add	r8, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	469b      	mov	fp, r3
 800682a:	f04f 0c00 	mov.w	ip, #0
 800682e:	46d9      	mov	r9, fp
 8006830:	46e2      	mov	sl, ip
 8006832:	eb19 0309 	adds.w	r3, r9, r9
 8006836:	eb4a 040a 	adc.w	r4, sl, sl
 800683a:	4699      	mov	r9, r3
 800683c:	46a2      	mov	sl, r4
 800683e:	eb19 090b 	adds.w	r9, r9, fp
 8006842:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006846:	f04f 0100 	mov.w	r1, #0
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006852:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006856:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800685a:	4689      	mov	r9, r1
 800685c:	4692      	mov	sl, r2
 800685e:	eb1b 0509 	adds.w	r5, fp, r9
 8006862:	eb4c 060a 	adc.w	r6, ip, sl
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	4619      	mov	r1, r3
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	f04f 0400 	mov.w	r4, #0
 8006878:	0094      	lsls	r4, r2, #2
 800687a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800687e:	008b      	lsls	r3, r1, #2
 8006880:	461a      	mov	r2, r3
 8006882:	4623      	mov	r3, r4
 8006884:	4628      	mov	r0, r5
 8006886:	4631      	mov	r1, r6
 8006888:	f7f9 fcbc 	bl	8000204 <__aeabi_uldivmod>
 800688c:	4603      	mov	r3, r0
 800688e:	460c      	mov	r4, r1
 8006890:	461a      	mov	r2, r3
 8006892:	4b77      	ldr	r3, [pc, #476]	; (8006a70 <UART_SetConfig+0x6f4>)
 8006894:	fba3 1302 	umull	r1, r3, r3, r2
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	2164      	movs	r1, #100	; 0x64
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	3332      	adds	r3, #50	; 0x32
 80068a6:	4a72      	ldr	r2, [pc, #456]	; (8006a70 <UART_SetConfig+0x6f4>)
 80068a8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	f003 020f 	and.w	r2, r3, #15
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4442      	add	r2, r8
 80068b8:	609a      	str	r2, [r3, #8]
 80068ba:	e0d0      	b.n	8006a5e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80068bc:	f7fd fbbc 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 80068c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	469a      	mov	sl, r3
 80068c6:	f04f 0b00 	mov.w	fp, #0
 80068ca:	46d0      	mov	r8, sl
 80068cc:	46d9      	mov	r9, fp
 80068ce:	eb18 0308 	adds.w	r3, r8, r8
 80068d2:	eb49 0409 	adc.w	r4, r9, r9
 80068d6:	4698      	mov	r8, r3
 80068d8:	46a1      	mov	r9, r4
 80068da:	eb18 080a 	adds.w	r8, r8, sl
 80068de:	eb49 090b 	adc.w	r9, r9, fp
 80068e2:	f04f 0100 	mov.w	r1, #0
 80068e6:	f04f 0200 	mov.w	r2, #0
 80068ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068f6:	4688      	mov	r8, r1
 80068f8:	4691      	mov	r9, r2
 80068fa:	eb1a 0508 	adds.w	r5, sl, r8
 80068fe:	eb4b 0609 	adc.w	r6, fp, r9
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	4619      	mov	r1, r3
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	f04f 0400 	mov.w	r4, #0
 8006914:	0094      	lsls	r4, r2, #2
 8006916:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800691a:	008b      	lsls	r3, r1, #2
 800691c:	461a      	mov	r2, r3
 800691e:	4623      	mov	r3, r4
 8006920:	4628      	mov	r0, r5
 8006922:	4631      	mov	r1, r6
 8006924:	f7f9 fc6e 	bl	8000204 <__aeabi_uldivmod>
 8006928:	4603      	mov	r3, r0
 800692a:	460c      	mov	r4, r1
 800692c:	461a      	mov	r2, r3
 800692e:	4b50      	ldr	r3, [pc, #320]	; (8006a70 <UART_SetConfig+0x6f4>)
 8006930:	fba3 2302 	umull	r2, r3, r3, r2
 8006934:	095b      	lsrs	r3, r3, #5
 8006936:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	469b      	mov	fp, r3
 800693e:	f04f 0c00 	mov.w	ip, #0
 8006942:	46d9      	mov	r9, fp
 8006944:	46e2      	mov	sl, ip
 8006946:	eb19 0309 	adds.w	r3, r9, r9
 800694a:	eb4a 040a 	adc.w	r4, sl, sl
 800694e:	4699      	mov	r9, r3
 8006950:	46a2      	mov	sl, r4
 8006952:	eb19 090b 	adds.w	r9, r9, fp
 8006956:	eb4a 0a0c 	adc.w	sl, sl, ip
 800695a:	f04f 0100 	mov.w	r1, #0
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006966:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800696a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800696e:	4689      	mov	r9, r1
 8006970:	4692      	mov	sl, r2
 8006972:	eb1b 0509 	adds.w	r5, fp, r9
 8006976:	eb4c 060a 	adc.w	r6, ip, sl
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4619      	mov	r1, r3
 8006980:	f04f 0200 	mov.w	r2, #0
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	f04f 0400 	mov.w	r4, #0
 800698c:	0094      	lsls	r4, r2, #2
 800698e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006992:	008b      	lsls	r3, r1, #2
 8006994:	461a      	mov	r2, r3
 8006996:	4623      	mov	r3, r4
 8006998:	4628      	mov	r0, r5
 800699a:	4631      	mov	r1, r6
 800699c:	f7f9 fc32 	bl	8000204 <__aeabi_uldivmod>
 80069a0:	4603      	mov	r3, r0
 80069a2:	460c      	mov	r4, r1
 80069a4:	461a      	mov	r2, r3
 80069a6:	4b32      	ldr	r3, [pc, #200]	; (8006a70 <UART_SetConfig+0x6f4>)
 80069a8:	fba3 1302 	umull	r1, r3, r3, r2
 80069ac:	095b      	lsrs	r3, r3, #5
 80069ae:	2164      	movs	r1, #100	; 0x64
 80069b0:	fb01 f303 	mul.w	r3, r1, r3
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	3332      	adds	r3, #50	; 0x32
 80069ba:	4a2d      	ldr	r2, [pc, #180]	; (8006a70 <UART_SetConfig+0x6f4>)
 80069bc:	fba2 2303 	umull	r2, r3, r2, r3
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069c6:	4498      	add	r8, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	469b      	mov	fp, r3
 80069cc:	f04f 0c00 	mov.w	ip, #0
 80069d0:	46d9      	mov	r9, fp
 80069d2:	46e2      	mov	sl, ip
 80069d4:	eb19 0309 	adds.w	r3, r9, r9
 80069d8:	eb4a 040a 	adc.w	r4, sl, sl
 80069dc:	4699      	mov	r9, r3
 80069de:	46a2      	mov	sl, r4
 80069e0:	eb19 090b 	adds.w	r9, r9, fp
 80069e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069e8:	f04f 0100 	mov.w	r1, #0
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069fc:	4689      	mov	r9, r1
 80069fe:	4692      	mov	sl, r2
 8006a00:	eb1b 0509 	adds.w	r5, fp, r9
 8006a04:	eb4c 060a 	adc.w	r6, ip, sl
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f04f 0200 	mov.w	r2, #0
 8006a12:	f04f 0300 	mov.w	r3, #0
 8006a16:	f04f 0400 	mov.w	r4, #0
 8006a1a:	0094      	lsls	r4, r2, #2
 8006a1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a20:	008b      	lsls	r3, r1, #2
 8006a22:	461a      	mov	r2, r3
 8006a24:	4623      	mov	r3, r4
 8006a26:	4628      	mov	r0, r5
 8006a28:	4631      	mov	r1, r6
 8006a2a:	f7f9 fbeb 	bl	8000204 <__aeabi_uldivmod>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	460c      	mov	r4, r1
 8006a32:	461a      	mov	r2, r3
 8006a34:	4b0e      	ldr	r3, [pc, #56]	; (8006a70 <UART_SetConfig+0x6f4>)
 8006a36:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	2164      	movs	r1, #100	; 0x64
 8006a3e:	fb01 f303 	mul.w	r3, r1, r3
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	3332      	adds	r3, #50	; 0x32
 8006a48:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <UART_SetConfig+0x6f4>)
 8006a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	f003 020f 	and.w	r2, r3, #15
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4442      	add	r2, r8
 8006a5a:	609a      	str	r2, [r3, #8]
}
 8006a5c:	e7ff      	b.n	8006a5e <UART_SetConfig+0x6e2>
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a68:	40011000 	.word	0x40011000
 8006a6c:	40011400 	.word	0x40011400
 8006a70:	51eb851f 	.word	0x51eb851f

08006a74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a78:	4904      	ldr	r1, [pc, #16]	; (8006a8c <MX_FATFS_Init+0x18>)
 8006a7a:	4805      	ldr	r0, [pc, #20]	; (8006a90 <MX_FATFS_Init+0x1c>)
 8006a7c:	f002 fb4c 	bl	8009118 <FATFS_LinkDriver>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <MX_FATFS_Init+0x20>)
 8006a86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006a88:	bf00      	nop
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20000a90 	.word	0x20000a90
 8006a90:	20000034 	.word	0x20000034
 8006a94:	20000a94 	.word	0x20000a94

08006a98 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fb fe95 	bl	80027e4 <USER_SPI_initialize>
 8006aba:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fb ff67 	bl	80029a4 <USER_SPI_status>
 8006ad6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	607a      	str	r2, [r7, #4]
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006af0:	7bf8      	ldrb	r0, [r7, #15]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	68b9      	ldr	r1, [r7, #8]
 8006af8:	f7fb ff6a 	bl	80029d0 <USER_SPI_read>
 8006afc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
 8006b12:	4603      	mov	r3, r0
 8006b14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */


    return USER_SPI_write(pdrv, buff, sector, count);
 8006b16:	7bf8      	ldrb	r0, [r7, #15]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	f7fb ffbd 	bl	8002a9c <USER_SPI_write>
 8006b22:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	603a      	str	r2, [r7, #0]
 8006b36:	71fb      	strb	r3, [r7, #7]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006b3c:	79b9      	ldrb	r1, [r7, #6]
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fc f826 	bl	8002b94 <USER_SPI_ioctl>
 8006b48:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	4a08      	ldr	r2, [pc, #32]	; (8006b84 <disk_status+0x30>)
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	79fa      	ldrb	r2, [r7, #7]
 8006b6c:	4905      	ldr	r1, [pc, #20]	; (8006b84 <disk_status+0x30>)
 8006b6e:	440a      	add	r2, r1
 8006b70:	7a12      	ldrb	r2, [r2, #8]
 8006b72:	4610      	mov	r0, r2
 8006b74:	4798      	blx	r3
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	200000a0 	.word	0x200000a0

08006b88 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006b96:	79fb      	ldrb	r3, [r7, #7]
 8006b98:	4a0d      	ldr	r2, [pc, #52]	; (8006bd0 <disk_initialize+0x48>)
 8006b9a:	5cd3      	ldrb	r3, [r2, r3]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d111      	bne.n	8006bc4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	4a0b      	ldr	r2, [pc, #44]	; (8006bd0 <disk_initialize+0x48>)
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	4a09      	ldr	r2, [pc, #36]	; (8006bd0 <disk_initialize+0x48>)
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	79fa      	ldrb	r2, [r7, #7]
 8006bb6:	4906      	ldr	r1, [pc, #24]	; (8006bd0 <disk_initialize+0x48>)
 8006bb8:	440a      	add	r2, r1
 8006bba:	7a12      	ldrb	r2, [r2, #8]
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4798      	blx	r3
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	200000a0 	.word	0x200000a0

08006bd4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006bd4:	b590      	push	{r4, r7, lr}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	607a      	str	r2, [r7, #4]
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	4a0a      	ldr	r2, [pc, #40]	; (8006c10 <disk_read+0x3c>)
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	689c      	ldr	r4, [r3, #8]
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	4a07      	ldr	r2, [pc, #28]	; (8006c10 <disk_read+0x3c>)
 8006bf4:	4413      	add	r3, r2
 8006bf6:	7a18      	ldrb	r0, [r3, #8]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	47a0      	blx	r4
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd90      	pop	{r4, r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	200000a0 	.word	0x200000a0

08006c14 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c14:	b590      	push	{r4, r7, lr}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	4603      	mov	r3, r0
 8006c22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	4a0a      	ldr	r2, [pc, #40]	; (8006c50 <disk_write+0x3c>)
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	68dc      	ldr	r4, [r3, #12]
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	4a07      	ldr	r2, [pc, #28]	; (8006c50 <disk_write+0x3c>)
 8006c34:	4413      	add	r3, r2
 8006c36:	7a18      	ldrb	r0, [r3, #8]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	47a0      	blx	r4
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd90      	pop	{r4, r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	200000a0 	.word	0x200000a0

08006c54 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	603a      	str	r2, [r7, #0]
 8006c5e:	71fb      	strb	r3, [r7, #7]
 8006c60:	460b      	mov	r3, r1
 8006c62:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <disk_ioctl+0x38>)
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	79fa      	ldrb	r2, [r7, #7]
 8006c72:	4906      	ldr	r1, [pc, #24]	; (8006c8c <disk_ioctl+0x38>)
 8006c74:	440a      	add	r2, r1
 8006c76:	7a10      	ldrb	r0, [r2, #8]
 8006c78:	79b9      	ldrb	r1, [r7, #6]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	4798      	blx	r3
 8006c7e:	4603      	mov	r3, r0
 8006c80:	73fb      	strb	r3, [r7, #15]
  return res;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	200000a0 	.word	0x200000a0

08006c90 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006ca0:	89fb      	ldrh	r3, [r7, #14]
 8006ca2:	021b      	lsls	r3, r3, #8
 8006ca4:	b21a      	sxth	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	b21b      	sxth	r3, r3
 8006cac:	4313      	orrs	r3, r2
 8006cae:	b21b      	sxth	r3, r3
 8006cb0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006cb2:	89fb      	ldrh	r3, [r7, #14]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3303      	adds	r3, #3
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	021b      	lsls	r3, r3, #8
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	3202      	adds	r2, #2
 8006cd8:	7812      	ldrb	r2, [r2, #0]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	3201      	adds	r2, #1
 8006ce6:	7812      	ldrb	r2, [r2, #0]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	7812      	ldrb	r2, [r2, #0]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
	return rv;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	887a      	ldrh	r2, [r7, #2]
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	887b      	ldrh	r3, [r7, #2]
 8006d20:	0a1b      	lsrs	r3, r3, #8
 8006d22:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	607a      	str	r2, [r7, #4]
 8006d2a:	887a      	ldrh	r2, [r7, #2]
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	0a1b      	lsrs	r3, r3, #8
 8006d56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	701a      	strb	r2, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	0a1b      	lsrs	r3, r3, #8
 8006d7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	b2d2      	uxtb	r2, r2
 8006d86:	701a      	strb	r2, [r3, #0]
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00d      	beq.n	8006dca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	1c53      	adds	r3, r2, #1
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	1c59      	adds	r1, r3, #1
 8006db8:	6179      	str	r1, [r7, #20]
 8006dba:	7812      	ldrb	r2, [r2, #0]
 8006dbc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1f1      	bne.n	8006dae <mem_cpy+0x1a>
	}
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006dd6:	b480      	push	{r7}
 8006dd8:	b087      	sub	sp, #28
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	617a      	str	r2, [r7, #20]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	607b      	str	r3, [r7, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f3      	bne.n	8006de6 <mem_set+0x10>
}
 8006dfe:	bf00      	nop
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006e0a:	b480      	push	{r7}
 8006e0c:	b089      	sub	sp, #36	; 0x24
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	61fb      	str	r3, [r7, #28]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	61fa      	str	r2, [r7, #28]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	61ba      	str	r2, [r7, #24]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	1acb      	subs	r3, r1, r3
 8006e36:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <mem_cmp+0x40>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0eb      	beq.n	8006e22 <mem_cmp+0x18>

	return r;
 8006e4a:	697b      	ldr	r3, [r7, #20]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3724      	adds	r7, #36	; 0x24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006e62:	e002      	b.n	8006e6a <chk_chr+0x12>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3301      	adds	r3, #1
 8006e68:	607b      	str	r3, [r7, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <chk_chr+0x26>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d1f2      	bne.n	8006e64 <chk_chr+0xc>
	return *str;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	781b      	ldrb	r3, [r3, #0]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
	...

08006e90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60bb      	str	r3, [r7, #8]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	e029      	b.n	8006ef8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006ea4:	4a27      	ldr	r2, [pc, #156]	; (8006f44 <chk_lock+0xb4>)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	011b      	lsls	r3, r3, #4
 8006eaa:	4413      	add	r3, r2
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01d      	beq.n	8006eee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006eb2:	4a24      	ldr	r2, [pc, #144]	; (8006f44 <chk_lock+0xb4>)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	4413      	add	r3, r2
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d116      	bne.n	8006ef2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006ec4:	4a1f      	ldr	r2, [pc, #124]	; (8006f44 <chk_lock+0xb4>)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	4413      	add	r3, r2
 8006ecc:	3304      	adds	r3, #4
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d10c      	bne.n	8006ef2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ed8:	4a1a      	ldr	r2, [pc, #104]	; (8006f44 <chk_lock+0xb4>)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	4413      	add	r3, r2
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d102      	bne.n	8006ef2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006eec:	e007      	b.n	8006efe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d9d2      	bls.n	8006ea4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d109      	bne.n	8006f18 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <chk_lock+0x80>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d101      	bne.n	8006f14 <chk_lock+0x84>
 8006f10:	2300      	movs	r3, #0
 8006f12:	e010      	b.n	8006f36 <chk_lock+0xa6>
 8006f14:	2312      	movs	r3, #18
 8006f16:	e00e      	b.n	8006f36 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d108      	bne.n	8006f30 <chk_lock+0xa0>
 8006f1e:	4a09      	ldr	r2, [pc, #36]	; (8006f44 <chk_lock+0xb4>)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	4413      	add	r3, r2
 8006f26:	330c      	adds	r3, #12
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2e:	d101      	bne.n	8006f34 <chk_lock+0xa4>
 8006f30:	2310      	movs	r3, #16
 8006f32:	e000      	b.n	8006f36 <chk_lock+0xa6>
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000080 	.word	0x20000080

08006f48 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	607b      	str	r3, [r7, #4]
 8006f52:	e002      	b.n	8006f5a <enq_lock+0x12>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3301      	adds	r3, #1
 8006f58:	607b      	str	r3, [r7, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d806      	bhi.n	8006f6e <enq_lock+0x26>
 8006f60:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <enq_lock+0x40>)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	011b      	lsls	r3, r3, #4
 8006f66:	4413      	add	r3, r2
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f2      	bne.n	8006f54 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	bf14      	ite	ne
 8006f74:	2301      	movne	r3, #1
 8006f76:	2300      	moveq	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000080 	.word	0x20000080

08006f8c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	e01f      	b.n	8006fdc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006f9c:	4a41      	ldr	r2, [pc, #260]	; (80070a4 <inc_lock+0x118>)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	4413      	add	r3, r2
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d113      	bne.n	8006fd6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006fae:	4a3d      	ldr	r2, [pc, #244]	; (80070a4 <inc_lock+0x118>)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	4413      	add	r3, r2
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d109      	bne.n	8006fd6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006fc2:	4a38      	ldr	r2, [pc, #224]	; (80070a4 <inc_lock+0x118>)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	4413      	add	r3, r2
 8006fca:	3308      	adds	r3, #8
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d006      	beq.n	8006fe4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d9dc      	bls.n	8006f9c <inc_lock+0x10>
 8006fe2:	e000      	b.n	8006fe6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006fe4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d132      	bne.n	8007052 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e002      	b.n	8006ff8 <inc_lock+0x6c>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d806      	bhi.n	800700c <inc_lock+0x80>
 8006ffe:	4a29      	ldr	r2, [pc, #164]	; (80070a4 <inc_lock+0x118>)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	4413      	add	r3, r2
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1f2      	bne.n	8006ff2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d101      	bne.n	8007016 <inc_lock+0x8a>
 8007012:	2300      	movs	r3, #0
 8007014:	e040      	b.n	8007098 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4922      	ldr	r1, [pc, #136]	; (80070a4 <inc_lock+0x118>)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	440b      	add	r3, r1
 8007022:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	491e      	ldr	r1, [pc, #120]	; (80070a4 <inc_lock+0x118>)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	440b      	add	r3, r1
 8007030:	3304      	adds	r3, #4
 8007032:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	695a      	ldr	r2, [r3, #20]
 8007038:	491a      	ldr	r1, [pc, #104]	; (80070a4 <inc_lock+0x118>)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	440b      	add	r3, r1
 8007040:	3308      	adds	r3, #8
 8007042:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007044:	4a17      	ldr	r2, [pc, #92]	; (80070a4 <inc_lock+0x118>)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	4413      	add	r3, r2
 800704c:	330c      	adds	r3, #12
 800704e:	2200      	movs	r2, #0
 8007050:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <inc_lock+0xe0>
 8007058:	4a12      	ldr	r2, [pc, #72]	; (80070a4 <inc_lock+0x118>)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	4413      	add	r3, r2
 8007060:	330c      	adds	r3, #12
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <inc_lock+0xe0>
 8007068:	2300      	movs	r3, #0
 800706a:	e015      	b.n	8007098 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d108      	bne.n	8007084 <inc_lock+0xf8>
 8007072:	4a0c      	ldr	r2, [pc, #48]	; (80070a4 <inc_lock+0x118>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	4413      	add	r3, r2
 800707a:	330c      	adds	r3, #12
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	3301      	adds	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	e001      	b.n	8007088 <inc_lock+0xfc>
 8007084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007088:	4906      	ldr	r1, [pc, #24]	; (80070a4 <inc_lock+0x118>)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	440b      	add	r3, r1
 8007090:	330c      	adds	r3, #12
 8007092:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3301      	adds	r3, #1
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	20000080 	.word	0x20000080

080070a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	607b      	str	r3, [r7, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d825      	bhi.n	8007108 <dec_lock+0x60>
		n = Files[i].ctr;
 80070bc:	4a17      	ldr	r2, [pc, #92]	; (800711c <dec_lock+0x74>)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	4413      	add	r3, r2
 80070c4:	330c      	adds	r3, #12
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80070ca:	89fb      	ldrh	r3, [r7, #14]
 80070cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d0:	d101      	bne.n	80070d6 <dec_lock+0x2e>
 80070d2:	2300      	movs	r3, #0
 80070d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80070d6:	89fb      	ldrh	r3, [r7, #14]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <dec_lock+0x3a>
 80070dc:	89fb      	ldrh	r3, [r7, #14]
 80070de:	3b01      	subs	r3, #1
 80070e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80070e2:	4a0e      	ldr	r2, [pc, #56]	; (800711c <dec_lock+0x74>)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	4413      	add	r3, r2
 80070ea:	330c      	adds	r3, #12
 80070ec:	89fa      	ldrh	r2, [r7, #14]
 80070ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80070f0:	89fb      	ldrh	r3, [r7, #14]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d105      	bne.n	8007102 <dec_lock+0x5a>
 80070f6:	4a09      	ldr	r2, [pc, #36]	; (800711c <dec_lock+0x74>)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	4413      	add	r3, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	737b      	strb	r3, [r7, #13]
 8007106:	e001      	b.n	800710c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007108:	2302      	movs	r3, #2
 800710a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800710c:	7b7b      	ldrb	r3, [r7, #13]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	20000080 	.word	0x20000080

08007120 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e010      	b.n	8007150 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800712e:	4a0d      	ldr	r2, [pc, #52]	; (8007164 <clear_lock+0x44>)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	4413      	add	r3, r2
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	429a      	cmp	r2, r3
 800713c:	d105      	bne.n	800714a <clear_lock+0x2a>
 800713e:	4a09      	ldr	r2, [pc, #36]	; (8007164 <clear_lock+0x44>)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	4413      	add	r3, r2
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d9eb      	bls.n	800712e <clear_lock+0xe>
	}
}
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000080 	.word	0x20000080

08007168 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	78db      	ldrb	r3, [r3, #3]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d034      	beq.n	80071e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	7858      	ldrb	r0, [r3, #1]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800718c:	2301      	movs	r3, #1
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	f7ff fd40 	bl	8006c14 <disk_write>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800719a:	2301      	movs	r3, #1
 800719c:	73fb      	strb	r3, [r7, #15]
 800719e:	e022      	b.n	80071e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	1ad2      	subs	r2, r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d217      	bcs.n	80071e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	789b      	ldrb	r3, [r3, #2]
 80071ba:	613b      	str	r3, [r7, #16]
 80071bc:	e010      	b.n	80071e0 <sync_window+0x78>
					wsect += fs->fsize;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7858      	ldrb	r0, [r3, #1]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071d2:	2301      	movs	r3, #1
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	f7ff fd1d 	bl	8006c14 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	3b01      	subs	r3, #1
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d8eb      	bhi.n	80071be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	d01b      	beq.n	8007240 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff ffad 	bl	8007168 <sync_window>
 800720e:	4603      	mov	r3, r0
 8007210:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d113      	bne.n	8007240 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7858      	ldrb	r0, [r3, #1]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007222:	2301      	movs	r3, #1
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	f7ff fcd5 	bl	8006bd4 <disk_read>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d004      	beq.n	800723a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007234:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007236:	2301      	movs	r3, #1
 8007238:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff ff87 	bl	8007168 <sync_window>
 800725a:	4603      	mov	r3, r0
 800725c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800725e:	7bfb      	ldrb	r3, [r7, #15]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d158      	bne.n	8007316 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	2b03      	cmp	r3, #3
 800726a:	d148      	bne.n	80072fe <sync_fs+0xb2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	791b      	ldrb	r3, [r3, #4]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d144      	bne.n	80072fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3330      	adds	r3, #48	; 0x30
 8007278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800727c:	2100      	movs	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff fda9 	bl	8006dd6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3330      	adds	r3, #48	; 0x30
 8007288:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800728c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff fd38 	bl	8006d06 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3330      	adds	r3, #48	; 0x30
 800729a:	4921      	ldr	r1, [pc, #132]	; (8007320 <sync_fs+0xd4>)
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff fd4d 	bl	8006d3c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3330      	adds	r3, #48	; 0x30
 80072a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80072aa:	491e      	ldr	r1, [pc, #120]	; (8007324 <sync_fs+0xd8>)
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff fd45 	bl	8006d3c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3330      	adds	r3, #48	; 0x30
 80072b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7ff fd3b 	bl	8006d3c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3330      	adds	r3, #48	; 0x30
 80072ca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	4619      	mov	r1, r3
 80072d4:	4610      	mov	r0, r2
 80072d6:	f7ff fd31 	bl	8006d3c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7858      	ldrb	r0, [r3, #1]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f2:	2301      	movs	r3, #1
 80072f4:	f7ff fc8e 	bl	8006c14 <disk_write>
			fs->fsi_flag = 0;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	2200      	movs	r2, #0
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff fca4 	bl	8006c54 <disk_ioctl>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <sync_fs+0xca>
 8007312:	2301      	movs	r3, #1
 8007314:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	41615252 	.word	0x41615252
 8007324:	61417272 	.word	0x61417272

08007328 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	3b02      	subs	r3, #2
 8007336:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	3b02      	subs	r3, #2
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d301      	bcc.n	8007348 <clust2sect+0x20>
 8007344:	2300      	movs	r3, #0
 8007346:	e008      	b.n	800735a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	895b      	ldrh	r3, [r3, #10]
 800734c:	461a      	mov	r2, r3
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	fb03 f202 	mul.w	r2, r3, r2
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	4413      	add	r3, r2
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b086      	sub	sp, #24
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d904      	bls.n	8007386 <get_fat+0x20>
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d302      	bcc.n	800738c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007386:	2301      	movs	r3, #1
 8007388:	617b      	str	r3, [r7, #20]
 800738a:	e08c      	b.n	80074a6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800738c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007390:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d045      	beq.n	8007426 <get_fat+0xc0>
 800739a:	2b03      	cmp	r3, #3
 800739c:	d05d      	beq.n	800745a <get_fat+0xf4>
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d177      	bne.n	8007492 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	085b      	lsrs	r3, r3, #1
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	6a1a      	ldr	r2, [r3, #32]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	0a5b      	lsrs	r3, r3, #9
 80073b8:	4413      	add	r3, r2
 80073ba:	4619      	mov	r1, r3
 80073bc:	6938      	ldr	r0, [r7, #16]
 80073be:	f7ff ff17 	bl	80071f0 <move_window>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d167      	bne.n	8007498 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	60fa      	str	r2, [r7, #12]
 80073ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4413      	add	r3, r2
 80073d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073da:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	6a1a      	ldr	r2, [r3, #32]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	0a5b      	lsrs	r3, r3, #9
 80073e4:	4413      	add	r3, r2
 80073e6:	4619      	mov	r1, r3
 80073e8:	6938      	ldr	r0, [r7, #16]
 80073ea:	f7ff ff01 	bl	80071f0 <move_window>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d153      	bne.n	800749c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4413      	add	r3, r2
 80073fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007402:	021b      	lsls	r3, r3, #8
 8007404:	461a      	mov	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4313      	orrs	r3, r2
 800740a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <get_fat+0xb6>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	091b      	lsrs	r3, r3, #4
 800741a:	e002      	b.n	8007422 <get_fat+0xbc>
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007422:	617b      	str	r3, [r7, #20]
			break;
 8007424:	e03f      	b.n	80074a6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6a1a      	ldr	r2, [r3, #32]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	0a1b      	lsrs	r3, r3, #8
 800742e:	4413      	add	r3, r2
 8007430:	4619      	mov	r1, r3
 8007432:	6938      	ldr	r0, [r7, #16]
 8007434:	f7ff fedc 	bl	80071f0 <move_window>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d130      	bne.n	80074a0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800744c:	4413      	add	r3, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fc1e 	bl	8006c90 <ld_word>
 8007454:	4603      	mov	r3, r0
 8007456:	617b      	str	r3, [r7, #20]
			break;
 8007458:	e025      	b.n	80074a6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	09db      	lsrs	r3, r3, #7
 8007462:	4413      	add	r3, r2
 8007464:	4619      	mov	r1, r3
 8007466:	6938      	ldr	r0, [r7, #16]
 8007468:	f7ff fec2 	bl	80071f0 <move_window>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d118      	bne.n	80074a4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007480:	4413      	add	r3, r2
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fc1c 	bl	8006cc0 <ld_dword>
 8007488:	4603      	mov	r3, r0
 800748a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800748e:	617b      	str	r3, [r7, #20]
			break;
 8007490:	e009      	b.n	80074a6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007492:	2301      	movs	r3, #1
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	e006      	b.n	80074a6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007498:	bf00      	nop
 800749a:	e004      	b.n	80074a6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800749c:	bf00      	nop
 800749e:	e002      	b.n	80074a6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074a0:	bf00      	nop
 80074a2:	e000      	b.n	80074a6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074a4:	bf00      	nop
		}
	}

	return val;
 80074a6:	697b      	ldr	r3, [r7, #20]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80074b0:	b590      	push	{r4, r7, lr}
 80074b2:	b089      	sub	sp, #36	; 0x24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80074bc:	2302      	movs	r3, #2
 80074be:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	f240 80d6 	bls.w	8007674 <put_fat+0x1c4>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	f080 80d0 	bcs.w	8007674 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d073      	beq.n	80075c4 <put_fat+0x114>
 80074dc:	2b03      	cmp	r3, #3
 80074de:	f000 8091 	beq.w	8007604 <put_fat+0x154>
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	f040 80c6 	bne.w	8007674 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	4413      	add	r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a1a      	ldr	r2, [r3, #32]
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	0a5b      	lsrs	r3, r3, #9
 80074fe:	4413      	add	r3, r2
 8007500:	4619      	mov	r1, r3
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f7ff fe74 	bl	80071f0 <move_window>
 8007508:	4603      	mov	r3, r0
 800750a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800750c:	7ffb      	ldrb	r3, [r7, #31]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f040 80a9 	bne.w	8007666 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	1c59      	adds	r1, r3, #1
 800751e:	61b9      	str	r1, [r7, #24]
 8007520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007524:	4413      	add	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00d      	beq.n	800754e <put_fat+0x9e>
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b25b      	sxtb	r3, r3
 8007538:	f003 030f 	and.w	r3, r3, #15
 800753c:	b25a      	sxtb	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	b25b      	sxtb	r3, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	b25b      	sxtb	r3, r3
 800754a:	b2db      	uxtb	r3, r3
 800754c:	e001      	b.n	8007552 <put_fat+0xa2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6a1a      	ldr	r2, [r3, #32]
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	0a5b      	lsrs	r3, r3, #9
 8007564:	4413      	add	r3, r2
 8007566:	4619      	mov	r1, r3
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f7ff fe41 	bl	80071f0 <move_window>
 800756e:	4603      	mov	r3, r0
 8007570:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007572:	7ffb      	ldrb	r3, [r7, #31]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d178      	bne.n	800766a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007584:	4413      	add	r3, r2
 8007586:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <put_fat+0xea>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	091b      	lsrs	r3, r3, #4
 8007596:	b2db      	uxtb	r3, r3
 8007598:	e00e      	b.n	80075b8 <put_fat+0x108>
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	b25b      	sxtb	r3, r3
 80075a0:	f023 030f 	bic.w	r3, r3, #15
 80075a4:	b25a      	sxtb	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	0a1b      	lsrs	r3, r3, #8
 80075aa:	b25b      	sxtb	r3, r3
 80075ac:	f003 030f 	and.w	r3, r3, #15
 80075b0:	b25b      	sxtb	r3, r3
 80075b2:	4313      	orrs	r3, r2
 80075b4:	b25b      	sxtb	r3, r3
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2201      	movs	r2, #1
 80075c0:	70da      	strb	r2, [r3, #3]
			break;
 80075c2:	e057      	b.n	8007674 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6a1a      	ldr	r2, [r3, #32]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	4413      	add	r3, r2
 80075ce:	4619      	mov	r1, r3
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff fe0d 	bl	80071f0 <move_window>
 80075d6:	4603      	mov	r3, r0
 80075d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075da:	7ffb      	ldrb	r3, [r7, #31]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d146      	bne.n	800766e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80075ee:	4413      	add	r3, r2
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	b292      	uxth	r2, r2
 80075f4:	4611      	mov	r1, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff fb85 	bl	8006d06 <st_word>
			fs->wflag = 1;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2201      	movs	r2, #1
 8007600:	70da      	strb	r2, [r3, #3]
			break;
 8007602:	e037      	b.n	8007674 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1a      	ldr	r2, [r3, #32]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	09db      	lsrs	r3, r3, #7
 800760c:	4413      	add	r3, r2
 800760e:	4619      	mov	r1, r3
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f7ff fded 	bl	80071f0 <move_window>
 8007616:	4603      	mov	r3, r0
 8007618:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800761a:	7ffb      	ldrb	r3, [r7, #31]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d128      	bne.n	8007672 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007634:	4413      	add	r3, r2
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff fb42 	bl	8006cc0 <ld_dword>
 800763c:	4603      	mov	r3, r0
 800763e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007642:	4323      	orrs	r3, r4
 8007644:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007654:	4413      	add	r3, r2
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff fb6f 	bl	8006d3c <st_dword>
			fs->wflag = 1;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2201      	movs	r2, #1
 8007662:	70da      	strb	r2, [r3, #3]
			break;
 8007664:	e006      	b.n	8007674 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007666:	bf00      	nop
 8007668:	e004      	b.n	8007674 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800766a:	bf00      	nop
 800766c:	e002      	b.n	8007674 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800766e:	bf00      	nop
 8007670:	e000      	b.n	8007674 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007672:	bf00      	nop
		}
	}
	return res;
 8007674:	7ffb      	ldrb	r3, [r7, #31]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3724      	adds	r7, #36	; 0x24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd90      	pop	{r4, r7, pc}

0800767e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b088      	sub	sp, #32
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d904      	bls.n	80076a4 <remove_chain+0x26>
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d301      	bcc.n	80076a8 <remove_chain+0x2a>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e04b      	b.n	8007740 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00c      	beq.n	80076c8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80076ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	69b8      	ldr	r0, [r7, #24]
 80076b6:	f7ff fefb 	bl	80074b0 <put_fat>
 80076ba:	4603      	mov	r3, r0
 80076bc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80076be:	7ffb      	ldrb	r3, [r7, #31]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <remove_chain+0x4a>
 80076c4:	7ffb      	ldrb	r3, [r7, #31]
 80076c6:	e03b      	b.n	8007740 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff fe4b 	bl	8007366 <get_fat>
 80076d0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d031      	beq.n	800773c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <remove_chain+0x64>
 80076de:	2302      	movs	r3, #2
 80076e0:	e02e      	b.n	8007740 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e8:	d101      	bne.n	80076ee <remove_chain+0x70>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e028      	b.n	8007740 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80076ee:	2200      	movs	r2, #0
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	69b8      	ldr	r0, [r7, #24]
 80076f4:	f7ff fedc 	bl	80074b0 <put_fat>
 80076f8:	4603      	mov	r3, r0
 80076fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80076fc:	7ffb      	ldrb	r3, [r7, #31]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <remove_chain+0x88>
 8007702:	7ffb      	ldrb	r3, [r7, #31]
 8007704:	e01c      	b.n	8007740 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	3b02      	subs	r3, #2
 8007710:	429a      	cmp	r2, r3
 8007712:	d20b      	bcs.n	800772c <remove_chain+0xae>
			fs->free_clst++;
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	791b      	ldrb	r3, [r3, #4]
 8007722:	f043 0301 	orr.w	r3, r3, #1
 8007726:	b2da      	uxtb	r2, r3
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	429a      	cmp	r2, r3
 8007738:	d3c6      	bcc.n	80076c8 <remove_chain+0x4a>
 800773a:	e000      	b.n	800773e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800773c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3720      	adds	r7, #32
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10d      	bne.n	800777a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <create_chain+0x2c>
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	429a      	cmp	r2, r3
 8007772:	d31b      	bcc.n	80077ac <create_chain+0x64>
 8007774:	2301      	movs	r3, #1
 8007776:	61bb      	str	r3, [r7, #24]
 8007778:	e018      	b.n	80077ac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff fdf2 	bl	8007366 <get_fat>
 8007782:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d801      	bhi.n	800778e <create_chain+0x46>
 800778a:	2301      	movs	r3, #1
 800778c:	e070      	b.n	8007870 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007794:	d101      	bne.n	800779a <create_chain+0x52>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	e06a      	b.n	8007870 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d201      	bcs.n	80077a8 <create_chain+0x60>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	e063      	b.n	8007870 <create_chain+0x128>
		scl = clst;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	3301      	adds	r3, #1
 80077b4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d307      	bcc.n	80077d0 <create_chain+0x88>
				ncl = 2;
 80077c0:	2302      	movs	r3, #2
 80077c2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d901      	bls.n	80077d0 <create_chain+0x88>
 80077cc:	2300      	movs	r3, #0
 80077ce:	e04f      	b.n	8007870 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80077d0:	69f9      	ldr	r1, [r7, #28]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7ff fdc7 	bl	8007366 <get_fat>
 80077d8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00e      	beq.n	80077fe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d003      	beq.n	80077ee <create_chain+0xa6>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ec:	d101      	bne.n	80077f2 <create_chain+0xaa>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	e03e      	b.n	8007870 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d1da      	bne.n	80077b0 <create_chain+0x68>
 80077fa:	2300      	movs	r3, #0
 80077fc:	e038      	b.n	8007870 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80077fe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007804:	69f9      	ldr	r1, [r7, #28]
 8007806:	6938      	ldr	r0, [r7, #16]
 8007808:	f7ff fe52 	bl	80074b0 <put_fat>
 800780c:	4603      	mov	r3, r0
 800780e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <create_chain+0xe2>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d006      	beq.n	800782a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6938      	ldr	r0, [r7, #16]
 8007822:	f7ff fe45 	bl	80074b0 <put_fat>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800782a:	7dfb      	ldrb	r3, [r7, #23]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d116      	bne.n	800785e <create_chain+0x116>
		fs->last_clst = ncl;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	3b02      	subs	r3, #2
 8007840:	429a      	cmp	r2, r3
 8007842:	d804      	bhi.n	800784e <create_chain+0x106>
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	1e5a      	subs	r2, r3, #1
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	791b      	ldrb	r3, [r3, #4]
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	b2da      	uxtb	r2, r3
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	711a      	strb	r2, [r3, #4]
 800785c:	e007      	b.n	800786e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d102      	bne.n	800786a <create_chain+0x122>
 8007864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007868:	e000      	b.n	800786c <create_chain+0x124>
 800786a:	2301      	movs	r3, #1
 800786c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800786e:	69fb      	ldr	r3, [r7, #28]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788c:	3304      	adds	r3, #4
 800788e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	0a5b      	lsrs	r3, r3, #9
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	8952      	ldrh	r2, [r2, #10]
 8007898:	fbb3 f3f2 	udiv	r3, r3, r2
 800789c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1d1a      	adds	r2, r3, #4
 80078a2:	613a      	str	r2, [r7, #16]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <clmt_clust+0x3a>
 80078ae:	2300      	movs	r3, #0
 80078b0:	e010      	b.n	80078d4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d307      	bcc.n	80078ca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	3304      	adds	r3, #4
 80078c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078c8:	e7e9      	b.n	800789e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80078ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	4413      	add	r3, r2
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078f6:	d204      	bcs.n	8007902 <dir_sdi+0x22>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	f003 031f 	and.w	r3, r3, #31
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007902:	2302      	movs	r3, #2
 8007904:	e063      	b.n	80079ce <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d106      	bne.n	8007926 <dir_sdi+0x46>
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d902      	bls.n	8007926 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10c      	bne.n	8007946 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	095b      	lsrs	r3, r3, #5
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	8912      	ldrh	r2, [r2, #8]
 8007934:	4293      	cmp	r3, r2
 8007936:	d301      	bcc.n	800793c <dir_sdi+0x5c>
 8007938:	2302      	movs	r3, #2
 800793a:	e048      	b.n	80079ce <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	61da      	str	r2, [r3, #28]
 8007944:	e029      	b.n	800799a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	895b      	ldrh	r3, [r3, #10]
 800794a:	025b      	lsls	r3, r3, #9
 800794c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800794e:	e019      	b.n	8007984 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6979      	ldr	r1, [r7, #20]
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff fd06 	bl	8007366 <get_fat>
 800795a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007962:	d101      	bne.n	8007968 <dir_sdi+0x88>
 8007964:	2301      	movs	r3, #1
 8007966:	e032      	b.n	80079ce <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d904      	bls.n	8007978 <dir_sdi+0x98>
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	429a      	cmp	r2, r3
 8007976:	d301      	bcc.n	800797c <dir_sdi+0x9c>
 8007978:	2302      	movs	r3, #2
 800797a:	e028      	b.n	80079ce <dir_sdi+0xee>
			ofs -= csz;
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	429a      	cmp	r2, r3
 800798a:	d2e1      	bcs.n	8007950 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800798c:	6979      	ldr	r1, [r7, #20]
 800798e:	6938      	ldr	r0, [r7, #16]
 8007990:	f7ff fcca 	bl	8007328 <clust2sect>
 8007994:	4602      	mov	r2, r0
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <dir_sdi+0xcc>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e010      	b.n	80079ce <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	69da      	ldr	r2, [r3, #28]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	0a5b      	lsrs	r3, r3, #9
 80079b4:	441a      	add	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c6:	441a      	add	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b086      	sub	sp, #24
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	3320      	adds	r3, #32
 80079ec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <dir_next+0x28>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079fc:	d301      	bcc.n	8007a02 <dir_next+0x2c>
 80079fe:	2304      	movs	r3, #4
 8007a00:	e0aa      	b.n	8007b58 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 8098 	bne.w	8007b3e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10b      	bne.n	8007a38 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	8912      	ldrh	r2, [r2, #8]
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	f0c0 8088 	bcc.w	8007b3e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	61da      	str	r2, [r3, #28]
 8007a34:	2304      	movs	r3, #4
 8007a36:	e08f      	b.n	8007b58 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	0a5b      	lsrs	r3, r3, #9
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	8952      	ldrh	r2, [r2, #10]
 8007a40:	3a01      	subs	r2, #1
 8007a42:	4013      	ands	r3, r2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d17a      	bne.n	8007b3e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4610      	mov	r0, r2
 8007a52:	f7ff fc88 	bl	8007366 <get_fat>
 8007a56:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d801      	bhi.n	8007a62 <dir_next+0x8c>
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e07a      	b.n	8007b58 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a68:	d101      	bne.n	8007a6e <dir_next+0x98>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e074      	b.n	8007b58 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d358      	bcc.n	8007b2a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d104      	bne.n	8007a88 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	61da      	str	r2, [r3, #28]
 8007a84:	2304      	movs	r3, #4
 8007a86:	e067      	b.n	8007b58 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4610      	mov	r0, r2
 8007a92:	f7ff fe59 	bl	8007748 <create_chain>
 8007a96:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <dir_next+0xcc>
 8007a9e:	2307      	movs	r3, #7
 8007aa0:	e05a      	b.n	8007b58 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <dir_next+0xd6>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e055      	b.n	8007b58 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab2:	d101      	bne.n	8007ab8 <dir_next+0xe2>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e04f      	b.n	8007b58 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f7ff fb55 	bl	8007168 <sync_window>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <dir_next+0xf2>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e047      	b.n	8007b58 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3330      	adds	r3, #48	; 0x30
 8007acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff f97f 	bl	8006dd6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007ad8:	2300      	movs	r3, #0
 8007ada:	613b      	str	r3, [r7, #16]
 8007adc:	6979      	ldr	r1, [r7, #20]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f7ff fc22 	bl	8007328 <clust2sect>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8007aea:	e012      	b.n	8007b12 <dir_next+0x13c>
						fs->wflag = 1;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f7ff fb38 	bl	8007168 <sync_window>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <dir_next+0x12c>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e02a      	b.n	8007b58 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	3301      	adds	r3, #1
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	895b      	ldrh	r3, [r3, #10]
 8007b16:	461a      	mov	r2, r3
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d3e6      	bcc.n	8007aec <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	1ad2      	subs	r2, r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007b30:	6979      	ldr	r1, [r7, #20]
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff fbf8 	bl	8007328 <clust2sect>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b50:	441a      	add	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007b70:	2100      	movs	r1, #0
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff feb4 	bl	80078e0 <dir_sdi>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d12b      	bne.n	8007bda <dir_alloc+0x7a>
		n = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7ff fb2f 	bl	80071f0 <move_window>
 8007b92:	4603      	mov	r3, r0
 8007b94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d11d      	bne.n	8007bd8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2be5      	cmp	r3, #229	; 0xe5
 8007ba4:	d004      	beq.n	8007bb0 <dir_alloc+0x50>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d107      	bne.n	8007bc0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d102      	bne.n	8007bc4 <dir_alloc+0x64>
 8007bbe:	e00c      	b.n	8007bda <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff ff05 	bl	80079d6 <dir_next>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0d7      	beq.n	8007b86 <dir_alloc+0x26>
 8007bd6:	e000      	b.n	8007bda <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007bd8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d101      	bne.n	8007be4 <dir_alloc+0x84>
 8007be0:	2307      	movs	r3, #7
 8007be2:	75fb      	strb	r3, [r7, #23]
	return res;
 8007be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	331a      	adds	r3, #26
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7ff f847 	bl	8006c90 <ld_word>
 8007c02:	4603      	mov	r3, r0
 8007c04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d109      	bne.n	8007c22 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	3314      	adds	r3, #20
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff f83c 	bl	8006c90 <ld_word>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	041b      	lsls	r3, r3, #16
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007c22:	68fb      	ldr	r3, [r7, #12]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	331a      	adds	r3, #26
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	b292      	uxth	r2, r2
 8007c40:	4611      	mov	r1, r2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff f85f 	bl	8006d06 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d109      	bne.n	8007c64 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f103 0214 	add.w	r2, r3, #20
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	0c1b      	lsrs	r3, r3, #16
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f7ff f851 	bl	8006d06 <st_word>
	}
}
 8007c64:	bf00      	nop
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fe2f 	bl	80078e0 <dir_sdi>
 8007c82:	4603      	mov	r3, r0
 8007c84:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <dir_find+0x24>
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	e03e      	b.n	8007d0e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6938      	ldr	r0, [r7, #16]
 8007c98:	f7ff faaa 	bl	80071f0 <move_window>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d12f      	bne.n	8007d06 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d102      	bne.n	8007cba <dir_find+0x4e>
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	75fb      	strb	r3, [r7, #23]
 8007cb8:	e028      	b.n	8007d0c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	330b      	adds	r3, #11
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	330b      	adds	r3, #11
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <dir_find+0x86>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a18      	ldr	r0, [r3, #32]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3324      	adds	r3, #36	; 0x24
 8007ce4:	220b      	movs	r2, #11
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	f7ff f88f 	bl	8006e0a <mem_cmp>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00b      	beq.n	8007d0a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff fe6e 	bl	80079d6 <dir_next>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0c5      	beq.n	8007c90 <dir_find+0x24>
 8007d04:	e002      	b.n	8007d0c <dir_find+0xa0>
		if (res != FR_OK) break;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d0a:	bf00      	nop

	return res;
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007d24:	2101      	movs	r1, #1
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff ff1a 	bl	8007b60 <dir_alloc>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d11c      	bne.n	8007d70 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	68b8      	ldr	r0, [r7, #8]
 8007d3e:	f7ff fa57 	bl	80071f0 <move_window>
 8007d42:	4603      	mov	r3, r0
 8007d44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d111      	bne.n	8007d70 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	2220      	movs	r2, #32
 8007d52:	2100      	movs	r1, #0
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff f83e 	bl	8006dd6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a18      	ldr	r0, [r3, #32]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3324      	adds	r3, #36	; 0x24
 8007d62:	220b      	movs	r2, #11
 8007d64:	4619      	mov	r1, r3
 8007d66:	f7ff f815 	bl	8006d94 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3324      	adds	r3, #36	; 0x24
 8007d90:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007d92:	220b      	movs	r2, #11
 8007d94:	2120      	movs	r1, #32
 8007d96:	68b8      	ldr	r0, [r7, #8]
 8007d98:	f7ff f81d 	bl	8006dd6 <mem_set>
	si = i = 0; ni = 8;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	613b      	str	r3, [r7, #16]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	617b      	str	r3, [r7, #20]
 8007da4:	2308      	movs	r3, #8
 8007da6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	617a      	str	r2, [r7, #20]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007db6:	7ffb      	ldrb	r3, [r7, #31]
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	d94e      	bls.n	8007e5a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007dbc:	7ffb      	ldrb	r3, [r7, #31]
 8007dbe:	2b2f      	cmp	r3, #47	; 0x2f
 8007dc0:	d006      	beq.n	8007dd0 <create_name+0x54>
 8007dc2:	7ffb      	ldrb	r3, [r7, #31]
 8007dc4:	2b5c      	cmp	r3, #92	; 0x5c
 8007dc6:	d110      	bne.n	8007dea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007dc8:	e002      	b.n	8007dd0 <create_name+0x54>
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b2f      	cmp	r3, #47	; 0x2f
 8007dda:	d0f6      	beq.n	8007dca <create_name+0x4e>
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	4413      	add	r3, r2
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b5c      	cmp	r3, #92	; 0x5c
 8007de6:	d0f0      	beq.n	8007dca <create_name+0x4e>
			break;
 8007de8:	e038      	b.n	8007e5c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007dea:	7ffb      	ldrb	r3, [r7, #31]
 8007dec:	2b2e      	cmp	r3, #46	; 0x2e
 8007dee:	d003      	beq.n	8007df8 <create_name+0x7c>
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d30c      	bcc.n	8007e12 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	2b0b      	cmp	r3, #11
 8007dfc:	d002      	beq.n	8007e04 <create_name+0x88>
 8007dfe:	7ffb      	ldrb	r3, [r7, #31]
 8007e00:	2b2e      	cmp	r3, #46	; 0x2e
 8007e02:	d001      	beq.n	8007e08 <create_name+0x8c>
 8007e04:	2306      	movs	r3, #6
 8007e06:	e044      	b.n	8007e92 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007e08:	2308      	movs	r3, #8
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	230b      	movs	r3, #11
 8007e0e:	61bb      	str	r3, [r7, #24]
			continue;
 8007e10:	e022      	b.n	8007e58 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007e12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	da04      	bge.n	8007e24 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007e1a:	7ffb      	ldrb	r3, [r7, #31]
 8007e1c:	3b80      	subs	r3, #128	; 0x80
 8007e1e:	4a1f      	ldr	r2, [pc, #124]	; (8007e9c <create_name+0x120>)
 8007e20:	5cd3      	ldrb	r3, [r2, r3]
 8007e22:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007e24:	7ffb      	ldrb	r3, [r7, #31]
 8007e26:	4619      	mov	r1, r3
 8007e28:	481d      	ldr	r0, [pc, #116]	; (8007ea0 <create_name+0x124>)
 8007e2a:	f7ff f815 	bl	8006e58 <chk_chr>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <create_name+0xbc>
 8007e34:	2306      	movs	r3, #6
 8007e36:	e02c      	b.n	8007e92 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007e38:	7ffb      	ldrb	r3, [r7, #31]
 8007e3a:	2b60      	cmp	r3, #96	; 0x60
 8007e3c:	d905      	bls.n	8007e4a <create_name+0xce>
 8007e3e:	7ffb      	ldrb	r3, [r7, #31]
 8007e40:	2b7a      	cmp	r3, #122	; 0x7a
 8007e42:	d802      	bhi.n	8007e4a <create_name+0xce>
 8007e44:	7ffb      	ldrb	r3, [r7, #31]
 8007e46:	3b20      	subs	r3, #32
 8007e48:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	613a      	str	r2, [r7, #16]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	4413      	add	r3, r2
 8007e54:	7ffa      	ldrb	r2, [r7, #31]
 8007e56:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007e58:	e7a6      	b.n	8007da8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007e5a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	441a      	add	r2, r3
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <create_name+0xf4>
 8007e6c:	2306      	movs	r3, #6
 8007e6e:	e010      	b.n	8007e92 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2be5      	cmp	r3, #229	; 0xe5
 8007e76:	d102      	bne.n	8007e7e <create_name+0x102>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2205      	movs	r2, #5
 8007e7c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e7e:	7ffb      	ldrb	r3, [r7, #31]
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d801      	bhi.n	8007e88 <create_name+0x10c>
 8007e84:	2204      	movs	r2, #4
 8007e86:	e000      	b.n	8007e8a <create_name+0x10e>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	330b      	adds	r3, #11
 8007e8e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007e90:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	080094e0 	.word	0x080094e0
 8007ea0:	08009204 	.word	0x08009204

08007ea4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007eb8:	e002      	b.n	8007ec0 <follow_path+0x1c>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b2f      	cmp	r3, #47	; 0x2f
 8007ec6:	d0f8      	beq.n	8007eba <follow_path+0x16>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b5c      	cmp	r3, #92	; 0x5c
 8007ece:	d0f4      	beq.n	8007eba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b1f      	cmp	r3, #31
 8007edc:	d80a      	bhi.n	8007ef4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2280      	movs	r2, #128	; 0x80
 8007ee2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff fcf9 	bl	80078e0 <dir_sdi>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	75fb      	strb	r3, [r7, #23]
 8007ef2:	e043      	b.n	8007f7c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ef4:	463b      	mov	r3, r7
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff ff3f 	bl	8007d7c <create_name>
 8007efe:	4603      	mov	r3, r0
 8007f00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d134      	bne.n	8007f72 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff feaf 	bl	8007c6c <dir_find>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00a      	beq.n	8007f36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d127      	bne.n	8007f76 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f26:	7afb      	ldrb	r3, [r7, #11]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d122      	bne.n	8007f76 <follow_path+0xd2>
 8007f30:	2305      	movs	r3, #5
 8007f32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007f34:	e01f      	b.n	8007f76 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d11c      	bne.n	8007f7a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	799b      	ldrb	r3, [r3, #6]
 8007f44:	f003 0310 	and.w	r3, r3, #16
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007f4c:	2305      	movs	r3, #5
 8007f4e:	75fb      	strb	r3, [r7, #23]
 8007f50:	e014      	b.n	8007f7c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f60:	4413      	add	r3, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f7ff fe42 	bl	8007bee <ld_clust>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f70:	e7c0      	b.n	8007ef4 <follow_path+0x50>
			if (res != FR_OK) break;
 8007f72:	bf00      	nop
 8007f74:	e002      	b.n	8007f7c <follow_path+0xd8>
				break;
 8007f76:	bf00      	nop
 8007f78:	e000      	b.n	8007f7c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f7a:	bf00      	nop
			}
		}
	}

	return res;
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b087      	sub	sp, #28
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f92:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d031      	beq.n	8008000 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	e002      	b.n	8007faa <get_ldnumber+0x24>
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d903      	bls.n	8007fba <get_ldnumber+0x34>
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b3a      	cmp	r3, #58	; 0x3a
 8007fb8:	d1f4      	bne.n	8007fa4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b3a      	cmp	r3, #58	; 0x3a
 8007fc0:	d11c      	bne.n	8007ffc <get_ldnumber+0x76>
			tp = *path;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	60fa      	str	r2, [r7, #12]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	3b30      	subs	r3, #48	; 0x30
 8007fd2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2b09      	cmp	r3, #9
 8007fd8:	d80e      	bhi.n	8007ff8 <get_ldnumber+0x72>
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d10a      	bne.n	8007ff8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d107      	bne.n	8007ff8 <get_ldnumber+0x72>
					vol = (int)i;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	e002      	b.n	8008002 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008000:	693b      	ldr	r3, [r7, #16]
}
 8008002:	4618      	mov	r0, r3
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
	...

08008010 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	70da      	strb	r2, [r3, #3]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008026:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff f8e0 	bl	80071f0 <move_window>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <check_fs+0x2a>
 8008036:	2304      	movs	r3, #4
 8008038:	e038      	b.n	80080ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3330      	adds	r3, #48	; 0x30
 800803e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe fe24 	bl	8006c90 <ld_word>
 8008048:	4603      	mov	r3, r0
 800804a:	461a      	mov	r2, r3
 800804c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008050:	429a      	cmp	r2, r3
 8008052:	d001      	beq.n	8008058 <check_fs+0x48>
 8008054:	2303      	movs	r3, #3
 8008056:	e029      	b.n	80080ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800805e:	2be9      	cmp	r3, #233	; 0xe9
 8008060:	d009      	beq.n	8008076 <check_fs+0x66>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008068:	2beb      	cmp	r3, #235	; 0xeb
 800806a:	d11e      	bne.n	80080aa <check_fs+0x9a>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008072:	2b90      	cmp	r3, #144	; 0x90
 8008074:	d119      	bne.n	80080aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3330      	adds	r3, #48	; 0x30
 800807a:	3336      	adds	r3, #54	; 0x36
 800807c:	4618      	mov	r0, r3
 800807e:	f7fe fe1f 	bl	8006cc0 <ld_dword>
 8008082:	4603      	mov	r3, r0
 8008084:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008088:	4a0a      	ldr	r2, [pc, #40]	; (80080b4 <check_fs+0xa4>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d101      	bne.n	8008092 <check_fs+0x82>
 800808e:	2300      	movs	r3, #0
 8008090:	e00c      	b.n	80080ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3330      	adds	r3, #48	; 0x30
 8008096:	3352      	adds	r3, #82	; 0x52
 8008098:	4618      	mov	r0, r3
 800809a:	f7fe fe11 	bl	8006cc0 <ld_dword>
 800809e:	4602      	mov	r2, r0
 80080a0:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <check_fs+0xa8>)
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d101      	bne.n	80080aa <check_fs+0x9a>
 80080a6:	2300      	movs	r3, #0
 80080a8:	e000      	b.n	80080ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80080aa:	2302      	movs	r3, #2
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	00544146 	.word	0x00544146
 80080b8:	33544146 	.word	0x33544146

080080bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b096      	sub	sp, #88	; 0x58
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4613      	mov	r3, r2
 80080c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f7ff ff58 	bl	8007f86 <get_ldnumber>
 80080d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80080d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	da01      	bge.n	80080e2 <find_volume+0x26>
 80080de:	230b      	movs	r3, #11
 80080e0:	e22e      	b.n	8008540 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80080e2:	4aa8      	ldr	r2, [pc, #672]	; (8008384 <find_volume+0x2c8>)
 80080e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <find_volume+0x3a>
 80080f2:	230c      	movs	r3, #12
 80080f4:	e224      	b.n	8008540 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	f023 0301 	bic.w	r3, r3, #1
 8008102:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01a      	beq.n	8008142 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800810c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fd1f 	bl	8006b54 <disk_status>
 8008116:	4603      	mov	r3, r0
 8008118:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800811c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10c      	bne.n	8008142 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d007      	beq.n	800813e <find_volume+0x82>
 800812e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008132:	f003 0304 	and.w	r3, r3, #4
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800813a:	230a      	movs	r3, #10
 800813c:	e200      	b.n	8008540 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800813e:	2300      	movs	r3, #0
 8008140:	e1fe      	b.n	8008540 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008144:	2200      	movs	r2, #0
 8008146:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800814a:	b2da      	uxtb	r2, r3
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	4618      	mov	r0, r3
 8008156:	f7fe fd17 	bl	8006b88 <disk_initialize>
 800815a:	4603      	mov	r3, r0
 800815c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008160:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800816c:	2303      	movs	r3, #3
 800816e:	e1e7      	b.n	8008540 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008170:	79fb      	ldrb	r3, [r7, #7]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d007      	beq.n	8008186 <find_volume+0xca>
 8008176:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008182:	230a      	movs	r3, #10
 8008184:	e1dc      	b.n	8008540 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800818a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800818c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800818e:	f7ff ff3f 	bl	8008010 <check_fs>
 8008192:	4603      	mov	r3, r0
 8008194:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800819c:	2b02      	cmp	r3, #2
 800819e:	d14b      	bne.n	8008238 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081a0:	2300      	movs	r3, #0
 80081a2:	643b      	str	r3, [r7, #64]	; 0x40
 80081a4:	e01f      	b.n	80081e6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80081b4:	4413      	add	r3, r2
 80081b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	3304      	adds	r3, #4
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d006      	beq.n	80081d0 <find_volume+0x114>
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	3308      	adds	r3, #8
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fd7a 	bl	8006cc0 <ld_dword>
 80081cc:	4602      	mov	r2, r0
 80081ce:	e000      	b.n	80081d2 <find_volume+0x116>
 80081d0:	2200      	movs	r2, #0
 80081d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80081da:	440b      	add	r3, r1
 80081dc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e2:	3301      	adds	r3, #1
 80081e4:	643b      	str	r3, [r7, #64]	; 0x40
 80081e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d9dc      	bls.n	80081a6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80081ec:	2300      	movs	r3, #0
 80081ee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80081f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <find_volume+0x140>
 80081f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081f8:	3b01      	subs	r3, #1
 80081fa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80081fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008204:	4413      	add	r3, r2
 8008206:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800820a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800820c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <find_volume+0x162>
 8008212:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008214:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008216:	f7ff fefb 	bl	8008010 <check_fs>
 800821a:	4603      	mov	r3, r0
 800821c:	e000      	b.n	8008220 <find_volume+0x164>
 800821e:	2303      	movs	r3, #3
 8008220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008228:	2b01      	cmp	r3, #1
 800822a:	d905      	bls.n	8008238 <find_volume+0x17c>
 800822c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800822e:	3301      	adds	r3, #1
 8008230:	643b      	str	r3, [r7, #64]	; 0x40
 8008232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008234:	2b03      	cmp	r3, #3
 8008236:	d9e1      	bls.n	80081fc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800823c:	2b04      	cmp	r3, #4
 800823e:	d101      	bne.n	8008244 <find_volume+0x188>
 8008240:	2301      	movs	r3, #1
 8008242:	e17d      	b.n	8008540 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008248:	2b01      	cmp	r3, #1
 800824a:	d901      	bls.n	8008250 <find_volume+0x194>
 800824c:	230d      	movs	r3, #13
 800824e:	e177      	b.n	8008540 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	3330      	adds	r3, #48	; 0x30
 8008254:	330b      	adds	r3, #11
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe fd1a 	bl	8006c90 <ld_word>
 800825c:	4603      	mov	r3, r0
 800825e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008262:	d001      	beq.n	8008268 <find_volume+0x1ac>
 8008264:	230d      	movs	r3, #13
 8008266:	e16b      	b.n	8008540 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	3330      	adds	r3, #48	; 0x30
 800826c:	3316      	adds	r3, #22
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe fd0e 	bl	8006c90 <ld_word>
 8008274:	4603      	mov	r3, r0
 8008276:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <find_volume+0x1d0>
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	3330      	adds	r3, #48	; 0x30
 8008282:	3324      	adds	r3, #36	; 0x24
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fd1b 	bl	8006cc0 <ld_dword>
 800828a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008290:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008294:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800829c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829e:	789b      	ldrb	r3, [r3, #2]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d005      	beq.n	80082b0 <find_volume+0x1f4>
 80082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a6:	789b      	ldrb	r3, [r3, #2]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d001      	beq.n	80082b0 <find_volume+0x1f4>
 80082ac:	230d      	movs	r3, #13
 80082ae:	e147      	b.n	8008540 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	789b      	ldrb	r3, [r3, #2]
 80082b4:	461a      	mov	r2, r3
 80082b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b8:	fb02 f303 	mul.w	r3, r2, r3
 80082bc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80082ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082cc:	895b      	ldrh	r3, [r3, #10]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d008      	beq.n	80082e4 <find_volume+0x228>
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	895b      	ldrh	r3, [r3, #10]
 80082d6:	461a      	mov	r2, r3
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	895b      	ldrh	r3, [r3, #10]
 80082dc:	3b01      	subs	r3, #1
 80082de:	4013      	ands	r3, r2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d001      	beq.n	80082e8 <find_volume+0x22c>
 80082e4:	230d      	movs	r3, #13
 80082e6:	e12b      	b.n	8008540 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	3330      	adds	r3, #48	; 0x30
 80082ec:	3311      	adds	r3, #17
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fcce 	bl	8006c90 <ld_word>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	891b      	ldrh	r3, [r3, #8]
 8008300:	f003 030f 	and.w	r3, r3, #15
 8008304:	b29b      	uxth	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <find_volume+0x252>
 800830a:	230d      	movs	r3, #13
 800830c:	e118      	b.n	8008540 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800830e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008310:	3330      	adds	r3, #48	; 0x30
 8008312:	3313      	adds	r3, #19
 8008314:	4618      	mov	r0, r3
 8008316:	f7fe fcbb 	bl	8006c90 <ld_word>
 800831a:	4603      	mov	r3, r0
 800831c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800831e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <find_volume+0x276>
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	3330      	adds	r3, #48	; 0x30
 8008328:	3320      	adds	r3, #32
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fcc8 	bl	8006cc0 <ld_dword>
 8008330:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008334:	3330      	adds	r3, #48	; 0x30
 8008336:	330e      	adds	r3, #14
 8008338:	4618      	mov	r0, r3
 800833a:	f7fe fca9 	bl	8006c90 <ld_word>
 800833e:	4603      	mov	r3, r0
 8008340:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <find_volume+0x290>
 8008348:	230d      	movs	r3, #13
 800834a:	e0f9      	b.n	8008540 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800834c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800834e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008350:	4413      	add	r3, r2
 8008352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008354:	8912      	ldrh	r2, [r2, #8]
 8008356:	0912      	lsrs	r2, r2, #4
 8008358:	b292      	uxth	r2, r2
 800835a:	4413      	add	r3, r2
 800835c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800835e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	429a      	cmp	r2, r3
 8008364:	d201      	bcs.n	800836a <find_volume+0x2ae>
 8008366:	230d      	movs	r3, #13
 8008368:	e0ea      	b.n	8008540 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800836a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008372:	8952      	ldrh	r2, [r2, #10]
 8008374:	fbb3 f3f2 	udiv	r3, r3, r2
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	2b00      	cmp	r3, #0
 800837e:	d103      	bne.n	8008388 <find_volume+0x2cc>
 8008380:	230d      	movs	r3, #13
 8008382:	e0dd      	b.n	8008540 <find_volume+0x484>
 8008384:	20000078 	.word	0x20000078
		fmt = FS_FAT32;
 8008388:	2303      	movs	r3, #3
 800838a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008394:	4293      	cmp	r3, r2
 8008396:	d802      	bhi.n	800839e <find_volume+0x2e2>
 8008398:	2302      	movs	r3, #2
 800839a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d802      	bhi.n	80083ae <find_volume+0x2f2>
 80083a8:	2301      	movs	r3, #1
 80083aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	1c9a      	adds	r2, r3, #2
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083ba:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80083bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c0:	441a      	add	r2, r3
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80083c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	441a      	add	r2, r3
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80083d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d11e      	bne.n	8008416 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	3330      	adds	r3, #48	; 0x30
 80083dc:	332a      	adds	r3, #42	; 0x2a
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe fc56 	bl	8006c90 <ld_word>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <find_volume+0x332>
 80083ea:	230d      	movs	r3, #13
 80083ec:	e0a8      	b.n	8008540 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80083ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f0:	891b      	ldrh	r3, [r3, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <find_volume+0x33e>
 80083f6:	230d      	movs	r3, #13
 80083f8:	e0a2      	b.n	8008540 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	3330      	adds	r3, #48	; 0x30
 80083fe:	332c      	adds	r3, #44	; 0x2c
 8008400:	4618      	mov	r0, r3
 8008402:	f7fe fc5d 	bl	8006cc0 <ld_dword>
 8008406:	4602      	mov	r2, r0
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	647b      	str	r3, [r7, #68]	; 0x44
 8008414:	e01f      	b.n	8008456 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	891b      	ldrh	r3, [r3, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <find_volume+0x366>
 800841e:	230d      	movs	r3, #13
 8008420:	e08e      	b.n	8008540 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	6a1a      	ldr	r2, [r3, #32]
 8008426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008428:	441a      	add	r2, r3
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800842e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008432:	2b02      	cmp	r3, #2
 8008434:	d103      	bne.n	800843e <find_volume+0x382>
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	e00a      	b.n	8008454 <find_volume+0x398>
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	695a      	ldr	r2, [r3, #20]
 8008442:	4613      	mov	r3, r2
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	4413      	add	r3, r2
 8008448:	085a      	lsrs	r2, r3, #1
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008454:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800845c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008460:	0a5b      	lsrs	r3, r3, #9
 8008462:	429a      	cmp	r2, r3
 8008464:	d201      	bcs.n	800846a <find_volume+0x3ae>
 8008466:	230d      	movs	r3, #13
 8008468:	e06a      	b.n	8008540 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008470:	611a      	str	r2, [r3, #16]
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	691a      	ldr	r2, [r3, #16]
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	2280      	movs	r2, #128	; 0x80
 800847e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008484:	2b03      	cmp	r3, #3
 8008486:	d149      	bne.n	800851c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	3330      	adds	r3, #48	; 0x30
 800848c:	3330      	adds	r3, #48	; 0x30
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fbfe 	bl	8006c90 <ld_word>
 8008494:	4603      	mov	r3, r0
 8008496:	2b01      	cmp	r3, #1
 8008498:	d140      	bne.n	800851c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800849a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800849c:	3301      	adds	r3, #1
 800849e:	4619      	mov	r1, r3
 80084a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084a2:	f7fe fea5 	bl	80071f0 <move_window>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d137      	bne.n	800851c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	2200      	movs	r2, #0
 80084b0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	3330      	adds	r3, #48	; 0x30
 80084b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fbe8 	bl	8006c90 <ld_word>
 80084c0:	4603      	mov	r3, r0
 80084c2:	461a      	mov	r2, r3
 80084c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d127      	bne.n	800851c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	3330      	adds	r3, #48	; 0x30
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe fbf5 	bl	8006cc0 <ld_dword>
 80084d6:	4602      	mov	r2, r0
 80084d8:	4b1b      	ldr	r3, [pc, #108]	; (8008548 <find_volume+0x48c>)
 80084da:	429a      	cmp	r2, r3
 80084dc:	d11e      	bne.n	800851c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	3330      	adds	r3, #48	; 0x30
 80084e2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fbea 	bl	8006cc0 <ld_dword>
 80084ec:	4602      	mov	r2, r0
 80084ee:	4b17      	ldr	r3, [pc, #92]	; (800854c <find_volume+0x490>)
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d113      	bne.n	800851c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	3330      	adds	r3, #48	; 0x30
 80084f8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe fbdf 	bl	8006cc0 <ld_dword>
 8008502:	4602      	mov	r2, r0
 8008504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008506:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	3330      	adds	r3, #48	; 0x30
 800850c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe fbd5 	bl	8006cc0 <ld_dword>
 8008516:	4602      	mov	r2, r0
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008522:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008524:	4b0a      	ldr	r3, [pc, #40]	; (8008550 <find_volume+0x494>)
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	3301      	adds	r3, #1
 800852a:	b29a      	uxth	r2, r3
 800852c:	4b08      	ldr	r3, [pc, #32]	; (8008550 <find_volume+0x494>)
 800852e:	801a      	strh	r2, [r3, #0]
 8008530:	4b07      	ldr	r3, [pc, #28]	; (8008550 <find_volume+0x494>)
 8008532:	881a      	ldrh	r2, [r3, #0]
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800853a:	f7fe fdf1 	bl	8007120 <clear_lock>
#endif
	return FR_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3758      	adds	r7, #88	; 0x58
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	41615252 	.word	0x41615252
 800854c:	61417272 	.word	0x61417272
 8008550:	2000007c 	.word	0x2000007c

08008554 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800855e:	2309      	movs	r3, #9
 8008560:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01c      	beq.n	80085a2 <validate+0x4e>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d018      	beq.n	80085a2 <validate+0x4e>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d013      	beq.n	80085a2 <validate+0x4e>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	889a      	ldrh	r2, [r3, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	88db      	ldrh	r3, [r3, #6]
 8008584:	429a      	cmp	r2, r3
 8008586:	d10c      	bne.n	80085a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fae0 	bl	8006b54 <disk_status>
 8008594:	4603      	mov	r3, r0
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <validate+0x4e>
			res = FR_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d102      	bne.n	80085ae <validate+0x5a>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	e000      	b.n	80085b0 <validate+0x5c>
 80085ae:	2300      	movs	r3, #0
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	6013      	str	r3, [r2, #0]
	return res;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	4613      	mov	r3, r2
 80085cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80085d2:	f107 0310 	add.w	r3, r7, #16
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff fcd5 	bl	8007f86 <get_ldnumber>
 80085dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	da01      	bge.n	80085e8 <f_mount+0x28>
 80085e4:	230b      	movs	r3, #11
 80085e6:	e02b      	b.n	8008640 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80085e8:	4a17      	ldr	r2, [pc, #92]	; (8008648 <f_mount+0x88>)
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80085f8:	69b8      	ldr	r0, [r7, #24]
 80085fa:	f7fe fd91 	bl	8007120 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	490d      	ldr	r1, [pc, #52]	; (8008648 <f_mount+0x88>)
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <f_mount+0x66>
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d001      	beq.n	800862a <f_mount+0x6a>
 8008626:	2300      	movs	r3, #0
 8008628:	e00a      	b.n	8008640 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800862a:	f107 010c 	add.w	r1, r7, #12
 800862e:	f107 0308 	add.w	r3, r7, #8
 8008632:	2200      	movs	r2, #0
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fd41 	bl	80080bc <find_volume>
 800863a:	4603      	mov	r3, r0
 800863c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800863e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	20000078 	.word	0x20000078

0800864c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b098      	sub	sp, #96	; 0x60
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <f_open+0x18>
 8008660:	2309      	movs	r3, #9
 8008662:	e1ad      	b.n	80089c0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800866a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800866c:	79fa      	ldrb	r2, [r7, #7]
 800866e:	f107 0110 	add.w	r1, r7, #16
 8008672:	f107 0308 	add.w	r3, r7, #8
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff fd20 	bl	80080bc <find_volume>
 800867c:	4603      	mov	r3, r0
 800867e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008682:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008686:	2b00      	cmp	r3, #0
 8008688:	f040 8191 	bne.w	80089ae <f_open+0x362>
		dj.obj.fs = fs;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	f107 0314 	add.w	r3, r7, #20
 8008696:	4611      	mov	r1, r2
 8008698:	4618      	mov	r0, r3
 800869a:	f7ff fc03 	bl	8007ea4 <follow_path>
 800869e:	4603      	mov	r3, r0
 80086a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80086a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d11a      	bne.n	80086e2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80086ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086b0:	b25b      	sxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	da03      	bge.n	80086be <f_open+0x72>
				res = FR_INVALID_NAME;
 80086b6:	2306      	movs	r3, #6
 80086b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80086bc:	e011      	b.n	80086e2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086be:	79fb      	ldrb	r3, [r7, #7]
 80086c0:	f023 0301 	bic.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bf14      	ite	ne
 80086c8:	2301      	movne	r3, #1
 80086ca:	2300      	moveq	r3, #0
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	f107 0314 	add.w	r3, r7, #20
 80086d4:	4611      	mov	r1, r2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fbda 	bl	8006e90 <chk_lock>
 80086dc:	4603      	mov	r3, r0
 80086de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	f003 031c 	and.w	r3, r3, #28
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d07f      	beq.n	80087ec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80086ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d017      	beq.n	8008724 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80086f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d10e      	bne.n	800871a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80086fc:	f7fe fc24 	bl	8006f48 <enq_lock>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d006      	beq.n	8008714 <f_open+0xc8>
 8008706:	f107 0314 	add.w	r3, r7, #20
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fb03 	bl	8007d16 <dir_register>
 8008710:	4603      	mov	r3, r0
 8008712:	e000      	b.n	8008716 <f_open+0xca>
 8008714:	2312      	movs	r3, #18
 8008716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800871a:	79fb      	ldrb	r3, [r7, #7]
 800871c:	f043 0308 	orr.w	r3, r3, #8
 8008720:	71fb      	strb	r3, [r7, #7]
 8008722:	e010      	b.n	8008746 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008724:	7ebb      	ldrb	r3, [r7, #26]
 8008726:	f003 0311 	and.w	r3, r3, #17
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <f_open+0xea>
					res = FR_DENIED;
 800872e:	2307      	movs	r3, #7
 8008730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008734:	e007      	b.n	8008746 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <f_open+0xfa>
 8008740:	2308      	movs	r3, #8
 8008742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800874a:	2b00      	cmp	r3, #0
 800874c:	d168      	bne.n	8008820 <f_open+0x1d4>
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	f003 0308 	and.w	r3, r3, #8
 8008754:	2b00      	cmp	r3, #0
 8008756:	d063      	beq.n	8008820 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008758:	f7fe f99e 	bl	8006a98 <get_fattime>
 800875c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800875e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008760:	330e      	adds	r3, #14
 8008762:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008764:	4618      	mov	r0, r3
 8008766:	f7fe fae9 	bl	8006d3c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800876a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876c:	3316      	adds	r3, #22
 800876e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008770:	4618      	mov	r0, r3
 8008772:	f7fe fae3 	bl	8006d3c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	330b      	adds	r3, #11
 800877a:	2220      	movs	r2, #32
 800877c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f7ff fa32 	bl	8007bee <ld_clust>
 800878a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008790:	2200      	movs	r2, #0
 8008792:	4618      	mov	r0, r3
 8008794:	f7ff fa4a 	bl	8007c2c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879a:	331c      	adds	r3, #28
 800879c:	2100      	movs	r1, #0
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe facc 	bl	8006d3c <st_dword>
					fs->wflag = 1;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2201      	movs	r2, #1
 80087a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80087aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d037      	beq.n	8008820 <f_open+0x1d4>
						dw = fs->winsect;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80087b6:	f107 0314 	add.w	r3, r7, #20
 80087ba:	2200      	movs	r2, #0
 80087bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe ff5d 	bl	800767e <remove_chain>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80087ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d126      	bne.n	8008820 <f_open+0x1d4>
							res = move_window(fs, dw);
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe fd0a 	bl	80071f0 <move_window>
 80087dc:	4603      	mov	r3, r0
 80087de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087e6:	3a01      	subs	r2, #1
 80087e8:	60da      	str	r2, [r3, #12]
 80087ea:	e019      	b.n	8008820 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80087ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d115      	bne.n	8008820 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80087f4:	7ebb      	ldrb	r3, [r7, #26]
 80087f6:	f003 0310 	and.w	r3, r3, #16
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <f_open+0x1ba>
					res = FR_NO_FILE;
 80087fe:	2304      	movs	r3, #4
 8008800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008804:	e00c      	b.n	8008820 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008806:	79fb      	ldrb	r3, [r7, #7]
 8008808:	f003 0302 	and.w	r3, r3, #2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <f_open+0x1d4>
 8008810:	7ebb      	ldrb	r3, [r7, #26]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <f_open+0x1d4>
						res = FR_DENIED;
 800881a:	2307      	movs	r3, #7
 800881c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008824:	2b00      	cmp	r3, #0
 8008826:	d128      	bne.n	800887a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	f003 0308 	and.w	r3, r3, #8
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008838:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	f023 0301 	bic.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	bf14      	ite	ne
 8008852:	2301      	movne	r3, #1
 8008854:	2300      	moveq	r3, #0
 8008856:	b2db      	uxtb	r3, r3
 8008858:	461a      	mov	r2, r3
 800885a:	f107 0314 	add.w	r3, r7, #20
 800885e:	4611      	mov	r1, r2
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fb93 	bl	8006f8c <inc_lock>
 8008866:	4602      	mov	r2, r0
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <f_open+0x22e>
 8008874:	2302      	movs	r3, #2
 8008876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800887a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800887e:	2b00      	cmp	r3, #0
 8008880:	f040 8095 	bne.w	80089ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008888:	4611      	mov	r1, r2
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff f9af 	bl	8007bee <ld_clust>
 8008890:	4602      	mov	r2, r0
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008898:	331c      	adds	r3, #28
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fa10 	bl	8006cc0 <ld_dword>
 80088a0:	4602      	mov	r2, r0
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	88da      	ldrh	r2, [r3, #6]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	79fa      	ldrb	r2, [r7, #7]
 80088be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3330      	adds	r3, #48	; 0x30
 80088d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088da:	2100      	movs	r1, #0
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fe fa7a 	bl	8006dd6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	f003 0320 	and.w	r3, r3, #32
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d060      	beq.n	80089ae <f_open+0x362>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d05c      	beq.n	80089ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	895b      	ldrh	r3, [r3, #10]
 8008900:	025b      	lsls	r3, r3, #9
 8008902:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	657b      	str	r3, [r7, #84]	; 0x54
 8008910:	e016      	b.n	8008940 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe fd25 	bl	8007366 <get_fat>
 800891c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800891e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008920:	2b01      	cmp	r3, #1
 8008922:	d802      	bhi.n	800892a <f_open+0x2de>
 8008924:	2302      	movs	r3, #2
 8008926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800892a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800892c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008930:	d102      	bne.n	8008938 <f_open+0x2ec>
 8008932:	2301      	movs	r3, #1
 8008934:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008938:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800893a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	657b      	str	r3, [r7, #84]	; 0x54
 8008940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008944:	2b00      	cmp	r3, #0
 8008946:	d103      	bne.n	8008950 <f_open+0x304>
 8008948:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800894a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800894c:	429a      	cmp	r2, r3
 800894e:	d8e0      	bhi.n	8008912 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008954:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008956:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800895a:	2b00      	cmp	r3, #0
 800895c:	d127      	bne.n	80089ae <f_open+0x362>
 800895e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008964:	2b00      	cmp	r3, #0
 8008966:	d022      	beq.n	80089ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800896c:	4618      	mov	r0, r3
 800896e:	f7fe fcdb 	bl	8007328 <clust2sect>
 8008972:	6478      	str	r0, [r7, #68]	; 0x44
 8008974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008976:	2b00      	cmp	r3, #0
 8008978:	d103      	bne.n	8008982 <f_open+0x336>
						res = FR_INT_ERR;
 800897a:	2302      	movs	r3, #2
 800897c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008980:	e015      	b.n	80089ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008984:	0a5a      	lsrs	r2, r3, #9
 8008986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008988:	441a      	add	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	7858      	ldrb	r0, [r3, #1]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a1a      	ldr	r2, [r3, #32]
 800899c:	2301      	movs	r3, #1
 800899e:	f7fe f919 	bl	8006bd4 <disk_read>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <f_open+0x362>
 80089a8:	2301      	movs	r3, #1
 80089aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80089ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <f_open+0x370>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80089bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3760      	adds	r7, #96	; 0x60
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08e      	sub	sp, #56	; 0x38
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f107 0214 	add.w	r2, r7, #20
 80089e6:	4611      	mov	r1, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff fdb3 	bl	8008554 <validate>
 80089ee:	4603      	mov	r3, r0
 80089f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80089f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d107      	bne.n	8008a0c <f_read+0x44>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	7d5b      	ldrb	r3, [r3, #21]
 8008a00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <f_read+0x4a>
 8008a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a10:	e115      	b.n	8008c3e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	7d1b      	ldrb	r3, [r3, #20]
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <f_read+0x5a>
 8008a1e:	2307      	movs	r3, #7
 8008a20:	e10d      	b.n	8008c3e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	f240 80fe 	bls.w	8008c34 <f_read+0x26c>
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008a3c:	e0fa      	b.n	8008c34 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f040 80c6 	bne.w	8008bd8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	0a5b      	lsrs	r3, r3, #9
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	8952      	ldrh	r2, [r2, #10]
 8008a56:	3a01      	subs	r2, #1
 8008a58:	4013      	ands	r3, r2
 8008a5a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d12f      	bne.n	8008ac2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d103      	bne.n	8008a72 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a70:	e013      	b.n	8008a9a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f7fe fef9 	bl	8007878 <clmt_clust>
 8008a86:	6338      	str	r0, [r7, #48]	; 0x30
 8008a88:	e007      	b.n	8008a9a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f7fe fc67 	bl	8007366 <get_fat>
 8008a98:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d804      	bhi.n	8008aaa <f_read+0xe2>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	755a      	strb	r2, [r3, #21]
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	e0c9      	b.n	8008c3e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ab0:	d104      	bne.n	8008abc <f_read+0xf4>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	755a      	strb	r2, [r3, #21]
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e0c0      	b.n	8008c3e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4610      	mov	r0, r2
 8008acc:	f7fe fc2c 	bl	8007328 <clust2sect>
 8008ad0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d104      	bne.n	8008ae2 <f_read+0x11a>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2202      	movs	r2, #2
 8008adc:	755a      	strb	r2, [r3, #21]
 8008ade:	2302      	movs	r3, #2
 8008ae0:	e0ad      	b.n	8008c3e <f_read+0x276>
			sect += csect;
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	0a5b      	lsrs	r3, r3, #9
 8008aee:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d039      	beq.n	8008b6a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	4413      	add	r3, r2
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	8952      	ldrh	r2, [r2, #10]
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d905      	bls.n	8008b10 <f_read+0x148>
					cc = fs->csize - csect;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	895b      	ldrh	r3, [r3, #10]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	7858      	ldrb	r0, [r3, #1]
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b1a:	f7fe f85b 	bl	8006bd4 <disk_read>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d004      	beq.n	8008b2e <f_read+0x166>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2201      	movs	r2, #1
 8008b28:	755a      	strb	r2, [r3, #21]
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e087      	b.n	8008c3e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	7d1b      	ldrb	r3, [r3, #20]
 8008b32:	b25b      	sxtb	r3, r3
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	da14      	bge.n	8008b62 <f_read+0x19a>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6a1a      	ldr	r2, [r3, #32]
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d90d      	bls.n	8008b62 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6a1a      	ldr	r2, [r3, #32]
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	025b      	lsls	r3, r3, #9
 8008b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b52:	18d0      	adds	r0, r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3330      	adds	r3, #48	; 0x30
 8008b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	f7fe f919 	bl	8006d94 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	025b      	lsls	r3, r3, #9
 8008b66:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008b68:	e050      	b.n	8008c0c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d02e      	beq.n	8008bd2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	7d1b      	ldrb	r3, [r3, #20]
 8008b78:	b25b      	sxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	da18      	bge.n	8008bb0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	7858      	ldrb	r0, [r3, #1]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6a1a      	ldr	r2, [r3, #32]
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	f7fe f841 	bl	8006c14 <disk_write>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d004      	beq.n	8008ba2 <f_read+0x1da>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	755a      	strb	r2, [r3, #21]
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e04d      	b.n	8008c3e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	7d1b      	ldrb	r3, [r3, #20]
 8008ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	7858      	ldrb	r0, [r3, #1]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bba:	2301      	movs	r3, #1
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	f7fe f809 	bl	8006bd4 <disk_read>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d004      	beq.n	8008bd2 <f_read+0x20a>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	755a      	strb	r2, [r3, #21]
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e035      	b.n	8008c3e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008be4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d901      	bls.n	8008bf2 <f_read+0x22a>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c00:	4413      	add	r3, r2
 8008c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c04:	4619      	mov	r1, r3
 8008c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c08:	f7fe f8c4 	bl	8006d94 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	4413      	add	r3, r2
 8008c12:	627b      	str	r3, [r7, #36]	; 0x24
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	441a      	add	r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	619a      	str	r2, [r3, #24]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c26:	441a      	add	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f47f af01 	bne.w	8008a3e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3738      	adds	r7, #56	; 0x38
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b08c      	sub	sp, #48	; 0x30
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
 8008c52:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f107 0210 	add.w	r2, r7, #16
 8008c64:	4611      	mov	r1, r2
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff fc74 	bl	8008554 <validate>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d107      	bne.n	8008c8a <f_write+0x44>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	7d5b      	ldrb	r3, [r3, #21]
 8008c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008c82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <f_write+0x4a>
 8008c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c8e:	e14b      	b.n	8008f28 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	7d1b      	ldrb	r3, [r3, #20]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <f_write+0x5a>
 8008c9c:	2307      	movs	r3, #7
 8008c9e:	e143      	b.n	8008f28 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	699a      	ldr	r2, [r3, #24]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	441a      	add	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	f080 812d 	bcs.w	8008f0c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	43db      	mvns	r3, r3
 8008cb8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008cba:	e127      	b.n	8008f0c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f040 80e3 	bne.w	8008e90 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	0a5b      	lsrs	r3, r3, #9
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	8952      	ldrh	r2, [r2, #10]
 8008cd4:	3a01      	subs	r2, #1
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d143      	bne.n	8008d68 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10c      	bne.n	8008d02 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d11a      	bne.n	8008d2a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fd25 	bl	8007748 <create_chain>
 8008cfe:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d00:	e013      	b.n	8008d2a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d007      	beq.n	8008d1a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f7fe fdb1 	bl	8007878 <clmt_clust>
 8008d16:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d18:	e007      	b.n	8008d2a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	4619      	mov	r1, r3
 8008d22:	4610      	mov	r0, r2
 8008d24:	f7fe fd10 	bl	8007748 <create_chain>
 8008d28:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 80f2 	beq.w	8008f16 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d104      	bne.n	8008d42 <f_write+0xfc>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	755a      	strb	r2, [r3, #21]
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e0f2      	b.n	8008f28 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d48:	d104      	bne.n	8008d54 <f_write+0x10e>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	755a      	strb	r2, [r3, #21]
 8008d50:	2301      	movs	r3, #1
 8008d52:	e0e9      	b.n	8008f28 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d58:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d102      	bne.n	8008d68 <f_write+0x122>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d66:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	7d1b      	ldrb	r3, [r3, #20]
 8008d6c:	b25b      	sxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	da18      	bge.n	8008da4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	7858      	ldrb	r0, [r3, #1]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a1a      	ldr	r2, [r3, #32]
 8008d80:	2301      	movs	r3, #1
 8008d82:	f7fd ff47 	bl	8006c14 <disk_write>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d004      	beq.n	8008d96 <f_write+0x150>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	755a      	strb	r2, [r3, #21]
 8008d92:	2301      	movs	r3, #1
 8008d94:	e0c8      	b.n	8008f28 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	7d1b      	ldrb	r3, [r3, #20]
 8008d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	4619      	mov	r1, r3
 8008dac:	4610      	mov	r0, r2
 8008dae:	f7fe fabb 	bl	8007328 <clust2sect>
 8008db2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d104      	bne.n	8008dc4 <f_write+0x17e>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	755a      	strb	r2, [r3, #21]
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e0b1      	b.n	8008f28 <f_write+0x2e2>
			sect += csect;
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	4413      	add	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	0a5b      	lsrs	r3, r3, #9
 8008dd0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d03c      	beq.n	8008e52 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	4413      	add	r3, r2
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	8952      	ldrh	r2, [r2, #10]
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d905      	bls.n	8008df2 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	895b      	ldrh	r3, [r3, #10]
 8008dea:	461a      	mov	r2, r3
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	7858      	ldrb	r0, [r3, #1]
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	69f9      	ldr	r1, [r7, #28]
 8008dfc:	f7fd ff0a 	bl	8006c14 <disk_write>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d004      	beq.n	8008e10 <f_write+0x1ca>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	755a      	strb	r2, [r3, #21]
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e08b      	b.n	8008f28 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a1a      	ldr	r2, [r3, #32]
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	6a3a      	ldr	r2, [r7, #32]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d915      	bls.n	8008e4a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6a1a      	ldr	r2, [r3, #32]
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	025b      	lsls	r3, r3, #9
 8008e2e:	69fa      	ldr	r2, [r7, #28]
 8008e30:	4413      	add	r3, r2
 8008e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e36:	4619      	mov	r1, r3
 8008e38:	f7fd ffac 	bl	8006d94 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	7d1b      	ldrb	r3, [r3, #20]
 8008e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	025b      	lsls	r3, r3, #9
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008e50:	e03f      	b.n	8008ed2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d016      	beq.n	8008e8a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	699a      	ldr	r2, [r3, #24]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d210      	bcs.n	8008e8a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	7858      	ldrb	r0, [r3, #1]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e72:	2301      	movs	r3, #1
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	f7fd fead 	bl	8006bd4 <disk_read>
 8008e7a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d004      	beq.n	8008e8a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	755a      	strb	r2, [r3, #21]
 8008e86:	2301      	movs	r3, #1
 8008e88:	e04e      	b.n	8008f28 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008e9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d901      	bls.n	8008eaa <f_write+0x264>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb8:	4413      	add	r3, r2
 8008eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ebc:	69f9      	ldr	r1, [r7, #28]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fd ff68 	bl	8006d94 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	7d1b      	ldrb	r3, [r3, #20]
 8008ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008ed2:	69fa      	ldr	r2, [r7, #28]
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	4413      	add	r3, r2
 8008ed8:	61fb      	str	r3, [r7, #28]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	699a      	ldr	r2, [r3, #24]
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	441a      	add	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	619a      	str	r2, [r3, #24]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	bf38      	it	cc
 8008ef2:	461a      	movcc	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	60da      	str	r2, [r3, #12]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	441a      	add	r2, r3
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f47f aed4 	bne.w	8008cbc <f_write+0x76>
 8008f14:	e000      	b.n	8008f18 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f16:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	7d1b      	ldrb	r3, [r3, #20]
 8008f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3730      	adds	r7, #48	; 0x30
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f107 0208 	add.w	r2, r7, #8
 8008f3e:	4611      	mov	r1, r2
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff fb07 	bl	8008554 <validate>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d168      	bne.n	8009022 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	7d1b      	ldrb	r3, [r3, #20]
 8008f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d062      	beq.n	8009022 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	7d1b      	ldrb	r3, [r3, #20]
 8008f60:	b25b      	sxtb	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da15      	bge.n	8008f92 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	7858      	ldrb	r0, [r3, #1]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a1a      	ldr	r2, [r3, #32]
 8008f74:	2301      	movs	r3, #1
 8008f76:	f7fd fe4d 	bl	8006c14 <disk_write>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <f_sync+0x54>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e04f      	b.n	8009024 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	7d1b      	ldrb	r3, [r3, #20]
 8008f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008f92:	f7fd fd81 	bl	8006a98 <get_fattime>
 8008f96:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	f7fe f925 	bl	80071f0 <move_window>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d138      	bne.n	8009022 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	330b      	adds	r3, #11
 8008fba:	781a      	ldrb	r2, [r3, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	330b      	adds	r3, #11
 8008fc0:	f042 0220 	orr.w	r2, r2, #32
 8008fc4:	b2d2      	uxtb	r2, r2
 8008fc6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	68f9      	ldr	r1, [r7, #12]
 8008fd4:	f7fe fe2a 	bl	8007c2c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f103 021c 	add.w	r2, r3, #28
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	f7fd fea9 	bl	8006d3c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3316      	adds	r3, #22
 8008fee:	6939      	ldr	r1, [r7, #16]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fd fea3 	bl	8006d3c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3312      	adds	r3, #18
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fd fe82 	bl	8006d06 <st_word>
					fs->wflag = 1;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2201      	movs	r2, #1
 8009006:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe f91e 	bl	800724c <sync_fs>
 8009010:	4603      	mov	r3, r0
 8009012:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	7d1b      	ldrb	r3, [r3, #20]
 8009018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800901c:	b2da      	uxtb	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009022:	7dfb      	ldrb	r3, [r7, #23]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff ff7b 	bl	8008f30 <f_sync>
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d118      	bne.n	8009076 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f107 0208 	add.w	r2, r7, #8
 800904a:	4611      	mov	r1, r2
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff fa81 	bl	8008554 <validate>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10c      	bne.n	8009076 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	4618      	mov	r0, r3
 8009062:	f7fe f821 	bl	80070a8 <dec_lock>
 8009066:	4603      	mov	r3, r0
 8009068:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d102      	bne.n	8009076 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009076:	7bfb      	ldrb	r3, [r7, #15]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009080:	b480      	push	{r7}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	4613      	mov	r3, r2
 800908c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800908e:	2301      	movs	r3, #1
 8009090:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009096:	4b1f      	ldr	r3, [pc, #124]	; (8009114 <FATFS_LinkDriverEx+0x94>)
 8009098:	7a5b      	ldrb	r3, [r3, #9]
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d131      	bne.n	8009104 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80090a0:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <FATFS_LinkDriverEx+0x94>)
 80090a2:	7a5b      	ldrb	r3, [r3, #9]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	461a      	mov	r2, r3
 80090a8:	4b1a      	ldr	r3, [pc, #104]	; (8009114 <FATFS_LinkDriverEx+0x94>)
 80090aa:	2100      	movs	r1, #0
 80090ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80090ae:	4b19      	ldr	r3, [pc, #100]	; (8009114 <FATFS_LinkDriverEx+0x94>)
 80090b0:	7a5b      	ldrb	r3, [r3, #9]
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	4a17      	ldr	r2, [pc, #92]	; (8009114 <FATFS_LinkDriverEx+0x94>)
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80090be:	4b15      	ldr	r3, [pc, #84]	; (8009114 <FATFS_LinkDriverEx+0x94>)
 80090c0:	7a5b      	ldrb	r3, [r3, #9]
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	461a      	mov	r2, r3
 80090c6:	4b13      	ldr	r3, [pc, #76]	; (8009114 <FATFS_LinkDriverEx+0x94>)
 80090c8:	4413      	add	r3, r2
 80090ca:	79fa      	ldrb	r2, [r7, #7]
 80090cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80090ce:	4b11      	ldr	r3, [pc, #68]	; (8009114 <FATFS_LinkDriverEx+0x94>)
 80090d0:	7a5b      	ldrb	r3, [r3, #9]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	b2d1      	uxtb	r1, r2
 80090d8:	4a0e      	ldr	r2, [pc, #56]	; (8009114 <FATFS_LinkDriverEx+0x94>)
 80090da:	7251      	strb	r1, [r2, #9]
 80090dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80090de:	7dbb      	ldrb	r3, [r7, #22]
 80090e0:	3330      	adds	r3, #48	; 0x30
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	3301      	adds	r3, #1
 80090ec:	223a      	movs	r2, #58	; 0x3a
 80090ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	3302      	adds	r3, #2
 80090f4:	222f      	movs	r2, #47	; 0x2f
 80090f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	3303      	adds	r3, #3
 80090fc:	2200      	movs	r2, #0
 80090fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009104:	7dfb      	ldrb	r3, [r7, #23]
}
 8009106:	4618      	mov	r0, r3
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	200000a0 	.word	0x200000a0

08009118 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009122:	2200      	movs	r2, #0
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7ff ffaa 	bl	8009080 <FATFS_LinkDriverEx>
 800912c:	4603      	mov	r3, r0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <__libc_init_array>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	4e0d      	ldr	r6, [pc, #52]	; (8009170 <__libc_init_array+0x38>)
 800913c:	4c0d      	ldr	r4, [pc, #52]	; (8009174 <__libc_init_array+0x3c>)
 800913e:	1ba4      	subs	r4, r4, r6
 8009140:	10a4      	asrs	r4, r4, #2
 8009142:	2500      	movs	r5, #0
 8009144:	42a5      	cmp	r5, r4
 8009146:	d109      	bne.n	800915c <__libc_init_array+0x24>
 8009148:	4e0b      	ldr	r6, [pc, #44]	; (8009178 <__libc_init_array+0x40>)
 800914a:	4c0c      	ldr	r4, [pc, #48]	; (800917c <__libc_init_array+0x44>)
 800914c:	f000 f820 	bl	8009190 <_init>
 8009150:	1ba4      	subs	r4, r4, r6
 8009152:	10a4      	asrs	r4, r4, #2
 8009154:	2500      	movs	r5, #0
 8009156:	42a5      	cmp	r5, r4
 8009158:	d105      	bne.n	8009166 <__libc_init_array+0x2e>
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009160:	4798      	blx	r3
 8009162:	3501      	adds	r5, #1
 8009164:	e7ee      	b.n	8009144 <__libc_init_array+0xc>
 8009166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800916a:	4798      	blx	r3
 800916c:	3501      	adds	r5, #1
 800916e:	e7f2      	b.n	8009156 <__libc_init_array+0x1e>
 8009170:	08009568 	.word	0x08009568
 8009174:	08009568 	.word	0x08009568
 8009178:	08009568 	.word	0x08009568
 800917c:	0800956c 	.word	0x0800956c

08009180 <memset>:
 8009180:	4402      	add	r2, r0
 8009182:	4603      	mov	r3, r0
 8009184:	4293      	cmp	r3, r2
 8009186:	d100      	bne.n	800918a <memset+0xa>
 8009188:	4770      	bx	lr
 800918a:	f803 1b01 	strb.w	r1, [r3], #1
 800918e:	e7f9      	b.n	8009184 <memset+0x4>

08009190 <_init>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	bf00      	nop
 8009194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009196:	bc08      	pop	{r3}
 8009198:	469e      	mov	lr, r3
 800919a:	4770      	bx	lr

0800919c <_fini>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	bf00      	nop
 80091a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a2:	bc08      	pop	{r3}
 80091a4:	469e      	mov	lr, r3
 80091a6:	4770      	bx	lr
