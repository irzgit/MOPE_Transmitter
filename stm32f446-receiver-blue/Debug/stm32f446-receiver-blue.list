
stm32f446-receiver-blue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004888  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ccc  08004ccc  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd4  08004cd4  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08004cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200000e8  08004dc4  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08004dc4  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000955a  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019a3  00000000  00000000  00029672  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d0  00000000  00000000  0002b018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f8  00000000  00000000  0002b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e38  00000000  00000000  0002bee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000722d  00000000  00000000  0004cd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8132  00000000  00000000  00053f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c077  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000218c  00000000  00000000  0011c0f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004a40 	.word	0x08004a40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	08004a40 	.word	0x08004a40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <WMSM42InitRX>:

}

// Настройка на прием
void WMSM42InitRX(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

	HAL_Delay(3000);
 80005b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005b8:	f001 f83e 	bl	8001638 <HAL_Delay>
	HAL_UART_Abort(&huart6);
 80005bc:	484e      	ldr	r0, [pc, #312]	; (80006f8 <WMSM42InitRX+0x148>)
 80005be:	f002 fedd 	bl	800337c <HAL_UART_Abort>
	HAL_UART_Transmit(&huart6, buf_EchoOff, sizeof(buf_EchoOff),100);
 80005c2:	2364      	movs	r3, #100	; 0x64
 80005c4:	2206      	movs	r2, #6
 80005c6:	494d      	ldr	r1, [pc, #308]	; (80006fc <WMSM42InitRX+0x14c>)
 80005c8:	484b      	ldr	r0, [pc, #300]	; (80006f8 <WMSM42InitRX+0x148>)
 80005ca:	f002 fcd2 	bl	8002f72 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart6, Buff_rx, 10,100);
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	220a      	movs	r2, #10
 80005d2:	494b      	ldr	r1, [pc, #300]	; (8000700 <WMSM42InitRX+0x150>)
 80005d4:	4848      	ldr	r0, [pc, #288]	; (80006f8 <WMSM42InitRX+0x148>)
 80005d6:	f002 fd65 	bl	80030a4 <HAL_UART_Receive>

	memset(Buff_rx, 0, sizeof(Buff_rx));
 80005da:	2246      	movs	r2, #70	; 0x46
 80005dc:	2100      	movs	r1, #0
 80005de:	4848      	ldr	r0, [pc, #288]	; (8000700 <WMSM42InitRX+0x150>)
 80005e0:	f003 fe20 	bl	8004224 <memset>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 80005e4:	e00b      	b.n	80005fe <WMSM42InitRX+0x4e>
	{
		HAL_UART_Transmit(&huart6, buf_com1, sizeof(buf_com1),100);
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	220d      	movs	r2, #13
 80005ea:	4946      	ldr	r1, [pc, #280]	; (8000704 <WMSM42InitRX+0x154>)
 80005ec:	4842      	ldr	r0, [pc, #264]	; (80006f8 <WMSM42InitRX+0x148>)
 80005ee:	f002 fcc0 	bl	8002f72 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart6, Buff_rx, 7,100);
 80005f2:	2364      	movs	r3, #100	; 0x64
 80005f4:	2207      	movs	r2, #7
 80005f6:	4942      	ldr	r1, [pc, #264]	; (8000700 <WMSM42InitRX+0x150>)
 80005f8:	483f      	ldr	r0, [pc, #252]	; (80006f8 <WMSM42InitRX+0x148>)
 80005fa:	f002 fd53 	bl	80030a4 <HAL_UART_Receive>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 80005fe:	4b40      	ldr	r3, [pc, #256]	; (8000700 <WMSM42InitRX+0x150>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b4f      	cmp	r3, #79	; 0x4f
 8000604:	d003      	beq.n	800060e <WMSM42InitRX+0x5e>
 8000606:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <WMSM42InitRX+0x150>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	2b4b      	cmp	r3, #75	; 0x4b
 800060c:	d1eb      	bne.n	80005e6 <WMSM42InitRX+0x36>
	}
	memset(Buff_rx, 0, sizeof(Buff_rx));
 800060e:	2246      	movs	r2, #70	; 0x46
 8000610:	2100      	movs	r1, #0
 8000612:	483b      	ldr	r0, [pc, #236]	; (8000700 <WMSM42InitRX+0x150>)
 8000614:	f003 fe06 	bl	8004224 <memset>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 8000618:	e00b      	b.n	8000632 <WMSM42InitRX+0x82>
	{
		HAL_UART_Transmit(&huart6, buf_com2, sizeof(buf_com2),100);
 800061a:	2364      	movs	r3, #100	; 0x64
 800061c:	2225      	movs	r2, #37	; 0x25
 800061e:	493a      	ldr	r1, [pc, #232]	; (8000708 <WMSM42InitRX+0x158>)
 8000620:	4835      	ldr	r0, [pc, #212]	; (80006f8 <WMSM42InitRX+0x148>)
 8000622:	f002 fca6 	bl	8002f72 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart6, Buff_rx, 7,100);
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	2207      	movs	r2, #7
 800062a:	4935      	ldr	r1, [pc, #212]	; (8000700 <WMSM42InitRX+0x150>)
 800062c:	4832      	ldr	r0, [pc, #200]	; (80006f8 <WMSM42InitRX+0x148>)
 800062e:	f002 fd39 	bl	80030a4 <HAL_UART_Receive>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <WMSM42InitRX+0x150>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b4f      	cmp	r3, #79	; 0x4f
 8000638:	d003      	beq.n	8000642 <WMSM42InitRX+0x92>
 800063a:	4b31      	ldr	r3, [pc, #196]	; (8000700 <WMSM42InitRX+0x150>)
 800063c:	785b      	ldrb	r3, [r3, #1]
 800063e:	2b4b      	cmp	r3, #75	; 0x4b
 8000640:	d1eb      	bne.n	800061a <WMSM42InitRX+0x6a>
	}

	memset(Buff_rx, 0, sizeof(Buff_rx));
 8000642:	2246      	movs	r2, #70	; 0x46
 8000644:	2100      	movs	r1, #0
 8000646:	482e      	ldr	r0, [pc, #184]	; (8000700 <WMSM42InitRX+0x150>)
 8000648:	f003 fdec 	bl	8004224 <memset>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 800064c:	e00b      	b.n	8000666 <WMSM42InitRX+0xb6>
	{
		HAL_UART_Transmit(&huart6, buf_com3_RX_mode, sizeof(buf_com3_RX_mode),100);
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	220d      	movs	r2, #13
 8000652:	492e      	ldr	r1, [pc, #184]	; (800070c <WMSM42InitRX+0x15c>)
 8000654:	4828      	ldr	r0, [pc, #160]	; (80006f8 <WMSM42InitRX+0x148>)
 8000656:	f002 fc8c 	bl	8002f72 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart6, Buff_rx, 7,100);
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	2207      	movs	r2, #7
 800065e:	4928      	ldr	r1, [pc, #160]	; (8000700 <WMSM42InitRX+0x150>)
 8000660:	4825      	ldr	r0, [pc, #148]	; (80006f8 <WMSM42InitRX+0x148>)
 8000662:	f002 fd1f 	bl	80030a4 <HAL_UART_Receive>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <WMSM42InitRX+0x150>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b4f      	cmp	r3, #79	; 0x4f
 800066c:	d003      	beq.n	8000676 <WMSM42InitRX+0xc6>
 800066e:	4b24      	ldr	r3, [pc, #144]	; (8000700 <WMSM42InitRX+0x150>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	2b4b      	cmp	r3, #75	; 0x4b
 8000674:	d1eb      	bne.n	800064e <WMSM42InitRX+0x9e>
	}
	// Запись в регистр длины посылки
	memset(Buff_rx, 0, sizeof(Buff_rx));
 8000676:	2246      	movs	r2, #70	; 0x46
 8000678:	2100      	movs	r1, #0
 800067a:	4821      	ldr	r0, [pc, #132]	; (8000700 <WMSM42InitRX+0x150>)
 800067c:	f003 fdd2 	bl	8004224 <memset>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 8000680:	e00b      	b.n	800069a <WMSM42InitRX+0xea>
	{
		HAL_UART_Transmit(&huart6, buf_paylen, sizeof(buf_paylen),100);
 8000682:	2364      	movs	r3, #100	; 0x64
 8000684:	2212      	movs	r2, #18
 8000686:	4922      	ldr	r1, [pc, #136]	; (8000710 <WMSM42InitRX+0x160>)
 8000688:	481b      	ldr	r0, [pc, #108]	; (80006f8 <WMSM42InitRX+0x148>)
 800068a:	f002 fc72 	bl	8002f72 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart6, Buff_rx, 7,100);
 800068e:	2364      	movs	r3, #100	; 0x64
 8000690:	2207      	movs	r2, #7
 8000692:	491b      	ldr	r1, [pc, #108]	; (8000700 <WMSM42InitRX+0x150>)
 8000694:	4818      	ldr	r0, [pc, #96]	; (80006f8 <WMSM42InitRX+0x148>)
 8000696:	f002 fd05 	bl	80030a4 <HAL_UART_Receive>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <WMSM42InitRX+0x150>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b4f      	cmp	r3, #79	; 0x4f
 80006a0:	d003      	beq.n	80006aa <WMSM42InitRX+0xfa>
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <WMSM42InitRX+0x150>)
 80006a4:	785b      	ldrb	r3, [r3, #1]
 80006a6:	2b4b      	cmp	r3, #75	; 0x4b
 80006a8:	d1eb      	bne.n	8000682 <WMSM42InitRX+0xd2>
	}
	// Запись в регистр длины преамбулы
	memset(Buff_rx, 0, sizeof(Buff_rx));
 80006aa:	2246      	movs	r2, #70	; 0x46
 80006ac:	2100      	movs	r1, #0
 80006ae:	4814      	ldr	r0, [pc, #80]	; (8000700 <WMSM42InitRX+0x150>)
 80006b0:	f003 fdb8 	bl	8004224 <memset>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 80006b4:	e00b      	b.n	80006ce <WMSM42InitRX+0x11e>
	{
		HAL_UART_Transmit(&huart6, buf_preamlen, sizeof(buf_preamlen),100);
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	2212      	movs	r2, #18
 80006ba:	4916      	ldr	r1, [pc, #88]	; (8000714 <WMSM42InitRX+0x164>)
 80006bc:	480e      	ldr	r0, [pc, #56]	; (80006f8 <WMSM42InitRX+0x148>)
 80006be:	f002 fc58 	bl	8002f72 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart6, Buff_rx, 7,100);
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	2207      	movs	r2, #7
 80006c6:	490e      	ldr	r1, [pc, #56]	; (8000700 <WMSM42InitRX+0x150>)
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <WMSM42InitRX+0x148>)
 80006ca:	f002 fceb 	bl	80030a4 <HAL_UART_Receive>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <WMSM42InitRX+0x150>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b4f      	cmp	r3, #79	; 0x4f
 80006d4:	d003      	beq.n	80006de <WMSM42InitRX+0x12e>
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <WMSM42InitRX+0x150>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	2b4b      	cmp	r3, #75	; 0x4b
 80006dc:	d1eb      	bne.n	80006b6 <WMSM42InitRX+0x106>
	}


	memset(Buff_rx, 0, sizeof(Buff_rx));
 80006de:	2246      	movs	r2, #70	; 0x46
 80006e0:	2100      	movs	r1, #0
 80006e2:	4807      	ldr	r0, [pc, #28]	; (8000700 <WMSM42InitRX+0x150>)
 80006e4:	f003 fd9e 	bl	8004224 <memset>

	HAL_UART_Receive_DMA(&huart6, Buff_rx, 62+4);
 80006e8:	2242      	movs	r2, #66	; 0x42
 80006ea:	4905      	ldr	r1, [pc, #20]	; (8000700 <WMSM42InitRX+0x150>)
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <WMSM42InitRX+0x148>)
 80006ee:	f002 fdc5 	bl	800327c <HAL_UART_Receive_DMA>

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000318 	.word	0x20000318
 80006fc:	20000028 	.word	0x20000028
 8000700:	20000124 	.word	0x20000124
 8000704:	20000030 	.word	0x20000030
 8000708:	20000040 	.word	0x20000040
 800070c:	20000068 	.word	0x20000068
 8000710:	20000000 	.word	0x20000000
 8000714:	20000014 	.word	0x20000014

08000718 <transmit>:


// Парсер
void transmit(uint8_t str[27])
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af08      	add	r7, sp, #32
 800071e:	6078      	str	r0, [r7, #4]

				// первый акселерометр
				// Ось Х
				xIntSumFirst = (str[0] & 0x0F) * 10 + (str[1] >> 4); // целочисленная сумма X
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	f003 020f 	and.w	r2, r3, #15
 8000728:	4613      	mov	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	461a      	mov	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3301      	adds	r3, #1
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	091b      	lsrs	r3, r3, #4
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4413      	add	r3, r2
 800073e:	4aa3      	ldr	r2, [pc, #652]	; (80009cc <transmit+0x2b4>)
 8000740:	6013      	str	r3, [r2, #0]
				x5First = str[1] & 0x0F; //перевод правого бита 5го байта
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3301      	adds	r3, #1
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	f003 030f 	and.w	r3, r3, #15
 800074c:	4aa0      	ldr	r2, [pc, #640]	; (80009d0 <transmit+0x2b8>)
 800074e:	6013      	str	r3, [r2, #0]
				x60First = str[2] >> 4; //перевод левого бита 6го байта
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3302      	adds	r3, #2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	091b      	lsrs	r3, r3, #4
 8000758:	b2db      	uxtb	r3, r3
 800075a:	461a      	mov	r2, r3
 800075c:	4b9d      	ldr	r3, [pc, #628]	; (80009d4 <transmit+0x2bc>)
 800075e:	601a      	str	r2, [r3, #0]
				x65First = str[2] & 0x0F; //перевод правого бита 6го байта
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3302      	adds	r3, #2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	4a9b      	ldr	r2, [pc, #620]	; (80009d8 <transmit+0x2c0>)
 800076c:	6013      	str	r3, [r2, #0]
				sprintf(xvalFirst, "+%02d.%d%d ",xIntSumFirst, x5First, x60First);
 800076e:	4b97      	ldr	r3, [pc, #604]	; (80009cc <transmit+0x2b4>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b97      	ldr	r3, [pc, #604]	; (80009d0 <transmit+0x2b8>)
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	4b97      	ldr	r3, [pc, #604]	; (80009d4 <transmit+0x2bc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	460b      	mov	r3, r1
 800077e:	4997      	ldr	r1, [pc, #604]	; (80009dc <transmit+0x2c4>)
 8000780:	4897      	ldr	r0, [pc, #604]	; (80009e0 <transmit+0x2c8>)
 8000782:	f003 fd57 	bl	8004234 <siprintf>
				if((str[0] >> 4) == 0x01)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	091b      	lsrs	r3, r3, #4
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b01      	cmp	r3, #1
 8000790:	d102      	bne.n	8000798 <transmit+0x80>
					xvalFirst[0] = '-';
 8000792:	4b93      	ldr	r3, [pc, #588]	; (80009e0 <transmit+0x2c8>)
 8000794:	222d      	movs	r2, #45	; 0x2d
 8000796:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumFirst = (str[3] & 0x0F) * 10 + (str[4] >> 4);	// целочисленная сумма Y
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3303      	adds	r3, #3
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	f003 020f 	and.w	r2, r3, #15
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	461a      	mov	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3304      	adds	r3, #4
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	091b      	lsrs	r3, r3, #4
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4413      	add	r3, r2
 80007b8:	4a8a      	ldr	r2, [pc, #552]	; (80009e4 <transmit+0x2cc>)
 80007ba:	6013      	str	r3, [r2, #0]
				y8First = str[4] & 0x0F; //перевод правого бита 8го байта
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3304      	adds	r3, #4
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	4a88      	ldr	r2, [pc, #544]	; (80009e8 <transmit+0x2d0>)
 80007c8:	6013      	str	r3, [r2, #0]
				y90First = str[5] >> 4; //перевод левого бита 9го байта
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3305      	adds	r3, #5
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	091b      	lsrs	r3, r3, #4
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b85      	ldr	r3, [pc, #532]	; (80009ec <transmit+0x2d4>)
 80007d8:	601a      	str	r2, [r3, #0]
				y95First = str[5] & 0x0F; //перевод правого бита 9го байта
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3305      	adds	r3, #5
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	f003 030f 	and.w	r3, r3, #15
 80007e4:	4a82      	ldr	r2, [pc, #520]	; (80009f0 <transmit+0x2d8>)
 80007e6:	6013      	str	r3, [r2, #0]
				sprintf(yvalFirst, "+%02d.%d%d ", yIntSumFirst, y8First, y90First);
 80007e8:	4b7e      	ldr	r3, [pc, #504]	; (80009e4 <transmit+0x2cc>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b7e      	ldr	r3, [pc, #504]	; (80009e8 <transmit+0x2d0>)
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	4b7e      	ldr	r3, [pc, #504]	; (80009ec <transmit+0x2d4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	460b      	mov	r3, r1
 80007f8:	4978      	ldr	r1, [pc, #480]	; (80009dc <transmit+0x2c4>)
 80007fa:	487e      	ldr	r0, [pc, #504]	; (80009f4 <transmit+0x2dc>)
 80007fc:	f003 fd1a 	bl	8004234 <siprintf>
				if((str[3] >> 4) == 0x01)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3303      	adds	r3, #3
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	091b      	lsrs	r3, r3, #4
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b01      	cmp	r3, #1
 800080c:	d102      	bne.n	8000814 <transmit+0xfc>
					yvalFirst[0] = '-';
 800080e:	4b79      	ldr	r3, [pc, #484]	; (80009f4 <transmit+0x2dc>)
 8000810:	222d      	movs	r2, #45	; 0x2d
 8000812:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumFirst = (str[6] & 0x0F) * 10 + (str[7] >> 4); //целочисленная сумма Z
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3306      	adds	r3, #6
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f003 020f 	and.w	r2, r3, #15
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3307      	adds	r3, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	091b      	lsrs	r3, r3, #4
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4413      	add	r3, r2
 8000834:	4a70      	ldr	r2, [pc, #448]	; (80009f8 <transmit+0x2e0>)
 8000836:	6013      	str	r3, [r2, #0]
				z11First = str[7] & 0x0F; //перевод правого бита 11го байта
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3307      	adds	r3, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	4a6e      	ldr	r2, [pc, #440]	; (80009fc <transmit+0x2e4>)
 8000844:	6013      	str	r3, [r2, #0]
				z120First = str[8] >> 4; //перевод левого бита 12го байта
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3308      	adds	r3, #8
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	091b      	lsrs	r3, r3, #4
 800084e:	b2db      	uxtb	r3, r3
 8000850:	461a      	mov	r2, r3
 8000852:	4b6b      	ldr	r3, [pc, #428]	; (8000a00 <transmit+0x2e8>)
 8000854:	601a      	str	r2, [r3, #0]
				z125First = str[8] & 0x0F; //перевод правого бита 12го байта
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3308      	adds	r3, #8
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	f003 030f 	and.w	r3, r3, #15
 8000860:	4a68      	ldr	r2, [pc, #416]	; (8000a04 <transmit+0x2ec>)
 8000862:	6013      	str	r3, [r2, #0]
				sprintf(zvalFirst, "+%02d.%d%d ", zIntSumFirst, z11First, z120First);
 8000864:	4b64      	ldr	r3, [pc, #400]	; (80009f8 <transmit+0x2e0>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b64      	ldr	r3, [pc, #400]	; (80009fc <transmit+0x2e4>)
 800086a:	6819      	ldr	r1, [r3, #0]
 800086c:	4b64      	ldr	r3, [pc, #400]	; (8000a00 <transmit+0x2e8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	460b      	mov	r3, r1
 8000874:	4959      	ldr	r1, [pc, #356]	; (80009dc <transmit+0x2c4>)
 8000876:	4864      	ldr	r0, [pc, #400]	; (8000a08 <transmit+0x2f0>)
 8000878:	f003 fcdc 	bl	8004234 <siprintf>
				if((str[6] >> 4) == 0x01)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3306      	adds	r3, #6
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	091b      	lsrs	r3, r3, #4
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b01      	cmp	r3, #1
 8000888:	d102      	bne.n	8000890 <transmit+0x178>
					zvalFirst[0] = '-';
 800088a:	4b5f      	ldr	r3, [pc, #380]	; (8000a08 <transmit+0x2f0>)
 800088c:	222d      	movs	r2, #45	; 0x2d
 800088e:	701a      	strb	r2, [r3, #0]

				// второй акселерометр
				// Ось Х
				xIntSumSecond = (str[9] & 0x0F) * 10 + (str[10] >> 4); // целочисленная сумма X
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3309      	adds	r3, #9
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	f003 020f 	and.w	r2, r3, #15
 800089a:	4613      	mov	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	461a      	mov	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	330a      	adds	r3, #10
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4413      	add	r3, r2
 80008b0:	4a56      	ldr	r2, [pc, #344]	; (8000a0c <transmit+0x2f4>)
 80008b2:	6013      	str	r3, [r2, #0]
				x5Second = str[10] & 0x0F; //перевод правого бита 5го байта
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	330a      	adds	r3, #10
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	4a54      	ldr	r2, [pc, #336]	; (8000a10 <transmit+0x2f8>)
 80008c0:	6013      	str	r3, [r2, #0]
				x60Second = str[11] >> 4; //перевод левого бита 6го байта
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	330b      	adds	r3, #11
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <transmit+0x2fc>)
 80008d0:	601a      	str	r2, [r3, #0]
				x65Second = str[11] & 0x0F; //перевод правого бита 6го байта
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	330b      	adds	r3, #11
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f003 030f 	and.w	r3, r3, #15
 80008dc:	4a4e      	ldr	r2, [pc, #312]	; (8000a18 <transmit+0x300>)
 80008de:	6013      	str	r3, [r2, #0]
				sprintf(xvalSecond, "+%02d.%d%d ",xIntSumSecond, x5Second, x60Second);
 80008e0:	4b4a      	ldr	r3, [pc, #296]	; (8000a0c <transmit+0x2f4>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <transmit+0x2f8>)
 80008e6:	6819      	ldr	r1, [r3, #0]
 80008e8:	4b4a      	ldr	r3, [pc, #296]	; (8000a14 <transmit+0x2fc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	460b      	mov	r3, r1
 80008f0:	493a      	ldr	r1, [pc, #232]	; (80009dc <transmit+0x2c4>)
 80008f2:	484a      	ldr	r0, [pc, #296]	; (8000a1c <transmit+0x304>)
 80008f4:	f003 fc9e 	bl	8004234 <siprintf>
				if((str[9] >> 4) == 0x01)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3309      	adds	r3, #9
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	091b      	lsrs	r3, r3, #4
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b01      	cmp	r3, #1
 8000904:	d102      	bne.n	800090c <transmit+0x1f4>
					xvalSecond[0] = '-';
 8000906:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <transmit+0x304>)
 8000908:	222d      	movs	r2, #45	; 0x2d
 800090a:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumSecond = (str[12] & 0x0F) * 10 + (str[13] >> 4);	// целочисленная сумма Y
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	330c      	adds	r3, #12
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	f003 020f 	and.w	r2, r3, #15
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	461a      	mov	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	330d      	adds	r3, #13
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	091b      	lsrs	r3, r3, #4
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4413      	add	r3, r2
 800092c:	4a3c      	ldr	r2, [pc, #240]	; (8000a20 <transmit+0x308>)
 800092e:	6013      	str	r3, [r2, #0]
				y8Second = str[13] & 0x0F; //перевод правого бита 8го байта
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	330d      	adds	r3, #13
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	4a3a      	ldr	r2, [pc, #232]	; (8000a24 <transmit+0x30c>)
 800093c:	6013      	str	r3, [r2, #0]
				y90Second = str[14] >> 4; //перевод левого бита 9го байта
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	330e      	adds	r3, #14
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	b2db      	uxtb	r3, r3
 8000948:	461a      	mov	r2, r3
 800094a:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <transmit+0x310>)
 800094c:	601a      	str	r2, [r3, #0]
				y95Second = str[14] & 0x0F; //перевод правого бита 9го байта
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	330e      	adds	r3, #14
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	4a34      	ldr	r2, [pc, #208]	; (8000a2c <transmit+0x314>)
 800095a:	6013      	str	r3, [r2, #0]
				sprintf(yvalSecond, "+%02d.%d%d ", yIntSumSecond, y8Second, y90Second);
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <transmit+0x308>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <transmit+0x30c>)
 8000962:	6819      	ldr	r1, [r3, #0]
 8000964:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <transmit+0x310>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	460b      	mov	r3, r1
 800096c:	491b      	ldr	r1, [pc, #108]	; (80009dc <transmit+0x2c4>)
 800096e:	4830      	ldr	r0, [pc, #192]	; (8000a30 <transmit+0x318>)
 8000970:	f003 fc60 	bl	8004234 <siprintf>
				if((str[12] >> 4) == 0x01)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	330c      	adds	r3, #12
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	091b      	lsrs	r3, r3, #4
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b01      	cmp	r3, #1
 8000980:	d102      	bne.n	8000988 <transmit+0x270>
					yvalSecond[0] = '-';
 8000982:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <transmit+0x318>)
 8000984:	222d      	movs	r2, #45	; 0x2d
 8000986:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumSecond = (str[15] & 0x0F) * 10 + (str[16] >> 4); //целочисленная сумма Z
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	330f      	adds	r3, #15
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f003 020f 	and.w	r2, r3, #15
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	461a      	mov	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3310      	adds	r3, #16
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4413      	add	r3, r2
 80009a8:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <transmit+0x31c>)
 80009aa:	6013      	str	r3, [r2, #0]
				z11Second = str[16] & 0x0F; //перевод правого бита 11го байта
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3310      	adds	r3, #16
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <transmit+0x320>)
 80009b8:	6013      	str	r3, [r2, #0]
				z120Second = str[17] >> 4; //перевод левого бита 12го байта
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3311      	adds	r3, #17
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	091b      	lsrs	r3, r3, #4
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <transmit+0x324>)
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e039      	b.n	8000a40 <transmit+0x328>
 80009cc:	200003e8 	.word	0x200003e8
 80009d0:	200002f8 	.word	0x200002f8
 80009d4:	200003c8 	.word	0x200003c8
 80009d8:	20000304 	.word	0x20000304
 80009dc:	08004a58 	.word	0x08004a58
 80009e0:	200001e8 	.word	0x200001e8
 80009e4:	20000298 	.word	0x20000298
 80009e8:	2000029c 	.word	0x2000029c
 80009ec:	200001fc 	.word	0x200001fc
 80009f0:	20000228 	.word	0x20000228
 80009f4:	20000200 	.word	0x20000200
 80009f8:	2000030c 	.word	0x2000030c
 80009fc:	20000210 	.word	0x20000210
 8000a00:	2000020c 	.word	0x2000020c
 8000a04:	20000300 	.word	0x20000300
 8000a08:	20000310 	.word	0x20000310
 8000a0c:	20000294 	.word	0x20000294
 8000a10:	200003cc 	.word	0x200003cc
 8000a14:	20000208 	.word	0x20000208
 8000a18:	20000290 	.word	0x20000290
 8000a1c:	200001cc 	.word	0x200001cc
 8000a20:	20000224 	.word	0x20000224
 8000a24:	200002fc 	.word	0x200002fc
 8000a28:	2000035c 	.word	0x2000035c
 8000a2c:	20000120 	.word	0x20000120
 8000a30:	200002a0 	.word	0x200002a0
 8000a34:	2000011c 	.word	0x2000011c
 8000a38:	200003f0 	.word	0x200003f0
 8000a3c:	20000214 	.word	0x20000214
				z125Second = str[17] & 0x0F; //перевод правого бита 12го байта
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3311      	adds	r3, #17
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	4a77      	ldr	r2, [pc, #476]	; (8000c28 <transmit+0x510>)
 8000a4c:	6013      	str	r3, [r2, #0]
				sprintf(zvalSecond, "+%02d.%d%d ", zIntSumSecond, z11Second, z120Second);
 8000a4e:	4b77      	ldr	r3, [pc, #476]	; (8000c2c <transmit+0x514>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b77      	ldr	r3, [pc, #476]	; (8000c30 <transmit+0x518>)
 8000a54:	6819      	ldr	r1, [r3, #0]
 8000a56:	4b77      	ldr	r3, [pc, #476]	; (8000c34 <transmit+0x51c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	4976      	ldr	r1, [pc, #472]	; (8000c38 <transmit+0x520>)
 8000a60:	4876      	ldr	r0, [pc, #472]	; (8000c3c <transmit+0x524>)
 8000a62:	f003 fbe7 	bl	8004234 <siprintf>
				if((str[15] >> 4) == 0x01)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	330f      	adds	r3, #15
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	091b      	lsrs	r3, r3, #4
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d102      	bne.n	8000a7a <transmit+0x362>
					zvalSecond[0] = '-';
 8000a74:	4b71      	ldr	r3, [pc, #452]	; (8000c3c <transmit+0x524>)
 8000a76:	222d      	movs	r2, #45	; 0x2d
 8000a78:	701a      	strb	r2, [r3, #0]

				// третий акселерометр
				// Ось Х
				xIntSumThird = (str[18] & 0x0F) * 10 + (str[19] >> 4); // целочисленная сумма X
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3312      	adds	r3, #18
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	f003 020f 	and.w	r2, r3, #15
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3313      	adds	r3, #19
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	091b      	lsrs	r3, r3, #4
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a69      	ldr	r2, [pc, #420]	; (8000c40 <transmit+0x528>)
 8000a9c:	6013      	str	r3, [r2, #0]
				x5Third = str[19] & 0x0F; //перевод правого бита 5го байта
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3313      	adds	r3, #19
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	f003 030f 	and.w	r3, r3, #15
 8000aa8:	4a66      	ldr	r2, [pc, #408]	; (8000c44 <transmit+0x52c>)
 8000aaa:	6013      	str	r3, [r2, #0]
				x60Third = str[20] >> 4; //перевод левого бита 6го байта
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3314      	adds	r3, #20
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b63      	ldr	r3, [pc, #396]	; (8000c48 <transmit+0x530>)
 8000aba:	601a      	str	r2, [r3, #0]
				x65Third = str[20] & 0x0F; //перевод правого бита 6го байта
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3314      	adds	r3, #20
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	4a61      	ldr	r2, [pc, #388]	; (8000c4c <transmit+0x534>)
 8000ac8:	6013      	str	r3, [r2, #0]
				sprintf(xvalThird, "+%02d.%d%d ",xIntSumThird, x5Third, x60Third);
 8000aca:	4b5d      	ldr	r3, [pc, #372]	; (8000c40 <transmit+0x528>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b5d      	ldr	r3, [pc, #372]	; (8000c44 <transmit+0x52c>)
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	4b5d      	ldr	r3, [pc, #372]	; (8000c48 <transmit+0x530>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	4957      	ldr	r1, [pc, #348]	; (8000c38 <transmit+0x520>)
 8000adc:	485c      	ldr	r0, [pc, #368]	; (8000c50 <transmit+0x538>)
 8000ade:	f003 fba9 	bl	8004234 <siprintf>
				if((str[18] >> 4) == 0x01)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3312      	adds	r3, #18
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	091b      	lsrs	r3, r3, #4
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d102      	bne.n	8000af6 <transmit+0x3de>
					xvalThird[0] = '-';
 8000af0:	4b57      	ldr	r3, [pc, #348]	; (8000c50 <transmit+0x538>)
 8000af2:	222d      	movs	r2, #45	; 0x2d
 8000af4:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumThird = (str[21] & 0x0F) * 10 + (str[22] >> 4);	// целочисленная сумма Y
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3315      	adds	r3, #21
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	f003 020f 	and.w	r2, r3, #15
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3316      	adds	r3, #22
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	4413      	add	r3, r2
 8000b16:	4a4f      	ldr	r2, [pc, #316]	; (8000c54 <transmit+0x53c>)
 8000b18:	6013      	str	r3, [r2, #0]
				y8Third = str[22] & 0x0F; //перевод правого бита 8го байта
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3316      	adds	r3, #22
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	f003 030f 	and.w	r3, r3, #15
 8000b24:	4a4c      	ldr	r2, [pc, #304]	; (8000c58 <transmit+0x540>)
 8000b26:	6013      	str	r3, [r2, #0]
				y90Third = str[23] >> 4; //перевод левого бита 9го байта
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3317      	adds	r3, #23
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	091b      	lsrs	r3, r3, #4
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <transmit+0x544>)
 8000b36:	601a      	str	r2, [r3, #0]
				y95Third = str[23] & 0x0F; //перевод правого бита 9го байта
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3317      	adds	r3, #23
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	4a47      	ldr	r2, [pc, #284]	; (8000c60 <transmit+0x548>)
 8000b44:	6013      	str	r3, [r2, #0]
				sprintf(yvalThird, "+%02d.%d%d ", yIntSumThird, y8Third, y90Third);
 8000b46:	4b43      	ldr	r3, [pc, #268]	; (8000c54 <transmit+0x53c>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b43      	ldr	r3, [pc, #268]	; (8000c58 <transmit+0x540>)
 8000b4c:	6819      	ldr	r1, [r3, #0]
 8000b4e:	4b43      	ldr	r3, [pc, #268]	; (8000c5c <transmit+0x544>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	460b      	mov	r3, r1
 8000b56:	4938      	ldr	r1, [pc, #224]	; (8000c38 <transmit+0x520>)
 8000b58:	4842      	ldr	r0, [pc, #264]	; (8000c64 <transmit+0x54c>)
 8000b5a:	f003 fb6b 	bl	8004234 <siprintf>
				if((str[21] >> 4) == 0x01)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3315      	adds	r3, #21
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	091b      	lsrs	r3, r3, #4
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d102      	bne.n	8000b72 <transmit+0x45a>
					yvalThird[0] = '-';
 8000b6c:	4b3d      	ldr	r3, [pc, #244]	; (8000c64 <transmit+0x54c>)
 8000b6e:	222d      	movs	r2, #45	; 0x2d
 8000b70:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumThird = (str[24] & 0x0F) * 10 + (str[25] >> 4); //целочисленная сумма Z
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3318      	adds	r3, #24
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	f003 020f 	and.w	r2, r3, #15
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	461a      	mov	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3319      	adds	r3, #25
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	091b      	lsrs	r3, r3, #4
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4413      	add	r3, r2
 8000b92:	4a35      	ldr	r2, [pc, #212]	; (8000c68 <transmit+0x550>)
 8000b94:	6013      	str	r3, [r2, #0]
				z11Third = str[25] & 0x0F; //перевод правого бита 11го байта
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3319      	adds	r3, #25
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	4a32      	ldr	r2, [pc, #200]	; (8000c6c <transmit+0x554>)
 8000ba2:	6013      	str	r3, [r2, #0]
				z120Third = str[26] >> 4; //перевод левого бита 12го байта
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	331a      	adds	r3, #26
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	091b      	lsrs	r3, r3, #4
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <transmit+0x558>)
 8000bb2:	601a      	str	r2, [r3, #0]
				z125Third = str[26] & 0x0F; //перевод правого бита 12го байта
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	331a      	adds	r3, #26
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <transmit+0x55c>)
 8000bc0:	6013      	str	r3, [r2, #0]
				sprintf(zvalThird, "+%02d.%d%d ", zIntSumThird, z11Third, z120Third);
 8000bc2:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <transmit+0x550>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <transmit+0x554>)
 8000bc8:	6819      	ldr	r1, [r3, #0]
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <transmit+0x558>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	4919      	ldr	r1, [pc, #100]	; (8000c38 <transmit+0x520>)
 8000bd4:	4828      	ldr	r0, [pc, #160]	; (8000c78 <transmit+0x560>)
 8000bd6:	f003 fb2d 	bl	8004234 <siprintf>
				if((str[24] >> 4) == 0x01)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3318      	adds	r3, #24
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d102      	bne.n	8000bee <transmit+0x4d6>
					zvalThird[0] = '-';
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <transmit+0x560>)
 8000bea:	222d      	movs	r2, #45	; 0x2d
 8000bec:	701a      	strb	r2, [r3, #0]

			sprintf(str1, "%s%s%s%s%s%s%s%s%s\n", xvalFirst, yvalFirst, zvalFirst, xvalSecond, yvalSecond, zvalSecond, xvalThird, yvalThird, zvalThird);
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <transmit+0x560>)
 8000bf0:	9306      	str	r3, [sp, #24]
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <transmit+0x54c>)
 8000bf4:	9305      	str	r3, [sp, #20]
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <transmit+0x538>)
 8000bf8:	9304      	str	r3, [sp, #16]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <transmit+0x524>)
 8000bfc:	9303      	str	r3, [sp, #12]
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <transmit+0x564>)
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <transmit+0x568>)
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <transmit+0x56c>)
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <transmit+0x570>)
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <transmit+0x574>)
 8000c0e:	4920      	ldr	r1, [pc, #128]	; (8000c90 <transmit+0x578>)
 8000c10:	4820      	ldr	r0, [pc, #128]	; (8000c94 <transmit+0x57c>)
 8000c12:	f003 fb0f 	bl	8004234 <siprintf>

			HAL_UART_Transmit_IT(&huart2, (uint8_t*)str1, 64);
 8000c16:	2240      	movs	r2, #64	; 0x40
 8000c18:	491e      	ldr	r1, [pc, #120]	; (8000c94 <transmit+0x57c>)
 8000c1a:	481f      	ldr	r0, [pc, #124]	; (8000c98 <transmit+0x580>)
 8000c1c:	f002 fae8 	bl	80031f0 <HAL_UART_Transmit_IT>




}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200001d4 	.word	0x200001d4
 8000c2c:	2000011c 	.word	0x2000011c
 8000c30:	200003f0 	.word	0x200003f0
 8000c34:	20000214 	.word	0x20000214
 8000c38:	08004a58 	.word	0x08004a58
 8000c3c:	20000218 	.word	0x20000218
 8000c40:	200003ec 	.word	0x200003ec
 8000c44:	2000028c 	.word	0x2000028c
 8000c48:	200001f4 	.word	0x200001f4
 8000c4c:	200002a8 	.word	0x200002a8
 8000c50:	20000360 	.word	0x20000360
 8000c54:	20000308 	.word	0x20000308
 8000c58:	20000220 	.word	0x20000220
 8000c5c:	200001e0 	.word	0x200001e0
 8000c60:	200001f0 	.word	0x200001f0
 8000c64:	200001d8 	.word	0x200001d8
 8000c68:	200003d0 	.word	0x200003d0
 8000c6c:	200001e4 	.word	0x200001e4
 8000c70:	20000358 	.word	0x20000358
 8000c74:	200001f8 	.word	0x200001f8
 8000c78:	200002f0 	.word	0x200002f0
 8000c7c:	200002a0 	.word	0x200002a0
 8000c80:	200001cc 	.word	0x200001cc
 8000c84:	20000310 	.word	0x20000310
 8000c88:	20000200 	.word	0x20000200
 8000c8c:	200001e8 	.word	0x200001e8
 8000c90:	08004a64 	.word	0x08004a64
 8000c94:	200002ac 	.word	0x200002ac
 8000c98:	20000368 	.word	0x20000368

08000c9c <powx>:
	}

}
// Функция нахождения степени числа
int powx(int base, int exponent)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	int result = 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
	for (int i=exponent; i > 0; i--)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	e007      	b.n	8000cc0 <powx+0x24>
	{
		result = result * base;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	60fb      	str	r3, [r7, #12]
	for (int i=exponent; i > 0; i--)
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	dcf4      	bgt.n	8000cb0 <powx+0x14>
	}
	return result;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <Mass_toData8>:

// Функция перевода массива символов Hex в массив чисел
void Mass_toData8(uint8_t *pcBlock,uint8_t* data8, unsigned short len) //rx_buffer,rx_in-2
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	80fb      	strh	r3, [r7, #6]
	unsigned short sum = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	83fb      	strh	r3, [r7, #30]
	int x = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
	for(uint8_t j=0;j<len;j++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	75fb      	strb	r3, [r7, #23]
 8000cee:	e044      	b.n	8000d7a <Mass_toData8+0xa6>
	{
		for (int i = 0; i < 2; i++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	e033      	b.n	8000d5e <Mass_toData8+0x8a>
		{
			if (pcBlock[2 - i - 1+j*2] > 57)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	f1c3 0201 	rsb	r2, r3, #1
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b39      	cmp	r3, #57	; 0x39
 8000d0c:	d90c      	bls.n	8000d28 <Mass_toData8+0x54>
			{
				x = (pcBlock[2 - i - 1+j*2] - 55);
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	f1c3 0201 	rsb	r2, r3, #1
 8000d14:	7dfb      	ldrb	r3, [r7, #23]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	3b37      	subs	r3, #55	; 0x37
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	e00b      	b.n	8000d40 <Mass_toData8+0x6c>
			}
			else
			{
				x = (pcBlock[2 - i - 1+j*2] - 48);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	f1c3 0201 	rsb	r2, r3, #1
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	461a      	mov	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	3b30      	subs	r3, #48	; 0x30
 8000d3e:	61bb      	str	r3, [r7, #24]
			}
			sum += x * powx(16, i);
 8000d40:	6939      	ldr	r1, [r7, #16]
 8000d42:	2010      	movs	r0, #16
 8000d44:	f7ff ffaa 	bl	8000c9c <powx>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	fb03 f302 	mul.w	r3, r3, r2
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	8bfb      	ldrh	r3, [r7, #30]
 8000d54:	4413      	add	r3, r2
 8000d56:	83fb      	strh	r3, [r7, #30]
		for (int i = 0; i < 2; i++)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	ddc8      	ble.n	8000cf6 <Mass_toData8+0x22>
		}
		data8[j]=sum;
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4413      	add	r3, r2
 8000d6a:	8bfa      	ldrh	r2, [r7, #30]
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	701a      	strb	r2, [r3, #0]
		sum=0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	83fb      	strh	r3, [r7, #30]
	for(uint8_t j=0;j<len;j++)
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	3301      	adds	r3, #1
 8000d78:	75fb      	strb	r3, [r7, #23]
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	88fa      	ldrh	r2, [r7, #6]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8b5      	bhi.n	8000cf0 <Mass_toData8+0x1c>
	}

}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};

unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d9c:	81fb      	strh	r3, [r7, #14]

    while (len--)
 8000d9e:	e012      	b.n	8000dc6 <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 8000da0:	89fb      	ldrh	r3, [r7, #14]
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	89fb      	ldrh	r3, [r7, #14]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	1c59      	adds	r1, r3, #1
 8000db2:	6079      	str	r1, [r7, #4]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	4043      	eors	r3, r0
 8000db8:	4909      	ldr	r1, [pc, #36]	; (8000de0 <Crc16+0x54>)
 8000dba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	4053      	eors	r3, r2
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	1e5a      	subs	r2, r3, #1
 8000dca:	807a      	strh	r2, [r7, #2]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1e7      	bne.n	8000da0 <Crc16+0x14>

    return crc;
 8000dd0:	89fb      	ldrh	r3, [r7, #14]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	08004a78 	.word	0x08004a78

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f000 fbb4 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 f830 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f000 f92a 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df4:	f000 f8f2 	bl	8000fdc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000df8:	f000 f89c 	bl	8000f34 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000dfc:	f000 f8c4 	bl	8000f88 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  WMSM42InitRX();
 8000e00:	f7ff fbd6 	bl	80005b0 <WMSM42InitRX>
  reciveTime=HAL_GetTick();
 8000e04:	f000 fc0c 	bl	8001620 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <main+0x60>)
 8000e0c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(readFlag==1)
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <main+0x64>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d105      	bne.n	8000e22 <main+0x3e>
	  {
		  readFlag=0;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <main+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
		  transmit(str);
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <main+0x68>)
 8000e1e:	f7ff fc7b 	bl	8000718 <transmit>
	  }
	  if(HAL_GetTick()-reciveTime>5000)
 8000e22:	f000 fbfd 	bl	8001620 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <main+0x60>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d9eb      	bls.n	8000e0e <main+0x2a>
		 // HAL_UART_Abort(&huart6);
		//  HAL_UART_Init(&huart6);
		//  WMSM42InitRX();


		  reciveTime=HAL_GetTick();
 8000e36:	f000 fbf3 	bl	8001620 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	4b01      	ldr	r3, [pc, #4]	; (8000e44 <main+0x60>)
 8000e3e:	601a      	str	r2, [r3, #0]
	  if(readFlag==1)
 8000e40:	e7e5      	b.n	8000e0e <main+0x2a>
 8000e42:	bf00      	nop
 8000e44:	20000108 	.word	0x20000108
 8000e48:	20000104 	.word	0x20000104
 8000e4c:	200003a8 	.word	0x200003a8

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	; 0x50
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	2234      	movs	r2, #52	; 0x34
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 f9e0 	bl	8004224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <SystemClock_Config+0xdc>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	4a2b      	ldr	r2, [pc, #172]	; (8000f2c <SystemClock_Config+0xdc>)
 8000e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e82:	6413      	str	r3, [r2, #64]	; 0x40
 8000e84:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <SystemClock_Config+0xdc>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e90:	2300      	movs	r3, #0
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <SystemClock_Config+0xe0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <SystemClock_Config+0xe0>)
 8000e9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <SystemClock_Config+0xe0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ec4:	23b4      	movs	r3, #180	; 0xb4
 8000ec6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fda3 	bl	8002a24 <HAL_RCC_OscConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ee4:	f000 f952 	bl	800118c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ee8:	f001 fa92 	bl	8002410 <HAL_PWREx_EnableOverDrive>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ef2:	f000 f94b 	bl	800118c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efa:	2302      	movs	r3, #2
 8000efc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	2105      	movs	r1, #5
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 facb 	bl	80024b0 <HAL_RCC_ClockConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f20:	f000 f934 	bl	800118c <Error_Handler>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3750      	adds	r7, #80	; 0x50
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <MX_USART2_UART_Init+0x50>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f40:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f6c:	f001 ffb4 	bl	8002ed8 <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f76:	f000 f909 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000368 	.word	0x20000368
 8000f84:	40004400 	.word	0x40004400

08000f88 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_USART6_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fc0:	f001 ff8a 	bl	8002ed8 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fca:	f000 f8df 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000318 	.word	0x20000318
 8000fd8:	40011400 	.word	0x40011400

08000fdc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <MX_DMA_Init+0x68>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a16      	ldr	r2, [pc, #88]	; (8001044 <MX_DMA_Init+0x68>)
 8000fec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_DMA_Init+0x68>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_DMA_Init+0x68>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <MX_DMA_Init+0x68>)
 8001008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <MX_DMA_Init+0x68>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2011      	movs	r0, #17
 8001020:	f000 fc07 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001024:	2011      	movs	r0, #17
 8001026:	f000 fc20 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2039      	movs	r0, #57	; 0x39
 8001030:	f000 fbff 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001034:	2039      	movs	r0, #57	; 0x39
 8001036:	f000 fc18 	bl	800186a <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <MX_GPIO_Init+0xb4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a25      	ldr	r2, [pc, #148]	; (80010fc <MX_GPIO_Init+0xb4>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <MX_GPIO_Init+0xb4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_GPIO_Init+0xb4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <MX_GPIO_Init+0xb4>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_GPIO_Init+0xb4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_GPIO_Init+0xb4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <MX_GPIO_Init+0xb4>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_GPIO_Init+0xb4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	210e      	movs	r1, #14
 80010b6:	4812      	ldr	r0, [pc, #72]	; (8001100 <MX_GPIO_Init+0xb8>)
 80010b8:	f001 f990 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_GPIO_Init+0xbc>)
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4619      	mov	r1, r3
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <MX_GPIO_Init+0xb8>)
 80010d2:	f000 fff1 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80010d6:	230e      	movs	r3, #14
 80010d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_GPIO_Init+0xb8>)
 80010ee:	f000 ffe3 	bl	80020b8 <HAL_GPIO_Init>

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020800 	.word	0x40020800
 8001104:	10210000 	.word	0x10210000

08001108 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	if(huart==&huart6)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_UART_RxCpltCallback+0x68>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d126      	bne.n	8001166 <HAL_UART_RxCpltCallback+0x5e>
	{


		if(Buff_rx[0]!=0)
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_UART_RxCpltCallback+0x6c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d022      	beq.n	8001166 <HAL_UART_RxCpltCallback+0x5e>
		{
			reciveTime=HAL_GetTick();
 8001120:	f000 fa7e 	bl	8001620 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_UART_RxCpltCallback+0x70>)
 8001128:	601a      	str	r2, [r3, #0]
			Mass_toData8(&Buff_rx[6],str,29);
 800112a:	221d      	movs	r2, #29
 800112c:	4913      	ldr	r1, [pc, #76]	; (800117c <HAL_UART_RxCpltCallback+0x74>)
 800112e:	4814      	ldr	r0, [pc, #80]	; (8001180 <HAL_UART_RxCpltCallback+0x78>)
 8001130:	f7ff fdd0 	bl	8000cd4 <Mass_toData8>
			CRC_c=(str[27]<<8)+(str[28]);
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_UART_RxCpltCallback+0x74>)
 8001136:	7edb      	ldrb	r3, [r3, #27]
 8001138:	b29b      	uxth	r3, r3
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b29a      	uxth	r2, r3
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_UART_RxCpltCallback+0x74>)
 8001140:	7f1b      	ldrb	r3, [r3, #28]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4413      	add	r3, r2
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_UART_RxCpltCallback+0x7c>)
 800114a:	801a      	strh	r2, [r3, #0]
			if(Crc16(str, 27)==CRC_c)
 800114c:	211b      	movs	r1, #27
 800114e:	480b      	ldr	r0, [pc, #44]	; (800117c <HAL_UART_RxCpltCallback+0x74>)
 8001150:	f7ff fe1c 	bl	8000d8c <Crc16>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_UART_RxCpltCallback+0x7c>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d102      	bne.n	8001166 <HAL_UART_RxCpltCallback+0x5e>
			{
				readFlag=1;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_UART_RxCpltCallback+0x80>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_UART_Receive_IT(&huart6, Buff_rx, 11);
*/


}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000318 	.word	0x20000318
 8001174:	20000124 	.word	0x20000124
 8001178:	20000108 	.word	0x20000108
 800117c:	200003a8 	.word	0x200003a8
 8001180:	2000012a 	.word	0x2000012a
 8001184:	2000010c 	.word	0x2000010c
 8001188:	20000104 	.word	0x20000104

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_MspInit+0x4c>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_MspInit+0x4c>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011da:	2007      	movs	r0, #7
 80011dc:	f000 fb1e 	bl	800181c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a68      	ldr	r2, [pc, #416]	; (80013ac <HAL_UART_MspInit+0x1c0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d162      	bne.n	80012d4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	4b67      	ldr	r3, [pc, #412]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a66      	ldr	r2, [pc, #408]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	4b60      	ldr	r3, [pc, #384]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a5f      	ldr	r2, [pc, #380]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001246:	230c      	movs	r3, #12
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001256:	2307      	movs	r3, #7
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	4854      	ldr	r0, [pc, #336]	; (80013b4 <HAL_UART_MspInit+0x1c8>)
 8001262:	f000 ff29 	bl	80020b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001266:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 8001268:	4a54      	ldr	r2, [pc, #336]	; (80013bc <HAL_UART_MspInit+0x1d0>)
 800126a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800126c:	4b52      	ldr	r3, [pc, #328]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 800126e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001272:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001274:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 8001276:	2240      	movs	r2, #64	; 0x40
 8001278:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800127a:	4b4f      	ldr	r3, [pc, #316]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001280:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 8001282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001286:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001288:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128e:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001294:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800129a:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012a0:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012a6:	4844      	ldr	r0, [pc, #272]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 80012a8:	f000 fafa 	bl	80018a0 <HAL_DMA_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80012b2:	f7ff ff6b 	bl	800118c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a3f      	ldr	r2, [pc, #252]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
 80012bc:	4a3e      	ldr	r2, [pc, #248]	; (80013b8 <HAL_UART_MspInit+0x1cc>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2026      	movs	r0, #38	; 0x26
 80012c8:	f000 fab3 	bl	8001832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012cc:	2026      	movs	r0, #38	; 0x26
 80012ce:	f000 facc 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80012d2:	e067      	b.n	80013a4 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a39      	ldr	r2, [pc, #228]	; (80013c0 <HAL_UART_MspInit+0x1d4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d162      	bne.n	80013a4 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 80012e8:	f043 0320 	orr.w	r3, r3, #32
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a2b      	ldr	r2, [pc, #172]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <HAL_UART_MspInit+0x1c4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	; 0xc0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001326:	2308      	movs	r3, #8
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4824      	ldr	r0, [pc, #144]	; (80013c4 <HAL_UART_MspInit+0x1d8>)
 8001332:	f000 fec1 	bl	80020b8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 8001338:	4a24      	ldr	r2, [pc, #144]	; (80013cc <HAL_UART_MspInit+0x1e0>)
 800133a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 800133e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001342:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 8001352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001356:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 8001366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001378:	4813      	ldr	r0, [pc, #76]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 800137a:	f000 fa91 	bl	80018a0 <HAL_DMA_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001384:	f7ff ff02 	bl	800118c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_UART_MspInit+0x1dc>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	2047      	movs	r0, #71	; 0x47
 800139a:	f000 fa4a 	bl	8001832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800139e:	2047      	movs	r0, #71	; 0x47
 80013a0:	f000 fa63 	bl	800186a <HAL_NVIC_EnableIRQ>
}
 80013a4:	bf00      	nop
 80013a6:	3730      	adds	r7, #48	; 0x30
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	2000022c 	.word	0x2000022c
 80013bc:	400260a0 	.word	0x400260a0
 80013c0:	40011400 	.word	0x40011400
 80013c4:	40020800 	.word	0x40020800
 80013c8:	2000016c 	.word	0x2000016c
 80013cc:	40026428 	.word	0x40026428

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001424:	f000 f8e8 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <DMA1_Stream6_IRQHandler+0x10>)
 8001432:	f000 fbcd 	bl	8001bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000022c 	.word	0x2000022c

08001440 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <USART2_IRQHandler+0x10>)
 8001446:	f002 f81b 	bl	8003480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000368 	.word	0x20000368

08001454 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <DMA2_Stream1_IRQHandler+0x10>)
 800145a:	f000 fbb9 	bl	8001bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000016c 	.word	0x2000016c

08001468 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <USART6_IRQHandler+0x10>)
 800146e:	f002 f807 	bl	8003480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000318 	.word	0x20000318

0800147c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <_sbrk+0x50>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x16>
		heap_end = &end;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <_sbrk+0x50>)
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <_sbrk+0x54>)
 8001490:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <_sbrk+0x50>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <_sbrk+0x50>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	466a      	mov	r2, sp
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d907      	bls.n	80014b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014a6:	f002 fe93 	bl	80041d0 <__errno>
 80014aa:	4602      	mov	r2, r0
 80014ac:	230c      	movs	r3, #12
 80014ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014b4:	e006      	b.n	80014c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <_sbrk+0x50>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a03      	ldr	r2, [pc, #12]	; (80014cc <_sbrk+0x50>)
 80014c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000110 	.word	0x20000110
 80014d0:	20000400 	.word	0x20000400

080014d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <SystemInit+0x28>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014de:	4a07      	ldr	r2, [pc, #28]	; (80014fc <SystemInit+0x28>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SystemInit+0x28>)
 80014ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ee:	609a      	str	r2, [r3, #8]
#endif
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001504:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001506:	e003      	b.n	8001510 <LoopCopyDataInit>

08001508 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800150a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800150c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800150e:	3104      	adds	r1, #4

08001510 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001514:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001516:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001518:	d3f6      	bcc.n	8001508 <CopyDataInit>
  ldr  r2, =_sbss
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800151c:	e002      	b.n	8001524 <LoopFillZerobss>

0800151e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800151e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001520:	f842 3b04 	str.w	r3, [r2], #4

08001524 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001526:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001528:	d3f9      	bcc.n	800151e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800152a:	f7ff ffd3 	bl	80014d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152e:	f002 fe55 	bl	80041dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff fc57 	bl	8000de4 <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001538:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800153c:	08004cdc 	.word	0x08004cdc
  ldr  r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001544:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 8001548:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 800154c:	200003fc 	.word	0x200003fc

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_Init+0x40>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_Init+0x40>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x40>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f94d 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fe08 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023c00 	.word	0x40023c00

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f965 	bl	8001886 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d4:	f000 f92d 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000078 	.word	0x20000078
 80015f0:	20000080 	.word	0x20000080
 80015f4:	2000007c 	.word	0x2000007c

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000080 	.word	0x20000080
 800161c:	200003f4 	.word	0x200003f4

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200003f4 	.word	0x200003f4

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff ffee 	bl	8001620 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_Delay+0x40>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffde 	bl	8001620 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000080 	.word	0x20000080

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4907      	ldr	r1, [pc, #28]	; (8001718 <__NVIC_EnableIRQ+0x38>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000e100 	.word	0xe000e100

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff29 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff3e 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff31 	bl	80016e0 <__NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffa2 	bl	80017d8 <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff feb8 	bl	8001620 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e099      	b.n	80019f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2202      	movs	r2, #2
 80018c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018dc:	e00f      	b.n	80018fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018de:	f7ff fe9f 	bl	8001620 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d908      	bls.n	80018fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2220      	movs	r2, #32
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2203      	movs	r2, #3
 80018f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e078      	b.n	80019f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1e8      	bne.n	80018de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <HAL_DMA_Init+0x158>)
 8001918:	4013      	ands	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800192a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	2b04      	cmp	r3, #4
 8001956:	d107      	bne.n	8001968 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4313      	orrs	r3, r2
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f023 0307 	bic.w	r3, r3, #7
 800197e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	4313      	orrs	r3, r2
 8001988:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	2b04      	cmp	r3, #4
 8001990:	d117      	bne.n	80019c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00e      	beq.n	80019c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fb0d 	bl	8001fc4 <DMA_CheckFifoParam>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2240      	movs	r2, #64	; 0x40
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019be:	2301      	movs	r3, #1
 80019c0:	e016      	b.n	80019f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fac4 	bl	8001f58 <DMA_CalcBaseAndBitshift>
 80019d0:	4603      	mov	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d8:	223f      	movs	r2, #63	; 0x3f
 80019da:	409a      	lsls	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	f010803f 	.word	0xf010803f

080019fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_DMA_Start_IT+0x26>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e040      	b.n	8001aa4 <HAL_DMA_Start_IT+0xa8>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d12f      	bne.n	8001a96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 fa56 	bl	8001efc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	223f      	movs	r2, #63	; 0x3f
 8001a56:	409a      	lsls	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0216 	orr.w	r2, r2, #22
 8001a6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0208 	orr.w	r2, r2, #8
 8001a82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0201 	orr.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e005      	b.n	8001aa2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001aba:	f7ff fdb1 	bl	8001620 <HAL_GetTick>
 8001abe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d008      	beq.n	8001ade <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2280      	movs	r2, #128	; 0x80
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e052      	b.n	8001b84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0216 	bic.w	r2, r2, #22
 8001aec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001afc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d103      	bne.n	8001b0e <HAL_DMA_Abort+0x62>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0208 	bic.w	r2, r2, #8
 8001b1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0201 	bic.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2e:	e013      	b.n	8001b58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b30:	f7ff fd76 	bl	8001620 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d90c      	bls.n	8001b58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2220      	movs	r2, #32
 8001b42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2203      	movs	r2, #3
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e015      	b.n	8001b84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1e4      	bne.n	8001b30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6a:	223f      	movs	r2, #63	; 0x3f
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d004      	beq.n	8001baa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00c      	b.n	8001bc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2205      	movs	r2, #5
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bdc:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <HAL_DMA_IRQHandler+0x258>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a92      	ldr	r2, [pc, #584]	; (8001e2c <HAL_DMA_IRQHandler+0x25c>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0a9b      	lsrs	r3, r3, #10
 8001be8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d01a      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0204 	bic.w	r2, r2, #4
 8001c22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	2208      	movs	r2, #8
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	2201      	movs	r2, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d012      	beq.n	8001c72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00b      	beq.n	8001c72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	2201      	movs	r2, #1
 8001c60:	409a      	lsls	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	f043 0202 	orr.w	r2, r3, #2
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c76:	2204      	movs	r2, #4
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d012      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00b      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c94:	2204      	movs	r2, #4
 8001c96:	409a      	lsls	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	f043 0204 	orr.w	r2, r3, #4
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	2210      	movs	r2, #16
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d043      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d03c      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cca:	2210      	movs	r2, #16
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d018      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d024      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	4798      	blx	r3
 8001cfe:	e01f      	b.n	8001d40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01b      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
 8001d10:	e016      	b.n	8001d40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0208 	bic.w	r2, r2, #8
 8001d2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	2220      	movs	r2, #32
 8001d46:	409a      	lsls	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 808e 	beq.w	8001e6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8086 	beq.w	8001e6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	2220      	movs	r2, #32
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d136      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0216 	bic.w	r2, r2, #22
 8001d88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <HAL_DMA_IRQHandler+0x1da>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0208 	bic.w	r2, r2, #8
 8001db8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	223f      	movs	r2, #63	; 0x3f
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d07d      	beq.n	8001eda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
        }
        return;
 8001de6:	e078      	b.n	8001eda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01c      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d108      	bne.n	8001e16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d030      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
 8001e14:	e02b      	b.n	8001e6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d027      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
 8001e26:	e022      	b.n	8001e6e <HAL_DMA_IRQHandler+0x29e>
 8001e28:	20000078 	.word	0x20000078
 8001e2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10f      	bne.n	8001e5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0210 	bic.w	r2, r2, #16
 8001e4c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d032      	beq.n	8001edc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d022      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2205      	movs	r2, #5
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0201 	bic.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d307      	bcc.n	8001eb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f2      	bne.n	8001e9a <HAL_DMA_IRQHandler+0x2ca>
 8001eb4:	e000      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001eb6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
 8001ed8:	e000      	b.n	8001edc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001eda:	bf00      	nop
    }
  }
}
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop

08001ee4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b40      	cmp	r3, #64	; 0x40
 8001f28:	d108      	bne.n	8001f3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f3a:	e007      	b.n	8001f4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3b10      	subs	r3, #16
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <DMA_CalcBaseAndBitshift+0x64>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <DMA_CalcBaseAndBitshift+0x68>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d909      	bls.n	8001f9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	1d1a      	adds	r2, r3, #4
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	659a      	str	r2, [r3, #88]	; 0x58
 8001f98:	e007      	b.n	8001faa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	aaaaaaab 	.word	0xaaaaaaab
 8001fc0:	08004c90 	.word	0x08004c90

08001fc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d11f      	bne.n	800201e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d855      	bhi.n	8002090 <DMA_CheckFifoParam+0xcc>
 8001fe4:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <DMA_CheckFifoParam+0x28>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08001ffd 	.word	0x08001ffd
 8001ff0:	0800200f 	.word	0x0800200f
 8001ff4:	08001ffd 	.word	0x08001ffd
 8001ff8:	08002091 	.word	0x08002091
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d045      	beq.n	8002094 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800200c:	e042      	b.n	8002094 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002016:	d13f      	bne.n	8002098 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800201c:	e03c      	b.n	8002098 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002026:	d121      	bne.n	800206c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d836      	bhi.n	800209c <DMA_CheckFifoParam+0xd8>
 800202e:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <DMA_CheckFifoParam+0x70>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002045 	.word	0x08002045
 8002038:	0800204b 	.word	0x0800204b
 800203c:	08002045 	.word	0x08002045
 8002040:	0800205d 	.word	0x0800205d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
      break;
 8002048:	e02f      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d024      	beq.n	80020a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800205a:	e021      	b.n	80020a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002064:	d11e      	bne.n	80020a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800206a:	e01b      	b.n	80020a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d902      	bls.n	8002078 <DMA_CheckFifoParam+0xb4>
 8002072:	2b03      	cmp	r3, #3
 8002074:	d003      	beq.n	800207e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002076:	e018      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      break;
 800207c:	e015      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00e      	beq.n	80020a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
      break;
 800208e:	e00b      	b.n	80020a8 <DMA_CheckFifoParam+0xe4>
      break;
 8002090:	bf00      	nop
 8002092:	e00a      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 8002094:	bf00      	nop
 8002096:	e008      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 8002098:	bf00      	nop
 800209a:	e006      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 800209c:	bf00      	nop
 800209e:	e004      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 80020a0:	bf00      	nop
 80020a2:	e002      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;   
 80020a4:	bf00      	nop
 80020a6:	e000      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 80020a8:	bf00      	nop
    }
  } 
  
  return status; 
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	e165      	b.n	80023a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f040 8154 	bne.w	800239a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d00b      	beq.n	8002112 <HAL_GPIO_Init+0x5a>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d007      	beq.n	8002112 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002106:	2b11      	cmp	r3, #17
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b12      	cmp	r3, #18
 8002110:	d130      	bne.n	8002174 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	2203      	movs	r2, #3
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 0201 	and.w	r2, r3, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0xfc>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b12      	cmp	r3, #18
 80021b2:	d123      	bne.n	80021fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	08da      	lsrs	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3208      	adds	r2, #8
 80021bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	69b9      	ldr	r1, [r7, #24]
 80021f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80ae 	beq.w	800239a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b5c      	ldr	r3, [pc, #368]	; (80023b4 <HAL_GPIO_Init+0x2fc>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4a5b      	ldr	r2, [pc, #364]	; (80023b4 <HAL_GPIO_Init+0x2fc>)
 8002248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
 800224e:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HAL_GPIO_Init+0x2fc>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225a:	4a57      	ldr	r2, [pc, #348]	; (80023b8 <HAL_GPIO_Init+0x300>)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4e      	ldr	r2, [pc, #312]	; (80023bc <HAL_GPIO_Init+0x304>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d025      	beq.n	80022d2 <HAL_GPIO_Init+0x21a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4d      	ldr	r2, [pc, #308]	; (80023c0 <HAL_GPIO_Init+0x308>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01f      	beq.n	80022ce <HAL_GPIO_Init+0x216>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4c      	ldr	r2, [pc, #304]	; (80023c4 <HAL_GPIO_Init+0x30c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x212>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4b      	ldr	r2, [pc, #300]	; (80023c8 <HAL_GPIO_Init+0x310>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x20e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <HAL_GPIO_Init+0x314>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x20a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a49      	ldr	r2, [pc, #292]	; (80023d0 <HAL_GPIO_Init+0x318>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x206>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a48      	ldr	r2, [pc, #288]	; (80023d4 <HAL_GPIO_Init+0x31c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x202>
 80022b6:	2306      	movs	r3, #6
 80022b8:	e00c      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022ba:	2307      	movs	r3, #7
 80022bc:	e00a      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022be:	2305      	movs	r3, #5
 80022c0:	e008      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022c2:	2304      	movs	r3, #4
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e004      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e002      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022d2:	2300      	movs	r3, #0
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	f002 0203 	and.w	r2, r2, #3
 80022da:	0092      	lsls	r2, r2, #2
 80022dc:	4093      	lsls	r3, r2
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e4:	4934      	ldr	r1, [pc, #208]	; (80023b8 <HAL_GPIO_Init+0x300>)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	3302      	adds	r3, #2
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f2:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <HAL_GPIO_Init+0x320>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002316:	4a30      	ldr	r2, [pc, #192]	; (80023d8 <HAL_GPIO_Init+0x320>)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_GPIO_Init+0x320>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002340:	4a25      	ldr	r2, [pc, #148]	; (80023d8 <HAL_GPIO_Init+0x320>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_GPIO_Init+0x320>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236a:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_GPIO_Init+0x320>)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_GPIO_Init+0x320>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002394:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <HAL_GPIO_Init+0x320>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3301      	adds	r3, #1
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	2b0f      	cmp	r3, #15
 80023a4:	f67f ae96 	bls.w	80020d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a8:	bf00      	nop
 80023aa:	3724      	adds	r7, #36	; 0x24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40013800 	.word	0x40013800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40020c00 	.word	0x40020c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40021400 	.word	0x40021400
 80023d4:	40021800 	.word	0x40021800
 80023d8:	40013c00 	.word	0x40013c00

080023dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
 80023e8:	4613      	mov	r3, r2
 80023ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f8:	e003      	b.n	8002402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	041a      	lsls	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800243c:	f7ff f8f0 	bl	8001620 <HAL_GetTick>
 8002440:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002442:	e009      	b.n	8002458 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002444:	f7ff f8ec 	bl	8001620 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002452:	d901      	bls.n	8002458 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e01f      	b.n	8002498 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002464:	d1ee      	bne.n	8002444 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800246c:	f7ff f8d8 	bl	8001620 <HAL_GetTick>
 8002470:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002472:	e009      	b.n	8002488 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002474:	f7ff f8d4 	bl	8001620 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002482:	d901      	bls.n	8002488 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e007      	b.n	8002498 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002494:	d1ee      	bne.n	8002474 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	420e0040 	.word	0x420e0040
 80024a8:	40007000 	.word	0x40007000
 80024ac:	420e0044 	.word	0x420e0044

080024b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0cc      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c4:	4b68      	ldr	r3, [pc, #416]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d90c      	bls.n	80024ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b65      	ldr	r3, [pc, #404]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b63      	ldr	r3, [pc, #396]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0b8      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d020      	beq.n	800253a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002504:	4b59      	ldr	r3, [pc, #356]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4a58      	ldr	r2, [pc, #352]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800250e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800251c:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002528:	4b50      	ldr	r3, [pc, #320]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	494d      	ldr	r1, [pc, #308]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d044      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d119      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e07f      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d003      	beq.n	800256e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256a:	2b03      	cmp	r3, #3
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256e:	4b3f      	ldr	r3, [pc, #252]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e06f      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e067      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258e:	4b37      	ldr	r3, [pc, #220]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f023 0203 	bic.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4934      	ldr	r1, [pc, #208]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a0:	f7ff f83e 	bl	8001620 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	e00a      	b.n	80025be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a8:	f7ff f83a 	bl	8001620 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e04f      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 020c 	and.w	r2, r3, #12
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1eb      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d20c      	bcs.n	80025f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b22      	ldr	r3, [pc, #136]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e032      	b.n	800265e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4916      	ldr	r1, [pc, #88]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	490e      	ldr	r1, [pc, #56]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002636:	f000 f855 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 800263a:	4601      	mov	r1, r0
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	5cd3      	ldrb	r3, [r2, r3]
 800264a:	fa21 f303 	lsr.w	r3, r1, r3
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe ff9e 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023c00 	.word	0x40023c00
 800266c:	40023800 	.word	0x40023800
 8002670:	08004c78 	.word	0x08004c78
 8002674:	20000078 	.word	0x20000078
 8002678:	2000007c 	.word	0x2000007c

0800267c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_RCC_GetHCLKFreq+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000078 	.word	0x20000078

08002694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002698:	f7ff fff0 	bl	800267c <HAL_RCC_GetHCLKFreq>
 800269c:	4601      	mov	r1, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4a03      	ldr	r2, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40023800 	.word	0x40023800
 80026b8:	08004c88 	.word	0x08004c88

080026bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026c0:	f7ff ffdc 	bl	800267c <HAL_RCC_GetHCLKFreq>
 80026c4:	4601      	mov	r1, r0
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0b5b      	lsrs	r3, r3, #13
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	08004c88 	.word	0x08004c88

080026e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fe:	4bc6      	ldr	r3, [pc, #792]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x334>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b0c      	cmp	r3, #12
 8002708:	f200 817e 	bhi.w	8002a08 <HAL_RCC_GetSysClockFreq+0x324>
 800270c:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <HAL_RCC_GetSysClockFreq+0x30>)
 800270e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002712:	bf00      	nop
 8002714:	08002749 	.word	0x08002749
 8002718:	08002a09 	.word	0x08002a09
 800271c:	08002a09 	.word	0x08002a09
 8002720:	08002a09 	.word	0x08002a09
 8002724:	0800274f 	.word	0x0800274f
 8002728:	08002a09 	.word	0x08002a09
 800272c:	08002a09 	.word	0x08002a09
 8002730:	08002a09 	.word	0x08002a09
 8002734:	08002755 	.word	0x08002755
 8002738:	08002a09 	.word	0x08002a09
 800273c:	08002a09 	.word	0x08002a09
 8002740:	08002a09 	.word	0x08002a09
 8002744:	080028b1 	.word	0x080028b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4bb4      	ldr	r3, [pc, #720]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x338>)
 800274a:	613b      	str	r3, [r7, #16]
       break;
 800274c:	e15f      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800274e:	4bb4      	ldr	r3, [pc, #720]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002750:	613b      	str	r3, [r7, #16]
      break;
 8002752:	e15c      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002754:	4bb0      	ldr	r3, [pc, #704]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x334>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800275c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800275e:	4bae      	ldr	r3, [pc, #696]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x334>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d04a      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276a:	4bab      	ldr	r3, [pc, #684]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x334>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	099b      	lsrs	r3, r3, #6
 8002770:	f04f 0400 	mov.w	r4, #0
 8002774:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	ea03 0501 	and.w	r5, r3, r1
 8002780:	ea04 0602 	and.w	r6, r4, r2
 8002784:	4629      	mov	r1, r5
 8002786:	4632      	mov	r2, r6
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	f04f 0400 	mov.w	r4, #0
 8002790:	0154      	lsls	r4, r2, #5
 8002792:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002796:	014b      	lsls	r3, r1, #5
 8002798:	4619      	mov	r1, r3
 800279a:	4622      	mov	r2, r4
 800279c:	1b49      	subs	r1, r1, r5
 800279e:	eb62 0206 	sbc.w	r2, r2, r6
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	f04f 0400 	mov.w	r4, #0
 80027aa:	0194      	lsls	r4, r2, #6
 80027ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027b0:	018b      	lsls	r3, r1, #6
 80027b2:	1a5b      	subs	r3, r3, r1
 80027b4:	eb64 0402 	sbc.w	r4, r4, r2
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	00e2      	lsls	r2, r4, #3
 80027c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027c6:	00d9      	lsls	r1, r3, #3
 80027c8:	460b      	mov	r3, r1
 80027ca:	4614      	mov	r4, r2
 80027cc:	195b      	adds	r3, r3, r5
 80027ce:	eb44 0406 	adc.w	r4, r4, r6
 80027d2:	f04f 0100 	mov.w	r1, #0
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	0262      	lsls	r2, r4, #9
 80027dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027e0:	0259      	lsls	r1, r3, #9
 80027e2:	460b      	mov	r3, r1
 80027e4:	4614      	mov	r4, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	4621      	mov	r1, r4
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f04f 0400 	mov.w	r4, #0
 80027f0:	461a      	mov	r2, r3
 80027f2:	4623      	mov	r3, r4
 80027f4:	f7fd fd5c 	bl	80002b0 <__aeabi_uldivmod>
 80027f8:	4603      	mov	r3, r0
 80027fa:	460c      	mov	r4, r1
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	e049      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002800:	4b85      	ldr	r3, [pc, #532]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x334>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	f04f 0400 	mov.w	r4, #0
 800280a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	ea03 0501 	and.w	r5, r3, r1
 8002816:	ea04 0602 	and.w	r6, r4, r2
 800281a:	4629      	mov	r1, r5
 800281c:	4632      	mov	r2, r6
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	f04f 0400 	mov.w	r4, #0
 8002826:	0154      	lsls	r4, r2, #5
 8002828:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800282c:	014b      	lsls	r3, r1, #5
 800282e:	4619      	mov	r1, r3
 8002830:	4622      	mov	r2, r4
 8002832:	1b49      	subs	r1, r1, r5
 8002834:	eb62 0206 	sbc.w	r2, r2, r6
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	f04f 0400 	mov.w	r4, #0
 8002840:	0194      	lsls	r4, r2, #6
 8002842:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002846:	018b      	lsls	r3, r1, #6
 8002848:	1a5b      	subs	r3, r3, r1
 800284a:	eb64 0402 	sbc.w	r4, r4, r2
 800284e:	f04f 0100 	mov.w	r1, #0
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	00e2      	lsls	r2, r4, #3
 8002858:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800285c:	00d9      	lsls	r1, r3, #3
 800285e:	460b      	mov	r3, r1
 8002860:	4614      	mov	r4, r2
 8002862:	195b      	adds	r3, r3, r5
 8002864:	eb44 0406 	adc.w	r4, r4, r6
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	02a2      	lsls	r2, r4, #10
 8002872:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002876:	0299      	lsls	r1, r3, #10
 8002878:	460b      	mov	r3, r1
 800287a:	4614      	mov	r4, r2
 800287c:	4618      	mov	r0, r3
 800287e:	4621      	mov	r1, r4
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f04f 0400 	mov.w	r4, #0
 8002886:	461a      	mov	r2, r3
 8002888:	4623      	mov	r3, r4
 800288a:	f7fd fd11 	bl	80002b0 <__aeabi_uldivmod>
 800288e:	4603      	mov	r3, r0
 8002890:	460c      	mov	r4, r1
 8002892:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002894:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x334>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	3301      	adds	r3, #1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	613b      	str	r3, [r7, #16]
      break;
 80028ae:	e0ae      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b0:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x334>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ba:	4b57      	ldr	r3, [pc, #348]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x334>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d04a      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c6:	4b54      	ldr	r3, [pc, #336]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x334>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	099b      	lsrs	r3, r3, #6
 80028cc:	f04f 0400 	mov.w	r4, #0
 80028d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	ea03 0501 	and.w	r5, r3, r1
 80028dc:	ea04 0602 	and.w	r6, r4, r2
 80028e0:	4629      	mov	r1, r5
 80028e2:	4632      	mov	r2, r6
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	f04f 0400 	mov.w	r4, #0
 80028ec:	0154      	lsls	r4, r2, #5
 80028ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028f2:	014b      	lsls	r3, r1, #5
 80028f4:	4619      	mov	r1, r3
 80028f6:	4622      	mov	r2, r4
 80028f8:	1b49      	subs	r1, r1, r5
 80028fa:	eb62 0206 	sbc.w	r2, r2, r6
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	f04f 0400 	mov.w	r4, #0
 8002906:	0194      	lsls	r4, r2, #6
 8002908:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800290c:	018b      	lsls	r3, r1, #6
 800290e:	1a5b      	subs	r3, r3, r1
 8002910:	eb64 0402 	sbc.w	r4, r4, r2
 8002914:	f04f 0100 	mov.w	r1, #0
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	00e2      	lsls	r2, r4, #3
 800291e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002922:	00d9      	lsls	r1, r3, #3
 8002924:	460b      	mov	r3, r1
 8002926:	4614      	mov	r4, r2
 8002928:	195b      	adds	r3, r3, r5
 800292a:	eb44 0406 	adc.w	r4, r4, r6
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	0262      	lsls	r2, r4, #9
 8002938:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800293c:	0259      	lsls	r1, r3, #9
 800293e:	460b      	mov	r3, r1
 8002940:	4614      	mov	r4, r2
 8002942:	4618      	mov	r0, r3
 8002944:	4621      	mov	r1, r4
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f04f 0400 	mov.w	r4, #0
 800294c:	461a      	mov	r2, r3
 800294e:	4623      	mov	r3, r4
 8002950:	f7fd fcae 	bl	80002b0 <__aeabi_uldivmod>
 8002954:	4603      	mov	r3, r0
 8002956:	460c      	mov	r4, r1
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	e049      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295c:	4b2e      	ldr	r3, [pc, #184]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x334>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	f04f 0400 	mov.w	r4, #0
 8002966:	f240 11ff 	movw	r1, #511	; 0x1ff
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	ea03 0501 	and.w	r5, r3, r1
 8002972:	ea04 0602 	and.w	r6, r4, r2
 8002976:	4629      	mov	r1, r5
 8002978:	4632      	mov	r2, r6
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	f04f 0400 	mov.w	r4, #0
 8002982:	0154      	lsls	r4, r2, #5
 8002984:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002988:	014b      	lsls	r3, r1, #5
 800298a:	4619      	mov	r1, r3
 800298c:	4622      	mov	r2, r4
 800298e:	1b49      	subs	r1, r1, r5
 8002990:	eb62 0206 	sbc.w	r2, r2, r6
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	f04f 0400 	mov.w	r4, #0
 800299c:	0194      	lsls	r4, r2, #6
 800299e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029a2:	018b      	lsls	r3, r1, #6
 80029a4:	1a5b      	subs	r3, r3, r1
 80029a6:	eb64 0402 	sbc.w	r4, r4, r2
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	00e2      	lsls	r2, r4, #3
 80029b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029b8:	00d9      	lsls	r1, r3, #3
 80029ba:	460b      	mov	r3, r1
 80029bc:	4614      	mov	r4, r2
 80029be:	195b      	adds	r3, r3, r5
 80029c0:	eb44 0406 	adc.w	r4, r4, r6
 80029c4:	f04f 0100 	mov.w	r1, #0
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	02a2      	lsls	r2, r4, #10
 80029ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029d2:	0299      	lsls	r1, r3, #10
 80029d4:	460b      	mov	r3, r1
 80029d6:	4614      	mov	r4, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	4621      	mov	r1, r4
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f04f 0400 	mov.w	r4, #0
 80029e2:	461a      	mov	r2, r3
 80029e4:	4623      	mov	r3, r4
 80029e6:	f7fd fc63 	bl	80002b0 <__aeabi_uldivmod>
 80029ea:	4603      	mov	r3, r0
 80029ec:	460c      	mov	r4, r1
 80029ee:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x334>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	0f1b      	lsrs	r3, r3, #28
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	613b      	str	r3, [r7, #16]
      break;
 8002a06:	e002      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x338>)
 8002a0a:	613b      	str	r3, [r7, #16]
      break;
 8002a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0e:	693b      	ldr	r3, [r7, #16]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	00f42400 	.word	0x00f42400
 8002a20:	007a1200 	.word	0x007a1200

08002a24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8083 	beq.w	8002b44 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a3e:	4b95      	ldr	r3, [pc, #596]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d019      	beq.n	8002a7e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a4a:	4b92      	ldr	r3, [pc, #584]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d106      	bne.n	8002a64 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a56:	4b8f      	ldr	r3, [pc, #572]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a62:	d00c      	beq.n	8002a7e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a64:	4b8b      	ldr	r3, [pc, #556]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	d112      	bne.n	8002a96 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a70:	4b88      	ldr	r3, [pc, #544]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7c:	d10b      	bne.n	8002a96 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7e:	4b85      	ldr	r3, [pc, #532]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d05b      	beq.n	8002b42 <HAL_RCC_OscConfig+0x11e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d157      	bne.n	8002b42 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e216      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x8a>
 8002aa0:	4b7c      	ldr	r3, [pc, #496]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a7b      	ldr	r2, [pc, #492]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	e01d      	b.n	8002aea <HAL_RCC_OscConfig+0xc6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0xae>
 8002ab8:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a75      	ldr	r2, [pc, #468]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002abe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a72      	ldr	r2, [pc, #456]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e00b      	b.n	8002aea <HAL_RCC_OscConfig+0xc6>
 8002ad2:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6f      	ldr	r2, [pc, #444]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b6d      	ldr	r3, [pc, #436]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a6c      	ldr	r2, [pc, #432]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d013      	beq.n	8002b1a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe fd95 	bl	8001620 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002afa:	f7fe fd91 	bl	8001620 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b64      	cmp	r3, #100	; 0x64
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1db      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0c:	4b61      	ldr	r3, [pc, #388]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0xd6>
 8002b18:	e014      	b.n	8002b44 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fd81 	bl	8001620 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b22:	f7fe fd7d 	bl	8001620 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b64      	cmp	r3, #100	; 0x64
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1c7      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b34:	4b57      	ldr	r3, [pc, #348]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0xfe>
 8002b40:	e000      	b.n	8002b44 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d06f      	beq.n	8002c30 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d017      	beq.n	8002b8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b5c:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b68:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00b      	beq.n	8002b8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b74:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	d11c      	bne.n	8002bba <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b80:	4b44      	ldr	r3, [pc, #272]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d116      	bne.n	8002bba <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8c:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x180>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e18f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba4:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4938      	ldr	r1, [pc, #224]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb8:	e03a      	b.n	8002c30 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d020      	beq.n	8002c04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc2:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fd2a 	bl	8001620 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7fe fd26 	bl	8001620 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e170      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bee:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4925      	ldr	r1, [pc, #148]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
 8002c02:	e015      	b.n	8002c30 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fd09 	bl	8001620 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fe fd05 	bl	8001620 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e14f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d037      	beq.n	8002cac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d016      	beq.n	8002c72 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c44:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_RCC_OscConfig+0x278>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fce9 	bl	8001620 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c52:	f7fe fce5 	bl	8001620 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e12f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x22e>
 8002c70:	e01c      	b.n	8002cac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_RCC_OscConfig+0x278>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe fcd2 	bl	8001620 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7e:	e00f      	b.n	8002ca0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c80:	f7fe fcce 	bl	8001620 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d908      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e118      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	42470000 	.word	0x42470000
 8002c9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	4b8a      	ldr	r3, [pc, #552]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e9      	bne.n	8002c80 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8097 	beq.w	8002de8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cbe:	4b83      	ldr	r3, [pc, #524]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10f      	bne.n	8002cea <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	4b7f      	ldr	r3, [pc, #508]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a7e      	ldr	r2, [pc, #504]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cda:	4b7c      	ldr	r3, [pc, #496]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b79      	ldr	r3, [pc, #484]	; (8002ed0 <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf6:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a75      	ldr	r2, [pc, #468]	; (8002ed0 <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fe fc8d 	bl	8001620 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7fe fc89 	bl	8001620 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0d3      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x31a>
 8002d30:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3c:	e01c      	b.n	8002d78 <HAL_RCC_OscConfig+0x354>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x33c>
 8002d46:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a60      	ldr	r2, [pc, #384]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002d4c:	f043 0304 	orr.w	r3, r3, #4
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
 8002d52:	4b5e      	ldr	r3, [pc, #376]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a5d      	ldr	r2, [pc, #372]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_OscConfig+0x354>
 8002d60:	4b5a      	ldr	r3, [pc, #360]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4a59      	ldr	r2, [pc, #356]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6c:	4b57      	ldr	r3, [pc, #348]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	4a56      	ldr	r2, [pc, #344]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002d72:	f023 0304 	bic.w	r3, r3, #4
 8002d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d015      	beq.n	8002dac <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7fe fc4e 	bl	8001620 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d88:	f7fe fc4a 	bl	8001620 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e092      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9e:	4b4b      	ldr	r3, [pc, #300]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ee      	beq.n	8002d88 <HAL_RCC_OscConfig+0x364>
 8002daa:	e014      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fe fc38 	bl	8001620 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fe fc34 	bl	8001620 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e07c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dca:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1ee      	bne.n	8002db4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ddc:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	4a3a      	ldr	r2, [pc, #232]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d068      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002df0:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d060      	beq.n	8002ebe <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d145      	bne.n	8002e90 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b33      	ldr	r3, [pc, #204]	; (8002ed4 <HAL_RCC_OscConfig+0x4b0>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fc09 	bl	8001620 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fe fc05 	bl	8001620 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e04f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e24:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	019b      	lsls	r3, r3, #6
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	061b      	lsls	r3, r3, #24
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	071b      	lsls	r3, r3, #28
 8002e5c:	491b      	ldr	r1, [pc, #108]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_RCC_OscConfig+0x4b0>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe fbda 	bl	8001620 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe fbd6 	bl	8001620 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e020      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x44c>
 8002e8e:	e018      	b.n	8002ec2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <HAL_RCC_OscConfig+0x4b0>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fe fbc3 	bl	8001620 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe fbbf 	bl	8001620 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e009      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_OscConfig+0x4a8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCC_OscConfig+0x47a>
 8002ebc:	e001      	b.n	8002ec2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42470060 	.word	0x42470060

08002ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e03f      	b.n	8002f6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe f974 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fddb 	bl	8003ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b088      	sub	sp, #32
 8002f76:	af02      	add	r7, sp, #8
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	f040 8083 	bne.w	800309a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_UART_Transmit+0x2e>
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e07b      	b.n	800309c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Transmit+0x40>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e074      	b.n	800309c <HAL_UART_Transmit+0x12a>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2221      	movs	r2, #33	; 0x21
 8002fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe fb2a 	bl	8001620 <HAL_GetTick>
 8002fcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	88fa      	ldrh	r2, [r7, #6]
 8002fd8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002fe2:	e042      	b.n	800306a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	d122      	bne.n	8003042 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2200      	movs	r2, #0
 8003004:	2180      	movs	r1, #128	; 0x80
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fbe4 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e042      	b.n	800309c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003028:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3302      	adds	r3, #2
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	e017      	b.n	800306a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3301      	adds	r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	e013      	b.n	800306a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2200      	movs	r2, #0
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fbc1 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e01f      	b.n	800309c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	60ba      	str	r2, [r7, #8]
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1b7      	bne.n	8002fe4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2200      	movs	r2, #0
 800307c:	2140      	movs	r1, #64	; 0x40
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fba8 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e006      	b.n	800309c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	f040 8090 	bne.w	80031e6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_UART_Receive+0x2e>
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e088      	b.n	80031e8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Receive+0x40>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e081      	b.n	80031e8 <HAL_UART_Receive+0x144>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2222      	movs	r2, #34	; 0x22
 80030f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80030fa:	f7fe fa91 	bl	8001620 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	88fa      	ldrh	r2, [r7, #6]
 800310a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003114:	e05c      	b.n	80031d0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312c:	d12b      	bne.n	8003186 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	2120      	movs	r1, #32
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fb4b 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e04f      	b.n	80031e8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10c      	bne.n	800316e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	b29b      	uxth	r3, r3
 800315c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003160:	b29a      	uxth	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3302      	adds	r3, #2
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	e030      	b.n	80031d0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	b29b      	uxth	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	b29a      	uxth	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	3301      	adds	r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	e024      	b.n	80031d0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2200      	movs	r2, #0
 800318e:	2120      	movs	r1, #32
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fb1f 	bl	80037d4 <UART_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e023      	b.n	80031e8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d108      	bne.n	80031ba <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6859      	ldr	r1, [r3, #4]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	60ba      	str	r2, [r7, #8]
 80031b4:	b2ca      	uxtb	r2, r1
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	e00a      	b.n	80031d0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1c59      	adds	r1, r3, #1
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d19d      	bne.n	8003116 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	4613      	mov	r3, r2
 80031fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b20      	cmp	r3, #32
 8003208:	d130      	bne.n	800326c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_UART_Transmit_IT+0x26>
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e029      	b.n	800326e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_UART_Transmit_IT+0x38>
 8003224:	2302      	movs	r3, #2
 8003226:	e022      	b.n	800326e <HAL_UART_Transmit_IT+0x7e>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	88fa      	ldrh	r2, [r7, #6]
 800323a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2221      	movs	r2, #33	; 0x21
 800324c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003266:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b20      	cmp	r3, #32
 8003294:	d166      	bne.n	8003364 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_UART_Receive_DMA+0x26>
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e05f      	b.n	8003366 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_UART_Receive_DMA+0x38>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e058      	b.n	8003366 <HAL_UART_Receive_DMA+0xea>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2222      	movs	r2, #34	; 0x22
 80032d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	4a25      	ldr	r2, [pc, #148]	; (8003370 <HAL_UART_Receive_DMA+0xf4>)
 80032dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	4a24      	ldr	r2, [pc, #144]	; (8003374 <HAL_UART_Receive_DMA+0xf8>)
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	4a23      	ldr	r2, [pc, #140]	; (8003378 <HAL_UART_Receive_DMA+0xfc>)
 80032ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	2200      	movs	r2, #0
 80032f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3304      	adds	r3, #4
 8003306:	4619      	mov	r1, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	f7fe fb75 	bl	80019fc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800333e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800335e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	080036bd 	.word	0x080036bd
 8003374:	08003725 	.word	0x08003725
 8003378:	08003741 	.word	0x08003741

0800337c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8003392:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	2b80      	cmp	r3, #128	; 0x80
 80033b0:	d124      	bne.n	80033fc <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d018      	beq.n	80033fc <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	2200      	movs	r2, #0
 80033d0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fb68 	bl	8001aac <HAL_DMA_Abort>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe fd7c 	bl	8001ee4 <HAL_DMA_GetError>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d104      	bne.n	80033fc <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2210      	movs	r2, #16
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e03d      	b.n	8003478 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b40      	cmp	r3, #64	; 0x40
 8003408:	d124      	bne.n	8003454 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003418:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341e:	2b00      	cmp	r3, #0
 8003420:	d018      	beq.n	8003454 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003426:	2200      	movs	r2, #0
 8003428:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fb3c 	bl	8001aac <HAL_DMA_Abort>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fd50 	bl	8001ee4 <HAL_DMA_GetError>
 8003444:	4603      	mov	r3, r0
 8003446:	2b20      	cmp	r3, #32
 8003448:	d104      	bne.n	8003454 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2210      	movs	r2, #16
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e011      	b.n	8003478 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10d      	bne.n	80034d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_UART_IRQHandler+0x52>
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa82 	bl	80039d4 <UART_Receive_IT>
      return;
 80034d0:	e0d1      	b.n	8003676 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80b0 	beq.w	800363a <HAL_UART_IRQHandler+0x1ba>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <HAL_UART_IRQHandler+0x70>
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80a5 	beq.w	800363a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_UART_IRQHandler+0x90>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	f043 0201 	orr.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_UART_IRQHandler+0xb0>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003528:	f043 0202 	orr.w	r2, r3, #2
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_UART_IRQHandler+0xd0>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	f043 0204 	orr.w	r2, r3, #4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00f      	beq.n	800357a <HAL_UART_IRQHandler+0xfa>
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <HAL_UART_IRQHandler+0xee>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003572:	f043 0208 	orr.w	r2, r3, #8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d078      	beq.n	8003674 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_UART_IRQHandler+0x11c>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa1c 	bl	80039d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <HAL_UART_IRQHandler+0x144>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d031      	beq.n	8003628 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f965 	bl	8003894 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d123      	bne.n	8003620 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f4:	4a21      	ldr	r2, [pc, #132]	; (800367c <HAL_UART_IRQHandler+0x1fc>)
 80035f6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fac5 	bl	8001b8c <HAL_DMA_Abort_IT>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d016      	beq.n	8003636 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003612:	4610      	mov	r0, r2
 8003614:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003616:	e00e      	b.n	8003636 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f845 	bl	80036a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361e:	e00a      	b.n	8003636 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f841 	bl	80036a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003626:	e006      	b.n	8003636 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f83d 	bl	80036a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003634:	e01e      	b.n	8003674 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003636:	bf00      	nop
    return;
 8003638:	e01c      	b.n	8003674 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_UART_IRQHandler+0x1d6>
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f952 	bl	80038f8 <UART_Transmit_IT>
    return;
 8003654:	e00f      	b.n	8003676 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_UART_IRQHandler+0x1f6>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f99a 	bl	80039a4 <UART_EndTransmit_IT>
    return;
 8003670:	bf00      	nop
 8003672:	e000      	b.n	8003676 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003674:	bf00      	nop
  }
}
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	080038d1 	.word	0x080038d1

08003680 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d11e      	bne.n	8003716 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ec:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7fd fcf6 	bl	8001108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f7ff ffae 	bl	8003694 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b80      	cmp	r3, #128	; 0x80
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b21      	cmp	r3, #33	; 0x21
 8003772:	d108      	bne.n	8003786 <UART_DMAError+0x46>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2200      	movs	r2, #0
 800377e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003780:	68b8      	ldr	r0, [r7, #8]
 8003782:	f000 f871 	bl	8003868 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b22      	cmp	r3, #34	; 0x22
 80037a6:	d108      	bne.n	80037ba <UART_DMAError+0x7a>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2200      	movs	r2, #0
 80037b2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80037b4:	68b8      	ldr	r0, [r7, #8]
 80037b6:	f000 f86d 	bl	8003894 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	f043 0210 	orr.w	r2, r3, #16
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037c6:	68b8      	ldr	r0, [r7, #8]
 80037c8:	f7ff ff6e 	bl	80036a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e4:	e02c      	b.n	8003840 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ec:	d028      	beq.n	8003840 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x30>
 80037f4:	f7fd ff14 	bl	8001620 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	429a      	cmp	r2, r3
 8003802:	d21d      	bcs.n	8003840 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003812:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e00f      	b.n	8003860 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4013      	ands	r3, r2
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	429a      	cmp	r2, r3
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	429a      	cmp	r2, r3
 800385c:	d0c3      	beq.n	80037e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800387e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff fedc 	bl	80036a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b21      	cmp	r3, #33	; 0x21
 800390a:	d144      	bne.n	8003996 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003914:	d11a      	bne.n	800394c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800392a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	1c9a      	adds	r2, r3, #2
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	621a      	str	r2, [r3, #32]
 800393e:	e00e      	b.n	800395e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	621a      	str	r2, [r3, #32]
 800394a:	e008      	b.n	800395e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	1c59      	adds	r1, r3, #1
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6211      	str	r1, [r2, #32]
 8003956:	781a      	ldrb	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29b      	uxth	r3, r3
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	4619      	mov	r1, r3
 800396c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003980:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003990:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff fe5b 	bl	8003680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b22      	cmp	r3, #34	; 0x22
 80039e6:	d171      	bne.n	8003acc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f0:	d123      	bne.n	8003a3a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10e      	bne.n	8003a1e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	1c9a      	adds	r2, r3, #2
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a1c:	e029      	b.n	8003a72 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
 8003a38:	e01b      	b.n	8003a72 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6858      	ldr	r0, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	1c59      	adds	r1, r3, #1
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6291      	str	r1, [r2, #40]	; 0x28
 8003a52:	b2c2      	uxtb	r2, r0
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	e00c      	b.n	8003a72 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	1c58      	adds	r0, r3, #1
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	6288      	str	r0, [r1, #40]	; 0x28
 8003a6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d120      	bne.n	8003ac8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0220 	bic.w	r2, r2, #32
 8003a94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fb22 	bl	8001108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e002      	b.n	8003ace <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b1a:	f023 030c 	bic.w	r3, r3, #12
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	68f9      	ldr	r1, [r7, #12]
 8003b24:	430b      	orrs	r3, r1
 8003b26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b46:	f040 818b 	bne.w	8003e60 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4ac1      	ldr	r2, [pc, #772]	; (8003e54 <UART_SetConfig+0x37c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d005      	beq.n	8003b60 <UART_SetConfig+0x88>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4abf      	ldr	r2, [pc, #764]	; (8003e58 <UART_SetConfig+0x380>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	f040 80bd 	bne.w	8003cda <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b60:	f7fe fdac 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 8003b64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	461d      	mov	r5, r3
 8003b6a:	f04f 0600 	mov.w	r6, #0
 8003b6e:	46a8      	mov	r8, r5
 8003b70:	46b1      	mov	r9, r6
 8003b72:	eb18 0308 	adds.w	r3, r8, r8
 8003b76:	eb49 0409 	adc.w	r4, r9, r9
 8003b7a:	4698      	mov	r8, r3
 8003b7c:	46a1      	mov	r9, r4
 8003b7e:	eb18 0805 	adds.w	r8, r8, r5
 8003b82:	eb49 0906 	adc.w	r9, r9, r6
 8003b86:	f04f 0100 	mov.w	r1, #0
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b9a:	4688      	mov	r8, r1
 8003b9c:	4691      	mov	r9, r2
 8003b9e:	eb18 0005 	adds.w	r0, r8, r5
 8003ba2:	eb49 0106 	adc.w	r1, r9, r6
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	461d      	mov	r5, r3
 8003bac:	f04f 0600 	mov.w	r6, #0
 8003bb0:	196b      	adds	r3, r5, r5
 8003bb2:	eb46 0406 	adc.w	r4, r6, r6
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4623      	mov	r3, r4
 8003bba:	f7fc fb79 	bl	80002b0 <__aeabi_uldivmod>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4ba5      	ldr	r3, [pc, #660]	; (8003e5c <UART_SetConfig+0x384>)
 8003bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	f04f 0600 	mov.w	r6, #0
 8003bd8:	46a9      	mov	r9, r5
 8003bda:	46b2      	mov	sl, r6
 8003bdc:	eb19 0309 	adds.w	r3, r9, r9
 8003be0:	eb4a 040a 	adc.w	r4, sl, sl
 8003be4:	4699      	mov	r9, r3
 8003be6:	46a2      	mov	sl, r4
 8003be8:	eb19 0905 	adds.w	r9, r9, r5
 8003bec:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c04:	4689      	mov	r9, r1
 8003c06:	4692      	mov	sl, r2
 8003c08:	eb19 0005 	adds.w	r0, r9, r5
 8003c0c:	eb4a 0106 	adc.w	r1, sl, r6
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	461d      	mov	r5, r3
 8003c16:	f04f 0600 	mov.w	r6, #0
 8003c1a:	196b      	adds	r3, r5, r5
 8003c1c:	eb46 0406 	adc.w	r4, r6, r6
 8003c20:	461a      	mov	r2, r3
 8003c22:	4623      	mov	r3, r4
 8003c24:	f7fc fb44 	bl	80002b0 <__aeabi_uldivmod>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b8b      	ldr	r3, [pc, #556]	; (8003e5c <UART_SetConfig+0x384>)
 8003c30:	fba3 1302 	umull	r1, r3, r3, r2
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	2164      	movs	r1, #100	; 0x64
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	3332      	adds	r3, #50	; 0x32
 8003c42:	4a86      	ldr	r2, [pc, #536]	; (8003e5c <UART_SetConfig+0x384>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c50:	4498      	add	r8, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	461d      	mov	r5, r3
 8003c56:	f04f 0600 	mov.w	r6, #0
 8003c5a:	46a9      	mov	r9, r5
 8003c5c:	46b2      	mov	sl, r6
 8003c5e:	eb19 0309 	adds.w	r3, r9, r9
 8003c62:	eb4a 040a 	adc.w	r4, sl, sl
 8003c66:	4699      	mov	r9, r3
 8003c68:	46a2      	mov	sl, r4
 8003c6a:	eb19 0905 	adds.w	r9, r9, r5
 8003c6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c72:	f04f 0100 	mov.w	r1, #0
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c86:	4689      	mov	r9, r1
 8003c88:	4692      	mov	sl, r2
 8003c8a:	eb19 0005 	adds.w	r0, r9, r5
 8003c8e:	eb4a 0106 	adc.w	r1, sl, r6
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	461d      	mov	r5, r3
 8003c98:	f04f 0600 	mov.w	r6, #0
 8003c9c:	196b      	adds	r3, r5, r5
 8003c9e:	eb46 0406 	adc.w	r4, r6, r6
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4623      	mov	r3, r4
 8003ca6:	f7fc fb03 	bl	80002b0 <__aeabi_uldivmod>
 8003caa:	4603      	mov	r3, r0
 8003cac:	460c      	mov	r4, r1
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <UART_SetConfig+0x384>)
 8003cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2164      	movs	r1, #100	; 0x64
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	3332      	adds	r3, #50	; 0x32
 8003cc4:	4a65      	ldr	r2, [pc, #404]	; (8003e5c <UART_SetConfig+0x384>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 0207 	and.w	r2, r3, #7
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4442      	add	r2, r8
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	e26f      	b.n	80041ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cda:	f7fe fcdb 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8003cde:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	461d      	mov	r5, r3
 8003ce4:	f04f 0600 	mov.w	r6, #0
 8003ce8:	46a8      	mov	r8, r5
 8003cea:	46b1      	mov	r9, r6
 8003cec:	eb18 0308 	adds.w	r3, r8, r8
 8003cf0:	eb49 0409 	adc.w	r4, r9, r9
 8003cf4:	4698      	mov	r8, r3
 8003cf6:	46a1      	mov	r9, r4
 8003cf8:	eb18 0805 	adds.w	r8, r8, r5
 8003cfc:	eb49 0906 	adc.w	r9, r9, r6
 8003d00:	f04f 0100 	mov.w	r1, #0
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d14:	4688      	mov	r8, r1
 8003d16:	4691      	mov	r9, r2
 8003d18:	eb18 0005 	adds.w	r0, r8, r5
 8003d1c:	eb49 0106 	adc.w	r1, r9, r6
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	461d      	mov	r5, r3
 8003d26:	f04f 0600 	mov.w	r6, #0
 8003d2a:	196b      	adds	r3, r5, r5
 8003d2c:	eb46 0406 	adc.w	r4, r6, r6
 8003d30:	461a      	mov	r2, r3
 8003d32:	4623      	mov	r3, r4
 8003d34:	f7fc fabc 	bl	80002b0 <__aeabi_uldivmod>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b47      	ldr	r3, [pc, #284]	; (8003e5c <UART_SetConfig+0x384>)
 8003d40:	fba3 2302 	umull	r2, r3, r3, r2
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	461d      	mov	r5, r3
 8003d4e:	f04f 0600 	mov.w	r6, #0
 8003d52:	46a9      	mov	r9, r5
 8003d54:	46b2      	mov	sl, r6
 8003d56:	eb19 0309 	adds.w	r3, r9, r9
 8003d5a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d5e:	4699      	mov	r9, r3
 8003d60:	46a2      	mov	sl, r4
 8003d62:	eb19 0905 	adds.w	r9, r9, r5
 8003d66:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d6a:	f04f 0100 	mov.w	r1, #0
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d7e:	4689      	mov	r9, r1
 8003d80:	4692      	mov	sl, r2
 8003d82:	eb19 0005 	adds.w	r0, r9, r5
 8003d86:	eb4a 0106 	adc.w	r1, sl, r6
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	461d      	mov	r5, r3
 8003d90:	f04f 0600 	mov.w	r6, #0
 8003d94:	196b      	adds	r3, r5, r5
 8003d96:	eb46 0406 	adc.w	r4, r6, r6
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4623      	mov	r3, r4
 8003d9e:	f7fc fa87 	bl	80002b0 <__aeabi_uldivmod>
 8003da2:	4603      	mov	r3, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b2c      	ldr	r3, [pc, #176]	; (8003e5c <UART_SetConfig+0x384>)
 8003daa:	fba3 1302 	umull	r1, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2164      	movs	r1, #100	; 0x64
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	3332      	adds	r3, #50	; 0x32
 8003dbc:	4a27      	ldr	r2, [pc, #156]	; (8003e5c <UART_SetConfig+0x384>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dca:	4498      	add	r8, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	461d      	mov	r5, r3
 8003dd0:	f04f 0600 	mov.w	r6, #0
 8003dd4:	46a9      	mov	r9, r5
 8003dd6:	46b2      	mov	sl, r6
 8003dd8:	eb19 0309 	adds.w	r3, r9, r9
 8003ddc:	eb4a 040a 	adc.w	r4, sl, sl
 8003de0:	4699      	mov	r9, r3
 8003de2:	46a2      	mov	sl, r4
 8003de4:	eb19 0905 	adds.w	r9, r9, r5
 8003de8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dec:	f04f 0100 	mov.w	r1, #0
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003df8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e00:	4689      	mov	r9, r1
 8003e02:	4692      	mov	sl, r2
 8003e04:	eb19 0005 	adds.w	r0, r9, r5
 8003e08:	eb4a 0106 	adc.w	r1, sl, r6
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	461d      	mov	r5, r3
 8003e12:	f04f 0600 	mov.w	r6, #0
 8003e16:	196b      	adds	r3, r5, r5
 8003e18:	eb46 0406 	adc.w	r4, r6, r6
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	f7fc fa46 	bl	80002b0 <__aeabi_uldivmod>
 8003e24:	4603      	mov	r3, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <UART_SetConfig+0x384>)
 8003e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	2164      	movs	r1, #100	; 0x64
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	3332      	adds	r3, #50	; 0x32
 8003e3e:	4a07      	ldr	r2, [pc, #28]	; (8003e5c <UART_SetConfig+0x384>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	f003 0207 	and.w	r2, r3, #7
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4442      	add	r2, r8
 8003e50:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e52:	e1b2      	b.n	80041ba <UART_SetConfig+0x6e2>
 8003e54:	40011000 	.word	0x40011000
 8003e58:	40011400 	.word	0x40011400
 8003e5c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4ad7      	ldr	r2, [pc, #860]	; (80041c4 <UART_SetConfig+0x6ec>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d005      	beq.n	8003e76 <UART_SetConfig+0x39e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4ad6      	ldr	r2, [pc, #856]	; (80041c8 <UART_SetConfig+0x6f0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	f040 80d1 	bne.w	8004018 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e76:	f7fe fc21 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 8003e7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	469a      	mov	sl, r3
 8003e80:	f04f 0b00 	mov.w	fp, #0
 8003e84:	46d0      	mov	r8, sl
 8003e86:	46d9      	mov	r9, fp
 8003e88:	eb18 0308 	adds.w	r3, r8, r8
 8003e8c:	eb49 0409 	adc.w	r4, r9, r9
 8003e90:	4698      	mov	r8, r3
 8003e92:	46a1      	mov	r9, r4
 8003e94:	eb18 080a 	adds.w	r8, r8, sl
 8003e98:	eb49 090b 	adc.w	r9, r9, fp
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ea8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003eac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003eb0:	4688      	mov	r8, r1
 8003eb2:	4691      	mov	r9, r2
 8003eb4:	eb1a 0508 	adds.w	r5, sl, r8
 8003eb8:	eb4b 0609 	adc.w	r6, fp, r9
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	f04f 0400 	mov.w	r4, #0
 8003ece:	0094      	lsls	r4, r2, #2
 8003ed0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ed4:	008b      	lsls	r3, r1, #2
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4623      	mov	r3, r4
 8003eda:	4628      	mov	r0, r5
 8003edc:	4631      	mov	r1, r6
 8003ede:	f7fc f9e7 	bl	80002b0 <__aeabi_uldivmod>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4bb8      	ldr	r3, [pc, #736]	; (80041cc <UART_SetConfig+0x6f4>)
 8003eea:	fba3 2302 	umull	r2, r3, r3, r2
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	469b      	mov	fp, r3
 8003ef8:	f04f 0c00 	mov.w	ip, #0
 8003efc:	46d9      	mov	r9, fp
 8003efe:	46e2      	mov	sl, ip
 8003f00:	eb19 0309 	adds.w	r3, r9, r9
 8003f04:	eb4a 040a 	adc.w	r4, sl, sl
 8003f08:	4699      	mov	r9, r3
 8003f0a:	46a2      	mov	sl, r4
 8003f0c:	eb19 090b 	adds.w	r9, r9, fp
 8003f10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f28:	4689      	mov	r9, r1
 8003f2a:	4692      	mov	sl, r2
 8003f2c:	eb1b 0509 	adds.w	r5, fp, r9
 8003f30:	eb4c 060a 	adc.w	r6, ip, sl
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	f04f 0400 	mov.w	r4, #0
 8003f46:	0094      	lsls	r4, r2, #2
 8003f48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f4c:	008b      	lsls	r3, r1, #2
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4623      	mov	r3, r4
 8003f52:	4628      	mov	r0, r5
 8003f54:	4631      	mov	r1, r6
 8003f56:	f7fc f9ab 	bl	80002b0 <__aeabi_uldivmod>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4b9a      	ldr	r3, [pc, #616]	; (80041cc <UART_SetConfig+0x6f4>)
 8003f62:	fba3 1302 	umull	r1, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2164      	movs	r1, #100	; 0x64
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	3332      	adds	r3, #50	; 0x32
 8003f74:	4a95      	ldr	r2, [pc, #596]	; (80041cc <UART_SetConfig+0x6f4>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f80:	4498      	add	r8, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	469b      	mov	fp, r3
 8003f86:	f04f 0c00 	mov.w	ip, #0
 8003f8a:	46d9      	mov	r9, fp
 8003f8c:	46e2      	mov	sl, ip
 8003f8e:	eb19 0309 	adds.w	r3, r9, r9
 8003f92:	eb4a 040a 	adc.w	r4, sl, sl
 8003f96:	4699      	mov	r9, r3
 8003f98:	46a2      	mov	sl, r4
 8003f9a:	eb19 090b 	adds.w	r9, r9, fp
 8003f9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fb6:	4689      	mov	r9, r1
 8003fb8:	4692      	mov	sl, r2
 8003fba:	eb1b 0509 	adds.w	r5, fp, r9
 8003fbe:	eb4c 060a 	adc.w	r6, ip, sl
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	f04f 0400 	mov.w	r4, #0
 8003fd4:	0094      	lsls	r4, r2, #2
 8003fd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fda:	008b      	lsls	r3, r1, #2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4623      	mov	r3, r4
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	4631      	mov	r1, r6
 8003fe4:	f7fc f964 	bl	80002b0 <__aeabi_uldivmod>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	460c      	mov	r4, r1
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b77      	ldr	r3, [pc, #476]	; (80041cc <UART_SetConfig+0x6f4>)
 8003ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	2164      	movs	r1, #100	; 0x64
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	3332      	adds	r3, #50	; 0x32
 8004002:	4a72      	ldr	r2, [pc, #456]	; (80041cc <UART_SetConfig+0x6f4>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	f003 020f 	and.w	r2, r3, #15
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4442      	add	r2, r8
 8004014:	609a      	str	r2, [r3, #8]
 8004016:	e0d0      	b.n	80041ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7fe fb3c 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 800401c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	469a      	mov	sl, r3
 8004022:	f04f 0b00 	mov.w	fp, #0
 8004026:	46d0      	mov	r8, sl
 8004028:	46d9      	mov	r9, fp
 800402a:	eb18 0308 	adds.w	r3, r8, r8
 800402e:	eb49 0409 	adc.w	r4, r9, r9
 8004032:	4698      	mov	r8, r3
 8004034:	46a1      	mov	r9, r4
 8004036:	eb18 080a 	adds.w	r8, r8, sl
 800403a:	eb49 090b 	adc.w	r9, r9, fp
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800404a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800404e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004052:	4688      	mov	r8, r1
 8004054:	4691      	mov	r9, r2
 8004056:	eb1a 0508 	adds.w	r5, sl, r8
 800405a:	eb4b 0609 	adc.w	r6, fp, r9
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4619      	mov	r1, r3
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	f04f 0400 	mov.w	r4, #0
 8004070:	0094      	lsls	r4, r2, #2
 8004072:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004076:	008b      	lsls	r3, r1, #2
 8004078:	461a      	mov	r2, r3
 800407a:	4623      	mov	r3, r4
 800407c:	4628      	mov	r0, r5
 800407e:	4631      	mov	r1, r6
 8004080:	f7fc f916 	bl	80002b0 <__aeabi_uldivmod>
 8004084:	4603      	mov	r3, r0
 8004086:	460c      	mov	r4, r1
 8004088:	461a      	mov	r2, r3
 800408a:	4b50      	ldr	r3, [pc, #320]	; (80041cc <UART_SetConfig+0x6f4>)
 800408c:	fba3 2302 	umull	r2, r3, r3, r2
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	469b      	mov	fp, r3
 800409a:	f04f 0c00 	mov.w	ip, #0
 800409e:	46d9      	mov	r9, fp
 80040a0:	46e2      	mov	sl, ip
 80040a2:	eb19 0309 	adds.w	r3, r9, r9
 80040a6:	eb4a 040a 	adc.w	r4, sl, sl
 80040aa:	4699      	mov	r9, r3
 80040ac:	46a2      	mov	sl, r4
 80040ae:	eb19 090b 	adds.w	r9, r9, fp
 80040b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040ca:	4689      	mov	r9, r1
 80040cc:	4692      	mov	sl, r2
 80040ce:	eb1b 0509 	adds.w	r5, fp, r9
 80040d2:	eb4c 060a 	adc.w	r6, ip, sl
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4619      	mov	r1, r3
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	f04f 0400 	mov.w	r4, #0
 80040e8:	0094      	lsls	r4, r2, #2
 80040ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040ee:	008b      	lsls	r3, r1, #2
 80040f0:	461a      	mov	r2, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	4628      	mov	r0, r5
 80040f6:	4631      	mov	r1, r6
 80040f8:	f7fc f8da 	bl	80002b0 <__aeabi_uldivmod>
 80040fc:	4603      	mov	r3, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	461a      	mov	r2, r3
 8004102:	4b32      	ldr	r3, [pc, #200]	; (80041cc <UART_SetConfig+0x6f4>)
 8004104:	fba3 1302 	umull	r1, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	2164      	movs	r1, #100	; 0x64
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	3332      	adds	r3, #50	; 0x32
 8004116:	4a2d      	ldr	r2, [pc, #180]	; (80041cc <UART_SetConfig+0x6f4>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004122:	4498      	add	r8, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	469b      	mov	fp, r3
 8004128:	f04f 0c00 	mov.w	ip, #0
 800412c:	46d9      	mov	r9, fp
 800412e:	46e2      	mov	sl, ip
 8004130:	eb19 0309 	adds.w	r3, r9, r9
 8004134:	eb4a 040a 	adc.w	r4, sl, sl
 8004138:	4699      	mov	r9, r3
 800413a:	46a2      	mov	sl, r4
 800413c:	eb19 090b 	adds.w	r9, r9, fp
 8004140:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004150:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004154:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004158:	4689      	mov	r9, r1
 800415a:	4692      	mov	sl, r2
 800415c:	eb1b 0509 	adds.w	r5, fp, r9
 8004160:	eb4c 060a 	adc.w	r6, ip, sl
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4619      	mov	r1, r3
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	f04f 0400 	mov.w	r4, #0
 8004176:	0094      	lsls	r4, r2, #2
 8004178:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800417c:	008b      	lsls	r3, r1, #2
 800417e:	461a      	mov	r2, r3
 8004180:	4623      	mov	r3, r4
 8004182:	4628      	mov	r0, r5
 8004184:	4631      	mov	r1, r6
 8004186:	f7fc f893 	bl	80002b0 <__aeabi_uldivmod>
 800418a:	4603      	mov	r3, r0
 800418c:	460c      	mov	r4, r1
 800418e:	461a      	mov	r2, r3
 8004190:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <UART_SetConfig+0x6f4>)
 8004192:	fba3 1302 	umull	r1, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	2164      	movs	r1, #100	; 0x64
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	3332      	adds	r3, #50	; 0x32
 80041a4:	4a09      	ldr	r2, [pc, #36]	; (80041cc <UART_SetConfig+0x6f4>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	f003 020f 	and.w	r2, r3, #15
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4442      	add	r2, r8
 80041b6:	609a      	str	r2, [r3, #8]
}
 80041b8:	e7ff      	b.n	80041ba <UART_SetConfig+0x6e2>
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c4:	40011000 	.word	0x40011000
 80041c8:	40011400 	.word	0x40011400
 80041cc:	51eb851f 	.word	0x51eb851f

080041d0 <__errno>:
 80041d0:	4b01      	ldr	r3, [pc, #4]	; (80041d8 <__errno+0x8>)
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000084 	.word	0x20000084

080041dc <__libc_init_array>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	4e0d      	ldr	r6, [pc, #52]	; (8004214 <__libc_init_array+0x38>)
 80041e0:	4c0d      	ldr	r4, [pc, #52]	; (8004218 <__libc_init_array+0x3c>)
 80041e2:	1ba4      	subs	r4, r4, r6
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	2500      	movs	r5, #0
 80041e8:	42a5      	cmp	r5, r4
 80041ea:	d109      	bne.n	8004200 <__libc_init_array+0x24>
 80041ec:	4e0b      	ldr	r6, [pc, #44]	; (800421c <__libc_init_array+0x40>)
 80041ee:	4c0c      	ldr	r4, [pc, #48]	; (8004220 <__libc_init_array+0x44>)
 80041f0:	f000 fc26 	bl	8004a40 <_init>
 80041f4:	1ba4      	subs	r4, r4, r6
 80041f6:	10a4      	asrs	r4, r4, #2
 80041f8:	2500      	movs	r5, #0
 80041fa:	42a5      	cmp	r5, r4
 80041fc:	d105      	bne.n	800420a <__libc_init_array+0x2e>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004204:	4798      	blx	r3
 8004206:	3501      	adds	r5, #1
 8004208:	e7ee      	b.n	80041e8 <__libc_init_array+0xc>
 800420a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800420e:	4798      	blx	r3
 8004210:	3501      	adds	r5, #1
 8004212:	e7f2      	b.n	80041fa <__libc_init_array+0x1e>
 8004214:	08004cd4 	.word	0x08004cd4
 8004218:	08004cd4 	.word	0x08004cd4
 800421c:	08004cd4 	.word	0x08004cd4
 8004220:	08004cd8 	.word	0x08004cd8

08004224 <memset>:
 8004224:	4402      	add	r2, r0
 8004226:	4603      	mov	r3, r0
 8004228:	4293      	cmp	r3, r2
 800422a:	d100      	bne.n	800422e <memset+0xa>
 800422c:	4770      	bx	lr
 800422e:	f803 1b01 	strb.w	r1, [r3], #1
 8004232:	e7f9      	b.n	8004228 <memset+0x4>

08004234 <siprintf>:
 8004234:	b40e      	push	{r1, r2, r3}
 8004236:	b500      	push	{lr}
 8004238:	b09c      	sub	sp, #112	; 0x70
 800423a:	ab1d      	add	r3, sp, #116	; 0x74
 800423c:	9002      	str	r0, [sp, #8]
 800423e:	9006      	str	r0, [sp, #24]
 8004240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004244:	4809      	ldr	r0, [pc, #36]	; (800426c <siprintf+0x38>)
 8004246:	9107      	str	r1, [sp, #28]
 8004248:	9104      	str	r1, [sp, #16]
 800424a:	4909      	ldr	r1, [pc, #36]	; (8004270 <siprintf+0x3c>)
 800424c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004250:	9105      	str	r1, [sp, #20]
 8004252:	6800      	ldr	r0, [r0, #0]
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	a902      	add	r1, sp, #8
 8004258:	f000 f866 	bl	8004328 <_svfiprintf_r>
 800425c:	9b02      	ldr	r3, [sp, #8]
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	b01c      	add	sp, #112	; 0x70
 8004264:	f85d eb04 	ldr.w	lr, [sp], #4
 8004268:	b003      	add	sp, #12
 800426a:	4770      	bx	lr
 800426c:	20000084 	.word	0x20000084
 8004270:	ffff0208 	.word	0xffff0208

08004274 <__ssputs_r>:
 8004274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004278:	688e      	ldr	r6, [r1, #8]
 800427a:	429e      	cmp	r6, r3
 800427c:	4682      	mov	sl, r0
 800427e:	460c      	mov	r4, r1
 8004280:	4690      	mov	r8, r2
 8004282:	4699      	mov	r9, r3
 8004284:	d837      	bhi.n	80042f6 <__ssputs_r+0x82>
 8004286:	898a      	ldrh	r2, [r1, #12]
 8004288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800428c:	d031      	beq.n	80042f2 <__ssputs_r+0x7e>
 800428e:	6825      	ldr	r5, [r4, #0]
 8004290:	6909      	ldr	r1, [r1, #16]
 8004292:	1a6f      	subs	r7, r5, r1
 8004294:	6965      	ldr	r5, [r4, #20]
 8004296:	2302      	movs	r3, #2
 8004298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800429c:	fb95 f5f3 	sdiv	r5, r5, r3
 80042a0:	f109 0301 	add.w	r3, r9, #1
 80042a4:	443b      	add	r3, r7
 80042a6:	429d      	cmp	r5, r3
 80042a8:	bf38      	it	cc
 80042aa:	461d      	movcc	r5, r3
 80042ac:	0553      	lsls	r3, r2, #21
 80042ae:	d530      	bpl.n	8004312 <__ssputs_r+0x9e>
 80042b0:	4629      	mov	r1, r5
 80042b2:	f000 fb2b 	bl	800490c <_malloc_r>
 80042b6:	4606      	mov	r6, r0
 80042b8:	b950      	cbnz	r0, 80042d0 <__ssputs_r+0x5c>
 80042ba:	230c      	movs	r3, #12
 80042bc:	f8ca 3000 	str.w	r3, [sl]
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c6:	81a3      	strh	r3, [r4, #12]
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d0:	463a      	mov	r2, r7
 80042d2:	6921      	ldr	r1, [r4, #16]
 80042d4:	f000 faa8 	bl	8004828 <memcpy>
 80042d8:	89a3      	ldrh	r3, [r4, #12]
 80042da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e2:	81a3      	strh	r3, [r4, #12]
 80042e4:	6126      	str	r6, [r4, #16]
 80042e6:	6165      	str	r5, [r4, #20]
 80042e8:	443e      	add	r6, r7
 80042ea:	1bed      	subs	r5, r5, r7
 80042ec:	6026      	str	r6, [r4, #0]
 80042ee:	60a5      	str	r5, [r4, #8]
 80042f0:	464e      	mov	r6, r9
 80042f2:	454e      	cmp	r6, r9
 80042f4:	d900      	bls.n	80042f8 <__ssputs_r+0x84>
 80042f6:	464e      	mov	r6, r9
 80042f8:	4632      	mov	r2, r6
 80042fa:	4641      	mov	r1, r8
 80042fc:	6820      	ldr	r0, [r4, #0]
 80042fe:	f000 fa9e 	bl	800483e <memmove>
 8004302:	68a3      	ldr	r3, [r4, #8]
 8004304:	1b9b      	subs	r3, r3, r6
 8004306:	60a3      	str	r3, [r4, #8]
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	441e      	add	r6, r3
 800430c:	6026      	str	r6, [r4, #0]
 800430e:	2000      	movs	r0, #0
 8004310:	e7dc      	b.n	80042cc <__ssputs_r+0x58>
 8004312:	462a      	mov	r2, r5
 8004314:	f000 fb54 	bl	80049c0 <_realloc_r>
 8004318:	4606      	mov	r6, r0
 800431a:	2800      	cmp	r0, #0
 800431c:	d1e2      	bne.n	80042e4 <__ssputs_r+0x70>
 800431e:	6921      	ldr	r1, [r4, #16]
 8004320:	4650      	mov	r0, sl
 8004322:	f000 faa5 	bl	8004870 <_free_r>
 8004326:	e7c8      	b.n	80042ba <__ssputs_r+0x46>

08004328 <_svfiprintf_r>:
 8004328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432c:	461d      	mov	r5, r3
 800432e:	898b      	ldrh	r3, [r1, #12]
 8004330:	061f      	lsls	r7, r3, #24
 8004332:	b09d      	sub	sp, #116	; 0x74
 8004334:	4680      	mov	r8, r0
 8004336:	460c      	mov	r4, r1
 8004338:	4616      	mov	r6, r2
 800433a:	d50f      	bpl.n	800435c <_svfiprintf_r+0x34>
 800433c:	690b      	ldr	r3, [r1, #16]
 800433e:	b96b      	cbnz	r3, 800435c <_svfiprintf_r+0x34>
 8004340:	2140      	movs	r1, #64	; 0x40
 8004342:	f000 fae3 	bl	800490c <_malloc_r>
 8004346:	6020      	str	r0, [r4, #0]
 8004348:	6120      	str	r0, [r4, #16]
 800434a:	b928      	cbnz	r0, 8004358 <_svfiprintf_r+0x30>
 800434c:	230c      	movs	r3, #12
 800434e:	f8c8 3000 	str.w	r3, [r8]
 8004352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004356:	e0c8      	b.n	80044ea <_svfiprintf_r+0x1c2>
 8004358:	2340      	movs	r3, #64	; 0x40
 800435a:	6163      	str	r3, [r4, #20]
 800435c:	2300      	movs	r3, #0
 800435e:	9309      	str	r3, [sp, #36]	; 0x24
 8004360:	2320      	movs	r3, #32
 8004362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004366:	2330      	movs	r3, #48	; 0x30
 8004368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800436c:	9503      	str	r5, [sp, #12]
 800436e:	f04f 0b01 	mov.w	fp, #1
 8004372:	4637      	mov	r7, r6
 8004374:	463d      	mov	r5, r7
 8004376:	f815 3b01 	ldrb.w	r3, [r5], #1
 800437a:	b10b      	cbz	r3, 8004380 <_svfiprintf_r+0x58>
 800437c:	2b25      	cmp	r3, #37	; 0x25
 800437e:	d13e      	bne.n	80043fe <_svfiprintf_r+0xd6>
 8004380:	ebb7 0a06 	subs.w	sl, r7, r6
 8004384:	d00b      	beq.n	800439e <_svfiprintf_r+0x76>
 8004386:	4653      	mov	r3, sl
 8004388:	4632      	mov	r2, r6
 800438a:	4621      	mov	r1, r4
 800438c:	4640      	mov	r0, r8
 800438e:	f7ff ff71 	bl	8004274 <__ssputs_r>
 8004392:	3001      	adds	r0, #1
 8004394:	f000 80a4 	beq.w	80044e0 <_svfiprintf_r+0x1b8>
 8004398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800439a:	4453      	add	r3, sl
 800439c:	9309      	str	r3, [sp, #36]	; 0x24
 800439e:	783b      	ldrb	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 809d 	beq.w	80044e0 <_svfiprintf_r+0x1b8>
 80043a6:	2300      	movs	r3, #0
 80043a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043b0:	9304      	str	r3, [sp, #16]
 80043b2:	9307      	str	r3, [sp, #28]
 80043b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043b8:	931a      	str	r3, [sp, #104]	; 0x68
 80043ba:	462f      	mov	r7, r5
 80043bc:	2205      	movs	r2, #5
 80043be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80043c2:	4850      	ldr	r0, [pc, #320]	; (8004504 <_svfiprintf_r+0x1dc>)
 80043c4:	f7fb ff24 	bl	8000210 <memchr>
 80043c8:	9b04      	ldr	r3, [sp, #16]
 80043ca:	b9d0      	cbnz	r0, 8004402 <_svfiprintf_r+0xda>
 80043cc:	06d9      	lsls	r1, r3, #27
 80043ce:	bf44      	itt	mi
 80043d0:	2220      	movmi	r2, #32
 80043d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043d6:	071a      	lsls	r2, r3, #28
 80043d8:	bf44      	itt	mi
 80043da:	222b      	movmi	r2, #43	; 0x2b
 80043dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043e0:	782a      	ldrb	r2, [r5, #0]
 80043e2:	2a2a      	cmp	r2, #42	; 0x2a
 80043e4:	d015      	beq.n	8004412 <_svfiprintf_r+0xea>
 80043e6:	9a07      	ldr	r2, [sp, #28]
 80043e8:	462f      	mov	r7, r5
 80043ea:	2000      	movs	r0, #0
 80043ec:	250a      	movs	r5, #10
 80043ee:	4639      	mov	r1, r7
 80043f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043f4:	3b30      	subs	r3, #48	; 0x30
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	d94d      	bls.n	8004496 <_svfiprintf_r+0x16e>
 80043fa:	b1b8      	cbz	r0, 800442c <_svfiprintf_r+0x104>
 80043fc:	e00f      	b.n	800441e <_svfiprintf_r+0xf6>
 80043fe:	462f      	mov	r7, r5
 8004400:	e7b8      	b.n	8004374 <_svfiprintf_r+0x4c>
 8004402:	4a40      	ldr	r2, [pc, #256]	; (8004504 <_svfiprintf_r+0x1dc>)
 8004404:	1a80      	subs	r0, r0, r2
 8004406:	fa0b f000 	lsl.w	r0, fp, r0
 800440a:	4318      	orrs	r0, r3
 800440c:	9004      	str	r0, [sp, #16]
 800440e:	463d      	mov	r5, r7
 8004410:	e7d3      	b.n	80043ba <_svfiprintf_r+0x92>
 8004412:	9a03      	ldr	r2, [sp, #12]
 8004414:	1d11      	adds	r1, r2, #4
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	9103      	str	r1, [sp, #12]
 800441a:	2a00      	cmp	r2, #0
 800441c:	db01      	blt.n	8004422 <_svfiprintf_r+0xfa>
 800441e:	9207      	str	r2, [sp, #28]
 8004420:	e004      	b.n	800442c <_svfiprintf_r+0x104>
 8004422:	4252      	negs	r2, r2
 8004424:	f043 0302 	orr.w	r3, r3, #2
 8004428:	9207      	str	r2, [sp, #28]
 800442a:	9304      	str	r3, [sp, #16]
 800442c:	783b      	ldrb	r3, [r7, #0]
 800442e:	2b2e      	cmp	r3, #46	; 0x2e
 8004430:	d10c      	bne.n	800444c <_svfiprintf_r+0x124>
 8004432:	787b      	ldrb	r3, [r7, #1]
 8004434:	2b2a      	cmp	r3, #42	; 0x2a
 8004436:	d133      	bne.n	80044a0 <_svfiprintf_r+0x178>
 8004438:	9b03      	ldr	r3, [sp, #12]
 800443a:	1d1a      	adds	r2, r3, #4
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	9203      	str	r2, [sp, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	bfb8      	it	lt
 8004444:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004448:	3702      	adds	r7, #2
 800444a:	9305      	str	r3, [sp, #20]
 800444c:	4d2e      	ldr	r5, [pc, #184]	; (8004508 <_svfiprintf_r+0x1e0>)
 800444e:	7839      	ldrb	r1, [r7, #0]
 8004450:	2203      	movs	r2, #3
 8004452:	4628      	mov	r0, r5
 8004454:	f7fb fedc 	bl	8000210 <memchr>
 8004458:	b138      	cbz	r0, 800446a <_svfiprintf_r+0x142>
 800445a:	2340      	movs	r3, #64	; 0x40
 800445c:	1b40      	subs	r0, r0, r5
 800445e:	fa03 f000 	lsl.w	r0, r3, r0
 8004462:	9b04      	ldr	r3, [sp, #16]
 8004464:	4303      	orrs	r3, r0
 8004466:	3701      	adds	r7, #1
 8004468:	9304      	str	r3, [sp, #16]
 800446a:	7839      	ldrb	r1, [r7, #0]
 800446c:	4827      	ldr	r0, [pc, #156]	; (800450c <_svfiprintf_r+0x1e4>)
 800446e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004472:	2206      	movs	r2, #6
 8004474:	1c7e      	adds	r6, r7, #1
 8004476:	f7fb fecb 	bl	8000210 <memchr>
 800447a:	2800      	cmp	r0, #0
 800447c:	d038      	beq.n	80044f0 <_svfiprintf_r+0x1c8>
 800447e:	4b24      	ldr	r3, [pc, #144]	; (8004510 <_svfiprintf_r+0x1e8>)
 8004480:	bb13      	cbnz	r3, 80044c8 <_svfiprintf_r+0x1a0>
 8004482:	9b03      	ldr	r3, [sp, #12]
 8004484:	3307      	adds	r3, #7
 8004486:	f023 0307 	bic.w	r3, r3, #7
 800448a:	3308      	adds	r3, #8
 800448c:	9303      	str	r3, [sp, #12]
 800448e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004490:	444b      	add	r3, r9
 8004492:	9309      	str	r3, [sp, #36]	; 0x24
 8004494:	e76d      	b.n	8004372 <_svfiprintf_r+0x4a>
 8004496:	fb05 3202 	mla	r2, r5, r2, r3
 800449a:	2001      	movs	r0, #1
 800449c:	460f      	mov	r7, r1
 800449e:	e7a6      	b.n	80043ee <_svfiprintf_r+0xc6>
 80044a0:	2300      	movs	r3, #0
 80044a2:	3701      	adds	r7, #1
 80044a4:	9305      	str	r3, [sp, #20]
 80044a6:	4619      	mov	r1, r3
 80044a8:	250a      	movs	r5, #10
 80044aa:	4638      	mov	r0, r7
 80044ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044b0:	3a30      	subs	r2, #48	; 0x30
 80044b2:	2a09      	cmp	r2, #9
 80044b4:	d903      	bls.n	80044be <_svfiprintf_r+0x196>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0c8      	beq.n	800444c <_svfiprintf_r+0x124>
 80044ba:	9105      	str	r1, [sp, #20]
 80044bc:	e7c6      	b.n	800444c <_svfiprintf_r+0x124>
 80044be:	fb05 2101 	mla	r1, r5, r1, r2
 80044c2:	2301      	movs	r3, #1
 80044c4:	4607      	mov	r7, r0
 80044c6:	e7f0      	b.n	80044aa <_svfiprintf_r+0x182>
 80044c8:	ab03      	add	r3, sp, #12
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	4622      	mov	r2, r4
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <_svfiprintf_r+0x1ec>)
 80044d0:	a904      	add	r1, sp, #16
 80044d2:	4640      	mov	r0, r8
 80044d4:	f3af 8000 	nop.w
 80044d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80044dc:	4681      	mov	r9, r0
 80044de:	d1d6      	bne.n	800448e <_svfiprintf_r+0x166>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	065b      	lsls	r3, r3, #25
 80044e4:	f53f af35 	bmi.w	8004352 <_svfiprintf_r+0x2a>
 80044e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044ea:	b01d      	add	sp, #116	; 0x74
 80044ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f0:	ab03      	add	r3, sp, #12
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	4622      	mov	r2, r4
 80044f6:	4b07      	ldr	r3, [pc, #28]	; (8004514 <_svfiprintf_r+0x1ec>)
 80044f8:	a904      	add	r1, sp, #16
 80044fa:	4640      	mov	r0, r8
 80044fc:	f000 f882 	bl	8004604 <_printf_i>
 8004500:	e7ea      	b.n	80044d8 <_svfiprintf_r+0x1b0>
 8004502:	bf00      	nop
 8004504:	08004c98 	.word	0x08004c98
 8004508:	08004c9e 	.word	0x08004c9e
 800450c:	08004ca2 	.word	0x08004ca2
 8004510:	00000000 	.word	0x00000000
 8004514:	08004275 	.word	0x08004275

08004518 <_printf_common>:
 8004518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	4691      	mov	r9, r2
 800451e:	461f      	mov	r7, r3
 8004520:	688a      	ldr	r2, [r1, #8]
 8004522:	690b      	ldr	r3, [r1, #16]
 8004524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004528:	4293      	cmp	r3, r2
 800452a:	bfb8      	it	lt
 800452c:	4613      	movlt	r3, r2
 800452e:	f8c9 3000 	str.w	r3, [r9]
 8004532:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004536:	4606      	mov	r6, r0
 8004538:	460c      	mov	r4, r1
 800453a:	b112      	cbz	r2, 8004542 <_printf_common+0x2a>
 800453c:	3301      	adds	r3, #1
 800453e:	f8c9 3000 	str.w	r3, [r9]
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	0699      	lsls	r1, r3, #26
 8004546:	bf42      	ittt	mi
 8004548:	f8d9 3000 	ldrmi.w	r3, [r9]
 800454c:	3302      	addmi	r3, #2
 800454e:	f8c9 3000 	strmi.w	r3, [r9]
 8004552:	6825      	ldr	r5, [r4, #0]
 8004554:	f015 0506 	ands.w	r5, r5, #6
 8004558:	d107      	bne.n	800456a <_printf_common+0x52>
 800455a:	f104 0a19 	add.w	sl, r4, #25
 800455e:	68e3      	ldr	r3, [r4, #12]
 8004560:	f8d9 2000 	ldr.w	r2, [r9]
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	42ab      	cmp	r3, r5
 8004568:	dc28      	bgt.n	80045bc <_printf_common+0xa4>
 800456a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800456e:	6822      	ldr	r2, [r4, #0]
 8004570:	3300      	adds	r3, #0
 8004572:	bf18      	it	ne
 8004574:	2301      	movne	r3, #1
 8004576:	0692      	lsls	r2, r2, #26
 8004578:	d42d      	bmi.n	80045d6 <_printf_common+0xbe>
 800457a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800457e:	4639      	mov	r1, r7
 8004580:	4630      	mov	r0, r6
 8004582:	47c0      	blx	r8
 8004584:	3001      	adds	r0, #1
 8004586:	d020      	beq.n	80045ca <_printf_common+0xb2>
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	68e5      	ldr	r5, [r4, #12]
 800458c:	f8d9 2000 	ldr.w	r2, [r9]
 8004590:	f003 0306 	and.w	r3, r3, #6
 8004594:	2b04      	cmp	r3, #4
 8004596:	bf08      	it	eq
 8004598:	1aad      	subeq	r5, r5, r2
 800459a:	68a3      	ldr	r3, [r4, #8]
 800459c:	6922      	ldr	r2, [r4, #16]
 800459e:	bf0c      	ite	eq
 80045a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045a4:	2500      	movne	r5, #0
 80045a6:	4293      	cmp	r3, r2
 80045a8:	bfc4      	itt	gt
 80045aa:	1a9b      	subgt	r3, r3, r2
 80045ac:	18ed      	addgt	r5, r5, r3
 80045ae:	f04f 0900 	mov.w	r9, #0
 80045b2:	341a      	adds	r4, #26
 80045b4:	454d      	cmp	r5, r9
 80045b6:	d11a      	bne.n	80045ee <_printf_common+0xd6>
 80045b8:	2000      	movs	r0, #0
 80045ba:	e008      	b.n	80045ce <_printf_common+0xb6>
 80045bc:	2301      	movs	r3, #1
 80045be:	4652      	mov	r2, sl
 80045c0:	4639      	mov	r1, r7
 80045c2:	4630      	mov	r0, r6
 80045c4:	47c0      	blx	r8
 80045c6:	3001      	adds	r0, #1
 80045c8:	d103      	bne.n	80045d2 <_printf_common+0xba>
 80045ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d2:	3501      	adds	r5, #1
 80045d4:	e7c3      	b.n	800455e <_printf_common+0x46>
 80045d6:	18e1      	adds	r1, r4, r3
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	2030      	movs	r0, #48	; 0x30
 80045dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045e0:	4422      	add	r2, r4
 80045e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045ea:	3302      	adds	r3, #2
 80045ec:	e7c5      	b.n	800457a <_printf_common+0x62>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4622      	mov	r2, r4
 80045f2:	4639      	mov	r1, r7
 80045f4:	4630      	mov	r0, r6
 80045f6:	47c0      	blx	r8
 80045f8:	3001      	adds	r0, #1
 80045fa:	d0e6      	beq.n	80045ca <_printf_common+0xb2>
 80045fc:	f109 0901 	add.w	r9, r9, #1
 8004600:	e7d8      	b.n	80045b4 <_printf_common+0x9c>
	...

08004604 <_printf_i>:
 8004604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004608:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800460c:	460c      	mov	r4, r1
 800460e:	7e09      	ldrb	r1, [r1, #24]
 8004610:	b085      	sub	sp, #20
 8004612:	296e      	cmp	r1, #110	; 0x6e
 8004614:	4617      	mov	r7, r2
 8004616:	4606      	mov	r6, r0
 8004618:	4698      	mov	r8, r3
 800461a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800461c:	f000 80b3 	beq.w	8004786 <_printf_i+0x182>
 8004620:	d822      	bhi.n	8004668 <_printf_i+0x64>
 8004622:	2963      	cmp	r1, #99	; 0x63
 8004624:	d036      	beq.n	8004694 <_printf_i+0x90>
 8004626:	d80a      	bhi.n	800463e <_printf_i+0x3a>
 8004628:	2900      	cmp	r1, #0
 800462a:	f000 80b9 	beq.w	80047a0 <_printf_i+0x19c>
 800462e:	2958      	cmp	r1, #88	; 0x58
 8004630:	f000 8083 	beq.w	800473a <_printf_i+0x136>
 8004634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004638:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800463c:	e032      	b.n	80046a4 <_printf_i+0xa0>
 800463e:	2964      	cmp	r1, #100	; 0x64
 8004640:	d001      	beq.n	8004646 <_printf_i+0x42>
 8004642:	2969      	cmp	r1, #105	; 0x69
 8004644:	d1f6      	bne.n	8004634 <_printf_i+0x30>
 8004646:	6820      	ldr	r0, [r4, #0]
 8004648:	6813      	ldr	r3, [r2, #0]
 800464a:	0605      	lsls	r5, r0, #24
 800464c:	f103 0104 	add.w	r1, r3, #4
 8004650:	d52a      	bpl.n	80046a8 <_printf_i+0xa4>
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6011      	str	r1, [r2, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	da03      	bge.n	8004662 <_printf_i+0x5e>
 800465a:	222d      	movs	r2, #45	; 0x2d
 800465c:	425b      	negs	r3, r3
 800465e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004662:	486f      	ldr	r0, [pc, #444]	; (8004820 <_printf_i+0x21c>)
 8004664:	220a      	movs	r2, #10
 8004666:	e039      	b.n	80046dc <_printf_i+0xd8>
 8004668:	2973      	cmp	r1, #115	; 0x73
 800466a:	f000 809d 	beq.w	80047a8 <_printf_i+0x1a4>
 800466e:	d808      	bhi.n	8004682 <_printf_i+0x7e>
 8004670:	296f      	cmp	r1, #111	; 0x6f
 8004672:	d020      	beq.n	80046b6 <_printf_i+0xb2>
 8004674:	2970      	cmp	r1, #112	; 0x70
 8004676:	d1dd      	bne.n	8004634 <_printf_i+0x30>
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	f043 0320 	orr.w	r3, r3, #32
 800467e:	6023      	str	r3, [r4, #0]
 8004680:	e003      	b.n	800468a <_printf_i+0x86>
 8004682:	2975      	cmp	r1, #117	; 0x75
 8004684:	d017      	beq.n	80046b6 <_printf_i+0xb2>
 8004686:	2978      	cmp	r1, #120	; 0x78
 8004688:	d1d4      	bne.n	8004634 <_printf_i+0x30>
 800468a:	2378      	movs	r3, #120	; 0x78
 800468c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004690:	4864      	ldr	r0, [pc, #400]	; (8004824 <_printf_i+0x220>)
 8004692:	e055      	b.n	8004740 <_printf_i+0x13c>
 8004694:	6813      	ldr	r3, [r2, #0]
 8004696:	1d19      	adds	r1, r3, #4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6011      	str	r1, [r2, #0]
 800469c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046a4:	2301      	movs	r3, #1
 80046a6:	e08c      	b.n	80047c2 <_printf_i+0x1be>
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6011      	str	r1, [r2, #0]
 80046ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046b0:	bf18      	it	ne
 80046b2:	b21b      	sxthne	r3, r3
 80046b4:	e7cf      	b.n	8004656 <_printf_i+0x52>
 80046b6:	6813      	ldr	r3, [r2, #0]
 80046b8:	6825      	ldr	r5, [r4, #0]
 80046ba:	1d18      	adds	r0, r3, #4
 80046bc:	6010      	str	r0, [r2, #0]
 80046be:	0628      	lsls	r0, r5, #24
 80046c0:	d501      	bpl.n	80046c6 <_printf_i+0xc2>
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	e002      	b.n	80046cc <_printf_i+0xc8>
 80046c6:	0668      	lsls	r0, r5, #25
 80046c8:	d5fb      	bpl.n	80046c2 <_printf_i+0xbe>
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	4854      	ldr	r0, [pc, #336]	; (8004820 <_printf_i+0x21c>)
 80046ce:	296f      	cmp	r1, #111	; 0x6f
 80046d0:	bf14      	ite	ne
 80046d2:	220a      	movne	r2, #10
 80046d4:	2208      	moveq	r2, #8
 80046d6:	2100      	movs	r1, #0
 80046d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046dc:	6865      	ldr	r5, [r4, #4]
 80046de:	60a5      	str	r5, [r4, #8]
 80046e0:	2d00      	cmp	r5, #0
 80046e2:	f2c0 8095 	blt.w	8004810 <_printf_i+0x20c>
 80046e6:	6821      	ldr	r1, [r4, #0]
 80046e8:	f021 0104 	bic.w	r1, r1, #4
 80046ec:	6021      	str	r1, [r4, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d13d      	bne.n	800476e <_printf_i+0x16a>
 80046f2:	2d00      	cmp	r5, #0
 80046f4:	f040 808e 	bne.w	8004814 <_printf_i+0x210>
 80046f8:	4665      	mov	r5, ip
 80046fa:	2a08      	cmp	r2, #8
 80046fc:	d10b      	bne.n	8004716 <_printf_i+0x112>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	07db      	lsls	r3, r3, #31
 8004702:	d508      	bpl.n	8004716 <_printf_i+0x112>
 8004704:	6923      	ldr	r3, [r4, #16]
 8004706:	6862      	ldr	r2, [r4, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	bfde      	ittt	le
 800470c:	2330      	movle	r3, #48	; 0x30
 800470e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004712:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004716:	ebac 0305 	sub.w	r3, ip, r5
 800471a:	6123      	str	r3, [r4, #16]
 800471c:	f8cd 8000 	str.w	r8, [sp]
 8004720:	463b      	mov	r3, r7
 8004722:	aa03      	add	r2, sp, #12
 8004724:	4621      	mov	r1, r4
 8004726:	4630      	mov	r0, r6
 8004728:	f7ff fef6 	bl	8004518 <_printf_common>
 800472c:	3001      	adds	r0, #1
 800472e:	d14d      	bne.n	80047cc <_printf_i+0x1c8>
 8004730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004734:	b005      	add	sp, #20
 8004736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800473a:	4839      	ldr	r0, [pc, #228]	; (8004820 <_printf_i+0x21c>)
 800473c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004740:	6813      	ldr	r3, [r2, #0]
 8004742:	6821      	ldr	r1, [r4, #0]
 8004744:	1d1d      	adds	r5, r3, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6015      	str	r5, [r2, #0]
 800474a:	060a      	lsls	r2, r1, #24
 800474c:	d50b      	bpl.n	8004766 <_printf_i+0x162>
 800474e:	07ca      	lsls	r2, r1, #31
 8004750:	bf44      	itt	mi
 8004752:	f041 0120 	orrmi.w	r1, r1, #32
 8004756:	6021      	strmi	r1, [r4, #0]
 8004758:	b91b      	cbnz	r3, 8004762 <_printf_i+0x15e>
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	f022 0220 	bic.w	r2, r2, #32
 8004760:	6022      	str	r2, [r4, #0]
 8004762:	2210      	movs	r2, #16
 8004764:	e7b7      	b.n	80046d6 <_printf_i+0xd2>
 8004766:	064d      	lsls	r5, r1, #25
 8004768:	bf48      	it	mi
 800476a:	b29b      	uxthmi	r3, r3
 800476c:	e7ef      	b.n	800474e <_printf_i+0x14a>
 800476e:	4665      	mov	r5, ip
 8004770:	fbb3 f1f2 	udiv	r1, r3, r2
 8004774:	fb02 3311 	mls	r3, r2, r1, r3
 8004778:	5cc3      	ldrb	r3, [r0, r3]
 800477a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800477e:	460b      	mov	r3, r1
 8004780:	2900      	cmp	r1, #0
 8004782:	d1f5      	bne.n	8004770 <_printf_i+0x16c>
 8004784:	e7b9      	b.n	80046fa <_printf_i+0xf6>
 8004786:	6813      	ldr	r3, [r2, #0]
 8004788:	6825      	ldr	r5, [r4, #0]
 800478a:	6961      	ldr	r1, [r4, #20]
 800478c:	1d18      	adds	r0, r3, #4
 800478e:	6010      	str	r0, [r2, #0]
 8004790:	0628      	lsls	r0, r5, #24
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	d501      	bpl.n	800479a <_printf_i+0x196>
 8004796:	6019      	str	r1, [r3, #0]
 8004798:	e002      	b.n	80047a0 <_printf_i+0x19c>
 800479a:	066a      	lsls	r2, r5, #25
 800479c:	d5fb      	bpl.n	8004796 <_printf_i+0x192>
 800479e:	8019      	strh	r1, [r3, #0]
 80047a0:	2300      	movs	r3, #0
 80047a2:	6123      	str	r3, [r4, #16]
 80047a4:	4665      	mov	r5, ip
 80047a6:	e7b9      	b.n	800471c <_printf_i+0x118>
 80047a8:	6813      	ldr	r3, [r2, #0]
 80047aa:	1d19      	adds	r1, r3, #4
 80047ac:	6011      	str	r1, [r2, #0]
 80047ae:	681d      	ldr	r5, [r3, #0]
 80047b0:	6862      	ldr	r2, [r4, #4]
 80047b2:	2100      	movs	r1, #0
 80047b4:	4628      	mov	r0, r5
 80047b6:	f7fb fd2b 	bl	8000210 <memchr>
 80047ba:	b108      	cbz	r0, 80047c0 <_printf_i+0x1bc>
 80047bc:	1b40      	subs	r0, r0, r5
 80047be:	6060      	str	r0, [r4, #4]
 80047c0:	6863      	ldr	r3, [r4, #4]
 80047c2:	6123      	str	r3, [r4, #16]
 80047c4:	2300      	movs	r3, #0
 80047c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ca:	e7a7      	b.n	800471c <_printf_i+0x118>
 80047cc:	6923      	ldr	r3, [r4, #16]
 80047ce:	462a      	mov	r2, r5
 80047d0:	4639      	mov	r1, r7
 80047d2:	4630      	mov	r0, r6
 80047d4:	47c0      	blx	r8
 80047d6:	3001      	adds	r0, #1
 80047d8:	d0aa      	beq.n	8004730 <_printf_i+0x12c>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	079b      	lsls	r3, r3, #30
 80047de:	d413      	bmi.n	8004808 <_printf_i+0x204>
 80047e0:	68e0      	ldr	r0, [r4, #12]
 80047e2:	9b03      	ldr	r3, [sp, #12]
 80047e4:	4298      	cmp	r0, r3
 80047e6:	bfb8      	it	lt
 80047e8:	4618      	movlt	r0, r3
 80047ea:	e7a3      	b.n	8004734 <_printf_i+0x130>
 80047ec:	2301      	movs	r3, #1
 80047ee:	464a      	mov	r2, r9
 80047f0:	4639      	mov	r1, r7
 80047f2:	4630      	mov	r0, r6
 80047f4:	47c0      	blx	r8
 80047f6:	3001      	adds	r0, #1
 80047f8:	d09a      	beq.n	8004730 <_printf_i+0x12c>
 80047fa:	3501      	adds	r5, #1
 80047fc:	68e3      	ldr	r3, [r4, #12]
 80047fe:	9a03      	ldr	r2, [sp, #12]
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	42ab      	cmp	r3, r5
 8004804:	dcf2      	bgt.n	80047ec <_printf_i+0x1e8>
 8004806:	e7eb      	b.n	80047e0 <_printf_i+0x1dc>
 8004808:	2500      	movs	r5, #0
 800480a:	f104 0919 	add.w	r9, r4, #25
 800480e:	e7f5      	b.n	80047fc <_printf_i+0x1f8>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ac      	bne.n	800476e <_printf_i+0x16a>
 8004814:	7803      	ldrb	r3, [r0, #0]
 8004816:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800481a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800481e:	e76c      	b.n	80046fa <_printf_i+0xf6>
 8004820:	08004ca9 	.word	0x08004ca9
 8004824:	08004cba 	.word	0x08004cba

08004828 <memcpy>:
 8004828:	b510      	push	{r4, lr}
 800482a:	1e43      	subs	r3, r0, #1
 800482c:	440a      	add	r2, r1
 800482e:	4291      	cmp	r1, r2
 8004830:	d100      	bne.n	8004834 <memcpy+0xc>
 8004832:	bd10      	pop	{r4, pc}
 8004834:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004838:	f803 4f01 	strb.w	r4, [r3, #1]!
 800483c:	e7f7      	b.n	800482e <memcpy+0x6>

0800483e <memmove>:
 800483e:	4288      	cmp	r0, r1
 8004840:	b510      	push	{r4, lr}
 8004842:	eb01 0302 	add.w	r3, r1, r2
 8004846:	d807      	bhi.n	8004858 <memmove+0x1a>
 8004848:	1e42      	subs	r2, r0, #1
 800484a:	4299      	cmp	r1, r3
 800484c:	d00a      	beq.n	8004864 <memmove+0x26>
 800484e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004852:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004856:	e7f8      	b.n	800484a <memmove+0xc>
 8004858:	4283      	cmp	r3, r0
 800485a:	d9f5      	bls.n	8004848 <memmove+0xa>
 800485c:	1881      	adds	r1, r0, r2
 800485e:	1ad2      	subs	r2, r2, r3
 8004860:	42d3      	cmn	r3, r2
 8004862:	d100      	bne.n	8004866 <memmove+0x28>
 8004864:	bd10      	pop	{r4, pc}
 8004866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800486a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800486e:	e7f7      	b.n	8004860 <memmove+0x22>

08004870 <_free_r>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4605      	mov	r5, r0
 8004874:	2900      	cmp	r1, #0
 8004876:	d045      	beq.n	8004904 <_free_r+0x94>
 8004878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800487c:	1f0c      	subs	r4, r1, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	bfb8      	it	lt
 8004882:	18e4      	addlt	r4, r4, r3
 8004884:	f000 f8d2 	bl	8004a2c <__malloc_lock>
 8004888:	4a1f      	ldr	r2, [pc, #124]	; (8004908 <_free_r+0x98>)
 800488a:	6813      	ldr	r3, [r2, #0]
 800488c:	4610      	mov	r0, r2
 800488e:	b933      	cbnz	r3, 800489e <_free_r+0x2e>
 8004890:	6063      	str	r3, [r4, #4]
 8004892:	6014      	str	r4, [r2, #0]
 8004894:	4628      	mov	r0, r5
 8004896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800489a:	f000 b8c8 	b.w	8004a2e <__malloc_unlock>
 800489e:	42a3      	cmp	r3, r4
 80048a0:	d90c      	bls.n	80048bc <_free_r+0x4c>
 80048a2:	6821      	ldr	r1, [r4, #0]
 80048a4:	1862      	adds	r2, r4, r1
 80048a6:	4293      	cmp	r3, r2
 80048a8:	bf04      	itt	eq
 80048aa:	681a      	ldreq	r2, [r3, #0]
 80048ac:	685b      	ldreq	r3, [r3, #4]
 80048ae:	6063      	str	r3, [r4, #4]
 80048b0:	bf04      	itt	eq
 80048b2:	1852      	addeq	r2, r2, r1
 80048b4:	6022      	streq	r2, [r4, #0]
 80048b6:	6004      	str	r4, [r0, #0]
 80048b8:	e7ec      	b.n	8004894 <_free_r+0x24>
 80048ba:	4613      	mov	r3, r2
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	b10a      	cbz	r2, 80048c4 <_free_r+0x54>
 80048c0:	42a2      	cmp	r2, r4
 80048c2:	d9fa      	bls.n	80048ba <_free_r+0x4a>
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	1858      	adds	r0, r3, r1
 80048c8:	42a0      	cmp	r0, r4
 80048ca:	d10b      	bne.n	80048e4 <_free_r+0x74>
 80048cc:	6820      	ldr	r0, [r4, #0]
 80048ce:	4401      	add	r1, r0
 80048d0:	1858      	adds	r0, r3, r1
 80048d2:	4282      	cmp	r2, r0
 80048d4:	6019      	str	r1, [r3, #0]
 80048d6:	d1dd      	bne.n	8004894 <_free_r+0x24>
 80048d8:	6810      	ldr	r0, [r2, #0]
 80048da:	6852      	ldr	r2, [r2, #4]
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	4401      	add	r1, r0
 80048e0:	6019      	str	r1, [r3, #0]
 80048e2:	e7d7      	b.n	8004894 <_free_r+0x24>
 80048e4:	d902      	bls.n	80048ec <_free_r+0x7c>
 80048e6:	230c      	movs	r3, #12
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	e7d3      	b.n	8004894 <_free_r+0x24>
 80048ec:	6820      	ldr	r0, [r4, #0]
 80048ee:	1821      	adds	r1, r4, r0
 80048f0:	428a      	cmp	r2, r1
 80048f2:	bf04      	itt	eq
 80048f4:	6811      	ldreq	r1, [r2, #0]
 80048f6:	6852      	ldreq	r2, [r2, #4]
 80048f8:	6062      	str	r2, [r4, #4]
 80048fa:	bf04      	itt	eq
 80048fc:	1809      	addeq	r1, r1, r0
 80048fe:	6021      	streq	r1, [r4, #0]
 8004900:	605c      	str	r4, [r3, #4]
 8004902:	e7c7      	b.n	8004894 <_free_r+0x24>
 8004904:	bd38      	pop	{r3, r4, r5, pc}
 8004906:	bf00      	nop
 8004908:	20000114 	.word	0x20000114

0800490c <_malloc_r>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	1ccd      	adds	r5, r1, #3
 8004910:	f025 0503 	bic.w	r5, r5, #3
 8004914:	3508      	adds	r5, #8
 8004916:	2d0c      	cmp	r5, #12
 8004918:	bf38      	it	cc
 800491a:	250c      	movcc	r5, #12
 800491c:	2d00      	cmp	r5, #0
 800491e:	4606      	mov	r6, r0
 8004920:	db01      	blt.n	8004926 <_malloc_r+0x1a>
 8004922:	42a9      	cmp	r1, r5
 8004924:	d903      	bls.n	800492e <_malloc_r+0x22>
 8004926:	230c      	movs	r3, #12
 8004928:	6033      	str	r3, [r6, #0]
 800492a:	2000      	movs	r0, #0
 800492c:	bd70      	pop	{r4, r5, r6, pc}
 800492e:	f000 f87d 	bl	8004a2c <__malloc_lock>
 8004932:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <_malloc_r+0xac>)
 8004934:	6814      	ldr	r4, [r2, #0]
 8004936:	4621      	mov	r1, r4
 8004938:	b991      	cbnz	r1, 8004960 <_malloc_r+0x54>
 800493a:	4c20      	ldr	r4, [pc, #128]	; (80049bc <_malloc_r+0xb0>)
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	b91b      	cbnz	r3, 8004948 <_malloc_r+0x3c>
 8004940:	4630      	mov	r0, r6
 8004942:	f000 f863 	bl	8004a0c <_sbrk_r>
 8004946:	6020      	str	r0, [r4, #0]
 8004948:	4629      	mov	r1, r5
 800494a:	4630      	mov	r0, r6
 800494c:	f000 f85e 	bl	8004a0c <_sbrk_r>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d124      	bne.n	800499e <_malloc_r+0x92>
 8004954:	230c      	movs	r3, #12
 8004956:	6033      	str	r3, [r6, #0]
 8004958:	4630      	mov	r0, r6
 800495a:	f000 f868 	bl	8004a2e <__malloc_unlock>
 800495e:	e7e4      	b.n	800492a <_malloc_r+0x1e>
 8004960:	680b      	ldr	r3, [r1, #0]
 8004962:	1b5b      	subs	r3, r3, r5
 8004964:	d418      	bmi.n	8004998 <_malloc_r+0x8c>
 8004966:	2b0b      	cmp	r3, #11
 8004968:	d90f      	bls.n	800498a <_malloc_r+0x7e>
 800496a:	600b      	str	r3, [r1, #0]
 800496c:	50cd      	str	r5, [r1, r3]
 800496e:	18cc      	adds	r4, r1, r3
 8004970:	4630      	mov	r0, r6
 8004972:	f000 f85c 	bl	8004a2e <__malloc_unlock>
 8004976:	f104 000b 	add.w	r0, r4, #11
 800497a:	1d23      	adds	r3, r4, #4
 800497c:	f020 0007 	bic.w	r0, r0, #7
 8004980:	1ac3      	subs	r3, r0, r3
 8004982:	d0d3      	beq.n	800492c <_malloc_r+0x20>
 8004984:	425a      	negs	r2, r3
 8004986:	50e2      	str	r2, [r4, r3]
 8004988:	e7d0      	b.n	800492c <_malloc_r+0x20>
 800498a:	428c      	cmp	r4, r1
 800498c:	684b      	ldr	r3, [r1, #4]
 800498e:	bf16      	itet	ne
 8004990:	6063      	strne	r3, [r4, #4]
 8004992:	6013      	streq	r3, [r2, #0]
 8004994:	460c      	movne	r4, r1
 8004996:	e7eb      	b.n	8004970 <_malloc_r+0x64>
 8004998:	460c      	mov	r4, r1
 800499a:	6849      	ldr	r1, [r1, #4]
 800499c:	e7cc      	b.n	8004938 <_malloc_r+0x2c>
 800499e:	1cc4      	adds	r4, r0, #3
 80049a0:	f024 0403 	bic.w	r4, r4, #3
 80049a4:	42a0      	cmp	r0, r4
 80049a6:	d005      	beq.n	80049b4 <_malloc_r+0xa8>
 80049a8:	1a21      	subs	r1, r4, r0
 80049aa:	4630      	mov	r0, r6
 80049ac:	f000 f82e 	bl	8004a0c <_sbrk_r>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d0cf      	beq.n	8004954 <_malloc_r+0x48>
 80049b4:	6025      	str	r5, [r4, #0]
 80049b6:	e7db      	b.n	8004970 <_malloc_r+0x64>
 80049b8:	20000114 	.word	0x20000114
 80049bc:	20000118 	.word	0x20000118

080049c0 <_realloc_r>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	4607      	mov	r7, r0
 80049c4:	4614      	mov	r4, r2
 80049c6:	460e      	mov	r6, r1
 80049c8:	b921      	cbnz	r1, 80049d4 <_realloc_r+0x14>
 80049ca:	4611      	mov	r1, r2
 80049cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049d0:	f7ff bf9c 	b.w	800490c <_malloc_r>
 80049d4:	b922      	cbnz	r2, 80049e0 <_realloc_r+0x20>
 80049d6:	f7ff ff4b 	bl	8004870 <_free_r>
 80049da:	4625      	mov	r5, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e0:	f000 f826 	bl	8004a30 <_malloc_usable_size_r>
 80049e4:	42a0      	cmp	r0, r4
 80049e6:	d20f      	bcs.n	8004a08 <_realloc_r+0x48>
 80049e8:	4621      	mov	r1, r4
 80049ea:	4638      	mov	r0, r7
 80049ec:	f7ff ff8e 	bl	800490c <_malloc_r>
 80049f0:	4605      	mov	r5, r0
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d0f2      	beq.n	80049dc <_realloc_r+0x1c>
 80049f6:	4631      	mov	r1, r6
 80049f8:	4622      	mov	r2, r4
 80049fa:	f7ff ff15 	bl	8004828 <memcpy>
 80049fe:	4631      	mov	r1, r6
 8004a00:	4638      	mov	r0, r7
 8004a02:	f7ff ff35 	bl	8004870 <_free_r>
 8004a06:	e7e9      	b.n	80049dc <_realloc_r+0x1c>
 8004a08:	4635      	mov	r5, r6
 8004a0a:	e7e7      	b.n	80049dc <_realloc_r+0x1c>

08004a0c <_sbrk_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4c06      	ldr	r4, [pc, #24]	; (8004a28 <_sbrk_r+0x1c>)
 8004a10:	2300      	movs	r3, #0
 8004a12:	4605      	mov	r5, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	f7fc fd30 	bl	800147c <_sbrk>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_sbrk_r+0x1a>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_sbrk_r+0x1a>
 8004a24:	602b      	str	r3, [r5, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	200003f8 	.word	0x200003f8

08004a2c <__malloc_lock>:
 8004a2c:	4770      	bx	lr

08004a2e <__malloc_unlock>:
 8004a2e:	4770      	bx	lr

08004a30 <_malloc_usable_size_r>:
 8004a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a34:	1f18      	subs	r0, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bfbc      	itt	lt
 8004a3a:	580b      	ldrlt	r3, [r1, r0]
 8004a3c:	18c0      	addlt	r0, r0, r3
 8004a3e:	4770      	bx	lr

08004a40 <_init>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr

08004a4c <_fini>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr
