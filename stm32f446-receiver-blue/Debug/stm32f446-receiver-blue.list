
stm32f446-receiver-blue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000448c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004978  08004978  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08004980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200000f4  08004a74  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08004a74  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca95  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cb0  00000000  00000000  0002cbb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  0002e870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c18  00000000  00000000  0002f570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000217d1  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096aa  00000000  00000000  00051959  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce426  00000000  00000000  0005b003  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129429  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003648  00000000  00000000  001294a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000f4 	.word	0x200000f4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004638 	.word	0x08004638

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000f8 	.word	0x200000f8
 8000200:	08004638 	.word	0x08004638

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Data8_toMassHex>:
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

// Функция перевода массива чисел в массив Hex символов
void Data8_toMassHex(uint8_t* Data,uint8_t DataLen, uint8_t* pcBlock, uint8_t StrartMass)
{
 8000504:	b480      	push	{r7}
 8000506:	b087      	sub	sp, #28
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	607a      	str	r2, [r7, #4]
 800050e:	461a      	mov	r2, r3
 8000510:	460b      	mov	r3, r1
 8000512:	72fb      	strb	r3, [r7, #11]
 8000514:	4613      	mov	r3, r2
 8000516:	72bb      	strb	r3, [r7, #10]
	for(uint8_t j=0; j < DataLen; j++)
 8000518:	2300      	movs	r3, #0
 800051a:	75fb      	strb	r3, [r7, #23]
 800051c:	e060      	b.n	80005e0 <Data8_toMassHex+0xdc>
	{
		for (int8_t i = 1 + StrartMass; i >= StrartMass; i--)
 800051e:	7abb      	ldrb	r3, [r7, #10]
 8000520:	3301      	adds	r3, #1
 8000522:	b2db      	uxtb	r3, r3
 8000524:	75bb      	strb	r3, [r7, #22]
 8000526:	e053      	b.n	80005d0 <Data8_toMassHex+0xcc>
		{
			pcBlock[i+j*2] = Data[j] % 16;
 8000528:	7dfb      	ldrb	r3, [r7, #23]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	4413      	add	r3, r2
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	f997 1016 	ldrsb.w	r1, [r7, #22]
 8000534:	7dfb      	ldrb	r3, [r7, #23]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	440b      	add	r3, r1
 800053a:	4619      	mov	r1, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	440b      	add	r3, r1
 8000540:	f002 020f 	and.w	r2, r2, #15
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
			if (pcBlock[i+j*2] >= 10)
 8000548:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800054c:	7dfb      	ldrb	r3, [r7, #23]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	4413      	add	r3, r2
 8000552:	461a      	mov	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b09      	cmp	r3, #9
 800055c:	d914      	bls.n	8000588 <Data8_toMassHex+0x84>
			{
				pcBlock[i+j*2] += 55;
 800055e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4413      	add	r3, r2
 8000568:	461a      	mov	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	f997 1016 	ldrsb.w	r1, [r7, #22]
 8000574:	7dfb      	ldrb	r3, [r7, #23]
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	440b      	add	r3, r1
 800057a:	4619      	mov	r1, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	440b      	add	r3, r1
 8000580:	3237      	adds	r2, #55	; 0x37
 8000582:	b2d2      	uxtb	r2, r2
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	e013      	b.n	80005b0 <Data8_toMassHex+0xac>
			}
			else pcBlock[i+j*2] += 48;
 8000588:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800058c:	7dfb      	ldrb	r3, [r7, #23]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	461a      	mov	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	f997 1016 	ldrsb.w	r1, [r7, #22]
 800059e:	7dfb      	ldrb	r3, [r7, #23]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	440b      	add	r3, r1
 80005a4:	4619      	mov	r1, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	440b      	add	r3, r1
 80005aa:	3230      	adds	r2, #48	; 0x30
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
			Data[j] /= 16;
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	4413      	add	r3, r2
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	68f9      	ldr	r1, [r7, #12]
 80005bc:	440b      	add	r3, r1
 80005be:	0912      	lsrs	r2, r2, #4
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
		for (int8_t i = 1 + StrartMass; i >= StrartMass; i--)
 80005c4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	3b01      	subs	r3, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	75bb      	strb	r3, [r7, #22]
 80005d0:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80005d4:	7abb      	ldrb	r3, [r7, #10]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	daa6      	bge.n	8000528 <Data8_toMassHex+0x24>
	for(uint8_t j=0; j < DataLen; j++)
 80005da:	7dfb      	ldrb	r3, [r7, #23]
 80005dc:	3301      	adds	r3, #1
 80005de:	75fb      	strb	r3, [r7, #23]
 80005e0:	7dfa      	ldrb	r2, [r7, #23]
 80005e2:	7afb      	ldrb	r3, [r7, #11]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d39a      	bcc.n	800051e <Data8_toMassHex+0x1a>
		}
	}

}
 80005e8:	bf00      	nop
 80005ea:	371c      	adds	r7, #28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <powx>:
// Функция нахождения степени числа
int powx(int base, int exponent)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	int result = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
	for (int i=exponent; i > 0; i--)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	e007      	b.n	8000618 <powx+0x24>
	{
		result = result * base;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	fb02 f303 	mul.w	r3, r2, r3
 8000610:	60fb      	str	r3, [r7, #12]
	for (int i=exponent; i > 0; i--)
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3b01      	subs	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b00      	cmp	r3, #0
 800061c:	dcf4      	bgt.n	8000608 <powx+0x14>
	}
	return result;
 800061e:	68fb      	ldr	r3, [r7, #12]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <Mass_toData8>:

// Функция перевода массива символов Hex в массив чисел
void Mass_toData8(uint8_t *pcBlock,uint8_t* data8, unsigned short len) //rx_buffer,rx_in-2
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	4613      	mov	r3, r2
 8000638:	80fb      	strh	r3, [r7, #6]
	unsigned short sum = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	83fb      	strh	r3, [r7, #30]
	int x = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
	for(uint8_t j=0;j<len;j++)
 8000642:	2300      	movs	r3, #0
 8000644:	75fb      	strb	r3, [r7, #23]
 8000646:	e044      	b.n	80006d2 <Mass_toData8+0xa6>
	{
	for (int i = 0; i < 2; i++)
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	e033      	b.n	80006b6 <Mass_toData8+0x8a>
	{
		if (pcBlock[2 - i - 1+j*2] > 57)
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	f1c3 0201 	rsb	r2, r3, #1
 8000654:	7dfb      	ldrb	r3, [r7, #23]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	461a      	mov	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b39      	cmp	r3, #57	; 0x39
 8000664:	d90c      	bls.n	8000680 <Mass_toData8+0x54>
		{
			x = (pcBlock[2 - i - 1+j*2] - 55);
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	f1c3 0201 	rsb	r2, r3, #1
 800066c:	7dfb      	ldrb	r3, [r7, #23]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4413      	add	r3, r2
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	3b37      	subs	r3, #55	; 0x37
 800067c:	61bb      	str	r3, [r7, #24]
 800067e:	e00b      	b.n	8000698 <Mass_toData8+0x6c>
		}
		else
		{
			x = (pcBlock[2 - i - 1+j*2] - 48);
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	f1c3 0201 	rsb	r2, r3, #1
 8000686:	7dfb      	ldrb	r3, [r7, #23]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	461a      	mov	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3b30      	subs	r3, #48	; 0x30
 8000696:	61bb      	str	r3, [r7, #24]
		}
		sum += x * powx(16, i);
 8000698:	6939      	ldr	r1, [r7, #16]
 800069a:	2010      	movs	r0, #16
 800069c:	f7ff ffaa 	bl	80005f4 <powx>
 80006a0:	4602      	mov	r2, r0
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	fb03 f302 	mul.w	r3, r3, r2
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	8bfb      	ldrh	r3, [r7, #30]
 80006ac:	4413      	add	r3, r2
 80006ae:	83fb      	strh	r3, [r7, #30]
	for (int i = 0; i < 2; i++)
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	3301      	adds	r3, #1
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	ddc8      	ble.n	800064e <Mass_toData8+0x22>
	}
	data8[j]=sum;
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	4413      	add	r3, r2
 80006c2:	8bfa      	ldrh	r2, [r7, #30]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	701a      	strb	r2, [r3, #0]
	sum=0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	83fb      	strh	r3, [r7, #30]
	for(uint8_t j=0;j<len;j++)
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	3301      	adds	r3, #1
 80006d0:	75fb      	strb	r3, [r7, #23]
 80006d2:	7dfb      	ldrb	r3, [r7, #23]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	88fa      	ldrh	r2, [r7, #6]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d8b5      	bhi.n	8000648 <Mass_toData8+0x1c>
	}

}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <WMSM42Init>:




void WMSM42Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
	//Начальная инфа
	HAL_UART_Receive_IT(&huart6, &dataWm, 1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	4939      	ldr	r1, [pc, #228]	; (80007d4 <WMSM42Init+0xf0>)
 80006ee:	483a      	ldr	r0, [pc, #232]	; (80007d8 <WMSM42Init+0xf4>)
 80006f0:	f003 f8a2 	bl	8003838 <HAL_UART_Receive_IT>
	HAL_Delay(2000);
 80006f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f8:	f001 f924 	bl	8001944 <HAL_Delay>
	ReadflagWm=0;
 80006fc:	4b37      	ldr	r3, [pc, #220]	; (80007dc <WMSM42Init+0xf8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
	countWm=0;
 8000702:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <WMSM42Init+0xfc>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<20;i++)
 8000708:	2300      	movs	r3, #0
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	e006      	b.n	800071c <WMSM42Init+0x38>
		Buff_rx[i]=0;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4a34      	ldr	r2, [pc, #208]	; (80007e4 <WMSM42Init+0x100>)
 8000712:	2100      	movs	r1, #0
 8000714:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<20;i++)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	3301      	adds	r3, #1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b13      	cmp	r3, #19
 8000720:	d9f5      	bls.n	800070e <WMSM42Init+0x2a>
	HAL_UART_Transmit(&huart6, buf_EchoOff, sizeof(buf_EchoOff),100); //отключаем эхо
 8000722:	2364      	movs	r3, #100	; 0x64
 8000724:	2206      	movs	r2, #6
 8000726:	4930      	ldr	r1, [pc, #192]	; (80007e8 <WMSM42Init+0x104>)
 8000728:	482b      	ldr	r0, [pc, #172]	; (80007d8 <WMSM42Init+0xf4>)
 800072a:	f002 ffec 	bl	8003706 <HAL_UART_Transmit>
	HAL_Delay(100);
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f001 f908 	bl	8001944 <HAL_Delay>
	ReadflagWm=0;
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <WMSM42Init+0xf8>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
	countWm=0;
 800073a:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <WMSM42Init+0xfc>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<20;i++)
 8000740:	2300      	movs	r3, #0
 8000742:	71bb      	strb	r3, [r7, #6]
 8000744:	e006      	b.n	8000754 <WMSM42Init+0x70>
		Buff_rx[i]=0;
 8000746:	79bb      	ldrb	r3, [r7, #6]
 8000748:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <WMSM42Init+0x100>)
 800074a:	2100      	movs	r1, #0
 800074c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<20;i++)
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	3301      	adds	r3, #1
 8000752:	71bb      	strb	r3, [r7, #6]
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	2b13      	cmp	r3, #19
 8000758:	d9f5      	bls.n	8000746 <WMSM42Init+0x62>
	HAL_UART_Transmit(&huart6, buf_com1, sizeof(buf_com1),100); // Спящий режим
 800075a:	2364      	movs	r3, #100	; 0x64
 800075c:	220d      	movs	r2, #13
 800075e:	4923      	ldr	r1, [pc, #140]	; (80007ec <WMSM42Init+0x108>)
 8000760:	481d      	ldr	r0, [pc, #116]	; (80007d8 <WMSM42Init+0xf4>)
 8000762:	f002 ffd0 	bl	8003706 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f001 f8ec 	bl	8001944 <HAL_Delay>
	ReadflagWm=0;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <WMSM42Init+0xf8>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
	countWm=0;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <WMSM42Init+0xfc>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<20;i++)
 8000778:	2300      	movs	r3, #0
 800077a:	717b      	strb	r3, [r7, #5]
 800077c:	e006      	b.n	800078c <WMSM42Init+0xa8>
		Buff_rx[i]=0;
 800077e:	797b      	ldrb	r3, [r7, #5]
 8000780:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <WMSM42Init+0x100>)
 8000782:	2100      	movs	r1, #0
 8000784:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<20;i++)
 8000786:	797b      	ldrb	r3, [r7, #5]
 8000788:	3301      	adds	r3, #1
 800078a:	717b      	strb	r3, [r7, #5]
 800078c:	797b      	ldrb	r3, [r7, #5]
 800078e:	2b13      	cmp	r3, #19
 8000790:	d9f5      	bls.n	800077e <WMSM42Init+0x9a>
	HAL_UART_Transmit(&huart6, buf_com2, sizeof(buf_com2),100); // Настройки
 8000792:	2364      	movs	r3, #100	; 0x64
 8000794:	2226      	movs	r2, #38	; 0x26
 8000796:	4916      	ldr	r1, [pc, #88]	; (80007f0 <WMSM42Init+0x10c>)
 8000798:	480f      	ldr	r0, [pc, #60]	; (80007d8 <WMSM42Init+0xf4>)
 800079a:	f002 ffb4 	bl	8003706 <HAL_UART_Transmit>
	HAL_Delay(100);
 800079e:	2064      	movs	r0, #100	; 0x64
 80007a0:	f001 f8d0 	bl	8001944 <HAL_Delay>
	ReadflagWm=0;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <WMSM42Init+0xf8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
	countWm=0;
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <WMSM42Init+0xfc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<20;i++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	713b      	strb	r3, [r7, #4]
 80007b4:	e006      	b.n	80007c4 <WMSM42Init+0xe0>
		Buff_rx[i]=0;
 80007b6:	793b      	ldrb	r3, [r7, #4]
 80007b8:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <WMSM42Init+0x100>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<20;i++)
 80007be:	793b      	ldrb	r3, [r7, #4]
 80007c0:	3301      	adds	r3, #1
 80007c2:	713b      	strb	r3, [r7, #4]
 80007c4:	793b      	ldrb	r3, [r7, #4]
 80007c6:	2b13      	cmp	r3, #19
 80007c8:	d9f5      	bls.n	80007b6 <WMSM42Init+0xd2>
	HAL_UART_Transmit(&huart6, buf_preamlen, sizeof(buf_preamlen),100); // Длина преамбулы
	HAL_Delay(100);
	ReadflagWm=0;
	countWm=0;
	*/
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000117 	.word	0x20000117
 80007d8:	20000354 	.word	0x20000354
 80007dc:	20000119 	.word	0x20000119
 80007e0:	20000115 	.word	0x20000115
 80007e4:	20000130 	.word	0x20000130
 80007e8:	20000028 	.word	0x20000028
 80007ec:	20000030 	.word	0x20000030
 80007f0:	20000040 	.word	0x20000040

080007f4 <WMSM42TXmode>:
void WMSM42TXmode(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart6, buf_com3_TX_mode, sizeof(buf_com3_TX_mode),100);
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	220d      	movs	r2, #13
 80007fe:	490f      	ldr	r1, [pc, #60]	; (800083c <WMSM42TXmode+0x48>)
 8000800:	480f      	ldr	r0, [pc, #60]	; (8000840 <WMSM42TXmode+0x4c>)
 8000802:	f002 ff80 	bl	8003706 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000806:	2064      	movs	r0, #100	; 0x64
 8000808:	f001 f89c 	bl	8001944 <HAL_Delay>
	ReadflagWm=0;
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <WMSM42TXmode+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
	countWm=0;
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <WMSM42TXmode+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<20;i++)
 8000818:	2300      	movs	r3, #0
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	e006      	b.n	800082c <WMSM42TXmode+0x38>
		Buff_rx[i]=0;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4a0a      	ldr	r2, [pc, #40]	; (800084c <WMSM42TXmode+0x58>)
 8000822:	2100      	movs	r1, #0
 8000824:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<20;i++)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	3301      	adds	r3, #1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b13      	cmp	r3, #19
 8000830:	d9f5      	bls.n	800081e <WMSM42TXmode+0x2a>
	HAL_UART_Transmit(&huart6, buf_preamlen, sizeof(buf_preamlen),100); // Длина преамбулы
	while(ReadflagWm==0);
	ReadflagWm=0;
	countWm=0;
	*/
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000068 	.word	0x20000068
 8000840:	20000354 	.word	0x20000354
 8000844:	20000119 	.word	0x20000119
 8000848:	20000115 	.word	0x20000115
 800084c:	20000130 	.word	0x20000130

08000850 <WMSM42RXmode>:
void WMSM42RXmode(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart6, buf_com3_RX_mode, sizeof(buf_com3_RX_mode),100);
 8000854:	2364      	movs	r3, #100	; 0x64
 8000856:	220d      	movs	r2, #13
 8000858:	4916      	ldr	r1, [pc, #88]	; (80008b4 <WMSM42RXmode+0x64>)
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <WMSM42RXmode+0x68>)
 800085c:	f002 ff53 	bl	8003706 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000860:	2064      	movs	r0, #100	; 0x64
 8000862:	f001 f86f 	bl	8001944 <HAL_Delay>
	ReadflagWm=0;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <WMSM42RXmode+0x6c>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
	countWm=0;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <WMSM42RXmode+0x70>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, buf_paylen, sizeof(buf_paylen),100); // Длина посылки
 8000872:	2364      	movs	r3, #100	; 0x64
 8000874:	2212      	movs	r2, #18
 8000876:	4913      	ldr	r1, [pc, #76]	; (80008c4 <WMSM42RXmode+0x74>)
 8000878:	480f      	ldr	r0, [pc, #60]	; (80008b8 <WMSM42RXmode+0x68>)
 800087a:	f002 ff44 	bl	8003706 <HAL_UART_Transmit>
	HAL_Delay(50);
 800087e:	2032      	movs	r0, #50	; 0x32
 8000880:	f001 f860 	bl	8001944 <HAL_Delay>
	ReadflagWm=0;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <WMSM42RXmode+0x6c>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
	countWm=0;
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <WMSM42RXmode+0x70>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, buf_preamlen, sizeof(buf_preamlen),100); // Длина преамбулы
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2212      	movs	r2, #18
 8000894:	490c      	ldr	r1, [pc, #48]	; (80008c8 <WMSM42RXmode+0x78>)
 8000896:	4808      	ldr	r0, [pc, #32]	; (80008b8 <WMSM42RXmode+0x68>)
 8000898:	f002 ff35 	bl	8003706 <HAL_UART_Transmit>
	HAL_Delay(50);
 800089c:	2032      	movs	r0, #50	; 0x32
 800089e:	f001 f851 	bl	8001944 <HAL_Delay>
	ReadflagWm=0;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <WMSM42RXmode+0x6c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
	countWm=0;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <WMSM42RXmode+0x70>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000078 	.word	0x20000078
 80008b8:	20000354 	.word	0x20000354
 80008bc:	20000119 	.word	0x20000119
 80008c0:	20000115 	.word	0x20000115
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000014 	.word	0x20000014

080008cc <WMSM42TXsend>:
void WMSM42TXsend(uint8_t* mass)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	Data8_toMassHex(mass,42,buf_com_Tx,9);
 80008d4:	2309      	movs	r3, #9
 80008d6:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <WMSM42TXsend+0x3c>)
 80008d8:	212a      	movs	r1, #42	; 0x2a
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff fe12 	bl	8000504 <Data8_toMassHex>
	HAL_UART_Transmit(&huart6, buf_com_Tx, sizeof(buf_com_Tx),100);
 80008e0:	2364      	movs	r3, #100	; 0x64
 80008e2:	225e      	movs	r2, #94	; 0x5e
 80008e4:	4908      	ldr	r1, [pc, #32]	; (8000908 <WMSM42TXsend+0x3c>)
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <WMSM42TXsend+0x40>)
 80008e8:	f002 ff0d 	bl	8003706 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80008ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f0:	f001 f828 	bl	8001944 <HAL_Delay>
	ReadflagWm=0;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <WMSM42TXsend+0x44>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
	countWm=0;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <WMSM42TXsend+0x48>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000088 	.word	0x20000088
 800090c:	20000354 	.word	0x20000354
 8000910:	20000119 	.word	0x20000119
 8000914:	20000115 	.word	0x20000115

08000918 <WMSM42GetPacket>:
void WMSM42GetPacket(uint8_t* mass)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	Mass_toData8(&mass[6],TX_RX_Radio,42);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3306      	adds	r3, #6
 8000924:	222a      	movs	r2, #42	; 0x2a
 8000926:	4904      	ldr	r1, [pc, #16]	; (8000938 <WMSM42GetPacket+0x20>)
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe7f 	bl	800062c <Mass_toData8>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000258 	.word	0x20000258

0800093c <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800094c:	81fb      	strh	r3, [r7, #14]

    while (len--)
 800094e:	e012      	b.n	8000976 <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 8000950:	89fb      	ldrh	r3, [r7, #14]
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	b21a      	sxth	r2, r3
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b29b      	uxth	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	1c59      	adds	r1, r3, #1
 8000962:	6079      	str	r1, [r7, #4]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4043      	eors	r3, r0
 8000968:	4909      	ldr	r1, [pc, #36]	; (8000990 <Crc16+0x54>)
 800096a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800096e:	b21b      	sxth	r3, r3
 8000970:	4053      	eors	r3, r2
 8000972:	b21b      	sxth	r3, r3
 8000974:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8000976:	887b      	ldrh	r3, [r7, #2]
 8000978:	1e5a      	subs	r2, r3, #1
 800097a:	807a      	strh	r2, [r7, #2]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1e7      	bne.n	8000950 <Crc16+0x14>

    return crc;
 8000980:	89fb      	ldrh	r3, [r7, #14]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	08004650 	.word	0x08004650

08000994 <Crc8>:
    0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
    0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};
// Расчет CRC8
unsigned char Crc8(unsigned char *pcBlock, unsigned char len)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
    unsigned char crc = 0xFF;
 80009a0:	23ff      	movs	r3, #255	; 0xff
 80009a2:	73fb      	strb	r3, [r7, #15]

    while (len--)
 80009a4:	e00a      	b.n	80009bc <Crc8+0x28>
        crc = Crc8Table[crc ^ *pcBlock++];
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	4053      	eors	r3, r2
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <Crc8+0x40>)
 80009b8:	5c9b      	ldrb	r3, [r3, r2]
 80009ba:	73fb      	strb	r3, [r7, #15]
    while (len--)
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	1e5a      	subs	r2, r3, #1
 80009c0:	70fa      	strb	r2, [r7, #3]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1ef      	bne.n	80009a6 <Crc8+0x12>

    return crc;
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	08004850 	.word	0x08004850

080009d8 <CommandToRadio>:

// Функция передачи по радиоканалу
void CommandToRadio(uint8_t command)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	// Вход в режим передачи
	WMSM42TXmode();
 80009e2:	f7ff ff07 	bl	80007f4 <WMSM42TXmode>
	// Обнуляем массив
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	e006      	b.n	80009fa <CommandToRadio+0x22>
	{
		TX_RX_Radio[i]=0;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <CommandToRadio+0x78>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	3301      	adds	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	2b29      	cmp	r3, #41	; 0x29
 80009fe:	d9f5      	bls.n	80009ec <CommandToRadio+0x14>
	}
	if(command==3)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d104      	bne.n	8000a10 <CommandToRadio+0x38>
	{
		// Заносим задержку в секундах
		TX_RX_Radio[1]=BuffRx[43];
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <CommandToRadio+0x7c>)
 8000a08:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <CommandToRadio+0x78>)
 8000a0e:	705a      	strb	r2, [r3, #1]
	}
    // Заносим команду
	TX_RX_Radio[CommIndex]=command;
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <CommandToRadio+0x78>)
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	7013      	strb	r3, [r2, #0]
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 8000a16:	2128      	movs	r1, #40	; 0x28
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <CommandToRadio+0x78>)
 8000a1a:	f7ff ff8f 	bl	800093c <Crc16>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <CommandToRadio+0x80>)
 8000a24:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <CommandToRadio+0x80>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	0a1b      	lsrs	r3, r3, #8
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <CommandToRadio+0x78>)
 8000a32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <CommandToRadio+0x80>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <CommandToRadio+0x78>)
 8000a3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    // Отправка посылки
	WMSM42TXsend(TX_RX_Radio);
 8000a42:	4803      	ldr	r0, [pc, #12]	; (8000a50 <CommandToRadio+0x78>)
 8000a44:	f7ff ff42 	bl	80008cc <WMSM42TXsend>
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000258 	.word	0x20000258
 8000a54:	20000394 	.word	0x20000394
 8000a58:	20000112 	.word	0x20000112

08000a5c <Command_to_Linux>:
// Отправка команды на Linux
void Command_to_Linux(uint8_t cmd)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]
 8000a6a:	e006      	b.n	8000a7a <Command_to_Linux+0x1e>
		BuffTx[i]=0;
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <Command_to_Linux+0x8c>)
 8000a70:	2100      	movs	r1, #0
 8000a72:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	3301      	adds	r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	2b2c      	cmp	r3, #44	; 0x2c
 8000a7e:	d9f5      	bls.n	8000a6c <Command_to_Linux+0x10>
	for(uint8_t i=0;i<MaxBuffOfCKT-6;i++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	73bb      	strb	r3, [r7, #14]
 8000a84:	e00a      	b.n	8000a9c <Command_to_Linux+0x40>
		BuffTx[i+4]=TX_RX_Radio[i+1];
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	7bbb      	ldrb	r3, [r7, #14]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	4917      	ldr	r1, [pc, #92]	; (8000aec <Command_to_Linux+0x90>)
 8000a90:	5c89      	ldrb	r1, [r1, r2]
 8000a92:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <Command_to_Linux+0x8c>)
 8000a94:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<MaxBuffOfCKT-6;i++)
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	73bb      	strb	r3, [r7, #14]
 8000a9c:	7bbb      	ldrb	r3, [r7, #14]
 8000a9e:	2b26      	cmp	r3, #38	; 0x26
 8000aa0:	d9f1      	bls.n	8000a86 <Command_to_Linux+0x2a>
	BuffTx[0]=0x7C;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <Command_to_Linux+0x8c>)
 8000aa4:	227c      	movs	r2, #124	; 0x7c
 8000aa6:	701a      	strb	r2, [r3, #0]
	BuffTx[1]=0x6E;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <Command_to_Linux+0x8c>)
 8000aaa:	226e      	movs	r2, #110	; 0x6e
 8000aac:	705a      	strb	r2, [r3, #1]
	BuffTx[2]=0xA1;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <Command_to_Linux+0x8c>)
 8000ab0:	22a1      	movs	r2, #161	; 0xa1
 8000ab2:	709a      	strb	r2, [r3, #2]
	BuffTx[3]=0x2C;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <Command_to_Linux+0x8c>)
 8000ab6:	222c      	movs	r2, #44	; 0x2c
 8000ab8:	70da      	strb	r2, [r3, #3]
	BuffTx[42]=cmd;
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <Command_to_Linux+0x8c>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	BuffTx[44]=Crc8(BuffTx,MaxBuffOfCKT-1);
 8000ac2:	212c      	movs	r1, #44	; 0x2c
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <Command_to_Linux+0x8c>)
 8000ac6:	f7ff ff65 	bl	8000994 <Crc8>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <Command_to_Linux+0x8c>)
 8000ad0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, BuffTx, MaxBuffOfCKT,100);
 8000ad4:	2364      	movs	r3, #100	; 0x64
 8000ad6:	222d      	movs	r2, #45	; 0x2d
 8000ad8:	4903      	ldr	r1, [pc, #12]	; (8000ae8 <Command_to_Linux+0x8c>)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <Command_to_Linux+0x94>)
 8000adc:	f002 fe13 	bl	8003706 <HAL_UART_Transmit>
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200002e4 	.word	0x200002e4
 8000aec:	20000258 	.word	0x20000258
 8000af0:	200003c4 	.word	0x200003c4

08000af4 <Command4_send>:
// Отправка 4 команды по радио
void Command4_send(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	if(Com4Active==1) // Если разрешена 4 команда
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <Command4_send+0x44>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d118      	bne.n	8000b32 <Command4_send+0x3e>
	{
		// Посылка принята успешно, отправляем запрос на данные, если нет команд с Linux
		if(Readflag!=1)
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <Command4_send+0x48>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d011      	beq.n	8000b2c <Command4_send+0x38>
		{
			LedMode=1; // Режим мигания - посылка передается
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <Command4_send+0x4c>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
			CommandToRadio(4);
 8000b0e:	2004      	movs	r0, #4
 8000b10:	f7ff ff62 	bl	80009d8 <CommandToRadio>
			// Ожидаем команду
			WMSM42RXmode();
 8000b14:	f7ff fe9c 	bl	8000850 <WMSM42RXmode>
			// Запуск таймера для отслеживания таймаута
			Delay_start=1;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <Command4_send+0x50>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <Command4_send+0x54>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
			AccessRadio=1;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <Command4_send+0x58>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
		} else AccessRadio=0;
	}
}
 8000b2a:	e002      	b.n	8000b32 <Command4_send+0x3e>
		} else AccessRadio=0;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <Command4_send+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000011a 	.word	0x2000011a
 8000b3c:	20000118 	.word	0x20000118
 8000b40:	2000011b 	.word	0x2000011b
 8000b44:	2000012c 	.word	0x2000012c
 8000b48:	20000128 	.word	0x20000128
 8000b4c:	20000124 	.word	0x20000124

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f000 fe84 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 fa58 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f000 fb88 	bl	8001270 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b60:	f000 fb50 	bl	8001204 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b64:	f000 fafa 	bl	800115c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000b68:	f000 fb22 	bl	80011b0 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8000b6c:	f000 fac0 	bl	80010f0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // Индикация включения УСИ ПРД
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2102      	movs	r1, #2
 8000b74:	48c0      	ldr	r0, [pc, #768]	; (8000e78 <main+0x328>)
 8000b76:	f001 fd31 	bl	80025dc <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000b7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b7e:	f000 fee1 	bl	8001944 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2104      	movs	r1, #4
 8000b86:	48bc      	ldr	r0, [pc, #752]	; (8000e78 <main+0x328>)
 8000b88:	f001 fd28 	bl	80025dc <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000b8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b90:	f000 fed8 	bl	8001944 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2108      	movs	r1, #8
 8000b98:	48b7      	ldr	r0, [pc, #732]	; (8000e78 <main+0x328>)
 8000b9a:	f001 fd1f 	bl	80025dc <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000b9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ba2:	f000 fecf 	bl	8001944 <HAL_Delay>
  // Инициализация wm-sm-42
  WMSM42Init();
 8000ba6:	f7ff fd9d 	bl	80006e4 <WMSM42Init>
  // Запуск приема команд с Linux
  HAL_UART_Receive_IT(&huart2, &data, 1);
 8000baa:	2201      	movs	r2, #1
 8000bac:	49b3      	ldr	r1, [pc, #716]	; (8000e7c <main+0x32c>)
 8000bae:	48b4      	ldr	r0, [pc, #720]	; (8000e80 <main+0x330>)
 8000bb0:	f002 fe42 	bl	8003838 <HAL_UART_Receive_IT>
  // Запуск таймера для работы светодиода
  HAL_TIM_Base_Start_IT(&htim6);
 8000bb4:	48b3      	ldr	r0, [pc, #716]	; (8000e84 <main+0x334>)
 8000bb6:	f002 fad4 	bl	8003162 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		// Фильтрация помех 1 разъема
		if((HAL_GetTick()-reciveTime >200) && ReadRdy) // Если пришел 1 байт и в течении секунды больше ничего не пришло, считаем, что мы поймали помеху
 8000bba:	f000 feb7 	bl	800192c <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	4bb1      	ldr	r3, [pc, #708]	; (8000e88 <main+0x338>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2bc8      	cmp	r3, #200	; 0xc8
 8000bc8:	d911      	bls.n	8000bee <main+0x9e>
 8000bca:	4bb0      	ldr	r3, [pc, #704]	; (8000e8c <main+0x33c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d00d      	beq.n	8000bee <main+0x9e>
		{
			ReadRdy=0;
 8000bd2:	4bae      	ldr	r3, [pc, #696]	; (8000e8c <main+0x33c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Abort(&huart2);
 8000bd8:	48a9      	ldr	r0, [pc, #676]	; (8000e80 <main+0x330>)
 8000bda:	f002 fe82 	bl	80038e2 <HAL_UART_Abort>
			HAL_UART_Receive_IT(&huart2, &data, 1);
 8000bde:	2201      	movs	r2, #1
 8000be0:	49a6      	ldr	r1, [pc, #664]	; (8000e7c <main+0x32c>)
 8000be2:	48a7      	ldr	r0, [pc, #668]	; (8000e80 <main+0x330>)
 8000be4:	f002 fe28 	bl	8003838 <HAL_UART_Receive_IT>
			countRx=0;
 8000be8:	4ba9      	ldr	r3, [pc, #676]	; (8000e90 <main+0x340>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
		}
		// Пришла какая-то посылка по linux
		if(Readflag==1 && AccessRadio==0)
 8000bee:	4ba9      	ldr	r3, [pc, #676]	; (8000e94 <main+0x344>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	f040 80ad 	bne.w	8000d52 <main+0x202>
 8000bf8:	4ba7      	ldr	r3, [pc, #668]	; (8000e98 <main+0x348>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f040 80a8 	bne.w	8000d52 <main+0x202>
		{
			Readflag=0;
 8000c02:	4ba4      	ldr	r3, [pc, #656]	; (8000e94 <main+0x344>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	489a      	ldr	r0, [pc, #616]	; (8000e78 <main+0x328>)
 8000c0e:	f001 fce5 	bl	80025dc <HAL_GPIO_WritePin>

			CRC_8c=BuffRx[MaxBuffOfCKT-1];
 8000c12:	4ba2      	ldr	r3, [pc, #648]	; (8000e9c <main+0x34c>)
 8000c14:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8000c18:	4ba1      	ldr	r3, [pc, #644]	; (8000ea0 <main+0x350>)
 8000c1a:	701a      	strb	r2, [r3, #0]
			if(CRC_8c==Crc8(BuffRx,MaxBuffOfCKT-1)) // если CRC совпало
 8000c1c:	212c      	movs	r1, #44	; 0x2c
 8000c1e:	489f      	ldr	r0, [pc, #636]	; (8000e9c <main+0x34c>)
 8000c20:	f7ff feb8 	bl	8000994 <Crc8>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b9d      	ldr	r3, [pc, #628]	; (8000ea0 <main+0x350>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d170      	bne.n	8000d12 <main+0x1c2>
			{
				switch(BuffRx[CommIndexLinux])
 8000c30:	4b9a      	ldr	r3, [pc, #616]	; (8000e9c <main+0x34c>)
 8000c32:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000c36:	3b01      	subs	r3, #1
 8000c38:	2b05      	cmp	r3, #5
 8000c3a:	d87f      	bhi.n	8000d3c <main+0x1ec>
 8000c3c:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <main+0xf4>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c5d 	.word	0x08000c5d
 8000c48:	08000c81 	.word	0x08000c81
 8000c4c:	08000ca5 	.word	0x08000ca5
 8000c50:	08000d3d 	.word	0x08000d3d
 8000c54:	08000cc9 	.word	0x08000cc9
 8000c58:	08000ced 	.word	0x08000ced
				{
					case 1:
					LedMode=1; // Режим мигания - посылка передается
 8000c5c:	4b91      	ldr	r3, [pc, #580]	; (8000ea4 <main+0x354>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
					CommandToRadio(1);  // Команда начала записи: Создаем новый файл и начинаем прием данных
 8000c62:	2001      	movs	r0, #1
 8000c64:	f7ff feb8 	bl	80009d8 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000c68:	f7ff fdf2 	bl	8000850 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000c6c:	4b8e      	ldr	r3, [pc, #568]	; (8000ea8 <main+0x358>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000c72:	4b8e      	ldr	r3, [pc, #568]	; (8000eac <main+0x35c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000c78:	4b87      	ldr	r3, [pc, #540]	; (8000e98 <main+0x348>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
					break;
 8000c7e:	e05d      	b.n	8000d3c <main+0x1ec>
					case 2:
					LedMode=1; // Режим мигания - посылка передается
 8000c80:	4b88      	ldr	r3, [pc, #544]	; (8000ea4 <main+0x354>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
					CommandToRadio(2); // Команда открытия клапана
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff fea6 	bl	80009d8 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000c8c:	f7ff fde0 	bl	8000850 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000c90:	4b85      	ldr	r3, [pc, #532]	; (8000ea8 <main+0x358>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000c96:	4b85      	ldr	r3, [pc, #532]	; (8000eac <main+0x35c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000c9c:	4b7e      	ldr	r3, [pc, #504]	; (8000e98 <main+0x348>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
					break;
 8000ca2:	e04b      	b.n	8000d3c <main+0x1ec>
					case 3:
					LedMode=1; // Режим мигания - посылка передается
 8000ca4:	4b7f      	ldr	r3, [pc, #508]	; (8000ea4 <main+0x354>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
					CommandToRadio(3); // Команда запуска двигателя
 8000caa:	2003      	movs	r0, #3
 8000cac:	f7ff fe94 	bl	80009d8 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000cb0:	f7ff fdce 	bl	8000850 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000cb4:	4b7c      	ldr	r3, [pc, #496]	; (8000ea8 <main+0x358>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000cba:	4b7c      	ldr	r3, [pc, #496]	; (8000eac <main+0x35c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000cc0:	4b75      	ldr	r3, [pc, #468]	; (8000e98 <main+0x348>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
					break;
 8000cc6:	e039      	b.n	8000d3c <main+0x1ec>
					case 4:  // Внутренняя команда (запрос данных с ЦКТ)
					break;
					case 5:
					LedMode=1; // Режим мигания - посылка передается
 8000cc8:	4b76      	ldr	r3, [pc, #472]	; (8000ea4 <main+0x354>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
					CommandToRadio(5); // Команда закрытия файла на SD и запрет записи на SD
 8000cce:	2005      	movs	r0, #5
 8000cd0:	f7ff fe82 	bl	80009d8 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000cd4:	f7ff fdbc 	bl	8000850 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000cd8:	4b73      	ldr	r3, [pc, #460]	; (8000ea8 <main+0x358>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000cde:	4b73      	ldr	r3, [pc, #460]	; (8000eac <main+0x35c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000ce4:	4b6c      	ldr	r3, [pc, #432]	; (8000e98 <main+0x348>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
					break;
 8000cea:	e027      	b.n	8000d3c <main+0x1ec>
					case 6:
					LedMode=1; // Режим мигания - посылка передается
 8000cec:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <main+0x354>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
					CommandToRadio(6); // Команда закрытия клапана
 8000cf2:	2006      	movs	r0, #6
 8000cf4:	f7ff fe70 	bl	80009d8 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000cf8:	f7ff fdaa 	bl	8000850 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000cfc:	4b6a      	ldr	r3, [pc, #424]	; (8000ea8 <main+0x358>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000d02:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <main+0x35c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000d08:	4b63      	ldr	r3, [pc, #396]	; (8000e98 <main+0x348>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
					break;
 8000d0e:	bf00      	nop
 8000d10:	e014      	b.n	8000d3c <main+0x1ec>
				}
			} else // Если CRC8 не совпало продолжаем отправлять 4 команду, если она отправлялась до этого
			{
				if(Com4Active==1) // Если мы попадаем сюда во время приема данных
 8000d12:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <main+0x360>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d110      	bne.n	8000d3c <main+0x1ec>
				{
					LedMode=1; // Режим мигания - посылка передается
 8000d1a:	4b62      	ldr	r3, [pc, #392]	; (8000ea4 <main+0x354>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
					CommandToRadio(4);
 8000d20:	2004      	movs	r0, #4
 8000d22:	f7ff fe59 	bl	80009d8 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000d26:	f7ff fd93 	bl	8000850 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000d2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ea8 <main+0x358>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000d30:	4b5e      	ldr	r3, [pc, #376]	; (8000eac <main+0x35c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000d36:	4b58      	ldr	r3, [pc, #352]	; (8000e98 <main+0x348>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
				}
			}
			// Продолжаем ожидать посылку с Linux
			countRx=0;
 8000d3c:	4b54      	ldr	r3, [pc, #336]	; (8000e90 <main+0x340>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
			HAL_UART_Abort(&huart2);
 8000d42:	484f      	ldr	r0, [pc, #316]	; (8000e80 <main+0x330>)
 8000d44:	f002 fdcd 	bl	80038e2 <HAL_UART_Abort>
			HAL_UART_Receive_IT(&huart2, &data, 1);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	494c      	ldr	r1, [pc, #304]	; (8000e7c <main+0x32c>)
 8000d4c:	484c      	ldr	r0, [pc, #304]	; (8000e80 <main+0x330>)
 8000d4e:	f002 fd73 	bl	8003838 <HAL_UART_Receive_IT>
		}

		// Прерывание по приему по радиоканалу
		if(ReadflagWm==1)
 8000d52:	4b58      	ldr	r3, [pc, #352]	; (8000eb4 <main+0x364>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	f040 810e 	bne.w	8000f78 <main+0x428>
		{
			ReadflagWm=0;
 8000d5c:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <main+0x364>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
			//Раскрываем посылку
			WMSM42GetPacket(Buff_rx);
 8000d62:	4855      	ldr	r0, [pc, #340]	; (8000eb8 <main+0x368>)
 8000d64:	f7ff fdd8 	bl	8000918 <WMSM42GetPacket>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 8000d68:	4b54      	ldr	r3, [pc, #336]	; (8000ebc <main+0x36c>)
 8000d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <main+0x36c>)
 8000d76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <main+0x370>)
 8000d82:	801a      	strh	r2, [r3, #0]
			//Разрешаем прием по Usartу
			UsartRXflagbusy=0;
 8000d84:	4b4f      	ldr	r3, [pc, #316]	; (8000ec4 <main+0x374>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]

			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2)) // Если CRC16 совпало
 8000d8a:	2128      	movs	r1, #40	; 0x28
 8000d8c:	484b      	ldr	r0, [pc, #300]	; (8000ebc <main+0x36c>)
 8000d8e:	f7ff fdd5 	bl	800093c <Crc16>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b4a      	ldr	r3, [pc, #296]	; (8000ec0 <main+0x370>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	f040 80ec 	bne.w	8000f78 <main+0x428>
			{
				// Останавливаем таймер
				Delay_start=0;
 8000da0:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <main+0x358>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
				Ms_Delay=0;
 8000da6:	4b41      	ldr	r3, [pc, #260]	; (8000eac <main+0x35c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
				switch(TX_RX_Radio[CommIndex])
 8000dac:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <main+0x36c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	2b05      	cmp	r3, #5
 8000db4:	f200 80e0 	bhi.w	8000f78 <main+0x428>
 8000db8:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <main+0x270>)
 8000dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbe:	bf00      	nop
 8000dc0:	08000dd9 	.word	0x08000dd9
 8000dc4:	08000e2d 	.word	0x08000e2d
 8000dc8:	08000e53 	.word	0x08000e53
 8000dcc:	08000ec9 	.word	0x08000ec9
 8000dd0:	08000f25 	.word	0x08000f25
 8000dd4:	08000f53 	.word	0x08000f53
				{
					case 1:   // Команда начала записи: Создаем файл
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <main+0x354>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2102      	movs	r1, #2
 8000de2:	4825      	ldr	r0, [pc, #148]	; (8000e78 <main+0x328>)
 8000de4:	f001 fbfa 	bl	80025dc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2104      	movs	r1, #4
 8000dec:	4822      	ldr	r0, [pc, #136]	; (8000e78 <main+0x328>)
 8000dee:	f001 fbf5 	bl	80025dc <HAL_GPIO_WritePin>
					// Посылка принята успешно, отправляем запрос на данные, если нет команд с Linux
					if(Readflag!=1)
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <main+0x344>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d014      	beq.n	8000e24 <main+0x2d4>
					{
					LedMode=1; // Режим мигания - посылка передается
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <main+0x354>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
					Com4Active=1; // 4 команда будет посылаться всегда
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <main+0x360>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
					CommandToRadio(4);
 8000e06:	2004      	movs	r0, #4
 8000e08:	f7ff fde6 	bl	80009d8 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000e0c:	f7ff fd20 	bl	8000850 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000e10:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <main+0x358>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <main+0x35c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
					AccessRadio=1;
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <main+0x348>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
					} else AccessRadio=0;
					break;
 8000e22:	e0a9      	b.n	8000f78 <main+0x428>
					} else AccessRadio=0;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <main+0x348>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
					break;
 8000e2a:	e0a5      	b.n	8000f78 <main+0x428>
					case 2:   // Команда открытия клапана
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <main+0x354>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2102      	movs	r1, #2
 8000e36:	4810      	ldr	r0, [pc, #64]	; (8000e78 <main+0x328>)
 8000e38:	f001 fbd0 	bl	80025dc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2104      	movs	r1, #4
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <main+0x328>)
 8000e42:	f001 fbcb 	bl	80025dc <HAL_GPIO_WritePin>
					Command_to_Linux(2);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f7ff fe08 	bl	8000a5c <Command_to_Linux>
					Command4_send();
 8000e4c:	f7ff fe52 	bl	8000af4 <Command4_send>
					break;
 8000e50:	e092      	b.n	8000f78 <main+0x428>
					case 3:   // Команда запуска двигателя
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <main+0x354>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <main+0x328>)
 8000e5e:	f001 fbbd 	bl	80025dc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2104      	movs	r1, #4
 8000e66:	4804      	ldr	r0, [pc, #16]	; (8000e78 <main+0x328>)
 8000e68:	f001 fbb8 	bl	80025dc <HAL_GPIO_WritePin>
					Command_to_Linux(3);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f7ff fdf5 	bl	8000a5c <Command_to_Linux>
					Command4_send();
 8000e72:	f7ff fe3f 	bl	8000af4 <Command4_send>
					break;
 8000e76:	e07f      	b.n	8000f78 <main+0x428>
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	20000116 	.word	0x20000116
 8000e80:	200003c4 	.word	0x200003c4
 8000e84:	20000314 	.word	0x20000314
 8000e88:	20000120 	.word	0x20000120
 8000e8c:	2000011c 	.word	0x2000011c
 8000e90:	20000114 	.word	0x20000114
 8000e94:	20000118 	.word	0x20000118
 8000e98:	20000124 	.word	0x20000124
 8000e9c:	20000394 	.word	0x20000394
 8000ea0:	20000110 	.word	0x20000110
 8000ea4:	2000011b 	.word	0x2000011b
 8000ea8:	2000012c 	.word	0x2000012c
 8000eac:	20000128 	.word	0x20000128
 8000eb0:	2000011a 	.word	0x2000011a
 8000eb4:	20000119 	.word	0x20000119
 8000eb8:	20000130 	.word	0x20000130
 8000ebc:	20000258 	.word	0x20000258
 8000ec0:	20000112 	.word	0x20000112
 8000ec4:	2000012d 	.word	0x2000012d
					case 4:   // Команда запроса данных с ЦКТ
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000ec8:	4b48      	ldr	r3, [pc, #288]	; (8000fec <main+0x49c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4847      	ldr	r0, [pc, #284]	; (8000ff0 <main+0x4a0>)
 8000ed4:	f001 fb82 	bl	80025dc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2104      	movs	r1, #4
 8000edc:	4844      	ldr	r0, [pc, #272]	; (8000ff0 <main+0x4a0>)
 8000ede:	f001 fb7d 	bl	80025dc <HAL_GPIO_WritePin>
					// Пересылаем принятый пакет на linux
					Command_to_Linux(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff fdba 	bl	8000a5c <Command_to_Linux>
					// Посылка принята успешно, отправляем запрос на данные
					if(Com4Active==1 && Readflag!=1  ) // Если нет запрета на 4 команду, то отправляем ее
 8000ee8:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <main+0x4a4>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d115      	bne.n	8000f1c <main+0x3cc>
 8000ef0:	4b41      	ldr	r3, [pc, #260]	; (8000ff8 <main+0x4a8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d011      	beq.n	8000f1c <main+0x3cc>
					{
					LedMode=1; // Режим мигания - посылка передается
 8000ef8:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <main+0x49c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
					CommandToRadio(4);
 8000efe:	2004      	movs	r0, #4
 8000f00:	f7ff fd6a 	bl	80009d8 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000f04:	f7ff fca4 	bl	8000850 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000f08:	4b3c      	ldr	r3, [pc, #240]	; (8000ffc <main+0x4ac>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000f0e:	4b3c      	ldr	r3, [pc, #240]	; (8001000 <main+0x4b0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
					AccessRadio=1;
 8000f14:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <main+0x4b4>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
					} else AccessRadio=0;
					// радиоканал не занят
					break;
 8000f1a:	e02d      	b.n	8000f78 <main+0x428>
					} else AccessRadio=0;
 8000f1c:	4b39      	ldr	r3, [pc, #228]	; (8001004 <main+0x4b4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
					break;
 8000f22:	e029      	b.n	8000f78 <main+0x428>
					case 5:   // Команда закрытия файла на SD и запрет записи на SD
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000f24:	4b31      	ldr	r3, [pc, #196]	; (8000fec <main+0x49c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	4830      	ldr	r0, [pc, #192]	; (8000ff0 <main+0x4a0>)
 8000f30:	f001 fb54 	bl	80025dc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2104      	movs	r1, #4
 8000f38:	482d      	ldr	r0, [pc, #180]	; (8000ff0 <main+0x4a0>)
 8000f3a:	f001 fb4f 	bl	80025dc <HAL_GPIO_WritePin>
					Com4Active=0; // запрещаем отправку 4 команды
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <main+0x4a4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
					Command_to_Linux(5);
 8000f44:	2005      	movs	r0, #5
 8000f46:	f7ff fd89 	bl	8000a5c <Command_to_Linux>
					// радиоканал не занят
					AccessRadio=0;
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <main+0x4b4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
					break;
 8000f50:	e012      	b.n	8000f78 <main+0x428>
					case 6:  // Команда закрытия клапана
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <main+0x49c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	4824      	ldr	r0, [pc, #144]	; (8000ff0 <main+0x4a0>)
 8000f5e:	f001 fb3d 	bl	80025dc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2104      	movs	r1, #4
 8000f66:	4822      	ldr	r0, [pc, #136]	; (8000ff0 <main+0x4a0>)
 8000f68:	f001 fb38 	bl	80025dc <HAL_GPIO_WritePin>
					Command_to_Linux(6);
 8000f6c:	2006      	movs	r0, #6
 8000f6e:	f7ff fd75 	bl	8000a5c <Command_to_Linux>
					Command4_send();
 8000f72:	f7ff fdbf 	bl	8000af4 <Command4_send>
					break;
 8000f76:	bf00      	nop
				}
			}
		}

	// Если радиосигнал не был принят (таймаут)
	if(RadioTimeoutRx==1)
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <main+0x4b8>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	f47f ae1c 	bne.w	8000bba <main+0x6a>
	{
		// Останавливаем таймер
		Delay_start=0;
 8000f82:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <main+0x4ac>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
		Ms_Delay=0;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <main+0x4b0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
		RadioTimeoutRx=0;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <main+0x4b8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
		LedMode=0; // посылка пропущена (тушим светодиод)
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <main+0x49c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4814      	ldr	r0, [pc, #80]	; (8000ff0 <main+0x4a0>)
 8000fa0:	f001 fb1c 	bl	80025dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <main+0x4a0>)
 8000faa:	f001 fb17 	bl	80025dc <HAL_GPIO_WritePin>

		// Отправляем еще один запрос на данные, иначе просто ожидаем команд с linux
		if(Com4Active==1 && Readflag!= 1)
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <main+0x4a4>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d115      	bne.n	8000fe2 <main+0x492>
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <main+0x4a8>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d011      	beq.n	8000fe2 <main+0x492>
		{
			LedMode=1; // Режим мигания - посылка передается
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <main+0x49c>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
			CommandToRadio(4); // Команда запроса данных
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f7ff fd07 	bl	80009d8 <CommandToRadio>
			// Ожидаем команду
			WMSM42RXmode();
 8000fca:	f7ff fc41 	bl	8000850 <WMSM42RXmode>
			// Запуск таймера для отслеживания таймаута
			Delay_start=1;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <main+0x4ac>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <main+0x4b0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
			AccessRadio=1 ;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <main+0x4b4>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e002      	b.n	8000fe8 <main+0x498>
		} else   AccessRadio=0;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <main+0x4b4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
		if((HAL_GetTick()-reciveTime >200) && ReadRdy) // Если пришел 1 байт и в течении секунды больше ничего не пришло, считаем, что мы поймали помеху
 8000fe8:	e5e7      	b.n	8000bba <main+0x6a>
 8000fea:	bf00      	nop
 8000fec:	2000011b 	.word	0x2000011b
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	2000011a 	.word	0x2000011a
 8000ff8:	20000118 	.word	0x20000118
 8000ffc:	2000012c 	.word	0x2000012c
 8001000:	20000128 	.word	0x20000128
 8001004:	20000124 	.word	0x20000124
 8001008:	20000125 	.word	0x20000125

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b094      	sub	sp, #80	; 0x50
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	2234      	movs	r2, #52	; 0x34
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fb04 	bl	8004628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <SystemClock_Config+0xdc>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a2b      	ldr	r2, [pc, #172]	; (80010e8 <SystemClock_Config+0xdc>)
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <SystemClock_Config+0xdc>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <SystemClock_Config+0xe0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a25      	ldr	r2, [pc, #148]	; (80010ec <SystemClock_Config+0xe0>)
 8001056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <SystemClock_Config+0xe0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001068:	2301      	movs	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001070:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800107c:	2304      	movs	r3, #4
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001080:	23b4      	movs	r3, #180	; 0xb4
 8001082:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001084:	2302      	movs	r3, #2
 8001086:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108c:	2302      	movs	r3, #2
 800108e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fddf 	bl	8002c58 <HAL_RCC_OscConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010a0:	f000 f9fa 	bl	8001498 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010a4:	f001 face 	bl	8002644 <HAL_PWREx_EnableOverDrive>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010ae:	f000 f9f3 	bl	8001498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	230f      	movs	r3, #15
 80010b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b6:	2302      	movs	r3, #2
 80010b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	2105      	movs	r1, #5
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fb07 	bl	80026e4 <HAL_RCC_ClockConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010dc:	f000 f9dc 	bl	8001498 <Error_Handler>
  }
}
 80010e0:	bf00      	nop
 80010e2:	3750      	adds	r7, #80	; 0x50
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_TIM6_Init+0x64>)
 8001100:	4a15      	ldr	r2, [pc, #84]	; (8001158 <MX_TIM6_Init+0x68>)
 8001102:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_TIM6_Init+0x64>)
 8001106:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800110a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_TIM6_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2500;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <MX_TIM6_Init+0x64>)
 8001114:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001118:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_TIM6_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <MX_TIM6_Init+0x64>)
 8001122:	f001 fff3 	bl	800310c <HAL_TIM_Base_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800112c:	f000 f9b4 	bl	8001498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_TIM6_Init+0x64>)
 800113e:	f002 fa05 	bl	800354c <HAL_TIMEx_MasterConfigSynchronization>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001148:	f000 f9a6 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000314 	.word	0x20000314
 8001158:	40001000 	.word	0x40001000

0800115c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_USART2_UART_Init+0x50>)
 8001164:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001168:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800116c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_USART2_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_USART2_UART_Init+0x4c>)
 8001194:	f002 fa6a 	bl	800366c <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800119e:	f000 f97b 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200003c4 	.word	0x200003c4
 80011ac:	40004400 	.word	0x40004400

080011b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_USART6_UART_Init+0x4c>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <MX_USART6_UART_Init+0x50>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_USART6_UART_Init+0x4c>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_USART6_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_USART6_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_USART6_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_USART6_UART_Init+0x4c>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_USART6_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_USART6_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_USART6_UART_Init+0x4c>)
 80011e8:	f002 fa40 	bl	800366c <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011f2:	f000 f951 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000354 	.word	0x20000354
 8001200:	40011400 	.word	0x40011400

08001204 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_DMA_Init+0x68>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <MX_DMA_Init+0x68>)
 8001214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_DMA_Init+0x68>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_DMA_Init+0x68>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a0f      	ldr	r2, [pc, #60]	; (800126c <MX_DMA_Init+0x68>)
 8001230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_DMA_Init+0x68>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2011      	movs	r0, #17
 8001248:	f000 fc79 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800124c:	2011      	movs	r0, #17
 800124e:	f000 fc92 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2039      	movs	r0, #57	; 0x39
 8001258:	f000 fc71 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800125c:	2039      	movs	r0, #57	; 0x39
 800125e:	f000 fc8a 	bl	8001b76 <HAL_NVIC_EnableIRQ>

}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <MX_GPIO_Init+0xb4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a25      	ldr	r2, [pc, #148]	; (8001324 <MX_GPIO_Init+0xb4>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b23      	ldr	r3, [pc, #140]	; (8001324 <MX_GPIO_Init+0xb4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_GPIO_Init+0xb4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <MX_GPIO_Init+0xb4>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_GPIO_Init+0xb4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_GPIO_Init+0xb4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <MX_GPIO_Init+0xb4>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_GPIO_Init+0xb4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	210e      	movs	r1, #14
 80012de:	4812      	ldr	r0, [pc, #72]	; (8001328 <MX_GPIO_Init+0xb8>)
 80012e0:	f001 f97c 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <MX_GPIO_Init+0xbc>)
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	4619      	mov	r1, r3
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <MX_GPIO_Init+0xb8>)
 80012fa:	f000 ffdd 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80012fe:	230e      	movs	r3, #14
 8001300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4619      	mov	r1, r3
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_GPIO_Init+0xb8>)
 8001316:	f000 ffcf 	bl	80022b8 <HAL_GPIO_Init>

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40020800 	.word	0x40020800
 800132c:	10210000 	.word	0x10210000

08001330 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	if(huart==&huart6)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a29      	ldr	r2, [pc, #164]	; (80013e0 <HAL_UART_RxCpltCallback+0xb0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d11c      	bne.n	800137a <HAL_UART_RxCpltCallback+0x4a>
	{
		   Buff_rx[countWm]=dataWm;
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <HAL_UART_RxCpltCallback+0xb4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <HAL_UART_RxCpltCallback+0xb8>)
 8001348:	7819      	ldrb	r1, [r3, #0]
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <HAL_UART_RxCpltCallback+0xbc>)
 800134c:	5499      	strb	r1, [r3, r2]
		  if(Buff_rx[countWm]=='\r')
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <HAL_UART_RxCpltCallback+0xb4>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <HAL_UART_RxCpltCallback+0xbc>)
 8001356:	5c9b      	ldrb	r3, [r3, r2]
 8001358:	2b0d      	cmp	r3, #13
 800135a:	d103      	bne.n	8001364 <HAL_UART_RxCpltCallback+0x34>
		  {
			ReadflagWm=1;
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <HAL_UART_RxCpltCallback+0xc0>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	e005      	b.n	8001370 <HAL_UART_RxCpltCallback+0x40>
		  }
		  else
		  {
			  countWm++;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_UART_RxCpltCallback+0xb4>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_UART_RxCpltCallback+0xb4>)
 800136e:	701a      	strb	r2, [r3, #0]
		  }
		  HAL_UART_Receive_IT(&huart6, &dataWm, 1);
 8001370:	2201      	movs	r2, #1
 8001372:	491d      	ldr	r1, [pc, #116]	; (80013e8 <HAL_UART_RxCpltCallback+0xb8>)
 8001374:	481a      	ldr	r0, [pc, #104]	; (80013e0 <HAL_UART_RxCpltCallback+0xb0>)
 8001376:	f002 fa5f 	bl	8003838 <HAL_UART_Receive_IT>
	}

	if(huart == &huart2)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_UART_RxCpltCallback+0xc4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d129      	bne.n	80013d6 <HAL_UART_RxCpltCallback+0xa6>
	{
		ReadRdy=1;
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <HAL_UART_RxCpltCallback+0xc8>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
		reciveTime=HAL_GetTick();
 8001388:	f000 fad0 	bl	800192c <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_UART_RxCpltCallback+0xcc>)
 8001390:	601a      	str	r2, [r3, #0]

			// Заносим пришедший байт в массив
			BuffRx[countRx]=data;
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_UART_RxCpltCallback+0xd0>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_UART_RxCpltCallback+0xd4>)
 800139a:	7819      	ldrb	r1, [r3, #0]
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_UART_RxCpltCallback+0xd8>)
 800139e:	5499      	strb	r1, [r3, r2]
			if(countRx==MaxBuffOfCKT-1)
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_UART_RxCpltCallback+0xd0>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b2c      	cmp	r3, #44	; 0x2c
 80013a6:	d10b      	bne.n	80013c0 <HAL_UART_RxCpltCallback+0x90>
			{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2108      	movs	r1, #8
 80013ac:	4817      	ldr	r0, [pc, #92]	; (800140c <HAL_UART_RxCpltCallback+0xdc>)
 80013ae:	f001 f915 	bl	80025dc <HAL_GPIO_WritePin>
			  // Устанавливаем флаг того, что посылка принята
			  Readflag=1;
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_UART_RxCpltCallback+0xe0>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
			  UsartRXflagbusy=1;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_UART_RxCpltCallback+0xe4>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
 80013be:	e005      	b.n	80013cc <HAL_UART_RxCpltCallback+0x9c>
			}
			else
			{
			  countRx++;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_UART_RxCpltCallback+0xd0>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_UART_RxCpltCallback+0xd0>)
 80013ca:	701a      	strb	r2, [r3, #0]
			}

		HAL_UART_Receive_IT(&huart2, &data, 1);
 80013cc:	2201      	movs	r2, #1
 80013ce:	490d      	ldr	r1, [pc, #52]	; (8001404 <HAL_UART_RxCpltCallback+0xd4>)
 80013d0:	4808      	ldr	r0, [pc, #32]	; (80013f4 <HAL_UART_RxCpltCallback+0xc4>)
 80013d2:	f002 fa31 	bl	8003838 <HAL_UART_Receive_IT>
	}
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000354 	.word	0x20000354
 80013e4:	20000115 	.word	0x20000115
 80013e8:	20000117 	.word	0x20000117
 80013ec:	20000130 	.word	0x20000130
 80013f0:	20000119 	.word	0x20000119
 80013f4:	200003c4 	.word	0x200003c4
 80013f8:	2000011c 	.word	0x2000011c
 80013fc:	20000120 	.word	0x20000120
 8001400:	20000114 	.word	0x20000114
 8001404:	20000116 	.word	0x20000116
 8001408:	20000394 	.word	0x20000394
 800140c:	40020800 	.word	0x40020800
 8001410:	20000118 	.word	0x20000118
 8001414:	2000012d 	.word	0x2000012d

08001418 <HAL_TIM_PeriodElapsedCallback>:

// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(htim==&htim6)  // мигание светодиодов
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d107      	bne.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		if(LedMode==1) // 1 светодиод
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d103      	bne.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8001430:	2102      	movs	r1, #2
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001434:	f001 f8eb 	bl	800260e <HAL_GPIO_TogglePin>
		}
	}
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000314 	.word	0x20000314
 8001444:	2000011b 	.word	0x2000011b
 8001448:	40020800 	.word	0x40020800

0800144c <SysTick_Handler>:

// Прерывание по системному таймеру
void SysTick_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Delay_start==1)
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <SysTick_Handler+0x40>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d114      	bne.n	8001482 <SysTick_Handler+0x36>
	{
		if(Ms_Delay<5000)
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <SysTick_Handler+0x44>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001460:	4293      	cmp	r3, r2
 8001462:	d805      	bhi.n	8001470 <SysTick_Handler+0x24>
		{
			Ms_Delay++;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <SysTick_Handler+0x44>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	4a09      	ldr	r2, [pc, #36]	; (8001490 <SysTick_Handler+0x44>)
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e008      	b.n	8001482 <SysTick_Handler+0x36>
		}
		else
		{
			Delay_start=0;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SysTick_Handler+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <SysTick_Handler+0x44>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
			RadioTimeoutRx=1; // произошло прерывание
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SysTick_Handler+0x48>)
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001482:	f000 fa3f 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000012c 	.word	0x2000012c
 8001490:	20000128 	.word	0x20000128
 8001494:	20000125 	.word	0x20000125

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <HAL_MspInit+0x4c>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_MspInit+0x4c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_MspInit+0x4c>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014e6:	2007      	movs	r0, #7
 80014e8:	f000 fb1e 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_TIM_Base_MspInit+0x48>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d115      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_TIM_Base_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <HAL_TIM_Base_MspInit+0x4c>)
 8001514:	f043 0310 	orr.w	r3, r3, #16
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_TIM_Base_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2036      	movs	r0, #54	; 0x36
 800152c:	f000 fb07 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001530:	2036      	movs	r0, #54	; 0x36
 8001532:	f000 fb20 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40001000 	.word	0x40001000
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	; 0x30
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a68      	ldr	r2, [pc, #416]	; (8001708 <HAL_UART_MspInit+0x1c0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d162      	bne.n	8001630 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	4b67      	ldr	r3, [pc, #412]	; (800170c <HAL_UART_MspInit+0x1c4>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a66      	ldr	r2, [pc, #408]	; (800170c <HAL_UART_MspInit+0x1c4>)
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b64      	ldr	r3, [pc, #400]	; (800170c <HAL_UART_MspInit+0x1c4>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	4b60      	ldr	r3, [pc, #384]	; (800170c <HAL_UART_MspInit+0x1c4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a5f      	ldr	r2, [pc, #380]	; (800170c <HAL_UART_MspInit+0x1c4>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_UART_MspInit+0x1c4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015a2:	230c      	movs	r3, #12
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b2:	2307      	movs	r3, #7
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4854      	ldr	r0, [pc, #336]	; (8001710 <HAL_UART_MspInit+0x1c8>)
 80015be:	f000 fe7b 	bl	80022b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80015c2:	4b54      	ldr	r3, [pc, #336]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 80015c4:	4a54      	ldr	r2, [pc, #336]	; (8001718 <HAL_UART_MspInit+0x1d0>)
 80015c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80015c8:	4b52      	ldr	r3, [pc, #328]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 80015ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 80015d2:	2240      	movs	r2, #64	; 0x40
 80015d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d6:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015dc:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 80015de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e4:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015f0:	4b48      	ldr	r3, [pc, #288]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015fc:	4b45      	ldr	r3, [pc, #276]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001602:	4844      	ldr	r0, [pc, #272]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 8001604:	f000 fad2 	bl	8001bac <HAL_DMA_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800160e:	f7ff ff43 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
 8001618:	4a3e      	ldr	r2, [pc, #248]	; (8001714 <HAL_UART_MspInit+0x1cc>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2026      	movs	r0, #38	; 0x26
 8001624:	f000 fa8b 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001628:	2026      	movs	r0, #38	; 0x26
 800162a:	f000 faa4 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800162e:	e067      	b.n	8001700 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a39      	ldr	r2, [pc, #228]	; (800171c <HAL_UART_MspInit+0x1d4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d162      	bne.n	8001700 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_UART_MspInit+0x1c4>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a32      	ldr	r2, [pc, #200]	; (800170c <HAL_UART_MspInit+0x1c4>)
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <HAL_UART_MspInit+0x1c4>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <HAL_UART_MspInit+0x1c4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a2b      	ldr	r2, [pc, #172]	; (800170c <HAL_UART_MspInit+0x1c4>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_UART_MspInit+0x1c4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001672:	23c0      	movs	r3, #192	; 0xc0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001682:	2308      	movs	r3, #8
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	4824      	ldr	r0, [pc, #144]	; (8001720 <HAL_UART_MspInit+0x1d8>)
 800168e:	f000 fe13 	bl	80022b8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 8001694:	4a24      	ldr	r2, [pc, #144]	; (8001728 <HAL_UART_MspInit+0x1e0>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 800169a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800169e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a0:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 80016ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 80016c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80016d4:	4813      	ldr	r0, [pc, #76]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 80016d6:	f000 fa69 	bl	8001bac <HAL_DMA_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80016e0:	f7ff feda 	bl	8001498 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_UART_MspInit+0x1dc>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2047      	movs	r0, #71	; 0x47
 80016f6:	f000 fa22 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80016fa:	2047      	movs	r0, #71	; 0x47
 80016fc:	f000 fa3b 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	; 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40004400 	.word	0x40004400
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	20000284 	.word	0x20000284
 8001718:	400260a0 	.word	0x400260a0
 800171c:	40011400 	.word	0x40011400
 8001720:	40020800 	.word	0x40020800
 8001724:	200001f8 	.word	0x200001f8
 8001728:	40026428 	.word	0x40026428

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA1_Stream6_IRQHandler+0x10>)
 8001782:	f000 fb53 	bl	8001e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000284 	.word	0x20000284

08001790 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <USART2_IRQHandler+0x10>)
 8001796:	f002 f927 	bl	80039e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200003c4 	.word	0x200003c4

080017a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <TIM6_DAC_IRQHandler+0x10>)
 80017aa:	f001 fcfe 	bl	80031aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000314 	.word	0x20000314

080017b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <DMA2_Stream1_IRQHandler+0x10>)
 80017be:	f000 fb35 	bl	8001e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200001f8 	.word	0x200001f8

080017cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <USART6_IRQHandler+0x10>)
 80017d2:	f002 f909 	bl	80039e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000354 	.word	0x20000354

080017e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <SystemInit+0x28>)
 80017e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ea:	4a07      	ldr	r2, [pc, #28]	; (8001808 <SystemInit+0x28>)
 80017ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SystemInit+0x28>)
 80017f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017fa:	609a      	str	r2, [r3, #8]
#endif
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <Reset_Handler>:
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001844 <LoopFillZerobss+0x14>
 8001810:	2100      	movs	r1, #0
 8001812:	e003      	b.n	800181c <LoopCopyDataInit>

08001814 <CopyDataInit>:
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <LoopFillZerobss+0x18>)
 8001816:	585b      	ldr	r3, [r3, r1]
 8001818:	5043      	str	r3, [r0, r1]
 800181a:	3104      	adds	r1, #4

0800181c <LoopCopyDataInit>:
 800181c:	480b      	ldr	r0, [pc, #44]	; (800184c <LoopFillZerobss+0x1c>)
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <LoopFillZerobss+0x20>)
 8001820:	1842      	adds	r2, r0, r1
 8001822:	429a      	cmp	r2, r3
 8001824:	d3f6      	bcc.n	8001814 <CopyDataInit>
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <LoopFillZerobss+0x24>)
 8001828:	e002      	b.n	8001830 <LoopFillZerobss>

0800182a <FillZerobss>:
 800182a:	2300      	movs	r3, #0
 800182c:	f842 3b04 	str.w	r3, [r2], #4

08001830 <LoopFillZerobss>:
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <LoopFillZerobss+0x28>)
 8001832:	429a      	cmp	r2, r3
 8001834:	d3f9      	bcc.n	800182a <FillZerobss>
 8001836:	f7ff ffd3 	bl	80017e0 <SystemInit>
 800183a:	f002 fed1 	bl	80045e0 <__libc_init_array>
 800183e:	f7ff f987 	bl	8000b50 <main>
 8001842:	4770      	bx	lr
 8001844:	20020000 	.word	0x20020000
 8001848:	08004980 	.word	0x08004980
 800184c:	20000000 	.word	0x20000000
 8001850:	200000f4 	.word	0x200000f4
 8001854:	200000f4 	.word	0x200000f4
 8001858:	200004f0 	.word	0x200004f0

0800185c <ADC_IRQHandler>:
 800185c:	e7fe      	b.n	800185c <ADC_IRQHandler>
	...

08001860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_Init+0x40>)
 800186a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_Init+0x40>)
 8001876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_Init+0x40>)
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 f94d 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188e:	2000      	movs	r0, #0
 8001890:	f000 f808 	bl	80018a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001894:	f7ff fe08 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023c00 	.word	0x40023c00

080018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x54>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x58>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f965 	bl	8001b92 <HAL_SYSTICK_Config>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00e      	b.n	80018f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d80a      	bhi.n	80018ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d8:	2200      	movs	r2, #0
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e0:	f000 f92d 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_InitTick+0x5c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200000e8 	.word	0x200000e8
 80018fc:	200000f0 	.word	0x200000f0
 8001900:	200000ec 	.word	0x200000ec

08001904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x20>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x24>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_IncTick+0x24>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200000f0 	.word	0x200000f0
 8001928:	200004ec 	.word	0x200004ec

0800192c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_GetTick+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200004ec 	.word	0x200004ec

08001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff ffee 	bl	800192c <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800195c:	d005      	beq.n	800196a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_Delay+0x40>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196a:	bf00      	nop
 800196c:	f7ff ffde 	bl	800192c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	429a      	cmp	r2, r3
 800197a:	d8f7      	bhi.n	800196c <HAL_Delay+0x28>
  {
  }
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200000f0 	.word	0x200000f0

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff3e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff31 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff feb8 	bl	800192c <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e099      	b.n	8001cfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be8:	e00f      	b.n	8001c0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bea:	f7ff fe9f 	bl	800192c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b05      	cmp	r3, #5
 8001bf6:	d908      	bls.n	8001c0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2203      	movs	r2, #3
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e078      	b.n	8001cfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e8      	bne.n	8001bea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <HAL_DMA_Init+0x158>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d107      	bne.n	8001c74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f023 0307 	bic.w	r3, r3, #7
 8001c8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d117      	bne.n	8001cce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00e      	beq.n	8001cce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fa87 	bl	80021c4 <DMA_CheckFifoParam>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2240      	movs	r2, #64	; 0x40
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e016      	b.n	8001cfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fa3e 	bl	8002158 <DMA_CalcBaseAndBitshift>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	223f      	movs	r2, #63	; 0x3f
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	f010803f 	.word	0xf010803f

08001d08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d16:	f7ff fe09 	bl	800192c <HAL_GetTick>
 8001d1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d008      	beq.n	8001d3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2280      	movs	r2, #128	; 0x80
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e052      	b.n	8001de0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0216 	bic.w	r2, r2, #22
 8001d48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d103      	bne.n	8001d6a <HAL_DMA_Abort+0x62>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0208 	bic.w	r2, r2, #8
 8001d78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d8a:	e013      	b.n	8001db4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8c:	f7ff fdce 	bl	800192c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d90c      	bls.n	8001db4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2203      	movs	r2, #3
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e015      	b.n	8001de0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1e4      	bne.n	8001d8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	223f      	movs	r2, #63	; 0x3f
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d004      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00c      	b.n	8001e20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2205      	movs	r2, #5
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e38:	4b92      	ldr	r3, [pc, #584]	; (8002084 <HAL_DMA_IRQHandler+0x258>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a92      	ldr	r2, [pc, #584]	; (8002088 <HAL_DMA_IRQHandler+0x25c>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0a9b      	lsrs	r3, r3, #10
 8001e44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	2208      	movs	r2, #8
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d01a      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0204 	bic.w	r2, r2, #4
 8001e7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	2208      	movs	r2, #8
 8001e86:	409a      	lsls	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	f043 0201 	orr.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d012      	beq.n	8001ece <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	2201      	movs	r2, #1
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f043 0202 	orr.w	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d012      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	f043 0204 	orr.w	r2, r3, #4
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	2210      	movs	r2, #16
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d043      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d03c      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f26:	2210      	movs	r2, #16
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d018      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d108      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d024      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4798      	blx	r3
 8001f5a:	e01f      	b.n	8001f9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
 8001f6c:	e016      	b.n	8001f9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0208 	bic.w	r2, r2, #8
 8001f8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 808e 	beq.w	80020ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8086 	beq.w	80020ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d136      	bne.n	8002044 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0216 	bic.w	r2, r2, #22
 8001fe4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <HAL_DMA_IRQHandler+0x1da>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0208 	bic.w	r2, r2, #8
 8002014:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	223f      	movs	r2, #63	; 0x3f
 800201c:	409a      	lsls	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002036:	2b00      	cmp	r3, #0
 8002038:	d07d      	beq.n	8002136 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
        }
        return;
 8002042:	e078      	b.n	8002136 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01c      	beq.n	800208c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d108      	bne.n	8002072 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	2b00      	cmp	r3, #0
 8002066:	d030      	beq.n	80020ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	e02b      	b.n	80020ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d027      	beq.n	80020ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
 8002082:	e022      	b.n	80020ca <HAL_DMA_IRQHandler+0x29e>
 8002084:	200000e8 	.word	0x200000e8
 8002088:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10f      	bne.n	80020ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0210 	bic.w	r2, r2, #16
 80020a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d032      	beq.n	8002138 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d022      	beq.n	8002124 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2205      	movs	r2, #5
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0201 	bic.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3301      	adds	r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d307      	bcc.n	8002112 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f2      	bne.n	80020f6 <HAL_DMA_IRQHandler+0x2ca>
 8002110:	e000      	b.n	8002114 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002112:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
 8002134:	e000      	b.n	8002138 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002136:	bf00      	nop
    }
  }
}
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop

08002140 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	3b10      	subs	r3, #16
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <DMA_CalcBaseAndBitshift+0x64>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002172:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d909      	bls.n	800219a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	1d1a      	adds	r2, r3, #4
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	659a      	str	r2, [r3, #88]	; 0x58
 8002198:	e007      	b.n	80021aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	aaaaaaab 	.word	0xaaaaaaab
 80021c0:	08004968 	.word	0x08004968

080021c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11f      	bne.n	800221e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d855      	bhi.n	8002290 <DMA_CheckFifoParam+0xcc>
 80021e4:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <DMA_CheckFifoParam+0x28>)
 80021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ea:	bf00      	nop
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	0800220f 	.word	0x0800220f
 80021f4:	080021fd 	.word	0x080021fd
 80021f8:	08002291 	.word	0x08002291
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d045      	beq.n	8002294 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220c:	e042      	b.n	8002294 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002216:	d13f      	bne.n	8002298 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221c:	e03c      	b.n	8002298 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002226:	d121      	bne.n	800226c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d836      	bhi.n	800229c <DMA_CheckFifoParam+0xd8>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <DMA_CheckFifoParam+0x70>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002245 	.word	0x08002245
 8002238:	0800224b 	.word	0x0800224b
 800223c:	08002245 	.word	0x08002245
 8002240:	0800225d 	.word	0x0800225d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      break;
 8002248:	e02f      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d024      	beq.n	80022a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800225a:	e021      	b.n	80022a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002264:	d11e      	bne.n	80022a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800226a:	e01b      	b.n	80022a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d902      	bls.n	8002278 <DMA_CheckFifoParam+0xb4>
 8002272:	2b03      	cmp	r3, #3
 8002274:	d003      	beq.n	800227e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002276:	e018      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      break;
 800227c:	e015      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00e      	beq.n	80022a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      break;
 800228e:	e00b      	b.n	80022a8 <DMA_CheckFifoParam+0xe4>
      break;
 8002290:	bf00      	nop
 8002292:	e00a      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 8002294:	bf00      	nop
 8002296:	e008      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 8002298:	bf00      	nop
 800229a:	e006      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 800229c:	bf00      	nop
 800229e:	e004      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 80022a0:	bf00      	nop
 80022a2:	e002      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;   
 80022a4:	bf00      	nop
 80022a6:	e000      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 80022a8:	bf00      	nop
    }
  } 
  
  return status; 
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e165      	b.n	80025a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 8154 	bne.w	800259a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d00b      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d007      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002306:	2b11      	cmp	r3, #17
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b12      	cmp	r3, #18
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0xfc>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b12      	cmp	r3, #18
 80023b2:	d123      	bne.n	80023fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0203 	and.w	r2, r3, #3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80ae 	beq.w	800259a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b5c      	ldr	r3, [pc, #368]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a5b      	ldr	r2, [pc, #364]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245a:	4a57      	ldr	r2, [pc, #348]	; (80025b8 <HAL_GPIO_Init+0x300>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4e      	ldr	r2, [pc, #312]	; (80025bc <HAL_GPIO_Init+0x304>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d025      	beq.n	80024d2 <HAL_GPIO_Init+0x21a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4d      	ldr	r2, [pc, #308]	; (80025c0 <HAL_GPIO_Init+0x308>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01f      	beq.n	80024ce <HAL_GPIO_Init+0x216>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4c      	ldr	r2, [pc, #304]	; (80025c4 <HAL_GPIO_Init+0x30c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d019      	beq.n	80024ca <HAL_GPIO_Init+0x212>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4b      	ldr	r2, [pc, #300]	; (80025c8 <HAL_GPIO_Init+0x310>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_GPIO_Init+0x20e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4a      	ldr	r2, [pc, #296]	; (80025cc <HAL_GPIO_Init+0x314>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <HAL_GPIO_Init+0x20a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a49      	ldr	r2, [pc, #292]	; (80025d0 <HAL_GPIO_Init+0x318>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <HAL_GPIO_Init+0x206>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_GPIO_Init+0x31c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_GPIO_Init+0x202>
 80024b6:	2306      	movs	r3, #6
 80024b8:	e00c      	b.n	80024d4 <HAL_GPIO_Init+0x21c>
 80024ba:	2307      	movs	r3, #7
 80024bc:	e00a      	b.n	80024d4 <HAL_GPIO_Init+0x21c>
 80024be:	2305      	movs	r3, #5
 80024c0:	e008      	b.n	80024d4 <HAL_GPIO_Init+0x21c>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x21c>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e004      	b.n	80024d4 <HAL_GPIO_Init+0x21c>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e002      	b.n	80024d4 <HAL_GPIO_Init+0x21c>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x21c>
 80024d2:	2300      	movs	r3, #0
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f002 0203 	and.w	r2, r2, #3
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	4093      	lsls	r3, r2
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e4:	4934      	ldr	r1, [pc, #208]	; (80025b8 <HAL_GPIO_Init+0x300>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f2:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <HAL_GPIO_Init+0x320>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002516:	4a30      	ldr	r2, [pc, #192]	; (80025d8 <HAL_GPIO_Init+0x320>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800251c:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <HAL_GPIO_Init+0x320>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002540:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <HAL_GPIO_Init+0x320>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_GPIO_Init+0x320>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_GPIO_Init+0x320>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_GPIO_Init+0x320>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002594:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <HAL_GPIO_Init+0x320>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	f67f ae96 	bls.w	80022d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	3724      	adds	r7, #36	; 0x24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40013800 	.word	0x40013800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40020400 	.word	0x40020400
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020c00 	.word	0x40020c00
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40021400 	.word	0x40021400
 80025d4:	40021800 	.word	0x40021800
 80025d8:	40013c00 	.word	0x40013c00

080025dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f8:	e003      	b.n	8002602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025fa:	887b      	ldrh	r3, [r7, #2]
 80025fc:	041a      	lsls	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	619a      	str	r2, [r3, #24]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	401a      	ands	r2, r3
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	429a      	cmp	r2, r3
 8002626:	d104      	bne.n	8002632 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	041a      	lsls	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002630:	e002      	b.n	8002638 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800266a:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800266c:	2201      	movs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002670:	f7ff f95c 	bl	800192c <HAL_GetTick>
 8002674:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002676:	e009      	b.n	800268c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002678:	f7ff f958 	bl	800192c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002686:	d901      	bls.n	800268c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e01f      	b.n	80026cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_PWREx_EnableOverDrive+0x98>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	d1ee      	bne.n	8002678 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026a0:	f7ff f944 	bl	800192c <HAL_GetTick>
 80026a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026a6:	e009      	b.n	80026bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026a8:	f7ff f940 	bl	800192c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026b6:	d901      	bls.n	80026bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e007      	b.n	80026cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026bc:	4b07      	ldr	r3, [pc, #28]	; (80026dc <HAL_PWREx_EnableOverDrive+0x98>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026c8:	d1ee      	bne.n	80026a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	420e0040 	.word	0x420e0040
 80026dc:	40007000 	.word	0x40007000
 80026e0:	420e0044 	.word	0x420e0044

080026e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0cc      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f8:	4b68      	ldr	r3, [pc, #416]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d90c      	bls.n	8002720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b65      	ldr	r3, [pc, #404]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b63      	ldr	r3, [pc, #396]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b8      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a58      	ldr	r2, [pc, #352]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a52      	ldr	r2, [pc, #328]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800275a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b50      	ldr	r3, [pc, #320]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	494d      	ldr	r1, [pc, #308]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d044      	beq.n	8002804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d119      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a2:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e067      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c2:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f023 0203 	bic.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4934      	ldr	r1, [pc, #208]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d4:	f7ff f8aa 	bl	800192c <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7ff f8a6 	bl	800192c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e04f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 020c 	and.w	r2, r3, #12
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	429a      	cmp	r2, r3
 8002802:	d1eb      	bne.n	80027dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002804:	4b25      	ldr	r3, [pc, #148]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d20c      	bcs.n	800282c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e032      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4916      	ldr	r1, [pc, #88]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490e      	ldr	r1, [pc, #56]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800286a:	f000 f855 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800286e:	4601      	mov	r1, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	fa21 f303 	lsr.w	r3, r1, r3
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f80a 	bl	80018a4 <HAL_InitTick>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00
 80028a0:	40023800 	.word	0x40023800
 80028a4:	08004950 	.word	0x08004950
 80028a8:	200000e8 	.word	0x200000e8
 80028ac:	200000ec 	.word	0x200000ec

080028b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	200000e8 	.word	0x200000e8

080028c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028cc:	f7ff fff0 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028d0:	4601      	mov	r1, r0
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	0a9b      	lsrs	r3, r3, #10
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4a03      	ldr	r2, [pc, #12]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	08004960 	.word	0x08004960

080028f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028f4:	f7ff ffdc 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028f8:	4601      	mov	r1, r0
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0b5b      	lsrs	r3, r3, #13
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4a03      	ldr	r2, [pc, #12]	; (8002914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	fa21 f303 	lsr.w	r3, r1, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40023800 	.word	0x40023800
 8002914:	08004960 	.word	0x08004960

08002918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002932:	4bc6      	ldr	r3, [pc, #792]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x334>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b0c      	cmp	r3, #12
 800293c:	f200 817e 	bhi.w	8002c3c <HAL_RCC_GetSysClockFreq+0x324>
 8002940:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <HAL_RCC_GetSysClockFreq+0x30>)
 8002942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002946:	bf00      	nop
 8002948:	0800297d 	.word	0x0800297d
 800294c:	08002c3d 	.word	0x08002c3d
 8002950:	08002c3d 	.word	0x08002c3d
 8002954:	08002c3d 	.word	0x08002c3d
 8002958:	08002983 	.word	0x08002983
 800295c:	08002c3d 	.word	0x08002c3d
 8002960:	08002c3d 	.word	0x08002c3d
 8002964:	08002c3d 	.word	0x08002c3d
 8002968:	08002989 	.word	0x08002989
 800296c:	08002c3d 	.word	0x08002c3d
 8002970:	08002c3d 	.word	0x08002c3d
 8002974:	08002c3d 	.word	0x08002c3d
 8002978:	08002ae5 	.word	0x08002ae5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800297c:	4bb4      	ldr	r3, [pc, #720]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x338>)
 800297e:	613b      	str	r3, [r7, #16]
       break;
 8002980:	e15f      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002982:	4bb4      	ldr	r3, [pc, #720]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002984:	613b      	str	r3, [r7, #16]
      break;
 8002986:	e15c      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002988:	4bb0      	ldr	r3, [pc, #704]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x334>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002990:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002992:	4bae      	ldr	r3, [pc, #696]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x334>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d04a      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800299e:	4bab      	ldr	r3, [pc, #684]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x334>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	099b      	lsrs	r3, r3, #6
 80029a4:	f04f 0400 	mov.w	r4, #0
 80029a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	ea03 0501 	and.w	r5, r3, r1
 80029b4:	ea04 0602 	and.w	r6, r4, r2
 80029b8:	4629      	mov	r1, r5
 80029ba:	4632      	mov	r2, r6
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	f04f 0400 	mov.w	r4, #0
 80029c4:	0154      	lsls	r4, r2, #5
 80029c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029ca:	014b      	lsls	r3, r1, #5
 80029cc:	4619      	mov	r1, r3
 80029ce:	4622      	mov	r2, r4
 80029d0:	1b49      	subs	r1, r1, r5
 80029d2:	eb62 0206 	sbc.w	r2, r2, r6
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	f04f 0400 	mov.w	r4, #0
 80029de:	0194      	lsls	r4, r2, #6
 80029e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029e4:	018b      	lsls	r3, r1, #6
 80029e6:	1a5b      	subs	r3, r3, r1
 80029e8:	eb64 0402 	sbc.w	r4, r4, r2
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	00e2      	lsls	r2, r4, #3
 80029f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029fa:	00d9      	lsls	r1, r3, #3
 80029fc:	460b      	mov	r3, r1
 80029fe:	4614      	mov	r4, r2
 8002a00:	195b      	adds	r3, r3, r5
 8002a02:	eb44 0406 	adc.w	r4, r4, r6
 8002a06:	f04f 0100 	mov.w	r1, #0
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	0262      	lsls	r2, r4, #9
 8002a10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a14:	0259      	lsls	r1, r3, #9
 8002a16:	460b      	mov	r3, r1
 8002a18:	4614      	mov	r4, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f04f 0400 	mov.w	r4, #0
 8002a24:	461a      	mov	r2, r3
 8002a26:	4623      	mov	r3, r4
 8002a28:	f7fd fbec 	bl	8000204 <__aeabi_uldivmod>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	e049      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a34:	4b85      	ldr	r3, [pc, #532]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x334>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	099b      	lsrs	r3, r3, #6
 8002a3a:	f04f 0400 	mov.w	r4, #0
 8002a3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	ea03 0501 	and.w	r5, r3, r1
 8002a4a:	ea04 0602 	and.w	r6, r4, r2
 8002a4e:	4629      	mov	r1, r5
 8002a50:	4632      	mov	r2, r6
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	f04f 0400 	mov.w	r4, #0
 8002a5a:	0154      	lsls	r4, r2, #5
 8002a5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a60:	014b      	lsls	r3, r1, #5
 8002a62:	4619      	mov	r1, r3
 8002a64:	4622      	mov	r2, r4
 8002a66:	1b49      	subs	r1, r1, r5
 8002a68:	eb62 0206 	sbc.w	r2, r2, r6
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	f04f 0400 	mov.w	r4, #0
 8002a74:	0194      	lsls	r4, r2, #6
 8002a76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a7a:	018b      	lsls	r3, r1, #6
 8002a7c:	1a5b      	subs	r3, r3, r1
 8002a7e:	eb64 0402 	sbc.w	r4, r4, r2
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	00e2      	lsls	r2, r4, #3
 8002a8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a90:	00d9      	lsls	r1, r3, #3
 8002a92:	460b      	mov	r3, r1
 8002a94:	4614      	mov	r4, r2
 8002a96:	195b      	adds	r3, r3, r5
 8002a98:	eb44 0406 	adc.w	r4, r4, r6
 8002a9c:	f04f 0100 	mov.w	r1, #0
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	02a2      	lsls	r2, r4, #10
 8002aa6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002aaa:	0299      	lsls	r1, r3, #10
 8002aac:	460b      	mov	r3, r1
 8002aae:	4614      	mov	r4, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f04f 0400 	mov.w	r4, #0
 8002aba:	461a      	mov	r2, r3
 8002abc:	4623      	mov	r3, r4
 8002abe:	f7fd fba1 	bl	8000204 <__aeabi_uldivmod>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	460c      	mov	r4, r1
 8002ac6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ac8:	4b60      	ldr	r3, [pc, #384]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x334>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	613b      	str	r3, [r7, #16]
      break;
 8002ae2:	e0ae      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae4:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x334>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aee:	4b57      	ldr	r3, [pc, #348]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x334>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d04a      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afa:	4b54      	ldr	r3, [pc, #336]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x334>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	f04f 0400 	mov.w	r4, #0
 8002b04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	ea03 0501 	and.w	r5, r3, r1
 8002b10:	ea04 0602 	and.w	r6, r4, r2
 8002b14:	4629      	mov	r1, r5
 8002b16:	4632      	mov	r2, r6
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	f04f 0400 	mov.w	r4, #0
 8002b20:	0154      	lsls	r4, r2, #5
 8002b22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b26:	014b      	lsls	r3, r1, #5
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	1b49      	subs	r1, r1, r5
 8002b2e:	eb62 0206 	sbc.w	r2, r2, r6
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	f04f 0400 	mov.w	r4, #0
 8002b3a:	0194      	lsls	r4, r2, #6
 8002b3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b40:	018b      	lsls	r3, r1, #6
 8002b42:	1a5b      	subs	r3, r3, r1
 8002b44:	eb64 0402 	sbc.w	r4, r4, r2
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	00e2      	lsls	r2, r4, #3
 8002b52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b56:	00d9      	lsls	r1, r3, #3
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	195b      	adds	r3, r3, r5
 8002b5e:	eb44 0406 	adc.w	r4, r4, r6
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	0262      	lsls	r2, r4, #9
 8002b6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b70:	0259      	lsls	r1, r3, #9
 8002b72:	460b      	mov	r3, r1
 8002b74:	4614      	mov	r4, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	4621      	mov	r1, r4
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f04f 0400 	mov.w	r4, #0
 8002b80:	461a      	mov	r2, r3
 8002b82:	4623      	mov	r3, r4
 8002b84:	f7fd fb3e 	bl	8000204 <__aeabi_uldivmod>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	460c      	mov	r4, r1
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	e049      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b90:	4b2e      	ldr	r3, [pc, #184]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x334>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	099b      	lsrs	r3, r3, #6
 8002b96:	f04f 0400 	mov.w	r4, #0
 8002b9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	ea03 0501 	and.w	r5, r3, r1
 8002ba6:	ea04 0602 	and.w	r6, r4, r2
 8002baa:	4629      	mov	r1, r5
 8002bac:	4632      	mov	r2, r6
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	f04f 0400 	mov.w	r4, #0
 8002bb6:	0154      	lsls	r4, r2, #5
 8002bb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bbc:	014b      	lsls	r3, r1, #5
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4622      	mov	r2, r4
 8002bc2:	1b49      	subs	r1, r1, r5
 8002bc4:	eb62 0206 	sbc.w	r2, r2, r6
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	f04f 0400 	mov.w	r4, #0
 8002bd0:	0194      	lsls	r4, r2, #6
 8002bd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bd6:	018b      	lsls	r3, r1, #6
 8002bd8:	1a5b      	subs	r3, r3, r1
 8002bda:	eb64 0402 	sbc.w	r4, r4, r2
 8002bde:	f04f 0100 	mov.w	r1, #0
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	00e2      	lsls	r2, r4, #3
 8002be8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bec:	00d9      	lsls	r1, r3, #3
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	195b      	adds	r3, r3, r5
 8002bf4:	eb44 0406 	adc.w	r4, r4, r6
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	02a2      	lsls	r2, r4, #10
 8002c02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c06:	0299      	lsls	r1, r3, #10
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4614      	mov	r4, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	4621      	mov	r1, r4
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f04f 0400 	mov.w	r4, #0
 8002c16:	461a      	mov	r2, r3
 8002c18:	4623      	mov	r3, r4
 8002c1a:	f7fd faf3 	bl	8000204 <__aeabi_uldivmod>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	460c      	mov	r4, r1
 8002c22:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x334>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0f1b      	lsrs	r3, r3, #28
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	613b      	str	r3, [r7, #16]
      break;
 8002c3a:	e002      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x338>)
 8002c3e:	613b      	str	r3, [r7, #16]
      break;
 8002c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c42:	693b      	ldr	r3, [r7, #16]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	007a1200 	.word	0x007a1200

08002c58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8083 	beq.w	8002d78 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c72:	4b95      	ldr	r3, [pc, #596]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d019      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c7e:	4b92      	ldr	r3, [pc, #584]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c8a:	4b8f      	ldr	r3, [pc, #572]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c96:	d00c      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c98:	4b8b      	ldr	r3, [pc, #556]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d112      	bne.n	8002cca <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca4:	4b88      	ldr	r3, [pc, #544]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb0:	d10b      	bne.n	8002cca <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb2:	4b85      	ldr	r3, [pc, #532]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d05b      	beq.n	8002d76 <HAL_RCC_OscConfig+0x11e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d157      	bne.n	8002d76 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e216      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x8a>
 8002cd4:	4b7c      	ldr	r3, [pc, #496]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a7b      	ldr	r2, [pc, #492]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	e01d      	b.n	8002d1e <HAL_RCC_OscConfig+0xc6>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cea:	d10c      	bne.n	8002d06 <HAL_RCC_OscConfig+0xae>
 8002cec:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a75      	ldr	r2, [pc, #468]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a72      	ldr	r2, [pc, #456]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	e00b      	b.n	8002d1e <HAL_RCC_OscConfig+0xc6>
 8002d06:	4b70      	ldr	r3, [pc, #448]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a6f      	ldr	r2, [pc, #444]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6c      	ldr	r2, [pc, #432]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d013      	beq.n	8002d4e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe fe01 	bl	800192c <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fdfd 	bl	800192c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	; 0x64
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e1db      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d40:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0xd6>
 8002d4c:	e014      	b.n	8002d78 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fded 	bl	800192c <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d56:	f7fe fde9 	bl	800192c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b64      	cmp	r3, #100	; 0x64
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1c7      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d68:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0xfe>
 8002d74:	e000      	b.n	8002d78 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d76:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d06f      	beq.n	8002e64 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d84:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d017      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d90:	4b4d      	ldr	r3, [pc, #308]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d105      	bne.n	8002da8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d9c:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da8:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d11c      	bne.n	8002dee <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db4:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d116      	bne.n	8002dee <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x180>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e18f      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4938      	ldr	r1, [pc, #224]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dec:	e03a      	b.n	8002e64 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d020      	beq.n	8002e38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df6:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_RCC_OscConfig+0x274>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fd96 	bl	800192c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fe fd92 	bl	800192c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e170      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e16:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4925      	ldr	r1, [pc, #148]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
 8002e36:	e015      	b.n	8002e64 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_OscConfig+0x274>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fd75 	bl	800192c <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e46:	f7fe fd71 	bl	800192c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e14f      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d037      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d016      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_RCC_OscConfig+0x278>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7e:	f7fe fd55 	bl	800192c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e86:	f7fe fd51 	bl	800192c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e12f      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x22e>
 8002ea4:	e01c      	b.n	8002ee0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <HAL_RCC_OscConfig+0x278>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe fd3e 	bl	800192c <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb2:	e00f      	b.n	8002ed4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fd3a 	bl	800192c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d908      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e118      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	42470000 	.word	0x42470000
 8002ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	4b8a      	ldr	r3, [pc, #552]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e9      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8097 	beq.w	800301c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef2:	4b83      	ldr	r3, [pc, #524]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10f      	bne.n	8002f1e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b7f      	ldr	r3, [pc, #508]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a7e      	ldr	r2, [pc, #504]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b7c      	ldr	r3, [pc, #496]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b79      	ldr	r3, [pc, #484]	; (8003104 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	4b76      	ldr	r3, [pc, #472]	; (8003104 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a75      	ldr	r2, [pc, #468]	; (8003104 <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7fe fcf9 	bl	800192c <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7fe fcf5 	bl	800192c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0d3      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	4b6c      	ldr	r3, [pc, #432]	; (8003104 <HAL_RCC_OscConfig+0x4ac>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x31a>
 8002f64:	4b66      	ldr	r3, [pc, #408]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a65      	ldr	r2, [pc, #404]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	e01c      	b.n	8002fac <HAL_RCC_OscConfig+0x354>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x33c>
 8002f7a:	4b61      	ldr	r3, [pc, #388]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a60      	ldr	r2, [pc, #384]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
 8002f86:	4b5e      	ldr	r3, [pc, #376]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a5d      	ldr	r2, [pc, #372]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0x354>
 8002f94:	4b5a      	ldr	r3, [pc, #360]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a59      	ldr	r2, [pc, #356]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa0:	4b57      	ldr	r3, [pc, #348]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	4a56      	ldr	r2, [pc, #344]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002fa6:	f023 0304 	bic.w	r3, r3, #4
 8002faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d015      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fcba 	bl	800192c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fcb6 	bl	800192c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e092      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	4b4b      	ldr	r3, [pc, #300]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0ee      	beq.n	8002fbc <HAL_RCC_OscConfig+0x364>
 8002fde:	e014      	b.n	800300a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fca4 	bl	800192c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fca0 	bl	800192c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e07c      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffe:	4b40      	ldr	r3, [pc, #256]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1ee      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003010:	4b3b      	ldr	r3, [pc, #236]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	4a3a      	ldr	r2, [pc, #232]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8003016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d068      	beq.n	80030f6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003024:	4b36      	ldr	r3, [pc, #216]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b08      	cmp	r3, #8
 800302e:	d060      	beq.n	80030f2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d145      	bne.n	80030c4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003038:	4b33      	ldr	r3, [pc, #204]	; (8003108 <HAL_RCC_OscConfig+0x4b0>)
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fc75 	bl	800192c <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe fc71 	bl	800192c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e04f      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003058:	4b29      	ldr	r3, [pc, #164]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f0      	bne.n	8003046 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	019b      	lsls	r3, r3, #6
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	3b01      	subs	r3, #1
 800307e:	041b      	lsls	r3, r3, #16
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	061b      	lsls	r3, r3, #24
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	071b      	lsls	r3, r3, #28
 8003090:	491b      	ldr	r1, [pc, #108]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003096:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <HAL_RCC_OscConfig+0x4b0>)
 8003098:	2201      	movs	r2, #1
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fc46 	bl	800192c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fc42 	bl	800192c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e020      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x44c>
 80030c2:	e018      	b.n	80030f6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b10      	ldr	r3, [pc, #64]	; (8003108 <HAL_RCC_OscConfig+0x4b0>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe fc2f 	bl	800192c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe fc2b 	bl	800192c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e009      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_RCC_OscConfig+0x4a8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x47a>
 80030f0:	e001      	b.n	80030f6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	40007000 	.word	0x40007000
 8003108:	42470060 	.word	0x42470060

0800310c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e01d      	b.n	800315a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fe f9e0 	bl	80014f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f000 f95e 	bl	800340c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b06      	cmp	r3, #6
 800318a:	d007      	beq.n	800319c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d122      	bne.n	8003206 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d11b      	bne.n	8003206 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0202 	mvn.w	r2, #2
 80031d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f8ee 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 80031f2:	e005      	b.n	8003200 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f8e0 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f8f1 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d122      	bne.n	800325a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b04      	cmp	r3, #4
 8003220:	d11b      	bne.n	800325a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0204 	mvn.w	r2, #4
 800322a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f8c4 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 8003246:	e005      	b.n	8003254 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f8b6 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f8c7 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b08      	cmp	r3, #8
 8003266:	d122      	bne.n	80032ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b08      	cmp	r3, #8
 8003274:	d11b      	bne.n	80032ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f06f 0208 	mvn.w	r2, #8
 800327e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2204      	movs	r2, #4
 8003284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f89a 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 800329a:	e005      	b.n	80032a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f88c 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f89d 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d122      	bne.n	8003302 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d11b      	bne.n	8003302 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f06f 0210 	mvn.w	r2, #16
 80032d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2208      	movs	r2, #8
 80032d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f870 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 80032ee:	e005      	b.n	80032fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f862 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f873 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10e      	bne.n	800332e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f06f 0201 	mvn.w	r2, #1
 8003326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fe f875 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d10e      	bne.n	800335a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	d107      	bne.n	800335a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f97f 	bl	8003658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d10e      	bne.n	8003386 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d107      	bne.n	8003386 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f838 	bl	80033f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b20      	cmp	r3, #32
 8003392:	d10e      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d107      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0220 	mvn.w	r2, #32
 80033aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f949 	bl	8003644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a40      	ldr	r2, [pc, #256]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342a:	d00f      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a3d      	ldr	r2, [pc, #244]	; (8003524 <TIM_Base_SetConfig+0x118>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00b      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a3c      	ldr	r2, [pc, #240]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a3b      	ldr	r2, [pc, #236]	; (800352c <TIM_Base_SetConfig+0x120>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3a      	ldr	r2, [pc, #232]	; (8003530 <TIM_Base_SetConfig+0x124>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d108      	bne.n	800345e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2f      	ldr	r2, [pc, #188]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d02b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346c:	d027      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a2c      	ldr	r2, [pc, #176]	; (8003524 <TIM_Base_SetConfig+0x118>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d023      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2b      	ldr	r2, [pc, #172]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01f      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a2a      	ldr	r2, [pc, #168]	; (800352c <TIM_Base_SetConfig+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a29      	ldr	r2, [pc, #164]	; (8003530 <TIM_Base_SetConfig+0x124>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d017      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a28      	ldr	r2, [pc, #160]	; (8003534 <TIM_Base_SetConfig+0x128>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <TIM_Base_SetConfig+0x12c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00f      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a26      	ldr	r2, [pc, #152]	; (800353c <TIM_Base_SetConfig+0x130>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a25      	ldr	r2, [pc, #148]	; (8003540 <TIM_Base_SetConfig+0x134>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a24      	ldr	r2, [pc, #144]	; (8003544 <TIM_Base_SetConfig+0x138>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a23      	ldr	r2, [pc, #140]	; (8003548 <TIM_Base_SetConfig+0x13c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d108      	bne.n	80034d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <TIM_Base_SetConfig+0x114>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_Base_SetConfig+0xf8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a0c      	ldr	r2, [pc, #48]	; (8003530 <TIM_Base_SetConfig+0x124>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d103      	bne.n	800350c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	615a      	str	r2, [r3, #20]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40010000 	.word	0x40010000
 8003524:	40000400 	.word	0x40000400
 8003528:	40000800 	.word	0x40000800
 800352c:	40000c00 	.word	0x40000c00
 8003530:	40010400 	.word	0x40010400
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400
 800353c:	40014800 	.word	0x40014800
 8003540:	40001800 	.word	0x40001800
 8003544:	40001c00 	.word	0x40001c00
 8003548:	40002000 	.word	0x40002000

0800354c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003560:	2302      	movs	r3, #2
 8003562:	e05a      	b.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a21      	ldr	r2, [pc, #132]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b0:	d01d      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d018      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00e      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a18      	ldr	r2, [pc, #96]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a17      	ldr	r2, [pc, #92]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a15      	ldr	r2, [pc, #84]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10c      	bne.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40010400 	.word	0x40010400
 800363c:	40014000 	.word	0x40014000
 8003640:	40001800 	.word	0x40001800

08003644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e03f      	b.n	80036fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd ff58 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	; 0x24
 800369c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fc19 	bl	8003ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b088      	sub	sp, #32
 800370a:	af02      	add	r7, sp, #8
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b20      	cmp	r3, #32
 8003724:	f040 8083 	bne.w	800382e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_UART_Transmit+0x2e>
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e07b      	b.n	8003830 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_UART_Transmit+0x40>
 8003742:	2302      	movs	r3, #2
 8003744:	e074      	b.n	8003830 <HAL_UART_Transmit+0x12a>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2221      	movs	r2, #33	; 0x21
 8003758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800375c:	f7fe f8e6 	bl	800192c <HAL_GetTick>
 8003760:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	88fa      	ldrh	r2, [r7, #6]
 800376c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003776:	e042      	b.n	80037fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378e:	d122      	bne.n	80037d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2200      	movs	r2, #0
 8003798:	2180      	movs	r1, #128	; 0x80
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fa38 	bl	8003c10 <UART_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e042      	b.n	8003830 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3302      	adds	r3, #2
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	e017      	b.n	80037fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	3301      	adds	r3, #1
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	e013      	b.n	80037fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2200      	movs	r2, #0
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fa15 	bl	8003c10 <UART_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e01f      	b.n	8003830 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	60ba      	str	r2, [r7, #8]
 80037f6:	781a      	ldrb	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1b7      	bne.n	8003778 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2200      	movs	r2, #0
 8003810:	2140      	movs	r1, #64	; 0x40
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f9fc 	bl	8003c10 <UART_WaitOnFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e006      	b.n	8003830 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	4613      	mov	r3, r2
 8003844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b20      	cmp	r3, #32
 8003850:	d140      	bne.n	80038d4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_UART_Receive_IT+0x26>
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e039      	b.n	80038d6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_UART_Receive_IT+0x38>
 800386c:	2302      	movs	r3, #2
 800386e:	e032      	b.n	80038d6 <HAL_UART_Receive_IT+0x9e>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2222      	movs	r2, #34	; 0x22
 8003894:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0220 	orr.w	r2, r2, #32
 80038ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80038f8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d124      	bne.n	8003962 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003926:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	2b00      	cmp	r3, #0
 800392e:	d018      	beq.n	8003962 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	2200      	movs	r2, #0
 8003936:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4618      	mov	r0, r3
 800393e:	f7fe f9e3 	bl	8001d08 <HAL_DMA_Abort>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00c      	beq.n	8003962 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fbf7 	bl	8002140 <HAL_DMA_GetError>
 8003952:	4603      	mov	r3, r0
 8003954:	2b20      	cmp	r3, #32
 8003956:	d104      	bne.n	8003962 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2210      	movs	r2, #16
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e03d      	b.n	80039de <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d124      	bne.n	80039ba <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	2b00      	cmp	r3, #0
 8003986:	d018      	beq.n	80039ba <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	2200      	movs	r2, #0
 800398e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe f9b7 	bl	8001d08 <HAL_DMA_Abort>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00c      	beq.n	80039ba <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fbcb 	bl	8002140 <HAL_DMA_GetError>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d104      	bne.n	80039ba <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2210      	movs	r2, #16
 80039b4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e011      	b.n	80039de <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_UART_IRQHandler+0x52>
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f9d6 	bl	8003de4 <UART_Receive_IT>
      return;
 8003a38:	e0d1      	b.n	8003bde <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80b0 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x1ba>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <HAL_UART_IRQHandler+0x70>
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80a5 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_UART_IRQHandler+0x90>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	f043 0201 	orr.w	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_UART_IRQHandler+0xb0>
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	f043 0202 	orr.w	r2, r3, #2
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_UART_IRQHandler+0xd0>
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	f043 0204 	orr.w	r2, r3, #4
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00f      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xfa>
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <HAL_UART_IRQHandler+0xee>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	f043 0208 	orr.w	r2, r3, #8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d078      	beq.n	8003bdc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <HAL_UART_IRQHandler+0x11c>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f970 	bl	8003de4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <HAL_UART_IRQHandler+0x144>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d031      	beq.n	8003b90 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f8b9 	bl	8003ca4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d123      	bne.n	8003b88 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d013      	beq.n	8003b80 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <HAL_UART_IRQHandler+0x1fc>)
 8003b5e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe f93f 	bl	8001de8 <HAL_DMA_Abort_IT>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d016      	beq.n	8003b9e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7e:	e00e      	b.n	8003b9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f83b 	bl	8003bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b86:	e00a      	b.n	8003b9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f837 	bl	8003bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8e:	e006      	b.n	8003b9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f833 	bl	8003bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003b9c:	e01e      	b.n	8003bdc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9e:	bf00      	nop
    return;
 8003ba0:	e01c      	b.n	8003bdc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_UART_IRQHandler+0x1d6>
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f8a6 	bl	8003d08 <UART_Transmit_IT>
    return;
 8003bbc:	e00f      	b.n	8003bde <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_UART_IRQHandler+0x1f6>
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f8ee 	bl	8003db4 <UART_EndTransmit_IT>
    return;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <HAL_UART_IRQHandler+0x1f6>
    return;
 8003bdc:	bf00      	nop
  }
}
 8003bde:	3720      	adds	r7, #32
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	08003ce1 	.word	0x08003ce1

08003be8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c20:	e02c      	b.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c28:	d028      	beq.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c30:	f7fd fe7c 	bl	800192c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d21d      	bcs.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e00f      	b.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d0c3      	beq.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff ff7e 	bl	8003bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b21      	cmp	r3, #33	; 0x21
 8003d1a:	d144      	bne.n	8003da6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d24:	d11a      	bne.n	8003d5c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d3a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	1c9a      	adds	r2, r3, #2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]
 8003d4e:	e00e      	b.n	8003d6e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	621a      	str	r2, [r3, #32]
 8003d5a:	e008      	b.n	8003d6e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	1c59      	adds	r1, r3, #1
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6211      	str	r1, [r2, #32]
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff07 	bl	8003be8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b22      	cmp	r3, #34	; 0x22
 8003df6:	d171      	bne.n	8003edc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e00:	d123      	bne.n	8003e4a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10e      	bne.n	8003e2e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e2c:	e029      	b.n	8003e82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
 8003e48:	e01b      	b.n	8003e82 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6858      	ldr	r0, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	1c59      	adds	r1, r3, #1
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6291      	str	r1, [r2, #40]	; 0x28
 8003e62:	b2c2      	uxtb	r2, r0
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e00c      	b.n	8003e82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	1c58      	adds	r0, r3, #1
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	6288      	str	r0, [r1, #40]	; 0x28
 8003e7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d120      	bne.n	8003ed8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0220 	bic.w	r2, r2, #32
 8003ea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd fa2e 	bl	8001330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e002      	b.n	8003ede <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f2a:	f023 030c 	bic.w	r3, r3, #12
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	68f9      	ldr	r1, [r7, #12]
 8003f34:	430b      	orrs	r3, r1
 8003f36:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f56:	f040 818b 	bne.w	8004270 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4ac1      	ldr	r2, [pc, #772]	; (8004264 <UART_SetConfig+0x37c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d005      	beq.n	8003f70 <UART_SetConfig+0x88>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4abf      	ldr	r2, [pc, #764]	; (8004268 <UART_SetConfig+0x380>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	f040 80bd 	bne.w	80040ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f70:	f7fe fcbe 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 8003f74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	461d      	mov	r5, r3
 8003f7a:	f04f 0600 	mov.w	r6, #0
 8003f7e:	46a8      	mov	r8, r5
 8003f80:	46b1      	mov	r9, r6
 8003f82:	eb18 0308 	adds.w	r3, r8, r8
 8003f86:	eb49 0409 	adc.w	r4, r9, r9
 8003f8a:	4698      	mov	r8, r3
 8003f8c:	46a1      	mov	r9, r4
 8003f8e:	eb18 0805 	adds.w	r8, r8, r5
 8003f92:	eb49 0906 	adc.w	r9, r9, r6
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fa2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fa6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003faa:	4688      	mov	r8, r1
 8003fac:	4691      	mov	r9, r2
 8003fae:	eb18 0005 	adds.w	r0, r8, r5
 8003fb2:	eb49 0106 	adc.w	r1, r9, r6
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	461d      	mov	r5, r3
 8003fbc:	f04f 0600 	mov.w	r6, #0
 8003fc0:	196b      	adds	r3, r5, r5
 8003fc2:	eb46 0406 	adc.w	r4, r6, r6
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4623      	mov	r3, r4
 8003fca:	f7fc f91b 	bl	8000204 <__aeabi_uldivmod>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4ba5      	ldr	r3, [pc, #660]	; (800426c <UART_SetConfig+0x384>)
 8003fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	461d      	mov	r5, r3
 8003fe4:	f04f 0600 	mov.w	r6, #0
 8003fe8:	46a9      	mov	r9, r5
 8003fea:	46b2      	mov	sl, r6
 8003fec:	eb19 0309 	adds.w	r3, r9, r9
 8003ff0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ff4:	4699      	mov	r9, r3
 8003ff6:	46a2      	mov	sl, r4
 8003ff8:	eb19 0905 	adds.w	r9, r9, r5
 8003ffc:	eb4a 0a06 	adc.w	sl, sl, r6
 8004000:	f04f 0100 	mov.w	r1, #0
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800400c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004010:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004014:	4689      	mov	r9, r1
 8004016:	4692      	mov	sl, r2
 8004018:	eb19 0005 	adds.w	r0, r9, r5
 800401c:	eb4a 0106 	adc.w	r1, sl, r6
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	461d      	mov	r5, r3
 8004026:	f04f 0600 	mov.w	r6, #0
 800402a:	196b      	adds	r3, r5, r5
 800402c:	eb46 0406 	adc.w	r4, r6, r6
 8004030:	461a      	mov	r2, r3
 8004032:	4623      	mov	r3, r4
 8004034:	f7fc f8e6 	bl	8000204 <__aeabi_uldivmod>
 8004038:	4603      	mov	r3, r0
 800403a:	460c      	mov	r4, r1
 800403c:	461a      	mov	r2, r3
 800403e:	4b8b      	ldr	r3, [pc, #556]	; (800426c <UART_SetConfig+0x384>)
 8004040:	fba3 1302 	umull	r1, r3, r3, r2
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	2164      	movs	r1, #100	; 0x64
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	3332      	adds	r3, #50	; 0x32
 8004052:	4a86      	ldr	r2, [pc, #536]	; (800426c <UART_SetConfig+0x384>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004060:	4498      	add	r8, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	461d      	mov	r5, r3
 8004066:	f04f 0600 	mov.w	r6, #0
 800406a:	46a9      	mov	r9, r5
 800406c:	46b2      	mov	sl, r6
 800406e:	eb19 0309 	adds.w	r3, r9, r9
 8004072:	eb4a 040a 	adc.w	r4, sl, sl
 8004076:	4699      	mov	r9, r3
 8004078:	46a2      	mov	sl, r4
 800407a:	eb19 0905 	adds.w	r9, r9, r5
 800407e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004082:	f04f 0100 	mov.w	r1, #0
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800408e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004092:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004096:	4689      	mov	r9, r1
 8004098:	4692      	mov	sl, r2
 800409a:	eb19 0005 	adds.w	r0, r9, r5
 800409e:	eb4a 0106 	adc.w	r1, sl, r6
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	461d      	mov	r5, r3
 80040a8:	f04f 0600 	mov.w	r6, #0
 80040ac:	196b      	adds	r3, r5, r5
 80040ae:	eb46 0406 	adc.w	r4, r6, r6
 80040b2:	461a      	mov	r2, r3
 80040b4:	4623      	mov	r3, r4
 80040b6:	f7fc f8a5 	bl	8000204 <__aeabi_uldivmod>
 80040ba:	4603      	mov	r3, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	461a      	mov	r2, r3
 80040c0:	4b6a      	ldr	r3, [pc, #424]	; (800426c <UART_SetConfig+0x384>)
 80040c2:	fba3 1302 	umull	r1, r3, r3, r2
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	2164      	movs	r1, #100	; 0x64
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	3332      	adds	r3, #50	; 0x32
 80040d4:	4a65      	ldr	r2, [pc, #404]	; (800426c <UART_SetConfig+0x384>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	f003 0207 	and.w	r2, r3, #7
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4442      	add	r2, r8
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	e26f      	b.n	80045ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ea:	f7fe fbed 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 80040ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	461d      	mov	r5, r3
 80040f4:	f04f 0600 	mov.w	r6, #0
 80040f8:	46a8      	mov	r8, r5
 80040fa:	46b1      	mov	r9, r6
 80040fc:	eb18 0308 	adds.w	r3, r8, r8
 8004100:	eb49 0409 	adc.w	r4, r9, r9
 8004104:	4698      	mov	r8, r3
 8004106:	46a1      	mov	r9, r4
 8004108:	eb18 0805 	adds.w	r8, r8, r5
 800410c:	eb49 0906 	adc.w	r9, r9, r6
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800411c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004120:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004124:	4688      	mov	r8, r1
 8004126:	4691      	mov	r9, r2
 8004128:	eb18 0005 	adds.w	r0, r8, r5
 800412c:	eb49 0106 	adc.w	r1, r9, r6
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	461d      	mov	r5, r3
 8004136:	f04f 0600 	mov.w	r6, #0
 800413a:	196b      	adds	r3, r5, r5
 800413c:	eb46 0406 	adc.w	r4, r6, r6
 8004140:	461a      	mov	r2, r3
 8004142:	4623      	mov	r3, r4
 8004144:	f7fc f85e 	bl	8000204 <__aeabi_uldivmod>
 8004148:	4603      	mov	r3, r0
 800414a:	460c      	mov	r4, r1
 800414c:	461a      	mov	r2, r3
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <UART_SetConfig+0x384>)
 8004150:	fba3 2302 	umull	r2, r3, r3, r2
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	461d      	mov	r5, r3
 800415e:	f04f 0600 	mov.w	r6, #0
 8004162:	46a9      	mov	r9, r5
 8004164:	46b2      	mov	sl, r6
 8004166:	eb19 0309 	adds.w	r3, r9, r9
 800416a:	eb4a 040a 	adc.w	r4, sl, sl
 800416e:	4699      	mov	r9, r3
 8004170:	46a2      	mov	sl, r4
 8004172:	eb19 0905 	adds.w	r9, r9, r5
 8004176:	eb4a 0a06 	adc.w	sl, sl, r6
 800417a:	f04f 0100 	mov.w	r1, #0
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004186:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800418a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800418e:	4689      	mov	r9, r1
 8004190:	4692      	mov	sl, r2
 8004192:	eb19 0005 	adds.w	r0, r9, r5
 8004196:	eb4a 0106 	adc.w	r1, sl, r6
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	461d      	mov	r5, r3
 80041a0:	f04f 0600 	mov.w	r6, #0
 80041a4:	196b      	adds	r3, r5, r5
 80041a6:	eb46 0406 	adc.w	r4, r6, r6
 80041aa:	461a      	mov	r2, r3
 80041ac:	4623      	mov	r3, r4
 80041ae:	f7fc f829 	bl	8000204 <__aeabi_uldivmod>
 80041b2:	4603      	mov	r3, r0
 80041b4:	460c      	mov	r4, r1
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b2c      	ldr	r3, [pc, #176]	; (800426c <UART_SetConfig+0x384>)
 80041ba:	fba3 1302 	umull	r1, r3, r3, r2
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2164      	movs	r1, #100	; 0x64
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	4a27      	ldr	r2, [pc, #156]	; (800426c <UART_SetConfig+0x384>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041da:	4498      	add	r8, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	461d      	mov	r5, r3
 80041e0:	f04f 0600 	mov.w	r6, #0
 80041e4:	46a9      	mov	r9, r5
 80041e6:	46b2      	mov	sl, r6
 80041e8:	eb19 0309 	adds.w	r3, r9, r9
 80041ec:	eb4a 040a 	adc.w	r4, sl, sl
 80041f0:	4699      	mov	r9, r3
 80041f2:	46a2      	mov	sl, r4
 80041f4:	eb19 0905 	adds.w	r9, r9, r5
 80041f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80041fc:	f04f 0100 	mov.w	r1, #0
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004208:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800420c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004210:	4689      	mov	r9, r1
 8004212:	4692      	mov	sl, r2
 8004214:	eb19 0005 	adds.w	r0, r9, r5
 8004218:	eb4a 0106 	adc.w	r1, sl, r6
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	461d      	mov	r5, r3
 8004222:	f04f 0600 	mov.w	r6, #0
 8004226:	196b      	adds	r3, r5, r5
 8004228:	eb46 0406 	adc.w	r4, r6, r6
 800422c:	461a      	mov	r2, r3
 800422e:	4623      	mov	r3, r4
 8004230:	f7fb ffe8 	bl	8000204 <__aeabi_uldivmod>
 8004234:	4603      	mov	r3, r0
 8004236:	460c      	mov	r4, r1
 8004238:	461a      	mov	r2, r3
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <UART_SetConfig+0x384>)
 800423c:	fba3 1302 	umull	r1, r3, r3, r2
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	2164      	movs	r1, #100	; 0x64
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	3332      	adds	r3, #50	; 0x32
 800424e:	4a07      	ldr	r2, [pc, #28]	; (800426c <UART_SetConfig+0x384>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	f003 0207 	and.w	r2, r3, #7
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4442      	add	r2, r8
 8004260:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004262:	e1b2      	b.n	80045ca <UART_SetConfig+0x6e2>
 8004264:	40011000 	.word	0x40011000
 8004268:	40011400 	.word	0x40011400
 800426c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4ad7      	ldr	r2, [pc, #860]	; (80045d4 <UART_SetConfig+0x6ec>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d005      	beq.n	8004286 <UART_SetConfig+0x39e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4ad6      	ldr	r2, [pc, #856]	; (80045d8 <UART_SetConfig+0x6f0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	f040 80d1 	bne.w	8004428 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004286:	f7fe fb33 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 800428a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	469a      	mov	sl, r3
 8004290:	f04f 0b00 	mov.w	fp, #0
 8004294:	46d0      	mov	r8, sl
 8004296:	46d9      	mov	r9, fp
 8004298:	eb18 0308 	adds.w	r3, r8, r8
 800429c:	eb49 0409 	adc.w	r4, r9, r9
 80042a0:	4698      	mov	r8, r3
 80042a2:	46a1      	mov	r9, r4
 80042a4:	eb18 080a 	adds.w	r8, r8, sl
 80042a8:	eb49 090b 	adc.w	r9, r9, fp
 80042ac:	f04f 0100 	mov.w	r1, #0
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042c0:	4688      	mov	r8, r1
 80042c2:	4691      	mov	r9, r2
 80042c4:	eb1a 0508 	adds.w	r5, sl, r8
 80042c8:	eb4b 0609 	adc.w	r6, fp, r9
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4619      	mov	r1, r3
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	f04f 0400 	mov.w	r4, #0
 80042de:	0094      	lsls	r4, r2, #2
 80042e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042e4:	008b      	lsls	r3, r1, #2
 80042e6:	461a      	mov	r2, r3
 80042e8:	4623      	mov	r3, r4
 80042ea:	4628      	mov	r0, r5
 80042ec:	4631      	mov	r1, r6
 80042ee:	f7fb ff89 	bl	8000204 <__aeabi_uldivmod>
 80042f2:	4603      	mov	r3, r0
 80042f4:	460c      	mov	r4, r1
 80042f6:	461a      	mov	r2, r3
 80042f8:	4bb8      	ldr	r3, [pc, #736]	; (80045dc <UART_SetConfig+0x6f4>)
 80042fa:	fba3 2302 	umull	r2, r3, r3, r2
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	469b      	mov	fp, r3
 8004308:	f04f 0c00 	mov.w	ip, #0
 800430c:	46d9      	mov	r9, fp
 800430e:	46e2      	mov	sl, ip
 8004310:	eb19 0309 	adds.w	r3, r9, r9
 8004314:	eb4a 040a 	adc.w	r4, sl, sl
 8004318:	4699      	mov	r9, r3
 800431a:	46a2      	mov	sl, r4
 800431c:	eb19 090b 	adds.w	r9, r9, fp
 8004320:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004324:	f04f 0100 	mov.w	r1, #0
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004330:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004334:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004338:	4689      	mov	r9, r1
 800433a:	4692      	mov	sl, r2
 800433c:	eb1b 0509 	adds.w	r5, fp, r9
 8004340:	eb4c 060a 	adc.w	r6, ip, sl
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4619      	mov	r1, r3
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	f04f 0400 	mov.w	r4, #0
 8004356:	0094      	lsls	r4, r2, #2
 8004358:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800435c:	008b      	lsls	r3, r1, #2
 800435e:	461a      	mov	r2, r3
 8004360:	4623      	mov	r3, r4
 8004362:	4628      	mov	r0, r5
 8004364:	4631      	mov	r1, r6
 8004366:	f7fb ff4d 	bl	8000204 <__aeabi_uldivmod>
 800436a:	4603      	mov	r3, r0
 800436c:	460c      	mov	r4, r1
 800436e:	461a      	mov	r2, r3
 8004370:	4b9a      	ldr	r3, [pc, #616]	; (80045dc <UART_SetConfig+0x6f4>)
 8004372:	fba3 1302 	umull	r1, r3, r3, r2
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2164      	movs	r1, #100	; 0x64
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	3332      	adds	r3, #50	; 0x32
 8004384:	4a95      	ldr	r2, [pc, #596]	; (80045dc <UART_SetConfig+0x6f4>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004390:	4498      	add	r8, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	469b      	mov	fp, r3
 8004396:	f04f 0c00 	mov.w	ip, #0
 800439a:	46d9      	mov	r9, fp
 800439c:	46e2      	mov	sl, ip
 800439e:	eb19 0309 	adds.w	r3, r9, r9
 80043a2:	eb4a 040a 	adc.w	r4, sl, sl
 80043a6:	4699      	mov	r9, r3
 80043a8:	46a2      	mov	sl, r4
 80043aa:	eb19 090b 	adds.w	r9, r9, fp
 80043ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c6:	4689      	mov	r9, r1
 80043c8:	4692      	mov	sl, r2
 80043ca:	eb1b 0509 	adds.w	r5, fp, r9
 80043ce:	eb4c 060a 	adc.w	r6, ip, sl
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4619      	mov	r1, r3
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	f04f 0400 	mov.w	r4, #0
 80043e4:	0094      	lsls	r4, r2, #2
 80043e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043ea:	008b      	lsls	r3, r1, #2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4623      	mov	r3, r4
 80043f0:	4628      	mov	r0, r5
 80043f2:	4631      	mov	r1, r6
 80043f4:	f7fb ff06 	bl	8000204 <__aeabi_uldivmod>
 80043f8:	4603      	mov	r3, r0
 80043fa:	460c      	mov	r4, r1
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b77      	ldr	r3, [pc, #476]	; (80045dc <UART_SetConfig+0x6f4>)
 8004400:	fba3 1302 	umull	r1, r3, r3, r2
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	2164      	movs	r1, #100	; 0x64
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	3332      	adds	r3, #50	; 0x32
 8004412:	4a72      	ldr	r2, [pc, #456]	; (80045dc <UART_SetConfig+0x6f4>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	f003 020f 	and.w	r2, r3, #15
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4442      	add	r2, r8
 8004424:	609a      	str	r2, [r3, #8]
 8004426:	e0d0      	b.n	80045ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004428:	f7fe fa4e 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 800442c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	469a      	mov	sl, r3
 8004432:	f04f 0b00 	mov.w	fp, #0
 8004436:	46d0      	mov	r8, sl
 8004438:	46d9      	mov	r9, fp
 800443a:	eb18 0308 	adds.w	r3, r8, r8
 800443e:	eb49 0409 	adc.w	r4, r9, r9
 8004442:	4698      	mov	r8, r3
 8004444:	46a1      	mov	r9, r4
 8004446:	eb18 080a 	adds.w	r8, r8, sl
 800444a:	eb49 090b 	adc.w	r9, r9, fp
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800445a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800445e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004462:	4688      	mov	r8, r1
 8004464:	4691      	mov	r9, r2
 8004466:	eb1a 0508 	adds.w	r5, sl, r8
 800446a:	eb4b 0609 	adc.w	r6, fp, r9
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4619      	mov	r1, r3
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	f04f 0400 	mov.w	r4, #0
 8004480:	0094      	lsls	r4, r2, #2
 8004482:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004486:	008b      	lsls	r3, r1, #2
 8004488:	461a      	mov	r2, r3
 800448a:	4623      	mov	r3, r4
 800448c:	4628      	mov	r0, r5
 800448e:	4631      	mov	r1, r6
 8004490:	f7fb feb8 	bl	8000204 <__aeabi_uldivmod>
 8004494:	4603      	mov	r3, r0
 8004496:	460c      	mov	r4, r1
 8004498:	461a      	mov	r2, r3
 800449a:	4b50      	ldr	r3, [pc, #320]	; (80045dc <UART_SetConfig+0x6f4>)
 800449c:	fba3 2302 	umull	r2, r3, r3, r2
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	469b      	mov	fp, r3
 80044aa:	f04f 0c00 	mov.w	ip, #0
 80044ae:	46d9      	mov	r9, fp
 80044b0:	46e2      	mov	sl, ip
 80044b2:	eb19 0309 	adds.w	r3, r9, r9
 80044b6:	eb4a 040a 	adc.w	r4, sl, sl
 80044ba:	4699      	mov	r9, r3
 80044bc:	46a2      	mov	sl, r4
 80044be:	eb19 090b 	adds.w	r9, r9, fp
 80044c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044da:	4689      	mov	r9, r1
 80044dc:	4692      	mov	sl, r2
 80044de:	eb1b 0509 	adds.w	r5, fp, r9
 80044e2:	eb4c 060a 	adc.w	r6, ip, sl
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4619      	mov	r1, r3
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	f04f 0400 	mov.w	r4, #0
 80044f8:	0094      	lsls	r4, r2, #2
 80044fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044fe:	008b      	lsls	r3, r1, #2
 8004500:	461a      	mov	r2, r3
 8004502:	4623      	mov	r3, r4
 8004504:	4628      	mov	r0, r5
 8004506:	4631      	mov	r1, r6
 8004508:	f7fb fe7c 	bl	8000204 <__aeabi_uldivmod>
 800450c:	4603      	mov	r3, r0
 800450e:	460c      	mov	r4, r1
 8004510:	461a      	mov	r2, r3
 8004512:	4b32      	ldr	r3, [pc, #200]	; (80045dc <UART_SetConfig+0x6f4>)
 8004514:	fba3 1302 	umull	r1, r3, r3, r2
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	2164      	movs	r1, #100	; 0x64
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	3332      	adds	r3, #50	; 0x32
 8004526:	4a2d      	ldr	r2, [pc, #180]	; (80045dc <UART_SetConfig+0x6f4>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004532:	4498      	add	r8, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	469b      	mov	fp, r3
 8004538:	f04f 0c00 	mov.w	ip, #0
 800453c:	46d9      	mov	r9, fp
 800453e:	46e2      	mov	sl, ip
 8004540:	eb19 0309 	adds.w	r3, r9, r9
 8004544:	eb4a 040a 	adc.w	r4, sl, sl
 8004548:	4699      	mov	r9, r3
 800454a:	46a2      	mov	sl, r4
 800454c:	eb19 090b 	adds.w	r9, r9, fp
 8004550:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004554:	f04f 0100 	mov.w	r1, #0
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004560:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004564:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004568:	4689      	mov	r9, r1
 800456a:	4692      	mov	sl, r2
 800456c:	eb1b 0509 	adds.w	r5, fp, r9
 8004570:	eb4c 060a 	adc.w	r6, ip, sl
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4619      	mov	r1, r3
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	f04f 0400 	mov.w	r4, #0
 8004586:	0094      	lsls	r4, r2, #2
 8004588:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800458c:	008b      	lsls	r3, r1, #2
 800458e:	461a      	mov	r2, r3
 8004590:	4623      	mov	r3, r4
 8004592:	4628      	mov	r0, r5
 8004594:	4631      	mov	r1, r6
 8004596:	f7fb fe35 	bl	8000204 <__aeabi_uldivmod>
 800459a:	4603      	mov	r3, r0
 800459c:	460c      	mov	r4, r1
 800459e:	461a      	mov	r2, r3
 80045a0:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <UART_SetConfig+0x6f4>)
 80045a2:	fba3 1302 	umull	r1, r3, r3, r2
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	2164      	movs	r1, #100	; 0x64
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	3332      	adds	r3, #50	; 0x32
 80045b4:	4a09      	ldr	r2, [pc, #36]	; (80045dc <UART_SetConfig+0x6f4>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	f003 020f 	and.w	r2, r3, #15
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4442      	add	r2, r8
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	e7ff      	b.n	80045ca <UART_SetConfig+0x6e2>
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d4:	40011000 	.word	0x40011000
 80045d8:	40011400 	.word	0x40011400
 80045dc:	51eb851f 	.word	0x51eb851f

080045e0 <__libc_init_array>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	4e0d      	ldr	r6, [pc, #52]	; (8004618 <__libc_init_array+0x38>)
 80045e4:	4c0d      	ldr	r4, [pc, #52]	; (800461c <__libc_init_array+0x3c>)
 80045e6:	1ba4      	subs	r4, r4, r6
 80045e8:	10a4      	asrs	r4, r4, #2
 80045ea:	2500      	movs	r5, #0
 80045ec:	42a5      	cmp	r5, r4
 80045ee:	d109      	bne.n	8004604 <__libc_init_array+0x24>
 80045f0:	4e0b      	ldr	r6, [pc, #44]	; (8004620 <__libc_init_array+0x40>)
 80045f2:	4c0c      	ldr	r4, [pc, #48]	; (8004624 <__libc_init_array+0x44>)
 80045f4:	f000 f820 	bl	8004638 <_init>
 80045f8:	1ba4      	subs	r4, r4, r6
 80045fa:	10a4      	asrs	r4, r4, #2
 80045fc:	2500      	movs	r5, #0
 80045fe:	42a5      	cmp	r5, r4
 8004600:	d105      	bne.n	800460e <__libc_init_array+0x2e>
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004608:	4798      	blx	r3
 800460a:	3501      	adds	r5, #1
 800460c:	e7ee      	b.n	80045ec <__libc_init_array+0xc>
 800460e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004612:	4798      	blx	r3
 8004614:	3501      	adds	r5, #1
 8004616:	e7f2      	b.n	80045fe <__libc_init_array+0x1e>
 8004618:	08004978 	.word	0x08004978
 800461c:	08004978 	.word	0x08004978
 8004620:	08004978 	.word	0x08004978
 8004624:	0800497c 	.word	0x0800497c

08004628 <memset>:
 8004628:	4402      	add	r2, r0
 800462a:	4603      	mov	r3, r0
 800462c:	4293      	cmp	r3, r2
 800462e:	d100      	bne.n	8004632 <memset+0xa>
 8004630:	4770      	bx	lr
 8004632:	f803 1b01 	strb.w	r1, [r3], #1
 8004636:	e7f9      	b.n	800462c <memset+0x4>

08004638 <_init>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr

08004644 <_fini>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	bf00      	nop
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr
