
stm32f446-receiver-blue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004894  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd8  08004cd8  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce0  08004ce0  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08004ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200000e8  08004dd0  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08004dd0  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000956b  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019a3  00000000  00000000  00029683  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d0  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f8  00000000  00000000  0002b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e38  00000000  00000000  0002bef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000722d  00000000  00000000  0004cd28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c818a  00000000  00000000  00053f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c0df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000218c  00000000  00000000  0011c15c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004a4c 	.word	0x08004a4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	08004a4c 	.word	0x08004a4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <WMSM42InitRX>:

}

// Настройка на прием
void WMSM42InitRX(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

	  HAL_Delay(3000);
 80005b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005b8:	f001 f844 	bl	8001644 <HAL_Delay>
	  HAL_UART_Abort(&huart6);
 80005bc:	484e      	ldr	r0, [pc, #312]	; (80006f8 <WMSM42InitRX+0x148>)
 80005be:	f002 fee3 	bl	8003388 <HAL_UART_Abort>
	  HAL_UART_Transmit(&huart6, buf_EchoOff, sizeof(buf_EchoOff),100);
 80005c2:	2364      	movs	r3, #100	; 0x64
 80005c4:	2206      	movs	r2, #6
 80005c6:	494d      	ldr	r1, [pc, #308]	; (80006fc <WMSM42InitRX+0x14c>)
 80005c8:	484b      	ldr	r0, [pc, #300]	; (80006f8 <WMSM42InitRX+0x148>)
 80005ca:	f002 fcd8 	bl	8002f7e <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart6, Buff_rx, 10,100);
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	220a      	movs	r2, #10
 80005d2:	494b      	ldr	r1, [pc, #300]	; (8000700 <WMSM42InitRX+0x150>)
 80005d4:	4848      	ldr	r0, [pc, #288]	; (80006f8 <WMSM42InitRX+0x148>)
 80005d6:	f002 fd6b 	bl	80030b0 <HAL_UART_Receive>

	  memset(Buff_rx, 0, sizeof(Buff_rx));
 80005da:	2246      	movs	r2, #70	; 0x46
 80005dc:	2100      	movs	r1, #0
 80005de:	4848      	ldr	r0, [pc, #288]	; (8000700 <WMSM42InitRX+0x150>)
 80005e0:	f003 fe26 	bl	8004230 <memset>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 80005e4:	e00b      	b.n	80005fe <WMSM42InitRX+0x4e>
	{
		  HAL_UART_Transmit(&huart6, buf_com1, sizeof(buf_com1),100);
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	220d      	movs	r2, #13
 80005ea:	4946      	ldr	r1, [pc, #280]	; (8000704 <WMSM42InitRX+0x154>)
 80005ec:	4842      	ldr	r0, [pc, #264]	; (80006f8 <WMSM42InitRX+0x148>)
 80005ee:	f002 fcc6 	bl	8002f7e <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart6, Buff_rx, 7,100);
 80005f2:	2364      	movs	r3, #100	; 0x64
 80005f4:	2207      	movs	r2, #7
 80005f6:	4942      	ldr	r1, [pc, #264]	; (8000700 <WMSM42InitRX+0x150>)
 80005f8:	483f      	ldr	r0, [pc, #252]	; (80006f8 <WMSM42InitRX+0x148>)
 80005fa:	f002 fd59 	bl	80030b0 <HAL_UART_Receive>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 80005fe:	4b40      	ldr	r3, [pc, #256]	; (8000700 <WMSM42InitRX+0x150>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b4f      	cmp	r3, #79	; 0x4f
 8000604:	d003      	beq.n	800060e <WMSM42InitRX+0x5e>
 8000606:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <WMSM42InitRX+0x150>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	2b4b      	cmp	r3, #75	; 0x4b
 800060c:	d1eb      	bne.n	80005e6 <WMSM42InitRX+0x36>
	}
	memset(Buff_rx, 0, sizeof(Buff_rx));
 800060e:	2246      	movs	r2, #70	; 0x46
 8000610:	2100      	movs	r1, #0
 8000612:	483b      	ldr	r0, [pc, #236]	; (8000700 <WMSM42InitRX+0x150>)
 8000614:	f003 fe0c 	bl	8004230 <memset>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 8000618:	e00b      	b.n	8000632 <WMSM42InitRX+0x82>
	{
		  HAL_UART_Transmit(&huart6, buf_com2, sizeof(buf_com2),100);
 800061a:	2364      	movs	r3, #100	; 0x64
 800061c:	2225      	movs	r2, #37	; 0x25
 800061e:	493a      	ldr	r1, [pc, #232]	; (8000708 <WMSM42InitRX+0x158>)
 8000620:	4835      	ldr	r0, [pc, #212]	; (80006f8 <WMSM42InitRX+0x148>)
 8000622:	f002 fcac 	bl	8002f7e <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart6, Buff_rx, 7,100);
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	2207      	movs	r2, #7
 800062a:	4935      	ldr	r1, [pc, #212]	; (8000700 <WMSM42InitRX+0x150>)
 800062c:	4832      	ldr	r0, [pc, #200]	; (80006f8 <WMSM42InitRX+0x148>)
 800062e:	f002 fd3f 	bl	80030b0 <HAL_UART_Receive>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <WMSM42InitRX+0x150>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b4f      	cmp	r3, #79	; 0x4f
 8000638:	d003      	beq.n	8000642 <WMSM42InitRX+0x92>
 800063a:	4b31      	ldr	r3, [pc, #196]	; (8000700 <WMSM42InitRX+0x150>)
 800063c:	785b      	ldrb	r3, [r3, #1]
 800063e:	2b4b      	cmp	r3, #75	; 0x4b
 8000640:	d1eb      	bne.n	800061a <WMSM42InitRX+0x6a>
	}

	memset(Buff_rx, 0, sizeof(Buff_rx));
 8000642:	2246      	movs	r2, #70	; 0x46
 8000644:	2100      	movs	r1, #0
 8000646:	482e      	ldr	r0, [pc, #184]	; (8000700 <WMSM42InitRX+0x150>)
 8000648:	f003 fdf2 	bl	8004230 <memset>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 800064c:	e00b      	b.n	8000666 <WMSM42InitRX+0xb6>
	{
		  HAL_UART_Transmit(&huart6, buf_com3_RX_mode, sizeof(buf_com3_RX_mode),100);
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	220d      	movs	r2, #13
 8000652:	492e      	ldr	r1, [pc, #184]	; (800070c <WMSM42InitRX+0x15c>)
 8000654:	4828      	ldr	r0, [pc, #160]	; (80006f8 <WMSM42InitRX+0x148>)
 8000656:	f002 fc92 	bl	8002f7e <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart6, Buff_rx, 7,100);
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	2207      	movs	r2, #7
 800065e:	4928      	ldr	r1, [pc, #160]	; (8000700 <WMSM42InitRX+0x150>)
 8000660:	4825      	ldr	r0, [pc, #148]	; (80006f8 <WMSM42InitRX+0x148>)
 8000662:	f002 fd25 	bl	80030b0 <HAL_UART_Receive>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <WMSM42InitRX+0x150>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b4f      	cmp	r3, #79	; 0x4f
 800066c:	d003      	beq.n	8000676 <WMSM42InitRX+0xc6>
 800066e:	4b24      	ldr	r3, [pc, #144]	; (8000700 <WMSM42InitRX+0x150>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	2b4b      	cmp	r3, #75	; 0x4b
 8000674:	d1eb      	bne.n	800064e <WMSM42InitRX+0x9e>
	}
	// Запись в регистр длины посылки
	  memset(Buff_rx, 0, sizeof(Buff_rx));
 8000676:	2246      	movs	r2, #70	; 0x46
 8000678:	2100      	movs	r1, #0
 800067a:	4821      	ldr	r0, [pc, #132]	; (8000700 <WMSM42InitRX+0x150>)
 800067c:	f003 fdd8 	bl	8004230 <memset>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 8000680:	e00b      	b.n	800069a <WMSM42InitRX+0xea>
	{
		  HAL_UART_Transmit(&huart6, buf_paylen, sizeof(buf_paylen),100);
 8000682:	2364      	movs	r3, #100	; 0x64
 8000684:	2212      	movs	r2, #18
 8000686:	4922      	ldr	r1, [pc, #136]	; (8000710 <WMSM42InitRX+0x160>)
 8000688:	481b      	ldr	r0, [pc, #108]	; (80006f8 <WMSM42InitRX+0x148>)
 800068a:	f002 fc78 	bl	8002f7e <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart6, Buff_rx, 7,100);
 800068e:	2364      	movs	r3, #100	; 0x64
 8000690:	2207      	movs	r2, #7
 8000692:	491b      	ldr	r1, [pc, #108]	; (8000700 <WMSM42InitRX+0x150>)
 8000694:	4818      	ldr	r0, [pc, #96]	; (80006f8 <WMSM42InitRX+0x148>)
 8000696:	f002 fd0b 	bl	80030b0 <HAL_UART_Receive>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <WMSM42InitRX+0x150>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b4f      	cmp	r3, #79	; 0x4f
 80006a0:	d003      	beq.n	80006aa <WMSM42InitRX+0xfa>
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <WMSM42InitRX+0x150>)
 80006a4:	785b      	ldrb	r3, [r3, #1]
 80006a6:	2b4b      	cmp	r3, #75	; 0x4b
 80006a8:	d1eb      	bne.n	8000682 <WMSM42InitRX+0xd2>
	}
	// Запись в регистр длины преамбулы
	  memset(Buff_rx, 0, sizeof(Buff_rx));
 80006aa:	2246      	movs	r2, #70	; 0x46
 80006ac:	2100      	movs	r1, #0
 80006ae:	4814      	ldr	r0, [pc, #80]	; (8000700 <WMSM42InitRX+0x150>)
 80006b0:	f003 fdbe 	bl	8004230 <memset>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 80006b4:	e00b      	b.n	80006ce <WMSM42InitRX+0x11e>
	{
		  HAL_UART_Transmit(&huart6, buf_preamlen, sizeof(buf_preamlen),100);
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	2212      	movs	r2, #18
 80006ba:	4916      	ldr	r1, [pc, #88]	; (8000714 <WMSM42InitRX+0x164>)
 80006bc:	480e      	ldr	r0, [pc, #56]	; (80006f8 <WMSM42InitRX+0x148>)
 80006be:	f002 fc5e 	bl	8002f7e <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart6, Buff_rx, 7,100);
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	2207      	movs	r2, #7
 80006c6:	490e      	ldr	r1, [pc, #56]	; (8000700 <WMSM42InitRX+0x150>)
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <WMSM42InitRX+0x148>)
 80006ca:	f002 fcf1 	bl	80030b0 <HAL_UART_Receive>
	while(Buff_rx[0]!='O' && Buff_rx[1]!='K' )
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <WMSM42InitRX+0x150>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b4f      	cmp	r3, #79	; 0x4f
 80006d4:	d003      	beq.n	80006de <WMSM42InitRX+0x12e>
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <WMSM42InitRX+0x150>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	2b4b      	cmp	r3, #75	; 0x4b
 80006dc:	d1eb      	bne.n	80006b6 <WMSM42InitRX+0x106>
	}


	memset(Buff_rx, 0, sizeof(Buff_rx));
 80006de:	2246      	movs	r2, #70	; 0x46
 80006e0:	2100      	movs	r1, #0
 80006e2:	4807      	ldr	r0, [pc, #28]	; (8000700 <WMSM42InitRX+0x150>)
 80006e4:	f003 fda4 	bl	8004230 <memset>

	  HAL_UART_Receive_DMA(&huart6, Buff_rx, 62+4);
 80006e8:	2242      	movs	r2, #66	; 0x42
 80006ea:	4905      	ldr	r1, [pc, #20]	; (8000700 <WMSM42InitRX+0x150>)
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <WMSM42InitRX+0x148>)
 80006ee:	f002 fdcb 	bl	8003288 <HAL_UART_Receive_DMA>

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000318 	.word	0x20000318
 80006fc:	20000028 	.word	0x20000028
 8000700:	20000124 	.word	0x20000124
 8000704:	20000030 	.word	0x20000030
 8000708:	20000040 	.word	0x20000040
 800070c:	20000068 	.word	0x20000068
 8000710:	20000000 	.word	0x20000000
 8000714:	20000014 	.word	0x20000014

08000718 <transmit>:


// Парсер
void transmit(uint8_t str[27])
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af08      	add	r7, sp, #32
 800071e:	6078      	str	r0, [r7, #4]

				// первый акселерометр
				// Ось Х
				xIntSumFirst = (str[0] & 0x0F) * 10 + (str[1] >> 4); // целочисленная сумма X
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	f003 020f 	and.w	r2, r3, #15
 8000728:	4613      	mov	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	461a      	mov	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3301      	adds	r3, #1
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	091b      	lsrs	r3, r3, #4
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4413      	add	r3, r2
 800073e:	4aa3      	ldr	r2, [pc, #652]	; (80009cc <transmit+0x2b4>)
 8000740:	6013      	str	r3, [r2, #0]
				x5First = str[1] & 0x0F; //перевод правого бита 5го байта
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3301      	adds	r3, #1
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	f003 030f 	and.w	r3, r3, #15
 800074c:	4aa0      	ldr	r2, [pc, #640]	; (80009d0 <transmit+0x2b8>)
 800074e:	6013      	str	r3, [r2, #0]
				x60First = str[2] >> 4; //перевод левого бита 6го байта
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3302      	adds	r3, #2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	091b      	lsrs	r3, r3, #4
 8000758:	b2db      	uxtb	r3, r3
 800075a:	461a      	mov	r2, r3
 800075c:	4b9d      	ldr	r3, [pc, #628]	; (80009d4 <transmit+0x2bc>)
 800075e:	601a      	str	r2, [r3, #0]
				x65First = str[2] & 0x0F; //перевод правого бита 6го байта
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3302      	adds	r3, #2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	4a9b      	ldr	r2, [pc, #620]	; (80009d8 <transmit+0x2c0>)
 800076c:	6013      	str	r3, [r2, #0]
				sprintf(xvalFirst, "+%02d.%d%d ",xIntSumFirst, x5First, x60First);
 800076e:	4b97      	ldr	r3, [pc, #604]	; (80009cc <transmit+0x2b4>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b97      	ldr	r3, [pc, #604]	; (80009d0 <transmit+0x2b8>)
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	4b97      	ldr	r3, [pc, #604]	; (80009d4 <transmit+0x2bc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	460b      	mov	r3, r1
 800077e:	4997      	ldr	r1, [pc, #604]	; (80009dc <transmit+0x2c4>)
 8000780:	4897      	ldr	r0, [pc, #604]	; (80009e0 <transmit+0x2c8>)
 8000782:	f003 fd5d 	bl	8004240 <siprintf>
				if((str[0] >> 4) == 0x01)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	091b      	lsrs	r3, r3, #4
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b01      	cmp	r3, #1
 8000790:	d102      	bne.n	8000798 <transmit+0x80>
					xvalFirst[0] = '-';
 8000792:	4b93      	ldr	r3, [pc, #588]	; (80009e0 <transmit+0x2c8>)
 8000794:	222d      	movs	r2, #45	; 0x2d
 8000796:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumFirst = (str[3] & 0x0F) * 10 + (str[4] >> 4);	// целочисленная сумма Y
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3303      	adds	r3, #3
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	f003 020f 	and.w	r2, r3, #15
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	461a      	mov	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3304      	adds	r3, #4
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	091b      	lsrs	r3, r3, #4
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4413      	add	r3, r2
 80007b8:	4a8a      	ldr	r2, [pc, #552]	; (80009e4 <transmit+0x2cc>)
 80007ba:	6013      	str	r3, [r2, #0]
				y8First = str[4] & 0x0F; //перевод правого бита 8го байта
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3304      	adds	r3, #4
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	4a88      	ldr	r2, [pc, #544]	; (80009e8 <transmit+0x2d0>)
 80007c8:	6013      	str	r3, [r2, #0]
				y90First = str[5] >> 4; //перевод левого бита 9го байта
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3305      	adds	r3, #5
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	091b      	lsrs	r3, r3, #4
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b85      	ldr	r3, [pc, #532]	; (80009ec <transmit+0x2d4>)
 80007d8:	601a      	str	r2, [r3, #0]
				y95First = str[5] & 0x0F; //перевод правого бита 9го байта
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3305      	adds	r3, #5
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	f003 030f 	and.w	r3, r3, #15
 80007e4:	4a82      	ldr	r2, [pc, #520]	; (80009f0 <transmit+0x2d8>)
 80007e6:	6013      	str	r3, [r2, #0]
				sprintf(yvalFirst, "+%02d.%d%d ", yIntSumFirst, y8First, y90First);
 80007e8:	4b7e      	ldr	r3, [pc, #504]	; (80009e4 <transmit+0x2cc>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b7e      	ldr	r3, [pc, #504]	; (80009e8 <transmit+0x2d0>)
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	4b7e      	ldr	r3, [pc, #504]	; (80009ec <transmit+0x2d4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	460b      	mov	r3, r1
 80007f8:	4978      	ldr	r1, [pc, #480]	; (80009dc <transmit+0x2c4>)
 80007fa:	487e      	ldr	r0, [pc, #504]	; (80009f4 <transmit+0x2dc>)
 80007fc:	f003 fd20 	bl	8004240 <siprintf>
				if((str[3] >> 4) == 0x01)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3303      	adds	r3, #3
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	091b      	lsrs	r3, r3, #4
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b01      	cmp	r3, #1
 800080c:	d102      	bne.n	8000814 <transmit+0xfc>
					yvalFirst[0] = '-';
 800080e:	4b79      	ldr	r3, [pc, #484]	; (80009f4 <transmit+0x2dc>)
 8000810:	222d      	movs	r2, #45	; 0x2d
 8000812:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumFirst = (str[6] & 0x0F) * 10 + (str[7] >> 4); //целочисленная сумма Z
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3306      	adds	r3, #6
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f003 020f 	and.w	r2, r3, #15
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3307      	adds	r3, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	091b      	lsrs	r3, r3, #4
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4413      	add	r3, r2
 8000834:	4a70      	ldr	r2, [pc, #448]	; (80009f8 <transmit+0x2e0>)
 8000836:	6013      	str	r3, [r2, #0]
				z11First = str[7] & 0x0F; //перевод правого бита 11го байта
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3307      	adds	r3, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	4a6e      	ldr	r2, [pc, #440]	; (80009fc <transmit+0x2e4>)
 8000844:	6013      	str	r3, [r2, #0]
				z120First = str[8] >> 4; //перевод левого бита 12го байта
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3308      	adds	r3, #8
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	091b      	lsrs	r3, r3, #4
 800084e:	b2db      	uxtb	r3, r3
 8000850:	461a      	mov	r2, r3
 8000852:	4b6b      	ldr	r3, [pc, #428]	; (8000a00 <transmit+0x2e8>)
 8000854:	601a      	str	r2, [r3, #0]
				z125First = str[8] & 0x0F; //перевод правого бита 12го байта
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3308      	adds	r3, #8
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	f003 030f 	and.w	r3, r3, #15
 8000860:	4a68      	ldr	r2, [pc, #416]	; (8000a04 <transmit+0x2ec>)
 8000862:	6013      	str	r3, [r2, #0]
				sprintf(zvalFirst, "+%02d.%d%d ", zIntSumFirst, z11First, z120First);
 8000864:	4b64      	ldr	r3, [pc, #400]	; (80009f8 <transmit+0x2e0>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b64      	ldr	r3, [pc, #400]	; (80009fc <transmit+0x2e4>)
 800086a:	6819      	ldr	r1, [r3, #0]
 800086c:	4b64      	ldr	r3, [pc, #400]	; (8000a00 <transmit+0x2e8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	460b      	mov	r3, r1
 8000874:	4959      	ldr	r1, [pc, #356]	; (80009dc <transmit+0x2c4>)
 8000876:	4864      	ldr	r0, [pc, #400]	; (8000a08 <transmit+0x2f0>)
 8000878:	f003 fce2 	bl	8004240 <siprintf>
				if((str[6] >> 4) == 0x01)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3306      	adds	r3, #6
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	091b      	lsrs	r3, r3, #4
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b01      	cmp	r3, #1
 8000888:	d102      	bne.n	8000890 <transmit+0x178>
					zvalFirst[0] = '-';
 800088a:	4b5f      	ldr	r3, [pc, #380]	; (8000a08 <transmit+0x2f0>)
 800088c:	222d      	movs	r2, #45	; 0x2d
 800088e:	701a      	strb	r2, [r3, #0]

				// второй акселерометр
				// Ось Х
				xIntSumSecond = (str[9] & 0x0F) * 10 + (str[10] >> 4); // целочисленная сумма X
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3309      	adds	r3, #9
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	f003 020f 	and.w	r2, r3, #15
 800089a:	4613      	mov	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	461a      	mov	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	330a      	adds	r3, #10
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4413      	add	r3, r2
 80008b0:	4a56      	ldr	r2, [pc, #344]	; (8000a0c <transmit+0x2f4>)
 80008b2:	6013      	str	r3, [r2, #0]
				x5Second = str[10] & 0x0F; //перевод правого бита 5го байта
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	330a      	adds	r3, #10
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	4a54      	ldr	r2, [pc, #336]	; (8000a10 <transmit+0x2f8>)
 80008c0:	6013      	str	r3, [r2, #0]
				x60Second = str[11] >> 4; //перевод левого бита 6го байта
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	330b      	adds	r3, #11
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <transmit+0x2fc>)
 80008d0:	601a      	str	r2, [r3, #0]
				x65Second = str[11] & 0x0F; //перевод правого бита 6го байта
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	330b      	adds	r3, #11
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f003 030f 	and.w	r3, r3, #15
 80008dc:	4a4e      	ldr	r2, [pc, #312]	; (8000a18 <transmit+0x300>)
 80008de:	6013      	str	r3, [r2, #0]
				sprintf(xvalSecond, "+%02d.%d%d ",xIntSumSecond, x5Second, x60Second);
 80008e0:	4b4a      	ldr	r3, [pc, #296]	; (8000a0c <transmit+0x2f4>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <transmit+0x2f8>)
 80008e6:	6819      	ldr	r1, [r3, #0]
 80008e8:	4b4a      	ldr	r3, [pc, #296]	; (8000a14 <transmit+0x2fc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	460b      	mov	r3, r1
 80008f0:	493a      	ldr	r1, [pc, #232]	; (80009dc <transmit+0x2c4>)
 80008f2:	484a      	ldr	r0, [pc, #296]	; (8000a1c <transmit+0x304>)
 80008f4:	f003 fca4 	bl	8004240 <siprintf>
				if((str[9] >> 4) == 0x01)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3309      	adds	r3, #9
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	091b      	lsrs	r3, r3, #4
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b01      	cmp	r3, #1
 8000904:	d102      	bne.n	800090c <transmit+0x1f4>
					xvalSecond[0] = '-';
 8000906:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <transmit+0x304>)
 8000908:	222d      	movs	r2, #45	; 0x2d
 800090a:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumSecond = (str[12] & 0x0F) * 10 + (str[13] >> 4);	// целочисленная сумма Y
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	330c      	adds	r3, #12
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	f003 020f 	and.w	r2, r3, #15
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	461a      	mov	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	330d      	adds	r3, #13
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	091b      	lsrs	r3, r3, #4
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4413      	add	r3, r2
 800092c:	4a3c      	ldr	r2, [pc, #240]	; (8000a20 <transmit+0x308>)
 800092e:	6013      	str	r3, [r2, #0]
				y8Second = str[13] & 0x0F; //перевод правого бита 8го байта
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	330d      	adds	r3, #13
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	4a3a      	ldr	r2, [pc, #232]	; (8000a24 <transmit+0x30c>)
 800093c:	6013      	str	r3, [r2, #0]
				y90Second = str[14] >> 4; //перевод левого бита 9го байта
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	330e      	adds	r3, #14
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	b2db      	uxtb	r3, r3
 8000948:	461a      	mov	r2, r3
 800094a:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <transmit+0x310>)
 800094c:	601a      	str	r2, [r3, #0]
				y95Second = str[14] & 0x0F; //перевод правого бита 9го байта
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	330e      	adds	r3, #14
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	4a34      	ldr	r2, [pc, #208]	; (8000a2c <transmit+0x314>)
 800095a:	6013      	str	r3, [r2, #0]
				sprintf(yvalSecond, "+%02d.%d%d ", yIntSumSecond, y8Second, y90Second);
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <transmit+0x308>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <transmit+0x30c>)
 8000962:	6819      	ldr	r1, [r3, #0]
 8000964:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <transmit+0x310>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	460b      	mov	r3, r1
 800096c:	491b      	ldr	r1, [pc, #108]	; (80009dc <transmit+0x2c4>)
 800096e:	4830      	ldr	r0, [pc, #192]	; (8000a30 <transmit+0x318>)
 8000970:	f003 fc66 	bl	8004240 <siprintf>
				if((str[12] >> 4) == 0x01)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	330c      	adds	r3, #12
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	091b      	lsrs	r3, r3, #4
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b01      	cmp	r3, #1
 8000980:	d102      	bne.n	8000988 <transmit+0x270>
					yvalSecond[0] = '-';
 8000982:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <transmit+0x318>)
 8000984:	222d      	movs	r2, #45	; 0x2d
 8000986:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumSecond = (str[15] & 0x0F) * 10 + (str[16] >> 4); //целочисленная сумма Z
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	330f      	adds	r3, #15
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f003 020f 	and.w	r2, r3, #15
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	461a      	mov	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3310      	adds	r3, #16
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4413      	add	r3, r2
 80009a8:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <transmit+0x31c>)
 80009aa:	6013      	str	r3, [r2, #0]
				z11Second = str[16] & 0x0F; //перевод правого бита 11го байта
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3310      	adds	r3, #16
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <transmit+0x320>)
 80009b8:	6013      	str	r3, [r2, #0]
				z120Second = str[17] >> 4; //перевод левого бита 12го байта
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3311      	adds	r3, #17
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	091b      	lsrs	r3, r3, #4
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <transmit+0x324>)
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e039      	b.n	8000a40 <transmit+0x328>
 80009cc:	200003e8 	.word	0x200003e8
 80009d0:	200002f8 	.word	0x200002f8
 80009d4:	200003c8 	.word	0x200003c8
 80009d8:	20000304 	.word	0x20000304
 80009dc:	08004a64 	.word	0x08004a64
 80009e0:	200001e8 	.word	0x200001e8
 80009e4:	20000298 	.word	0x20000298
 80009e8:	2000029c 	.word	0x2000029c
 80009ec:	200001fc 	.word	0x200001fc
 80009f0:	20000228 	.word	0x20000228
 80009f4:	20000200 	.word	0x20000200
 80009f8:	2000030c 	.word	0x2000030c
 80009fc:	20000210 	.word	0x20000210
 8000a00:	2000020c 	.word	0x2000020c
 8000a04:	20000300 	.word	0x20000300
 8000a08:	20000310 	.word	0x20000310
 8000a0c:	20000294 	.word	0x20000294
 8000a10:	200003cc 	.word	0x200003cc
 8000a14:	20000208 	.word	0x20000208
 8000a18:	20000290 	.word	0x20000290
 8000a1c:	200001cc 	.word	0x200001cc
 8000a20:	20000224 	.word	0x20000224
 8000a24:	200002fc 	.word	0x200002fc
 8000a28:	2000035c 	.word	0x2000035c
 8000a2c:	20000120 	.word	0x20000120
 8000a30:	200002a0 	.word	0x200002a0
 8000a34:	2000011c 	.word	0x2000011c
 8000a38:	200003f0 	.word	0x200003f0
 8000a3c:	20000214 	.word	0x20000214
				z125Second = str[17] & 0x0F; //перевод правого бита 12го байта
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3311      	adds	r3, #17
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	4a79      	ldr	r2, [pc, #484]	; (8000c30 <transmit+0x518>)
 8000a4c:	6013      	str	r3, [r2, #0]
				sprintf(zvalSecond, "+%02d.%d%d ", zIntSumSecond, z11Second, z120Second);
 8000a4e:	4b79      	ldr	r3, [pc, #484]	; (8000c34 <transmit+0x51c>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b79      	ldr	r3, [pc, #484]	; (8000c38 <transmit+0x520>)
 8000a54:	6819      	ldr	r1, [r3, #0]
 8000a56:	4b79      	ldr	r3, [pc, #484]	; (8000c3c <transmit+0x524>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	4978      	ldr	r1, [pc, #480]	; (8000c40 <transmit+0x528>)
 8000a60:	4878      	ldr	r0, [pc, #480]	; (8000c44 <transmit+0x52c>)
 8000a62:	f003 fbed 	bl	8004240 <siprintf>
				if((str[15] >> 4) == 0x01)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	330f      	adds	r3, #15
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	091b      	lsrs	r3, r3, #4
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d102      	bne.n	8000a7a <transmit+0x362>
					zvalSecond[0] = '-';
 8000a74:	4b73      	ldr	r3, [pc, #460]	; (8000c44 <transmit+0x52c>)
 8000a76:	222d      	movs	r2, #45	; 0x2d
 8000a78:	701a      	strb	r2, [r3, #0]

				// третий акселерометр
				// Ось Х
				xIntSumThird = (str[18] & 0x0F) * 10 + (str[19] >> 4); // целочисленная сумма X
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3312      	adds	r3, #18
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	f003 020f 	and.w	r2, r3, #15
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3313      	adds	r3, #19
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	091b      	lsrs	r3, r3, #4
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a6b      	ldr	r2, [pc, #428]	; (8000c48 <transmit+0x530>)
 8000a9c:	6013      	str	r3, [r2, #0]
				x5Third = str[19] & 0x0F; //перевод правого бита 5го байта
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3313      	adds	r3, #19
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	f003 030f 	and.w	r3, r3, #15
 8000aa8:	4a68      	ldr	r2, [pc, #416]	; (8000c4c <transmit+0x534>)
 8000aaa:	6013      	str	r3, [r2, #0]
				x60Third = str[20] >> 4; //перевод левого бита 6го байта
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3314      	adds	r3, #20
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b65      	ldr	r3, [pc, #404]	; (8000c50 <transmit+0x538>)
 8000aba:	601a      	str	r2, [r3, #0]
				x65Third = str[20] & 0x0F; //перевод правого бита 6го байта
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3314      	adds	r3, #20
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	4a63      	ldr	r2, [pc, #396]	; (8000c54 <transmit+0x53c>)
 8000ac8:	6013      	str	r3, [r2, #0]
				sprintf(xvalThird, "+%02d.%d%d ",xIntSumThird, x5Third, x60Third);
 8000aca:	4b5f      	ldr	r3, [pc, #380]	; (8000c48 <transmit+0x530>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b5f      	ldr	r3, [pc, #380]	; (8000c4c <transmit+0x534>)
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	4b5f      	ldr	r3, [pc, #380]	; (8000c50 <transmit+0x538>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	4959      	ldr	r1, [pc, #356]	; (8000c40 <transmit+0x528>)
 8000adc:	485e      	ldr	r0, [pc, #376]	; (8000c58 <transmit+0x540>)
 8000ade:	f003 fbaf 	bl	8004240 <siprintf>
				if((str[18] >> 4) == 0x01)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3312      	adds	r3, #18
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	091b      	lsrs	r3, r3, #4
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d102      	bne.n	8000af6 <transmit+0x3de>
					xvalThird[0] = '-';
 8000af0:	4b59      	ldr	r3, [pc, #356]	; (8000c58 <transmit+0x540>)
 8000af2:	222d      	movs	r2, #45	; 0x2d
 8000af4:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumThird = (str[21] & 0x0F) * 10 + (str[22] >> 4);	// целочисленная сумма Y
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3315      	adds	r3, #21
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	f003 020f 	and.w	r2, r3, #15
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3316      	adds	r3, #22
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	4413      	add	r3, r2
 8000b16:	4a51      	ldr	r2, [pc, #324]	; (8000c5c <transmit+0x544>)
 8000b18:	6013      	str	r3, [r2, #0]
				y8Third = str[22] & 0x0F; //перевод правого бита 8го байта
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3316      	adds	r3, #22
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	f003 030f 	and.w	r3, r3, #15
 8000b24:	4a4e      	ldr	r2, [pc, #312]	; (8000c60 <transmit+0x548>)
 8000b26:	6013      	str	r3, [r2, #0]
				y90Third = str[23] >> 4; //перевод левого бита 9го байта
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3317      	adds	r3, #23
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	091b      	lsrs	r3, r3, #4
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b4b      	ldr	r3, [pc, #300]	; (8000c64 <transmit+0x54c>)
 8000b36:	601a      	str	r2, [r3, #0]
				y95Third = str[23] & 0x0F; //перевод правого бита 9го байта
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3317      	adds	r3, #23
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	4a49      	ldr	r2, [pc, #292]	; (8000c68 <transmit+0x550>)
 8000b44:	6013      	str	r3, [r2, #0]
				sprintf(yvalThird, "+%02d.%d%d ", yIntSumThird, y8Third, y90Third);
 8000b46:	4b45      	ldr	r3, [pc, #276]	; (8000c5c <transmit+0x544>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <transmit+0x548>)
 8000b4c:	6819      	ldr	r1, [r3, #0]
 8000b4e:	4b45      	ldr	r3, [pc, #276]	; (8000c64 <transmit+0x54c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	460b      	mov	r3, r1
 8000b56:	493a      	ldr	r1, [pc, #232]	; (8000c40 <transmit+0x528>)
 8000b58:	4844      	ldr	r0, [pc, #272]	; (8000c6c <transmit+0x554>)
 8000b5a:	f003 fb71 	bl	8004240 <siprintf>
				if((str[21] >> 4) == 0x01)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3315      	adds	r3, #21
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	091b      	lsrs	r3, r3, #4
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d102      	bne.n	8000b72 <transmit+0x45a>
					yvalThird[0] = '-';
 8000b6c:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <transmit+0x554>)
 8000b6e:	222d      	movs	r2, #45	; 0x2d
 8000b70:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumThird = (str[24] & 0x0F) * 10 + (str[25] >> 4); //целочисленная сумма Z
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3318      	adds	r3, #24
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	f003 020f 	and.w	r2, r3, #15
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	461a      	mov	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3319      	adds	r3, #25
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	091b      	lsrs	r3, r3, #4
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4413      	add	r3, r2
 8000b92:	4a37      	ldr	r2, [pc, #220]	; (8000c70 <transmit+0x558>)
 8000b94:	6013      	str	r3, [r2, #0]
				z11Third = str[25] & 0x0F; //перевод правого бита 11го байта
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3319      	adds	r3, #25
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	4a34      	ldr	r2, [pc, #208]	; (8000c74 <transmit+0x55c>)
 8000ba2:	6013      	str	r3, [r2, #0]
				z120Third = str[26] >> 4; //перевод левого бита 12го байта
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	331a      	adds	r3, #26
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	091b      	lsrs	r3, r3, #4
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <transmit+0x560>)
 8000bb2:	601a      	str	r2, [r3, #0]
				z125Third = str[26] & 0x0F; //перевод правого бита 12го байта
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	331a      	adds	r3, #26
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	4a2f      	ldr	r2, [pc, #188]	; (8000c7c <transmit+0x564>)
 8000bc0:	6013      	str	r3, [r2, #0]
				sprintf(zvalThird, "+%02d.%d%d ", zIntSumThird, z11Third, z120Third);
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <transmit+0x558>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <transmit+0x55c>)
 8000bc8:	6819      	ldr	r1, [r3, #0]
 8000bca:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <transmit+0x560>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	491b      	ldr	r1, [pc, #108]	; (8000c40 <transmit+0x528>)
 8000bd4:	482a      	ldr	r0, [pc, #168]	; (8000c80 <transmit+0x568>)
 8000bd6:	f003 fb33 	bl	8004240 <siprintf>
				if((str[24] >> 4) == 0x01)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3318      	adds	r3, #24
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d102      	bne.n	8000bee <transmit+0x4d6>
					zvalThird[0] = '-';
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <transmit+0x568>)
 8000bea:	222d      	movs	r2, #45	; 0x2d
 8000bec:	701a      	strb	r2, [r3, #0]

			sprintf(str1, "%s%s%s%s%s%s%s%s%s\n", xvalFirst, yvalFirst, zvalFirst, xvalSecond, yvalSecond, zvalSecond, xvalThird, yvalThird, zvalThird);
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <transmit+0x568>)
 8000bf0:	9306      	str	r3, [sp, #24]
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <transmit+0x554>)
 8000bf4:	9305      	str	r3, [sp, #20]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <transmit+0x540>)
 8000bf8:	9304      	str	r3, [sp, #16]
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <transmit+0x52c>)
 8000bfc:	9303      	str	r3, [sp, #12]
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <transmit+0x56c>)
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <transmit+0x570>)
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <transmit+0x574>)
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <transmit+0x578>)
 8000c0c:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <transmit+0x57c>)
 8000c0e:	4922      	ldr	r1, [pc, #136]	; (8000c98 <transmit+0x580>)
 8000c10:	4822      	ldr	r0, [pc, #136]	; (8000c9c <transmit+0x584>)
 8000c12:	f003 fb15 	bl	8004240 <siprintf>
			if(UsartStatus==HAL_BUSY)
			{
			//	HAL_UART_Abort(&huart2);
			//	HAL_UART_Init(&huart2);
			}
			UsartStatus=HAL_UART_Transmit_IT(&huart2, (uint8_t*)str1, 64);
 8000c16:	2240      	movs	r2, #64	; 0x40
 8000c18:	4920      	ldr	r1, [pc, #128]	; (8000c9c <transmit+0x584>)
 8000c1a:	4821      	ldr	r0, [pc, #132]	; (8000ca0 <transmit+0x588>)
 8000c1c:	f002 faee 	bl	80031fc <HAL_UART_Transmit_IT>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <transmit+0x58c>)
 8000c26:	701a      	strb	r2, [r3, #0]




}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200001d4 	.word	0x200001d4
 8000c34:	2000011c 	.word	0x2000011c
 8000c38:	200003f0 	.word	0x200003f0
 8000c3c:	20000214 	.word	0x20000214
 8000c40:	08004a64 	.word	0x08004a64
 8000c44:	20000218 	.word	0x20000218
 8000c48:	200003ec 	.word	0x200003ec
 8000c4c:	2000028c 	.word	0x2000028c
 8000c50:	200001f4 	.word	0x200001f4
 8000c54:	200002a8 	.word	0x200002a8
 8000c58:	20000360 	.word	0x20000360
 8000c5c:	20000308 	.word	0x20000308
 8000c60:	20000220 	.word	0x20000220
 8000c64:	200001e0 	.word	0x200001e0
 8000c68:	200001f0 	.word	0x200001f0
 8000c6c:	200001d8 	.word	0x200001d8
 8000c70:	200003d0 	.word	0x200003d0
 8000c74:	200001e4 	.word	0x200001e4
 8000c78:	20000358 	.word	0x20000358
 8000c7c:	200001f8 	.word	0x200001f8
 8000c80:	200002f0 	.word	0x200002f0
 8000c84:	200002a0 	.word	0x200002a0
 8000c88:	200001cc 	.word	0x200001cc
 8000c8c:	20000310 	.word	0x20000310
 8000c90:	20000200 	.word	0x20000200
 8000c94:	200001e8 	.word	0x200001e8
 8000c98:	08004a70 	.word	0x08004a70
 8000c9c:	200002ac 	.word	0x200002ac
 8000ca0:	20000368 	.word	0x20000368
 8000ca4:	2000010c 	.word	0x2000010c

08000ca8 <powx>:
	}

}
// Функция нахождения степени числа
int powx(int base, int exponent)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	int result = 1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
	for (int i=exponent; i > 0; i--)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	e007      	b.n	8000ccc <powx+0x24>
	{
		result = result * base;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	fb02 f303 	mul.w	r3, r2, r3
 8000cc4:	60fb      	str	r3, [r7, #12]
	for (int i=exponent; i > 0; i--)
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	dcf4      	bgt.n	8000cbc <powx+0x14>
	}
	return result;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <Mass_toData8>:

// Функция перевода массива символов Hex в массив чисел
void Mass_toData8(uint8_t *pcBlock,uint8_t* data8, unsigned short len) //rx_buffer,rx_in-2
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	4613      	mov	r3, r2
 8000cec:	80fb      	strh	r3, [r7, #6]
	unsigned short sum = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	83fb      	strh	r3, [r7, #30]
	int x = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
	for(uint8_t j=0;j<len;j++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	75fb      	strb	r3, [r7, #23]
 8000cfa:	e044      	b.n	8000d86 <Mass_toData8+0xa6>
	{
	for (int i = 0; i < 2; i++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	e033      	b.n	8000d6a <Mass_toData8+0x8a>
	{
		if (pcBlock[2 - i - 1+j*2] > 57)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	f1c3 0201 	rsb	r2, r3, #1
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b39      	cmp	r3, #57	; 0x39
 8000d18:	d90c      	bls.n	8000d34 <Mass_toData8+0x54>
		{
			x = (pcBlock[2 - i - 1+j*2] - 55);
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	f1c3 0201 	rsb	r2, r3, #1
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	3b37      	subs	r3, #55	; 0x37
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	e00b      	b.n	8000d4c <Mass_toData8+0x6c>
		}
		else
		{
			x = (pcBlock[2 - i - 1+j*2] - 48);
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	f1c3 0201 	rsb	r2, r3, #1
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	461a      	mov	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4413      	add	r3, r2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	3b30      	subs	r3, #48	; 0x30
 8000d4a:	61bb      	str	r3, [r7, #24]
		}
		sum += x * powx(16, i);
 8000d4c:	6939      	ldr	r1, [r7, #16]
 8000d4e:	2010      	movs	r0, #16
 8000d50:	f7ff ffaa 	bl	8000ca8 <powx>
 8000d54:	4602      	mov	r2, r0
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	fb03 f302 	mul.w	r3, r3, r2
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	8bfb      	ldrh	r3, [r7, #30]
 8000d60:	4413      	add	r3, r2
 8000d62:	83fb      	strh	r3, [r7, #30]
	for (int i = 0; i < 2; i++)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	3301      	adds	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	ddc8      	ble.n	8000d02 <Mass_toData8+0x22>
	}
	data8[j]=sum;
 8000d70:	7dfb      	ldrb	r3, [r7, #23]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	4413      	add	r3, r2
 8000d76:	8bfa      	ldrh	r2, [r7, #30]
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	701a      	strb	r2, [r3, #0]
	sum=0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	83fb      	strh	r3, [r7, #30]
	for(uint8_t j=0;j<len;j++)
 8000d80:	7dfb      	ldrb	r3, [r7, #23]
 8000d82:	3301      	adds	r3, #1
 8000d84:	75fb      	strb	r3, [r7, #23]
 8000d86:	7dfb      	ldrb	r3, [r7, #23]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	88fa      	ldrh	r2, [r7, #6]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8b5      	bhi.n	8000cfc <Mass_toData8+0x1c>
	}

}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};

unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da8:	81fb      	strh	r3, [r7, #14]

    while (len--)
 8000daa:	e012      	b.n	8000dd2 <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 8000dac:	89fb      	ldrh	r3, [r7, #14]
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	1c59      	adds	r1, r3, #1
 8000dbe:	6079      	str	r1, [r7, #4]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4043      	eors	r3, r0
 8000dc4:	4909      	ldr	r1, [pc, #36]	; (8000dec <Crc16+0x54>)
 8000dc6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	4053      	eors	r3, r2
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8000dd2:	887b      	ldrh	r3, [r7, #2]
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	807a      	strh	r2, [r7, #2]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e7      	bne.n	8000dac <Crc16+0x14>

    return crc;
 8000ddc:	89fb      	ldrh	r3, [r7, #14]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	08004a84 	.word	0x08004a84

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fbb4 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f830 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 f92a 	bl	8001054 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e00:	f000 f8f2 	bl	8000fe8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e04:	f000 f89c 	bl	8000f40 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000e08:	f000 f8c4 	bl	8000f94 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  WMSM42InitRX();
 8000e0c:	f7ff fbd0 	bl	80005b0 <WMSM42InitRX>
  reciveTime=HAL_GetTick();
 8000e10:	f000 fc0c 	bl	800162c <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <main+0x60>)
 8000e18:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(readFlag==1)
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <main+0x64>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d105      	bne.n	8000e2e <main+0x3e>
	  {
		  readFlag=0;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <main+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
		  transmit(str);
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <main+0x68>)
 8000e2a:	f7ff fc75 	bl	8000718 <transmit>
	  }
	  if(HAL_GetTick()-reciveTime>5000)
 8000e2e:	f000 fbfd 	bl	800162c <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <main+0x60>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d9eb      	bls.n	8000e1a <main+0x2a>
		 // HAL_UART_Abort(&huart6);
		//  HAL_UART_Init(&huart6);
		//  WMSM42InitRX();


		  reciveTime=HAL_GetTick();
 8000e42:	f000 fbf3 	bl	800162c <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	4b01      	ldr	r3, [pc, #4]	; (8000e50 <main+0x60>)
 8000e4a:	601a      	str	r2, [r3, #0]
	  if(readFlag==1)
 8000e4c:	e7e5      	b.n	8000e1a <main+0x2a>
 8000e4e:	bf00      	nop
 8000e50:	20000108 	.word	0x20000108
 8000e54:	20000104 	.word	0x20000104
 8000e58:	200003a8 	.word	0x200003a8

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	; 0x50
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	2234      	movs	r2, #52	; 0x34
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 f9e0 	bl	8004230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	f107 0308 	add.w	r3, r7, #8
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <SystemClock_Config+0xdc>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a2b      	ldr	r2, [pc, #172]	; (8000f38 <SystemClock_Config+0xdc>)
 8000e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <SystemClock_Config+0xdc>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <SystemClock_Config+0xe0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a25      	ldr	r2, [pc, #148]	; (8000f3c <SystemClock_Config+0xe0>)
 8000ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <SystemClock_Config+0xe0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ed0:	23b4      	movs	r3, #180	; 0xb4
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fda3 	bl	8002a30 <HAL_RCC_OscConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ef0:	f000 f952 	bl	8001198 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ef4:	f001 fa92 	bl	800241c <HAL_PWREx_EnableOverDrive>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000efe:	f000 f94b 	bl	8001198 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f02:	230f      	movs	r3, #15
 8000f04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f06:	2302      	movs	r3, #2
 8000f08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f18:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2105      	movs	r1, #5
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 facb 	bl	80024bc <HAL_RCC_ClockConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f2c:	f000 f934 	bl	8001198 <Error_Handler>
  }
}
 8000f30:	bf00      	nop
 8000f32:	3750      	adds	r7, #80	; 0x50
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40007000 	.word	0x40007000

08000f40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_USART2_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f4c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f78:	f001 ffb4 	bl	8002ee4 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f82:	f000 f909 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000368 	.word	0x20000368
 8000f90:	40004400 	.word	0x40004400

08000f94 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <MX_USART6_UART_Init+0x50>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fcc:	f001 ff8a 	bl	8002ee4 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fd6:	f000 f8df 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000318 	.word	0x20000318
 8000fe4:	40011400 	.word	0x40011400

08000fe8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_DMA_Init+0x68>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <MX_DMA_Init+0x68>)
 8000ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_DMA_Init+0x68>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_DMA_Init+0x68>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <MX_DMA_Init+0x68>)
 8001014:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <MX_DMA_Init+0x68>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2011      	movs	r0, #17
 800102c:	f000 fc07 	bl	800183e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001030:	2011      	movs	r0, #17
 8001032:	f000 fc20 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2039      	movs	r0, #57	; 0x39
 800103c:	f000 fbff 	bl	800183e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001040:	2039      	movs	r0, #57	; 0x39
 8001042:	f000 fc18 	bl	8001876 <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <MX_GPIO_Init+0xb4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a25      	ldr	r2, [pc, #148]	; (8001108 <MX_GPIO_Init+0xb4>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <MX_GPIO_Init+0xb4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_GPIO_Init+0xb4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <MX_GPIO_Init+0xb4>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_GPIO_Init+0xb4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_GPIO_Init+0xb4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <MX_GPIO_Init+0xb4>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_GPIO_Init+0xb4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	210e      	movs	r1, #14
 80010c2:	4812      	ldr	r0, [pc, #72]	; (800110c <MX_GPIO_Init+0xb8>)
 80010c4:	f001 f990 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <MX_GPIO_Init+0xbc>)
 80010d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4619      	mov	r1, r3
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <MX_GPIO_Init+0xb8>)
 80010de:	f000 fff1 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80010e2:	230e      	movs	r3, #14
 80010e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_GPIO_Init+0xb8>)
 80010fa:	f000 ffe3 	bl	80020c4 <HAL_GPIO_Init>

}
 80010fe:	bf00      	nop
 8001100:	3720      	adds	r7, #32
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40020800 	.word	0x40020800
 8001110:	10210000 	.word	0x10210000

08001114 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	if(huart==&huart6)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a17      	ldr	r2, [pc, #92]	; (800117c <HAL_UART_RxCpltCallback+0x68>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d126      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x5e>
	{


	if(Buff_rx[0]!=0)
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_UART_RxCpltCallback+0x6c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d022      	beq.n	8001172 <HAL_UART_RxCpltCallback+0x5e>
	{
		reciveTime=HAL_GetTick();
 800112c:	f000 fa7e 	bl	800162c <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_UART_RxCpltCallback+0x70>)
 8001134:	601a      	str	r2, [r3, #0]
		Mass_toData8(&Buff_rx[6],str,29);
 8001136:	221d      	movs	r2, #29
 8001138:	4913      	ldr	r1, [pc, #76]	; (8001188 <HAL_UART_RxCpltCallback+0x74>)
 800113a:	4814      	ldr	r0, [pc, #80]	; (800118c <HAL_UART_RxCpltCallback+0x78>)
 800113c:	f7ff fdd0 	bl	8000ce0 <Mass_toData8>
		CRC_c=(str[27]<<8)+(str[28]);
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_UART_RxCpltCallback+0x74>)
 8001142:	7edb      	ldrb	r3, [r3, #27]
 8001144:	b29b      	uxth	r3, r3
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_UART_RxCpltCallback+0x74>)
 800114c:	7f1b      	ldrb	r3, [r3, #28]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4413      	add	r3, r2
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_UART_RxCpltCallback+0x7c>)
 8001156:	801a      	strh	r2, [r3, #0]
		if(Crc16(str, 27)==CRC_c)
 8001158:	211b      	movs	r1, #27
 800115a:	480b      	ldr	r0, [pc, #44]	; (8001188 <HAL_UART_RxCpltCallback+0x74>)
 800115c:	f7ff fe1c 	bl	8000d98 <Crc16>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_UART_RxCpltCallback+0x7c>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d102      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x5e>
		{
			readFlag=1;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_UART_RxCpltCallback+0x80>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_UART_Receive_IT(&huart6, Buff_rx, 11);
*/


}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000318 	.word	0x20000318
 8001180:	20000124 	.word	0x20000124
 8001184:	20000108 	.word	0x20000108
 8001188:	200003a8 	.word	0x200003a8
 800118c:	2000012a 	.word	0x2000012a
 8001190:	2000010e 	.word	0x2000010e
 8001194:	20000104 	.word	0x20000104

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011e6:	2007      	movs	r0, #7
 80011e8:	f000 fb1e 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a68      	ldr	r2, [pc, #416]	; (80013b8 <HAL_UART_MspInit+0x1c0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d162      	bne.n	80012e0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a66      	ldr	r2, [pc, #408]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b64      	ldr	r3, [pc, #400]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	4b60      	ldr	r3, [pc, #384]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a5f      	ldr	r2, [pc, #380]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001252:	230c      	movs	r3, #12
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001262:	2307      	movs	r3, #7
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4854      	ldr	r0, [pc, #336]	; (80013c0 <HAL_UART_MspInit+0x1c8>)
 800126e:	f000 ff29 	bl	80020c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001272:	4b54      	ldr	r3, [pc, #336]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 8001274:	4a54      	ldr	r2, [pc, #336]	; (80013c8 <HAL_UART_MspInit+0x1d0>)
 8001276:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001278:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 800127a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800127e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001280:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001286:	4b4f      	ldr	r3, [pc, #316]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800128c:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 800128e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001292:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001294:	4b4b      	ldr	r3, [pc, #300]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129a:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012a0:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012a6:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ac:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012b2:	4844      	ldr	r0, [pc, #272]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 80012b4:	f000 fafa 	bl	80018ac <HAL_DMA_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80012be:	f7ff ff6b 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a3f      	ldr	r2, [pc, #252]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 80012c6:	631a      	str	r2, [r3, #48]	; 0x30
 80012c8:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <HAL_UART_MspInit+0x1cc>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2026      	movs	r0, #38	; 0x26
 80012d4:	f000 fab3 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012d8:	2026      	movs	r0, #38	; 0x26
 80012da:	f000 facc 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80012de:	e067      	b.n	80013b0 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a39      	ldr	r2, [pc, #228]	; (80013cc <HAL_UART_MspInit+0x1d4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d162      	bne.n	80013b0 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b33      	ldr	r3, [pc, #204]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a32      	ldr	r2, [pc, #200]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 80012f4:	f043 0320 	orr.w	r3, r3, #32
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a2b      	ldr	r2, [pc, #172]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_UART_MspInit+0x1c4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001322:	23c0      	movs	r3, #192	; 0xc0
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001332:	2308      	movs	r3, #8
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	4824      	ldr	r0, [pc, #144]	; (80013d0 <HAL_UART_MspInit+0x1d8>)
 800133e:	f000 fec1 	bl	80020c4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 8001344:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <HAL_UART_MspInit+0x1e0>)
 8001346:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 800134a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800134e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 800135e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001362:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 8001372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001376:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 8001386:	f000 fa91 	bl	80018ac <HAL_DMA_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001390:	f7ff ff02 	bl	8001198 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_UART_MspInit+0x1dc>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2047      	movs	r0, #71	; 0x47
 80013a6:	f000 fa4a 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013aa:	2047      	movs	r0, #71	; 0x47
 80013ac:	f000 fa63 	bl	8001876 <HAL_NVIC_EnableIRQ>
}
 80013b0:	bf00      	nop
 80013b2:	3730      	adds	r7, #48	; 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40004400 	.word	0x40004400
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	2000022c 	.word	0x2000022c
 80013c8:	400260a0 	.word	0x400260a0
 80013cc:	40011400 	.word	0x40011400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	2000016c 	.word	0x2000016c
 80013d8:	40026428 	.word	0x40026428

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f8e8 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA1_Stream6_IRQHandler+0x10>)
 800143e:	f000 fbcd 	bl	8001bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000022c 	.word	0x2000022c

0800144c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <USART2_IRQHandler+0x10>)
 8001452:	f002 f81b 	bl	800348c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000368 	.word	0x20000368

08001460 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA2_Stream1_IRQHandler+0x10>)
 8001466:	f000 fbb9 	bl	8001bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000016c 	.word	0x2000016c

08001474 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <USART6_IRQHandler+0x10>)
 800147a:	f002 f807 	bl	800348c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000318 	.word	0x20000318

08001488 <_sbrk>:
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <_sbrk+0x50>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x16>
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <_sbrk+0x50>)
 800149a:	4a10      	ldr	r2, [pc, #64]	; (80014dc <_sbrk+0x54>)
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <_sbrk+0x50>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <_sbrk+0x50>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	466a      	mov	r2, sp
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d907      	bls.n	80014c2 <_sbrk+0x3a>
 80014b2:	f002 fe93 	bl	80041dc <__errno>
 80014b6:	4602      	mov	r2, r0
 80014b8:	230c      	movs	r3, #12
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014c0:	e006      	b.n	80014d0 <_sbrk+0x48>
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <_sbrk+0x50>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a03      	ldr	r2, [pc, #12]	; (80014d8 <_sbrk+0x50>)
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000110 	.word	0x20000110
 80014dc:	20000400 	.word	0x20000400

080014e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <SystemInit+0x28>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ea:	4a07      	ldr	r2, [pc, #28]	; (8001508 <SystemInit+0x28>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SystemInit+0x28>)
 80014f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014fa:	609a      	str	r2, [r3, #8]
#endif
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <Reset_Handler>:
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopFillZerobss+0x14>
 8001510:	2100      	movs	r1, #0
 8001512:	e003      	b.n	800151c <LoopCopyDataInit>

08001514 <CopyDataInit>:
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <LoopFillZerobss+0x18>)
 8001516:	585b      	ldr	r3, [r3, r1]
 8001518:	5043      	str	r3, [r0, r1]
 800151a:	3104      	adds	r1, #4

0800151c <LoopCopyDataInit>:
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <LoopFillZerobss+0x1c>)
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <LoopFillZerobss+0x20>)
 8001520:	1842      	adds	r2, r0, r1
 8001522:	429a      	cmp	r2, r3
 8001524:	d3f6      	bcc.n	8001514 <CopyDataInit>
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LoopFillZerobss+0x24>)
 8001528:	e002      	b.n	8001530 <LoopFillZerobss>

0800152a <FillZerobss>:
 800152a:	2300      	movs	r3, #0
 800152c:	f842 3b04 	str.w	r3, [r2], #4

08001530 <LoopFillZerobss>:
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <LoopFillZerobss+0x28>)
 8001532:	429a      	cmp	r2, r3
 8001534:	d3f9      	bcc.n	800152a <FillZerobss>
 8001536:	f7ff ffd3 	bl	80014e0 <SystemInit>
 800153a:	f002 fe55 	bl	80041e8 <__libc_init_array>
 800153e:	f7ff fc57 	bl	8000df0 <main>
 8001542:	4770      	bx	lr
 8001544:	20020000 	.word	0x20020000
 8001548:	08004ce8 	.word	0x08004ce8
 800154c:	20000000 	.word	0x20000000
 8001550:	200000e8 	.word	0x200000e8
 8001554:	200000e8 	.word	0x200000e8
 8001558:	200003fc 	.word	0x200003fc

0800155c <ADC_IRQHandler>:
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_Init+0x40>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_Init+0x40>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x40>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f94d 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fe08 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f965 	bl	8001892 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e0:	f000 f92d 	bl	800183e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000078 	.word	0x20000078
 80015fc:	20000080 	.word	0x20000080
 8001600:	2000007c 	.word	0x2000007c

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000080 	.word	0x20000080
 8001628:	200003f4 	.word	0x200003f4

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	200003f4 	.word	0x200003f4

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_Delay+0x40>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000080 	.word	0x20000080

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f4:	d301      	bcc.n	80017fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <SysTick_Config+0x40>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001802:	210f      	movs	r1, #15
 8001804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001808:	f7ff ff8e 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SysTick_Config+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SysTick_Config+0x40>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff29 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff3e 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff8e 	bl	800177c <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff31 	bl	80016ec <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa2 	bl	80017e4 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff feb8 	bl	800162c <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e099      	b.n	80019fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e8:	e00f      	b.n	800190a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ea:	f7ff fe9f 	bl	800162c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d908      	bls.n	800190a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2203      	movs	r2, #3
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e078      	b.n	80019fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1e8      	bne.n	80018ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_DMA_Init+0x158>)
 8001924:	4013      	ands	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001936:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001942:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	2b04      	cmp	r3, #4
 8001962:	d107      	bne.n	8001974 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4313      	orrs	r3, r2
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f023 0307 	bic.w	r3, r3, #7
 800198a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4313      	orrs	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2b04      	cmp	r3, #4
 800199c:	d117      	bne.n	80019ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 fb0d 	bl	8001fd0 <DMA_CheckFifoParam>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019ca:	2301      	movs	r3, #1
 80019cc:	e016      	b.n	80019fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fac4 	bl	8001f64 <DMA_CalcBaseAndBitshift>
 80019dc:	4603      	mov	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	223f      	movs	r2, #63	; 0x3f
 80019e6:	409a      	lsls	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	f010803f 	.word	0xf010803f

08001a08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_DMA_Start_IT+0x26>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e040      	b.n	8001ab0 <HAL_DMA_Start_IT+0xa8>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d12f      	bne.n	8001aa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2202      	movs	r2, #2
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fa56 	bl	8001f08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	223f      	movs	r2, #63	; 0x3f
 8001a62:	409a      	lsls	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0216 	orr.w	r2, r2, #22
 8001a76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0208 	orr.w	r2, r2, #8
 8001a8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e005      	b.n	8001aae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ac6:	f7ff fdb1 	bl	800162c <HAL_GetTick>
 8001aca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d008      	beq.n	8001aea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e052      	b.n	8001b90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0216 	bic.w	r2, r2, #22
 8001af8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d103      	bne.n	8001b1a <HAL_DMA_Abort+0x62>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0208 	bic.w	r2, r2, #8
 8001b28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b3a:	e013      	b.n	8001b64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b3c:	f7ff fd76 	bl	800162c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d90c      	bls.n	8001b64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e015      	b.n	8001b90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1e4      	bne.n	8001b3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b76:	223f      	movs	r2, #63	; 0x3f
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00c      	b.n	8001bd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2205      	movs	r2, #5
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001be8:	4b92      	ldr	r3, [pc, #584]	; (8001e34 <HAL_DMA_IRQHandler+0x258>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a92      	ldr	r2, [pc, #584]	; (8001e38 <HAL_DMA_IRQHandler+0x25c>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0a9b      	lsrs	r3, r3, #10
 8001bf4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2208      	movs	r2, #8
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d01a      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0204 	bic.w	r2, r2, #4
 8001c2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	2208      	movs	r2, #8
 8001c36:	409a      	lsls	r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d012      	beq.n	8001c7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f043 0202 	orr.w	r2, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	2204      	movs	r2, #4
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f043 0204 	orr.w	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	2210      	movs	r2, #16
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d043      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d03c      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d018      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d108      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d024      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
 8001d0a:	e01f      	b.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01b      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
 8001d1c:	e016      	b.n	8001d4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d107      	bne.n	8001d3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0208 	bic.w	r2, r2, #8
 8001d3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d50:	2220      	movs	r2, #32
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 808e 	beq.w	8001e7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8086 	beq.w	8001e7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	2220      	movs	r2, #32
 8001d74:	409a      	lsls	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d136      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0216 	bic.w	r2, r2, #22
 8001d94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_DMA_IRQHandler+0x1da>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0208 	bic.w	r2, r2, #8
 8001dc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	223f      	movs	r2, #63	; 0x3f
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d07d      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
        }
        return;
 8001df2:	e078      	b.n	8001ee6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01c      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d108      	bne.n	8001e22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d030      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
 8001e20:	e02b      	b.n	8001e7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d027      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	4798      	blx	r3
 8001e32:	e022      	b.n	8001e7a <HAL_DMA_IRQHandler+0x29e>
 8001e34:	20000078 	.word	0x20000078
 8001e38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10f      	bne.n	8001e6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0210 	bic.w	r2, r2, #16
 8001e58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d032      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d022      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2205      	movs	r2, #5
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d307      	bcc.n	8001ec2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f2      	bne.n	8001ea6 <HAL_DMA_IRQHandler+0x2ca>
 8001ec0:	e000      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ec2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
 8001ee4:	e000      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ee6:	bf00      	nop
    }
  }
}
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop

08001ef0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	d108      	bne.n	8001f48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f46:	e007      	b.n	8001f58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	60da      	str	r2, [r3, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3b10      	subs	r3, #16
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <DMA_CalcBaseAndBitshift+0x64>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f7e:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <DMA_CalcBaseAndBitshift+0x68>)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d909      	bls.n	8001fa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	1d1a      	adds	r2, r3, #4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	659a      	str	r2, [r3, #88]	; 0x58
 8001fa4:	e007      	b.n	8001fb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fae:	f023 0303 	bic.w	r3, r3, #3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	aaaaaaab 	.word	0xaaaaaaab
 8001fcc:	08004c9c 	.word	0x08004c9c

08001fd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d11f      	bne.n	800202a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d855      	bhi.n	800209c <DMA_CheckFifoParam+0xcc>
 8001ff0:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <DMA_CheckFifoParam+0x28>)
 8001ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff6:	bf00      	nop
 8001ff8:	08002009 	.word	0x08002009
 8001ffc:	0800201b 	.word	0x0800201b
 8002000:	08002009 	.word	0x08002009
 8002004:	0800209d 	.word	0x0800209d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d045      	beq.n	80020a0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002018:	e042      	b.n	80020a0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002022:	d13f      	bne.n	80020a4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002028:	e03c      	b.n	80020a4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002032:	d121      	bne.n	8002078 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b03      	cmp	r3, #3
 8002038:	d836      	bhi.n	80020a8 <DMA_CheckFifoParam+0xd8>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <DMA_CheckFifoParam+0x70>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002051 	.word	0x08002051
 8002044:	08002057 	.word	0x08002057
 8002048:	08002051 	.word	0x08002051
 800204c:	08002069 	.word	0x08002069
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
      break;
 8002054:	e02f      	b.n	80020b6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d024      	beq.n	80020ac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002066:	e021      	b.n	80020ac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002070:	d11e      	bne.n	80020b0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002076:	e01b      	b.n	80020b0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d902      	bls.n	8002084 <DMA_CheckFifoParam+0xb4>
 800207e:	2b03      	cmp	r3, #3
 8002080:	d003      	beq.n	800208a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002082:	e018      	b.n	80020b6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
      break;
 8002088:	e015      	b.n	80020b6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00e      	beq.n	80020b4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
      break;
 800209a:	e00b      	b.n	80020b4 <DMA_CheckFifoParam+0xe4>
      break;
 800209c:	bf00      	nop
 800209e:	e00a      	b.n	80020b6 <DMA_CheckFifoParam+0xe6>
      break;
 80020a0:	bf00      	nop
 80020a2:	e008      	b.n	80020b6 <DMA_CheckFifoParam+0xe6>
      break;
 80020a4:	bf00      	nop
 80020a6:	e006      	b.n	80020b6 <DMA_CheckFifoParam+0xe6>
      break;
 80020a8:	bf00      	nop
 80020aa:	e004      	b.n	80020b6 <DMA_CheckFifoParam+0xe6>
      break;
 80020ac:	bf00      	nop
 80020ae:	e002      	b.n	80020b6 <DMA_CheckFifoParam+0xe6>
      break;   
 80020b0:	bf00      	nop
 80020b2:	e000      	b.n	80020b6 <DMA_CheckFifoParam+0xe6>
      break;
 80020b4:	bf00      	nop
    }
  } 
  
  return status; 
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e165      	b.n	80023ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 8154 	bne.w	80023a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d00b      	beq.n	800211e <HAL_GPIO_Init+0x5a>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d007      	beq.n	800211e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002112:	2b11      	cmp	r3, #17
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b12      	cmp	r3, #18
 800211c:	d130      	bne.n	8002180 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 0201 	and.w	r2, r3, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0xfc>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b12      	cmp	r3, #18
 80021be:	d123      	bne.n	8002208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80ae 	beq.w	80023a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <HAL_GPIO_Init+0x2fc>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <HAL_GPIO_Init+0x2fc>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_GPIO_Init+0x2fc>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002266:	4a57      	ldr	r2, [pc, #348]	; (80023c4 <HAL_GPIO_Init+0x300>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4e      	ldr	r2, [pc, #312]	; (80023c8 <HAL_GPIO_Init+0x304>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d025      	beq.n	80022de <HAL_GPIO_Init+0x21a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4d      	ldr	r2, [pc, #308]	; (80023cc <HAL_GPIO_Init+0x308>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01f      	beq.n	80022da <HAL_GPIO_Init+0x216>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4c      	ldr	r2, [pc, #304]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d019      	beq.n	80022d6 <HAL_GPIO_Init+0x212>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4b      	ldr	r2, [pc, #300]	; (80023d4 <HAL_GPIO_Init+0x310>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0x20e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4a      	ldr	r2, [pc, #296]	; (80023d8 <HAL_GPIO_Init+0x314>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00d      	beq.n	80022ce <HAL_GPIO_Init+0x20a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a49      	ldr	r2, [pc, #292]	; (80023dc <HAL_GPIO_Init+0x318>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <HAL_GPIO_Init+0x206>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a48      	ldr	r2, [pc, #288]	; (80023e0 <HAL_GPIO_Init+0x31c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_GPIO_Init+0x202>
 80022c2:	2306      	movs	r3, #6
 80022c4:	e00c      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022c6:	2307      	movs	r3, #7
 80022c8:	e00a      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022ca:	2305      	movs	r3, #5
 80022cc:	e008      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022ce:	2304      	movs	r3, #4
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e004      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e002      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022de:	2300      	movs	r3, #0
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	f002 0203 	and.w	r2, r2, #3
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	4093      	lsls	r3, r2
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f0:	4934      	ldr	r1, [pc, #208]	; (80023c4 <HAL_GPIO_Init+0x300>)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_GPIO_Init+0x320>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002322:	4a30      	ldr	r2, [pc, #192]	; (80023e4 <HAL_GPIO_Init+0x320>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002328:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <HAL_GPIO_Init+0x320>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800234c:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <HAL_GPIO_Init+0x320>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_GPIO_Init+0x320>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002376:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_GPIO_Init+0x320>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_GPIO_Init+0x320>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a0:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_GPIO_Init+0x320>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3301      	adds	r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b0f      	cmp	r3, #15
 80023b0:	f67f ae96 	bls.w	80020e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b4:	bf00      	nop
 80023b6:	3724      	adds	r7, #36	; 0x24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40013800 	.word	0x40013800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020c00 	.word	0x40020c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40021400 	.word	0x40021400
 80023e0:	40021800 	.word	0x40021800
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_PWREx_EnableOverDrive+0x90>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <HAL_PWREx_EnableOverDrive+0x90>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_PWREx_EnableOverDrive+0x90>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002448:	f7ff f8f0 	bl	800162c <HAL_GetTick>
 800244c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800244e:	e009      	b.n	8002464 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002450:	f7ff f8ec 	bl	800162c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800245e:	d901      	bls.n	8002464 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e01f      	b.n	80024a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d1ee      	bne.n	8002450 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002478:	f7ff f8d8 	bl	800162c <HAL_GetTick>
 800247c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800247e:	e009      	b.n	8002494 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002480:	f7ff f8d4 	bl	800162c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800248e:	d901      	bls.n	8002494 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e007      	b.n	80024a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024a0:	d1ee      	bne.n	8002480 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	420e0040 	.word	0x420e0040
 80024b4:	40007000 	.word	0x40007000
 80024b8:	420e0044 	.word	0x420e0044

080024bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0cc      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b68      	ldr	r3, [pc, #416]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d90c      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b65      	ldr	r3, [pc, #404]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800251a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494d      	ldr	r1, [pc, #308]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d044      	beq.n	80025dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d119      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d003      	beq.n	800257a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	2b03      	cmp	r3, #3
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e067      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f023 0203 	bic.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4934      	ldr	r1, [pc, #208]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ac:	f7ff f83e 	bl	800162c <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b4:	f7ff f83a 	bl	800162c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e04f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 020c 	and.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1eb      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d20c      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4916      	ldr	r1, [pc, #88]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f855 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8002646:	4601      	mov	r1, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	fa21 f303 	lsr.w	r3, r1, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe ff9e 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00
 8002678:	40023800 	.word	0x40023800
 800267c:	08004c84 	.word	0x08004c84
 8002680:	20000078 	.word	0x20000078
 8002684:	2000007c 	.word	0x2000007c

08002688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_RCC_GetHCLKFreq+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000078 	.word	0x20000078

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026a4:	f7ff fff0 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026a8:	4601      	mov	r1, r0
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	0a9b      	lsrs	r3, r3, #10
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	08004c94 	.word	0x08004c94

080026c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026cc:	f7ff ffdc 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026d0:	4601      	mov	r1, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0b5b      	lsrs	r3, r3, #13
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4a03      	ldr	r2, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08004c94 	.word	0x08004c94

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800270a:	4bc6      	ldr	r3, [pc, #792]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x334>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b0c      	cmp	r3, #12
 8002714:	f200 817e 	bhi.w	8002a14 <HAL_RCC_GetSysClockFreq+0x324>
 8002718:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <HAL_RCC_GetSysClockFreq+0x30>)
 800271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271e:	bf00      	nop
 8002720:	08002755 	.word	0x08002755
 8002724:	08002a15 	.word	0x08002a15
 8002728:	08002a15 	.word	0x08002a15
 800272c:	08002a15 	.word	0x08002a15
 8002730:	0800275b 	.word	0x0800275b
 8002734:	08002a15 	.word	0x08002a15
 8002738:	08002a15 	.word	0x08002a15
 800273c:	08002a15 	.word	0x08002a15
 8002740:	08002761 	.word	0x08002761
 8002744:	08002a15 	.word	0x08002a15
 8002748:	08002a15 	.word	0x08002a15
 800274c:	08002a15 	.word	0x08002a15
 8002750:	080028bd 	.word	0x080028bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002754:	4bb4      	ldr	r3, [pc, #720]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x338>)
 8002756:	613b      	str	r3, [r7, #16]
       break;
 8002758:	e15f      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800275a:	4bb4      	ldr	r3, [pc, #720]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x33c>)
 800275c:	613b      	str	r3, [r7, #16]
      break;
 800275e:	e15c      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002760:	4bb0      	ldr	r3, [pc, #704]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002768:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800276a:	4bae      	ldr	r3, [pc, #696]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x334>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d04a      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002776:	4bab      	ldr	r3, [pc, #684]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	099b      	lsrs	r3, r3, #6
 800277c:	f04f 0400 	mov.w	r4, #0
 8002780:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	ea03 0501 	and.w	r5, r3, r1
 800278c:	ea04 0602 	and.w	r6, r4, r2
 8002790:	4629      	mov	r1, r5
 8002792:	4632      	mov	r2, r6
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	f04f 0400 	mov.w	r4, #0
 800279c:	0154      	lsls	r4, r2, #5
 800279e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027a2:	014b      	lsls	r3, r1, #5
 80027a4:	4619      	mov	r1, r3
 80027a6:	4622      	mov	r2, r4
 80027a8:	1b49      	subs	r1, r1, r5
 80027aa:	eb62 0206 	sbc.w	r2, r2, r6
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	f04f 0400 	mov.w	r4, #0
 80027b6:	0194      	lsls	r4, r2, #6
 80027b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027bc:	018b      	lsls	r3, r1, #6
 80027be:	1a5b      	subs	r3, r3, r1
 80027c0:	eb64 0402 	sbc.w	r4, r4, r2
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	00e2      	lsls	r2, r4, #3
 80027ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027d2:	00d9      	lsls	r1, r3, #3
 80027d4:	460b      	mov	r3, r1
 80027d6:	4614      	mov	r4, r2
 80027d8:	195b      	adds	r3, r3, r5
 80027da:	eb44 0406 	adc.w	r4, r4, r6
 80027de:	f04f 0100 	mov.w	r1, #0
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	0262      	lsls	r2, r4, #9
 80027e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027ec:	0259      	lsls	r1, r3, #9
 80027ee:	460b      	mov	r3, r1
 80027f0:	4614      	mov	r4, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	4621      	mov	r1, r4
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f04f 0400 	mov.w	r4, #0
 80027fc:	461a      	mov	r2, r3
 80027fe:	4623      	mov	r3, r4
 8002800:	f7fd fd56 	bl	80002b0 <__aeabi_uldivmod>
 8002804:	4603      	mov	r3, r0
 8002806:	460c      	mov	r4, r1
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	e049      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280c:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x334>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	f04f 0400 	mov.w	r4, #0
 8002816:	f240 11ff 	movw	r1, #511	; 0x1ff
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	ea03 0501 	and.w	r5, r3, r1
 8002822:	ea04 0602 	and.w	r6, r4, r2
 8002826:	4629      	mov	r1, r5
 8002828:	4632      	mov	r2, r6
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	f04f 0400 	mov.w	r4, #0
 8002832:	0154      	lsls	r4, r2, #5
 8002834:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002838:	014b      	lsls	r3, r1, #5
 800283a:	4619      	mov	r1, r3
 800283c:	4622      	mov	r2, r4
 800283e:	1b49      	subs	r1, r1, r5
 8002840:	eb62 0206 	sbc.w	r2, r2, r6
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	f04f 0400 	mov.w	r4, #0
 800284c:	0194      	lsls	r4, r2, #6
 800284e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002852:	018b      	lsls	r3, r1, #6
 8002854:	1a5b      	subs	r3, r3, r1
 8002856:	eb64 0402 	sbc.w	r4, r4, r2
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	00e2      	lsls	r2, r4, #3
 8002864:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002868:	00d9      	lsls	r1, r3, #3
 800286a:	460b      	mov	r3, r1
 800286c:	4614      	mov	r4, r2
 800286e:	195b      	adds	r3, r3, r5
 8002870:	eb44 0406 	adc.w	r4, r4, r6
 8002874:	f04f 0100 	mov.w	r1, #0
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	02a2      	lsls	r2, r4, #10
 800287e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002882:	0299      	lsls	r1, r3, #10
 8002884:	460b      	mov	r3, r1
 8002886:	4614      	mov	r4, r2
 8002888:	4618      	mov	r0, r3
 800288a:	4621      	mov	r1, r4
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f04f 0400 	mov.w	r4, #0
 8002892:	461a      	mov	r2, r3
 8002894:	4623      	mov	r3, r4
 8002896:	f7fd fd0b 	bl	80002b0 <__aeabi_uldivmod>
 800289a:	4603      	mov	r3, r0
 800289c:	460c      	mov	r4, r1
 800289e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028a0:	4b60      	ldr	r3, [pc, #384]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x334>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	3301      	adds	r3, #1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	613b      	str	r3, [r7, #16]
      break;
 80028ba:	e0ae      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x334>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c6:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x334>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d04a      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d2:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x334>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	099b      	lsrs	r3, r3, #6
 80028d8:	f04f 0400 	mov.w	r4, #0
 80028dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	ea03 0501 	and.w	r5, r3, r1
 80028e8:	ea04 0602 	and.w	r6, r4, r2
 80028ec:	4629      	mov	r1, r5
 80028ee:	4632      	mov	r2, r6
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	f04f 0400 	mov.w	r4, #0
 80028f8:	0154      	lsls	r4, r2, #5
 80028fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028fe:	014b      	lsls	r3, r1, #5
 8002900:	4619      	mov	r1, r3
 8002902:	4622      	mov	r2, r4
 8002904:	1b49      	subs	r1, r1, r5
 8002906:	eb62 0206 	sbc.w	r2, r2, r6
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	f04f 0400 	mov.w	r4, #0
 8002912:	0194      	lsls	r4, r2, #6
 8002914:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002918:	018b      	lsls	r3, r1, #6
 800291a:	1a5b      	subs	r3, r3, r1
 800291c:	eb64 0402 	sbc.w	r4, r4, r2
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	00e2      	lsls	r2, r4, #3
 800292a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800292e:	00d9      	lsls	r1, r3, #3
 8002930:	460b      	mov	r3, r1
 8002932:	4614      	mov	r4, r2
 8002934:	195b      	adds	r3, r3, r5
 8002936:	eb44 0406 	adc.w	r4, r4, r6
 800293a:	f04f 0100 	mov.w	r1, #0
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	0262      	lsls	r2, r4, #9
 8002944:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002948:	0259      	lsls	r1, r3, #9
 800294a:	460b      	mov	r3, r1
 800294c:	4614      	mov	r4, r2
 800294e:	4618      	mov	r0, r3
 8002950:	4621      	mov	r1, r4
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f04f 0400 	mov.w	r4, #0
 8002958:	461a      	mov	r2, r3
 800295a:	4623      	mov	r3, r4
 800295c:	f7fd fca8 	bl	80002b0 <__aeabi_uldivmod>
 8002960:	4603      	mov	r3, r0
 8002962:	460c      	mov	r4, r1
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e049      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002968:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x334>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	099b      	lsrs	r3, r3, #6
 800296e:	f04f 0400 	mov.w	r4, #0
 8002972:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	ea03 0501 	and.w	r5, r3, r1
 800297e:	ea04 0602 	and.w	r6, r4, r2
 8002982:	4629      	mov	r1, r5
 8002984:	4632      	mov	r2, r6
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f04f 0400 	mov.w	r4, #0
 800298e:	0154      	lsls	r4, r2, #5
 8002990:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002994:	014b      	lsls	r3, r1, #5
 8002996:	4619      	mov	r1, r3
 8002998:	4622      	mov	r2, r4
 800299a:	1b49      	subs	r1, r1, r5
 800299c:	eb62 0206 	sbc.w	r2, r2, r6
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	f04f 0400 	mov.w	r4, #0
 80029a8:	0194      	lsls	r4, r2, #6
 80029aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029ae:	018b      	lsls	r3, r1, #6
 80029b0:	1a5b      	subs	r3, r3, r1
 80029b2:	eb64 0402 	sbc.w	r4, r4, r2
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	00e2      	lsls	r2, r4, #3
 80029c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029c4:	00d9      	lsls	r1, r3, #3
 80029c6:	460b      	mov	r3, r1
 80029c8:	4614      	mov	r4, r2
 80029ca:	195b      	adds	r3, r3, r5
 80029cc:	eb44 0406 	adc.w	r4, r4, r6
 80029d0:	f04f 0100 	mov.w	r1, #0
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	02a2      	lsls	r2, r4, #10
 80029da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029de:	0299      	lsls	r1, r3, #10
 80029e0:	460b      	mov	r3, r1
 80029e2:	4614      	mov	r4, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	4621      	mov	r1, r4
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f04f 0400 	mov.w	r4, #0
 80029ee:	461a      	mov	r2, r3
 80029f0:	4623      	mov	r3, r4
 80029f2:	f7fd fc5d 	bl	80002b0 <__aeabi_uldivmod>
 80029f6:	4603      	mov	r3, r0
 80029f8:	460c      	mov	r4, r1
 80029fa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x334>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	0f1b      	lsrs	r3, r3, #28
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	613b      	str	r3, [r7, #16]
      break;
 8002a12:	e002      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x338>)
 8002a16:	613b      	str	r3, [r7, #16]
      break;
 8002a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1a:	693b      	ldr	r3, [r7, #16]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	00f42400 	.word	0x00f42400
 8002a2c:	007a1200 	.word	0x007a1200

08002a30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8083 	beq.w	8002b50 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a4a:	4b95      	ldr	r3, [pc, #596]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d019      	beq.n	8002a8a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a56:	4b92      	ldr	r3, [pc, #584]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d106      	bne.n	8002a70 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a62:	4b8f      	ldr	r3, [pc, #572]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6e:	d00c      	beq.n	8002a8a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a70:	4b8b      	ldr	r3, [pc, #556]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	d112      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7c:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a88:	d10b      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8a:	4b85      	ldr	r3, [pc, #532]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d05b      	beq.n	8002b4e <HAL_RCC_OscConfig+0x11e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d157      	bne.n	8002b4e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e216      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x8a>
 8002aac:	4b7c      	ldr	r3, [pc, #496]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a7b      	ldr	r2, [pc, #492]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	e01d      	b.n	8002af6 <HAL_RCC_OscConfig+0xc6>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac2:	d10c      	bne.n	8002ade <HAL_RCC_OscConfig+0xae>
 8002ac4:	4b76      	ldr	r3, [pc, #472]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a75      	ldr	r2, [pc, #468]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b73      	ldr	r3, [pc, #460]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a72      	ldr	r2, [pc, #456]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	e00b      	b.n	8002af6 <HAL_RCC_OscConfig+0xc6>
 8002ade:	4b70      	ldr	r3, [pc, #448]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a6f      	ldr	r2, [pc, #444]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b6d      	ldr	r3, [pc, #436]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6c      	ldr	r2, [pc, #432]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d013      	beq.n	8002b26 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fe fd95 	bl	800162c <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b06:	f7fe fd91 	bl	800162c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b64      	cmp	r3, #100	; 0x64
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e1db      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b18:	4b61      	ldr	r3, [pc, #388]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0xd6>
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7fe fd81 	bl	800162c <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fd7d 	bl	800162c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b64      	cmp	r3, #100	; 0x64
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e1c7      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b40:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0xfe>
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d06f      	beq.n	8002c3c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b5c:	4b50      	ldr	r3, [pc, #320]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d017      	beq.n	8002b98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b68:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b74:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b80:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	d11c      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8c:	4b44      	ldr	r3, [pc, #272]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d116      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b98:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x180>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e18f      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4938      	ldr	r1, [pc, #224]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc4:	e03a      	b.n	8002c3c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d020      	beq.n	8002c10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bce:	4b35      	ldr	r3, [pc, #212]	; (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fd2a 	bl	800162c <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7fe fd26 	bl	800162c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e170      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4925      	ldr	r1, [pc, #148]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
 8002c0e:	e015      	b.n	8002c3c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCC_OscConfig+0x274>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fe fd09 	bl	800162c <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fd05 	bl	800162c <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e14f      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d037      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d016      	beq.n	8002c7e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c50:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_RCC_OscConfig+0x278>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fe fce9 	bl	800162c <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fce5 	bl	800162c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e12f      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_OscConfig+0x270>)
 8002c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x22e>
 8002c7c:	e01c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_RCC_OscConfig+0x278>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe fcd2 	bl	800162c <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8a:	e00f      	b.n	8002cac <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fcce 	bl	800162c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d908      	bls.n	8002cac <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e118      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	42470000 	.word	0x42470000
 8002ca8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cac:	4b8a      	ldr	r3, [pc, #552]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e9      	bne.n	8002c8c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8097 	beq.w	8002df4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cca:	4b83      	ldr	r3, [pc, #524]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10f      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b7f      	ldr	r3, [pc, #508]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a7e      	ldr	r2, [pc, #504]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b7c      	ldr	r3, [pc, #496]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b79      	ldr	r3, [pc, #484]	; (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d118      	bne.n	8002d34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d02:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a75      	ldr	r2, [pc, #468]	; (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0e:	f7fe fc8d 	bl	800162c <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d16:	f7fe fc89 	bl	800162c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0d3      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <HAL_RCC_OscConfig+0x4ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x31a>
 8002d3c:	4b66      	ldr	r3, [pc, #408]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4a65      	ldr	r2, [pc, #404]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6713      	str	r3, [r2, #112]	; 0x70
 8002d48:	e01c      	b.n	8002d84 <HAL_RCC_OscConfig+0x354>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x33c>
 8002d52:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a60      	ldr	r2, [pc, #384]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5e:	4b5e      	ldr	r3, [pc, #376]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a5d      	ldr	r2, [pc, #372]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0x354>
 8002d6c:	4b5a      	ldr	r3, [pc, #360]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	4a59      	ldr	r2, [pc, #356]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6713      	str	r3, [r2, #112]	; 0x70
 8002d78:	4b57      	ldr	r3, [pc, #348]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	4a56      	ldr	r2, [pc, #344]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002d7e:	f023 0304 	bic.w	r3, r3, #4
 8002d82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d015      	beq.n	8002db8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fc4e 	bl	800162c <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe fc4a 	bl	800162c <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e092      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002daa:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0ee      	beq.n	8002d94 <HAL_RCC_OscConfig+0x364>
 8002db6:	e014      	b.n	8002de2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fe fc38 	bl	800162c <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7fe fc34 	bl	800162c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e07c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd6:	4b40      	ldr	r3, [pc, #256]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ee      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de8:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	4a3a      	ldr	r2, [pc, #232]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d068      	beq.n	8002ece <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dfc:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d060      	beq.n	8002eca <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d145      	bne.n	8002e9c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e10:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <HAL_RCC_OscConfig+0x4b0>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fe fc09 	bl	800162c <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe fc05 	bl	800162c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e04f      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e30:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	019b      	lsls	r3, r3, #6
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	061b      	lsls	r3, r3, #24
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	071b      	lsls	r3, r3, #28
 8002e68:	491b      	ldr	r1, [pc, #108]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <HAL_RCC_OscConfig+0x4b0>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe fbda 	bl	800162c <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe fbd6 	bl	800162c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e020      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x44c>
 8002e9a:	e018      	b.n	8002ece <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_RCC_OscConfig+0x4b0>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fbc3 	bl	800162c <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe fbbf 	bl	800162c <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e009      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_RCC_OscConfig+0x4a8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x47a>
 8002ec8:	e001      	b.n	8002ece <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	42470060 	.word	0x42470060

08002ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e03f      	b.n	8002f76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe f974 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	; 0x24
 8002f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fddb 	bl	8003ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b088      	sub	sp, #32
 8002f82:	af02      	add	r7, sp, #8
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	f040 8083 	bne.w	80030a6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_UART_Transmit+0x2e>
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e07b      	b.n	80030a8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Transmit+0x40>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e074      	b.n	80030a8 <HAL_UART_Transmit+0x12a>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2221      	movs	r2, #33	; 0x21
 8002fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002fd4:	f7fe fb2a 	bl	800162c <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	88fa      	ldrh	r2, [r7, #6]
 8002fde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002fee:	e042      	b.n	8003076 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003006:	d122      	bne.n	800304e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fbe4 	bl	80037e0 <UART_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e042      	b.n	80030a8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003034:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	3302      	adds	r3, #2
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	e017      	b.n	8003076 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3301      	adds	r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	e013      	b.n	8003076 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fbc1 	bl	80037e0 <UART_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e01f      	b.n	80030a8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	60ba      	str	r2, [r7, #8]
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1b7      	bne.n	8002ff0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2200      	movs	r2, #0
 8003088:	2140      	movs	r1, #64	; 0x40
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fba8 	bl	80037e0 <UART_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e006      	b.n	80030a8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	f040 8090 	bne.w	80031f2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_Receive+0x2e>
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e088      	b.n	80031f4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_UART_Receive+0x40>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e081      	b.n	80031f4 <HAL_UART_Receive+0x144>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2222      	movs	r2, #34	; 0x22
 8003102:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003106:	f7fe fa91 	bl	800162c <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003120:	e05c      	b.n	80031dc <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003138:	d12b      	bne.n	8003192 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	2120      	movs	r1, #32
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fb4b 	bl	80037e0 <UART_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e04f      	b.n	80031f4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10c      	bne.n	800317a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	b29b      	uxth	r3, r3
 8003168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316c:	b29a      	uxth	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3302      	adds	r3, #2
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	e030      	b.n	80031dc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	b29b      	uxth	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	b29a      	uxth	r2, r3
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	3301      	adds	r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	e024      	b.n	80031dc <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	2120      	movs	r1, #32
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fb1f 	bl	80037e0 <UART_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e023      	b.n	80031f4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d108      	bne.n	80031c6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	60ba      	str	r2, [r7, #8]
 80031c0:	b2ca      	uxtb	r2, r1
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e00a      	b.n	80031dc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1c59      	adds	r1, r3, #1
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d19d      	bne.n	8003122 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	4613      	mov	r3, r2
 8003208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	d130      	bne.n	8003278 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_UART_Transmit_IT+0x26>
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e029      	b.n	800327a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_UART_Transmit_IT+0x38>
 8003230:	2302      	movs	r3, #2
 8003232:	e022      	b.n	800327a <HAL_UART_Transmit_IT+0x7e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	88fa      	ldrh	r2, [r7, #6]
 8003246:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2221      	movs	r2, #33	; 0x21
 8003258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003272:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
  }
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	4613      	mov	r3, r2
 8003294:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d166      	bne.n	8003370 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_UART_Receive_DMA+0x26>
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e05f      	b.n	8003372 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_UART_Receive_DMA+0x38>
 80032bc:	2302      	movs	r3, #2
 80032be:	e058      	b.n	8003372 <HAL_UART_Receive_DMA+0xea>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2222      	movs	r2, #34	; 0x22
 80032de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e6:	4a25      	ldr	r2, [pc, #148]	; (800337c <HAL_UART_Receive_DMA+0xf4>)
 80032e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	4a24      	ldr	r2, [pc, #144]	; (8003380 <HAL_UART_Receive_DMA+0xf8>)
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f6:	4a23      	ldr	r2, [pc, #140]	; (8003384 <HAL_UART_Receive_DMA+0xfc>)
 80032f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fe:	2200      	movs	r2, #0
 8003300:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003302:	f107 0308 	add.w	r3, r7, #8
 8003306:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	f7fe fb75 	bl	8001a08 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800336a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	e000      	b.n	8003372 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003370:	2302      	movs	r3, #2
  }
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	080036c9 	.word	0x080036c9
 8003380:	08003731 	.word	0x08003731
 8003384:	0800374d 	.word	0x0800374d

08003388 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800339e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b80      	cmp	r3, #128	; 0x80
 80033bc:	d124      	bne.n	8003408 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033cc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d018      	beq.n	8003408 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	2200      	movs	r2, #0
 80033dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe fb68 	bl	8001ab8 <HAL_DMA_Abort>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fd7c 	bl	8001ef0 <HAL_DMA_GetError>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d104      	bne.n	8003408 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2210      	movs	r2, #16
 8003402:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e03d      	b.n	8003484 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d124      	bne.n	8003460 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003424:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	2200      	movs	r2, #0
 8003434:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fb3c 	bl	8001ab8 <HAL_DMA_Abort>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fd50 	bl	8001ef0 <HAL_DMA_GetError>
 8003450:	4603      	mov	r3, r0
 8003452:	2b20      	cmp	r3, #32
 8003454:	d104      	bne.n	8003460 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2210      	movs	r2, #16
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e011      	b.n	8003484 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_UART_IRQHandler+0x52>
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa82 	bl	80039e0 <UART_Receive_IT>
      return;
 80034dc:	e0d1      	b.n	8003682 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80b0 	beq.w	8003646 <HAL_UART_IRQHandler+0x1ba>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <HAL_UART_IRQHandler+0x70>
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80a5 	beq.w	8003646 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_UART_IRQHandler+0x90>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_UART_IRQHandler+0xb0>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	f043 0202 	orr.w	r2, r3, #2
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_UART_IRQHandler+0xd0>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00f      	beq.n	8003586 <HAL_UART_IRQHandler+0xfa>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <HAL_UART_IRQHandler+0xee>
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	f043 0208 	orr.w	r2, r3, #8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d078      	beq.n	8003680 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_UART_IRQHandler+0x11c>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fa1c 	bl	80039e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	bf0c      	ite	eq
 80035b6:	2301      	moveq	r3, #1
 80035b8:	2300      	movne	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <HAL_UART_IRQHandler+0x144>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d031      	beq.n	8003634 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f965 	bl	80038a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d123      	bne.n	800362c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003600:	4a21      	ldr	r2, [pc, #132]	; (8003688 <HAL_UART_IRQHandler+0x1fc>)
 8003602:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003608:	4618      	mov	r0, r3
 800360a:	f7fe fac5 	bl	8001b98 <HAL_DMA_Abort_IT>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d016      	beq.n	8003642 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800361e:	4610      	mov	r0, r2
 8003620:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003622:	e00e      	b.n	8003642 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f845 	bl	80036b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362a:	e00a      	b.n	8003642 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f841 	bl	80036b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003632:	e006      	b.n	8003642 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f83d 	bl	80036b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003640:	e01e      	b.n	8003680 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003642:	bf00      	nop
    return;
 8003644:	e01c      	b.n	8003680 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_UART_IRQHandler+0x1d6>
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f952 	bl	8003904 <UART_Transmit_IT>
    return;
 8003660:	e00f      	b.n	8003682 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_UART_IRQHandler+0x1f6>
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f99a 	bl	80039b0 <UART_EndTransmit_IT>
    return;
 800367c:	bf00      	nop
 800367e:	e000      	b.n	8003682 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003680:	bf00      	nop
  }
}
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	080038dd 	.word	0x080038dd

0800368c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d11e      	bne.n	8003722 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003718:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7fd fcf6 	bl	8001114 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f7ff ffae 	bl	80036a0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b21      	cmp	r3, #33	; 0x21
 800377e:	d108      	bne.n	8003792 <UART_DMAError+0x46>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2200      	movs	r2, #0
 800378a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800378c:	68b8      	ldr	r0, [r7, #8]
 800378e:	f000 f871 	bl	8003874 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b22      	cmp	r3, #34	; 0x22
 80037b2:	d108      	bne.n	80037c6 <UART_DMAError+0x7a>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2200      	movs	r2, #0
 80037be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80037c0:	68b8      	ldr	r0, [r7, #8]
 80037c2:	f000 f86d 	bl	80038a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	f043 0210 	orr.w	r2, r3, #16
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037d2:	68b8      	ldr	r0, [r7, #8]
 80037d4:	f7ff ff6e 	bl	80036b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f0:	e02c      	b.n	800384c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f8:	d028      	beq.n	800384c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <UART_WaitOnFlagUntilTimeout+0x30>
 8003800:	f7fd ff14 	bl	800162c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	429a      	cmp	r2, r3
 800380e:	d21d      	bcs.n	800384c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800381e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e00f      	b.n	800386c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	4013      	ands	r3, r2
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	429a      	cmp	r2, r3
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	429a      	cmp	r2, r3
 8003868:	d0c3      	beq.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800388a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff fedc 	bl	80036b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b21      	cmp	r3, #33	; 0x21
 8003916:	d144      	bne.n	80039a2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	d11a      	bne.n	8003958 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003936:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	1c9a      	adds	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	621a      	str	r2, [r3, #32]
 800394a:	e00e      	b.n	800396a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]
 8003956:	e008      	b.n	800396a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	1c59      	adds	r1, r3, #1
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6211      	str	r1, [r2, #32]
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29b      	uxth	r3, r3
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4619      	mov	r1, r3
 8003978:	84d1      	strh	r1, [r2, #38]	; 0x26
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800398c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800399c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e000      	b.n	80039a4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
  }
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff fe5b 	bl	800368c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b22      	cmp	r3, #34	; 0x22
 80039f2:	d171      	bne.n	8003ad8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fc:	d123      	bne.n	8003a46 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10e      	bne.n	8003a2a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	1c9a      	adds	r2, r3, #2
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
 8003a28:	e029      	b.n	8003a7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28
 8003a44:	e01b      	b.n	8003a7e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6858      	ldr	r0, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a58:	1c59      	adds	r1, r3, #1
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6291      	str	r1, [r2, #40]	; 0x28
 8003a5e:	b2c2      	uxtb	r2, r0
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	e00c      	b.n	8003a7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	1c58      	adds	r0, r3, #1
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	6288      	str	r0, [r1, #40]	; 0x28
 8003a76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d120      	bne.n	8003ad4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0220 	bic.w	r2, r2, #32
 8003aa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd fb22 	bl	8001114 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e002      	b.n	8003ada <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e000      	b.n	8003ada <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
  }
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b26:	f023 030c 	bic.w	r3, r3, #12
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	68f9      	ldr	r1, [r7, #12]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b52:	f040 818b 	bne.w	8003e6c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4ac1      	ldr	r2, [pc, #772]	; (8003e60 <UART_SetConfig+0x37c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d005      	beq.n	8003b6c <UART_SetConfig+0x88>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4abf      	ldr	r2, [pc, #764]	; (8003e64 <UART_SetConfig+0x380>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	f040 80bd 	bne.w	8003ce6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b6c:	f7fe fdac 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 8003b70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	461d      	mov	r5, r3
 8003b76:	f04f 0600 	mov.w	r6, #0
 8003b7a:	46a8      	mov	r8, r5
 8003b7c:	46b1      	mov	r9, r6
 8003b7e:	eb18 0308 	adds.w	r3, r8, r8
 8003b82:	eb49 0409 	adc.w	r4, r9, r9
 8003b86:	4698      	mov	r8, r3
 8003b88:	46a1      	mov	r9, r4
 8003b8a:	eb18 0805 	adds.w	r8, r8, r5
 8003b8e:	eb49 0906 	adc.w	r9, r9, r6
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ba2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ba6:	4688      	mov	r8, r1
 8003ba8:	4691      	mov	r9, r2
 8003baa:	eb18 0005 	adds.w	r0, r8, r5
 8003bae:	eb49 0106 	adc.w	r1, r9, r6
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	f04f 0600 	mov.w	r6, #0
 8003bbc:	196b      	adds	r3, r5, r5
 8003bbe:	eb46 0406 	adc.w	r4, r6, r6
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4623      	mov	r3, r4
 8003bc6:	f7fc fb73 	bl	80002b0 <__aeabi_uldivmod>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	460c      	mov	r4, r1
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4ba5      	ldr	r3, [pc, #660]	; (8003e68 <UART_SetConfig+0x384>)
 8003bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	461d      	mov	r5, r3
 8003be0:	f04f 0600 	mov.w	r6, #0
 8003be4:	46a9      	mov	r9, r5
 8003be6:	46b2      	mov	sl, r6
 8003be8:	eb19 0309 	adds.w	r3, r9, r9
 8003bec:	eb4a 040a 	adc.w	r4, sl, sl
 8003bf0:	4699      	mov	r9, r3
 8003bf2:	46a2      	mov	sl, r4
 8003bf4:	eb19 0905 	adds.w	r9, r9, r5
 8003bf8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c10:	4689      	mov	r9, r1
 8003c12:	4692      	mov	sl, r2
 8003c14:	eb19 0005 	adds.w	r0, r9, r5
 8003c18:	eb4a 0106 	adc.w	r1, sl, r6
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	461d      	mov	r5, r3
 8003c22:	f04f 0600 	mov.w	r6, #0
 8003c26:	196b      	adds	r3, r5, r5
 8003c28:	eb46 0406 	adc.w	r4, r6, r6
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4623      	mov	r3, r4
 8003c30:	f7fc fb3e 	bl	80002b0 <__aeabi_uldivmod>
 8003c34:	4603      	mov	r3, r0
 8003c36:	460c      	mov	r4, r1
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b8b      	ldr	r3, [pc, #556]	; (8003e68 <UART_SetConfig+0x384>)
 8003c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	2164      	movs	r1, #100	; 0x64
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	3332      	adds	r3, #50	; 0x32
 8003c4e:	4a86      	ldr	r2, [pc, #536]	; (8003e68 <UART_SetConfig+0x384>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c5c:	4498      	add	r8, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	461d      	mov	r5, r3
 8003c62:	f04f 0600 	mov.w	r6, #0
 8003c66:	46a9      	mov	r9, r5
 8003c68:	46b2      	mov	sl, r6
 8003c6a:	eb19 0309 	adds.w	r3, r9, r9
 8003c6e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c72:	4699      	mov	r9, r3
 8003c74:	46a2      	mov	sl, r4
 8003c76:	eb19 0905 	adds.w	r9, r9, r5
 8003c7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c92:	4689      	mov	r9, r1
 8003c94:	4692      	mov	sl, r2
 8003c96:	eb19 0005 	adds.w	r0, r9, r5
 8003c9a:	eb4a 0106 	adc.w	r1, sl, r6
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	461d      	mov	r5, r3
 8003ca4:	f04f 0600 	mov.w	r6, #0
 8003ca8:	196b      	adds	r3, r5, r5
 8003caa:	eb46 0406 	adc.w	r4, r6, r6
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	f7fc fafd 	bl	80002b0 <__aeabi_uldivmod>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	460c      	mov	r4, r1
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <UART_SetConfig+0x384>)
 8003cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	2164      	movs	r1, #100	; 0x64
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	3332      	adds	r3, #50	; 0x32
 8003cd0:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <UART_SetConfig+0x384>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	f003 0207 	and.w	r2, r3, #7
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4442      	add	r2, r8
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	e26f      	b.n	80041c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ce6:	f7fe fcdb 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8003cea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	461d      	mov	r5, r3
 8003cf0:	f04f 0600 	mov.w	r6, #0
 8003cf4:	46a8      	mov	r8, r5
 8003cf6:	46b1      	mov	r9, r6
 8003cf8:	eb18 0308 	adds.w	r3, r8, r8
 8003cfc:	eb49 0409 	adc.w	r4, r9, r9
 8003d00:	4698      	mov	r8, r3
 8003d02:	46a1      	mov	r9, r4
 8003d04:	eb18 0805 	adds.w	r8, r8, r5
 8003d08:	eb49 0906 	adc.w	r9, r9, r6
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d20:	4688      	mov	r8, r1
 8003d22:	4691      	mov	r9, r2
 8003d24:	eb18 0005 	adds.w	r0, r8, r5
 8003d28:	eb49 0106 	adc.w	r1, r9, r6
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	461d      	mov	r5, r3
 8003d32:	f04f 0600 	mov.w	r6, #0
 8003d36:	196b      	adds	r3, r5, r5
 8003d38:	eb46 0406 	adc.w	r4, r6, r6
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4623      	mov	r3, r4
 8003d40:	f7fc fab6 	bl	80002b0 <__aeabi_uldivmod>
 8003d44:	4603      	mov	r3, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <UART_SetConfig+0x384>)
 8003d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	461d      	mov	r5, r3
 8003d5a:	f04f 0600 	mov.w	r6, #0
 8003d5e:	46a9      	mov	r9, r5
 8003d60:	46b2      	mov	sl, r6
 8003d62:	eb19 0309 	adds.w	r3, r9, r9
 8003d66:	eb4a 040a 	adc.w	r4, sl, sl
 8003d6a:	4699      	mov	r9, r3
 8003d6c:	46a2      	mov	sl, r4
 8003d6e:	eb19 0905 	adds.w	r9, r9, r5
 8003d72:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d8a:	4689      	mov	r9, r1
 8003d8c:	4692      	mov	sl, r2
 8003d8e:	eb19 0005 	adds.w	r0, r9, r5
 8003d92:	eb4a 0106 	adc.w	r1, sl, r6
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	f04f 0600 	mov.w	r6, #0
 8003da0:	196b      	adds	r3, r5, r5
 8003da2:	eb46 0406 	adc.w	r4, r6, r6
 8003da6:	461a      	mov	r2, r3
 8003da8:	4623      	mov	r3, r4
 8003daa:	f7fc fa81 	bl	80002b0 <__aeabi_uldivmod>
 8003dae:	4603      	mov	r3, r0
 8003db0:	460c      	mov	r4, r1
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b2c      	ldr	r3, [pc, #176]	; (8003e68 <UART_SetConfig+0x384>)
 8003db6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2164      	movs	r1, #100	; 0x64
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	3332      	adds	r3, #50	; 0x32
 8003dc8:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <UART_SetConfig+0x384>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dd6:	4498      	add	r8, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	461d      	mov	r5, r3
 8003ddc:	f04f 0600 	mov.w	r6, #0
 8003de0:	46a9      	mov	r9, r5
 8003de2:	46b2      	mov	sl, r6
 8003de4:	eb19 0309 	adds.w	r3, r9, r9
 8003de8:	eb4a 040a 	adc.w	r4, sl, sl
 8003dec:	4699      	mov	r9, r3
 8003dee:	46a2      	mov	sl, r4
 8003df0:	eb19 0905 	adds.w	r9, r9, r5
 8003df4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003df8:	f04f 0100 	mov.w	r1, #0
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e0c:	4689      	mov	r9, r1
 8003e0e:	4692      	mov	sl, r2
 8003e10:	eb19 0005 	adds.w	r0, r9, r5
 8003e14:	eb4a 0106 	adc.w	r1, sl, r6
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	461d      	mov	r5, r3
 8003e1e:	f04f 0600 	mov.w	r6, #0
 8003e22:	196b      	adds	r3, r5, r5
 8003e24:	eb46 0406 	adc.w	r4, r6, r6
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	f7fc fa40 	bl	80002b0 <__aeabi_uldivmod>
 8003e30:	4603      	mov	r3, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <UART_SetConfig+0x384>)
 8003e38:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	2164      	movs	r1, #100	; 0x64
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	3332      	adds	r3, #50	; 0x32
 8003e4a:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <UART_SetConfig+0x384>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	f003 0207 	and.w	r2, r3, #7
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4442      	add	r2, r8
 8003e5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e5e:	e1b2      	b.n	80041c6 <UART_SetConfig+0x6e2>
 8003e60:	40011000 	.word	0x40011000
 8003e64:	40011400 	.word	0x40011400
 8003e68:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4ad7      	ldr	r2, [pc, #860]	; (80041d0 <UART_SetConfig+0x6ec>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d005      	beq.n	8003e82 <UART_SetConfig+0x39e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4ad6      	ldr	r2, [pc, #856]	; (80041d4 <UART_SetConfig+0x6f0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	f040 80d1 	bne.w	8004024 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e82:	f7fe fc21 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 8003e86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	469a      	mov	sl, r3
 8003e8c:	f04f 0b00 	mov.w	fp, #0
 8003e90:	46d0      	mov	r8, sl
 8003e92:	46d9      	mov	r9, fp
 8003e94:	eb18 0308 	adds.w	r3, r8, r8
 8003e98:	eb49 0409 	adc.w	r4, r9, r9
 8003e9c:	4698      	mov	r8, r3
 8003e9e:	46a1      	mov	r9, r4
 8003ea0:	eb18 080a 	adds.w	r8, r8, sl
 8003ea4:	eb49 090b 	adc.w	r9, r9, fp
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003eb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003eb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ebc:	4688      	mov	r8, r1
 8003ebe:	4691      	mov	r9, r2
 8003ec0:	eb1a 0508 	adds.w	r5, sl, r8
 8003ec4:	eb4b 0609 	adc.w	r6, fp, r9
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	f04f 0400 	mov.w	r4, #0
 8003eda:	0094      	lsls	r4, r2, #2
 8003edc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ee0:	008b      	lsls	r3, r1, #2
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4623      	mov	r3, r4
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	4631      	mov	r1, r6
 8003eea:	f7fc f9e1 	bl	80002b0 <__aeabi_uldivmod>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4bb8      	ldr	r3, [pc, #736]	; (80041d8 <UART_SetConfig+0x6f4>)
 8003ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	469b      	mov	fp, r3
 8003f04:	f04f 0c00 	mov.w	ip, #0
 8003f08:	46d9      	mov	r9, fp
 8003f0a:	46e2      	mov	sl, ip
 8003f0c:	eb19 0309 	adds.w	r3, r9, r9
 8003f10:	eb4a 040a 	adc.w	r4, sl, sl
 8003f14:	4699      	mov	r9, r3
 8003f16:	46a2      	mov	sl, r4
 8003f18:	eb19 090b 	adds.w	r9, r9, fp
 8003f1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f34:	4689      	mov	r9, r1
 8003f36:	4692      	mov	sl, r2
 8003f38:	eb1b 0509 	adds.w	r5, fp, r9
 8003f3c:	eb4c 060a 	adc.w	r6, ip, sl
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4619      	mov	r1, r3
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	f04f 0400 	mov.w	r4, #0
 8003f52:	0094      	lsls	r4, r2, #2
 8003f54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f58:	008b      	lsls	r3, r1, #2
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	4628      	mov	r0, r5
 8003f60:	4631      	mov	r1, r6
 8003f62:	f7fc f9a5 	bl	80002b0 <__aeabi_uldivmod>
 8003f66:	4603      	mov	r3, r0
 8003f68:	460c      	mov	r4, r1
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4b9a      	ldr	r3, [pc, #616]	; (80041d8 <UART_SetConfig+0x6f4>)
 8003f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	2164      	movs	r1, #100	; 0x64
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	3332      	adds	r3, #50	; 0x32
 8003f80:	4a95      	ldr	r2, [pc, #596]	; (80041d8 <UART_SetConfig+0x6f4>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f8c:	4498      	add	r8, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	469b      	mov	fp, r3
 8003f92:	f04f 0c00 	mov.w	ip, #0
 8003f96:	46d9      	mov	r9, fp
 8003f98:	46e2      	mov	sl, ip
 8003f9a:	eb19 0309 	adds.w	r3, r9, r9
 8003f9e:	eb4a 040a 	adc.w	r4, sl, sl
 8003fa2:	4699      	mov	r9, r3
 8003fa4:	46a2      	mov	sl, r4
 8003fa6:	eb19 090b 	adds.w	r9, r9, fp
 8003faa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fc2:	4689      	mov	r9, r1
 8003fc4:	4692      	mov	sl, r2
 8003fc6:	eb1b 0509 	adds.w	r5, fp, r9
 8003fca:	eb4c 060a 	adc.w	r6, ip, sl
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	f04f 0400 	mov.w	r4, #0
 8003fe0:	0094      	lsls	r4, r2, #2
 8003fe2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fe6:	008b      	lsls	r3, r1, #2
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4623      	mov	r3, r4
 8003fec:	4628      	mov	r0, r5
 8003fee:	4631      	mov	r1, r6
 8003ff0:	f7fc f95e 	bl	80002b0 <__aeabi_uldivmod>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4b77      	ldr	r3, [pc, #476]	; (80041d8 <UART_SetConfig+0x6f4>)
 8003ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	2164      	movs	r1, #100	; 0x64
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	3332      	adds	r3, #50	; 0x32
 800400e:	4a72      	ldr	r2, [pc, #456]	; (80041d8 <UART_SetConfig+0x6f4>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	f003 020f 	and.w	r2, r3, #15
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4442      	add	r2, r8
 8004020:	609a      	str	r2, [r3, #8]
 8004022:	e0d0      	b.n	80041c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7fe fb3c 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8004028:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	469a      	mov	sl, r3
 800402e:	f04f 0b00 	mov.w	fp, #0
 8004032:	46d0      	mov	r8, sl
 8004034:	46d9      	mov	r9, fp
 8004036:	eb18 0308 	adds.w	r3, r8, r8
 800403a:	eb49 0409 	adc.w	r4, r9, r9
 800403e:	4698      	mov	r8, r3
 8004040:	46a1      	mov	r9, r4
 8004042:	eb18 080a 	adds.w	r8, r8, sl
 8004046:	eb49 090b 	adc.w	r9, r9, fp
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004056:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800405a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800405e:	4688      	mov	r8, r1
 8004060:	4691      	mov	r9, r2
 8004062:	eb1a 0508 	adds.w	r5, sl, r8
 8004066:	eb4b 0609 	adc.w	r6, fp, r9
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4619      	mov	r1, r3
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	f04f 0400 	mov.w	r4, #0
 800407c:	0094      	lsls	r4, r2, #2
 800407e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004082:	008b      	lsls	r3, r1, #2
 8004084:	461a      	mov	r2, r3
 8004086:	4623      	mov	r3, r4
 8004088:	4628      	mov	r0, r5
 800408a:	4631      	mov	r1, r6
 800408c:	f7fc f910 	bl	80002b0 <__aeabi_uldivmod>
 8004090:	4603      	mov	r3, r0
 8004092:	460c      	mov	r4, r1
 8004094:	461a      	mov	r2, r3
 8004096:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <UART_SetConfig+0x6f4>)
 8004098:	fba3 2302 	umull	r2, r3, r3, r2
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	469b      	mov	fp, r3
 80040a6:	f04f 0c00 	mov.w	ip, #0
 80040aa:	46d9      	mov	r9, fp
 80040ac:	46e2      	mov	sl, ip
 80040ae:	eb19 0309 	adds.w	r3, r9, r9
 80040b2:	eb4a 040a 	adc.w	r4, sl, sl
 80040b6:	4699      	mov	r9, r3
 80040b8:	46a2      	mov	sl, r4
 80040ba:	eb19 090b 	adds.w	r9, r9, fp
 80040be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040c2:	f04f 0100 	mov.w	r1, #0
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040d6:	4689      	mov	r9, r1
 80040d8:	4692      	mov	sl, r2
 80040da:	eb1b 0509 	adds.w	r5, fp, r9
 80040de:	eb4c 060a 	adc.w	r6, ip, sl
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4619      	mov	r1, r3
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	f04f 0400 	mov.w	r4, #0
 80040f4:	0094      	lsls	r4, r2, #2
 80040f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040fa:	008b      	lsls	r3, r1, #2
 80040fc:	461a      	mov	r2, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	4628      	mov	r0, r5
 8004102:	4631      	mov	r1, r6
 8004104:	f7fc f8d4 	bl	80002b0 <__aeabi_uldivmod>
 8004108:	4603      	mov	r3, r0
 800410a:	460c      	mov	r4, r1
 800410c:	461a      	mov	r2, r3
 800410e:	4b32      	ldr	r3, [pc, #200]	; (80041d8 <UART_SetConfig+0x6f4>)
 8004110:	fba3 1302 	umull	r1, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	2164      	movs	r1, #100	; 0x64
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	3332      	adds	r3, #50	; 0x32
 8004122:	4a2d      	ldr	r2, [pc, #180]	; (80041d8 <UART_SetConfig+0x6f4>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412e:	4498      	add	r8, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	469b      	mov	fp, r3
 8004134:	f04f 0c00 	mov.w	ip, #0
 8004138:	46d9      	mov	r9, fp
 800413a:	46e2      	mov	sl, ip
 800413c:	eb19 0309 	adds.w	r3, r9, r9
 8004140:	eb4a 040a 	adc.w	r4, sl, sl
 8004144:	4699      	mov	r9, r3
 8004146:	46a2      	mov	sl, r4
 8004148:	eb19 090b 	adds.w	r9, r9, fp
 800414c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800415c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004160:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004164:	4689      	mov	r9, r1
 8004166:	4692      	mov	sl, r2
 8004168:	eb1b 0509 	adds.w	r5, fp, r9
 800416c:	eb4c 060a 	adc.w	r6, ip, sl
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4619      	mov	r1, r3
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	f04f 0400 	mov.w	r4, #0
 8004182:	0094      	lsls	r4, r2, #2
 8004184:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004188:	008b      	lsls	r3, r1, #2
 800418a:	461a      	mov	r2, r3
 800418c:	4623      	mov	r3, r4
 800418e:	4628      	mov	r0, r5
 8004190:	4631      	mov	r1, r6
 8004192:	f7fc f88d 	bl	80002b0 <__aeabi_uldivmod>
 8004196:	4603      	mov	r3, r0
 8004198:	460c      	mov	r4, r1
 800419a:	461a      	mov	r2, r3
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <UART_SetConfig+0x6f4>)
 800419e:	fba3 1302 	umull	r1, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2164      	movs	r1, #100	; 0x64
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	3332      	adds	r3, #50	; 0x32
 80041b0:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <UART_SetConfig+0x6f4>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	f003 020f 	and.w	r2, r3, #15
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4442      	add	r2, r8
 80041c2:	609a      	str	r2, [r3, #8]
}
 80041c4:	e7ff      	b.n	80041c6 <UART_SetConfig+0x6e2>
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d0:	40011000 	.word	0x40011000
 80041d4:	40011400 	.word	0x40011400
 80041d8:	51eb851f 	.word	0x51eb851f

080041dc <__errno>:
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <__errno+0x8>)
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000084 	.word	0x20000084

080041e8 <__libc_init_array>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	4e0d      	ldr	r6, [pc, #52]	; (8004220 <__libc_init_array+0x38>)
 80041ec:	4c0d      	ldr	r4, [pc, #52]	; (8004224 <__libc_init_array+0x3c>)
 80041ee:	1ba4      	subs	r4, r4, r6
 80041f0:	10a4      	asrs	r4, r4, #2
 80041f2:	2500      	movs	r5, #0
 80041f4:	42a5      	cmp	r5, r4
 80041f6:	d109      	bne.n	800420c <__libc_init_array+0x24>
 80041f8:	4e0b      	ldr	r6, [pc, #44]	; (8004228 <__libc_init_array+0x40>)
 80041fa:	4c0c      	ldr	r4, [pc, #48]	; (800422c <__libc_init_array+0x44>)
 80041fc:	f000 fc26 	bl	8004a4c <_init>
 8004200:	1ba4      	subs	r4, r4, r6
 8004202:	10a4      	asrs	r4, r4, #2
 8004204:	2500      	movs	r5, #0
 8004206:	42a5      	cmp	r5, r4
 8004208:	d105      	bne.n	8004216 <__libc_init_array+0x2e>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004210:	4798      	blx	r3
 8004212:	3501      	adds	r5, #1
 8004214:	e7ee      	b.n	80041f4 <__libc_init_array+0xc>
 8004216:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800421a:	4798      	blx	r3
 800421c:	3501      	adds	r5, #1
 800421e:	e7f2      	b.n	8004206 <__libc_init_array+0x1e>
 8004220:	08004ce0 	.word	0x08004ce0
 8004224:	08004ce0 	.word	0x08004ce0
 8004228:	08004ce0 	.word	0x08004ce0
 800422c:	08004ce4 	.word	0x08004ce4

08004230 <memset>:
 8004230:	4402      	add	r2, r0
 8004232:	4603      	mov	r3, r0
 8004234:	4293      	cmp	r3, r2
 8004236:	d100      	bne.n	800423a <memset+0xa>
 8004238:	4770      	bx	lr
 800423a:	f803 1b01 	strb.w	r1, [r3], #1
 800423e:	e7f9      	b.n	8004234 <memset+0x4>

08004240 <siprintf>:
 8004240:	b40e      	push	{r1, r2, r3}
 8004242:	b500      	push	{lr}
 8004244:	b09c      	sub	sp, #112	; 0x70
 8004246:	ab1d      	add	r3, sp, #116	; 0x74
 8004248:	9002      	str	r0, [sp, #8]
 800424a:	9006      	str	r0, [sp, #24]
 800424c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004250:	4809      	ldr	r0, [pc, #36]	; (8004278 <siprintf+0x38>)
 8004252:	9107      	str	r1, [sp, #28]
 8004254:	9104      	str	r1, [sp, #16]
 8004256:	4909      	ldr	r1, [pc, #36]	; (800427c <siprintf+0x3c>)
 8004258:	f853 2b04 	ldr.w	r2, [r3], #4
 800425c:	9105      	str	r1, [sp, #20]
 800425e:	6800      	ldr	r0, [r0, #0]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	a902      	add	r1, sp, #8
 8004264:	f000 f866 	bl	8004334 <_svfiprintf_r>
 8004268:	9b02      	ldr	r3, [sp, #8]
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	b01c      	add	sp, #112	; 0x70
 8004270:	f85d eb04 	ldr.w	lr, [sp], #4
 8004274:	b003      	add	sp, #12
 8004276:	4770      	bx	lr
 8004278:	20000084 	.word	0x20000084
 800427c:	ffff0208 	.word	0xffff0208

08004280 <__ssputs_r>:
 8004280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004284:	688e      	ldr	r6, [r1, #8]
 8004286:	429e      	cmp	r6, r3
 8004288:	4682      	mov	sl, r0
 800428a:	460c      	mov	r4, r1
 800428c:	4690      	mov	r8, r2
 800428e:	4699      	mov	r9, r3
 8004290:	d837      	bhi.n	8004302 <__ssputs_r+0x82>
 8004292:	898a      	ldrh	r2, [r1, #12]
 8004294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004298:	d031      	beq.n	80042fe <__ssputs_r+0x7e>
 800429a:	6825      	ldr	r5, [r4, #0]
 800429c:	6909      	ldr	r1, [r1, #16]
 800429e:	1a6f      	subs	r7, r5, r1
 80042a0:	6965      	ldr	r5, [r4, #20]
 80042a2:	2302      	movs	r3, #2
 80042a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80042ac:	f109 0301 	add.w	r3, r9, #1
 80042b0:	443b      	add	r3, r7
 80042b2:	429d      	cmp	r5, r3
 80042b4:	bf38      	it	cc
 80042b6:	461d      	movcc	r5, r3
 80042b8:	0553      	lsls	r3, r2, #21
 80042ba:	d530      	bpl.n	800431e <__ssputs_r+0x9e>
 80042bc:	4629      	mov	r1, r5
 80042be:	f000 fb2b 	bl	8004918 <_malloc_r>
 80042c2:	4606      	mov	r6, r0
 80042c4:	b950      	cbnz	r0, 80042dc <__ssputs_r+0x5c>
 80042c6:	230c      	movs	r3, #12
 80042c8:	f8ca 3000 	str.w	r3, [sl]
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d2:	81a3      	strh	r3, [r4, #12]
 80042d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042dc:	463a      	mov	r2, r7
 80042de:	6921      	ldr	r1, [r4, #16]
 80042e0:	f000 faa8 	bl	8004834 <memcpy>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	6126      	str	r6, [r4, #16]
 80042f2:	6165      	str	r5, [r4, #20]
 80042f4:	443e      	add	r6, r7
 80042f6:	1bed      	subs	r5, r5, r7
 80042f8:	6026      	str	r6, [r4, #0]
 80042fa:	60a5      	str	r5, [r4, #8]
 80042fc:	464e      	mov	r6, r9
 80042fe:	454e      	cmp	r6, r9
 8004300:	d900      	bls.n	8004304 <__ssputs_r+0x84>
 8004302:	464e      	mov	r6, r9
 8004304:	4632      	mov	r2, r6
 8004306:	4641      	mov	r1, r8
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	f000 fa9e 	bl	800484a <memmove>
 800430e:	68a3      	ldr	r3, [r4, #8]
 8004310:	1b9b      	subs	r3, r3, r6
 8004312:	60a3      	str	r3, [r4, #8]
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	441e      	add	r6, r3
 8004318:	6026      	str	r6, [r4, #0]
 800431a:	2000      	movs	r0, #0
 800431c:	e7dc      	b.n	80042d8 <__ssputs_r+0x58>
 800431e:	462a      	mov	r2, r5
 8004320:	f000 fb54 	bl	80049cc <_realloc_r>
 8004324:	4606      	mov	r6, r0
 8004326:	2800      	cmp	r0, #0
 8004328:	d1e2      	bne.n	80042f0 <__ssputs_r+0x70>
 800432a:	6921      	ldr	r1, [r4, #16]
 800432c:	4650      	mov	r0, sl
 800432e:	f000 faa5 	bl	800487c <_free_r>
 8004332:	e7c8      	b.n	80042c6 <__ssputs_r+0x46>

08004334 <_svfiprintf_r>:
 8004334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004338:	461d      	mov	r5, r3
 800433a:	898b      	ldrh	r3, [r1, #12]
 800433c:	061f      	lsls	r7, r3, #24
 800433e:	b09d      	sub	sp, #116	; 0x74
 8004340:	4680      	mov	r8, r0
 8004342:	460c      	mov	r4, r1
 8004344:	4616      	mov	r6, r2
 8004346:	d50f      	bpl.n	8004368 <_svfiprintf_r+0x34>
 8004348:	690b      	ldr	r3, [r1, #16]
 800434a:	b96b      	cbnz	r3, 8004368 <_svfiprintf_r+0x34>
 800434c:	2140      	movs	r1, #64	; 0x40
 800434e:	f000 fae3 	bl	8004918 <_malloc_r>
 8004352:	6020      	str	r0, [r4, #0]
 8004354:	6120      	str	r0, [r4, #16]
 8004356:	b928      	cbnz	r0, 8004364 <_svfiprintf_r+0x30>
 8004358:	230c      	movs	r3, #12
 800435a:	f8c8 3000 	str.w	r3, [r8]
 800435e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004362:	e0c8      	b.n	80044f6 <_svfiprintf_r+0x1c2>
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	6163      	str	r3, [r4, #20]
 8004368:	2300      	movs	r3, #0
 800436a:	9309      	str	r3, [sp, #36]	; 0x24
 800436c:	2320      	movs	r3, #32
 800436e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004372:	2330      	movs	r3, #48	; 0x30
 8004374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004378:	9503      	str	r5, [sp, #12]
 800437a:	f04f 0b01 	mov.w	fp, #1
 800437e:	4637      	mov	r7, r6
 8004380:	463d      	mov	r5, r7
 8004382:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004386:	b10b      	cbz	r3, 800438c <_svfiprintf_r+0x58>
 8004388:	2b25      	cmp	r3, #37	; 0x25
 800438a:	d13e      	bne.n	800440a <_svfiprintf_r+0xd6>
 800438c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004390:	d00b      	beq.n	80043aa <_svfiprintf_r+0x76>
 8004392:	4653      	mov	r3, sl
 8004394:	4632      	mov	r2, r6
 8004396:	4621      	mov	r1, r4
 8004398:	4640      	mov	r0, r8
 800439a:	f7ff ff71 	bl	8004280 <__ssputs_r>
 800439e:	3001      	adds	r0, #1
 80043a0:	f000 80a4 	beq.w	80044ec <_svfiprintf_r+0x1b8>
 80043a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a6:	4453      	add	r3, sl
 80043a8:	9309      	str	r3, [sp, #36]	; 0x24
 80043aa:	783b      	ldrb	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 809d 	beq.w	80044ec <_svfiprintf_r+0x1b8>
 80043b2:	2300      	movs	r3, #0
 80043b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043bc:	9304      	str	r3, [sp, #16]
 80043be:	9307      	str	r3, [sp, #28]
 80043c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043c4:	931a      	str	r3, [sp, #104]	; 0x68
 80043c6:	462f      	mov	r7, r5
 80043c8:	2205      	movs	r2, #5
 80043ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80043ce:	4850      	ldr	r0, [pc, #320]	; (8004510 <_svfiprintf_r+0x1dc>)
 80043d0:	f7fb ff1e 	bl	8000210 <memchr>
 80043d4:	9b04      	ldr	r3, [sp, #16]
 80043d6:	b9d0      	cbnz	r0, 800440e <_svfiprintf_r+0xda>
 80043d8:	06d9      	lsls	r1, r3, #27
 80043da:	bf44      	itt	mi
 80043dc:	2220      	movmi	r2, #32
 80043de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043e2:	071a      	lsls	r2, r3, #28
 80043e4:	bf44      	itt	mi
 80043e6:	222b      	movmi	r2, #43	; 0x2b
 80043e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043ec:	782a      	ldrb	r2, [r5, #0]
 80043ee:	2a2a      	cmp	r2, #42	; 0x2a
 80043f0:	d015      	beq.n	800441e <_svfiprintf_r+0xea>
 80043f2:	9a07      	ldr	r2, [sp, #28]
 80043f4:	462f      	mov	r7, r5
 80043f6:	2000      	movs	r0, #0
 80043f8:	250a      	movs	r5, #10
 80043fa:	4639      	mov	r1, r7
 80043fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004400:	3b30      	subs	r3, #48	; 0x30
 8004402:	2b09      	cmp	r3, #9
 8004404:	d94d      	bls.n	80044a2 <_svfiprintf_r+0x16e>
 8004406:	b1b8      	cbz	r0, 8004438 <_svfiprintf_r+0x104>
 8004408:	e00f      	b.n	800442a <_svfiprintf_r+0xf6>
 800440a:	462f      	mov	r7, r5
 800440c:	e7b8      	b.n	8004380 <_svfiprintf_r+0x4c>
 800440e:	4a40      	ldr	r2, [pc, #256]	; (8004510 <_svfiprintf_r+0x1dc>)
 8004410:	1a80      	subs	r0, r0, r2
 8004412:	fa0b f000 	lsl.w	r0, fp, r0
 8004416:	4318      	orrs	r0, r3
 8004418:	9004      	str	r0, [sp, #16]
 800441a:	463d      	mov	r5, r7
 800441c:	e7d3      	b.n	80043c6 <_svfiprintf_r+0x92>
 800441e:	9a03      	ldr	r2, [sp, #12]
 8004420:	1d11      	adds	r1, r2, #4
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	9103      	str	r1, [sp, #12]
 8004426:	2a00      	cmp	r2, #0
 8004428:	db01      	blt.n	800442e <_svfiprintf_r+0xfa>
 800442a:	9207      	str	r2, [sp, #28]
 800442c:	e004      	b.n	8004438 <_svfiprintf_r+0x104>
 800442e:	4252      	negs	r2, r2
 8004430:	f043 0302 	orr.w	r3, r3, #2
 8004434:	9207      	str	r2, [sp, #28]
 8004436:	9304      	str	r3, [sp, #16]
 8004438:	783b      	ldrb	r3, [r7, #0]
 800443a:	2b2e      	cmp	r3, #46	; 0x2e
 800443c:	d10c      	bne.n	8004458 <_svfiprintf_r+0x124>
 800443e:	787b      	ldrb	r3, [r7, #1]
 8004440:	2b2a      	cmp	r3, #42	; 0x2a
 8004442:	d133      	bne.n	80044ac <_svfiprintf_r+0x178>
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	1d1a      	adds	r2, r3, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	9203      	str	r2, [sp, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	bfb8      	it	lt
 8004450:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004454:	3702      	adds	r7, #2
 8004456:	9305      	str	r3, [sp, #20]
 8004458:	4d2e      	ldr	r5, [pc, #184]	; (8004514 <_svfiprintf_r+0x1e0>)
 800445a:	7839      	ldrb	r1, [r7, #0]
 800445c:	2203      	movs	r2, #3
 800445e:	4628      	mov	r0, r5
 8004460:	f7fb fed6 	bl	8000210 <memchr>
 8004464:	b138      	cbz	r0, 8004476 <_svfiprintf_r+0x142>
 8004466:	2340      	movs	r3, #64	; 0x40
 8004468:	1b40      	subs	r0, r0, r5
 800446a:	fa03 f000 	lsl.w	r0, r3, r0
 800446e:	9b04      	ldr	r3, [sp, #16]
 8004470:	4303      	orrs	r3, r0
 8004472:	3701      	adds	r7, #1
 8004474:	9304      	str	r3, [sp, #16]
 8004476:	7839      	ldrb	r1, [r7, #0]
 8004478:	4827      	ldr	r0, [pc, #156]	; (8004518 <_svfiprintf_r+0x1e4>)
 800447a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800447e:	2206      	movs	r2, #6
 8004480:	1c7e      	adds	r6, r7, #1
 8004482:	f7fb fec5 	bl	8000210 <memchr>
 8004486:	2800      	cmp	r0, #0
 8004488:	d038      	beq.n	80044fc <_svfiprintf_r+0x1c8>
 800448a:	4b24      	ldr	r3, [pc, #144]	; (800451c <_svfiprintf_r+0x1e8>)
 800448c:	bb13      	cbnz	r3, 80044d4 <_svfiprintf_r+0x1a0>
 800448e:	9b03      	ldr	r3, [sp, #12]
 8004490:	3307      	adds	r3, #7
 8004492:	f023 0307 	bic.w	r3, r3, #7
 8004496:	3308      	adds	r3, #8
 8004498:	9303      	str	r3, [sp, #12]
 800449a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800449c:	444b      	add	r3, r9
 800449e:	9309      	str	r3, [sp, #36]	; 0x24
 80044a0:	e76d      	b.n	800437e <_svfiprintf_r+0x4a>
 80044a2:	fb05 3202 	mla	r2, r5, r2, r3
 80044a6:	2001      	movs	r0, #1
 80044a8:	460f      	mov	r7, r1
 80044aa:	e7a6      	b.n	80043fa <_svfiprintf_r+0xc6>
 80044ac:	2300      	movs	r3, #0
 80044ae:	3701      	adds	r7, #1
 80044b0:	9305      	str	r3, [sp, #20]
 80044b2:	4619      	mov	r1, r3
 80044b4:	250a      	movs	r5, #10
 80044b6:	4638      	mov	r0, r7
 80044b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044bc:	3a30      	subs	r2, #48	; 0x30
 80044be:	2a09      	cmp	r2, #9
 80044c0:	d903      	bls.n	80044ca <_svfiprintf_r+0x196>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0c8      	beq.n	8004458 <_svfiprintf_r+0x124>
 80044c6:	9105      	str	r1, [sp, #20]
 80044c8:	e7c6      	b.n	8004458 <_svfiprintf_r+0x124>
 80044ca:	fb05 2101 	mla	r1, r5, r1, r2
 80044ce:	2301      	movs	r3, #1
 80044d0:	4607      	mov	r7, r0
 80044d2:	e7f0      	b.n	80044b6 <_svfiprintf_r+0x182>
 80044d4:	ab03      	add	r3, sp, #12
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	4622      	mov	r2, r4
 80044da:	4b11      	ldr	r3, [pc, #68]	; (8004520 <_svfiprintf_r+0x1ec>)
 80044dc:	a904      	add	r1, sp, #16
 80044de:	4640      	mov	r0, r8
 80044e0:	f3af 8000 	nop.w
 80044e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80044e8:	4681      	mov	r9, r0
 80044ea:	d1d6      	bne.n	800449a <_svfiprintf_r+0x166>
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	065b      	lsls	r3, r3, #25
 80044f0:	f53f af35 	bmi.w	800435e <_svfiprintf_r+0x2a>
 80044f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044f6:	b01d      	add	sp, #116	; 0x74
 80044f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fc:	ab03      	add	r3, sp, #12
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	4622      	mov	r2, r4
 8004502:	4b07      	ldr	r3, [pc, #28]	; (8004520 <_svfiprintf_r+0x1ec>)
 8004504:	a904      	add	r1, sp, #16
 8004506:	4640      	mov	r0, r8
 8004508:	f000 f882 	bl	8004610 <_printf_i>
 800450c:	e7ea      	b.n	80044e4 <_svfiprintf_r+0x1b0>
 800450e:	bf00      	nop
 8004510:	08004ca4 	.word	0x08004ca4
 8004514:	08004caa 	.word	0x08004caa
 8004518:	08004cae 	.word	0x08004cae
 800451c:	00000000 	.word	0x00000000
 8004520:	08004281 	.word	0x08004281

08004524 <_printf_common>:
 8004524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	4691      	mov	r9, r2
 800452a:	461f      	mov	r7, r3
 800452c:	688a      	ldr	r2, [r1, #8]
 800452e:	690b      	ldr	r3, [r1, #16]
 8004530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004534:	4293      	cmp	r3, r2
 8004536:	bfb8      	it	lt
 8004538:	4613      	movlt	r3, r2
 800453a:	f8c9 3000 	str.w	r3, [r9]
 800453e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004542:	4606      	mov	r6, r0
 8004544:	460c      	mov	r4, r1
 8004546:	b112      	cbz	r2, 800454e <_printf_common+0x2a>
 8004548:	3301      	adds	r3, #1
 800454a:	f8c9 3000 	str.w	r3, [r9]
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	0699      	lsls	r1, r3, #26
 8004552:	bf42      	ittt	mi
 8004554:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004558:	3302      	addmi	r3, #2
 800455a:	f8c9 3000 	strmi.w	r3, [r9]
 800455e:	6825      	ldr	r5, [r4, #0]
 8004560:	f015 0506 	ands.w	r5, r5, #6
 8004564:	d107      	bne.n	8004576 <_printf_common+0x52>
 8004566:	f104 0a19 	add.w	sl, r4, #25
 800456a:	68e3      	ldr	r3, [r4, #12]
 800456c:	f8d9 2000 	ldr.w	r2, [r9]
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	42ab      	cmp	r3, r5
 8004574:	dc28      	bgt.n	80045c8 <_printf_common+0xa4>
 8004576:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800457a:	6822      	ldr	r2, [r4, #0]
 800457c:	3300      	adds	r3, #0
 800457e:	bf18      	it	ne
 8004580:	2301      	movne	r3, #1
 8004582:	0692      	lsls	r2, r2, #26
 8004584:	d42d      	bmi.n	80045e2 <_printf_common+0xbe>
 8004586:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800458a:	4639      	mov	r1, r7
 800458c:	4630      	mov	r0, r6
 800458e:	47c0      	blx	r8
 8004590:	3001      	adds	r0, #1
 8004592:	d020      	beq.n	80045d6 <_printf_common+0xb2>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	68e5      	ldr	r5, [r4, #12]
 8004598:	f8d9 2000 	ldr.w	r2, [r9]
 800459c:	f003 0306 	and.w	r3, r3, #6
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	bf08      	it	eq
 80045a4:	1aad      	subeq	r5, r5, r2
 80045a6:	68a3      	ldr	r3, [r4, #8]
 80045a8:	6922      	ldr	r2, [r4, #16]
 80045aa:	bf0c      	ite	eq
 80045ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b0:	2500      	movne	r5, #0
 80045b2:	4293      	cmp	r3, r2
 80045b4:	bfc4      	itt	gt
 80045b6:	1a9b      	subgt	r3, r3, r2
 80045b8:	18ed      	addgt	r5, r5, r3
 80045ba:	f04f 0900 	mov.w	r9, #0
 80045be:	341a      	adds	r4, #26
 80045c0:	454d      	cmp	r5, r9
 80045c2:	d11a      	bne.n	80045fa <_printf_common+0xd6>
 80045c4:	2000      	movs	r0, #0
 80045c6:	e008      	b.n	80045da <_printf_common+0xb6>
 80045c8:	2301      	movs	r3, #1
 80045ca:	4652      	mov	r2, sl
 80045cc:	4639      	mov	r1, r7
 80045ce:	4630      	mov	r0, r6
 80045d0:	47c0      	blx	r8
 80045d2:	3001      	adds	r0, #1
 80045d4:	d103      	bne.n	80045de <_printf_common+0xba>
 80045d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045de:	3501      	adds	r5, #1
 80045e0:	e7c3      	b.n	800456a <_printf_common+0x46>
 80045e2:	18e1      	adds	r1, r4, r3
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	2030      	movs	r0, #48	; 0x30
 80045e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045ec:	4422      	add	r2, r4
 80045ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045f6:	3302      	adds	r3, #2
 80045f8:	e7c5      	b.n	8004586 <_printf_common+0x62>
 80045fa:	2301      	movs	r3, #1
 80045fc:	4622      	mov	r2, r4
 80045fe:	4639      	mov	r1, r7
 8004600:	4630      	mov	r0, r6
 8004602:	47c0      	blx	r8
 8004604:	3001      	adds	r0, #1
 8004606:	d0e6      	beq.n	80045d6 <_printf_common+0xb2>
 8004608:	f109 0901 	add.w	r9, r9, #1
 800460c:	e7d8      	b.n	80045c0 <_printf_common+0x9c>
	...

08004610 <_printf_i>:
 8004610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004614:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004618:	460c      	mov	r4, r1
 800461a:	7e09      	ldrb	r1, [r1, #24]
 800461c:	b085      	sub	sp, #20
 800461e:	296e      	cmp	r1, #110	; 0x6e
 8004620:	4617      	mov	r7, r2
 8004622:	4606      	mov	r6, r0
 8004624:	4698      	mov	r8, r3
 8004626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004628:	f000 80b3 	beq.w	8004792 <_printf_i+0x182>
 800462c:	d822      	bhi.n	8004674 <_printf_i+0x64>
 800462e:	2963      	cmp	r1, #99	; 0x63
 8004630:	d036      	beq.n	80046a0 <_printf_i+0x90>
 8004632:	d80a      	bhi.n	800464a <_printf_i+0x3a>
 8004634:	2900      	cmp	r1, #0
 8004636:	f000 80b9 	beq.w	80047ac <_printf_i+0x19c>
 800463a:	2958      	cmp	r1, #88	; 0x58
 800463c:	f000 8083 	beq.w	8004746 <_printf_i+0x136>
 8004640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004644:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004648:	e032      	b.n	80046b0 <_printf_i+0xa0>
 800464a:	2964      	cmp	r1, #100	; 0x64
 800464c:	d001      	beq.n	8004652 <_printf_i+0x42>
 800464e:	2969      	cmp	r1, #105	; 0x69
 8004650:	d1f6      	bne.n	8004640 <_printf_i+0x30>
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	6813      	ldr	r3, [r2, #0]
 8004656:	0605      	lsls	r5, r0, #24
 8004658:	f103 0104 	add.w	r1, r3, #4
 800465c:	d52a      	bpl.n	80046b4 <_printf_i+0xa4>
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6011      	str	r1, [r2, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	da03      	bge.n	800466e <_printf_i+0x5e>
 8004666:	222d      	movs	r2, #45	; 0x2d
 8004668:	425b      	negs	r3, r3
 800466a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800466e:	486f      	ldr	r0, [pc, #444]	; (800482c <_printf_i+0x21c>)
 8004670:	220a      	movs	r2, #10
 8004672:	e039      	b.n	80046e8 <_printf_i+0xd8>
 8004674:	2973      	cmp	r1, #115	; 0x73
 8004676:	f000 809d 	beq.w	80047b4 <_printf_i+0x1a4>
 800467a:	d808      	bhi.n	800468e <_printf_i+0x7e>
 800467c:	296f      	cmp	r1, #111	; 0x6f
 800467e:	d020      	beq.n	80046c2 <_printf_i+0xb2>
 8004680:	2970      	cmp	r1, #112	; 0x70
 8004682:	d1dd      	bne.n	8004640 <_printf_i+0x30>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	f043 0320 	orr.w	r3, r3, #32
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	e003      	b.n	8004696 <_printf_i+0x86>
 800468e:	2975      	cmp	r1, #117	; 0x75
 8004690:	d017      	beq.n	80046c2 <_printf_i+0xb2>
 8004692:	2978      	cmp	r1, #120	; 0x78
 8004694:	d1d4      	bne.n	8004640 <_printf_i+0x30>
 8004696:	2378      	movs	r3, #120	; 0x78
 8004698:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800469c:	4864      	ldr	r0, [pc, #400]	; (8004830 <_printf_i+0x220>)
 800469e:	e055      	b.n	800474c <_printf_i+0x13c>
 80046a0:	6813      	ldr	r3, [r2, #0]
 80046a2:	1d19      	adds	r1, r3, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6011      	str	r1, [r2, #0]
 80046a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046b0:	2301      	movs	r3, #1
 80046b2:	e08c      	b.n	80047ce <_printf_i+0x1be>
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6011      	str	r1, [r2, #0]
 80046b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046bc:	bf18      	it	ne
 80046be:	b21b      	sxthne	r3, r3
 80046c0:	e7cf      	b.n	8004662 <_printf_i+0x52>
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	6825      	ldr	r5, [r4, #0]
 80046c6:	1d18      	adds	r0, r3, #4
 80046c8:	6010      	str	r0, [r2, #0]
 80046ca:	0628      	lsls	r0, r5, #24
 80046cc:	d501      	bpl.n	80046d2 <_printf_i+0xc2>
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	e002      	b.n	80046d8 <_printf_i+0xc8>
 80046d2:	0668      	lsls	r0, r5, #25
 80046d4:	d5fb      	bpl.n	80046ce <_printf_i+0xbe>
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	4854      	ldr	r0, [pc, #336]	; (800482c <_printf_i+0x21c>)
 80046da:	296f      	cmp	r1, #111	; 0x6f
 80046dc:	bf14      	ite	ne
 80046de:	220a      	movne	r2, #10
 80046e0:	2208      	moveq	r2, #8
 80046e2:	2100      	movs	r1, #0
 80046e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046e8:	6865      	ldr	r5, [r4, #4]
 80046ea:	60a5      	str	r5, [r4, #8]
 80046ec:	2d00      	cmp	r5, #0
 80046ee:	f2c0 8095 	blt.w	800481c <_printf_i+0x20c>
 80046f2:	6821      	ldr	r1, [r4, #0]
 80046f4:	f021 0104 	bic.w	r1, r1, #4
 80046f8:	6021      	str	r1, [r4, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d13d      	bne.n	800477a <_printf_i+0x16a>
 80046fe:	2d00      	cmp	r5, #0
 8004700:	f040 808e 	bne.w	8004820 <_printf_i+0x210>
 8004704:	4665      	mov	r5, ip
 8004706:	2a08      	cmp	r2, #8
 8004708:	d10b      	bne.n	8004722 <_printf_i+0x112>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	07db      	lsls	r3, r3, #31
 800470e:	d508      	bpl.n	8004722 <_printf_i+0x112>
 8004710:	6923      	ldr	r3, [r4, #16]
 8004712:	6862      	ldr	r2, [r4, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	bfde      	ittt	le
 8004718:	2330      	movle	r3, #48	; 0x30
 800471a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800471e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004722:	ebac 0305 	sub.w	r3, ip, r5
 8004726:	6123      	str	r3, [r4, #16]
 8004728:	f8cd 8000 	str.w	r8, [sp]
 800472c:	463b      	mov	r3, r7
 800472e:	aa03      	add	r2, sp, #12
 8004730:	4621      	mov	r1, r4
 8004732:	4630      	mov	r0, r6
 8004734:	f7ff fef6 	bl	8004524 <_printf_common>
 8004738:	3001      	adds	r0, #1
 800473a:	d14d      	bne.n	80047d8 <_printf_i+0x1c8>
 800473c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004740:	b005      	add	sp, #20
 8004742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004746:	4839      	ldr	r0, [pc, #228]	; (800482c <_printf_i+0x21c>)
 8004748:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800474c:	6813      	ldr	r3, [r2, #0]
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	1d1d      	adds	r5, r3, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6015      	str	r5, [r2, #0]
 8004756:	060a      	lsls	r2, r1, #24
 8004758:	d50b      	bpl.n	8004772 <_printf_i+0x162>
 800475a:	07ca      	lsls	r2, r1, #31
 800475c:	bf44      	itt	mi
 800475e:	f041 0120 	orrmi.w	r1, r1, #32
 8004762:	6021      	strmi	r1, [r4, #0]
 8004764:	b91b      	cbnz	r3, 800476e <_printf_i+0x15e>
 8004766:	6822      	ldr	r2, [r4, #0]
 8004768:	f022 0220 	bic.w	r2, r2, #32
 800476c:	6022      	str	r2, [r4, #0]
 800476e:	2210      	movs	r2, #16
 8004770:	e7b7      	b.n	80046e2 <_printf_i+0xd2>
 8004772:	064d      	lsls	r5, r1, #25
 8004774:	bf48      	it	mi
 8004776:	b29b      	uxthmi	r3, r3
 8004778:	e7ef      	b.n	800475a <_printf_i+0x14a>
 800477a:	4665      	mov	r5, ip
 800477c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004780:	fb02 3311 	mls	r3, r2, r1, r3
 8004784:	5cc3      	ldrb	r3, [r0, r3]
 8004786:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800478a:	460b      	mov	r3, r1
 800478c:	2900      	cmp	r1, #0
 800478e:	d1f5      	bne.n	800477c <_printf_i+0x16c>
 8004790:	e7b9      	b.n	8004706 <_printf_i+0xf6>
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	6825      	ldr	r5, [r4, #0]
 8004796:	6961      	ldr	r1, [r4, #20]
 8004798:	1d18      	adds	r0, r3, #4
 800479a:	6010      	str	r0, [r2, #0]
 800479c:	0628      	lsls	r0, r5, #24
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	d501      	bpl.n	80047a6 <_printf_i+0x196>
 80047a2:	6019      	str	r1, [r3, #0]
 80047a4:	e002      	b.n	80047ac <_printf_i+0x19c>
 80047a6:	066a      	lsls	r2, r5, #25
 80047a8:	d5fb      	bpl.n	80047a2 <_printf_i+0x192>
 80047aa:	8019      	strh	r1, [r3, #0]
 80047ac:	2300      	movs	r3, #0
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	4665      	mov	r5, ip
 80047b2:	e7b9      	b.n	8004728 <_printf_i+0x118>
 80047b4:	6813      	ldr	r3, [r2, #0]
 80047b6:	1d19      	adds	r1, r3, #4
 80047b8:	6011      	str	r1, [r2, #0]
 80047ba:	681d      	ldr	r5, [r3, #0]
 80047bc:	6862      	ldr	r2, [r4, #4]
 80047be:	2100      	movs	r1, #0
 80047c0:	4628      	mov	r0, r5
 80047c2:	f7fb fd25 	bl	8000210 <memchr>
 80047c6:	b108      	cbz	r0, 80047cc <_printf_i+0x1bc>
 80047c8:	1b40      	subs	r0, r0, r5
 80047ca:	6060      	str	r0, [r4, #4]
 80047cc:	6863      	ldr	r3, [r4, #4]
 80047ce:	6123      	str	r3, [r4, #16]
 80047d0:	2300      	movs	r3, #0
 80047d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d6:	e7a7      	b.n	8004728 <_printf_i+0x118>
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	462a      	mov	r2, r5
 80047dc:	4639      	mov	r1, r7
 80047de:	4630      	mov	r0, r6
 80047e0:	47c0      	blx	r8
 80047e2:	3001      	adds	r0, #1
 80047e4:	d0aa      	beq.n	800473c <_printf_i+0x12c>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	079b      	lsls	r3, r3, #30
 80047ea:	d413      	bmi.n	8004814 <_printf_i+0x204>
 80047ec:	68e0      	ldr	r0, [r4, #12]
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	4298      	cmp	r0, r3
 80047f2:	bfb8      	it	lt
 80047f4:	4618      	movlt	r0, r3
 80047f6:	e7a3      	b.n	8004740 <_printf_i+0x130>
 80047f8:	2301      	movs	r3, #1
 80047fa:	464a      	mov	r2, r9
 80047fc:	4639      	mov	r1, r7
 80047fe:	4630      	mov	r0, r6
 8004800:	47c0      	blx	r8
 8004802:	3001      	adds	r0, #1
 8004804:	d09a      	beq.n	800473c <_printf_i+0x12c>
 8004806:	3501      	adds	r5, #1
 8004808:	68e3      	ldr	r3, [r4, #12]
 800480a:	9a03      	ldr	r2, [sp, #12]
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	42ab      	cmp	r3, r5
 8004810:	dcf2      	bgt.n	80047f8 <_printf_i+0x1e8>
 8004812:	e7eb      	b.n	80047ec <_printf_i+0x1dc>
 8004814:	2500      	movs	r5, #0
 8004816:	f104 0919 	add.w	r9, r4, #25
 800481a:	e7f5      	b.n	8004808 <_printf_i+0x1f8>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1ac      	bne.n	800477a <_printf_i+0x16a>
 8004820:	7803      	ldrb	r3, [r0, #0]
 8004822:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004826:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800482a:	e76c      	b.n	8004706 <_printf_i+0xf6>
 800482c:	08004cb5 	.word	0x08004cb5
 8004830:	08004cc6 	.word	0x08004cc6

08004834 <memcpy>:
 8004834:	b510      	push	{r4, lr}
 8004836:	1e43      	subs	r3, r0, #1
 8004838:	440a      	add	r2, r1
 800483a:	4291      	cmp	r1, r2
 800483c:	d100      	bne.n	8004840 <memcpy+0xc>
 800483e:	bd10      	pop	{r4, pc}
 8004840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004848:	e7f7      	b.n	800483a <memcpy+0x6>

0800484a <memmove>:
 800484a:	4288      	cmp	r0, r1
 800484c:	b510      	push	{r4, lr}
 800484e:	eb01 0302 	add.w	r3, r1, r2
 8004852:	d807      	bhi.n	8004864 <memmove+0x1a>
 8004854:	1e42      	subs	r2, r0, #1
 8004856:	4299      	cmp	r1, r3
 8004858:	d00a      	beq.n	8004870 <memmove+0x26>
 800485a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800485e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004862:	e7f8      	b.n	8004856 <memmove+0xc>
 8004864:	4283      	cmp	r3, r0
 8004866:	d9f5      	bls.n	8004854 <memmove+0xa>
 8004868:	1881      	adds	r1, r0, r2
 800486a:	1ad2      	subs	r2, r2, r3
 800486c:	42d3      	cmn	r3, r2
 800486e:	d100      	bne.n	8004872 <memmove+0x28>
 8004870:	bd10      	pop	{r4, pc}
 8004872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004876:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800487a:	e7f7      	b.n	800486c <memmove+0x22>

0800487c <_free_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	2900      	cmp	r1, #0
 8004882:	d045      	beq.n	8004910 <_free_r+0x94>
 8004884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004888:	1f0c      	subs	r4, r1, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	bfb8      	it	lt
 800488e:	18e4      	addlt	r4, r4, r3
 8004890:	f000 f8d2 	bl	8004a38 <__malloc_lock>
 8004894:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <_free_r+0x98>)
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	4610      	mov	r0, r2
 800489a:	b933      	cbnz	r3, 80048aa <_free_r+0x2e>
 800489c:	6063      	str	r3, [r4, #4]
 800489e:	6014      	str	r4, [r2, #0]
 80048a0:	4628      	mov	r0, r5
 80048a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048a6:	f000 b8c8 	b.w	8004a3a <__malloc_unlock>
 80048aa:	42a3      	cmp	r3, r4
 80048ac:	d90c      	bls.n	80048c8 <_free_r+0x4c>
 80048ae:	6821      	ldr	r1, [r4, #0]
 80048b0:	1862      	adds	r2, r4, r1
 80048b2:	4293      	cmp	r3, r2
 80048b4:	bf04      	itt	eq
 80048b6:	681a      	ldreq	r2, [r3, #0]
 80048b8:	685b      	ldreq	r3, [r3, #4]
 80048ba:	6063      	str	r3, [r4, #4]
 80048bc:	bf04      	itt	eq
 80048be:	1852      	addeq	r2, r2, r1
 80048c0:	6022      	streq	r2, [r4, #0]
 80048c2:	6004      	str	r4, [r0, #0]
 80048c4:	e7ec      	b.n	80048a0 <_free_r+0x24>
 80048c6:	4613      	mov	r3, r2
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	b10a      	cbz	r2, 80048d0 <_free_r+0x54>
 80048cc:	42a2      	cmp	r2, r4
 80048ce:	d9fa      	bls.n	80048c6 <_free_r+0x4a>
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	1858      	adds	r0, r3, r1
 80048d4:	42a0      	cmp	r0, r4
 80048d6:	d10b      	bne.n	80048f0 <_free_r+0x74>
 80048d8:	6820      	ldr	r0, [r4, #0]
 80048da:	4401      	add	r1, r0
 80048dc:	1858      	adds	r0, r3, r1
 80048de:	4282      	cmp	r2, r0
 80048e0:	6019      	str	r1, [r3, #0]
 80048e2:	d1dd      	bne.n	80048a0 <_free_r+0x24>
 80048e4:	6810      	ldr	r0, [r2, #0]
 80048e6:	6852      	ldr	r2, [r2, #4]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	4401      	add	r1, r0
 80048ec:	6019      	str	r1, [r3, #0]
 80048ee:	e7d7      	b.n	80048a0 <_free_r+0x24>
 80048f0:	d902      	bls.n	80048f8 <_free_r+0x7c>
 80048f2:	230c      	movs	r3, #12
 80048f4:	602b      	str	r3, [r5, #0]
 80048f6:	e7d3      	b.n	80048a0 <_free_r+0x24>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	1821      	adds	r1, r4, r0
 80048fc:	428a      	cmp	r2, r1
 80048fe:	bf04      	itt	eq
 8004900:	6811      	ldreq	r1, [r2, #0]
 8004902:	6852      	ldreq	r2, [r2, #4]
 8004904:	6062      	str	r2, [r4, #4]
 8004906:	bf04      	itt	eq
 8004908:	1809      	addeq	r1, r1, r0
 800490a:	6021      	streq	r1, [r4, #0]
 800490c:	605c      	str	r4, [r3, #4]
 800490e:	e7c7      	b.n	80048a0 <_free_r+0x24>
 8004910:	bd38      	pop	{r3, r4, r5, pc}
 8004912:	bf00      	nop
 8004914:	20000114 	.word	0x20000114

08004918 <_malloc_r>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	1ccd      	adds	r5, r1, #3
 800491c:	f025 0503 	bic.w	r5, r5, #3
 8004920:	3508      	adds	r5, #8
 8004922:	2d0c      	cmp	r5, #12
 8004924:	bf38      	it	cc
 8004926:	250c      	movcc	r5, #12
 8004928:	2d00      	cmp	r5, #0
 800492a:	4606      	mov	r6, r0
 800492c:	db01      	blt.n	8004932 <_malloc_r+0x1a>
 800492e:	42a9      	cmp	r1, r5
 8004930:	d903      	bls.n	800493a <_malloc_r+0x22>
 8004932:	230c      	movs	r3, #12
 8004934:	6033      	str	r3, [r6, #0]
 8004936:	2000      	movs	r0, #0
 8004938:	bd70      	pop	{r4, r5, r6, pc}
 800493a:	f000 f87d 	bl	8004a38 <__malloc_lock>
 800493e:	4a21      	ldr	r2, [pc, #132]	; (80049c4 <_malloc_r+0xac>)
 8004940:	6814      	ldr	r4, [r2, #0]
 8004942:	4621      	mov	r1, r4
 8004944:	b991      	cbnz	r1, 800496c <_malloc_r+0x54>
 8004946:	4c20      	ldr	r4, [pc, #128]	; (80049c8 <_malloc_r+0xb0>)
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	b91b      	cbnz	r3, 8004954 <_malloc_r+0x3c>
 800494c:	4630      	mov	r0, r6
 800494e:	f000 f863 	bl	8004a18 <_sbrk_r>
 8004952:	6020      	str	r0, [r4, #0]
 8004954:	4629      	mov	r1, r5
 8004956:	4630      	mov	r0, r6
 8004958:	f000 f85e 	bl	8004a18 <_sbrk_r>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d124      	bne.n	80049aa <_malloc_r+0x92>
 8004960:	230c      	movs	r3, #12
 8004962:	6033      	str	r3, [r6, #0]
 8004964:	4630      	mov	r0, r6
 8004966:	f000 f868 	bl	8004a3a <__malloc_unlock>
 800496a:	e7e4      	b.n	8004936 <_malloc_r+0x1e>
 800496c:	680b      	ldr	r3, [r1, #0]
 800496e:	1b5b      	subs	r3, r3, r5
 8004970:	d418      	bmi.n	80049a4 <_malloc_r+0x8c>
 8004972:	2b0b      	cmp	r3, #11
 8004974:	d90f      	bls.n	8004996 <_malloc_r+0x7e>
 8004976:	600b      	str	r3, [r1, #0]
 8004978:	50cd      	str	r5, [r1, r3]
 800497a:	18cc      	adds	r4, r1, r3
 800497c:	4630      	mov	r0, r6
 800497e:	f000 f85c 	bl	8004a3a <__malloc_unlock>
 8004982:	f104 000b 	add.w	r0, r4, #11
 8004986:	1d23      	adds	r3, r4, #4
 8004988:	f020 0007 	bic.w	r0, r0, #7
 800498c:	1ac3      	subs	r3, r0, r3
 800498e:	d0d3      	beq.n	8004938 <_malloc_r+0x20>
 8004990:	425a      	negs	r2, r3
 8004992:	50e2      	str	r2, [r4, r3]
 8004994:	e7d0      	b.n	8004938 <_malloc_r+0x20>
 8004996:	428c      	cmp	r4, r1
 8004998:	684b      	ldr	r3, [r1, #4]
 800499a:	bf16      	itet	ne
 800499c:	6063      	strne	r3, [r4, #4]
 800499e:	6013      	streq	r3, [r2, #0]
 80049a0:	460c      	movne	r4, r1
 80049a2:	e7eb      	b.n	800497c <_malloc_r+0x64>
 80049a4:	460c      	mov	r4, r1
 80049a6:	6849      	ldr	r1, [r1, #4]
 80049a8:	e7cc      	b.n	8004944 <_malloc_r+0x2c>
 80049aa:	1cc4      	adds	r4, r0, #3
 80049ac:	f024 0403 	bic.w	r4, r4, #3
 80049b0:	42a0      	cmp	r0, r4
 80049b2:	d005      	beq.n	80049c0 <_malloc_r+0xa8>
 80049b4:	1a21      	subs	r1, r4, r0
 80049b6:	4630      	mov	r0, r6
 80049b8:	f000 f82e 	bl	8004a18 <_sbrk_r>
 80049bc:	3001      	adds	r0, #1
 80049be:	d0cf      	beq.n	8004960 <_malloc_r+0x48>
 80049c0:	6025      	str	r5, [r4, #0]
 80049c2:	e7db      	b.n	800497c <_malloc_r+0x64>
 80049c4:	20000114 	.word	0x20000114
 80049c8:	20000118 	.word	0x20000118

080049cc <_realloc_r>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	4607      	mov	r7, r0
 80049d0:	4614      	mov	r4, r2
 80049d2:	460e      	mov	r6, r1
 80049d4:	b921      	cbnz	r1, 80049e0 <_realloc_r+0x14>
 80049d6:	4611      	mov	r1, r2
 80049d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049dc:	f7ff bf9c 	b.w	8004918 <_malloc_r>
 80049e0:	b922      	cbnz	r2, 80049ec <_realloc_r+0x20>
 80049e2:	f7ff ff4b 	bl	800487c <_free_r>
 80049e6:	4625      	mov	r5, r4
 80049e8:	4628      	mov	r0, r5
 80049ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ec:	f000 f826 	bl	8004a3c <_malloc_usable_size_r>
 80049f0:	42a0      	cmp	r0, r4
 80049f2:	d20f      	bcs.n	8004a14 <_realloc_r+0x48>
 80049f4:	4621      	mov	r1, r4
 80049f6:	4638      	mov	r0, r7
 80049f8:	f7ff ff8e 	bl	8004918 <_malloc_r>
 80049fc:	4605      	mov	r5, r0
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d0f2      	beq.n	80049e8 <_realloc_r+0x1c>
 8004a02:	4631      	mov	r1, r6
 8004a04:	4622      	mov	r2, r4
 8004a06:	f7ff ff15 	bl	8004834 <memcpy>
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	f7ff ff35 	bl	800487c <_free_r>
 8004a12:	e7e9      	b.n	80049e8 <_realloc_r+0x1c>
 8004a14:	4635      	mov	r5, r6
 8004a16:	e7e7      	b.n	80049e8 <_realloc_r+0x1c>

08004a18 <_sbrk_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4c06      	ldr	r4, [pc, #24]	; (8004a34 <_sbrk_r+0x1c>)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4605      	mov	r5, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	6023      	str	r3, [r4, #0]
 8004a24:	f7fc fd30 	bl	8001488 <_sbrk>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_sbrk_r+0x1a>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_sbrk_r+0x1a>
 8004a30:	602b      	str	r3, [r5, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	200003f8 	.word	0x200003f8

08004a38 <__malloc_lock>:
 8004a38:	4770      	bx	lr

08004a3a <__malloc_unlock>:
 8004a3a:	4770      	bx	lr

08004a3c <_malloc_usable_size_r>:
 8004a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a40:	1f18      	subs	r0, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bfbc      	itt	lt
 8004a46:	580b      	ldrlt	r3, [r1, r0]
 8004a48:	18c0      	addlt	r0, r0, r3
 8004a4a:	4770      	bx	lr

08004a4c <_init>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr

08004a58 <_fini>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr
