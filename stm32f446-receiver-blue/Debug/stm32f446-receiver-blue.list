
stm32f446-receiver-blue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a8  080049a8  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  080049a8  080049a8  000149a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b0  080049b0  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049b4  080049b4  000149b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080049b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  200000f4  08004aac  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08004aac  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca5f  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c9f  00000000  00000000  0002cb83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  0002e828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c18  00000000  00000000  0002f528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000217d1  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096e1  00000000  00000000  00051911  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce416  00000000  00000000  0005aff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129408  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003648  00000000  00000000  00129484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000f4 	.word	0x200000f4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004670 	.word	0x08004670

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000f8 	.word	0x200000f8
 8000200:	08004670 	.word	0x08004670

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Data8_toMassHex>:
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

// Функция перевода массива чисел в массив Hex символов
void Data8_toMassHex(uint8_t* Data,uint8_t DataLen, uint8_t* pcBlock, uint8_t StrartMass)
{
 8000504:	b480      	push	{r7}
 8000506:	b087      	sub	sp, #28
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	607a      	str	r2, [r7, #4]
 800050e:	461a      	mov	r2, r3
 8000510:	460b      	mov	r3, r1
 8000512:	72fb      	strb	r3, [r7, #11]
 8000514:	4613      	mov	r3, r2
 8000516:	72bb      	strb	r3, [r7, #10]
	for(uint8_t j=0; j < DataLen; j++)
 8000518:	2300      	movs	r3, #0
 800051a:	75fb      	strb	r3, [r7, #23]
 800051c:	e060      	b.n	80005e0 <Data8_toMassHex+0xdc>
	{
		for (int8_t i = 1 + StrartMass; i >= StrartMass; i--)
 800051e:	7abb      	ldrb	r3, [r7, #10]
 8000520:	3301      	adds	r3, #1
 8000522:	b2db      	uxtb	r3, r3
 8000524:	75bb      	strb	r3, [r7, #22]
 8000526:	e053      	b.n	80005d0 <Data8_toMassHex+0xcc>
		{
			pcBlock[i+j*2] = Data[j] % 16;
 8000528:	7dfb      	ldrb	r3, [r7, #23]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	4413      	add	r3, r2
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	f997 1016 	ldrsb.w	r1, [r7, #22]
 8000534:	7dfb      	ldrb	r3, [r7, #23]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	440b      	add	r3, r1
 800053a:	4619      	mov	r1, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	440b      	add	r3, r1
 8000540:	f002 020f 	and.w	r2, r2, #15
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
			if (pcBlock[i+j*2] >= 10)
 8000548:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800054c:	7dfb      	ldrb	r3, [r7, #23]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	4413      	add	r3, r2
 8000552:	461a      	mov	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b09      	cmp	r3, #9
 800055c:	d914      	bls.n	8000588 <Data8_toMassHex+0x84>
			{
				pcBlock[i+j*2] += 55;
 800055e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4413      	add	r3, r2
 8000568:	461a      	mov	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	f997 1016 	ldrsb.w	r1, [r7, #22]
 8000574:	7dfb      	ldrb	r3, [r7, #23]
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	440b      	add	r3, r1
 800057a:	4619      	mov	r1, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	440b      	add	r3, r1
 8000580:	3237      	adds	r2, #55	; 0x37
 8000582:	b2d2      	uxtb	r2, r2
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	e013      	b.n	80005b0 <Data8_toMassHex+0xac>
			}
			else pcBlock[i+j*2] += 48;
 8000588:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800058c:	7dfb      	ldrb	r3, [r7, #23]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	461a      	mov	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	f997 1016 	ldrsb.w	r1, [r7, #22]
 800059e:	7dfb      	ldrb	r3, [r7, #23]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	440b      	add	r3, r1
 80005a4:	4619      	mov	r1, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	440b      	add	r3, r1
 80005aa:	3230      	adds	r2, #48	; 0x30
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
			Data[j] /= 16;
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	4413      	add	r3, r2
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	68f9      	ldr	r1, [r7, #12]
 80005bc:	440b      	add	r3, r1
 80005be:	0912      	lsrs	r2, r2, #4
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
		for (int8_t i = 1 + StrartMass; i >= StrartMass; i--)
 80005c4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	3b01      	subs	r3, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	75bb      	strb	r3, [r7, #22]
 80005d0:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80005d4:	7abb      	ldrb	r3, [r7, #10]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	daa6      	bge.n	8000528 <Data8_toMassHex+0x24>
	for(uint8_t j=0; j < DataLen; j++)
 80005da:	7dfb      	ldrb	r3, [r7, #23]
 80005dc:	3301      	adds	r3, #1
 80005de:	75fb      	strb	r3, [r7, #23]
 80005e0:	7dfa      	ldrb	r2, [r7, #23]
 80005e2:	7afb      	ldrb	r3, [r7, #11]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d39a      	bcc.n	800051e <Data8_toMassHex+0x1a>
		}
	}
}
 80005e8:	bf00      	nop
 80005ea:	371c      	adds	r7, #28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <powx>:
// Функция нахождения степени числа
int powx(int base, int exponent)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	int result = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
	for (int i=exponent; i > 0; i--)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	e007      	b.n	8000618 <powx+0x24>
	{
		result = result * base;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	fb02 f303 	mul.w	r3, r2, r3
 8000610:	60fb      	str	r3, [r7, #12]
	for (int i=exponent; i > 0; i--)
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3b01      	subs	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b00      	cmp	r3, #0
 800061c:	dcf4      	bgt.n	8000608 <powx+0x14>
	}
	return result;
 800061e:	68fb      	ldr	r3, [r7, #12]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <Mass_toData8>:
// Функция перевода массива символов Hex в массив чисел
void Mass_toData8(uint8_t *pcBlock,uint8_t* data8, unsigned short len) //rx_buffer,rx_in-2
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	4613      	mov	r3, r2
 8000638:	80fb      	strh	r3, [r7, #6]
	unsigned short sum = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	83fb      	strh	r3, [r7, #30]
	int x = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
	for(uint8_t j=0;j<len;j++)
 8000642:	2300      	movs	r3, #0
 8000644:	75fb      	strb	r3, [r7, #23]
 8000646:	e044      	b.n	80006d2 <Mass_toData8+0xa6>
	{
	for (int i = 0; i < 2; i++)
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	e033      	b.n	80006b6 <Mass_toData8+0x8a>
	{
		if (pcBlock[2 - i - 1+j*2] > 57)
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	f1c3 0201 	rsb	r2, r3, #1
 8000654:	7dfb      	ldrb	r3, [r7, #23]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	461a      	mov	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b39      	cmp	r3, #57	; 0x39
 8000664:	d90c      	bls.n	8000680 <Mass_toData8+0x54>
		{
			x = (pcBlock[2 - i - 1+j*2] - 55);
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	f1c3 0201 	rsb	r2, r3, #1
 800066c:	7dfb      	ldrb	r3, [r7, #23]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4413      	add	r3, r2
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	3b37      	subs	r3, #55	; 0x37
 800067c:	61bb      	str	r3, [r7, #24]
 800067e:	e00b      	b.n	8000698 <Mass_toData8+0x6c>
		}
		else
		{
			x = (pcBlock[2 - i - 1+j*2] - 48);
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	f1c3 0201 	rsb	r2, r3, #1
 8000686:	7dfb      	ldrb	r3, [r7, #23]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	461a      	mov	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3b30      	subs	r3, #48	; 0x30
 8000696:	61bb      	str	r3, [r7, #24]
		}
		sum += x * powx(16, i);
 8000698:	6939      	ldr	r1, [r7, #16]
 800069a:	2010      	movs	r0, #16
 800069c:	f7ff ffaa 	bl	80005f4 <powx>
 80006a0:	4602      	mov	r2, r0
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	fb03 f302 	mul.w	r3, r3, r2
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	8bfb      	ldrh	r3, [r7, #30]
 80006ac:	4413      	add	r3, r2
 80006ae:	83fb      	strh	r3, [r7, #30]
	for (int i = 0; i < 2; i++)
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	3301      	adds	r3, #1
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	ddc8      	ble.n	800064e <Mass_toData8+0x22>
	}
	data8[j]=sum;
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	4413      	add	r3, r2
 80006c2:	8bfa      	ldrh	r2, [r7, #30]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	701a      	strb	r2, [r3, #0]
	sum=0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	83fb      	strh	r3, [r7, #30]
	for(uint8_t j=0;j<len;j++)
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	3301      	adds	r3, #1
 80006d0:	75fb      	strb	r3, [r7, #23]
 80006d2:	7dfb      	ldrb	r3, [r7, #23]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	88fa      	ldrh	r2, [r7, #6]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d8b5      	bhi.n	8000648 <Mass_toData8+0x1c>
	}

}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <WMSM42Init>:
// Инициализация wm-sm-42
void WMSM42Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
	//Начальная инфа
	HAL_UART_Receive_IT(&huart6, &dataWm, 1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	493c      	ldr	r1, [pc, #240]	; (80007e0 <WMSM42Init+0xfc>)
 80006ee:	483d      	ldr	r0, [pc, #244]	; (80007e4 <WMSM42Init+0x100>)
 80006f0:	f003 f8be 	bl	8003870 <HAL_UART_Receive_IT>
	HAL_Delay(2000);
 80006f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f8:	f001 f940 	bl	800197c <HAL_Delay>
	ReadflagWm=0;
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <WMSM42Init+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
	countWm=0;
 8000702:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <WMSM42Init+0x108>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<20;i++)
 8000708:	2300      	movs	r3, #0
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	e006      	b.n	800071c <WMSM42Init+0x38>
		Buff_rx[i]=0;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4a37      	ldr	r2, [pc, #220]	; (80007f0 <WMSM42Init+0x10c>)
 8000712:	2100      	movs	r1, #0
 8000714:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<20;i++)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	3301      	adds	r3, #1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b13      	cmp	r3, #19
 8000720:	d9f5      	bls.n	800070e <WMSM42Init+0x2a>
	HAL_UART_Transmit(&huart6, buf_EchoOff, sizeof(buf_EchoOff),100); //отключаем эхо
 8000722:	2364      	movs	r3, #100	; 0x64
 8000724:	2206      	movs	r2, #6
 8000726:	4933      	ldr	r1, [pc, #204]	; (80007f4 <WMSM42Init+0x110>)
 8000728:	482e      	ldr	r0, [pc, #184]	; (80007e4 <WMSM42Init+0x100>)
 800072a:	f003 f808 	bl	800373e <HAL_UART_Transmit>
	while(dataWm!='#');
 800072e:	bf00      	nop
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <WMSM42Init+0xfc>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b23      	cmp	r3, #35	; 0x23
 8000736:	d1fb      	bne.n	8000730 <WMSM42Init+0x4c>
	//HAL_Delay(100);
	ReadflagWm=0;
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <WMSM42Init+0x104>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
	countWm=0;
 800073e:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <WMSM42Init+0x108>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<20;i++)
 8000744:	2300      	movs	r3, #0
 8000746:	71bb      	strb	r3, [r7, #6]
 8000748:	e006      	b.n	8000758 <WMSM42Init+0x74>
		Buff_rx[i]=0;
 800074a:	79bb      	ldrb	r3, [r7, #6]
 800074c:	4a28      	ldr	r2, [pc, #160]	; (80007f0 <WMSM42Init+0x10c>)
 800074e:	2100      	movs	r1, #0
 8000750:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<20;i++)
 8000752:	79bb      	ldrb	r3, [r7, #6]
 8000754:	3301      	adds	r3, #1
 8000756:	71bb      	strb	r3, [r7, #6]
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	2b13      	cmp	r3, #19
 800075c:	d9f5      	bls.n	800074a <WMSM42Init+0x66>
	HAL_UART_Transmit(&huart6, buf_com1, sizeof(buf_com1),100); // Спящий режим
 800075e:	2364      	movs	r3, #100	; 0x64
 8000760:	220d      	movs	r2, #13
 8000762:	4925      	ldr	r1, [pc, #148]	; (80007f8 <WMSM42Init+0x114>)
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <WMSM42Init+0x100>)
 8000766:	f002 ffea 	bl	800373e <HAL_UART_Transmit>
	while(dataWm!='#');
 800076a:	bf00      	nop
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <WMSM42Init+0xfc>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b23      	cmp	r3, #35	; 0x23
 8000772:	d1fb      	bne.n	800076c <WMSM42Init+0x88>
	//HAL_Delay(100);
	ReadflagWm=0;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <WMSM42Init+0x104>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
	countWm=0;
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <WMSM42Init+0x108>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<20;i++)
 8000780:	2300      	movs	r3, #0
 8000782:	717b      	strb	r3, [r7, #5]
 8000784:	e006      	b.n	8000794 <WMSM42Init+0xb0>
		Buff_rx[i]=0;
 8000786:	797b      	ldrb	r3, [r7, #5]
 8000788:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <WMSM42Init+0x10c>)
 800078a:	2100      	movs	r1, #0
 800078c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<20;i++)
 800078e:	797b      	ldrb	r3, [r7, #5]
 8000790:	3301      	adds	r3, #1
 8000792:	717b      	strb	r3, [r7, #5]
 8000794:	797b      	ldrb	r3, [r7, #5]
 8000796:	2b13      	cmp	r3, #19
 8000798:	d9f5      	bls.n	8000786 <WMSM42Init+0xa2>
	HAL_UART_Transmit(&huart6, buf_com2, sizeof(buf_com2),100); // Настройки
 800079a:	2364      	movs	r3, #100	; 0x64
 800079c:	2226      	movs	r2, #38	; 0x26
 800079e:	4917      	ldr	r1, [pc, #92]	; (80007fc <WMSM42Init+0x118>)
 80007a0:	4810      	ldr	r0, [pc, #64]	; (80007e4 <WMSM42Init+0x100>)
 80007a2:	f002 ffcc 	bl	800373e <HAL_UART_Transmit>
	while(dataWm!='#');
 80007a6:	bf00      	nop
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <WMSM42Init+0xfc>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b23      	cmp	r3, #35	; 0x23
 80007ae:	d1fb      	bne.n	80007a8 <WMSM42Init+0xc4>
	//HAL_Delay(100);
	ReadflagWm=0;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <WMSM42Init+0x104>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
	countWm=0;
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <WMSM42Init+0x108>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<20;i++)
 80007bc:	2300      	movs	r3, #0
 80007be:	713b      	strb	r3, [r7, #4]
 80007c0:	e006      	b.n	80007d0 <WMSM42Init+0xec>
		Buff_rx[i]=0;
 80007c2:	793b      	ldrb	r3, [r7, #4]
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <WMSM42Init+0x10c>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<20;i++)
 80007ca:	793b      	ldrb	r3, [r7, #4]
 80007cc:	3301      	adds	r3, #1
 80007ce:	713b      	strb	r3, [r7, #4]
 80007d0:	793b      	ldrb	r3, [r7, #4]
 80007d2:	2b13      	cmp	r3, #19
 80007d4:	d9f5      	bls.n	80007c2 <WMSM42Init+0xde>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000117 	.word	0x20000117
 80007e4:	20000354 	.word	0x20000354
 80007e8:	20000119 	.word	0x20000119
 80007ec:	20000115 	.word	0x20000115
 80007f0:	20000130 	.word	0x20000130
 80007f4:	20000028 	.word	0x20000028
 80007f8:	20000030 	.word	0x20000030
 80007fc:	20000040 	.word	0x20000040

08000800 <WMSM42TXmode>:
// Вход в режим передачи wm-sm-42
void WMSM42TXmode(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart6, buf_com3_TX_mode, sizeof(buf_com3_TX_mode),100);
 8000806:	2364      	movs	r3, #100	; 0x64
 8000808:	220d      	movs	r2, #13
 800080a:	4910      	ldr	r1, [pc, #64]	; (800084c <WMSM42TXmode+0x4c>)
 800080c:	4810      	ldr	r0, [pc, #64]	; (8000850 <WMSM42TXmode+0x50>)
 800080e:	f002 ff96 	bl	800373e <HAL_UART_Transmit>
	//HAL_Delay(100);
	while(dataWm!='#');
 8000812:	bf00      	nop
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <WMSM42TXmode+0x54>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b23      	cmp	r3, #35	; 0x23
 800081a:	d1fb      	bne.n	8000814 <WMSM42TXmode+0x14>
	ReadflagWm=0;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <WMSM42TXmode+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
	countWm=0;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <WMSM42TXmode+0x5c>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<20;i++)
 8000828:	2300      	movs	r3, #0
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	e006      	b.n	800083c <WMSM42TXmode+0x3c>
		Buff_rx[i]=0;
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <WMSM42TXmode+0x60>)
 8000832:	2100      	movs	r1, #0
 8000834:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<20;i++)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	3301      	adds	r3, #1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b13      	cmp	r3, #19
 8000840:	d9f5      	bls.n	800082e <WMSM42TXmode+0x2e>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000068 	.word	0x20000068
 8000850:	20000354 	.word	0x20000354
 8000854:	20000117 	.word	0x20000117
 8000858:	20000119 	.word	0x20000119
 800085c:	20000115 	.word	0x20000115
 8000860:	20000130 	.word	0x20000130

08000864 <WMSM42RXmode>:
// Вход в режим приема wm-sm-42
void WMSM42RXmode(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart6, buf_com3_RX_mode, sizeof(buf_com3_RX_mode),100);
 8000868:	2364      	movs	r3, #100	; 0x64
 800086a:	220d      	movs	r2, #13
 800086c:	491a      	ldr	r1, [pc, #104]	; (80008d8 <WMSM42RXmode+0x74>)
 800086e:	481b      	ldr	r0, [pc, #108]	; (80008dc <WMSM42RXmode+0x78>)
 8000870:	f002 ff65 	bl	800373e <HAL_UART_Transmit>
	//HAL_Delay(10);
	while(dataWm!='#');
 8000874:	bf00      	nop
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <WMSM42RXmode+0x7c>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b23      	cmp	r3, #35	; 0x23
 800087c:	d1fb      	bne.n	8000876 <WMSM42RXmode+0x12>
	ReadflagWm=0;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <WMSM42RXmode+0x80>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
	countWm=0;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <WMSM42RXmode+0x84>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, buf_paylen, sizeof(buf_paylen),100); // Длина посылки
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	2212      	movs	r2, #18
 800088e:	4917      	ldr	r1, [pc, #92]	; (80008ec <WMSM42RXmode+0x88>)
 8000890:	4812      	ldr	r0, [pc, #72]	; (80008dc <WMSM42RXmode+0x78>)
 8000892:	f002 ff54 	bl	800373e <HAL_UART_Transmit>
	//HAL_Delay(10);
	while(dataWm!='#');
 8000896:	bf00      	nop
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <WMSM42RXmode+0x7c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b23      	cmp	r3, #35	; 0x23
 800089e:	d1fb      	bne.n	8000898 <WMSM42RXmode+0x34>
	ReadflagWm=0;
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <WMSM42RXmode+0x80>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	countWm=0;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <WMSM42RXmode+0x84>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart6, buf_preamlen, sizeof(buf_preamlen),100); // Длина преамбулы
 80008ac:	2364      	movs	r3, #100	; 0x64
 80008ae:	2212      	movs	r2, #18
 80008b0:	490f      	ldr	r1, [pc, #60]	; (80008f0 <WMSM42RXmode+0x8c>)
 80008b2:	480a      	ldr	r0, [pc, #40]	; (80008dc <WMSM42RXmode+0x78>)
 80008b4:	f002 ff43 	bl	800373e <HAL_UART_Transmit>
	while(dataWm!='#');
 80008b8:	bf00      	nop
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <WMSM42RXmode+0x7c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b23      	cmp	r3, #35	; 0x23
 80008c0:	d1fb      	bne.n	80008ba <WMSM42RXmode+0x56>
	HAL_Delay(10);
 80008c2:	200a      	movs	r0, #10
 80008c4:	f001 f85a 	bl	800197c <HAL_Delay>
	ReadflagWm=0;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <WMSM42RXmode+0x80>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
	countWm=0;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <WMSM42RXmode+0x84>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000078 	.word	0x20000078
 80008dc:	20000354 	.word	0x20000354
 80008e0:	20000117 	.word	0x20000117
 80008e4:	20000119 	.word	0x20000119
 80008e8:	20000115 	.word	0x20000115
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000014 	.word	0x20000014

080008f4 <WMSM42TXsend>:
// Передача пакета по радиоканалу
void WMSM42TXsend(uint8_t* mass)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	Data8_toMassHex(mass,42,buf_com_Tx,9);
 80008fc:	2309      	movs	r3, #9
 80008fe:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <WMSM42TXsend+0x3c>)
 8000900:	212a      	movs	r1, #42	; 0x2a
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fdfe 	bl	8000504 <Data8_toMassHex>
	HAL_UART_Transmit(&huart6, buf_com_Tx, sizeof(buf_com_Tx),100);
 8000908:	2364      	movs	r3, #100	; 0x64
 800090a:	225e      	movs	r2, #94	; 0x5e
 800090c:	4908      	ldr	r1, [pc, #32]	; (8000930 <WMSM42TXsend+0x3c>)
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <WMSM42TXsend+0x40>)
 8000910:	f002 ff15 	bl	800373e <HAL_UART_Transmit>
	HAL_Delay(1500);
 8000914:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000918:	f001 f830 	bl	800197c <HAL_Delay>
	ReadflagWm=0;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <WMSM42TXsend+0x44>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
	countWm=0;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <WMSM42TXsend+0x48>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000088 	.word	0x20000088
 8000934:	20000354 	.word	0x20000354
 8000938:	20000119 	.word	0x20000119
 800093c:	20000115 	.word	0x20000115

08000940 <WMSM42GetPacket>:
// Получение полезной части из поссылки, пришедшей по радио
void WMSM42GetPacket(uint8_t* mass)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	Mass_toData8(&mass[6],TX_RX_Radio,42);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3306      	adds	r3, #6
 800094c:	222a      	movs	r2, #42	; 0x2a
 800094e:	4904      	ldr	r1, [pc, #16]	; (8000960 <WMSM42GetPacket+0x20>)
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fe6b 	bl	800062c <Mass_toData8>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000258 	.word	0x20000258

08000964 <Crc16>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};
// Расчет CRC16
unsigned short Crc16(unsigned char * pcBlock, unsigned short len)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000974:	81fb      	strh	r3, [r7, #14]

    while (len--)
 8000976:	e012      	b.n	800099e <Crc16+0x3a>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
 8000978:	89fb      	ldrh	r3, [r7, #14]
 800097a:	021b      	lsls	r3, r3, #8
 800097c:	b21a      	sxth	r2, r3
 800097e:	89fb      	ldrh	r3, [r7, #14]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	b29b      	uxth	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	1c59      	adds	r1, r3, #1
 800098a:	6079      	str	r1, [r7, #4]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4043      	eors	r3, r0
 8000990:	4909      	ldr	r1, [pc, #36]	; (80009b8 <Crc16+0x54>)
 8000992:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000996:	b21b      	sxth	r3, r3
 8000998:	4053      	eors	r3, r2
 800099a:	b21b      	sxth	r3, r3
 800099c:	81fb      	strh	r3, [r7, #14]
    while (len--)
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	1e5a      	subs	r2, r3, #1
 80009a2:	807a      	strh	r2, [r7, #2]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1e7      	bne.n	8000978 <Crc16+0x14>

    return crc;
 80009a8:	89fb      	ldrh	r3, [r7, #14]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	08004688 	.word	0x08004688

080009bc <Crc8>:
    0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
    0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};
// Расчет CRC8
unsigned char Crc8(unsigned char *pcBlock, unsigned char len)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]
    unsigned char crc = 0xFF;
 80009c8:	23ff      	movs	r3, #255	; 0xff
 80009ca:	73fb      	strb	r3, [r7, #15]

    while (len--)
 80009cc:	e00a      	b.n	80009e4 <Crc8+0x28>
        crc = Crc8Table[crc ^ *pcBlock++];
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	4053      	eors	r3, r2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <Crc8+0x40>)
 80009e0:	5c9b      	ldrb	r3, [r3, r2]
 80009e2:	73fb      	strb	r3, [r7, #15]
    while (len--)
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	1e5a      	subs	r2, r3, #1
 80009e8:	70fa      	strb	r2, [r7, #3]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1ef      	bne.n	80009ce <Crc8+0x12>

    return crc;
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	08004888 	.word	0x08004888

08000a00 <CommandToRadio>:

// Функция передачи по радиоканалу
void CommandToRadio(uint8_t command)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	// Вход в режим передачи
	WMSM42TXmode();
 8000a0a:	f7ff fef9 	bl	8000800 <WMSM42TXmode>
	// Обнуляем массив
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e006      	b.n	8000a22 <CommandToRadio+0x22>
	{
		TX_RX_Radio[i]=0;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <CommandToRadio+0x78>)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<RadioMaxBuff;i++)
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	73fb      	strb	r3, [r7, #15]
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	2b29      	cmp	r3, #41	; 0x29
 8000a26:	d9f5      	bls.n	8000a14 <CommandToRadio+0x14>
	}
	if(command==3)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d104      	bne.n	8000a38 <CommandToRadio+0x38>
	{
		// Заносим задержку в секундах
		TX_RX_Radio[1]=BuffRx[43];
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <CommandToRadio+0x7c>)
 8000a30:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <CommandToRadio+0x78>)
 8000a36:	705a      	strb	r2, [r3, #1]
	}
    // Заносим команду
	TX_RX_Radio[CommIndex]=command;
 8000a38:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <CommandToRadio+0x78>)
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	7013      	strb	r3, [r2, #0]
	//Подсчет CRC16
	CRC_c=Crc16(TX_RX_Radio,RadioMaxBuff-2);
 8000a3e:	2128      	movs	r1, #40	; 0x28
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <CommandToRadio+0x78>)
 8000a42:	f7ff ff8f 	bl	8000964 <Crc16>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <CommandToRadio+0x80>)
 8000a4c:	801a      	strh	r2, [r3, #0]
	TX_RX_Radio[RadioMaxBuff-2]=(uint8_t)(CRC_c>>8);
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <CommandToRadio+0x80>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <CommandToRadio+0x78>)
 8000a5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TX_RX_Radio[RadioMaxBuff-1]=(uint8_t)CRC_c;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <CommandToRadio+0x80>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <CommandToRadio+0x78>)
 8000a66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    // Отправка посылки
	WMSM42TXsend(TX_RX_Radio);
 8000a6a:	4803      	ldr	r0, [pc, #12]	; (8000a78 <CommandToRadio+0x78>)
 8000a6c:	f7ff ff42 	bl	80008f4 <WMSM42TXsend>
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000258 	.word	0x20000258
 8000a7c:	20000394 	.word	0x20000394
 8000a80:	20000112 	.word	0x20000112

08000a84 <Command_to_Linux>:
// Отправка команды на Linux
void Command_to_Linux(uint8_t cmd)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e006      	b.n	8000aa2 <Command_to_Linux+0x1e>
		BuffTx[i]=0;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <Command_to_Linux+0x8c>)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<MaxBuffOfCKT;i++)
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	73fb      	strb	r3, [r7, #15]
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	2b2c      	cmp	r3, #44	; 0x2c
 8000aa6:	d9f5      	bls.n	8000a94 <Command_to_Linux+0x10>
	for(uint8_t i=0;i<MaxBuffOfCKT-6;i++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73bb      	strb	r3, [r7, #14]
 8000aac:	e00a      	b.n	8000ac4 <Command_to_Linux+0x40>
		BuffTx[i+4]=TX_RX_Radio[i+1];
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	7bbb      	ldrb	r3, [r7, #14]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	4917      	ldr	r1, [pc, #92]	; (8000b14 <Command_to_Linux+0x90>)
 8000ab8:	5c89      	ldrb	r1, [r1, r2]
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <Command_to_Linux+0x8c>)
 8000abc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<MaxBuffOfCKT-6;i++)
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	73bb      	strb	r3, [r7, #14]
 8000ac4:	7bbb      	ldrb	r3, [r7, #14]
 8000ac6:	2b26      	cmp	r3, #38	; 0x26
 8000ac8:	d9f1      	bls.n	8000aae <Command_to_Linux+0x2a>
	BuffTx[0]=0x7C;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <Command_to_Linux+0x8c>)
 8000acc:	227c      	movs	r2, #124	; 0x7c
 8000ace:	701a      	strb	r2, [r3, #0]
	BuffTx[1]=0x6E;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <Command_to_Linux+0x8c>)
 8000ad2:	226e      	movs	r2, #110	; 0x6e
 8000ad4:	705a      	strb	r2, [r3, #1]
	BuffTx[2]=0xA1;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <Command_to_Linux+0x8c>)
 8000ad8:	22a1      	movs	r2, #161	; 0xa1
 8000ada:	709a      	strb	r2, [r3, #2]
	BuffTx[3]=0x2C;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <Command_to_Linux+0x8c>)
 8000ade:	222c      	movs	r2, #44	; 0x2c
 8000ae0:	70da      	strb	r2, [r3, #3]
	BuffTx[42]=cmd;
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <Command_to_Linux+0x8c>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
	BuffTx[44]=Crc8(BuffTx,MaxBuffOfCKT-1);
 8000aea:	212c      	movs	r1, #44	; 0x2c
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <Command_to_Linux+0x8c>)
 8000aee:	f7ff ff65 	bl	80009bc <Crc8>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <Command_to_Linux+0x8c>)
 8000af8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, BuffTx, MaxBuffOfCKT,100);
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	222d      	movs	r2, #45	; 0x2d
 8000b00:	4903      	ldr	r1, [pc, #12]	; (8000b10 <Command_to_Linux+0x8c>)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <Command_to_Linux+0x94>)
 8000b04:	f002 fe1b 	bl	800373e <HAL_UART_Transmit>
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200002e4 	.word	0x200002e4
 8000b14:	20000258 	.word	0x20000258
 8000b18:	200003c4 	.word	0x200003c4

08000b1c <Command4_send>:
// Отправка 4 команды по радио
void Command4_send(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	if(Com4Active==1) // Если разрешена 4 команда
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <Command4_send+0x4c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d119      	bne.n	8000b5c <Command4_send+0x40>
	{
		// Посылка принята успешно, отправляем запрос на данные, если нет команд с Linux
		if(Readflag!=1)
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <Command4_send+0x50>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d011      	beq.n	8000b54 <Command4_send+0x38>
		{
			LedMode=1; // Режим мигания - посылка передается
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <Command4_send+0x54>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
			CommandToRadio(4);
 8000b36:	2004      	movs	r0, #4
 8000b38:	f7ff ff62 	bl	8000a00 <CommandToRadio>
			// Ожидаем команду
			WMSM42RXmode();
 8000b3c:	f7ff fe92 	bl	8000864 <WMSM42RXmode>
			// Запуск таймера для отслеживания таймаута
			Delay_start=1;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <Command4_send+0x58>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <Command4_send+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
			AccessRadio=1;
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <Command4_send+0x60>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
		} else AccessRadio=0;
	} else AccessRadio=0;
}
 8000b52:	e006      	b.n	8000b62 <Command4_send+0x46>
		} else AccessRadio=0;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <Command4_send+0x60>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
}
 8000b5a:	e002      	b.n	8000b62 <Command4_send+0x46>
	} else AccessRadio=0;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <Command4_send+0x60>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000011a 	.word	0x2000011a
 8000b6c:	20000118 	.word	0x20000118
 8000b70:	2000011b 	.word	0x2000011b
 8000b74:	2000012c 	.word	0x2000012c
 8000b78:	20000128 	.word	0x20000128
 8000b7c:	20000124 	.word	0x20000124

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b84:	f000 fe88 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b88:	f000 fa52 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8c:	f000 fb82 	bl	8001294 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b90:	f000 fb4a 	bl	8001228 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b94:	f000 faf4 	bl	8001180 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000b98:	f000 fb1c 	bl	80011d4 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8000b9c:	f000 faba 	bl	8001114 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // Индикация включения УСИ ПРД
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	48be      	ldr	r0, [pc, #760]	; (8000ea0 <main+0x320>)
 8000ba6:	f001 fd35 	bl	8002614 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000baa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bae:	f000 fee5 	bl	800197c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	48ba      	ldr	r0, [pc, #744]	; (8000ea0 <main+0x320>)
 8000bb8:	f001 fd2c 	bl	8002614 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000bbc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bc0:	f000 fedc 	bl	800197c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	48b5      	ldr	r0, [pc, #724]	; (8000ea0 <main+0x320>)
 8000bca:	f001 fd23 	bl	8002614 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000bce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bd2:	f000 fed3 	bl	800197c <HAL_Delay>
  // Инициализация wm-sm-42
  WMSM42Init();
 8000bd6:	f7ff fd85 	bl	80006e4 <WMSM42Init>
  // Запуск приема команд с Linux
  HAL_UART_Receive_IT(&huart2, &data, 1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	49b1      	ldr	r1, [pc, #708]	; (8000ea4 <main+0x324>)
 8000bde:	48b2      	ldr	r0, [pc, #712]	; (8000ea8 <main+0x328>)
 8000be0:	f002 fe46 	bl	8003870 <HAL_UART_Receive_IT>
  // Запуск таймера для работы светодиода
  HAL_TIM_Base_Start_IT(&htim6);
 8000be4:	48b1      	ldr	r0, [pc, #708]	; (8000eac <main+0x32c>)
 8000be6:	f002 fad8 	bl	800319a <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Фильтрация помех 1 разъема
		if((HAL_GetTick()-reciveTime >200) && ReadRdy) // Если пришел 1 байт и в течении секунды больше ничего не пришло, считаем, что мы поймали помеху
 8000bea:	f000 febb 	bl	8001964 <HAL_GetTick>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	4baf      	ldr	r3, [pc, #700]	; (8000eb0 <main+0x330>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2bc8      	cmp	r3, #200	; 0xc8
 8000bf8:	d911      	bls.n	8000c1e <main+0x9e>
 8000bfa:	4bae      	ldr	r3, [pc, #696]	; (8000eb4 <main+0x334>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00d      	beq.n	8000c1e <main+0x9e>
		{
			ReadRdy=0;
 8000c02:	4bac      	ldr	r3, [pc, #688]	; (8000eb4 <main+0x334>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
			HAL_UART_Abort(&huart2);
 8000c08:	48a7      	ldr	r0, [pc, #668]	; (8000ea8 <main+0x328>)
 8000c0a:	f002 fe86 	bl	800391a <HAL_UART_Abort>
			HAL_UART_Receive_IT(&huart2, &data, 1);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	49a4      	ldr	r1, [pc, #656]	; (8000ea4 <main+0x324>)
 8000c12:	48a5      	ldr	r0, [pc, #660]	; (8000ea8 <main+0x328>)
 8000c14:	f002 fe2c 	bl	8003870 <HAL_UART_Receive_IT>
			countRx=0;
 8000c18:	4ba7      	ldr	r3, [pc, #668]	; (8000eb8 <main+0x338>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
		}
		// Пришла какая-то посылка по linux
		if(Readflag==1 && AccessRadio==0)
 8000c1e:	4ba7      	ldr	r3, [pc, #668]	; (8000ebc <main+0x33c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	f040 80ad 	bne.w	8000d82 <main+0x202>
 8000c28:	4ba5      	ldr	r3, [pc, #660]	; (8000ec0 <main+0x340>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f040 80a8 	bne.w	8000d82 <main+0x202>
		{
			Readflag=0;
 8000c32:	4ba2      	ldr	r3, [pc, #648]	; (8000ebc <main+0x33c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	4898      	ldr	r0, [pc, #608]	; (8000ea0 <main+0x320>)
 8000c3e:	f001 fce9 	bl	8002614 <HAL_GPIO_WritePin>
			CRC_8c=BuffRx[MaxBuffOfCKT-1];
 8000c42:	4ba0      	ldr	r3, [pc, #640]	; (8000ec4 <main+0x344>)
 8000c44:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8000c48:	4b9f      	ldr	r3, [pc, #636]	; (8000ec8 <main+0x348>)
 8000c4a:	701a      	strb	r2, [r3, #0]
			if(CRC_8c==Crc8(BuffRx,MaxBuffOfCKT-1)) // если CRC совпало
 8000c4c:	212c      	movs	r1, #44	; 0x2c
 8000c4e:	489d      	ldr	r0, [pc, #628]	; (8000ec4 <main+0x344>)
 8000c50:	f7ff feb4 	bl	80009bc <Crc8>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b9b      	ldr	r3, [pc, #620]	; (8000ec8 <main+0x348>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d170      	bne.n	8000d42 <main+0x1c2>
			{
				switch(BuffRx[CommIndexLinux])
 8000c60:	4b98      	ldr	r3, [pc, #608]	; (8000ec4 <main+0x344>)
 8000c62:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000c66:	3b01      	subs	r3, #1
 8000c68:	2b05      	cmp	r3, #5
 8000c6a:	d87f      	bhi.n	8000d6c <main+0x1ec>
 8000c6c:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <main+0xf4>)
 8000c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c72:	bf00      	nop
 8000c74:	08000c8d 	.word	0x08000c8d
 8000c78:	08000cb1 	.word	0x08000cb1
 8000c7c:	08000cd5 	.word	0x08000cd5
 8000c80:	08000d6d 	.word	0x08000d6d
 8000c84:	08000cf9 	.word	0x08000cf9
 8000c88:	08000d1d 	.word	0x08000d1d
				{
					case 1:
					LedMode=1; // Режим мигания - посылка передается
 8000c8c:	4b8f      	ldr	r3, [pc, #572]	; (8000ecc <main+0x34c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
					CommandToRadio(1);  // Команда начала записи: Создаем новый файл и начинаем прием данных
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff feb4 	bl	8000a00 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000c98:	f7ff fde4 	bl	8000864 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000c9c:	4b8c      	ldr	r3, [pc, #560]	; (8000ed0 <main+0x350>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000ca2:	4b8c      	ldr	r3, [pc, #560]	; (8000ed4 <main+0x354>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000ca8:	4b85      	ldr	r3, [pc, #532]	; (8000ec0 <main+0x340>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
					break;
 8000cae:	e05d      	b.n	8000d6c <main+0x1ec>
					case 2:
					LedMode=1; // Режим мигания - посылка передается
 8000cb0:	4b86      	ldr	r3, [pc, #536]	; (8000ecc <main+0x34c>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
					CommandToRadio(2); // Команда открытия клапана
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f7ff fea2 	bl	8000a00 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000cbc:	f7ff fdd2 	bl	8000864 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000cc0:	4b83      	ldr	r3, [pc, #524]	; (8000ed0 <main+0x350>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000cc6:	4b83      	ldr	r3, [pc, #524]	; (8000ed4 <main+0x354>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000ccc:	4b7c      	ldr	r3, [pc, #496]	; (8000ec0 <main+0x340>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
					break;
 8000cd2:	e04b      	b.n	8000d6c <main+0x1ec>
					case 3:
					LedMode=1; // Режим мигания - посылка передается
 8000cd4:	4b7d      	ldr	r3, [pc, #500]	; (8000ecc <main+0x34c>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
					CommandToRadio(3); // Команда запуска двигателя
 8000cda:	2003      	movs	r0, #3
 8000cdc:	f7ff fe90 	bl	8000a00 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000ce0:	f7ff fdc0 	bl	8000864 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000ce4:	4b7a      	ldr	r3, [pc, #488]	; (8000ed0 <main+0x350>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000cea:	4b7a      	ldr	r3, [pc, #488]	; (8000ed4 <main+0x354>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000cf0:	4b73      	ldr	r3, [pc, #460]	; (8000ec0 <main+0x340>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
					break;
 8000cf6:	e039      	b.n	8000d6c <main+0x1ec>
					case 4:  // Внутренняя команда (запрос данных с ЦКТ)
					break;
					case 5:
					LedMode=1; // Режим мигания - посылка передается
 8000cf8:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <main+0x34c>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
					CommandToRadio(5); // Команда закрытия файла на SD и запрет записи на SD
 8000cfe:	2005      	movs	r0, #5
 8000d00:	f7ff fe7e 	bl	8000a00 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000d04:	f7ff fdae 	bl	8000864 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000d08:	4b71      	ldr	r3, [pc, #452]	; (8000ed0 <main+0x350>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000d0e:	4b71      	ldr	r3, [pc, #452]	; (8000ed4 <main+0x354>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000d14:	4b6a      	ldr	r3, [pc, #424]	; (8000ec0 <main+0x340>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
					break;
 8000d1a:	e027      	b.n	8000d6c <main+0x1ec>
					case 6:
					LedMode=1; // Режим мигания - посылка передается
 8000d1c:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <main+0x34c>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
					CommandToRadio(6); // Команда закрытия клапана
 8000d22:	2006      	movs	r0, #6
 8000d24:	f7ff fe6c 	bl	8000a00 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000d28:	f7ff fd9c 	bl	8000864 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000d2c:	4b68      	ldr	r3, [pc, #416]	; (8000ed0 <main+0x350>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000d32:	4b68      	ldr	r3, [pc, #416]	; (8000ed4 <main+0x354>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000d38:	4b61      	ldr	r3, [pc, #388]	; (8000ec0 <main+0x340>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
					break;
 8000d3e:	bf00      	nop
 8000d40:	e014      	b.n	8000d6c <main+0x1ec>
				}
			} else // Если CRC8 не совпало продолжаем отправлять 4 команду, если она отправлялась до этого
			{
				if(Com4Active==1) // Если мы попадаем сюда во время приема данных
 8000d42:	4b65      	ldr	r3, [pc, #404]	; (8000ed8 <main+0x358>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d110      	bne.n	8000d6c <main+0x1ec>
				{
					LedMode=1; // Режим мигания - посылка передается
 8000d4a:	4b60      	ldr	r3, [pc, #384]	; (8000ecc <main+0x34c>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
					CommandToRadio(4);
 8000d50:	2004      	movs	r0, #4
 8000d52:	f7ff fe55 	bl	8000a00 <CommandToRadio>
					// Ожидаем команду
					WMSM42RXmode();
 8000d56:	f7ff fd85 	bl	8000864 <WMSM42RXmode>
					// Запуск таймера для отслеживания таймаута
					Delay_start=1;
 8000d5a:	4b5d      	ldr	r3, [pc, #372]	; (8000ed0 <main+0x350>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
					Ms_Delay=0;
 8000d60:	4b5c      	ldr	r3, [pc, #368]	; (8000ed4 <main+0x354>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
					// Занимаем радиоканал
					AccessRadio=1;
 8000d66:	4b56      	ldr	r3, [pc, #344]	; (8000ec0 <main+0x340>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
				}
			}
			// Продолжаем ожидать посылку с Linux
			countRx=0;
 8000d6c:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <main+0x338>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
			HAL_UART_Abort(&huart2);
 8000d72:	484d      	ldr	r0, [pc, #308]	; (8000ea8 <main+0x328>)
 8000d74:	f002 fdd1 	bl	800391a <HAL_UART_Abort>
			HAL_UART_Receive_IT(&huart2, &data, 1);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	494a      	ldr	r1, [pc, #296]	; (8000ea4 <main+0x324>)
 8000d7c:	484a      	ldr	r0, [pc, #296]	; (8000ea8 <main+0x328>)
 8000d7e:	f002 fd77 	bl	8003870 <HAL_UART_Receive_IT>
		}

		// Прерывание по приему по радиоканалу
		if(ReadflagWm==1)
 8000d82:	4b56      	ldr	r3, [pc, #344]	; (8000edc <main+0x35c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	f040 8108 	bne.w	8000f9c <main+0x41c>
		{
			ReadflagWm=0;
 8000d8c:	4b53      	ldr	r3, [pc, #332]	; (8000edc <main+0x35c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
			//Раскрываем посылку
			WMSM42GetPacket(Buff_rx);
 8000d92:	4853      	ldr	r0, [pc, #332]	; (8000ee0 <main+0x360>)
 8000d94:	f7ff fdd4 	bl	8000940 <WMSM42GetPacket>
			// Считаем CRC
			CRC_c=(TX_RX_Radio[RadioMaxBuff-2]<<8)+TX_RX_Radio[RadioMaxBuff-1];
 8000d98:	4b52      	ldr	r3, [pc, #328]	; (8000ee4 <main+0x364>)
 8000d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b4f      	ldr	r3, [pc, #316]	; (8000ee4 <main+0x364>)
 8000da6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	4413      	add	r3, r2
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b4d      	ldr	r3, [pc, #308]	; (8000ee8 <main+0x368>)
 8000db2:	801a      	strh	r2, [r3, #0]

			if(CRC_c==Crc16(TX_RX_Radio, RadioMaxBuff-2)) // Если CRC16 совпало
 8000db4:	2128      	movs	r1, #40	; 0x28
 8000db6:	484b      	ldr	r0, [pc, #300]	; (8000ee4 <main+0x364>)
 8000db8:	f7ff fdd4 	bl	8000964 <Crc16>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b49      	ldr	r3, [pc, #292]	; (8000ee8 <main+0x368>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f040 80e9 	bne.w	8000f9c <main+0x41c>
			{
				// Останавливаем таймер
				Delay_start=0;
 8000dca:	4b41      	ldr	r3, [pc, #260]	; (8000ed0 <main+0x350>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
				Ms_Delay=0;
 8000dd0:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <main+0x354>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
				switch(TX_RX_Radio[CommIndex])
 8000dd6:	4b43      	ldr	r3, [pc, #268]	; (8000ee4 <main+0x364>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	2b05      	cmp	r3, #5
 8000dde:	f200 80dd 	bhi.w	8000f9c <main+0x41c>
 8000de2:	a201      	add	r2, pc, #4	; (adr r2, 8000de8 <main+0x268>)
 8000de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de8:	08000e01 	.word	0x08000e01
 8000dec:	08000e55 	.word	0x08000e55
 8000df0:	08000e7b 	.word	0x08000e7b
 8000df4:	08000eed 	.word	0x08000eed
 8000df8:	08000f49 	.word	0x08000f49
 8000dfc:	08000f77 	.word	0x08000f77
				{
					case 1:   // Команда начала записи: Создаем файл
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <main+0x34c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4825      	ldr	r0, [pc, #148]	; (8000ea0 <main+0x320>)
 8000e0c:	f001 fc02 	bl	8002614 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2104      	movs	r1, #4
 8000e14:	4822      	ldr	r0, [pc, #136]	; (8000ea0 <main+0x320>)
 8000e16:	f001 fbfd 	bl	8002614 <HAL_GPIO_WritePin>
					// Посылка принята успешно, отправляем запрос на данные, если нет команд с Linux
					if(Readflag!=1)
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <main+0x33c>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d014      	beq.n	8000e4c <main+0x2cc>
					{
						LedMode=1; // Режим мигания - посылка передается
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <main+0x34c>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
						Com4Active=1; // 4 команда будет посылаться всегда
 8000e28:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <main+0x358>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
						CommandToRadio(4);
 8000e2e:	2004      	movs	r0, #4
 8000e30:	f7ff fde6 	bl	8000a00 <CommandToRadio>
						// Ожидаем команду
						WMSM42RXmode();
 8000e34:	f7ff fd16 	bl	8000864 <WMSM42RXmode>
						// Запуск таймера для отслеживания таймаута
						Delay_start=1;
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <main+0x350>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
						Ms_Delay=0;
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <main+0x354>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
						AccessRadio=1;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <main+0x340>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
					} else AccessRadio=0;
					break;
 8000e4a:	e0a7      	b.n	8000f9c <main+0x41c>
					} else AccessRadio=0;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <main+0x340>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
					break;
 8000e52:	e0a3      	b.n	8000f9c <main+0x41c>
					case 2:   // Команда открытия клапана
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <main+0x34c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <main+0x320>)
 8000e60:	f001 fbd8 	bl	8002614 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2104      	movs	r1, #4
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <main+0x320>)
 8000e6a:	f001 fbd3 	bl	8002614 <HAL_GPIO_WritePin>
					Command_to_Linux(2);
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f7ff fe08 	bl	8000a84 <Command_to_Linux>
					Command4_send();
 8000e74:	f7ff fe52 	bl	8000b1c <Command4_send>
					break;
 8000e78:	e090      	b.n	8000f9c <main+0x41c>
					case 3:   // Команда запуска двигателя
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <main+0x34c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2102      	movs	r1, #2
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <main+0x320>)
 8000e86:	f001 fbc5 	bl	8002614 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <main+0x320>)
 8000e90:	f001 fbc0 	bl	8002614 <HAL_GPIO_WritePin>
					Command_to_Linux(3);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f7ff fdf5 	bl	8000a84 <Command_to_Linux>
					Command4_send();
 8000e9a:	f7ff fe3f 	bl	8000b1c <Command4_send>
					break;
 8000e9e:	e07d      	b.n	8000f9c <main+0x41c>
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	20000116 	.word	0x20000116
 8000ea8:	200003c4 	.word	0x200003c4
 8000eac:	20000314 	.word	0x20000314
 8000eb0:	20000120 	.word	0x20000120
 8000eb4:	2000011c 	.word	0x2000011c
 8000eb8:	20000114 	.word	0x20000114
 8000ebc:	20000118 	.word	0x20000118
 8000ec0:	20000124 	.word	0x20000124
 8000ec4:	20000394 	.word	0x20000394
 8000ec8:	20000110 	.word	0x20000110
 8000ecc:	2000011b 	.word	0x2000011b
 8000ed0:	2000012c 	.word	0x2000012c
 8000ed4:	20000128 	.word	0x20000128
 8000ed8:	2000011a 	.word	0x2000011a
 8000edc:	20000119 	.word	0x20000119
 8000ee0:	20000130 	.word	0x20000130
 8000ee4:	20000258 	.word	0x20000258
 8000ee8:	20000112 	.word	0x20000112
					case 4:   // Команда запроса данных с ЦКТ
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000eec:	4b48      	ldr	r3, [pc, #288]	; (8001010 <main+0x490>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4847      	ldr	r0, [pc, #284]	; (8001014 <main+0x494>)
 8000ef8:	f001 fb8c 	bl	8002614 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2104      	movs	r1, #4
 8000f00:	4844      	ldr	r0, [pc, #272]	; (8001014 <main+0x494>)
 8000f02:	f001 fb87 	bl	8002614 <HAL_GPIO_WritePin>
					// Пересылаем принятый пакет на linux
					Command_to_Linux(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f7ff fdbc 	bl	8000a84 <Command_to_Linux>
					// Посылка принята успешно, отправляем запрос на данные
					if(Com4Active==1 && Readflag!=1  ) // Если нет запрета на 4 команду, то отправляем ее
 8000f0c:	4b42      	ldr	r3, [pc, #264]	; (8001018 <main+0x498>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d115      	bne.n	8000f40 <main+0x3c0>
 8000f14:	4b41      	ldr	r3, [pc, #260]	; (800101c <main+0x49c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d011      	beq.n	8000f40 <main+0x3c0>
					{
						LedMode=1; // Режим мигания - посылка передается
 8000f1c:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <main+0x490>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
						CommandToRadio(4);
 8000f22:	2004      	movs	r0, #4
 8000f24:	f7ff fd6c 	bl	8000a00 <CommandToRadio>
						// Ожидаем команду
						WMSM42RXmode();
 8000f28:	f7ff fc9c 	bl	8000864 <WMSM42RXmode>
						// Запуск таймера для отслеживания таймаута
						Delay_start=1;
 8000f2c:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <main+0x4a0>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
						Ms_Delay=0;
 8000f32:	4b3c      	ldr	r3, [pc, #240]	; (8001024 <main+0x4a4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
						AccessRadio=1;
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <main+0x4a8>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
					} else AccessRadio=0;
					// радиоканал не занят
					break;
 8000f3e:	e02d      	b.n	8000f9c <main+0x41c>
					} else AccessRadio=0;
 8000f40:	4b39      	ldr	r3, [pc, #228]	; (8001028 <main+0x4a8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
					break;
 8000f46:	e029      	b.n	8000f9c <main+0x41c>
					case 5:   // Команда закрытия файла на SD и запрет записи на SD
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000f48:	4b31      	ldr	r3, [pc, #196]	; (8001010 <main+0x490>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2102      	movs	r1, #2
 8000f52:	4830      	ldr	r0, [pc, #192]	; (8001014 <main+0x494>)
 8000f54:	f001 fb5e 	bl	8002614 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	482d      	ldr	r0, [pc, #180]	; (8001014 <main+0x494>)
 8000f5e:	f001 fb59 	bl	8002614 <HAL_GPIO_WritePin>
					Com4Active=0; // запрещаем отправку 4 команды
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <main+0x498>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
					Command_to_Linux(5);
 8000f68:	2005      	movs	r0, #5
 8000f6a:	f7ff fd8b 	bl	8000a84 <Command_to_Linux>
					// радиоканал не занят
					AccessRadio=0;
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <main+0x4a8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
					break;
 8000f74:	e012      	b.n	8000f9c <main+0x41c>
					case 6:  // Команда закрытия клапана
					LedMode=0; // посылка принята (просто зажигаем светодиод)
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <main+0x490>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2102      	movs	r1, #2
 8000f80:	4824      	ldr	r0, [pc, #144]	; (8001014 <main+0x494>)
 8000f82:	f001 fb47 	bl	8002614 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4822      	ldr	r0, [pc, #136]	; (8001014 <main+0x494>)
 8000f8c:	f001 fb42 	bl	8002614 <HAL_GPIO_WritePin>
					Command_to_Linux(6);
 8000f90:	2006      	movs	r0, #6
 8000f92:	f7ff fd77 	bl	8000a84 <Command_to_Linux>
					Command4_send();
 8000f96:	f7ff fdc1 	bl	8000b1c <Command4_send>
					break;
 8000f9a:	bf00      	nop
				}
			}
		}

	// Если радиосигнал не был принят (таймаут)
	if(RadioTimeoutRx==1)
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <main+0x4ac>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	f47f ae22 	bne.w	8000bea <main+0x6a>
	{
		// Останавливаем таймер
		Delay_start=0;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <main+0x4a0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
		Ms_Delay=0;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <main+0x4a4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
		RadioTimeoutRx=0;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <main+0x4ac>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
		LedMode=0; // посылка пропущена (тушим светодиод)
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <main+0x490>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	4814      	ldr	r0, [pc, #80]	; (8001014 <main+0x494>)
 8000fc4:	f001 fb26 	bl	8002614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4811      	ldr	r0, [pc, #68]	; (8001014 <main+0x494>)
 8000fce:	f001 fb21 	bl	8002614 <HAL_GPIO_WritePin>
		// Отправляем еще один запрос на данные, иначе просто ожидаем команд с linux
		if(Com4Active==1 && Readflag!= 1)
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <main+0x498>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d115      	bne.n	8001006 <main+0x486>
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <main+0x49c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d011      	beq.n	8001006 <main+0x486>
		{
			LedMode=1; // Режим мигания - посылка передается
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <main+0x490>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
			CommandToRadio(4); // Команда запроса данных
 8000fe8:	2004      	movs	r0, #4
 8000fea:	f7ff fd09 	bl	8000a00 <CommandToRadio>
			// Ожидаем команду
			WMSM42RXmode();
 8000fee:	f7ff fc39 	bl	8000864 <WMSM42RXmode>
			// Запуск таймера для отслеживания таймаута
			Delay_start=1;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <main+0x4a0>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <main+0x4a4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
			AccessRadio=1 ;
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <main+0x4a8>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e002      	b.n	800100c <main+0x48c>
		} else   AccessRadio=0;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <main+0x4a8>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
		if((HAL_GetTick()-reciveTime >200) && ReadRdy) // Если пришел 1 байт и в течении секунды больше ничего не пришло, считаем, что мы поймали помеху
 800100c:	e5ed      	b.n	8000bea <main+0x6a>
 800100e:	bf00      	nop
 8001010:	2000011b 	.word	0x2000011b
 8001014:	40020800 	.word	0x40020800
 8001018:	2000011a 	.word	0x2000011a
 800101c:	20000118 	.word	0x20000118
 8001020:	2000012c 	.word	0x2000012c
 8001024:	20000128 	.word	0x20000128
 8001028:	20000124 	.word	0x20000124
 800102c:	20000125 	.word	0x20000125

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	2234      	movs	r2, #52	; 0x34
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fb0e 	bl	8004660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <SystemClock_Config+0xdc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	4a2b      	ldr	r2, [pc, #172]	; (800110c <SystemClock_Config+0xdc>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	; 0x40
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <SystemClock_Config+0xdc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001070:	2300      	movs	r3, #0
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	4b26      	ldr	r3, [pc, #152]	; (8001110 <SystemClock_Config+0xe0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a25      	ldr	r2, [pc, #148]	; (8001110 <SystemClock_Config+0xe0>)
 800107a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <SystemClock_Config+0xe0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108c:	2301      	movs	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001094:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010a4:	23b4      	movs	r3, #180	; 0xb4
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fde9 	bl	8002c90 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010c4:	f000 fa04 	bl	80014d0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010c8:	f001 fad8 	bl	800267c <HAL_PWREx_EnableOverDrive>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010d2:	f000 f9fd 	bl	80014d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2302      	movs	r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	2105      	movs	r1, #5
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fb11 	bl	800271c <HAL_RCC_ClockConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001100:	f000 f9e6 	bl	80014d0 <Error_Handler>
  }
}
 8001104:	bf00      	nop
 8001106:	3750      	adds	r7, #80	; 0x50
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_TIM6_Init+0x64>)
 8001124:	4a15      	ldr	r2, [pc, #84]	; (800117c <MX_TIM6_Init+0x68>)
 8001126:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_TIM6_Init+0x64>)
 800112a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800112e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_TIM6_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2500;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_TIM6_Init+0x64>)
 8001138:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800113c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_TIM6_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <MX_TIM6_Init+0x64>)
 8001146:	f001 fffd 	bl	8003144 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001150:	f000 f9be 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_TIM6_Init+0x64>)
 8001162:	f002 fa0f 	bl	8003584 <HAL_TIMEx_MasterConfigSynchronization>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800116c:	f000 f9b0 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000314 	.word	0x20000314
 800117c:	40001000 	.word	0x40001000

08001180 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_USART2_UART_Init+0x50>)
 8001188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 800118c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011b8:	f002 fa74 	bl	80036a4 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011c2:	f000 f985 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200003c4 	.word	0x200003c4
 80011d0:	40004400 	.word	0x40004400

080011d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART6_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART6_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART6_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART6_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART6_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART6_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART6_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART6_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART6_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART6_UART_Init+0x4c>)
 800120c:	f002 fa4a 	bl	80036a4 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f95b 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000354 	.word	0x20000354
 8001224:	40011400 	.word	0x40011400

08001228 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_DMA_Init+0x68>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <MX_DMA_Init+0x68>)
 8001238:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_DMA_Init+0x68>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_DMA_Init+0x68>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_DMA_Init+0x68>)
 8001254:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_DMA_Init+0x68>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	2011      	movs	r0, #17
 800126c:	f000 fc83 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001270:	2011      	movs	r0, #17
 8001272:	f000 fc9c 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2039      	movs	r0, #57	; 0x39
 800127c:	f000 fc7b 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001280:	2039      	movs	r0, #57	; 0x39
 8001282:	f000 fc94 	bl	8001bae <HAL_NVIC_EnableIRQ>

}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_GPIO_Init+0xb4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a25      	ldr	r2, [pc, #148]	; (8001348 <MX_GPIO_Init+0xb4>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_GPIO_Init+0xb4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_GPIO_Init+0xb4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <MX_GPIO_Init+0xb4>)
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_GPIO_Init+0xb4>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_GPIO_Init+0xb4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <MX_GPIO_Init+0xb4>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_GPIO_Init+0xb4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80012fe:	2201      	movs	r2, #1
 8001300:	210e      	movs	r1, #14
 8001302:	4812      	ldr	r0, [pc, #72]	; (800134c <MX_GPIO_Init+0xb8>)
 8001304:	f001 f986 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_GPIO_Init+0xbc>)
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4619      	mov	r1, r3
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <MX_GPIO_Init+0xb8>)
 800131e:	f000 ffe7 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001322:	230e      	movs	r3, #14
 8001324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_GPIO_Init+0xb8>)
 800133a:	f000 ffd9 	bl	80022f0 <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40020800 	.word	0x40020800
 8001350:	10210000 	.word	0x10210000

08001354 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	if(huart==&huart6)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a2f      	ldr	r2, [pc, #188]	; (800141c <HAL_UART_RxCpltCallback+0xc8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d12b      	bne.n	80013bc <HAL_UART_RxCpltCallback+0x68>
	{
		Buff_rx[countWm]=dataWm;
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_UART_RxCpltCallback+0xcc>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <HAL_UART_RxCpltCallback+0xd0>)
 800136c:	7819      	ldrb	r1, [r3, #0]
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <HAL_UART_RxCpltCallback+0xd4>)
 8001370:	5499      	strb	r1, [r3, r2]
		if(Buff_rx[countWm]=='\n')
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_UART_RxCpltCallback+0xcc>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_UART_RxCpltCallback+0xd4>)
 800137a:	5c9b      	ldrb	r3, [r3, r2]
 800137c:	2b0a      	cmp	r3, #10
 800137e:	d112      	bne.n	80013a6 <HAL_UART_RxCpltCallback+0x52>
		{
			if(Buff_rx[0]=='O' && Buff_rx[1]=='K' )
 8001380:	4b29      	ldr	r3, [pc, #164]	; (8001428 <HAL_UART_RxCpltCallback+0xd4>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b4f      	cmp	r3, #79	; 0x4f
 8001386:	d10a      	bne.n	800139e <HAL_UART_RxCpltCallback+0x4a>
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <HAL_UART_RxCpltCallback+0xd4>)
 800138a:	785b      	ldrb	r3, [r3, #1]
 800138c:	2b4b      	cmp	r3, #75	; 0x4b
 800138e:	d106      	bne.n	800139e <HAL_UART_RxCpltCallback+0x4a>
			{
				countWm=0;
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_UART_RxCpltCallback+0xcc>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
				ReadflagWm=0;
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_UART_RxCpltCallback+0xd8>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	e009      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x5e>
			} else ReadflagWm=1;
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_UART_RxCpltCallback+0xd8>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e005      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x5e>
		}
		else countWm++;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <HAL_UART_RxCpltCallback+0xcc>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_UART_RxCpltCallback+0xcc>)
 80013b0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, &dataWm, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	491b      	ldr	r1, [pc, #108]	; (8001424 <HAL_UART_RxCpltCallback+0xd0>)
 80013b6:	4819      	ldr	r0, [pc, #100]	; (800141c <HAL_UART_RxCpltCallback+0xc8>)
 80013b8:	f002 fa5a 	bl	8003870 <HAL_UART_Receive_IT>
	}

	if(huart == &huart2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <HAL_UART_RxCpltCallback+0xdc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d126      	bne.n	8001412 <HAL_UART_RxCpltCallback+0xbe>
	{
		ReadRdy=1;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_UART_RxCpltCallback+0xe0>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
		reciveTime=HAL_GetTick();
 80013ca:	f000 facb 	bl	8001964 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_UART_RxCpltCallback+0xe4>)
 80013d2:	601a      	str	r2, [r3, #0]
		// Заносим пришедший байт в массив
		BuffRx[countRx]=data;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_UART_RxCpltCallback+0xe8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_UART_RxCpltCallback+0xec>)
 80013dc:	7819      	ldrb	r1, [r3, #0]
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_UART_RxCpltCallback+0xf0>)
 80013e0:	5499      	strb	r1, [r3, r2]
		if(countRx==MaxBuffOfCKT-1)
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_UART_RxCpltCallback+0xe8>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b2c      	cmp	r3, #44	; 0x2c
 80013e8:	d108      	bne.n	80013fc <HAL_UART_RxCpltCallback+0xa8>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2108      	movs	r1, #8
 80013ee:	4816      	ldr	r0, [pc, #88]	; (8001448 <HAL_UART_RxCpltCallback+0xf4>)
 80013f0:	f001 f910 	bl	8002614 <HAL_GPIO_WritePin>
			// Устанавливаем флаг того, что посылка принята
			Readflag=1;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_UART_RxCpltCallback+0xf8>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e005      	b.n	8001408 <HAL_UART_RxCpltCallback+0xb4>
		}
		else countRx++;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_UART_RxCpltCallback+0xe8>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_UART_RxCpltCallback+0xe8>)
 8001406:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &data, 1);
 8001408:	2201      	movs	r2, #1
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <HAL_UART_RxCpltCallback+0xec>)
 800140c:	4808      	ldr	r0, [pc, #32]	; (8001430 <HAL_UART_RxCpltCallback+0xdc>)
 800140e:	f002 fa2f 	bl	8003870 <HAL_UART_Receive_IT>
	}
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000354 	.word	0x20000354
 8001420:	20000115 	.word	0x20000115
 8001424:	20000117 	.word	0x20000117
 8001428:	20000130 	.word	0x20000130
 800142c:	20000119 	.word	0x20000119
 8001430:	200003c4 	.word	0x200003c4
 8001434:	2000011c 	.word	0x2000011c
 8001438:	20000120 	.word	0x20000120
 800143c:	20000114 	.word	0x20000114
 8001440:	20000116 	.word	0x20000116
 8001444:	20000394 	.word	0x20000394
 8001448:	40020800 	.word	0x40020800
 800144c:	20000118 	.word	0x20000118

08001450 <HAL_TIM_PeriodElapsedCallback>:
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if(htim==&htim6)  // мигание светодиодов
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d107      	bne.n	8001470 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		if(LedMode==1) // 1 светодиод
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d103      	bne.n	8001470 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8001468:	2102      	movs	r1, #2
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800146c:	f001 f8eb 	bl	8002646 <HAL_GPIO_TogglePin>
		}
	}
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000314 	.word	0x20000314
 800147c:	2000011b 	.word	0x2000011b
 8001480:	40020800 	.word	0x40020800

08001484 <SysTick_Handler>:
// Прерывание по системному таймеру
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Delay_start==1)
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <SysTick_Handler+0x40>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d114      	bne.n	80014ba <SysTick_Handler+0x36>
	{
		if(Ms_Delay<5000)
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <SysTick_Handler+0x44>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f241 3287 	movw	r2, #4999	; 0x1387
 8001498:	4293      	cmp	r3, r2
 800149a:	d805      	bhi.n	80014a8 <SysTick_Handler+0x24>
		{
			Ms_Delay++;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <SysTick_Handler+0x44>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <SysTick_Handler+0x44>)
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e008      	b.n	80014ba <SysTick_Handler+0x36>
		}
		else
		{
			Delay_start=0;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SysTick_Handler+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
			Ms_Delay=0;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <SysTick_Handler+0x44>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
			RadioTimeoutRx=1; // произошло прерывание
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Handler+0x48>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80014ba:	f000 fa3f 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000012c 	.word	0x2000012c
 80014c8:	20000128 	.word	0x20000128
 80014cc:	20000125 	.word	0x20000125

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_MspInit+0x4c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a0f      	ldr	r2, [pc, #60]	; (800152c <HAL_MspInit+0x4c>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_MspInit+0x4c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800151e:	2007      	movs	r0, #7
 8001520:	f000 fb1e 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_TIM_Base_MspInit+0x48>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d115      	bne.n	800156e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_TIM_Base_MspInit+0x4c>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a0c      	ldr	r2, [pc, #48]	; (800157c <HAL_TIM_Base_MspInit+0x4c>)
 800154c:	f043 0310 	orr.w	r3, r3, #16
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_TIM_Base_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2036      	movs	r0, #54	; 0x36
 8001564:	f000 fb07 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001568:	2036      	movs	r0, #54	; 0x36
 800156a:	f000 fb20 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40001000 	.word	0x40001000
 800157c:	40023800 	.word	0x40023800

08001580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	; 0x30
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a68      	ldr	r2, [pc, #416]	; (8001740 <HAL_UART_MspInit+0x1c0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d162      	bne.n	8001668 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a66      	ldr	r2, [pc, #408]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b64      	ldr	r3, [pc, #400]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	4b60      	ldr	r3, [pc, #384]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a5f      	ldr	r2, [pc, #380]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015da:	230c      	movs	r3, #12
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ea:	2307      	movs	r3, #7
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4854      	ldr	r0, [pc, #336]	; (8001748 <HAL_UART_MspInit+0x1c8>)
 80015f6:	f000 fe7b 	bl	80022f0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80015fa:	4b54      	ldr	r3, [pc, #336]	; (800174c <HAL_UART_MspInit+0x1cc>)
 80015fc:	4a54      	ldr	r2, [pc, #336]	; (8001750 <HAL_UART_MspInit+0x1d0>)
 80015fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001600:	4b52      	ldr	r3, [pc, #328]	; (800174c <HAL_UART_MspInit+0x1cc>)
 8001602:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001606:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_UART_MspInit+0x1cc>)
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160e:	4b4f      	ldr	r3, [pc, #316]	; (800174c <HAL_UART_MspInit+0x1cc>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001614:	4b4d      	ldr	r3, [pc, #308]	; (800174c <HAL_UART_MspInit+0x1cc>)
 8001616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161c:	4b4b      	ldr	r3, [pc, #300]	; (800174c <HAL_UART_MspInit+0x1cc>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001622:	4b4a      	ldr	r3, [pc, #296]	; (800174c <HAL_UART_MspInit+0x1cc>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001628:	4b48      	ldr	r3, [pc, #288]	; (800174c <HAL_UART_MspInit+0x1cc>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800162e:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_UART_MspInit+0x1cc>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001634:	4b45      	ldr	r3, [pc, #276]	; (800174c <HAL_UART_MspInit+0x1cc>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800163a:	4844      	ldr	r0, [pc, #272]	; (800174c <HAL_UART_MspInit+0x1cc>)
 800163c:	f000 fad2 	bl	8001be4 <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001646:	f7ff ff43 	bl	80014d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a3f      	ldr	r2, [pc, #252]	; (800174c <HAL_UART_MspInit+0x1cc>)
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
 8001650:	4a3e      	ldr	r2, [pc, #248]	; (800174c <HAL_UART_MspInit+0x1cc>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2026      	movs	r0, #38	; 0x26
 800165c:	f000 fa8b 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001660:	2026      	movs	r0, #38	; 0x26
 8001662:	f000 faa4 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001666:	e067      	b.n	8001738 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a39      	ldr	r2, [pc, #228]	; (8001754 <HAL_UART_MspInit+0x1d4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d162      	bne.n	8001738 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a32      	ldr	r2, [pc, #200]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a2b      	ldr	r2, [pc, #172]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_UART_MspInit+0x1c4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016aa:	23c0      	movs	r3, #192	; 0xc0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016ba:	2308      	movs	r3, #8
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	4824      	ldr	r0, [pc, #144]	; (8001758 <HAL_UART_MspInit+0x1d8>)
 80016c6:	f000 fe13 	bl	80022f0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_UART_MspInit+0x1dc>)
 80016cc:	4a24      	ldr	r2, [pc, #144]	; (8001760 <HAL_UART_MspInit+0x1e0>)
 80016ce:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_UART_MspInit+0x1dc>)
 80016d2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80016d6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_UART_MspInit+0x1dc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <HAL_UART_MspInit+0x1dc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_UART_MspInit+0x1dc>)
 80016e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ea:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_UART_MspInit+0x1dc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_UART_MspInit+0x1dc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_UART_MspInit+0x1dc>)
 80016fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fe:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_UART_MspInit+0x1dc>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_UART_MspInit+0x1dc>)
 8001708:	2200      	movs	r2, #0
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <HAL_UART_MspInit+0x1dc>)
 800170e:	f000 fa69 	bl	8001be4 <HAL_DMA_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001718:	f7ff feda 	bl	80014d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_UART_MspInit+0x1dc>)
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_UART_MspInit+0x1dc>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2047      	movs	r0, #71	; 0x47
 800172e:	f000 fa22 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001732:	2047      	movs	r0, #71	; 0x47
 8001734:	f000 fa3b 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 8001738:	bf00      	nop
 800173a:	3730      	adds	r7, #48	; 0x30
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40004400 	.word	0x40004400
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000
 800174c:	20000284 	.word	0x20000284
 8001750:	400260a0 	.word	0x400260a0
 8001754:	40011400 	.word	0x40011400
 8001758:	40020800 	.word	0x40020800
 800175c:	200001f8 	.word	0x200001f8
 8001760:	40026428 	.word	0x40026428

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <MemManage_Handler+0x4>

0800177e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <UsageFault_Handler+0x4>

0800178a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <DMA1_Stream6_IRQHandler+0x10>)
 80017ba:	f000 fb53 	bl	8001e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000284 	.word	0x20000284

080017c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <USART2_IRQHandler+0x10>)
 80017ce:	f002 f927 	bl	8003a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200003c4 	.word	0x200003c4

080017dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <TIM6_DAC_IRQHandler+0x10>)
 80017e2:	f001 fcfe 	bl	80031e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000314 	.word	0x20000314

080017f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <DMA2_Stream1_IRQHandler+0x10>)
 80017f6:	f000 fb35 	bl	8001e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200001f8 	.word	0x200001f8

08001804 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <USART6_IRQHandler+0x10>)
 800180a:	f002 f909 	bl	8003a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000354 	.word	0x20000354

08001818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <SystemInit+0x28>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <SystemInit+0x28>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SystemInit+0x28>)
 800182e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001832:	609a      	str	r2, [r3, #8]
#endif
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <Reset_Handler>:
 8001844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800187c <LoopFillZerobss+0x14>
 8001848:	2100      	movs	r1, #0
 800184a:	e003      	b.n	8001854 <LoopCopyDataInit>

0800184c <CopyDataInit>:
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <LoopFillZerobss+0x18>)
 800184e:	585b      	ldr	r3, [r3, r1]
 8001850:	5043      	str	r3, [r0, r1]
 8001852:	3104      	adds	r1, #4

08001854 <LoopCopyDataInit>:
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <LoopFillZerobss+0x1c>)
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <LoopFillZerobss+0x20>)
 8001858:	1842      	adds	r2, r0, r1
 800185a:	429a      	cmp	r2, r3
 800185c:	d3f6      	bcc.n	800184c <CopyDataInit>
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <LoopFillZerobss+0x24>)
 8001860:	e002      	b.n	8001868 <LoopFillZerobss>

08001862 <FillZerobss>:
 8001862:	2300      	movs	r3, #0
 8001864:	f842 3b04 	str.w	r3, [r2], #4

08001868 <LoopFillZerobss>:
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <LoopFillZerobss+0x28>)
 800186a:	429a      	cmp	r2, r3
 800186c:	d3f9      	bcc.n	8001862 <FillZerobss>
 800186e:	f7ff ffd3 	bl	8001818 <SystemInit>
 8001872:	f002 fed1 	bl	8004618 <__libc_init_array>
 8001876:	f7ff f983 	bl	8000b80 <main>
 800187a:	4770      	bx	lr
 800187c:	20020000 	.word	0x20020000
 8001880:	080049b8 	.word	0x080049b8
 8001884:	20000000 	.word	0x20000000
 8001888:	200000f4 	.word	0x200000f4
 800188c:	200000f4 	.word	0x200000f4
 8001890:	200004d0 	.word	0x200004d0

08001894 <ADC_IRQHandler>:
 8001894:	e7fe      	b.n	8001894 <ADC_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_Init+0x40>)
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_Init+0x40>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_Init+0x40>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 f94d 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f808 	bl	80018dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fe08 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x54>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x58>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f965 	bl	8001bca <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00e      	b.n	8001928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d80a      	bhi.n	8001926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001918:	f000 f92d 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800191c:	4a06      	ldr	r2, [pc, #24]	; (8001938 <HAL_InitTick+0x5c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200000e8 	.word	0x200000e8
 8001934:	200000f0 	.word	0x200000f0
 8001938:	200000ec 	.word	0x200000ec

0800193c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	200000f0 	.word	0x200000f0
 8001960:	200004cc 	.word	0x200004cc

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200004cc 	.word	0x200004cc

0800197c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff ffee 	bl	8001964 <HAL_GetTick>
 8001988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001994:	d005      	beq.n	80019a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_Delay+0x40>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a2:	bf00      	nop
 80019a4:	f7ff ffde 	bl	8001964 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d8f7      	bhi.n	80019a4 <HAL_Delay+0x28>
  {
  }
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200000f0 	.word	0x200000f0

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff29 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff3e 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff8e 	bl	8001ab4 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff31 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff feb8 	bl	8001964 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e099      	b.n	8001d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c20:	e00f      	b.n	8001c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c22:	f7ff fe9f 	bl	8001964 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d908      	bls.n	8001c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e078      	b.n	8001d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e8      	bne.n	8001c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_DMA_Init+0x158>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d107      	bne.n	8001cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f023 0307 	bic.w	r3, r3, #7
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d117      	bne.n	8001d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00e      	beq.n	8001d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fa87 	bl	80021fc <DMA_CheckFifoParam>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d02:	2301      	movs	r3, #1
 8001d04:	e016      	b.n	8001d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fa3e 	bl	8002190 <DMA_CalcBaseAndBitshift>
 8001d14:	4603      	mov	r3, r0
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	223f      	movs	r2, #63	; 0x3f
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	f010803f 	.word	0xf010803f

08001d40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d4e:	f7ff fe09 	bl	8001964 <HAL_GetTick>
 8001d52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d008      	beq.n	8001d72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e052      	b.n	8001e18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0216 	bic.w	r2, r2, #22
 8001d80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <HAL_DMA_Abort+0x62>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0208 	bic.w	r2, r2, #8
 8001db0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc2:	e013      	b.n	8001dec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dc4:	f7ff fdce 	bl	8001964 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d90c      	bls.n	8001dec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2203      	movs	r2, #3
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e015      	b.n	8001e18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1e4      	bne.n	8001dc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	223f      	movs	r2, #63	; 0x3f
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d004      	beq.n	8001e3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00c      	b.n	8001e58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2205      	movs	r2, #5
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e70:	4b92      	ldr	r3, [pc, #584]	; (80020bc <HAL_DMA_IRQHandler+0x258>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a92      	ldr	r2, [pc, #584]	; (80020c0 <HAL_DMA_IRQHandler+0x25c>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0a9b      	lsrs	r3, r3, #10
 8001e7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	2208      	movs	r2, #8
 8001e90:	409a      	lsls	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01a      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0204 	bic.w	r2, r2, #4
 8001eb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d012      	beq.n	8001f06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	f043 0202 	orr.w	r2, r3, #2
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d012      	beq.n	8001f3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	2204      	movs	r2, #4
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	f043 0204 	orr.w	r2, r3, #4
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	2210      	movs	r2, #16
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d043      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d03c      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	2210      	movs	r2, #16
 8001f60:	409a      	lsls	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d018      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
 8001f92:	e01f      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	4798      	blx	r3
 8001fa4:	e016      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0208 	bic.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	2220      	movs	r2, #32
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 808e 	beq.w	8002102 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8086 	beq.w	8002102 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b05      	cmp	r3, #5
 800200c:	d136      	bne.n	800207c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0216 	bic.w	r2, r2, #22
 800201c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800202c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <HAL_DMA_IRQHandler+0x1da>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0208 	bic.w	r2, r2, #8
 800204c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	223f      	movs	r2, #63	; 0x3f
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206e:	2b00      	cmp	r3, #0
 8002070:	d07d      	beq.n	800216e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	4798      	blx	r3
        }
        return;
 800207a:	e078      	b.n	800216e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d01c      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d108      	bne.n	80020aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	2b00      	cmp	r3, #0
 800209e:	d030      	beq.n	8002102 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
 80020a8:	e02b      	b.n	8002102 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d027      	beq.n	8002102 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
 80020ba:	e022      	b.n	8002102 <HAL_DMA_IRQHandler+0x29e>
 80020bc:	200000e8 	.word	0x200000e8
 80020c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10f      	bne.n	80020f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0210 	bic.w	r2, r2, #16
 80020e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	2b00      	cmp	r3, #0
 8002108:	d032      	beq.n	8002170 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d022      	beq.n	800215c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2205      	movs	r2, #5
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	3301      	adds	r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	429a      	cmp	r2, r3
 8002138:	d307      	bcc.n	800214a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f2      	bne.n	800212e <HAL_DMA_IRQHandler+0x2ca>
 8002148:	e000      	b.n	800214c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800214a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
 800216c:	e000      	b.n	8002170 <HAL_DMA_IRQHandler+0x30c>
        return;
 800216e:	bf00      	nop
    }
  }
}
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop

08002178 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3b10      	subs	r3, #16
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <DMA_CalcBaseAndBitshift+0x64>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <DMA_CalcBaseAndBitshift+0x68>)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d909      	bls.n	80021d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	1d1a      	adds	r2, r3, #4
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	659a      	str	r2, [r3, #88]	; 0x58
 80021d0:	e007      	b.n	80021e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021da:	f023 0303 	bic.w	r3, r3, #3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	aaaaaaab 	.word	0xaaaaaaab
 80021f8:	080049a0 	.word	0x080049a0

080021fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d11f      	bne.n	8002256 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d855      	bhi.n	80022c8 <DMA_CheckFifoParam+0xcc>
 800221c:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <DMA_CheckFifoParam+0x28>)
 800221e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002222:	bf00      	nop
 8002224:	08002235 	.word	0x08002235
 8002228:	08002247 	.word	0x08002247
 800222c:	08002235 	.word	0x08002235
 8002230:	080022c9 	.word	0x080022c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d045      	beq.n	80022cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002244:	e042      	b.n	80022cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800224e:	d13f      	bne.n	80022d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002254:	e03c      	b.n	80022d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800225e:	d121      	bne.n	80022a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d836      	bhi.n	80022d4 <DMA_CheckFifoParam+0xd8>
 8002266:	a201      	add	r2, pc, #4	; (adr r2, 800226c <DMA_CheckFifoParam+0x70>)
 8002268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226c:	0800227d 	.word	0x0800227d
 8002270:	08002283 	.word	0x08002283
 8002274:	0800227d 	.word	0x0800227d
 8002278:	08002295 	.word	0x08002295
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      break;
 8002280:	e02f      	b.n	80022e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d024      	beq.n	80022d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002292:	e021      	b.n	80022d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800229c:	d11e      	bne.n	80022dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022a2:	e01b      	b.n	80022dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d902      	bls.n	80022b0 <DMA_CheckFifoParam+0xb4>
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d003      	beq.n	80022b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022ae:	e018      	b.n	80022e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      break;
 80022b4:	e015      	b.n	80022e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00e      	beq.n	80022e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      break;
 80022c6:	e00b      	b.n	80022e0 <DMA_CheckFifoParam+0xe4>
      break;
 80022c8:	bf00      	nop
 80022ca:	e00a      	b.n	80022e2 <DMA_CheckFifoParam+0xe6>
      break;
 80022cc:	bf00      	nop
 80022ce:	e008      	b.n	80022e2 <DMA_CheckFifoParam+0xe6>
      break;
 80022d0:	bf00      	nop
 80022d2:	e006      	b.n	80022e2 <DMA_CheckFifoParam+0xe6>
      break;
 80022d4:	bf00      	nop
 80022d6:	e004      	b.n	80022e2 <DMA_CheckFifoParam+0xe6>
      break;
 80022d8:	bf00      	nop
 80022da:	e002      	b.n	80022e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80022dc:	bf00      	nop
 80022de:	e000      	b.n	80022e2 <DMA_CheckFifoParam+0xe6>
      break;
 80022e0:	bf00      	nop
    }
  } 
  
  return status; 
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e165      	b.n	80025d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800230c:	2201      	movs	r2, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	f040 8154 	bne.w	80025d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d00b      	beq.n	800234a <HAL_GPIO_Init+0x5a>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d007      	beq.n	800234a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233e:	2b11      	cmp	r3, #17
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b12      	cmp	r3, #18
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0xfc>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b12      	cmp	r3, #18
 80023ea:	d123      	bne.n	8002434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	08da      	lsrs	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3208      	adds	r2, #8
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	08da      	lsrs	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	69b9      	ldr	r1, [r7, #24]
 8002430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0203 	and.w	r2, r3, #3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80ae 	beq.w	80025d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b5c      	ldr	r3, [pc, #368]	; (80025ec <HAL_GPIO_Init+0x2fc>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a5b      	ldr	r2, [pc, #364]	; (80025ec <HAL_GPIO_Init+0x2fc>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_GPIO_Init+0x2fc>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002492:	4a57      	ldr	r2, [pc, #348]	; (80025f0 <HAL_GPIO_Init+0x300>)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3302      	adds	r3, #2
 800249a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4e      	ldr	r2, [pc, #312]	; (80025f4 <HAL_GPIO_Init+0x304>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d025      	beq.n	800250a <HAL_GPIO_Init+0x21a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4d      	ldr	r2, [pc, #308]	; (80025f8 <HAL_GPIO_Init+0x308>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <HAL_GPIO_Init+0x216>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4c      	ldr	r2, [pc, #304]	; (80025fc <HAL_GPIO_Init+0x30c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x212>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4b      	ldr	r2, [pc, #300]	; (8002600 <HAL_GPIO_Init+0x310>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x20e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_GPIO_Init+0x314>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x20a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a49      	ldr	r2, [pc, #292]	; (8002608 <HAL_GPIO_Init+0x318>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x206>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a48      	ldr	r2, [pc, #288]	; (800260c <HAL_GPIO_Init+0x31c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x202>
 80024ee:	2306      	movs	r3, #6
 80024f0:	e00c      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024f2:	2307      	movs	r3, #7
 80024f4:	e00a      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024f6:	2305      	movs	r3, #5
 80024f8:	e008      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024fa:	2304      	movs	r3, #4
 80024fc:	e006      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024fe:	2303      	movs	r3, #3
 8002500:	e004      	b.n	800250c <HAL_GPIO_Init+0x21c>
 8002502:	2302      	movs	r3, #2
 8002504:	e002      	b.n	800250c <HAL_GPIO_Init+0x21c>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_GPIO_Init+0x21c>
 800250a:	2300      	movs	r3, #0
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	f002 0203 	and.w	r2, r2, #3
 8002512:	0092      	lsls	r2, r2, #2
 8002514:	4093      	lsls	r3, r2
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800251c:	4934      	ldr	r1, [pc, #208]	; (80025f0 <HAL_GPIO_Init+0x300>)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	3302      	adds	r3, #2
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800252a:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_GPIO_Init+0x320>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800254e:	4a30      	ldr	r2, [pc, #192]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002554:	4b2e      	ldr	r3, [pc, #184]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <HAL_GPIO_Init+0x320>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025a2:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_GPIO_Init+0x320>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_GPIO_Init+0x320>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025cc:	4a10      	ldr	r2, [pc, #64]	; (8002610 <HAL_GPIO_Init+0x320>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3301      	adds	r3, #1
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2b0f      	cmp	r3, #15
 80025dc:	f67f ae96 	bls.w	800230c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e0:	bf00      	nop
 80025e2:	3724      	adds	r7, #36	; 0x24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40021400 	.word	0x40021400
 800260c:	40021800 	.word	0x40021800
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002630:	e003      	b.n	800263a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	619a      	str	r2, [r3, #24]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	401a      	ands	r2, r3
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	429a      	cmp	r2, r3
 800265e:	d104      	bne.n	800266a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	041a      	lsls	r2, r3, #16
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002668:	e002      	b.n	8002670 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	619a      	str	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_PWREx_EnableOverDrive+0x90>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_PWREx_EnableOverDrive+0x90>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <HAL_PWREx_EnableOverDrive+0x90>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026a2:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <HAL_PWREx_EnableOverDrive+0x94>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026a8:	f7ff f95c 	bl	8001964 <HAL_GetTick>
 80026ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026ae:	e009      	b.n	80026c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026b0:	f7ff f958 	bl	8001964 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026be:	d901      	bls.n	80026c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e01f      	b.n	8002704 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <HAL_PWREx_EnableOverDrive+0x98>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d1ee      	bne.n	80026b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d8:	f7ff f944 	bl	8001964 <HAL_GetTick>
 80026dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026de:	e009      	b.n	80026f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026e0:	f7ff f940 	bl	8001964 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ee:	d901      	bls.n	80026f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e007      	b.n	8002704 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002700:	d1ee      	bne.n	80026e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	420e0040 	.word	0x420e0040
 8002714:	40007000 	.word	0x40007000
 8002718:	420e0044 	.word	0x420e0044

0800271c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0cc      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d90c      	bls.n	8002758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b65      	ldr	r3, [pc, #404]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0b8      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b59      	ldr	r3, [pc, #356]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a58      	ldr	r2, [pc, #352]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800277a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002788:	4b53      	ldr	r3, [pc, #332]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a52      	ldr	r2, [pc, #328]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b50      	ldr	r3, [pc, #320]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	494d      	ldr	r1, [pc, #308]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d044      	beq.n	800283c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d119      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d003      	beq.n	80027da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e06f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e067      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f023 0203 	bic.w	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4934      	ldr	r1, [pc, #208]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	4313      	orrs	r3, r2
 800280a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800280c:	f7ff f8aa 	bl	8001964 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	e00a      	b.n	800282a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	f7ff f8a6 	bl	8001964 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e04f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 020c 	and.w	r2, r3, #12
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	429a      	cmp	r2, r3
 800283a:	d1eb      	bne.n	8002814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d20c      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b22      	ldr	r3, [pc, #136]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e032      	b.n	80028ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4916      	ldr	r1, [pc, #88]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	490e      	ldr	r1, [pc, #56]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028a2:	f000 f855 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 80028a6:	4601      	mov	r1, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	fa21 f303 	lsr.w	r3, r1, r3
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f80a 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023c00 	.word	0x40023c00
 80028d8:	40023800 	.word	0x40023800
 80028dc:	08004988 	.word	0x08004988
 80028e0:	200000e8 	.word	0x200000e8
 80028e4:	200000ec 	.word	0x200000ec

080028e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	200000e8 	.word	0x200000e8

08002900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002904:	f7ff fff0 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002908:	4601      	mov	r1, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0a9b      	lsrs	r3, r3, #10
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4a03      	ldr	r2, [pc, #12]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	08004998 	.word	0x08004998

08002928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800292c:	f7ff ffdc 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002930:	4601      	mov	r1, r0
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0b5b      	lsrs	r3, r3, #13
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4a03      	ldr	r2, [pc, #12]	; (800294c <HAL_RCC_GetPCLK2Freq+0x24>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40023800 	.word	0x40023800
 800294c:	08004998 	.word	0x08004998

08002950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296a:	4bc6      	ldr	r3, [pc, #792]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x334>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b0c      	cmp	r3, #12
 8002974:	f200 817e 	bhi.w	8002c74 <HAL_RCC_GetSysClockFreq+0x324>
 8002978:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <HAL_RCC_GetSysClockFreq+0x30>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	080029b5 	.word	0x080029b5
 8002984:	08002c75 	.word	0x08002c75
 8002988:	08002c75 	.word	0x08002c75
 800298c:	08002c75 	.word	0x08002c75
 8002990:	080029bb 	.word	0x080029bb
 8002994:	08002c75 	.word	0x08002c75
 8002998:	08002c75 	.word	0x08002c75
 800299c:	08002c75 	.word	0x08002c75
 80029a0:	080029c1 	.word	0x080029c1
 80029a4:	08002c75 	.word	0x08002c75
 80029a8:	08002c75 	.word	0x08002c75
 80029ac:	08002c75 	.word	0x08002c75
 80029b0:	08002b1d 	.word	0x08002b1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b4:	4bb4      	ldr	r3, [pc, #720]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x338>)
 80029b6:	613b      	str	r3, [r7, #16]
       break;
 80029b8:	e15f      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ba:	4bb4      	ldr	r3, [pc, #720]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x33c>)
 80029bc:	613b      	str	r3, [r7, #16]
      break;
 80029be:	e15c      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c0:	4bb0      	ldr	r3, [pc, #704]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x334>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ca:	4bae      	ldr	r3, [pc, #696]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x334>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d04a      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d6:	4bab      	ldr	r3, [pc, #684]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x334>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	099b      	lsrs	r3, r3, #6
 80029dc:	f04f 0400 	mov.w	r4, #0
 80029e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	ea03 0501 	and.w	r5, r3, r1
 80029ec:	ea04 0602 	and.w	r6, r4, r2
 80029f0:	4629      	mov	r1, r5
 80029f2:	4632      	mov	r2, r6
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	f04f 0400 	mov.w	r4, #0
 80029fc:	0154      	lsls	r4, r2, #5
 80029fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a02:	014b      	lsls	r3, r1, #5
 8002a04:	4619      	mov	r1, r3
 8002a06:	4622      	mov	r2, r4
 8002a08:	1b49      	subs	r1, r1, r5
 8002a0a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f04f 0400 	mov.w	r4, #0
 8002a16:	0194      	lsls	r4, r2, #6
 8002a18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a1c:	018b      	lsls	r3, r1, #6
 8002a1e:	1a5b      	subs	r3, r3, r1
 8002a20:	eb64 0402 	sbc.w	r4, r4, r2
 8002a24:	f04f 0100 	mov.w	r1, #0
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	00e2      	lsls	r2, r4, #3
 8002a2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a32:	00d9      	lsls	r1, r3, #3
 8002a34:	460b      	mov	r3, r1
 8002a36:	4614      	mov	r4, r2
 8002a38:	195b      	adds	r3, r3, r5
 8002a3a:	eb44 0406 	adc.w	r4, r4, r6
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	0262      	lsls	r2, r4, #9
 8002a48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a4c:	0259      	lsls	r1, r3, #9
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4614      	mov	r4, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	4621      	mov	r1, r4
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f04f 0400 	mov.w	r4, #0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4623      	mov	r3, r4
 8002a60:	f7fd fbd0 	bl	8000204 <__aeabi_uldivmod>
 8002a64:	4603      	mov	r3, r0
 8002a66:	460c      	mov	r4, r1
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e049      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6c:	4b85      	ldr	r3, [pc, #532]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	f04f 0400 	mov.w	r4, #0
 8002a76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	ea03 0501 	and.w	r5, r3, r1
 8002a82:	ea04 0602 	and.w	r6, r4, r2
 8002a86:	4629      	mov	r1, r5
 8002a88:	4632      	mov	r2, r6
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	f04f 0400 	mov.w	r4, #0
 8002a92:	0154      	lsls	r4, r2, #5
 8002a94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a98:	014b      	lsls	r3, r1, #5
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4622      	mov	r2, r4
 8002a9e:	1b49      	subs	r1, r1, r5
 8002aa0:	eb62 0206 	sbc.w	r2, r2, r6
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	f04f 0400 	mov.w	r4, #0
 8002aac:	0194      	lsls	r4, r2, #6
 8002aae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ab2:	018b      	lsls	r3, r1, #6
 8002ab4:	1a5b      	subs	r3, r3, r1
 8002ab6:	eb64 0402 	sbc.w	r4, r4, r2
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	00e2      	lsls	r2, r4, #3
 8002ac4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ac8:	00d9      	lsls	r1, r3, #3
 8002aca:	460b      	mov	r3, r1
 8002acc:	4614      	mov	r4, r2
 8002ace:	195b      	adds	r3, r3, r5
 8002ad0:	eb44 0406 	adc.w	r4, r4, r6
 8002ad4:	f04f 0100 	mov.w	r1, #0
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	02a2      	lsls	r2, r4, #10
 8002ade:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ae2:	0299      	lsls	r1, r3, #10
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4614      	mov	r4, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	4621      	mov	r1, r4
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f04f 0400 	mov.w	r4, #0
 8002af2:	461a      	mov	r2, r3
 8002af4:	4623      	mov	r3, r4
 8002af6:	f7fd fb85 	bl	8000204 <__aeabi_uldivmod>
 8002afa:	4603      	mov	r3, r0
 8002afc:	460c      	mov	r4, r1
 8002afe:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b00:	4b60      	ldr	r3, [pc, #384]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	613b      	str	r3, [r7, #16]
      break;
 8002b1a:	e0ae      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b24:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b26:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d04a      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b32:	4b54      	ldr	r3, [pc, #336]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	f04f 0400 	mov.w	r4, #0
 8002b3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	ea03 0501 	and.w	r5, r3, r1
 8002b48:	ea04 0602 	and.w	r6, r4, r2
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	4632      	mov	r2, r6
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	f04f 0400 	mov.w	r4, #0
 8002b58:	0154      	lsls	r4, r2, #5
 8002b5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b5e:	014b      	lsls	r3, r1, #5
 8002b60:	4619      	mov	r1, r3
 8002b62:	4622      	mov	r2, r4
 8002b64:	1b49      	subs	r1, r1, r5
 8002b66:	eb62 0206 	sbc.w	r2, r2, r6
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	f04f 0400 	mov.w	r4, #0
 8002b72:	0194      	lsls	r4, r2, #6
 8002b74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b78:	018b      	lsls	r3, r1, #6
 8002b7a:	1a5b      	subs	r3, r3, r1
 8002b7c:	eb64 0402 	sbc.w	r4, r4, r2
 8002b80:	f04f 0100 	mov.w	r1, #0
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	00e2      	lsls	r2, r4, #3
 8002b8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b8e:	00d9      	lsls	r1, r3, #3
 8002b90:	460b      	mov	r3, r1
 8002b92:	4614      	mov	r4, r2
 8002b94:	195b      	adds	r3, r3, r5
 8002b96:	eb44 0406 	adc.w	r4, r4, r6
 8002b9a:	f04f 0100 	mov.w	r1, #0
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	0262      	lsls	r2, r4, #9
 8002ba4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ba8:	0259      	lsls	r1, r3, #9
 8002baa:	460b      	mov	r3, r1
 8002bac:	4614      	mov	r4, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f04f 0400 	mov.w	r4, #0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4623      	mov	r3, r4
 8002bbc:	f7fd fb22 	bl	8000204 <__aeabi_uldivmod>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e049      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x334>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	f04f 0400 	mov.w	r4, #0
 8002bd2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	ea03 0501 	and.w	r5, r3, r1
 8002bde:	ea04 0602 	and.w	r6, r4, r2
 8002be2:	4629      	mov	r1, r5
 8002be4:	4632      	mov	r2, r6
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	f04f 0400 	mov.w	r4, #0
 8002bee:	0154      	lsls	r4, r2, #5
 8002bf0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bf4:	014b      	lsls	r3, r1, #5
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	1b49      	subs	r1, r1, r5
 8002bfc:	eb62 0206 	sbc.w	r2, r2, r6
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	f04f 0400 	mov.w	r4, #0
 8002c08:	0194      	lsls	r4, r2, #6
 8002c0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c0e:	018b      	lsls	r3, r1, #6
 8002c10:	1a5b      	subs	r3, r3, r1
 8002c12:	eb64 0402 	sbc.w	r4, r4, r2
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	00e2      	lsls	r2, r4, #3
 8002c20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c24:	00d9      	lsls	r1, r3, #3
 8002c26:	460b      	mov	r3, r1
 8002c28:	4614      	mov	r4, r2
 8002c2a:	195b      	adds	r3, r3, r5
 8002c2c:	eb44 0406 	adc.w	r4, r4, r6
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	02a2      	lsls	r2, r4, #10
 8002c3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c3e:	0299      	lsls	r1, r3, #10
 8002c40:	460b      	mov	r3, r1
 8002c42:	4614      	mov	r4, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	4621      	mov	r1, r4
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f04f 0400 	mov.w	r4, #0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4623      	mov	r3, r4
 8002c52:	f7fd fad7 	bl	8000204 <__aeabi_uldivmod>
 8002c56:	4603      	mov	r3, r0
 8002c58:	460c      	mov	r4, r1
 8002c5a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0f1b      	lsrs	r3, r3, #28
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	613b      	str	r3, [r7, #16]
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x338>)
 8002c76:	613b      	str	r3, [r7, #16]
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	693b      	ldr	r3, [r7, #16]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	00f42400 	.word	0x00f42400
 8002c8c:	007a1200 	.word	0x007a1200

08002c90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8083 	beq.w	8002db0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002caa:	4b95      	ldr	r3, [pc, #596]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d019      	beq.n	8002cea <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cb6:	4b92      	ldr	r3, [pc, #584]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d106      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cc2:	4b8f      	ldr	r3, [pc, #572]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cce:	d00c      	beq.n	8002cea <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd0:	4b8b      	ldr	r3, [pc, #556]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cd8:	2b0c      	cmp	r3, #12
 8002cda:	d112      	bne.n	8002d02 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cdc:	4b88      	ldr	r3, [pc, #544]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce8:	d10b      	bne.n	8002d02 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cea:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d05b      	beq.n	8002dae <HAL_RCC_OscConfig+0x11e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d157      	bne.n	8002dae <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e216      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x8a>
 8002d0c:	4b7c      	ldr	r3, [pc, #496]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a7b      	ldr	r2, [pc, #492]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	e01d      	b.n	8002d56 <HAL_RCC_OscConfig+0xc6>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d22:	d10c      	bne.n	8002d3e <HAL_RCC_OscConfig+0xae>
 8002d24:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a75      	ldr	r2, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a72      	ldr	r2, [pc, #456]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	e00b      	b.n	8002d56 <HAL_RCC_OscConfig+0xc6>
 8002d3e:	4b70      	ldr	r3, [pc, #448]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6f      	ldr	r2, [pc, #444]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b6d      	ldr	r3, [pc, #436]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6c      	ldr	r2, [pc, #432]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d013      	beq.n	8002d86 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fe01 	bl	8001964 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d66:	f7fe fdfd 	bl	8001964 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b64      	cmp	r3, #100	; 0x64
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1db      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0xd6>
 8002d84:	e014      	b.n	8002db0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe fded 	bl	8001964 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8e:	f7fe fde9 	bl	8001964 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b64      	cmp	r3, #100	; 0x64
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e1c7      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da0:	4b57      	ldr	r3, [pc, #348]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0xfe>
 8002dac:	e000      	b.n	8002db0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d06f      	beq.n	8002e9c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d105      	bne.n	8002de0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de0:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	d11c      	bne.n	8002e26 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dec:	4b44      	ldr	r3, [pc, #272]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d116      	bne.n	8002e26 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df8:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_OscConfig+0x180>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e18f      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4938      	ldr	r1, [pc, #224]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e24:	e03a      	b.n	8002e9c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d020      	beq.n	8002e70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2e:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <HAL_RCC_OscConfig+0x274>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe fd96 	bl	8001964 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3c:	f7fe fd92 	bl	8001964 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e170      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4925      	ldr	r1, [pc, #148]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
 8002e6e:	e015      	b.n	8002e9c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x274>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe fd75 	bl	8001964 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fd71 	bl	8001964 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e14f      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d037      	beq.n	8002f18 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d016      	beq.n	8002ede <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fe fd55 	bl	8001964 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fd51 	bl	8001964 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e12f      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x22e>
 8002edc:	e01c      	b.n	8002f18 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe fd3e 	bl	8001964 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eea:	e00f      	b.n	8002f0c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eec:	f7fe fd3a 	bl	8001964 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d908      	bls.n	8002f0c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e118      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	42470000 	.word	0x42470000
 8002f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	4b8a      	ldr	r3, [pc, #552]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e9      	bne.n	8002eec <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8097 	beq.w	8003054 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2a:	4b83      	ldr	r3, [pc, #524]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b7f      	ldr	r3, [pc, #508]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a7e      	ldr	r2, [pc, #504]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b7c      	ldr	r3, [pc, #496]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b79      	ldr	r3, [pc, #484]	; (800313c <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d118      	bne.n	8002f94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f62:	4b76      	ldr	r3, [pc, #472]	; (800313c <HAL_RCC_OscConfig+0x4ac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a75      	ldr	r2, [pc, #468]	; (800313c <HAL_RCC_OscConfig+0x4ac>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fcf9 	bl	8001964 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f76:	f7fe fcf5 	bl	8001964 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0d3      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	4b6c      	ldr	r3, [pc, #432]	; (800313c <HAL_RCC_OscConfig+0x4ac>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x31a>
 8002f9c:	4b66      	ldr	r3, [pc, #408]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	4a65      	ldr	r2, [pc, #404]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa8:	e01c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x354>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x33c>
 8002fb2:	4b61      	ldr	r3, [pc, #388]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	4a60      	ldr	r2, [pc, #384]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbe:	4b5e      	ldr	r3, [pc, #376]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	4a5d      	ldr	r2, [pc, #372]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x354>
 8002fcc:	4b5a      	ldr	r3, [pc, #360]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a59      	ldr	r2, [pc, #356]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	4b57      	ldr	r3, [pc, #348]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a56      	ldr	r2, [pc, #344]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8002fde:	f023 0304 	bic.w	r3, r3, #4
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d015      	beq.n	8003018 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe fcba 	bl	8001964 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fe fcb6 	bl	8001964 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e092      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ee      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x364>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fe fca4 	bl	8001964 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	e00a      	b.n	8003036 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fe fca0 	bl	8001964 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e07c      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003036:	4b40      	ldr	r3, [pc, #256]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1ee      	bne.n	8003020 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d105      	bne.n	8003054 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003048:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	4a3a      	ldr	r2, [pc, #232]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 800304e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d068      	beq.n	800312e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305c:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b08      	cmp	r3, #8
 8003066:	d060      	beq.n	800312a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d145      	bne.n	80030fc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003070:	4b33      	ldr	r3, [pc, #204]	; (8003140 <HAL_RCC_OscConfig+0x4b0>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003076:	f7fe fc75 	bl	8001964 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307e:	f7fe fc71 	bl	8001964 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e04f      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69da      	ldr	r2, [r3, #28]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	019b      	lsls	r3, r3, #6
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	3b01      	subs	r3, #1
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	061b      	lsls	r3, r3, #24
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	071b      	lsls	r3, r3, #28
 80030c8:	491b      	ldr	r1, [pc, #108]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ce:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <HAL_RCC_OscConfig+0x4b0>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fe fc46 	bl	8001964 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fe fc42 	bl	8001964 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e020      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x44c>
 80030fa:	e018      	b.n	800312e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <HAL_RCC_OscConfig+0x4b0>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe fc2f 	bl	8001964 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800310a:	f7fe fc2b 	bl	8001964 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e009      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCC_OscConfig+0x4a8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x47a>
 8003128:	e001      	b.n	800312e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000
 8003140:	42470060 	.word	0x42470060

08003144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e01d      	b.n	8003192 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe f9e0 	bl	8001530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f000 f95e 	bl	8003444 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b06      	cmp	r3, #6
 80031c2:	d007      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d122      	bne.n	800323e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d11b      	bne.n	800323e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f06f 0202 	mvn.w	r2, #2
 800320e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f8ee 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 800322a:	e005      	b.n	8003238 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f8e0 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f8f1 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b04      	cmp	r3, #4
 800324a:	d122      	bne.n	8003292 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b04      	cmp	r3, #4
 8003258:	d11b      	bne.n	8003292 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0204 	mvn.w	r2, #4
 8003262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f8c4 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 800327e:	e005      	b.n	800328c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f8b6 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f8c7 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b08      	cmp	r3, #8
 800329e:	d122      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d11b      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f06f 0208 	mvn.w	r2, #8
 80032b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2204      	movs	r2, #4
 80032bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f89a 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 80032d2:	e005      	b.n	80032e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f88c 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f89d 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d122      	bne.n	800333a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d11b      	bne.n	800333a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f06f 0210 	mvn.w	r2, #16
 800330a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2208      	movs	r2, #8
 8003310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f870 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 8003326:	e005      	b.n	8003334 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f862 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f873 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10e      	bne.n	8003366 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b01      	cmp	r3, #1
 8003354:	d107      	bne.n	8003366 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f06f 0201 	mvn.w	r2, #1
 800335e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fe f875 	bl	8001450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	2b80      	cmp	r3, #128	; 0x80
 8003372:	d10e      	bne.n	8003392 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b80      	cmp	r3, #128	; 0x80
 8003380:	d107      	bne.n	8003392 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800338a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f97f 	bl	8003690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d10e      	bne.n	80033be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d107      	bne.n	80033be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f838 	bl	800342e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d10e      	bne.n	80033ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d107      	bne.n	80033ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f06f 0220 	mvn.w	r2, #32
 80033e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f949 	bl	800367c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a40      	ldr	r2, [pc, #256]	; (8003558 <TIM_Base_SetConfig+0x114>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003462:	d00f      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a3d      	ldr	r2, [pc, #244]	; (800355c <TIM_Base_SetConfig+0x118>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00b      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a3c      	ldr	r2, [pc, #240]	; (8003560 <TIM_Base_SetConfig+0x11c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d007      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a3b      	ldr	r2, [pc, #236]	; (8003564 <TIM_Base_SetConfig+0x120>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a3a      	ldr	r2, [pc, #232]	; (8003568 <TIM_Base_SetConfig+0x124>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d108      	bne.n	8003496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2f      	ldr	r2, [pc, #188]	; (8003558 <TIM_Base_SetConfig+0x114>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02b      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d027      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2c      	ldr	r2, [pc, #176]	; (800355c <TIM_Base_SetConfig+0x118>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d023      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <TIM_Base_SetConfig+0x11c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <TIM_Base_SetConfig+0x120>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01b      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a29      	ldr	r2, [pc, #164]	; (8003568 <TIM_Base_SetConfig+0x124>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d017      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a28      	ldr	r2, [pc, #160]	; (800356c <TIM_Base_SetConfig+0x128>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a27      	ldr	r2, [pc, #156]	; (8003570 <TIM_Base_SetConfig+0x12c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00f      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a26      	ldr	r2, [pc, #152]	; (8003574 <TIM_Base_SetConfig+0x130>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00b      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a25      	ldr	r2, [pc, #148]	; (8003578 <TIM_Base_SetConfig+0x134>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d007      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a24      	ldr	r2, [pc, #144]	; (800357c <TIM_Base_SetConfig+0x138>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d003      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a23      	ldr	r2, [pc, #140]	; (8003580 <TIM_Base_SetConfig+0x13c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d108      	bne.n	8003508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <TIM_Base_SetConfig+0x114>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <TIM_Base_SetConfig+0xf8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a0c      	ldr	r2, [pc, #48]	; (8003568 <TIM_Base_SetConfig+0x124>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d103      	bne.n	8003544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	615a      	str	r2, [r3, #20]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40000c00 	.word	0x40000c00
 8003568:	40010400 	.word	0x40010400
 800356c:	40014000 	.word	0x40014000
 8003570:	40014400 	.word	0x40014400
 8003574:	40014800 	.word	0x40014800
 8003578:	40001800 	.word	0x40001800
 800357c:	40001c00 	.word	0x40001c00
 8003580:	40002000 	.word	0x40002000

08003584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003598:	2302      	movs	r3, #2
 800359a:	e05a      	b.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a21      	ldr	r2, [pc, #132]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d01d      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1b      	ldr	r2, [pc, #108]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1a      	ldr	r2, [pc, #104]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a18      	ldr	r2, [pc, #96]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10c      	bne.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800362c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	4313      	orrs	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40010000 	.word	0x40010000
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40010400 	.word	0x40010400
 8003674:	40014000 	.word	0x40014000
 8003678:	40001800 	.word	0x40001800

0800367c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e03f      	b.n	8003736 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd ff58 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2224      	movs	r2, #36	; 0x24
 80036d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fc19 	bl	8003f20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800370c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800371c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b088      	sub	sp, #32
 8003742:	af02      	add	r7, sp, #8
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b20      	cmp	r3, #32
 800375c:	f040 8083 	bne.w	8003866 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_UART_Transmit+0x2e>
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e07b      	b.n	8003868 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_UART_Transmit+0x40>
 800377a:	2302      	movs	r3, #2
 800377c:	e074      	b.n	8003868 <HAL_UART_Transmit+0x12a>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2221      	movs	r2, #33	; 0x21
 8003790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003794:	f7fe f8e6 	bl	8001964 <HAL_GetTick>
 8003798:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80037ae:	e042      	b.n	8003836 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c6:	d122      	bne.n	800380e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2200      	movs	r2, #0
 80037d0:	2180      	movs	r1, #128	; 0x80
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fa38 	bl	8003c48 <UART_WaitOnFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e042      	b.n	8003868 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	3302      	adds	r3, #2
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	e017      	b.n	8003836 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	3301      	adds	r3, #1
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	e013      	b.n	8003836 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2200      	movs	r2, #0
 8003816:	2180      	movs	r1, #128	; 0x80
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fa15 	bl	8003c48 <UART_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e01f      	b.n	8003868 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	60ba      	str	r2, [r7, #8]
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1b7      	bne.n	80037b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2200      	movs	r2, #0
 8003848:	2140      	movs	r1, #64	; 0x40
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f9fc 	bl	8003c48 <UART_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e006      	b.n	8003868 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e000      	b.n	8003868 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b20      	cmp	r3, #32
 8003888:	d140      	bne.n	800390c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_UART_Receive_IT+0x26>
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e039      	b.n	800390e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_UART_Receive_IT+0x38>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e032      	b.n	800390e <HAL_UART_Receive_IT+0x9e>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2222      	movs	r2, #34	; 0x22
 80038cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0220 	orr.w	r2, r2, #32
 8003906:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8003930:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d124      	bne.n	800399a <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800395e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	2b00      	cmp	r3, #0
 8003966:	d018      	beq.n	800399a <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	2200      	movs	r2, #0
 800396e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe f9e3 	bl	8001d40 <HAL_DMA_Abort>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe fbf7 	bl	8002178 <HAL_DMA_GetError>
 800398a:	4603      	mov	r3, r0
 800398c:	2b20      	cmp	r3, #32
 800398e:	d104      	bne.n	800399a <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2210      	movs	r2, #16
 8003994:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e03d      	b.n	8003a16 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d124      	bne.n	80039f2 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d018      	beq.n	80039f2 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	2200      	movs	r2, #0
 80039c6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe f9b7 	bl	8001d40 <HAL_DMA_Abort>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00c      	beq.n	80039f2 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe fbcb 	bl	8002178 <HAL_DMA_GetError>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d104      	bne.n	80039f2 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2210      	movs	r2, #16
 80039ec:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e011      	b.n	8003a16 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_UART_IRQHandler+0x52>
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f9d6 	bl	8003e1c <UART_Receive_IT>
      return;
 8003a70:	e0d1      	b.n	8003c16 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80b0 	beq.w	8003bda <HAL_UART_IRQHandler+0x1ba>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <HAL_UART_IRQHandler+0x70>
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80a5 	beq.w	8003bda <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x90>
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	f043 0201 	orr.w	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_UART_IRQHandler+0xb0>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	f043 0202 	orr.w	r2, r3, #2
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_UART_IRQHandler+0xd0>
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae8:	f043 0204 	orr.w	r2, r3, #4
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00f      	beq.n	8003b1a <HAL_UART_IRQHandler+0xfa>
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d104      	bne.n	8003b0e <HAL_UART_IRQHandler+0xee>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	f043 0208 	orr.w	r2, r3, #8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d078      	beq.n	8003c14 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <HAL_UART_IRQHandler+0x11c>
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f970 	bl	8003e1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <HAL_UART_IRQHandler+0x144>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d031      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f8b9 	bl	8003cdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d123      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b86:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b94:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <HAL_UART_IRQHandler+0x1fc>)
 8003b96:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe f93f 	bl	8001e20 <HAL_DMA_Abort_IT>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d016      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb6:	e00e      	b.n	8003bd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f83b 	bl	8003c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbe:	e00a      	b.n	8003bd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f837 	bl	8003c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc6:	e006      	b.n	8003bd6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f833 	bl	8003c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003bd4:	e01e      	b.n	8003c14 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd6:	bf00      	nop
    return;
 8003bd8:	e01c      	b.n	8003c14 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x1d6>
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8a6 	bl	8003d40 <UART_Transmit_IT>
    return;
 8003bf4:	e00f      	b.n	8003c16 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_UART_IRQHandler+0x1f6>
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f8ee 	bl	8003dec <UART_EndTransmit_IT>
    return;
 8003c10:	bf00      	nop
 8003c12:	e000      	b.n	8003c16 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003c14:	bf00      	nop
  }
}
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	08003d19 	.word	0x08003d19

08003c20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c58:	e02c      	b.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c60:	d028      	beq.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c68:	f7fd fe7c 	bl	8001964 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d21d      	bcs.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e00f      	b.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d0c3      	beq.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cf2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7ff ff7e 	bl	8003c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b21      	cmp	r3, #33	; 0x21
 8003d52:	d144      	bne.n	8003dde <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5c:	d11a      	bne.n	8003d94 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d72:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	1c9a      	adds	r2, r3, #2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]
 8003d86:	e00e      	b.n	8003da6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	621a      	str	r2, [r3, #32]
 8003d92:	e008      	b.n	8003da6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	1c59      	adds	r1, r3, #1
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6211      	str	r1, [r2, #32]
 8003d9e:	781a      	ldrb	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	4619      	mov	r1, r3
 8003db4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10f      	bne.n	8003dda <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff07 	bl	8003c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b22      	cmp	r3, #34	; 0x22
 8003e2e:	d171      	bne.n	8003f14 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e38:	d123      	bne.n	8003e82 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10e      	bne.n	8003e66 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	1c9a      	adds	r2, r3, #2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
 8003e64:	e029      	b.n	8003eba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e80:	e01b      	b.n	8003eba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6858      	ldr	r0, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6291      	str	r1, [r2, #40]	; 0x28
 8003e9a:	b2c2      	uxtb	r2, r0
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e00c      	b.n	8003eba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	1c58      	adds	r0, r3, #1
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	6288      	str	r0, [r1, #40]	; 0x28
 8003eb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d120      	bne.n	8003f10 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0220 	bic.w	r2, r2, #32
 8003edc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fd fa24 	bl	8001354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e002      	b.n	8003f16 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f62:	f023 030c 	bic.w	r3, r3, #12
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	68f9      	ldr	r1, [r7, #12]
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8e:	f040 818b 	bne.w	80042a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4ac1      	ldr	r2, [pc, #772]	; (800429c <UART_SetConfig+0x37c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d005      	beq.n	8003fa8 <UART_SetConfig+0x88>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4abf      	ldr	r2, [pc, #764]	; (80042a0 <UART_SetConfig+0x380>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	f040 80bd 	bne.w	8004122 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fa8:	f7fe fcbe 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 8003fac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	461d      	mov	r5, r3
 8003fb2:	f04f 0600 	mov.w	r6, #0
 8003fb6:	46a8      	mov	r8, r5
 8003fb8:	46b1      	mov	r9, r6
 8003fba:	eb18 0308 	adds.w	r3, r8, r8
 8003fbe:	eb49 0409 	adc.w	r4, r9, r9
 8003fc2:	4698      	mov	r8, r3
 8003fc4:	46a1      	mov	r9, r4
 8003fc6:	eb18 0805 	adds.w	r8, r8, r5
 8003fca:	eb49 0906 	adc.w	r9, r9, r6
 8003fce:	f04f 0100 	mov.w	r1, #0
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fe2:	4688      	mov	r8, r1
 8003fe4:	4691      	mov	r9, r2
 8003fe6:	eb18 0005 	adds.w	r0, r8, r5
 8003fea:	eb49 0106 	adc.w	r1, r9, r6
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	461d      	mov	r5, r3
 8003ff4:	f04f 0600 	mov.w	r6, #0
 8003ff8:	196b      	adds	r3, r5, r5
 8003ffa:	eb46 0406 	adc.w	r4, r6, r6
 8003ffe:	461a      	mov	r2, r3
 8004000:	4623      	mov	r3, r4
 8004002:	f7fc f8ff 	bl	8000204 <__aeabi_uldivmod>
 8004006:	4603      	mov	r3, r0
 8004008:	460c      	mov	r4, r1
 800400a:	461a      	mov	r2, r3
 800400c:	4ba5      	ldr	r3, [pc, #660]	; (80042a4 <UART_SetConfig+0x384>)
 800400e:	fba3 2302 	umull	r2, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	461d      	mov	r5, r3
 800401c:	f04f 0600 	mov.w	r6, #0
 8004020:	46a9      	mov	r9, r5
 8004022:	46b2      	mov	sl, r6
 8004024:	eb19 0309 	adds.w	r3, r9, r9
 8004028:	eb4a 040a 	adc.w	r4, sl, sl
 800402c:	4699      	mov	r9, r3
 800402e:	46a2      	mov	sl, r4
 8004030:	eb19 0905 	adds.w	r9, r9, r5
 8004034:	eb4a 0a06 	adc.w	sl, sl, r6
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004044:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004048:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800404c:	4689      	mov	r9, r1
 800404e:	4692      	mov	sl, r2
 8004050:	eb19 0005 	adds.w	r0, r9, r5
 8004054:	eb4a 0106 	adc.w	r1, sl, r6
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	461d      	mov	r5, r3
 800405e:	f04f 0600 	mov.w	r6, #0
 8004062:	196b      	adds	r3, r5, r5
 8004064:	eb46 0406 	adc.w	r4, r6, r6
 8004068:	461a      	mov	r2, r3
 800406a:	4623      	mov	r3, r4
 800406c:	f7fc f8ca 	bl	8000204 <__aeabi_uldivmod>
 8004070:	4603      	mov	r3, r0
 8004072:	460c      	mov	r4, r1
 8004074:	461a      	mov	r2, r3
 8004076:	4b8b      	ldr	r3, [pc, #556]	; (80042a4 <UART_SetConfig+0x384>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2164      	movs	r1, #100	; 0x64
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	3332      	adds	r3, #50	; 0x32
 800408a:	4a86      	ldr	r2, [pc, #536]	; (80042a4 <UART_SetConfig+0x384>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004098:	4498      	add	r8, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	461d      	mov	r5, r3
 800409e:	f04f 0600 	mov.w	r6, #0
 80040a2:	46a9      	mov	r9, r5
 80040a4:	46b2      	mov	sl, r6
 80040a6:	eb19 0309 	adds.w	r3, r9, r9
 80040aa:	eb4a 040a 	adc.w	r4, sl, sl
 80040ae:	4699      	mov	r9, r3
 80040b0:	46a2      	mov	sl, r4
 80040b2:	eb19 0905 	adds.w	r9, r9, r5
 80040b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80040ba:	f04f 0100 	mov.w	r1, #0
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040ce:	4689      	mov	r9, r1
 80040d0:	4692      	mov	sl, r2
 80040d2:	eb19 0005 	adds.w	r0, r9, r5
 80040d6:	eb4a 0106 	adc.w	r1, sl, r6
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	461d      	mov	r5, r3
 80040e0:	f04f 0600 	mov.w	r6, #0
 80040e4:	196b      	adds	r3, r5, r5
 80040e6:	eb46 0406 	adc.w	r4, r6, r6
 80040ea:	461a      	mov	r2, r3
 80040ec:	4623      	mov	r3, r4
 80040ee:	f7fc f889 	bl	8000204 <__aeabi_uldivmod>
 80040f2:	4603      	mov	r3, r0
 80040f4:	460c      	mov	r4, r1
 80040f6:	461a      	mov	r2, r3
 80040f8:	4b6a      	ldr	r3, [pc, #424]	; (80042a4 <UART_SetConfig+0x384>)
 80040fa:	fba3 1302 	umull	r1, r3, r3, r2
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	2164      	movs	r1, #100	; 0x64
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	3332      	adds	r3, #50	; 0x32
 800410c:	4a65      	ldr	r2, [pc, #404]	; (80042a4 <UART_SetConfig+0x384>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	f003 0207 	and.w	r2, r3, #7
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4442      	add	r2, r8
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	e26f      	b.n	8004602 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004122:	f7fe fbed 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8004126:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	461d      	mov	r5, r3
 800412c:	f04f 0600 	mov.w	r6, #0
 8004130:	46a8      	mov	r8, r5
 8004132:	46b1      	mov	r9, r6
 8004134:	eb18 0308 	adds.w	r3, r8, r8
 8004138:	eb49 0409 	adc.w	r4, r9, r9
 800413c:	4698      	mov	r8, r3
 800413e:	46a1      	mov	r9, r4
 8004140:	eb18 0805 	adds.w	r8, r8, r5
 8004144:	eb49 0906 	adc.w	r9, r9, r6
 8004148:	f04f 0100 	mov.w	r1, #0
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004154:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004158:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800415c:	4688      	mov	r8, r1
 800415e:	4691      	mov	r9, r2
 8004160:	eb18 0005 	adds.w	r0, r8, r5
 8004164:	eb49 0106 	adc.w	r1, r9, r6
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	461d      	mov	r5, r3
 800416e:	f04f 0600 	mov.w	r6, #0
 8004172:	196b      	adds	r3, r5, r5
 8004174:	eb46 0406 	adc.w	r4, r6, r6
 8004178:	461a      	mov	r2, r3
 800417a:	4623      	mov	r3, r4
 800417c:	f7fc f842 	bl	8000204 <__aeabi_uldivmod>
 8004180:	4603      	mov	r3, r0
 8004182:	460c      	mov	r4, r1
 8004184:	461a      	mov	r2, r3
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <UART_SetConfig+0x384>)
 8004188:	fba3 2302 	umull	r2, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	461d      	mov	r5, r3
 8004196:	f04f 0600 	mov.w	r6, #0
 800419a:	46a9      	mov	r9, r5
 800419c:	46b2      	mov	sl, r6
 800419e:	eb19 0309 	adds.w	r3, r9, r9
 80041a2:	eb4a 040a 	adc.w	r4, sl, sl
 80041a6:	4699      	mov	r9, r3
 80041a8:	46a2      	mov	sl, r4
 80041aa:	eb19 0905 	adds.w	r9, r9, r5
 80041ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041c6:	4689      	mov	r9, r1
 80041c8:	4692      	mov	sl, r2
 80041ca:	eb19 0005 	adds.w	r0, r9, r5
 80041ce:	eb4a 0106 	adc.w	r1, sl, r6
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	461d      	mov	r5, r3
 80041d8:	f04f 0600 	mov.w	r6, #0
 80041dc:	196b      	adds	r3, r5, r5
 80041de:	eb46 0406 	adc.w	r4, r6, r6
 80041e2:	461a      	mov	r2, r3
 80041e4:	4623      	mov	r3, r4
 80041e6:	f7fc f80d 	bl	8000204 <__aeabi_uldivmod>
 80041ea:	4603      	mov	r3, r0
 80041ec:	460c      	mov	r4, r1
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <UART_SetConfig+0x384>)
 80041f2:	fba3 1302 	umull	r1, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2164      	movs	r1, #100	; 0x64
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	3332      	adds	r3, #50	; 0x32
 8004204:	4a27      	ldr	r2, [pc, #156]	; (80042a4 <UART_SetConfig+0x384>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004212:	4498      	add	r8, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	461d      	mov	r5, r3
 8004218:	f04f 0600 	mov.w	r6, #0
 800421c:	46a9      	mov	r9, r5
 800421e:	46b2      	mov	sl, r6
 8004220:	eb19 0309 	adds.w	r3, r9, r9
 8004224:	eb4a 040a 	adc.w	r4, sl, sl
 8004228:	4699      	mov	r9, r3
 800422a:	46a2      	mov	sl, r4
 800422c:	eb19 0905 	adds.w	r9, r9, r5
 8004230:	eb4a 0a06 	adc.w	sl, sl, r6
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004240:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004244:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004248:	4689      	mov	r9, r1
 800424a:	4692      	mov	sl, r2
 800424c:	eb19 0005 	adds.w	r0, r9, r5
 8004250:	eb4a 0106 	adc.w	r1, sl, r6
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	461d      	mov	r5, r3
 800425a:	f04f 0600 	mov.w	r6, #0
 800425e:	196b      	adds	r3, r5, r5
 8004260:	eb46 0406 	adc.w	r4, r6, r6
 8004264:	461a      	mov	r2, r3
 8004266:	4623      	mov	r3, r4
 8004268:	f7fb ffcc 	bl	8000204 <__aeabi_uldivmod>
 800426c:	4603      	mov	r3, r0
 800426e:	460c      	mov	r4, r1
 8004270:	461a      	mov	r2, r3
 8004272:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <UART_SetConfig+0x384>)
 8004274:	fba3 1302 	umull	r1, r3, r3, r2
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	2164      	movs	r1, #100	; 0x64
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	3332      	adds	r3, #50	; 0x32
 8004286:	4a07      	ldr	r2, [pc, #28]	; (80042a4 <UART_SetConfig+0x384>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	f003 0207 	and.w	r2, r3, #7
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4442      	add	r2, r8
 8004298:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800429a:	e1b2      	b.n	8004602 <UART_SetConfig+0x6e2>
 800429c:	40011000 	.word	0x40011000
 80042a0:	40011400 	.word	0x40011400
 80042a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4ad7      	ldr	r2, [pc, #860]	; (800460c <UART_SetConfig+0x6ec>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d005      	beq.n	80042be <UART_SetConfig+0x39e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4ad6      	ldr	r2, [pc, #856]	; (8004610 <UART_SetConfig+0x6f0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	f040 80d1 	bne.w	8004460 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80042be:	f7fe fb33 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 80042c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	469a      	mov	sl, r3
 80042c8:	f04f 0b00 	mov.w	fp, #0
 80042cc:	46d0      	mov	r8, sl
 80042ce:	46d9      	mov	r9, fp
 80042d0:	eb18 0308 	adds.w	r3, r8, r8
 80042d4:	eb49 0409 	adc.w	r4, r9, r9
 80042d8:	4698      	mov	r8, r3
 80042da:	46a1      	mov	r9, r4
 80042dc:	eb18 080a 	adds.w	r8, r8, sl
 80042e0:	eb49 090b 	adc.w	r9, r9, fp
 80042e4:	f04f 0100 	mov.w	r1, #0
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042f8:	4688      	mov	r8, r1
 80042fa:	4691      	mov	r9, r2
 80042fc:	eb1a 0508 	adds.w	r5, sl, r8
 8004300:	eb4b 0609 	adc.w	r6, fp, r9
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4619      	mov	r1, r3
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	f04f 0400 	mov.w	r4, #0
 8004316:	0094      	lsls	r4, r2, #2
 8004318:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800431c:	008b      	lsls	r3, r1, #2
 800431e:	461a      	mov	r2, r3
 8004320:	4623      	mov	r3, r4
 8004322:	4628      	mov	r0, r5
 8004324:	4631      	mov	r1, r6
 8004326:	f7fb ff6d 	bl	8000204 <__aeabi_uldivmod>
 800432a:	4603      	mov	r3, r0
 800432c:	460c      	mov	r4, r1
 800432e:	461a      	mov	r2, r3
 8004330:	4bb8      	ldr	r3, [pc, #736]	; (8004614 <UART_SetConfig+0x6f4>)
 8004332:	fba3 2302 	umull	r2, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	469b      	mov	fp, r3
 8004340:	f04f 0c00 	mov.w	ip, #0
 8004344:	46d9      	mov	r9, fp
 8004346:	46e2      	mov	sl, ip
 8004348:	eb19 0309 	adds.w	r3, r9, r9
 800434c:	eb4a 040a 	adc.w	r4, sl, sl
 8004350:	4699      	mov	r9, r3
 8004352:	46a2      	mov	sl, r4
 8004354:	eb19 090b 	adds.w	r9, r9, fp
 8004358:	eb4a 0a0c 	adc.w	sl, sl, ip
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004368:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800436c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004370:	4689      	mov	r9, r1
 8004372:	4692      	mov	sl, r2
 8004374:	eb1b 0509 	adds.w	r5, fp, r9
 8004378:	eb4c 060a 	adc.w	r6, ip, sl
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4619      	mov	r1, r3
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	f04f 0400 	mov.w	r4, #0
 800438e:	0094      	lsls	r4, r2, #2
 8004390:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004394:	008b      	lsls	r3, r1, #2
 8004396:	461a      	mov	r2, r3
 8004398:	4623      	mov	r3, r4
 800439a:	4628      	mov	r0, r5
 800439c:	4631      	mov	r1, r6
 800439e:	f7fb ff31 	bl	8000204 <__aeabi_uldivmod>
 80043a2:	4603      	mov	r3, r0
 80043a4:	460c      	mov	r4, r1
 80043a6:	461a      	mov	r2, r3
 80043a8:	4b9a      	ldr	r3, [pc, #616]	; (8004614 <UART_SetConfig+0x6f4>)
 80043aa:	fba3 1302 	umull	r1, r3, r3, r2
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	2164      	movs	r1, #100	; 0x64
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	3332      	adds	r3, #50	; 0x32
 80043bc:	4a95      	ldr	r2, [pc, #596]	; (8004614 <UART_SetConfig+0x6f4>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c8:	4498      	add	r8, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	469b      	mov	fp, r3
 80043ce:	f04f 0c00 	mov.w	ip, #0
 80043d2:	46d9      	mov	r9, fp
 80043d4:	46e2      	mov	sl, ip
 80043d6:	eb19 0309 	adds.w	r3, r9, r9
 80043da:	eb4a 040a 	adc.w	r4, sl, sl
 80043de:	4699      	mov	r9, r3
 80043e0:	46a2      	mov	sl, r4
 80043e2:	eb19 090b 	adds.w	r9, r9, fp
 80043e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043fe:	4689      	mov	r9, r1
 8004400:	4692      	mov	sl, r2
 8004402:	eb1b 0509 	adds.w	r5, fp, r9
 8004406:	eb4c 060a 	adc.w	r6, ip, sl
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	4619      	mov	r1, r3
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	f04f 0400 	mov.w	r4, #0
 800441c:	0094      	lsls	r4, r2, #2
 800441e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004422:	008b      	lsls	r3, r1, #2
 8004424:	461a      	mov	r2, r3
 8004426:	4623      	mov	r3, r4
 8004428:	4628      	mov	r0, r5
 800442a:	4631      	mov	r1, r6
 800442c:	f7fb feea 	bl	8000204 <__aeabi_uldivmod>
 8004430:	4603      	mov	r3, r0
 8004432:	460c      	mov	r4, r1
 8004434:	461a      	mov	r2, r3
 8004436:	4b77      	ldr	r3, [pc, #476]	; (8004614 <UART_SetConfig+0x6f4>)
 8004438:	fba3 1302 	umull	r1, r3, r3, r2
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	2164      	movs	r1, #100	; 0x64
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	3332      	adds	r3, #50	; 0x32
 800444a:	4a72      	ldr	r2, [pc, #456]	; (8004614 <UART_SetConfig+0x6f4>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	f003 020f 	and.w	r2, r3, #15
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4442      	add	r2, r8
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	e0d0      	b.n	8004602 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004460:	f7fe fa4e 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8004464:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	469a      	mov	sl, r3
 800446a:	f04f 0b00 	mov.w	fp, #0
 800446e:	46d0      	mov	r8, sl
 8004470:	46d9      	mov	r9, fp
 8004472:	eb18 0308 	adds.w	r3, r8, r8
 8004476:	eb49 0409 	adc.w	r4, r9, r9
 800447a:	4698      	mov	r8, r3
 800447c:	46a1      	mov	r9, r4
 800447e:	eb18 080a 	adds.w	r8, r8, sl
 8004482:	eb49 090b 	adc.w	r9, r9, fp
 8004486:	f04f 0100 	mov.w	r1, #0
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004492:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004496:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800449a:	4688      	mov	r8, r1
 800449c:	4691      	mov	r9, r2
 800449e:	eb1a 0508 	adds.w	r5, sl, r8
 80044a2:	eb4b 0609 	adc.w	r6, fp, r9
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4619      	mov	r1, r3
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	f04f 0400 	mov.w	r4, #0
 80044b8:	0094      	lsls	r4, r2, #2
 80044ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044be:	008b      	lsls	r3, r1, #2
 80044c0:	461a      	mov	r2, r3
 80044c2:	4623      	mov	r3, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	4631      	mov	r1, r6
 80044c8:	f7fb fe9c 	bl	8000204 <__aeabi_uldivmod>
 80044cc:	4603      	mov	r3, r0
 80044ce:	460c      	mov	r4, r1
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b50      	ldr	r3, [pc, #320]	; (8004614 <UART_SetConfig+0x6f4>)
 80044d4:	fba3 2302 	umull	r2, r3, r3, r2
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	469b      	mov	fp, r3
 80044e2:	f04f 0c00 	mov.w	ip, #0
 80044e6:	46d9      	mov	r9, fp
 80044e8:	46e2      	mov	sl, ip
 80044ea:	eb19 0309 	adds.w	r3, r9, r9
 80044ee:	eb4a 040a 	adc.w	r4, sl, sl
 80044f2:	4699      	mov	r9, r3
 80044f4:	46a2      	mov	sl, r4
 80044f6:	eb19 090b 	adds.w	r9, r9, fp
 80044fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044fe:	f04f 0100 	mov.w	r1, #0
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800450a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800450e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004512:	4689      	mov	r9, r1
 8004514:	4692      	mov	sl, r2
 8004516:	eb1b 0509 	adds.w	r5, fp, r9
 800451a:	eb4c 060a 	adc.w	r6, ip, sl
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	4619      	mov	r1, r3
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	f04f 0400 	mov.w	r4, #0
 8004530:	0094      	lsls	r4, r2, #2
 8004532:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004536:	008b      	lsls	r3, r1, #2
 8004538:	461a      	mov	r2, r3
 800453a:	4623      	mov	r3, r4
 800453c:	4628      	mov	r0, r5
 800453e:	4631      	mov	r1, r6
 8004540:	f7fb fe60 	bl	8000204 <__aeabi_uldivmod>
 8004544:	4603      	mov	r3, r0
 8004546:	460c      	mov	r4, r1
 8004548:	461a      	mov	r2, r3
 800454a:	4b32      	ldr	r3, [pc, #200]	; (8004614 <UART_SetConfig+0x6f4>)
 800454c:	fba3 1302 	umull	r1, r3, r3, r2
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	2164      	movs	r1, #100	; 0x64
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	3332      	adds	r3, #50	; 0x32
 800455e:	4a2d      	ldr	r2, [pc, #180]	; (8004614 <UART_SetConfig+0x6f4>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800456a:	4498      	add	r8, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	469b      	mov	fp, r3
 8004570:	f04f 0c00 	mov.w	ip, #0
 8004574:	46d9      	mov	r9, fp
 8004576:	46e2      	mov	sl, ip
 8004578:	eb19 0309 	adds.w	r3, r9, r9
 800457c:	eb4a 040a 	adc.w	r4, sl, sl
 8004580:	4699      	mov	r9, r3
 8004582:	46a2      	mov	sl, r4
 8004584:	eb19 090b 	adds.w	r9, r9, fp
 8004588:	eb4a 0a0c 	adc.w	sl, sl, ip
 800458c:	f04f 0100 	mov.w	r1, #0
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004598:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800459c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045a0:	4689      	mov	r9, r1
 80045a2:	4692      	mov	sl, r2
 80045a4:	eb1b 0509 	adds.w	r5, fp, r9
 80045a8:	eb4c 060a 	adc.w	r6, ip, sl
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4619      	mov	r1, r3
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	f04f 0400 	mov.w	r4, #0
 80045be:	0094      	lsls	r4, r2, #2
 80045c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045c4:	008b      	lsls	r3, r1, #2
 80045c6:	461a      	mov	r2, r3
 80045c8:	4623      	mov	r3, r4
 80045ca:	4628      	mov	r0, r5
 80045cc:	4631      	mov	r1, r6
 80045ce:	f7fb fe19 	bl	8000204 <__aeabi_uldivmod>
 80045d2:	4603      	mov	r3, r0
 80045d4:	460c      	mov	r4, r1
 80045d6:	461a      	mov	r2, r3
 80045d8:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <UART_SetConfig+0x6f4>)
 80045da:	fba3 1302 	umull	r1, r3, r3, r2
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	2164      	movs	r1, #100	; 0x64
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	3332      	adds	r3, #50	; 0x32
 80045ec:	4a09      	ldr	r2, [pc, #36]	; (8004614 <UART_SetConfig+0x6f4>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	f003 020f 	and.w	r2, r3, #15
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4442      	add	r2, r8
 80045fe:	609a      	str	r2, [r3, #8]
}
 8004600:	e7ff      	b.n	8004602 <UART_SetConfig+0x6e2>
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800460c:	40011000 	.word	0x40011000
 8004610:	40011400 	.word	0x40011400
 8004614:	51eb851f 	.word	0x51eb851f

08004618 <__libc_init_array>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	4e0d      	ldr	r6, [pc, #52]	; (8004650 <__libc_init_array+0x38>)
 800461c:	4c0d      	ldr	r4, [pc, #52]	; (8004654 <__libc_init_array+0x3c>)
 800461e:	1ba4      	subs	r4, r4, r6
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	2500      	movs	r5, #0
 8004624:	42a5      	cmp	r5, r4
 8004626:	d109      	bne.n	800463c <__libc_init_array+0x24>
 8004628:	4e0b      	ldr	r6, [pc, #44]	; (8004658 <__libc_init_array+0x40>)
 800462a:	4c0c      	ldr	r4, [pc, #48]	; (800465c <__libc_init_array+0x44>)
 800462c:	f000 f820 	bl	8004670 <_init>
 8004630:	1ba4      	subs	r4, r4, r6
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	2500      	movs	r5, #0
 8004636:	42a5      	cmp	r5, r4
 8004638:	d105      	bne.n	8004646 <__libc_init_array+0x2e>
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004640:	4798      	blx	r3
 8004642:	3501      	adds	r5, #1
 8004644:	e7ee      	b.n	8004624 <__libc_init_array+0xc>
 8004646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800464a:	4798      	blx	r3
 800464c:	3501      	adds	r5, #1
 800464e:	e7f2      	b.n	8004636 <__libc_init_array+0x1e>
 8004650:	080049b0 	.word	0x080049b0
 8004654:	080049b0 	.word	0x080049b0
 8004658:	080049b0 	.word	0x080049b0
 800465c:	080049b4 	.word	0x080049b4

08004660 <memset>:
 8004660:	4402      	add	r2, r0
 8004662:	4603      	mov	r3, r0
 8004664:	4293      	cmp	r3, r2
 8004666:	d100      	bne.n	800466a <memset+0xa>
 8004668:	4770      	bx	lr
 800466a:	f803 1b01 	strb.w	r1, [r3], #1
 800466e:	e7f9      	b.n	8004664 <memset+0x4>

08004670 <_init>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr

0800467c <_fini>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	bf00      	nop
 8004680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004682:	bc08      	pop	{r3}
 8004684:	469e      	mov	lr, r3
 8004686:	4770      	bx	lr
