
stm32l476-sx1272-accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f1c  08005f1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f1c  08005f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f24  08005f24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f24  08005f24  00015f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f28  08005f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000070  08005f9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08005f9c  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011070  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022f6  00000000  00000000  00031110  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  00033408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  000340d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027101  00000000  00000000  00034c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aec1  00000000  00000000  0005bd91  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec158  00000000  00000000  00066c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152daa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003698  00000000  00000000  00152e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d50 	.word	0x08005d50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d50 	.word	0x08005d50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Rf96_LoRaClearIrq>:
  temp=temp-157;
  return temp;
}
// Очистка всех флагов
void Rf96_LoRaClearIrq(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  SPIWrite(LR_RegIrqFlags,0xFF);
 8000574:	21ff      	movs	r1, #255	; 0xff
 8000576:	2012      	movs	r0, #18
 8000578:	f000 fe50 	bl	800121c <SPIWrite>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <Rf96_Standby>:

// Вход в standby мод
void Rf96_Standby(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x09);                              		//Standby//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x01);                              	 //Standby//High Frequency Mode
 8000584:	2101      	movs	r1, #1
 8000586:	2001      	movs	r0, #1
 8000588:	f000 fe48 	bl	800121c <SPIWrite>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <Rf96_Sleep>:

// Вход в sleep мод
void Rf96_Sleep(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x08);                              		//Sleep//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x00);                            		 //Sleep//High Frequency Mode
 8000594:	2100      	movs	r1, #0
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fe40 	bl	800121c <SPIWrite>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <Rf96_EntryLoRa>:

// Вход в Lora мод
void Rf96_EntryLoRa(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  //SPIWrite(LR_RegOpMode,0x88);//Low Frequency Mode
	SPIWrite(LR_RegOpMode,0x80);//High Frequency Mode
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 fe38 	bl	800121c <SPIWrite>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <Rf96_FreqChoose>:
// Выбираем несущую частоту 0 - 434 Мгц  1 - 868 Мгц
void Rf96_FreqChoose(uint8_t freq_value)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	BurstWrite(LR_RegFrMsb,Rf96_FreqTbl[freq_value],3);
 80005ba:	79fa      	ldrb	r2, [r7, #7]
 80005bc:	4613      	mov	r3, r2
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	4413      	add	r3, r2
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <Rf96_FreqChoose+0x28>)
 80005c4:	4413      	add	r3, r2
 80005c6:	2203      	movs	r2, #3
 80005c8:	4619      	mov	r1, r3
 80005ca:	2006      	movs	r0, #6
 80005cc:	f000 fe7c 	bl	80012c8 <BurstWrite>

}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	08005d88 	.word	0x08005d88

080005dc <Rf96_OutPower>:
// Выбираем выходную мощность 0 -20 Дб, 1- 17 Дб, 2 - 14 Дб, 3 - 11 Дб
void Rf96_OutPower(uint8_t Power_value)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPaConfig,Rf96_PowerTbl[Power_value]);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <Rf96_OutPower+0x28>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2009      	movs	r0, #9
 80005f0:	f000 fe14 	bl	800121c <SPIWrite>
	SPIWrite(0x5A,0x87);  // Для ноги PA устанавливает Pmax до +20 Дб при 0x87  и оставляет по дефолту при 0x84 ???????
 80005f4:	2187      	movs	r1, #135	; 0x87
 80005f6:	205a      	movs	r0, #90	; 0x5a
 80005f8:	f000 fe10 	bl	800121c <SPIWrite>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	08005d94 	.word	0x08005d94

08000608 <Rf96_OCP>:
// защита по току( максимальный ток усилителя) ( важно ее правильно настроить, поскольку выходная мощность зависит от тока)
// 0 -Без ограничения по току, 1 - 100 мА , 2 - 120 мА, 3 -200 мА
void Rf96_OCP(uint8_t OCP_value)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]

	SPIWrite(LR_RegOcp,Rf96_OCPTbl[OCP_value]);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <Rf96_OCP+0x20>)
 8000616:	5cd3      	ldrb	r3, [r2, r3]
 8000618:	4619      	mov	r1, r3
 800061a:	200b      	movs	r0, #11
 800061c:	f000 fdfe 	bl	800121c <SPIWrite>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	08005d98 	.word	0x08005d98

0800062c <Rf96_LNA>:
// Выбираем LNA  0 - LNA выключен, 1 - Максимальное усиление
void Rf96_LNA(uint8_t LNA_value)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegLna,Rf96_LNATbl[LNA_value]);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <Rf96_LNA+0x20>)
 800063a:	5cd3      	ldrb	r3, [r2, r3]
 800063c:	4619      	mov	r1, r3
 800063e:	200c      	movs	r0, #12
 8000640:	f000 fdec 	bl	800121c <SPIWrite>

}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	08005d9c 	.word	0x08005d9c

08000650 <Rf96_bandwide_CR_HeadreMod>:
// Устанавливает несколько параметров: полосу частоты ( signal bandwidth), Coding rate, Мод заголовка (HeaderMod):
// Полоса частоты: 0 - 7.8KHz,1- 10.4KHz,2- 15.6KHz, 3- 20.8KHz,4- 31.2KHz,5- 41.7KHz,6- 62.5KHz,7- 125KHz,8- 250KHz,9- 500KHz
// Coding rate: 1 - 4/5, 2 - 4/6, 3 - 4/7, 4 - 4/8
// Мод заголовка : 0 -  явный, 1 - неявный
void Rf96_bandwide_CR_HeadreMod(uint8_t bandwide_value, uint8_t CR_Value, uint8_t HeaderMod_value)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	460b      	mov	r3, r1
 800065c:	71bb      	strb	r3, [r7, #6]
 800065e:	4613      	mov	r3, r2
 8000660:	717b      	strb	r3, [r7, #5]

	//SPIWrite(LR_RegModemConfig1,(0x00<<4+(CR_Value<<1)+HeaderMod_value));
	SPIWrite(LR_RegModemConfig1,0x8C);
 8000662:	218c      	movs	r1, #140	; 0x8c
 8000664:	201d      	movs	r0, #29
 8000666:	f000 fdd9 	bl	800121c <SPIWrite>
	SPIWrite(LR_RegDetectOptimize,0xC5);
 800066a:	21c5      	movs	r1, #197	; 0xc5
 800066c:	2031      	movs	r0, #49	; 0x31
 800066e:	f000 fdd5 	bl	800121c <SPIWrite>
	SPIWrite(LR_RegDetecionThreshold,0x0C);
 8000672:	210c      	movs	r1, #12
 8000674:	2037      	movs	r0, #55	; 0x37
 8000676:	f000 fdd1 	bl	800121c <SPIWrite>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <Rf96_SF_LoadCRC_SymbTimeout>:
// Устанавливает несколько параметров:
// Spreading factor :  0-6,1-7,2-8,3-9,4-10,5-11,6-12
// payLoadCrcc: Выкл - 0, Вкл - 1
// Таймаут по RX:  Максимальноее значение 3FF, минимальное 0. Можно поставить любое в диапозон 0-3FF
void Rf96_SF_LoadCRC_SymbTimeout(uint8_t SF_value, uint8_t PayloadCrc_value, uint16_t SymbTimeout_value)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	4603      	mov	r3, r0
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	460b      	mov	r3, r1
 800068e:	71bb      	strb	r3, [r7, #6]
 8000690:	4613      	mov	r3, r2
 8000692:	80bb      	strh	r3, [r7, #4]
	//SPIWrite(LR_RegModemConfig2,((Rf96_SpreadFactorTbl[SF_value]<<4)+(PayloadCrc_value<<2)+(SymbTimeout_value>>8)));
	SPIWrite(LR_RegModemConfig2,0x67);
 8000694:	2167      	movs	r1, #103	; 0x67
 8000696:	201e      	movs	r0, #30
 8000698:	f000 fdc0 	bl	800121c <SPIWrite>
	SPIWrite(LR_RegSymbTimeoutLsb,(uint8_t)SymbTimeout_value);
 800069c:	88bb      	ldrh	r3, [r7, #4]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	201f      	movs	r0, #31
 80006a4:	f000 fdba 	bl	800121c <SPIWrite>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <Rf96_Preamble>:
//Устанавливаем длину преамбулы в байтах: 4+PreambLen_value
void Rf96_Preamble(uint16_t PreambLen_value)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	80fb      	strh	r3, [r7, #6]
	SPIWrite(LR_RegPreambleMsb,PreambLen_value>>8);
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	2020      	movs	r0, #32
 80006c6:	f000 fda9 	bl	800121c <SPIWrite>
	SPIWrite(LR_RegPreambleLsb,(uint8_t)PreambLen_value);
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4619      	mov	r1, r3
 80006d0:	2021      	movs	r0, #33	; 0x21
 80006d2:	f000 fda3 	bl	800121c <SPIWrite>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <Rf96_PinOut_Di0_Di1>:
// Настройка вывода Di0 0 - прерывание по приему, 1 - прерывание по передаче, Di1 0- прерывание по таймауту
void Rf96_PinOut_Di0_Di1(uint8_t Di0_value, uint8_t Di1_value)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	4603      	mov	r3, r0
 80006e6:	460a      	mov	r2, r1
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	4613      	mov	r3, r2
 80006ec:	71bb      	strb	r3, [r7, #6]
	SPIWrite(REG_LR_DIOMAPPING1,(Di0_value<<6)+(Di1_value<<4));
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	019b      	lsls	r3, r3, #6
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	2040      	movs	r0, #64	; 0x40
 8000702:	f000 fd8b 	bl	800121c <SPIWrite>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Rf96_irqMaskRX>:
{
	SPIWrite(LR_RegIrqFlagsMask,0xF7);
}
//Снятие маски с прерывания по RX
void Rf96_irqMaskRX(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
	SPIWrite(LR_RegIrqFlagsMask,0x3F);
 8000712:	213f      	movs	r1, #63	; 0x3f
 8000714:	2011      	movs	r0, #17
 8000716:	f000 fd81 	bl	800121c <SPIWrite>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}

0800071e <Rf96_PayloadLength>:
//Установка числа передаваемых данных (в байтах)
void Rf96_PayloadLength(uint8_t LengthBytes_value)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegPayloadLength,LengthBytes_value);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4619      	mov	r1, r3
 800072c:	2022      	movs	r0, #34	; 0x22
 800072e:	f000 fd75 	bl	800121c <SPIWrite>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <Rf96_RX_FifoAdr>:
{
	SPIWrite(LR_RegFifoTxBaseAddr,TX_adr_value);
}
//Установка Адресса  RX в буфере
void Rf96_RX_FifoAdr(uint8_t RX_adr_value)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	71fb      	strb	r3, [r7, #7]
	SPIWrite(LR_RegFifoRxBaseAddr,RX_adr_value);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4619      	mov	r1, r3
 8000748:	200f      	movs	r0, #15
 800074a:	f000 fd67 	bl	800121c <SPIWrite>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <Rf96_FIFO_point>:
// Устанавливает указатель в FIFO
void Rf96_FIFO_point(uint8_t adrPoint_value)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	71fb      	strb	r3, [r7, #7]
	 SPIWrite(LR_RegFifoAddrPtr,adrPoint_value);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4619      	mov	r1, r3
 8000764:	200d      	movs	r0, #13
 8000766:	f000 fd59 	bl	800121c <SPIWrite>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <Rf96_RX_Continuous_mode>:
	//SPIWrite(LR_RegOpMode,0x8E);
	SPIWrite(LR_RegOpMode,0x86);                            		//High Frequency Mode
}
// Вход в режим приема (много пакетный прием)
void Rf96_RX_Continuous_mode(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
	//SPIWrite(LR_RegOpMode,0x8D);
	SPIWrite(LR_RegOpMode,0x85);                            		//High Frequency Mode
 8000776:	2185      	movs	r1, #133	; 0x85
 8000778:	2001      	movs	r0, #1
 800077a:	f000 fd4f 	bl	800121c <SPIWrite>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}

08000782 <Rf96_DataRX_From_FiFO>:
{
	BurstWrite(LR_RegFifo, (uint8_t *)str, LenghtStr);
}
//  Чтение данных RX из FIFO по последнему пришедшему пакету
void Rf96_DataRX_From_FiFO(char* str)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b084      	sub	sp, #16
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;
	addr = SPIRead(LR_RegFifoRxCurrentaddr);
 800078a:	2010      	movs	r0, #16
 800078c:	f000 fd28 	bl	80011e0 <SPIRead>
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]
	SPIWrite(LR_RegFifoAddrPtr,addr);
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	4619      	mov	r1, r3
 8000798:	200d      	movs	r0, #13
 800079a:	f000 fd3f 	bl	800121c <SPIWrite>
	packet_size = SPIRead(LR_RegRxNbBytes);
 800079e:	2013      	movs	r0, #19
 80007a0:	f000 fd1e 	bl	80011e0 <SPIRead>
 80007a4:	4603      	mov	r3, r0
 80007a6:	73bb      	strb	r3, [r7, #14]
	SPIBurstRead(LR_RegFifo, str, packet_size);
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	461a      	mov	r2, r3
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fd58 	bl	8001264 <SPIBurstRead>
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <Rf96_Lora_init>:
// Настройка Rf96
void Rf96_Lora_init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	// Входим в Sleep mode
	Rf96_Sleep();
 80007c0:	f7ff fee6 	bl	8000590 <Rf96_Sleep>
	// Входим в Lora мод
	Rf96_EntryLoRa();
 80007c4:	f7ff feec 	bl	80005a0 <Rf96_EntryLoRa>
	// выбираем несущую частоту
	Rf96_FreqChoose(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fef1 	bl	80005b0 <Rf96_FreqChoose>
	// Выбираем выходную мощность
	Rf96_OutPower(0);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff04 	bl	80005dc <Rf96_OutPower>
	// Выбираем ограничение по току
	Rf96_OCP(0);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ff17 	bl	8000608 <Rf96_OCP>
	// Выбираем LNA
	Rf96_LNA(1);
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff ff26 	bl	800062c <Rf96_LNA>
	// Выбираем полосу частот, Coding rate, и мод заголовка
	Rf96_bandwide_CR_HeadreMod(7,4,0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	2007      	movs	r0, #7
 80007e6:	f7ff ff33 	bl	8000650 <Rf96_bandwide_CR_HeadreMod>
	// Выбираем Spreading factor, включение-выключение loadCRC,Таймаут по RX
	Rf96_SF_LoadCRC_SymbTimeout(6,1,0x3FF);
 80007ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80007ee:	2101      	movs	r1, #1
 80007f0:	2006      	movs	r0, #6
 80007f2:	f7ff ff46 	bl	8000682 <Rf96_SF_LoadCRC_SymbTimeout>
	// Устанавливаем длину преамбулы
	Rf96_Preamble(8);
 80007f6:	2008      	movs	r0, #8
 80007f8:	f7ff ff5a 	bl	80006b0 <Rf96_Preamble>
	// Заходим в StandBy
	Rf96_Standby();
 80007fc:	f7ff fec0 	bl	8000580 <Rf96_Standby>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <Rf96_Lora_RX_mode>:
	  Rf96_FIFO_point(0x80);

}
// Инициализация RX
void Rf96_Lora_RX_mode(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	  //RAK811antRx();
	  SPIWrite(REG_LR_PADAC,0x84);                            //Normal and Rx
 8000808:	2184      	movs	r1, #132	; 0x84
 800080a:	204d      	movs	r0, #77	; 0x4d
 800080c:	f000 fd06 	bl	800121c <SPIWrite>
	  SPIWrite(LR_RegHopPeriod,0xFF);   //??????                       //RegHopPeriod NO FHSS
 8000810:	21ff      	movs	r1, #255	; 0xff
 8000812:	2024      	movs	r0, #36	; 0x24
 8000814:	f000 fd02 	bl	800121c <SPIWrite>

	  // Настройка вывода Di0 на прерывание по приему, Di1 на прерывание по таймауту
	  Rf96_PinOut_Di0_Di1(0,0);
 8000818:	2100      	movs	r1, #0
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff ff5f 	bl	80006de <Rf96_PinOut_Di0_Di1>
	  // Снимаем маску с прерывания по RX
	  Rf96_irqMaskRX();
 8000820:	f7ff ff75 	bl	800070e <Rf96_irqMaskRX>
	  // Сброс всех флагов
	  Rf96_LoRaClearIrq();
 8000824:	f7ff fea4 	bl	8000570 <Rf96_LoRaClearIrq>
	  // Устанавливаем длину передаваемых данных (в байтах)
	  Rf96_PayloadLength(28);
 8000828:	201c      	movs	r0, #28
 800082a:	f7ff ff78 	bl	800071e <Rf96_PayloadLength>
      // Установка адреса RX в буфере FIFO
	  Rf96_RX_FifoAdr(0x00);
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff ff83 	bl	800073a <Rf96_RX_FifoAdr>
	  // Устанавливает указатель на адрес начала массива RX в FIFO
	  Rf96_FIFO_point(0x00);
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff ff8e 	bl	8000756 <Rf96_FIFO_point>
	  // Входим в RX single мод
	//  Rf96_RX_Single_mode();
	  Rf96_RX_Continuous_mode();
 800083a:	f7ff ff9a 	bl	8000772 <Rf96_RX_Continuous_mode>

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <Crc8>:
    0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
    0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC
};

unsigned char Crc8(unsigned char *pcBlock, unsigned char len)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
    unsigned char crc = 0xFF;
 8000850:	23ff      	movs	r3, #255	; 0xff
 8000852:	73fb      	strb	r3, [r7, #15]

    while (len--)
 8000854:	e00a      	b.n	800086c <Crc8+0x28>
        crc = Crc8Table[crc ^ *pcBlock++];
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	4053      	eors	r3, r2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	461a      	mov	r2, r3
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <Crc8+0x40>)
 8000868:	5c9b      	ldrb	r3, [r3, r2]
 800086a:	73fb      	strb	r3, [r7, #15]
    while (len--)
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	70fa      	strb	r2, [r7, #3]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1ef      	bne.n	8000856 <Crc8+0x12>

    return crc;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	08005da0 	.word	0x08005da0

08000888 <transmit>:


void transmit(uint8_t str[27])
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af08      	add	r7, sp, #32
 800088e:	6078      	str	r0, [r7, #4]
			//0x68 - команда возврата данных с акселерометра
//			if(str[3] == 0x84)
//			{
				// первый акселерометр
				// Ось Х
				xIntSumFirst = (str[0] & 0x0F) * 10 + (str[1] >> 4); // целочисленная сумма X
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	f003 020f 	and.w	r2, r3, #15
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4413      	add	r3, r2
 80008ae:	4aa3      	ldr	r2, [pc, #652]	; (8000b3c <transmit+0x2b4>)
 80008b0:	6013      	str	r3, [r2, #0]
				//xSum = (str[5] & 0x0F) * 100 + (str[6] >> 4) * 10 + (str[6] & 0x0F);//цифры после запятой Х
				x5First = str[1] & 0x0F; //перевод правого бита 5го байта
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	f003 030f 	and.w	r3, r3, #15
 80008bc:	4aa0      	ldr	r2, [pc, #640]	; (8000b40 <transmit+0x2b8>)
 80008be:	6013      	str	r3, [r2, #0]
				x60First = str[2] >> 4; //перевод левого бита 6го байта
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3302      	adds	r3, #2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	091b      	lsrs	r3, r3, #4
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b9d      	ldr	r3, [pc, #628]	; (8000b44 <transmit+0x2bc>)
 80008ce:	601a      	str	r2, [r3, #0]
				x65First = str[2] & 0x0F; //перевод правого бита 6го байта
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3302      	adds	r3, #2
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	4a9b      	ldr	r2, [pc, #620]	; (8000b48 <transmit+0x2c0>)
 80008dc:	6013      	str	r3, [r2, #0]
				sprintf(xvalFirst, "+%02d.%d%d ",xIntSumFirst, x5First, x60First);
 80008de:	4b97      	ldr	r3, [pc, #604]	; (8000b3c <transmit+0x2b4>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b97      	ldr	r3, [pc, #604]	; (8000b40 <transmit+0x2b8>)
 80008e4:	6819      	ldr	r1, [r3, #0]
 80008e6:	4b97      	ldr	r3, [pc, #604]	; (8000b44 <transmit+0x2bc>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	460b      	mov	r3, r1
 80008ee:	4997      	ldr	r1, [pc, #604]	; (8000b4c <transmit+0x2c4>)
 80008f0:	4897      	ldr	r0, [pc, #604]	; (8000b50 <transmit+0x2c8>)
 80008f2:	f004 fe27 	bl	8005544 <siprintf>
				if((str[0] >> 4) == 0x01)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	091b      	lsrs	r3, r3, #4
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d102      	bne.n	8000908 <transmit+0x80>
					xvalFirst[0] = '-';
 8000902:	4b93      	ldr	r3, [pc, #588]	; (8000b50 <transmit+0x2c8>)
 8000904:	222d      	movs	r2, #45	; 0x2d
 8000906:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumFirst = (str[3] & 0x0F) * 10 + (str[4] >> 4);	// целочисленная сумма Y
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3303      	adds	r3, #3
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	f003 020f 	and.w	r2, r3, #15
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	461a      	mov	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3304      	adds	r3, #4
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	091b      	lsrs	r3, r3, #4
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4413      	add	r3, r2
 8000928:	4a8a      	ldr	r2, [pc, #552]	; (8000b54 <transmit+0x2cc>)
 800092a:	6013      	str	r3, [r2, #0]
				//ySum = (str[8] & 0x0F) * 100 + (str[9] >> 4) * 10 + (str[9] & 0x0F); //цифры после запятой Y
				y8First = str[4] & 0x0F; //перевод правого бита 8го байта
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3304      	adds	r3, #4
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	4a88      	ldr	r2, [pc, #544]	; (8000b58 <transmit+0x2d0>)
 8000938:	6013      	str	r3, [r2, #0]
				y90First = str[5] >> 4; //перевод левого бита 9го байта
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3305      	adds	r3, #5
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	091b      	lsrs	r3, r3, #4
 8000942:	b2db      	uxtb	r3, r3
 8000944:	461a      	mov	r2, r3
 8000946:	4b85      	ldr	r3, [pc, #532]	; (8000b5c <transmit+0x2d4>)
 8000948:	601a      	str	r2, [r3, #0]
				y95First = str[5] & 0x0F; //перевод правого бита 9го байта
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3305      	adds	r3, #5
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	f003 030f 	and.w	r3, r3, #15
 8000954:	4a82      	ldr	r2, [pc, #520]	; (8000b60 <transmit+0x2d8>)
 8000956:	6013      	str	r3, [r2, #0]
				sprintf(yvalFirst, "+%02d.%d%d ", yIntSumFirst, y8First, y90First);
 8000958:	4b7e      	ldr	r3, [pc, #504]	; (8000b54 <transmit+0x2cc>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b7e      	ldr	r3, [pc, #504]	; (8000b58 <transmit+0x2d0>)
 800095e:	6819      	ldr	r1, [r3, #0]
 8000960:	4b7e      	ldr	r3, [pc, #504]	; (8000b5c <transmit+0x2d4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	460b      	mov	r3, r1
 8000968:	4978      	ldr	r1, [pc, #480]	; (8000b4c <transmit+0x2c4>)
 800096a:	487e      	ldr	r0, [pc, #504]	; (8000b64 <transmit+0x2dc>)
 800096c:	f004 fdea 	bl	8005544 <siprintf>
				if((str[3] >> 4) == 0x01)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3303      	adds	r3, #3
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b01      	cmp	r3, #1
 800097c:	d102      	bne.n	8000984 <transmit+0xfc>
					yvalFirst[0] = '-';
 800097e:	4b79      	ldr	r3, [pc, #484]	; (8000b64 <transmit+0x2dc>)
 8000980:	222d      	movs	r2, #45	; 0x2d
 8000982:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumFirst = (str[6] & 0x0F) * 10 + (str[7] >> 4); //целочисленная сумма Z
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3306      	adds	r3, #6
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	f003 020f 	and.w	r2, r3, #15
 800098e:	4613      	mov	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	461a      	mov	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3307      	adds	r3, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4413      	add	r3, r2
 80009a4:	4a70      	ldr	r2, [pc, #448]	; (8000b68 <transmit+0x2e0>)
 80009a6:	6013      	str	r3, [r2, #0]
				//zSum = (str[11] & 0x0F) * 100 + (str[12] >> 4) * 10 + (str[12] & 0x0F); //цифры после запятой Z
				z11First = str[7] & 0x0F; //перевод правого бита 11го байта
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3307      	adds	r3, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	4a6e      	ldr	r2, [pc, #440]	; (8000b6c <transmit+0x2e4>)
 80009b4:	6013      	str	r3, [r2, #0]
				z120First = str[8] >> 4; //перевод левого бита 12го байта
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3308      	adds	r3, #8
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	091b      	lsrs	r3, r3, #4
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b6b      	ldr	r3, [pc, #428]	; (8000b70 <transmit+0x2e8>)
 80009c4:	601a      	str	r2, [r3, #0]
				z125First = str[8] & 0x0F; //перевод правого бита 12го байта
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3308      	adds	r3, #8
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	f003 030f 	and.w	r3, r3, #15
 80009d0:	4a68      	ldr	r2, [pc, #416]	; (8000b74 <transmit+0x2ec>)
 80009d2:	6013      	str	r3, [r2, #0]
				sprintf(zvalFirst, "+%02d.%d%d ", zIntSumFirst, z11First, z120First);
 80009d4:	4b64      	ldr	r3, [pc, #400]	; (8000b68 <transmit+0x2e0>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b64      	ldr	r3, [pc, #400]	; (8000b6c <transmit+0x2e4>)
 80009da:	6819      	ldr	r1, [r3, #0]
 80009dc:	4b64      	ldr	r3, [pc, #400]	; (8000b70 <transmit+0x2e8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	460b      	mov	r3, r1
 80009e4:	4959      	ldr	r1, [pc, #356]	; (8000b4c <transmit+0x2c4>)
 80009e6:	4864      	ldr	r0, [pc, #400]	; (8000b78 <transmit+0x2f0>)
 80009e8:	f004 fdac 	bl	8005544 <siprintf>
				if((str[6] >> 4) == 0x01)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3306      	adds	r3, #6
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	091b      	lsrs	r3, r3, #4
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d102      	bne.n	8000a00 <transmit+0x178>
					zvalFirst[0] = '-';
 80009fa:	4b5f      	ldr	r3, [pc, #380]	; (8000b78 <transmit+0x2f0>)
 80009fc:	222d      	movs	r2, #45	; 0x2d
 80009fe:	701a      	strb	r2, [r3, #0]

				// второй акселерометр
				// Ось Х
				xIntSumSecond = (str[9] & 0x0F) * 10 + (str[10] >> 4); // целочисленная сумма X
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3309      	adds	r3, #9
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	f003 020f 	and.w	r2, r3, #15
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	461a      	mov	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	330a      	adds	r3, #10
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	091b      	lsrs	r3, r3, #4
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a56      	ldr	r2, [pc, #344]	; (8000b7c <transmit+0x2f4>)
 8000a22:	6013      	str	r3, [r2, #0]
				//xSum = (str[5] & 0x0F) * 100 + (str[6] >> 4) * 10 + (str[6] & 0x0F);//цифры после запятой Х
				x5Second = str[10] & 0x0F; //перевод правого бита 5го байта
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	330a      	adds	r3, #10
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	4a54      	ldr	r2, [pc, #336]	; (8000b80 <transmit+0x2f8>)
 8000a30:	6013      	str	r3, [r2, #0]
				x60Second = str[11] >> 4; //перевод левого бита 6го байта
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	330b      	adds	r3, #11
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b51      	ldr	r3, [pc, #324]	; (8000b84 <transmit+0x2fc>)
 8000a40:	601a      	str	r2, [r3, #0]
				x65Second = str[11] & 0x0F; //перевод правого бита 6го байта
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	330b      	adds	r3, #11
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	f003 030f 	and.w	r3, r3, #15
 8000a4c:	4a4e      	ldr	r2, [pc, #312]	; (8000b88 <transmit+0x300>)
 8000a4e:	6013      	str	r3, [r2, #0]
				sprintf(xvalSecond, "+%02d.%d%d ",xIntSumSecond, x5Second, x60Second);
 8000a50:	4b4a      	ldr	r3, [pc, #296]	; (8000b7c <transmit+0x2f4>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b4a      	ldr	r3, [pc, #296]	; (8000b80 <transmit+0x2f8>)
 8000a56:	6819      	ldr	r1, [r3, #0]
 8000a58:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <transmit+0x2fc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	493a      	ldr	r1, [pc, #232]	; (8000b4c <transmit+0x2c4>)
 8000a62:	484a      	ldr	r0, [pc, #296]	; (8000b8c <transmit+0x304>)
 8000a64:	f004 fd6e 	bl	8005544 <siprintf>
				if((str[9] >> 4) == 0x01)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3309      	adds	r3, #9
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	091b      	lsrs	r3, r3, #4
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d102      	bne.n	8000a7c <transmit+0x1f4>
					xvalSecond[0] = '-';
 8000a76:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <transmit+0x304>)
 8000a78:	222d      	movs	r2, #45	; 0x2d
 8000a7a:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumSecond = (str[12] & 0x0F) * 10 + (str[13] >> 4);	// целочисленная сумма Y
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	330c      	adds	r3, #12
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f003 020f 	and.w	r2, r3, #15
 8000a86:	4613      	mov	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4413      	add	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	330d      	adds	r3, #13
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a3c      	ldr	r2, [pc, #240]	; (8000b90 <transmit+0x308>)
 8000a9e:	6013      	str	r3, [r2, #0]
				//ySum = (str[8] & 0x0F) * 100 + (str[9] >> 4) * 10 + (str[9] & 0x0F); //цифры после запятой Y
				y8Second = str[13] & 0x0F; //перевод правого бита 8го байта
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	330d      	adds	r3, #13
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	4a3a      	ldr	r2, [pc, #232]	; (8000b94 <transmit+0x30c>)
 8000aac:	6013      	str	r3, [r2, #0]
				y90Second = str[14] >> 4; //перевод левого бита 9го байта
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	330e      	adds	r3, #14
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	091b      	lsrs	r3, r3, #4
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <transmit+0x310>)
 8000abc:	601a      	str	r2, [r3, #0]
				y95Second = str[14] & 0x0F; //перевод правого бита 9го байта
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	330e      	adds	r3, #14
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	4a34      	ldr	r2, [pc, #208]	; (8000b9c <transmit+0x314>)
 8000aca:	6013      	str	r3, [r2, #0]
				sprintf(yvalSecond, "+%02d.%d%d ", yIntSumSecond, y8Second, y90Second);
 8000acc:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <transmit+0x308>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <transmit+0x30c>)
 8000ad2:	6819      	ldr	r1, [r3, #0]
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <transmit+0x310>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	460b      	mov	r3, r1
 8000adc:	491b      	ldr	r1, [pc, #108]	; (8000b4c <transmit+0x2c4>)
 8000ade:	4830      	ldr	r0, [pc, #192]	; (8000ba0 <transmit+0x318>)
 8000ae0:	f004 fd30 	bl	8005544 <siprintf>
				if((str[12] >> 4) == 0x01)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	330c      	adds	r3, #12
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d102      	bne.n	8000af8 <transmit+0x270>
					yvalSecond[0] = '-';
 8000af2:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <transmit+0x318>)
 8000af4:	222d      	movs	r2, #45	; 0x2d
 8000af6:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumSecond = (str[15] & 0x0F) * 10 + (str[16] >> 4); //целочисленная сумма Z
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	330f      	adds	r3, #15
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	f003 020f 	and.w	r2, r3, #15
 8000b02:	4613      	mov	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3310      	adds	r3, #16
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	091b      	lsrs	r3, r3, #4
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4413      	add	r3, r2
 8000b18:	4a22      	ldr	r2, [pc, #136]	; (8000ba4 <transmit+0x31c>)
 8000b1a:	6013      	str	r3, [r2, #0]
				//zSum = (str[11] & 0x0F) * 100 + (str[12] >> 4) * 10 + (str[12] & 0x0F); //цифры после запятой Z
				z11Second = str[16] & 0x0F; //перевод правого бита 11го байта
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3310      	adds	r3, #16
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <transmit+0x320>)
 8000b28:	6013      	str	r3, [r2, #0]
				z120Second = str[17] >> 4; //перевод левого бита 12го байта
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3311      	adds	r3, #17
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	091b      	lsrs	r3, r3, #4
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <transmit+0x324>)
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	e039      	b.n	8000bb0 <transmit+0x328>
 8000b3c:	20000310 	.word	0x20000310
 8000b40:	200001f0 	.word	0x200001f0
 8000b44:	20000304 	.word	0x20000304
 8000b48:	200001fc 	.word	0x200001fc
 8000b4c:	08005d68 	.word	0x08005d68
 8000b50:	200000bc 	.word	0x200000bc
 8000b54:	20000190 	.word	0x20000190
 8000b58:	20000194 	.word	0x20000194
 8000b5c:	200000d0 	.word	0x200000d0
 8000b60:	20000138 	.word	0x20000138
 8000b64:	200000d4 	.word	0x200000d4
 8000b68:	20000204 	.word	0x20000204
 8000b6c:	20000120 	.word	0x20000120
 8000b70:	200000e0 	.word	0x200000e0
 8000b74:	200001f8 	.word	0x200001f8
 8000b78:	20000208 	.word	0x20000208
 8000b7c:	2000018c 	.word	0x2000018c
 8000b80:	20000308 	.word	0x20000308
 8000b84:	200000dc 	.word	0x200000dc
 8000b88:	20000188 	.word	0x20000188
 8000b8c:	200000a0 	.word	0x200000a0
 8000b90:	20000134 	.word	0x20000134
 8000b94:	200001f4 	.word	0x200001f4
 8000b98:	20000278 	.word	0x20000278
 8000b9c:	2000009c 	.word	0x2000009c
 8000ba0:	20000198 	.word	0x20000198
 8000ba4:	20000098 	.word	0x20000098
 8000ba8:	20000318 	.word	0x20000318
 8000bac:	20000124 	.word	0x20000124
				z125Second = str[17] & 0x0F; //перевод правого бита 12го байта
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3311      	adds	r3, #17
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	4a79      	ldr	r2, [pc, #484]	; (8000da0 <transmit+0x518>)
 8000bbc:	6013      	str	r3, [r2, #0]
				sprintf(zvalSecond, "+%02d.%d%d ", zIntSumSecond, z11Second, z120Second);
 8000bbe:	4b79      	ldr	r3, [pc, #484]	; (8000da4 <transmit+0x51c>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b79      	ldr	r3, [pc, #484]	; (8000da8 <transmit+0x520>)
 8000bc4:	6819      	ldr	r1, [r3, #0]
 8000bc6:	4b79      	ldr	r3, [pc, #484]	; (8000dac <transmit+0x524>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4978      	ldr	r1, [pc, #480]	; (8000db0 <transmit+0x528>)
 8000bd0:	4878      	ldr	r0, [pc, #480]	; (8000db4 <transmit+0x52c>)
 8000bd2:	f004 fcb7 	bl	8005544 <siprintf>
				if((str[15] >> 4) == 0x01)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	330f      	adds	r3, #15
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	091b      	lsrs	r3, r3, #4
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d102      	bne.n	8000bea <transmit+0x362>
					zvalSecond[0] = '-';
 8000be4:	4b73      	ldr	r3, [pc, #460]	; (8000db4 <transmit+0x52c>)
 8000be6:	222d      	movs	r2, #45	; 0x2d
 8000be8:	701a      	strb	r2, [r3, #0]

				// третий акселерометр
				// Ось Х
				xIntSumThird = (str[18] & 0x0F) * 10 + (str[19] >> 4); // целочисленная сумма X
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3312      	adds	r3, #18
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f003 020f 	and.w	r2, r3, #15
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3313      	adds	r3, #19
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	091b      	lsrs	r3, r3, #4
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a6b      	ldr	r2, [pc, #428]	; (8000db8 <transmit+0x530>)
 8000c0c:	6013      	str	r3, [r2, #0]
				//xSum = (str[5] & 0x0F) * 100 + (str[6] >> 4) * 10 + (str[6] & 0x0F);//цифры после запятой Х
				x5Third = str[19] & 0x0F; //перевод правого бита 5го байта
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3313      	adds	r3, #19
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	f003 030f 	and.w	r3, r3, #15
 8000c18:	4a68      	ldr	r2, [pc, #416]	; (8000dbc <transmit+0x534>)
 8000c1a:	6013      	str	r3, [r2, #0]
				x60Third = str[20] >> 4; //перевод левого бита 6го байта
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3314      	adds	r3, #20
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b65      	ldr	r3, [pc, #404]	; (8000dc0 <transmit+0x538>)
 8000c2a:	601a      	str	r2, [r3, #0]
				x65Third = str[20] & 0x0F; //перевод правого бита 6го байта
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3314      	adds	r3, #20
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	4a63      	ldr	r2, [pc, #396]	; (8000dc4 <transmit+0x53c>)
 8000c38:	6013      	str	r3, [r2, #0]
				sprintf(xvalThird, "+%02d.%d%d ",xIntSumThird, x5Third, x60Third);
 8000c3a:	4b5f      	ldr	r3, [pc, #380]	; (8000db8 <transmit+0x530>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b5f      	ldr	r3, [pc, #380]	; (8000dbc <transmit+0x534>)
 8000c40:	6819      	ldr	r1, [r3, #0]
 8000c42:	4b5f      	ldr	r3, [pc, #380]	; (8000dc0 <transmit+0x538>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	4959      	ldr	r1, [pc, #356]	; (8000db0 <transmit+0x528>)
 8000c4c:	485e      	ldr	r0, [pc, #376]	; (8000dc8 <transmit+0x540>)
 8000c4e:	f004 fc79 	bl	8005544 <siprintf>
				if((str[18] >> 4) == 0x01)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3312      	adds	r3, #18
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d102      	bne.n	8000c66 <transmit+0x3de>
					xvalThird[0] = '-';
 8000c60:	4b59      	ldr	r3, [pc, #356]	; (8000dc8 <transmit+0x540>)
 8000c62:	222d      	movs	r2, #45	; 0x2d
 8000c64:	701a      	strb	r2, [r3, #0]

				// Ось Y
				yIntSumThird = (str[21] & 0x0F) * 10 + (str[22] >> 4);	// целочисленная сумма Y
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3315      	adds	r3, #21
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f003 020f 	and.w	r2, r3, #15
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	461a      	mov	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3316      	adds	r3, #22
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	091b      	lsrs	r3, r3, #4
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	4413      	add	r3, r2
 8000c86:	4a51      	ldr	r2, [pc, #324]	; (8000dcc <transmit+0x544>)
 8000c88:	6013      	str	r3, [r2, #0]
				//ySum = (str[8] & 0x0F) * 100 + (str[9] >> 4) * 10 + (str[9] & 0x0F); //цифры после запятой Y
				y8Third = str[22] & 0x0F; //перевод правого бита 8го байта
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3316      	adds	r3, #22
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f003 030f 	and.w	r3, r3, #15
 8000c94:	4a4e      	ldr	r2, [pc, #312]	; (8000dd0 <transmit+0x548>)
 8000c96:	6013      	str	r3, [r2, #0]
				y90Third = str[23] >> 4; //перевод левого бита 9го байта
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3317      	adds	r3, #23
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b4b      	ldr	r3, [pc, #300]	; (8000dd4 <transmit+0x54c>)
 8000ca6:	601a      	str	r2, [r3, #0]
				y95Third = str[23] & 0x0F; //перевод правого бита 9го байта
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3317      	adds	r3, #23
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	4a49      	ldr	r2, [pc, #292]	; (8000dd8 <transmit+0x550>)
 8000cb4:	6013      	str	r3, [r2, #0]
				sprintf(yvalThird, "+%02d.%d%d ", yIntSumThird, y8Third, y90Third);
 8000cb6:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <transmit+0x544>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b45      	ldr	r3, [pc, #276]	; (8000dd0 <transmit+0x548>)
 8000cbc:	6819      	ldr	r1, [r3, #0]
 8000cbe:	4b45      	ldr	r3, [pc, #276]	; (8000dd4 <transmit+0x54c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	493a      	ldr	r1, [pc, #232]	; (8000db0 <transmit+0x528>)
 8000cc8:	4844      	ldr	r0, [pc, #272]	; (8000ddc <transmit+0x554>)
 8000cca:	f004 fc3b 	bl	8005544 <siprintf>
				if((str[21] >> 4) == 0x01)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3315      	adds	r3, #21
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	091b      	lsrs	r3, r3, #4
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d102      	bne.n	8000ce2 <transmit+0x45a>
					yvalThird[0] = '-';
 8000cdc:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <transmit+0x554>)
 8000cde:	222d      	movs	r2, #45	; 0x2d
 8000ce0:	701a      	strb	r2, [r3, #0]

				// Ось Z
				zIntSumThird = (str[24] & 0x0F) * 10 + (str[25] >> 4); //целочисленная сумма Z
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3318      	adds	r3, #24
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	f003 020f 	and.w	r2, r3, #15
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3319      	adds	r3, #25
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	4a37      	ldr	r2, [pc, #220]	; (8000de0 <transmit+0x558>)
 8000d04:	6013      	str	r3, [r2, #0]
				//zSum = (str[11] & 0x0F) * 100 + (str[12] >> 4) * 10 + (str[12] & 0x0F); //цифры после запятой Z
				z11Third = str[25] & 0x0F; //перевод правого бита 11го байта
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3319      	adds	r3, #25
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	f003 030f 	and.w	r3, r3, #15
 8000d10:	4a34      	ldr	r2, [pc, #208]	; (8000de4 <transmit+0x55c>)
 8000d12:	6013      	str	r3, [r2, #0]
				z120Third = str[26] >> 4; //перевод левого бита 12го байта
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	331a      	adds	r3, #26
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <transmit+0x560>)
 8000d22:	601a      	str	r2, [r3, #0]
				z125Third = str[26] & 0x0F; //перевод правого бита 12го байта
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	331a      	adds	r3, #26
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <transmit+0x564>)
 8000d30:	6013      	str	r3, [r2, #0]
				sprintf(zvalThird, "+%02d.%d%d ", zIntSumThird, z11Third, z120Third);
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <transmit+0x558>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <transmit+0x55c>)
 8000d38:	6819      	ldr	r1, [r3, #0]
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <transmit+0x560>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	460b      	mov	r3, r1
 8000d42:	491b      	ldr	r1, [pc, #108]	; (8000db0 <transmit+0x528>)
 8000d44:	482a      	ldr	r0, [pc, #168]	; (8000df0 <transmit+0x568>)
 8000d46:	f004 fbfd 	bl	8005544 <siprintf>
				if((str[24] >> 4) == 0x01)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3318      	adds	r3, #24
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	091b      	lsrs	r3, r3, #4
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d102      	bne.n	8000d5e <transmit+0x4d6>
					zvalThird[0] = '-';
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <transmit+0x568>)
 8000d5a:	222d      	movs	r2, #45	; 0x2d
 8000d5c:	701a      	strb	r2, [r3, #0]
//			}
//		}
		sprintf(str1, "%s%s%s%s%s%s%s%s%s\n", xvalFirst, yvalFirst, zvalFirst, xvalSecond, yvalSecond, zvalSecond, xvalThird, yvalThird, zvalThird);
 8000d5e:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <transmit+0x568>)
 8000d60:	9306      	str	r3, [sp, #24]
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <transmit+0x554>)
 8000d64:	9305      	str	r3, [sp, #20]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <transmit+0x540>)
 8000d68:	9304      	str	r3, [sp, #16]
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <transmit+0x52c>)
 8000d6c:	9303      	str	r3, [sp, #12]
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <transmit+0x56c>)
 8000d70:	9302      	str	r3, [sp, #8]
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <transmit+0x570>)
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <transmit+0x574>)
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <transmit+0x578>)
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <transmit+0x57c>)
 8000d7e:	4922      	ldr	r1, [pc, #136]	; (8000e08 <transmit+0x580>)
 8000d80:	4822      	ldr	r0, [pc, #136]	; (8000e0c <transmit+0x584>)
 8000d82:	f004 fbdf 	bl	8005544 <siprintf>
	HAL_UART_Abort(&huart2);
 8000d86:	4822      	ldr	r0, [pc, #136]	; (8000e10 <transmit+0x588>)
 8000d88:	f003 fc1a 	bl	80045c0 <HAL_UART_Abort>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)str1, 64);
 8000d8c:	2240      	movs	r2, #64	; 0x40
 8000d8e:	491f      	ldr	r1, [pc, #124]	; (8000e0c <transmit+0x584>)
 8000d90:	481f      	ldr	r0, [pc, #124]	; (8000e10 <transmit+0x588>)
 8000d92:	f003 fbb9 	bl	8004508 <HAL_UART_Transmit_IT>



	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
	//HAL_UART_Transmit_IT(&huart3, accelSelect[accelNum], 5);
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000a8 	.word	0x200000a8
 8000da4:	20000098 	.word	0x20000098
 8000da8:	20000318 	.word	0x20000318
 8000dac:	20000124 	.word	0x20000124
 8000db0:	08005d68 	.word	0x08005d68
 8000db4:	20000128 	.word	0x20000128
 8000db8:	20000314 	.word	0x20000314
 8000dbc:	20000184 	.word	0x20000184
 8000dc0:	200000c8 	.word	0x200000c8
 8000dc4:	200001a0 	.word	0x200001a0
 8000dc8:	2000027c 	.word	0x2000027c
 8000dcc:	20000200 	.word	0x20000200
 8000dd0:	20000130 	.word	0x20000130
 8000dd4:	200000b4 	.word	0x200000b4
 8000dd8:	200000c4 	.word	0x200000c4
 8000ddc:	200000ac 	.word	0x200000ac
 8000de0:	2000030c 	.word	0x2000030c
 8000de4:	200000b8 	.word	0x200000b8
 8000de8:	20000210 	.word	0x20000210
 8000dec:	200000cc 	.word	0x200000cc
 8000df0:	200001e8 	.word	0x200001e8
 8000df4:	20000198 	.word	0x20000198
 8000df8:	200000a0 	.word	0x200000a0
 8000dfc:	20000208 	.word	0x20000208
 8000e00:	200000d4 	.word	0x200000d4
 8000e04:	200000bc 	.word	0x200000bc
 8000e08:	08005d74 	.word	0x08005d74
 8000e0c:	200001a4 	.word	0x200001a4
 8000e10:	20000284 	.word	0x20000284

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e18:	f000 fc36 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1c:	f000 f830 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e20:	f000 f930 	bl	8001084 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e24:	f000 f910 	bl	8001048 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e28:	f000 f8de 	bl	8000fe8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000e2c:	f000 f89e 	bl	8000f6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2101      	movs	r1, #1
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f001 f962 	bl	8002100 <HAL_GPIO_WritePin>
  Rf96_Lora_init();
 8000e3c:	f7ff fcbe 	bl	80007bc <Rf96_Lora_init>
  Rf96_Lora_RX_mode();
 8000e40:	f7ff fce0 	bl	8000804 <Rf96_Lora_RX_mode>
	  	 		  Rf96_Lora_RX_mode();
	  	 		  //Rf96_LoRaRxPacket((char*)TX_RX_Radio);

	  	 	  }
*/
	  if(Get_NIRQ_Di0()) // Прерывание по приему по радиоканалу
 8000e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f001 f940 	bl	80020d0 <HAL_GPIO_ReadPin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f6      	beq.n	8000e44 <main+0x30>
	  	 	 {
	  	 	    //  Rf96_LoRaRxPacket((char*)TX_RX_Radio);
	  	 	   Rf96_DataRX_From_FiFO((char*)TX_RX_Radio);
 8000e56:	4809      	ldr	r0, [pc, #36]	; (8000e7c <main+0x68>)
 8000e58:	f7ff fc93 	bl	8000782 <Rf96_DataRX_From_FiFO>
	  	 	   Rf96_LoRaClearIrq();
 8000e5c:	f7ff fb88 	bl	8000570 <Rf96_LoRaClearIrq>
	  	 	//TX_RX_Radio[28]='\n';

	  	 	//str1[0]='1';
	  	 	//str1[1]='\n';
	  	 //	HAL_UART_Transmit_IT(&huart2, (uint8_t*)str1, 2);
            if(Crc8(TX_RX_Radio,27)==TX_RX_Radio[27])
 8000e60:	211b      	movs	r1, #27
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <main+0x68>)
 8000e64:	f7ff fcee 	bl	8000844 <Crc8>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <main+0x68>)
 8000e6e:	7edb      	ldrb	r3, [r3, #27]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d1e7      	bne.n	8000e44 <main+0x30>
            {
            	transmit(TX_RX_Radio);
 8000e74:	4801      	ldr	r0, [pc, #4]	; (8000e7c <main+0x68>)
 8000e76:	f7ff fd07 	bl	8000888 <transmit>
	  if(Get_NIRQ_Di0()) // Прерывание по приему по радиоканалу
 8000e7a:	e7e3      	b.n	8000e44 <main+0x30>
 8000e7c:	200000e4 	.word	0x200000e4

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0b8      	sub	sp, #224	; 0xe0
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e8a:	2244      	movs	r2, #68	; 0x44
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f004 fb50 	bl	8005534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2288      	movs	r2, #136	; 0x88
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f004 fb42 	bl	8005534 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ed6:	230a      	movs	r3, #10
 8000ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000edc:	2307      	movs	r3, #7
 8000ede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 f980 	bl	80021f8 <HAL_RCC_OscConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000efe:	f000 f943 	bl	8001188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f02:	230f      	movs	r3, #15
 8000f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f20:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f24:	2104      	movs	r1, #4
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fd4c 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f32:	f000 f929 	bl	8001188 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3e:	463b      	mov	r3, r7
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 ff43 	bl	8002dcc <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000f4c:	f000 f91c 	bl	8001188 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f50:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f54:	f001 f8fa 	bl	800214c <HAL_PWREx_ControlVoltageScaling>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000f5e:	f000 f913 	bl	8001188 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	37e0      	adds	r7, #224	; 0xe0
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <MX_SPI1_Init+0x78>)
 8000f74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fba:	2207      	movs	r2, #7
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fcc:	f002 fbae 	bl	800372c <HAL_SPI_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fd6:	f000 f8d7 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000214 	.word	0x20000214
 8000fe4:	40013000 	.word	0x40013000

08000fe8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_USART2_UART_Init+0x58>)
 8000fee:	4a15      	ldr	r2, [pc, #84]	; (8001044 <MX_USART2_UART_Init+0x5c>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_USART2_UART_Init+0x58>)
 8000ff4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000ff8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_USART2_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART2_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART2_UART_Init+0x58>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART2_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART2_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART2_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART2_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART2_UART_Init+0x58>)
 800102c:	f003 fa1e 	bl	800446c <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001036:	f000 f8a7 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000284 	.word	0x20000284
 8001044:	40004400 	.word	0x40004400

08001048 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_DMA_Init+0x38>)
 8001050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <MX_DMA_Init+0x38>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6493      	str	r3, [r2, #72]	; 0x48
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_DMA_Init+0x38>)
 800105c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2011      	movs	r0, #17
 800106c:	f000 fc5f 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001070:	2011      	movs	r0, #17
 8001072:	f000 fc78 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <MX_GPIO_Init+0xf4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4a36      	ldr	r2, [pc, #216]	; (8001178 <MX_GPIO_Init+0xf4>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4b34      	ldr	r3, [pc, #208]	; (8001178 <MX_GPIO_Init+0xf4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b2:	4b31      	ldr	r3, [pc, #196]	; (8001178 <MX_GPIO_Init+0xf4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a30      	ldr	r2, [pc, #192]	; (8001178 <MX_GPIO_Init+0xf4>)
 80010b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <MX_GPIO_Init+0xf4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <MX_GPIO_Init+0xf4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a2a      	ldr	r2, [pc, #168]	; (8001178 <MX_GPIO_Init+0xf4>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b28      	ldr	r3, [pc, #160]	; (8001178 <MX_GPIO_Init+0xf4>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <MX_GPIO_Init+0xf4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a24      	ldr	r2, [pc, #144]	; (8001178 <MX_GPIO_Init+0xf4>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <MX_GPIO_Init+0xf4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	481f      	ldr	r0, [pc, #124]	; (800117c <MX_GPIO_Init+0xf8>)
 8001100:	f000 fffe 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <MX_GPIO_Init+0xfc>)
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	481a      	ldr	r0, [pc, #104]	; (8001184 <MX_GPIO_Init+0x100>)
 800111a:	f000 fe31 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 800111e:	f240 4301 	movw	r3, #1025	; 0x401
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f000 fe23 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800113a:	2338      	movs	r3, #56	; 0x38
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <MX_GPIO_Init+0xf8>)
 800114e:	f000 fe17 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001152:	2340      	movs	r3, #64	; 0x40
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_GPIO_Init+0xf8>)
 800116a:	f000 fe09 	bl	8001d80 <HAL_GPIO_Init>

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	48000400 	.word	0x48000400
 8001180:	10210000 	.word	0x10210000
 8001184:	48000800 	.word	0x48000800

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <SPICmd8bit>:
**Input:    WrPara
**Output:   none
**note:     use for burst mode
**********************************************************/
void SPICmd8bit(uint8_t WrPara)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	//NSS_L();
  HAL_SPI_Transmit(&hspi1,&WrPara,sizeof(WrPara),10);
 80011a2:	1df9      	adds	r1, r7, #7
 80011a4:	230a      	movs	r3, #10
 80011a6:	2201      	movs	r2, #1
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <SPICmd8bit+0x20>)
 80011aa:	f002 fb49 	bl	8003840 <HAL_SPI_Transmit>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000214 	.word	0x20000214

080011bc <SPIRead8bit>:
**Input:    None
**Output:   result byte
**Note:     use for burst mode
**********************************************************/
uint8_t SPIRead8bit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 uint8_t RdPara = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	71fb      	strb	r3, [r7, #7]
 //NSS_L();
 HAL_SPI_Receive(&hspi1,&RdPara,sizeof(RdPara),10);
 80011c6:	1df9      	adds	r1, r7, #7
 80011c8:	230a      	movs	r3, #10
 80011ca:	2201      	movs	r2, #1
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <SPIRead8bit+0x20>)
 80011ce:	f002 fc9d 	bl	8003b0c <HAL_SPI_Receive>

  return(RdPara);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000214 	.word	0x20000214

080011e0 <SPIRead>:
**Function: SPI Read CMD
**Input:    adr -> address for read
**Output:   None
**********************************************************/
uint8_t SPIRead(uint8_t adr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  NSS_L();
 80011ea:	2200      	movs	r2, #0
 80011ec:	2140      	movs	r1, #64	; 0x40
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <SPIRead+0x38>)
 80011f0:	f000 ff86 	bl	8002100 <HAL_GPIO_WritePin>
  SPICmd8bit(adr);                                         //Send address first
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ffce 	bl	8001198 <SPICmd8bit>
  tmp = SPIRead8bit();
 80011fc:	f7ff ffde 	bl	80011bc <SPIRead8bit>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
  NSS_H();
 8001204:	2201      	movs	r2, #1
 8001206:	2140      	movs	r1, #64	; 0x40
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <SPIRead+0x38>)
 800120a:	f000 ff79 	bl	8002100 <HAL_GPIO_WritePin>
  return(tmp);
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	48000400 	.word	0x48000400

0800121c <SPIWrite>:
**Function: SPI Write CMD
**Input:    uint8_t address & uint8_t data
**Output:   None
**********************************************************/
void SPIWrite(uint8_t adr, uint8_t WrPara)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
	NSS_L();
 800122c:	2200      	movs	r2, #0
 800122e:	2140      	movs	r1, #64	; 0x40
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <SPIWrite+0x44>)
 8001232:	f000 ff65 	bl	8002100 <HAL_GPIO_WritePin>
	SPICmd8bit(adr|0x80);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ffaa 	bl	8001198 <SPICmd8bit>
	SPICmd8bit(WrPara);
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ffa6 	bl	8001198 <SPICmd8bit>
	NSS_H();
 800124c:	2201      	movs	r2, #1
 800124e:	2140      	movs	r1, #64	; 0x40
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <SPIWrite+0x44>)
 8001252:	f000 ff55 	bl	8002100 <HAL_GPIO_WritePin>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	48000400 	.word	0x48000400

08001264 <SPIBurstRead>:
**          ptr-----data buffer point for read
**          length--how many bytes for read
**Output:   None
**********************************************************/
void SPIBurstRead(uint8_t adr, uint8_t *ptr, uint8_t length)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	4613      	mov	r3, r2
 8001272:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  if(length<=1)                                            //length must more than one
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d91f      	bls.n	80012ba <SPIBurstRead+0x56>
    return;
  else
  {
	  NSS_L();
 800127a:	2200      	movs	r2, #0
 800127c:	2140      	movs	r1, #64	; 0x40
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <SPIBurstRead+0x60>)
 8001280:	f000 ff3e 	bl	8002100 <HAL_GPIO_WritePin>
    SPICmd8bit(adr);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff86 	bl	8001198 <SPICmd8bit>
    for(i=0;i<length;i++)
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e009      	b.n	80012a6 <SPIBurstRead+0x42>
    	ptr[i] = SPIRead8bit();
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	18d4      	adds	r4, r2, r3
 8001298:	f7ff ff90 	bl	80011bc <SPIRead8bit>
 800129c:	4603      	mov	r3, r0
 800129e:	7023      	strb	r3, [r4, #0]
    for(i=0;i<length;i++)
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	3301      	adds	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d3f1      	bcc.n	8001292 <SPIBurstRead+0x2e>
      NSS_H();
 80012ae:	2201      	movs	r2, #1
 80012b0:	2140      	movs	r1, #64	; 0x40
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <SPIBurstRead+0x60>)
 80012b4:	f000 ff24 	bl	8002100 <HAL_GPIO_WritePin>
 80012b8:	e000      	b.n	80012bc <SPIBurstRead+0x58>
    return;
 80012ba:	bf00      	nop
  }
}
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd90      	pop	{r4, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	48000400 	.word	0x48000400

080012c8 <BurstWrite>:
**          ptr-----data buffer point for write
**          length--how many bytes for write
**Output:   none
**********************************************************/
void BurstWrite(uint8_t adr, const uint8_t *ptr, uint8_t length)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	4613      	mov	r3, r2
 80012d6:	71bb      	strb	r3, [r7, #6]
  uint8_t i;

  if(length<=1)
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d922      	bls.n	8001324 <BurstWrite+0x5c>
    return;
  else
  {
	  NSS_L();
 80012de:	2200      	movs	r2, #0
 80012e0:	2140      	movs	r1, #64	; 0x40
 80012e2:	4812      	ldr	r0, [pc, #72]	; (800132c <BurstWrite+0x64>)
 80012e4:	f000 ff0c 	bl	8002100 <HAL_GPIO_WritePin>
    SPICmd8bit(adr|0x80);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff51 	bl	8001198 <SPICmd8bit>
    for(i=0;i<length;i++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	e009      	b.n	8001310 <BurstWrite+0x48>
		SPICmd8bit(ptr[i]);
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff47 	bl	8001198 <SPICmd8bit>
    for(i=0;i<length;i++)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3301      	adds	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3f1      	bcc.n	80012fc <BurstWrite+0x34>
    NSS_H();
 8001318:	2201      	movs	r2, #1
 800131a:	2140      	movs	r1, #64	; 0x40
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <BurstWrite+0x64>)
 800131e:	f000 feef 	bl	8002100 <HAL_GPIO_WritePin>
 8001322:	e000      	b.n	8001326 <BurstWrite+0x5e>
    return;
 8001324:	bf00      	nop
  }
}
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	48000400 	.word	0x48000400

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_MspInit+0x44>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_MspInit+0x44>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6613      	str	r3, [r2, #96]	; 0x60
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_MspInit+0x44>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_MspInit+0x44>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_MspInit+0x44>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6593      	str	r3, [r2, #88]	; 0x58
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_MspInit+0x44>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_SPI_MspInit+0x7c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d128      	bne.n	80013ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 80013a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a4:	6613      	str	r3, [r2, #96]	; 0x60
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013ca:	23e0      	movs	r3, #224	; 0xe0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013da:	2305      	movs	r3, #5
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f000 fcca 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40013000 	.word	0x40013000
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a30      	ldr	r2, [pc, #192]	; (80014dc <HAL_UART_MspInit+0xe0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d159      	bne.n	80014d2 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_UART_MspInit+0xe4>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	4a2f      	ldr	r2, [pc, #188]	; (80014e0 <HAL_UART_MspInit+0xe4>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	6593      	str	r3, [r2, #88]	; 0x58
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_UART_MspInit+0xe4>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_UART_MspInit+0xe4>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <HAL_UART_MspInit+0xe4>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_UART_MspInit+0xe4>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800144e:	230c      	movs	r3, #12
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800145e:	2307      	movs	r3, #7
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f000 fc88 	bl	8001d80 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_UART_MspInit+0xec>)
 8001474:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 8001478:	2202      	movs	r2, #2
 800147a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 800147e:	2210      	movs	r2, #16
 8001480:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014a6:	480f      	ldr	r0, [pc, #60]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 80014a8:	f000 fa78 	bl	800199c <HAL_DMA_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80014b2:	f7ff fe69 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 80014ba:	669a      	str	r2, [r3, #104]	; 0x68
 80014bc:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_UART_MspInit+0xe8>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2026      	movs	r0, #38	; 0x26
 80014c8:	f000 fa31 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014cc:	2026      	movs	r0, #38	; 0x26
 80014ce:	f000 fa4a 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40021000 	.word	0x40021000
 80014e4:	2000013c 	.word	0x2000013c
 80014e8:	40020080 	.word	0x40020080

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001540:	f000 f8fc 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <DMA1_Channel7_IRQHandler+0x10>)
 800154e:	f000 fb5c 	bl	8001c0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000013c 	.word	0x2000013c

0800155c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <USART2_IRQHandler+0x10>)
 8001562:	f003 f8bd 	bl	80046e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000284 	.word	0x20000284

08001570 <_sbrk>:
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x50>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x16>
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <_sbrk+0x50>)
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <_sbrk+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <_sbrk+0x50>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <_sbrk+0x50>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	466a      	mov	r2, sp
 8001596:	4293      	cmp	r3, r2
 8001598:	d907      	bls.n	80015aa <_sbrk+0x3a>
 800159a:	f003 ffa1 	bl	80054e0 <__errno>
 800159e:	4602      	mov	r2, r0
 80015a0:	230c      	movs	r3, #12
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a8:	e006      	b.n	80015b8 <_sbrk+0x48>
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <_sbrk+0x50>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <_sbrk+0x50>)
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000008c 	.word	0x2000008c
 80015c4:	20000328 	.word	0x20000328

080015c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <SystemInit+0x64>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d2:	4a16      	ldr	r2, [pc, #88]	; (800162c <SystemInit+0x64>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <SystemInit+0x68>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a13      	ldr	r2, [pc, #76]	; (8001630 <SystemInit+0x68>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <SystemInit+0x68>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <SystemInit+0x68>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <SystemInit+0x68>)
 80015f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <SystemInit+0x68>)
 8001600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001604:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <SystemInit+0x68>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <SystemInit+0x68>)
 800160c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <SystemInit+0x68>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <SystemInit+0x64>)
 800161a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800161e:	609a      	str	r2, [r3, #8]
#endif
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00
 8001630:	40021000 	.word	0x40021000

08001634 <Reset_Handler>:
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopForever+0x2>
 8001638:	2100      	movs	r1, #0
 800163a:	e003      	b.n	8001644 <LoopCopyDataInit>

0800163c <CopyDataInit>:
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <LoopForever+0x6>)
 800163e:	585b      	ldr	r3, [r3, r1]
 8001640:	5043      	str	r3, [r0, r1]
 8001642:	3104      	adds	r1, #4

08001644 <LoopCopyDataInit>:
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <LoopForever+0xa>)
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <LoopForever+0xe>)
 8001648:	1842      	adds	r2, r0, r1
 800164a:	429a      	cmp	r2, r3
 800164c:	d3f6      	bcc.n	800163c <CopyDataInit>
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <LoopForever+0x12>)
 8001650:	e002      	b.n	8001658 <LoopFillZerobss>

08001652 <FillZerobss>:
 8001652:	2300      	movs	r3, #0
 8001654:	f842 3b04 	str.w	r3, [r2], #4

08001658 <LoopFillZerobss>:
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <LoopForever+0x16>)
 800165a:	429a      	cmp	r2, r3
 800165c:	d3f9      	bcc.n	8001652 <FillZerobss>
 800165e:	f7ff ffb3 	bl	80015c8 <SystemInit>
 8001662:	f003 ff43 	bl	80054ec <__libc_init_array>
 8001666:	f7ff fbd5 	bl	8000e14 <main>

0800166a <LoopForever>:
 800166a:	e7fe      	b.n	800166a <LoopForever>
 800166c:	20018000 	.word	0x20018000
 8001670:	08005f2c 	.word	0x08005f2c
 8001674:	20000000 	.word	0x20000000
 8001678:	20000070 	.word	0x20000070
 800167c:	20000070 	.word	0x20000070
 8001680:	20000324 	.word	0x20000324

08001684 <ADC1_2_IRQHandler>:
 8001684:	e7fe      	b.n	8001684 <ADC1_2_IRQHandler>
	...

08001688 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_Init+0x3c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_Init+0x3c>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169e:	2003      	movs	r0, #3
 80016a0:	f000 f93a 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 f80f 	bl	80016c8 <HAL_InitTick>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	71fb      	strb	r3, [r7, #7]
 80016b4:	e001      	b.n	80016ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b6:	f7ff fe3b 	bl	8001330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ba:	79fb      	ldrb	r3, [r7, #7]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_InitTick+0x68>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d022      	beq.n	8001722 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_InitTick+0x6c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_InitTick+0x68>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 f946 	bl	8001982 <HAL_SYSTICK_Config>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10f      	bne.n	800171c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	d809      	bhi.n	8001716 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001702:	2200      	movs	r2, #0
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800170a:	f000 f910 	bl	800192e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <HAL_InitTick+0x70>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e007      	b.n	8001726 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	e004      	b.n	8001726 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	e001      	b.n	8001726 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000008 	.word	0x20000008
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004

0800173c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x1c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_IncTick+0x20>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4413      	add	r3, r2
 800174a:	4a03      	ldr	r2, [pc, #12]	; (8001758 <HAL_IncTick+0x1c>)
 800174c:	6013      	str	r3, [r2, #0]
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	2000031c 	.word	0x2000031c
 800175c:	20000008 	.word	0x20000008

08001760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_GetTick+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2000031c 	.word	0x2000031c

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff3e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff31 	bl	80017dc <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e098      	b.n	8001ae0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <HAL_DMA_Init+0x150>)
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d80f      	bhi.n	80019da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <HAL_DMA_Init+0x154>)
 80019c2:	4413      	add	r3, r2
 80019c4:	4a4b      	ldr	r2, [pc, #300]	; (8001af4 <HAL_DMA_Init+0x158>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	009a      	lsls	r2, r3, #2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_DMA_Init+0x15c>)
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
 80019d8:	e00e      	b.n	80019f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_DMA_Init+0x160>)
 80019e2:	4413      	add	r3, r2
 80019e4:	4a43      	ldr	r2, [pc, #268]	; (8001af4 <HAL_DMA_Init+0x158>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	009a      	lsls	r2, r3, #2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a42      	ldr	r2, [pc, #264]	; (8001b00 <HAL_DMA_Init+0x164>)
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a52:	d039      	beq.n	8001ac8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <HAL_DMA_Init+0x15c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d11a      	bne.n	8001a94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <HAL_DMA_Init+0x168>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f003 031c 	and.w	r3, r3, #28
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4924      	ldr	r1, [pc, #144]	; (8001b04 <HAL_DMA_Init+0x168>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a78:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_DMA_Init+0x168>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f003 031c 	and.w	r3, r3, #28
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	491d      	ldr	r1, [pc, #116]	; (8001b04 <HAL_DMA_Init+0x168>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
 8001a92:	e019      	b.n	8001ac8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <HAL_DMA_Init+0x16c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f003 031c 	and.w	r3, r3, #28
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	4917      	ldr	r1, [pc, #92]	; (8001b08 <HAL_DMA_Init+0x16c>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_DMA_Init+0x16c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6859      	ldr	r1, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f003 031c 	and.w	r3, r3, #28
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	4911      	ldr	r1, [pc, #68]	; (8001b08 <HAL_DMA_Init+0x16c>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40020407 	.word	0x40020407
 8001af0:	bffdfff8 	.word	0xbffdfff8
 8001af4:	cccccccd 	.word	0xcccccccd
 8001af8:	40020000 	.word	0x40020000
 8001afc:	bffdfbf8 	.word	0xbffdfbf8
 8001b00:	40020400 	.word	0x40020400
 8001b04:	400200a8 	.word	0x400200a8
 8001b08:	400204a8 	.word	0x400204a8

08001b0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d008      	beq.n	8001b36 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2204      	movs	r2, #4
 8001b28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e022      	b.n	8001b7c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 020e 	bic.w	r2, r2, #14
 8001b44:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0201 	bic.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f003 021c 	and.w	r2, r3, #28
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d005      	beq.n	8001bac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	73fb      	strb	r3, [r7, #15]
 8001baa:	e029      	b.n	8001c00 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 020e 	bic.w	r2, r2, #14
 8001bba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f003 021c 	and.w	r2, r3, #28
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2101      	movs	r1, #1
 8001bda:	fa01 f202 	lsl.w	r2, r1, r2
 8001bde:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
    }
  }
  return status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f003 031c 	and.w	r3, r3, #28
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d026      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x7a>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d021      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d107      	bne.n	8001c5e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0204 	bic.w	r2, r2, #4
 8001c5c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 021c 	and.w	r2, r3, #28
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c70:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d071      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001c82:	e06c      	b.n	8001d5e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	f003 031c 	and.w	r3, r3, #28
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d02e      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xec>
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d029      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10b      	bne.n	8001cc8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 020a 	bic.w	r2, r2, #10
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f003 021c 	and.w	r2, r3, #28
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d038      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001cf4:	e033      	b.n	8001d5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f003 031c 	and.w	r3, r3, #28
 8001cfe:	2208      	movs	r2, #8
 8001d00:	409a      	lsls	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d02a      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x156>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d025      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 020e 	bic.w	r2, r2, #14
 8001d22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d28:	f003 021c 	and.w	r2, r3, #28
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	2101      	movs	r1, #1
 8001d32:	fa01 f202 	lsl.w	r2, r1, r2
 8001d36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
}
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e17f      	b.n	8002090 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8171 	beq.w	800208a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d00b      	beq.n	8001dc8 <HAL_GPIO_Init+0x48>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d007      	beq.n	8001dc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dbc:	2b11      	cmp	r3, #17
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b12      	cmp	r3, #18
 8001dc6:	d130      	bne.n	8001e2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f003 0201 	and.w	r2, r3, #1
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d118      	bne.n	8001e68 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	08db      	lsrs	r3, r3, #3
 8001e52:	f003 0201 	and.w	r2, r3, #1
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x128>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b12      	cmp	r3, #18
 8001ea6:	d123      	bne.n	8001ef0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	08da      	lsrs	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3208      	adds	r2, #8
 8001eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	6939      	ldr	r1, [r7, #16]
 8001eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80ac 	beq.w	800208a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	4b5e      	ldr	r3, [pc, #376]	; (80020ac <HAL_GPIO_Init+0x32c>)
 8001f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f36:	4a5d      	ldr	r2, [pc, #372]	; (80020ac <HAL_GPIO_Init+0x32c>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	; (80020ac <HAL_GPIO_Init+0x32c>)
 8001f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f4a:	4a59      	ldr	r2, [pc, #356]	; (80020b0 <HAL_GPIO_Init+0x330>)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f74:	d025      	beq.n	8001fc2 <HAL_GPIO_Init+0x242>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4e      	ldr	r2, [pc, #312]	; (80020b4 <HAL_GPIO_Init+0x334>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01f      	beq.n	8001fbe <HAL_GPIO_Init+0x23e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4d      	ldr	r2, [pc, #308]	; (80020b8 <HAL_GPIO_Init+0x338>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d019      	beq.n	8001fba <HAL_GPIO_Init+0x23a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4c      	ldr	r2, [pc, #304]	; (80020bc <HAL_GPIO_Init+0x33c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_GPIO_Init+0x236>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4b      	ldr	r2, [pc, #300]	; (80020c0 <HAL_GPIO_Init+0x340>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00d      	beq.n	8001fb2 <HAL_GPIO_Init+0x232>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4a      	ldr	r2, [pc, #296]	; (80020c4 <HAL_GPIO_Init+0x344>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d007      	beq.n	8001fae <HAL_GPIO_Init+0x22e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a49      	ldr	r2, [pc, #292]	; (80020c8 <HAL_GPIO_Init+0x348>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_GPIO_Init+0x22a>
 8001fa6:	2306      	movs	r3, #6
 8001fa8:	e00c      	b.n	8001fc4 <HAL_GPIO_Init+0x244>
 8001faa:	2307      	movs	r3, #7
 8001fac:	e00a      	b.n	8001fc4 <HAL_GPIO_Init+0x244>
 8001fae:	2305      	movs	r3, #5
 8001fb0:	e008      	b.n	8001fc4 <HAL_GPIO_Init+0x244>
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x244>
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e004      	b.n	8001fc4 <HAL_GPIO_Init+0x244>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e002      	b.n	8001fc4 <HAL_GPIO_Init+0x244>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_GPIO_Init+0x244>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	f002 0203 	and.w	r2, r2, #3
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	4093      	lsls	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fd4:	4936      	ldr	r1, [pc, #216]	; (80020b0 <HAL_GPIO_Init+0x330>)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fe2:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <HAL_GPIO_Init+0x34c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002006:	4a31      	ldr	r2, [pc, #196]	; (80020cc <HAL_GPIO_Init+0x34c>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800200c:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <HAL_GPIO_Init+0x34c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002030:	4a26      	ldr	r2, [pc, #152]	; (80020cc <HAL_GPIO_Init+0x34c>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <HAL_GPIO_Init+0x34c>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800205a:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <HAL_GPIO_Init+0x34c>)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_GPIO_Init+0x34c>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_GPIO_Init+0x34c>)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa22 f303 	lsr.w	r3, r2, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	f47f ae78 	bne.w	8001d90 <HAL_GPIO_Init+0x10>
  }
}
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010000 	.word	0x40010000
 80020b4:	48000400 	.word	0x48000400
 80020b8:	48000800 	.word	0x48000800
 80020bc:	48000c00 	.word	0x48000c00
 80020c0:	48001000 	.word	0x48001000
 80020c4:	48001400 	.word	0x48001400
 80020c8:	48001800 	.word	0x48001800
 80020cc:	40010400 	.word	0x40010400

080020d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	e001      	b.n	80020f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
 800210c:	4613      	mov	r3, r2
 800210e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002110:	787b      	ldrb	r3, [r7, #1]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800211c:	e002      	b.n	8002124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_PWREx_GetVoltageRange+0x18>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40007000 	.word	0x40007000

0800214c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215a:	d130      	bne.n	80021be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002168:	d038      	beq.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002172:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002174:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2232      	movs	r2, #50	; 0x32
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9b      	lsrs	r3, r3, #18
 800218c:	3301      	adds	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002190:	e002      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3b01      	subs	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a4:	d102      	bne.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f2      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b8:	d110      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e00f      	b.n	80021de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	d007      	beq.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021d4:	4a05      	ldr	r2, [pc, #20]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40007000 	.word	0x40007000
 80021f0:	20000000 	.word	0x20000000
 80021f4:	431bde83 	.word	0x431bde83

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e3d4      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220a:	4ba1      	ldr	r3, [pc, #644]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002214:	4b9e      	ldr	r3, [pc, #632]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80e4 	beq.w	80023f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_RCC_OscConfig+0x4a>
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	f040 808b 	bne.w	8002350 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 8087 	bne.w	8002350 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002242:	4b93      	ldr	r3, [pc, #588]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x62>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e3ac      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	4b8c      	ldr	r3, [pc, #560]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d004      	beq.n	8002274 <HAL_RCC_OscConfig+0x7c>
 800226a:	4b89      	ldr	r3, [pc, #548]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002272:	e005      	b.n	8002280 <HAL_RCC_OscConfig+0x88>
 8002274:	4b86      	ldr	r3, [pc, #536]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002280:	4293      	cmp	r3, r2
 8002282:	d223      	bcs.n	80022cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fd3f 	bl	8002d0c <RCC_SetFlashLatencyFromMSIRange>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e38d      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002298:	4b7d      	ldr	r3, [pc, #500]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a7c      	ldr	r2, [pc, #496]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800229e:	f043 0308 	orr.w	r3, r3, #8
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b7a      	ldr	r3, [pc, #488]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4977      	ldr	r1, [pc, #476]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b6:	4b76      	ldr	r3, [pc, #472]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	4972      	ldr	r1, [pc, #456]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
 80022ca:	e025      	b.n	8002318 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022cc:	4b70      	ldr	r3, [pc, #448]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6f      	ldr	r2, [pc, #444]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b6d      	ldr	r3, [pc, #436]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	496a      	ldr	r1, [pc, #424]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ea:	4b69      	ldr	r3, [pc, #420]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	4965      	ldr	r1, [pc, #404]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fcff 	bl	8002d0c <RCC_SetFlashLatencyFromMSIRange>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e34d      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002318:	f000 fc36 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 800231c:	4601      	mov	r1, r0
 800231e:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	4a5a      	ldr	r2, [pc, #360]	; (8002494 <HAL_RCC_OscConfig+0x29c>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa21 f303 	lsr.w	r3, r1, r3
 8002334:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x2a0>)
 8002336:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002338:	4b58      	ldr	r3, [pc, #352]	; (800249c <HAL_RCC_OscConfig+0x2a4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f9c3 	bl	80016c8 <HAL_InitTick>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d052      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	e331      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d032      	beq.n	80023be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002358:	4b4d      	ldr	r3, [pc, #308]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002364:	f7ff f9fc 	bl	8001760 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236c:	f7ff f9f8 	bl	8001760 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e31a      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237e:	4b44      	ldr	r3, [pc, #272]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238a:	4b41      	ldr	r3, [pc, #260]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a40      	ldr	r2, [pc, #256]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	493b      	ldr	r1, [pc, #236]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a8:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	4936      	ldr	r1, [pc, #216]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
 80023bc:	e01a      	b.n	80023f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023be:	4b34      	ldr	r3, [pc, #208]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a33      	ldr	r2, [pc, #204]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ca:	f7ff f9c9 	bl	8001760 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d2:	f7ff f9c5 	bl	8001760 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e2e7      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e4:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x1da>
 80023f0:	e000      	b.n	80023f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d074      	beq.n	80024ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b08      	cmp	r3, #8
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x21a>
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d10e      	bne.n	800242a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d064      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d160      	bne.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e2c4      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x24a>
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a15      	ldr	r2, [pc, #84]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e01d      	b.n	800247e <HAL_RCC_OscConfig+0x286>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244a:	d10c      	bne.n	8002466 <HAL_RCC_OscConfig+0x26e>
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e00b      	b.n	800247e <HAL_RCC_OscConfig+0x286>
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800246c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a06      	ldr	r2, [pc, #24]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7ff f96b 	bl	8001760 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248c:	e011      	b.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	08005ea0 	.word	0x08005ea0
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7ff f95e 	bl	8001760 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e280      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b2:	4baf      	ldr	r3, [pc, #700]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x2a8>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7ff f94e 	bl	8001760 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff f94a 	bl	8001760 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e26c      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	4ba5      	ldr	r3, [pc, #660]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2d0>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d060      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_OscConfig+0x310>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d119      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d116      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	4b99      	ldr	r3, [pc, #612]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x328>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e249      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b93      	ldr	r3, [pc, #588]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4990      	ldr	r1, [pc, #576]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002534:	e040      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d023      	beq.n	8002586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253e:	4b8c      	ldr	r3, [pc, #560]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a8b      	ldr	r2, [pc, #556]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7ff f909 	bl	8001760 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002552:	f7ff f905 	bl	8001760 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e227      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	4b82      	ldr	r3, [pc, #520]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b7f      	ldr	r3, [pc, #508]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	497c      	ldr	r1, [pc, #496]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b7a      	ldr	r3, [pc, #488]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a79      	ldr	r2, [pc, #484]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800258c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7ff f8e5 	bl	8001760 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7ff f8e1 	bl	8001760 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e203      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	4b70      	ldr	r3, [pc, #448]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d03c      	beq.n	800263e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01c      	beq.n	8002606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025cc:	4b68      	ldr	r3, [pc, #416]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d2:	4a67      	ldr	r2, [pc, #412]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7ff f8c0 	bl	8001760 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7ff f8bc 	bl	8001760 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1de      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	4b5e      	ldr	r3, [pc, #376]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80025f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <HAL_RCC_OscConfig+0x3ec>
 8002604:	e01b      	b.n	800263e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b5a      	ldr	r3, [pc, #360]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260c:	4a58      	ldr	r2, [pc, #352]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7ff f8a3 	bl	8001760 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7ff f89f 	bl	8001760 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1c1      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ef      	bne.n	800261e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80a6 	beq.w	8002798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002650:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	4b44      	ldr	r3, [pc, #272]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	4a43      	ldr	r2, [pc, #268]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	; 0x58
 8002668:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002674:	2301      	movs	r3, #1
 8002676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002678:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_RCC_OscConfig+0x57c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d118      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002684:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <HAL_RCC_OscConfig+0x57c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <HAL_RCC_OscConfig+0x57c>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002690:	f7ff f866 	bl	8001760 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002698:	f7ff f862 	bl	8001760 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e184      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	4b32      	ldr	r3, [pc, #200]	; (8002774 <HAL_RCC_OscConfig+0x57c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4d8>
 80026be:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ce:	e024      	b.n	800271a <HAL_RCC_OscConfig+0x522>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d110      	bne.n	80026fa <HAL_RCC_OscConfig+0x502>
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	4a24      	ldr	r2, [pc, #144]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a20      	ldr	r2, [pc, #128]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f8:	e00f      	b.n	800271a <HAL_RCC_OscConfig+0x522>
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002710:	4a17      	ldr	r2, [pc, #92]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002712:	f023 0304 	bic.w	r3, r3, #4
 8002716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d016      	beq.n	8002750 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7ff f81d 	bl	8001760 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7ff f819 	bl	8001760 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e139      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ed      	beq.n	800272a <HAL_RCC_OscConfig+0x532>
 800274e:	e01a      	b.n	8002786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7ff f806 	bl	8001760 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002756:	e00f      	b.n	8002778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7ff f802 	bl	8001760 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d906      	bls.n	8002778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e122      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002778:	4b90      	ldr	r3, [pc, #576]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1e8      	bne.n	8002758 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002786:	7ffb      	ldrb	r3, [r7, #31]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b8b      	ldr	r3, [pc, #556]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	4a8a      	ldr	r2, [pc, #552]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8108 	beq.w	80029b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	f040 80d0 	bne.w	800294c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ac:	4b83      	ldr	r3, [pc, #524]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	429a      	cmp	r2, r3
 80027be:	d130      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	3b01      	subs	r3, #1
 80027cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d127      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d11f      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027ec:	2a07      	cmp	r2, #7
 80027ee:	bf14      	ite	ne
 80027f0:	2201      	movne	r2, #1
 80027f2:	2200      	moveq	r2, #0
 80027f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d113      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	3b01      	subs	r3, #1
 8002808:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d109      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d06e      	beq.n	8002900 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d069      	beq.n	80028fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002828:	4b64      	ldr	r3, [pc, #400]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002834:	4b61      	ldr	r3, [pc, #388]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0b7      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002844:	4b5d      	ldr	r3, [pc, #372]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a5c      	ldr	r2, [pc, #368]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800284a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800284e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002850:	f7fe ff86 	bl	8001760 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe ff82 	bl	8001760 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0a4      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286a:	4b54      	ldr	r3, [pc, #336]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002876:	4b51      	ldr	r3, [pc, #324]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	4b51      	ldr	r3, [pc, #324]	; (80029c0 <HAL_RCC_OscConfig+0x7c8>)
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002886:	3a01      	subs	r2, #1
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002890:	0212      	lsls	r2, r2, #8
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002898:	0852      	lsrs	r2, r2, #1
 800289a:	3a01      	subs	r2, #1
 800289c:	0552      	lsls	r2, r2, #21
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028a4:	0852      	lsrs	r2, r2, #1
 80028a6:	3a01      	subs	r2, #1
 80028a8:	0652      	lsls	r2, r2, #25
 80028aa:	4311      	orrs	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b0:	0912      	lsrs	r2, r2, #4
 80028b2:	0452      	lsls	r2, r2, #17
 80028b4:	430a      	orrs	r2, r1
 80028b6:	4941      	ldr	r1, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028bc:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a3e      	ldr	r2, [pc, #248]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c8:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a3b      	ldr	r2, [pc, #236]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028d4:	f7fe ff44 	bl	8001760 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe ff40 	bl	8001760 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e062      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	4b33      	ldr	r3, [pc, #204]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028fa:	e05a      	b.n	80029b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e059      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002900:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d152      	bne.n	80029b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002918:	4b28      	ldr	r3, [pc, #160]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a27      	ldr	r2, [pc, #156]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002924:	f7fe ff1c 	bl	8001760 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe ff18 	bl	8001760 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e03a      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x734>
 800294a:	e032      	b.n	80029b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d02d      	beq.n	80029ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800296a:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4a13      	ldr	r2, [pc, #76]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002970:	f023 0303 	bic.w	r3, r3, #3
 8002974:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800297c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002984:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe feeb 	bl	8001760 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7fe fee7 	bl	8001760 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e009      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x796>
 80029ac:	e001      	b.n	80029b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	f99d808c 	.word	0xf99d808c

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0c8      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d910      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0207 	bic.w	r2, r3, #7
 80029ee:	4961      	ldr	r1, [pc, #388]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b5f      	ldr	r3, [pc, #380]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b0      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d04c      	beq.n	8002aae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1c:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d121      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e09e      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d115      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e092      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a4c:	4b4a      	ldr	r3, [pc, #296]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e086      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a5c:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e07e      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a6c:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 0203 	bic.w	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	493f      	ldr	r1, [pc, #252]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7e:	f7fe fe6f 	bl	8001760 <HAL_GetTick>
 8002a82:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a86:	f7fe fe6b 	bl	8001760 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e066      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 020c 	and.w	r2, r3, #12
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d1eb      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	492c      	ldr	r1, [pc, #176]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002acc:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d210      	bcs.n	8002afc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 0207 	bic.w	r2, r3, #7
 8002ae2:	4924      	ldr	r1, [pc, #144]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e036      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4918      	ldr	r1, [pc, #96]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4910      	ldr	r1, [pc, #64]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b3a:	f000 f825 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8002b3e:	4601      	mov	r1, r0
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	5cd3      	ldrb	r3, [r2, r3]
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	fa21 f303 	lsr.w	r3, r1, r3
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fdb2 	bl	80016c8 <HAL_InitTick>
 8002b64:	4603      	mov	r3, r0
 8002b66:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b68:	7afb      	ldrb	r3, [r7, #11]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40022000 	.word	0x40022000
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08005ea0 	.word	0x08005ea0
 8002b80:	20000000 	.word	0x20000000
 8002b84:	20000004 	.word	0x20000004

08002b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x34>
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d121      	bne.n	8002bfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d11e      	bne.n	8002bfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bbc:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e005      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bd8:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002be4:	4a2a      	ldr	r2, [pc, #168]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10d      	bne.n	8002c10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d102      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c00:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	e004      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d133      	bne.n	8002c7e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0xa4>
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0xaa>
 8002c2a:	e005      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c2e:	617b      	str	r3, [r7, #20]
      break;
 8002c30:	e005      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c32:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c34:	617b      	str	r3, [r7, #20]
      break;
 8002c36:	e002      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	617b      	str	r3, [r7, #20]
      break;
 8002c3c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c3e:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	3301      	adds	r3, #1
 8002c4a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	fb02 f203 	mul.w	r2, r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c62:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0e5b      	lsrs	r3, r3, #25
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3724      	adds	r7, #36	; 0x24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	08005eb8 	.word	0x08005eb8
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	007a1200 	.word	0x007a1200

08002c9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cb8:	f7ff fff0 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cbc:	4601      	mov	r1, r0
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08005eb0 	.word	0x08005eb0

08002ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ce4:	f7ff ffda 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce8:	4601      	mov	r1, r0
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0adb      	lsrs	r3, r3, #11
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08005eb0 	.word	0x08005eb0

08002d0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d18:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d24:	f7ff fa04 	bl	8002130 <HAL_PWREx_GetVoltageRange>
 8002d28:	6178      	str	r0, [r7, #20]
 8002d2a:	e014      	b.n	8002d56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d2c:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d36:	6593      	str	r3, [r2, #88]	; 0x58
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d44:	f7ff f9f4 	bl	8002130 <HAL_PWREx_GetVoltageRange>
 8002d48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d5c:	d10b      	bne.n	8002d76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b80      	cmp	r3, #128	; 0x80
 8002d62:	d919      	bls.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2ba0      	cmp	r3, #160	; 0xa0
 8002d68:	d902      	bls.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	e013      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d70:	2301      	movs	r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	e010      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b80      	cmp	r3, #128	; 0x80
 8002d7a:	d902      	bls.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	e00a      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b80      	cmp	r3, #128	; 0x80
 8002d86:	d102      	bne.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d88:	2302      	movs	r3, #2
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e004      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b70      	cmp	r3, #112	; 0x70
 8002d92:	d101      	bne.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d94:	2301      	movs	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 0207 	bic.w	r2, r3, #7
 8002da0:	4909      	ldr	r1, [pc, #36]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002da8:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d001      	beq.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40022000 	.word	0x40022000

08002dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dd8:	2300      	movs	r3, #0
 8002dda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d03f      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df0:	d01c      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df6:	d802      	bhi.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00e      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002dfc:	e01f      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002dfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e02:	d003      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002e04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e08:	d01c      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002e0a:	e018      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e0c:	4b85      	ldr	r3, [pc, #532]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a84      	ldr	r2, [pc, #528]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e18:	e015      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fab9 	bl	8003398 <RCCEx_PLLSAI1_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e2a:	e00c      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3320      	adds	r3, #32
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fba0 	bl	8003578 <RCCEx_PLLSAI2_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e3c:	e003      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	74fb      	strb	r3, [r7, #19]
      break;
 8002e42:	e000      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e46:	7cfb      	ldrb	r3, [r7, #19]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10b      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e4c:	4b75      	ldr	r3, [pc, #468]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e5a:	4972      	ldr	r1, [pc, #456]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e62:	e001      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d03f      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e7c:	d01c      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e82:	d802      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002e88:	e01f      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e8e:	d003      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002e90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e94:	d01c      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002e96:	e018      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e98:	4b62      	ldr	r3, [pc, #392]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a61      	ldr	r2, [pc, #388]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ea4:	e015      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fa73 	bl	8003398 <RCCEx_PLLSAI1_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eb6:	e00c      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3320      	adds	r3, #32
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fb5a 	bl	8003578 <RCCEx_PLLSAI2_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ec8:	e003      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ece:	e000      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ed8:	4b52      	ldr	r3, [pc, #328]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee6:	494f      	ldr	r1, [pc, #316]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eee:	e001      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a0 	beq.w	8003042 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002f16:	2300      	movs	r3, #0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00d      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1c:	4b41      	ldr	r3, [pc, #260]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	4a40      	ldr	r2, [pc, #256]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f26:	6593      	str	r3, [r2, #88]	; 0x58
 8002f28:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f34:	2301      	movs	r3, #1
 8002f36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f38:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a3a      	ldr	r2, [pc, #232]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f44:	f7fe fc0c 	bl	8001760 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f4a:	e009      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4c:	f7fe fc08 	bl	8001760 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d902      	bls.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f5e:	e005      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f60:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0ef      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d15c      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f72:	4b2c      	ldr	r3, [pc, #176]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01f      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d019      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f90:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	4a20      	ldr	r2, [pc, #128]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	4a1c      	ldr	r2, [pc, #112]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fbc:	4a19      	ldr	r2, [pc, #100]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7fe fbc7 	bl	8001760 <HAL_GetTick>
 8002fd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd4:	e00b      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7fe fbc3 	bl	8001760 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d902      	bls.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	74fb      	strb	r3, [r7, #19]
            break;
 8002fec:	e006      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ec      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003012:	4904      	ldr	r1, [pc, #16]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800301a:	e009      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800301c:	7cfb      	ldrb	r3, [r7, #19]
 800301e:	74bb      	strb	r3, [r7, #18]
 8003020:	e006      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302c:	7cfb      	ldrb	r3, [r7, #19]
 800302e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003030:	7c7b      	ldrb	r3, [r7, #17]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d105      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003036:	4b9e      	ldr	r3, [pc, #632]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	4a9d      	ldr	r2, [pc, #628]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800303c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003040:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800304e:	4b98      	ldr	r3, [pc, #608]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	f023 0203 	bic.w	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	4994      	ldr	r1, [pc, #592]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003070:	4b8f      	ldr	r3, [pc, #572]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f023 020c 	bic.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	498c      	ldr	r1, [pc, #560]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003092:	4b87      	ldr	r3, [pc, #540]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	4983      	ldr	r1, [pc, #524]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030b4:	4b7e      	ldr	r3, [pc, #504]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	497b      	ldr	r1, [pc, #492]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030d6:	4b76      	ldr	r3, [pc, #472]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e4:	4972      	ldr	r1, [pc, #456]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030f8:	4b6d      	ldr	r3, [pc, #436]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	496a      	ldr	r1, [pc, #424]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800311a:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003120:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	4961      	ldr	r1, [pc, #388]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800313c:	4b5c      	ldr	r3, [pc, #368]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	4959      	ldr	r1, [pc, #356]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800315e:	4b54      	ldr	r3, [pc, #336]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003164:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	4950      	ldr	r1, [pc, #320]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003180:	4b4b      	ldr	r3, [pc, #300]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003186:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	4948      	ldr	r1, [pc, #288]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031a2:	4b43      	ldr	r3, [pc, #268]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	493f      	ldr	r1, [pc, #252]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d028      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031c4:	4b3a      	ldr	r3, [pc, #232]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d2:	4937      	ldr	r1, [pc, #220]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e2:	d106      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e4:	4b32      	ldr	r3, [pc, #200]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a31      	ldr	r2, [pc, #196]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ee:	60d3      	str	r3, [r2, #12]
 80031f0:	e011      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031fa:	d10c      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3304      	adds	r3, #4
 8003200:	2101      	movs	r1, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f8c8 	bl	8003398 <RCCEx_PLLSAI1_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d028      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003222:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	491f      	ldr	r1, [pc, #124]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003240:	d106      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003242:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	4a1a      	ldr	r2, [pc, #104]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800324c:	60d3      	str	r3, [r2, #12]
 800324e:	e011      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003258:	d10c      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3304      	adds	r3, #4
 800325e:	2101      	movs	r1, #1
 8003260:	4618      	mov	r0, r3
 8003262:	f000 f899 	bl	8003398 <RCCEx_PLLSAI1_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d02b      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328e:	4908      	ldr	r1, [pc, #32]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800329e:	d109      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a02      	ldr	r2, [pc, #8]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032aa:	60d3      	str	r3, [r2, #12]
 80032ac:	e014      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f867 	bl	8003398 <RCCEx_PLLSAI1_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d02f      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032e4:	4b2b      	ldr	r3, [pc, #172]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032f2:	4928      	ldr	r1, [pc, #160]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003302:	d10d      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	2102      	movs	r1, #2
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f844 	bl	8003398 <RCCEx_PLLSAI1_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d014      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	74bb      	strb	r3, [r7, #18]
 800331e:	e011      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003328:	d10c      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3320      	adds	r3, #32
 800332e:	2102      	movs	r1, #2
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f921 	bl	8003578 <RCCEx_PLLSAI2_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003350:	4b10      	ldr	r3, [pc, #64]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800335e:	490d      	ldr	r1, [pc, #52]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003378:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003382:	4904      	ldr	r1, [pc, #16]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800338a:	7cbb      	ldrb	r3, [r7, #18]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000

08003398 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033a6:	4b73      	ldr	r3, [pc, #460]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d018      	beq.n	80033e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033b2:	4b70      	ldr	r3, [pc, #448]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0203 	and.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d10d      	bne.n	80033de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
       ||
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033ca:	4b6a      	ldr	r3, [pc, #424]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
       ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d044      	beq.n	8003468 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
 80033e2:	e041      	b.n	8003468 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d00c      	beq.n	8003406 <RCCEx_PLLSAI1_Config+0x6e>
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d013      	beq.n	8003418 <RCCEx_PLLSAI1_Config+0x80>
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d120      	bne.n	8003436 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033f4:	4b5f      	ldr	r3, [pc, #380]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d11d      	bne.n	800343c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003404:	e01a      	b.n	800343c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003406:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340e:	2b00      	cmp	r3, #0
 8003410:	d116      	bne.n	8003440 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003416:	e013      	b.n	8003440 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003418:	4b56      	ldr	r3, [pc, #344]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10f      	bne.n	8003444 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003424:	4b53      	ldr	r3, [pc, #332]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003434:	e006      	b.n	8003444 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
      break;
 800343a:	e004      	b.n	8003446 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800343c:	bf00      	nop
 800343e:	e002      	b.n	8003446 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003440:	bf00      	nop
 8003442:	e000      	b.n	8003446 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003444:	bf00      	nop
    }

    if(status == HAL_OK)
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800344c:	4b49      	ldr	r3, [pc, #292]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6819      	ldr	r1, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	3b01      	subs	r3, #1
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	430b      	orrs	r3, r1
 8003462:	4944      	ldr	r1, [pc, #272]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003464:	4313      	orrs	r3, r2
 8003466:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d17d      	bne.n	800356a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800346e:	4b41      	ldr	r3, [pc, #260]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a40      	ldr	r2, [pc, #256]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003474:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347a:	f7fe f971 	bl	8001760 <HAL_GetTick>
 800347e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003480:	e009      	b.n	8003496 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003482:	f7fe f96d 	bl	8001760 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d902      	bls.n	8003496 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	73fb      	strb	r3, [r7, #15]
        break;
 8003494:	e005      	b.n	80034a2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003496:	4b37      	ldr	r3, [pc, #220]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1ef      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d160      	bne.n	800356a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d111      	bne.n	80034d2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034ae:	4b31      	ldr	r3, [pc, #196]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6892      	ldr	r2, [r2, #8]
 80034be:	0211      	lsls	r1, r2, #8
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68d2      	ldr	r2, [r2, #12]
 80034c4:	0912      	lsrs	r2, r2, #4
 80034c6:	0452      	lsls	r2, r2, #17
 80034c8:	430a      	orrs	r2, r1
 80034ca:	492a      	ldr	r1, [pc, #168]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	610b      	str	r3, [r1, #16]
 80034d0:	e027      	b.n	8003522 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d112      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034d8:	4b26      	ldr	r3, [pc, #152]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6892      	ldr	r2, [r2, #8]
 80034e8:	0211      	lsls	r1, r2, #8
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6912      	ldr	r2, [r2, #16]
 80034ee:	0852      	lsrs	r2, r2, #1
 80034f0:	3a01      	subs	r2, #1
 80034f2:	0552      	lsls	r2, r2, #21
 80034f4:	430a      	orrs	r2, r1
 80034f6:	491f      	ldr	r1, [pc, #124]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	610b      	str	r3, [r1, #16]
 80034fc:	e011      	b.n	8003522 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034fe:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003506:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6892      	ldr	r2, [r2, #8]
 800350e:	0211      	lsls	r1, r2, #8
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6952      	ldr	r2, [r2, #20]
 8003514:	0852      	lsrs	r2, r2, #1
 8003516:	3a01      	subs	r2, #1
 8003518:	0652      	lsls	r2, r2, #25
 800351a:	430a      	orrs	r2, r1
 800351c:	4915      	ldr	r1, [pc, #84]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003522:	4b14      	ldr	r3, [pc, #80]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a13      	ldr	r2, [pc, #76]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800352c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe f917 	bl	8001760 <HAL_GetTick>
 8003532:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003534:	e009      	b.n	800354a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003536:	f7fe f913 	bl	8001760 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d902      	bls.n	800354a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	73fb      	strb	r3, [r7, #15]
          break;
 8003548:	e005      	b.n	8003556 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ef      	beq.n	8003536 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d106      	bne.n	800356a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	4903      	ldr	r1, [pc, #12]	; (8003574 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800356a:	7bfb      	ldrb	r3, [r7, #15]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000

08003578 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003586:	4b68      	ldr	r3, [pc, #416]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d018      	beq.n	80035c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003592:	4b65      	ldr	r3, [pc, #404]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0203 	and.w	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d10d      	bne.n	80035be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
       ||
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035aa:	4b5f      	ldr	r3, [pc, #380]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
       ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d044      	beq.n	8003648 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	e041      	b.n	8003648 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d00c      	beq.n	80035e6 <RCCEx_PLLSAI2_Config+0x6e>
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d013      	beq.n	80035f8 <RCCEx_PLLSAI2_Config+0x80>
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d120      	bne.n	8003616 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035d4:	4b54      	ldr	r3, [pc, #336]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11d      	bne.n	800361c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e4:	e01a      	b.n	800361c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035e6:	4b50      	ldr	r3, [pc, #320]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d116      	bne.n	8003620 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f6:	e013      	b.n	8003620 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003604:	4b48      	ldr	r3, [pc, #288]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003614:	e006      	b.n	8003624 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
      break;
 800361a:	e004      	b.n	8003626 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800361c:	bf00      	nop
 800361e:	e002      	b.n	8003626 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003620:	bf00      	nop
 8003622:	e000      	b.n	8003626 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003624:	bf00      	nop
    }

    if(status == HAL_OK)
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10d      	bne.n	8003648 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800362c:	4b3e      	ldr	r3, [pc, #248]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	3b01      	subs	r3, #1
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	430b      	orrs	r3, r1
 8003642:	4939      	ldr	r1, [pc, #228]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003644:	4313      	orrs	r3, r2
 8003646:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d167      	bne.n	800371e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800364e:	4b36      	ldr	r3, [pc, #216]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a35      	ldr	r2, [pc, #212]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365a:	f7fe f881 	bl	8001760 <HAL_GetTick>
 800365e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003660:	e009      	b.n	8003676 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003662:	f7fe f87d 	bl	8001760 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d902      	bls.n	8003676 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	73fb      	strb	r3, [r7, #15]
        break;
 8003674:	e005      	b.n	8003682 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003676:	4b2c      	ldr	r3, [pc, #176]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1ef      	bne.n	8003662 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d14a      	bne.n	800371e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d111      	bne.n	80036b2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6892      	ldr	r2, [r2, #8]
 800369e:	0211      	lsls	r1, r2, #8
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68d2      	ldr	r2, [r2, #12]
 80036a4:	0912      	lsrs	r2, r2, #4
 80036a6:	0452      	lsls	r2, r2, #17
 80036a8:	430a      	orrs	r2, r1
 80036aa:	491f      	ldr	r1, [pc, #124]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	614b      	str	r3, [r1, #20]
 80036b0:	e011      	b.n	80036d6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036b2:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6892      	ldr	r2, [r2, #8]
 80036c2:	0211      	lsls	r1, r2, #8
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6912      	ldr	r2, [r2, #16]
 80036c8:	0852      	lsrs	r2, r2, #1
 80036ca:	3a01      	subs	r2, #1
 80036cc:	0652      	lsls	r2, r2, #25
 80036ce:	430a      	orrs	r2, r1
 80036d0:	4915      	ldr	r1, [pc, #84]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a13      	ldr	r2, [pc, #76]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fe f83d 	bl	8001760 <HAL_GetTick>
 80036e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036e8:	e009      	b.n	80036fe <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036ea:	f7fe f839 	bl	8001760 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d902      	bls.n	80036fe <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	73fb      	strb	r3, [r7, #15]
          break;
 80036fc:	e005      	b.n	800370a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0ef      	beq.n	80036ea <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <RCCEx_PLLSAI2_Config+0x1b0>)
 800371a:	4313      	orrs	r3, r2
 800371c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000

0800372c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07c      	b.n	8003838 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d106      	bne.n	800375e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7fd fe0d 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2202      	movs	r2, #2
 8003762:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003774:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800377e:	d902      	bls.n	8003786 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e002      	b.n	800378c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800378a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003794:	d007      	beq.n	80037a6 <HAL_SPI_Init+0x7a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800379e:	d002      	beq.n	80037a6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10b      	bne.n	80037c6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037b6:	d903      	bls.n	80037c0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
 80037be:	e002      	b.n	80037c6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	ea42 0103 	orr.w	r1, r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0204 	and.w	r2, r3, #4
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	ea42 0103 	orr.w	r1, r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	430a      	orrs	r2, r1
 8003826:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_SPI_Transmit+0x22>
 800385e:	2302      	movs	r3, #2
 8003860:	e150      	b.n	8003b04 <HAL_SPI_Transmit+0x2c4>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386a:	f7fd ff79 	bl	8001760 <HAL_GetTick>
 800386e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d002      	beq.n	8003886 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003880:	2302      	movs	r3, #2
 8003882:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003884:	e135      	b.n	8003af2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_SPI_Transmit+0x52>
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003896:	e12c      	b.n	8003af2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2203      	movs	r2, #3
 800389c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	88fa      	ldrh	r2, [r7, #6]
 80038b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e2:	d107      	bne.n	80038f4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d007      	beq.n	8003912 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800391a:	d94b      	bls.n	80039b4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_SPI_Transmit+0xea>
 8003924:	8afb      	ldrh	r3, [r7, #22]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d13e      	bne.n	80039a8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	881a      	ldrh	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	1c9a      	adds	r2, r3, #2
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800394e:	e02b      	b.n	80039a8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d112      	bne.n	8003984 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	881a      	ldrh	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	1c9a      	adds	r2, r3, #2
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003982:	e011      	b.n	80039a8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003984:	f7fd feec 	bl	8001760 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d803      	bhi.n	800399c <HAL_SPI_Transmit+0x15c>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800399a:	d102      	bne.n	80039a2 <HAL_SPI_Transmit+0x162>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039a6:	e0a4      	b.n	8003af2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1ce      	bne.n	8003950 <HAL_SPI_Transmit+0x110>
 80039b2:	e07c      	b.n	8003aae <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_SPI_Transmit+0x182>
 80039bc:	8afb      	ldrh	r3, [r7, #22]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d170      	bne.n	8003aa4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d912      	bls.n	80039f2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	881a      	ldrh	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	1c9a      	adds	r2, r3, #2
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b02      	subs	r3, #2
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039f0:	e058      	b.n	8003aa4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	7812      	ldrb	r2, [r2, #0]
 80039fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a18:	e044      	b.n	8003aa4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d12b      	bne.n	8003a80 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d912      	bls.n	8003a58 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	1c9a      	adds	r2, r3, #2
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b02      	subs	r3, #2
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a56:	e025      	b.n	8003aa4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	7812      	ldrb	r2, [r2, #0]
 8003a64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a7e:	e011      	b.n	8003aa4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a80:	f7fd fe6e 	bl	8001760 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d803      	bhi.n	8003a98 <HAL_SPI_Transmit+0x258>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_Transmit+0x25e>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aa2:	e026      	b.n	8003af2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1b5      	bne.n	8003a1a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	6839      	ldr	r1, [r7, #0]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fc94 	bl	80043e0 <SPI_EndRxTxTransaction>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e000      	b.n	8003af2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003af0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b28:	d112      	bne.n	8003b50 <HAL_SPI_Receive+0x44>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10e      	bne.n	8003b50 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2204      	movs	r2, #4
 8003b36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f908 	bl	8003d5c <HAL_SPI_TransmitReceive>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	e101      	b.n	8003d54 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_SPI_Receive+0x52>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e0fa      	b.n	8003d54 <HAL_SPI_Receive+0x248>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b66:	f7fd fdfb 	bl	8001760 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d002      	beq.n	8003b7e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b7c:	e0e1      	b.n	8003d42 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_SPI_Receive+0x7e>
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b8e:	e0d8      	b.n	8003d42 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2204      	movs	r2, #4
 8003b94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	88fa      	ldrh	r2, [r7, #6]
 8003ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bda:	d908      	bls.n	8003bee <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	e007      	b.n	8003bfe <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bfc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c06:	d107      	bne.n	8003c18 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d007      	beq.n	8003c36 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c3e:	d867      	bhi.n	8003d10 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c40:	e030      	b.n	8003ca4 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d117      	bne.n	8003c80 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f103 020c 	add.w	r2, r3, #12
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	7812      	ldrb	r2, [r2, #0]
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c7e:	e011      	b.n	8003ca4 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c80:	f7fd fd6e 	bl	8001760 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d803      	bhi.n	8003c98 <HAL_SPI_Receive+0x18c>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c96:	d102      	bne.n	8003c9e <HAL_SPI_Receive+0x192>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ca2:	e04e      	b.n	8003d42 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1c8      	bne.n	8003c42 <HAL_SPI_Receive+0x136>
 8003cb0:	e034      	b.n	8003d1c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d115      	bne.n	8003cec <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	b292      	uxth	r2, r2
 8003ccc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	1c9a      	adds	r2, r3, #2
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003cea:	e011      	b.n	8003d10 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cec:	f7fd fd38 	bl	8001760 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d803      	bhi.n	8003d04 <HAL_SPI_Receive+0x1f8>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d02:	d102      	bne.n	8003d0a <HAL_SPI_Receive+0x1fe>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d0e:	e018      	b.n	8003d42 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ca      	bne.n	8003cb2 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fb05 	bl	8004330 <SPI_EndRxTransaction>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
 8003d3e:	e000      	b.n	8003d42 <HAL_SPI_Receive+0x236>
  }

error :
 8003d40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x26>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e1fb      	b.n	800417a <HAL_SPI_TransmitReceive+0x41e>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d8a:	f7fd fce9 	bl	8001760 <HAL_GetTick>
 8003d8e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d96:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003da6:	7efb      	ldrb	r3, [r7, #27]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d00e      	beq.n	8003dca <HAL_SPI_TransmitReceive+0x6e>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db2:	d106      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x66>
 8003dbc:	7efb      	ldrb	r3, [r7, #27]
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d003      	beq.n	8003dca <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003dc8:	e1cd      	b.n	8004166 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_SPI_TransmitReceive+0x80>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_SPI_TransmitReceive+0x80>
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003de2:	e1c0      	b.n	8004166 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d003      	beq.n	8003df8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2205      	movs	r2, #5
 8003df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	887a      	ldrh	r2, [r7, #2]
 8003e08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	887a      	ldrh	r2, [r7, #2]
 8003e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e3a:	d802      	bhi.n	8003e42 <HAL_SPI_TransmitReceive+0xe6>
 8003e3c:	8a3b      	ldrh	r3, [r7, #16]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d908      	bls.n	8003e54 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	e007      	b.n	8003e64 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e62:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d007      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e8a:	d97c      	bls.n	8003f86 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_SPI_TransmitReceive+0x13e>
 8003e94:	8a7b      	ldrh	r3, [r7, #18]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d169      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	881a      	ldrh	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	1c9a      	adds	r2, r3, #2
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ebe:	e056      	b.n	8003f6e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d11b      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x1aa>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d016      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x1aa>
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d113      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	881a      	ldrh	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	1c9a      	adds	r2, r3, #2
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d11c      	bne.n	8003f4e <HAL_SPI_TransmitReceive+0x1f2>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d016      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	b292      	uxth	r2, r2
 8003f2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f4e:	f7fd fc07 	bl	8001760 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d807      	bhi.n	8003f6e <HAL_SPI_TransmitReceive+0x212>
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f64:	d003      	beq.n	8003f6e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f6c:	e0fb      	b.n	8004166 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1a3      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x164>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d19d      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x164>
 8003f84:	e0df      	b.n	8004146 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0x23a>
 8003f8e:	8a7b      	ldrh	r3, [r7, #18]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	f040 80cb 	bne.w	800412c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d912      	bls.n	8003fc6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	881a      	ldrh	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	1c9a      	adds	r2, r3, #2
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b02      	subs	r3, #2
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fc4:	e0b2      	b.n	800412c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	7812      	ldrb	r2, [r2, #0]
 8003fd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fec:	e09e      	b.n	800412c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d134      	bne.n	8004066 <HAL_SPI_TransmitReceive+0x30a>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d02f      	beq.n	8004066 <HAL_SPI_TransmitReceive+0x30a>
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	2b01      	cmp	r3, #1
 800400a:	d12c      	bne.n	8004066 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	d912      	bls.n	800403c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	881a      	ldrh	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	1c9a      	adds	r2, r3, #2
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b02      	subs	r3, #2
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	87da      	strh	r2, [r3, #62]	; 0x3e
 800403a:	e012      	b.n	8004062 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	7812      	ldrb	r2, [r2, #0]
 8004048:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d148      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x3aa>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d042      	beq.n	8004106 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d923      	bls.n	80040d4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	b292      	uxth	r2, r2
 8004098:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	1c9a      	adds	r2, r3, #2
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b02      	subs	r3, #2
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d81f      	bhi.n	8004102 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	e016      	b.n	8004102 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f103 020c 	add.w	r2, r3, #12
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	7812      	ldrb	r2, [r2, #0]
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004102:	2301      	movs	r3, #1
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004106:	f7fd fb2b 	bl	8001760 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004112:	429a      	cmp	r2, r3
 8004114:	d803      	bhi.n	800411e <HAL_SPI_TransmitReceive+0x3c2>
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800411c:	d102      	bne.n	8004124 <HAL_SPI_TransmitReceive+0x3c8>
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800412a:	e01c      	b.n	8004166 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	f47f af5b 	bne.w	8003fee <HAL_SPI_TransmitReceive+0x292>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	f47f af54 	bne.w	8003fee <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f948 	bl	80043e0 <SPI_EndRxTxTransaction>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d006      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	661a      	str	r2, [r3, #96]	; 0x60
 8004162:	e000      	b.n	8004166 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004164:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800417a:	4618      	mov	r0, r3
 800417c:	3728      	adds	r7, #40	; 0x28
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	4613      	mov	r3, r2
 8004190:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004192:	e04c      	b.n	800422e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800419a:	d048      	beq.n	800422e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800419c:	f7fd fae0 	bl	8001760 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d902      	bls.n	80041b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d13d      	bne.n	800422e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ca:	d111      	bne.n	80041f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d4:	d004      	beq.n	80041e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041de:	d107      	bne.n	80041f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f8:	d10f      	bne.n	800421a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004218:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e00f      	b.n	800424e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4013      	ands	r3, r2
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	bf0c      	ite	eq
 800423e:	2301      	moveq	r3, #1
 8004240:	2300      	movne	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	429a      	cmp	r2, r3
 800424a:	d1a3      	bne.n	8004194 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004264:	e057      	b.n	8004316 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800426c:	d106      	bne.n	800427c <SPI_WaitFifoStateUntilTimeout+0x26>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d103      	bne.n	800427c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004282:	d048      	beq.n	8004316 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004284:	f7fd fa6c 	bl	8001760 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d902      	bls.n	800429a <SPI_WaitFifoStateUntilTimeout+0x44>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d13d      	bne.n	8004316 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b2:	d111      	bne.n	80042d8 <SPI_WaitFifoStateUntilTimeout+0x82>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042bc:	d004      	beq.n	80042c8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c6:	d107      	bne.n	80042d8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e0:	d10f      	bne.n	8004302 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004300:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e008      	b.n	8004328 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4013      	ands	r3, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	d19f      	bne.n	8004266 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004344:	d111      	bne.n	800436a <SPI_EndRxTransaction+0x3a>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434e:	d004      	beq.n	800435a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004358:	d107      	bne.n	800436a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2200      	movs	r2, #0
 8004372:	2180      	movs	r1, #128	; 0x80
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff ff04 	bl	8004182 <SPI_WaitFlagStateUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e023      	b.n	80043d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004398:	d11d      	bne.n	80043d6 <SPI_EndRxTransaction+0xa6>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a2:	d004      	beq.n	80043ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ac:	d113      	bne.n	80043d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff ff4b 	bl	8004256 <SPI_WaitFifoStateUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e000      	b.n	80043d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff ff2c 	bl	8004256 <SPI_WaitFifoStateUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e027      	b.n	8004464 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2200      	movs	r2, #0
 800441c:	2180      	movs	r1, #128	; 0x80
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7ff feaf 	bl	8004182 <SPI_WaitFlagStateUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e014      	b.n	8004464 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2200      	movs	r2, #0
 8004442:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7ff ff05 	bl	8004256 <SPI_WaitFifoStateUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e000      	b.n	8004464 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e040      	b.n	8004500 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc ffb4 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	; 0x24
 8004498:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa72 	bl	8004994 <UART_SetConfig>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e022      	b.n	8004500 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fdd8 	bl	8005078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fe5f 	bl	80051bc <UART_CheckIdleState>
 80044fe:	4603      	mov	r3, r0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451a:	2b20      	cmp	r3, #32
 800451c:	d144      	bne.n	80045a8 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_UART_Transmit_IT+0x22>
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e03d      	b.n	80045aa <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_UART_Transmit_IT+0x34>
 8004538:	2302      	movs	r3, #2
 800453a:	e036      	b.n	80045aa <HAL_UART_Transmit_IT+0xa2>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	88fa      	ldrh	r2, [r7, #6]
 800454e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	88fa      	ldrh	r2, [r7, #6]
 8004556:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2221      	movs	r2, #33	; 0x21
 800456a:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004574:	d107      	bne.n	8004586 <HAL_UART_Transmit_IT+0x7e>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <HAL_UART_Transmit_IT+0xb0>)
 8004582:	665a      	str	r2, [r3, #100]	; 0x64
 8004584:	e002      	b.n	800458c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a0c      	ldr	r2, [pc, #48]	; (80045bc <HAL_UART_Transmit_IT+0xb4>)
 800458a:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045a2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
  }
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	0800541d 	.word	0x0800541d
 80045bc:	080053a9 	.word	0x080053a9

080045c0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80045d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f2:	2b80      	cmp	r3, #128	; 0x80
 80045f4:	d124      	bne.n	8004640 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004604:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800460a:	2b00      	cmp	r3, #0
 800460c:	d018      	beq.n	8004640 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004612:	2200      	movs	r2, #0
 8004614:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fa76 	bl	8001b0c <HAL_DMA_Abort>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00c      	beq.n	8004640 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800462a:	4618      	mov	r0, r3
 800462c:	f7fd fb9c 	bl	8001d68 <HAL_DMA_GetError>
 8004630:	4603      	mov	r3, r0
 8004632:	2b20      	cmp	r3, #32
 8004634:	d104      	bne.n	8004640 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2210      	movs	r2, #16
 800463a:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e04b      	b.n	80046d8 <HAL_UART_Abort+0x118>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d124      	bne.n	8004698 <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800465c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d018      	beq.n	8004698 <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466a:	2200      	movs	r2, #0
 800466c:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004672:	4618      	mov	r0, r3
 8004674:	f7fd fa4a 	bl	8001b0c <HAL_DMA_Abort>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00c      	beq.n	8004698 <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd fb70 	bl	8001d68 <HAL_DMA_GetError>
 8004688:	4603      	mov	r3, r0
 800468a:	2b20      	cmp	r3, #32
 800468c:	d104      	bne.n	8004698 <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2210      	movs	r2, #16
 8004692:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e01f      	b.n	80046d8 <HAL_UART_Abort+0x118>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	220f      	movs	r2, #15
 80046ae:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	8b1b      	ldrh	r3, [r3, #24]
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0208 	orr.w	r2, r2, #8
 80046c0:	b292      	uxth	r2, r2
 80046c2:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	679a      	str	r2, [r3, #120]	; 0x78

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	67da      	str	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	f640 030f 	movw	r3, #2063	; 0x80f
 8004706:	4013      	ands	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d113      	bne.n	8004738 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00e      	beq.n	8004738 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8114 	beq.w	8004956 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
      }
      return;
 8004736:	e10e      	b.n	8004956 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80d6 	beq.w	80048ec <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d105      	bne.n	8004756 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80cb 	beq.w	80048ec <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00e      	beq.n	800477e <HAL_UART_IRQHandler+0x9e>
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2201      	movs	r2, #1
 8004770:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004776:	f043 0201 	orr.w	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00e      	beq.n	80047a6 <HAL_UART_IRQHandler+0xc6>
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2202      	movs	r2, #2
 8004798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800479e:	f043 0204 	orr.w	r2, r3, #4
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00e      	beq.n	80047ce <HAL_UART_IRQHandler+0xee>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2204      	movs	r2, #4
 80047c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c6:	f043 0202 	orr.w	r2, r3, #2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d013      	beq.n	8004800 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d104      	bne.n	80047ec <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2208      	movs	r2, #8
 80047f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f8:	f043 0208 	orr.w	r2, r3, #8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00f      	beq.n	800482a <HAL_UART_IRQHandler+0x14a>
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800481c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004822:	f043 0220 	orr.w	r2, r3, #32
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8093 	beq.w	800495a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00c      	beq.n	8004858 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b40      	cmp	r3, #64	; 0x40
 800486a:	d004      	beq.n	8004876 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004872:	2b00      	cmp	r3, #0
 8004874:	d031      	beq.n	80048da <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fd60 	bl	800533c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d123      	bne.n	80048d2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004898:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d013      	beq.n	80048ca <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a6:	4a30      	ldr	r2, [pc, #192]	; (8004968 <HAL_UART_IRQHandler+0x288>)
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd f96a 	bl	8001b88 <HAL_DMA_Abort_IT>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80048c4:	4610      	mov	r0, r2
 80048c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	e00e      	b.n	80048e8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f858 	bl	8004980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e00a      	b.n	80048e8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f854 	bl	8004980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	e006      	b.n	80048e8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f850 	bl	8004980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80048e6:	e038      	b.n	800495a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	bf00      	nop
    return;
 80048ea:	e036      	b.n	800495a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <HAL_UART_IRQHandler+0x232>
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fddd 	bl	80054ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004910:	e026      	b.n	8004960 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800492a:	2b00      	cmp	r3, #0
 800492c:	d017      	beq.n	800495e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
    }
    return;
 8004936:	e012      	b.n	800495e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00e      	beq.n	8004960 <HAL_UART_IRQHandler+0x280>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fda3 	bl	8005498 <UART_EndTransmit_IT>
    return;
 8004952:	bf00      	nop
 8004954:	e004      	b.n	8004960 <HAL_UART_IRQHandler+0x280>
      return;
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <HAL_UART_IRQHandler+0x280>
    return;
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <HAL_UART_IRQHandler+0x280>
    return;
 800495e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	0800537d 	.word	0x0800537d

0800496c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004994:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004998:	b08a      	sub	sp, #40	; 0x28
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	4313      	orrs	r3, r2
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4bb8      	ldr	r3, [pc, #736]	; (8004cac <UART_SetConfig+0x318>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049d2:	430b      	orrs	r3, r1
 80049d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4aae      	ldr	r2, [pc, #696]	; (8004cb0 <UART_SetConfig+0x31c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d004      	beq.n	8004a06 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a02:	4313      	orrs	r3, r2
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	430a      	orrs	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4aa5      	ldr	r2, [pc, #660]	; (8004cb4 <UART_SetConfig+0x320>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d126      	bne.n	8004a72 <UART_SetConfig+0xde>
 8004a24:	4ba4      	ldr	r3, [pc, #656]	; (8004cb8 <UART_SetConfig+0x324>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d81a      	bhi.n	8004a68 <UART_SetConfig+0xd4>
 8004a32:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <UART_SetConfig+0xa4>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a59 	.word	0x08004a59
 8004a40:	08004a51 	.word	0x08004a51
 8004a44:	08004a61 	.word	0x08004a61
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4e:	e105      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004a50:	2302      	movs	r3, #2
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a56:	e101      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5e:	e0fd      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004a60:	2308      	movs	r3, #8
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a66:	e0f9      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6e:	bf00      	nop
 8004a70:	e0f4      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a91      	ldr	r2, [pc, #580]	; (8004cbc <UART_SetConfig+0x328>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d138      	bne.n	8004aee <UART_SetConfig+0x15a>
 8004a7c:	4b8e      	ldr	r3, [pc, #568]	; (8004cb8 <UART_SetConfig+0x324>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d82c      	bhi.n	8004ae4 <UART_SetConfig+0x150>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <UART_SetConfig+0xfc>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004ac5 	.word	0x08004ac5
 8004a94:	08004ae5 	.word	0x08004ae5
 8004a98:	08004ae5 	.word	0x08004ae5
 8004a9c:	08004ae5 	.word	0x08004ae5
 8004aa0:	08004ad5 	.word	0x08004ad5
 8004aa4:	08004ae5 	.word	0x08004ae5
 8004aa8:	08004ae5 	.word	0x08004ae5
 8004aac:	08004ae5 	.word	0x08004ae5
 8004ab0:	08004acd 	.word	0x08004acd
 8004ab4:	08004ae5 	.word	0x08004ae5
 8004ab8:	08004ae5 	.word	0x08004ae5
 8004abc:	08004ae5 	.word	0x08004ae5
 8004ac0:	08004add 	.word	0x08004add
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aca:	e0c7      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004acc:	2302      	movs	r3, #2
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e0c3      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e0bf      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004adc:	2308      	movs	r3, #8
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e0bb      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aea:	bf00      	nop
 8004aec:	e0b6      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a73      	ldr	r2, [pc, #460]	; (8004cc0 <UART_SetConfig+0x32c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d125      	bne.n	8004b44 <UART_SetConfig+0x1b0>
 8004af8:	4b6f      	ldr	r3, [pc, #444]	; (8004cb8 <UART_SetConfig+0x324>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b02:	2b10      	cmp	r3, #16
 8004b04:	d011      	beq.n	8004b2a <UART_SetConfig+0x196>
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d802      	bhi.n	8004b10 <UART_SetConfig+0x17c>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <UART_SetConfig+0x186>
 8004b0e:	e014      	b.n	8004b3a <UART_SetConfig+0x1a6>
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d006      	beq.n	8004b22 <UART_SetConfig+0x18e>
 8004b14:	2b30      	cmp	r3, #48	; 0x30
 8004b16:	d00c      	beq.n	8004b32 <UART_SetConfig+0x19e>
 8004b18:	e00f      	b.n	8004b3a <UART_SetConfig+0x1a6>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b20:	e09c      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004b22:	2302      	movs	r3, #2
 8004b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b28:	e098      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004b2a:	2304      	movs	r3, #4
 8004b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b30:	e094      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004b32:	2308      	movs	r3, #8
 8004b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b38:	e090      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004b3a:	2310      	movs	r3, #16
 8004b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b40:	bf00      	nop
 8004b42:	e08b      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a5e      	ldr	r2, [pc, #376]	; (8004cc4 <UART_SetConfig+0x330>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d125      	bne.n	8004b9a <UART_SetConfig+0x206>
 8004b4e:	4b5a      	ldr	r3, [pc, #360]	; (8004cb8 <UART_SetConfig+0x324>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d011      	beq.n	8004b80 <UART_SetConfig+0x1ec>
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d802      	bhi.n	8004b66 <UART_SetConfig+0x1d2>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <UART_SetConfig+0x1dc>
 8004b64:	e014      	b.n	8004b90 <UART_SetConfig+0x1fc>
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d006      	beq.n	8004b78 <UART_SetConfig+0x1e4>
 8004b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b6c:	d00c      	beq.n	8004b88 <UART_SetConfig+0x1f4>
 8004b6e:	e00f      	b.n	8004b90 <UART_SetConfig+0x1fc>
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e071      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e06d      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004b80:	2304      	movs	r3, #4
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e069      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8e:	e065      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004b90:	2310      	movs	r3, #16
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b96:	bf00      	nop
 8004b98:	e060      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a4a      	ldr	r2, [pc, #296]	; (8004cc8 <UART_SetConfig+0x334>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d129      	bne.n	8004bf8 <UART_SetConfig+0x264>
 8004ba4:	4b44      	ldr	r3, [pc, #272]	; (8004cb8 <UART_SetConfig+0x324>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb2:	d014      	beq.n	8004bde <UART_SetConfig+0x24a>
 8004bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb8:	d802      	bhi.n	8004bc0 <UART_SetConfig+0x22c>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <UART_SetConfig+0x23a>
 8004bbe:	e016      	b.n	8004bee <UART_SetConfig+0x25a>
 8004bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc4:	d007      	beq.n	8004bd6 <UART_SetConfig+0x242>
 8004bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bca:	d00c      	beq.n	8004be6 <UART_SetConfig+0x252>
 8004bcc:	e00f      	b.n	8004bee <UART_SetConfig+0x25a>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd4:	e042      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bdc:	e03e      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004bde:	2304      	movs	r3, #4
 8004be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be4:	e03a      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004be6:	2308      	movs	r3, #8
 8004be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bec:	e036      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004bee:	2310      	movs	r3, #16
 8004bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf4:	bf00      	nop
 8004bf6:	e031      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2c      	ldr	r2, [pc, #176]	; (8004cb0 <UART_SetConfig+0x31c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d129      	bne.n	8004c56 <UART_SetConfig+0x2c2>
 8004c02:	4b2d      	ldr	r3, [pc, #180]	; (8004cb8 <UART_SetConfig+0x324>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c10:	d014      	beq.n	8004c3c <UART_SetConfig+0x2a8>
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c16:	d802      	bhi.n	8004c1e <UART_SetConfig+0x28a>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <UART_SetConfig+0x298>
 8004c1c:	e016      	b.n	8004c4c <UART_SetConfig+0x2b8>
 8004c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c22:	d007      	beq.n	8004c34 <UART_SetConfig+0x2a0>
 8004c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c28:	d00c      	beq.n	8004c44 <UART_SetConfig+0x2b0>
 8004c2a:	e00f      	b.n	8004c4c <UART_SetConfig+0x2b8>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e013      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004c34:	2302      	movs	r3, #2
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e00f      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e00b      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004c44:	2308      	movs	r3, #8
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4a:	e007      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <UART_SetConfig+0x2c8>
 8004c56:	2310      	movs	r3, #16
 8004c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <UART_SetConfig+0x31c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	f040 80fe 	bne.w	8004e64 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d837      	bhi.n	8004ce0 <UART_SetConfig+0x34c>
 8004c70:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <UART_SetConfig+0x2e4>)
 8004c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c76:	bf00      	nop
 8004c78:	08004c9d 	.word	0x08004c9d
 8004c7c:	08004ce1 	.word	0x08004ce1
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004ce1 	.word	0x08004ce1
 8004c88:	08004cd1 	.word	0x08004cd1
 8004c8c:	08004ce1 	.word	0x08004ce1
 8004c90:	08004ce1 	.word	0x08004ce1
 8004c94:	08004ce1 	.word	0x08004ce1
 8004c98:	08004cd9 	.word	0x08004cd9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004c9c:	f7fe f80a 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004ca0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ca2:	e020      	b.n	8004ce6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004ca4:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <UART_SetConfig+0x338>)
 8004ca6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ca8:	e01d      	b.n	8004ce6 <UART_SetConfig+0x352>
 8004caa:	bf00      	nop
 8004cac:	efff69f3 	.word	0xefff69f3
 8004cb0:	40008000 	.word	0x40008000
 8004cb4:	40013800 	.word	0x40013800
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	40004400 	.word	0x40004400
 8004cc0:	40004800 	.word	0x40004800
 8004cc4:	40004c00 	.word	0x40004c00
 8004cc8:	40005000 	.word	0x40005000
 8004ccc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004cd0:	f7fd ff5a 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8004cd4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cd6:	e006      	b.n	8004ce6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cdc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cde:	e002      	b.n	8004ce6 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	76fb      	strb	r3, [r7, #27]
        break;
 8004ce4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 81b9 	beq.w	8005060 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	4413      	add	r3, r2
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d305      	bcc.n	8004d0a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d902      	bls.n	8004d10 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	76fb      	strb	r3, [r7, #27]
 8004d0e:	e1a7      	b.n	8005060 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	f200 8092 	bhi.w	8004e3e <UART_SetConfig+0x4aa>
 8004d1a:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0x38c>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08004e3f 	.word	0x08004e3f
 8004d28:	08004d93 	.word	0x08004d93
 8004d2c:	08004e3f 	.word	0x08004e3f
 8004d30:	08004dc7 	.word	0x08004dc7
 8004d34:	08004e3f 	.word	0x08004e3f
 8004d38:	08004e3f 	.word	0x08004e3f
 8004d3c:	08004e3f 	.word	0x08004e3f
 8004d40:	08004e15 	.word	0x08004e15
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004d44:	f7fd ffb6 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004d48:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	f04f 0400 	mov.w	r4, #0
 8004d5a:	0214      	lsls	r4, r2, #8
 8004d5c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004d60:	020b      	lsls	r3, r1, #8
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6852      	ldr	r2, [r2, #4]
 8004d66:	0852      	lsrs	r2, r2, #1
 8004d68:	4611      	mov	r1, r2
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	eb13 0b01 	adds.w	fp, r3, r1
 8004d72:	eb44 0c02 	adc.w	ip, r4, r2
 8004d76:	4658      	mov	r0, fp
 8004d78:	4661      	mov	r1, ip
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f04f 0400 	mov.w	r4, #0
 8004d82:	461a      	mov	r2, r3
 8004d84:	4623      	mov	r3, r4
 8004d86:	f7fb fa73 	bl	8000270 <__aeabi_uldivmod>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d90:	e058      	b.n	8004e44 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	f04f 0400 	mov.w	r4, #0
 8004d9c:	49ae      	ldr	r1, [pc, #696]	; (8005058 <UART_SetConfig+0x6c4>)
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	eb13 0b01 	adds.w	fp, r3, r1
 8004da6:	eb44 0c02 	adc.w	ip, r4, r2
 8004daa:	4658      	mov	r0, fp
 8004dac:	4661      	mov	r1, ip
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f04f 0400 	mov.w	r4, #0
 8004db6:	461a      	mov	r2, r3
 8004db8:	4623      	mov	r3, r4
 8004dba:	f7fb fa59 	bl	8000270 <__aeabi_uldivmod>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004dc4:	e03e      	b.n	8004e44 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004dc6:	f7fd fedf 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8004dca:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	f04f 0400 	mov.w	r4, #0
 8004ddc:	0214      	lsls	r4, r2, #8
 8004dde:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004de2:	020b      	lsls	r3, r1, #8
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6852      	ldr	r2, [r2, #4]
 8004de8:	0852      	lsrs	r2, r2, #1
 8004dea:	4611      	mov	r1, r2
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	eb13 0b01 	adds.w	fp, r3, r1
 8004df4:	eb44 0c02 	adc.w	ip, r4, r2
 8004df8:	4658      	mov	r0, fp
 8004dfa:	4661      	mov	r1, ip
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f04f 0400 	mov.w	r4, #0
 8004e04:	461a      	mov	r2, r3
 8004e06:	4623      	mov	r3, r4
 8004e08:	f7fb fa32 	bl	8000270 <__aeabi_uldivmod>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e12:	e017      	b.n	8004e44 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	f04f 0400 	mov.w	r4, #0
 8004e1e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004e22:	f144 0100 	adc.w	r1, r4, #0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f04f 0400 	mov.w	r4, #0
 8004e2e:	461a      	mov	r2, r3
 8004e30:	4623      	mov	r3, r4
 8004e32:	f7fb fa1d 	bl	8000270 <__aeabi_uldivmod>
 8004e36:	4603      	mov	r3, r0
 8004e38:	460c      	mov	r4, r1
 8004e3a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e3c:	e002      	b.n	8004e44 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	76fb      	strb	r3, [r7, #27]
            break;
 8004e42:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4a:	d308      	bcc.n	8004e5e <UART_SetConfig+0x4ca>
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e52:	d204      	bcs.n	8004e5e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	60da      	str	r2, [r3, #12]
 8004e5c:	e100      	b.n	8005060 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	76fb      	strb	r3, [r7, #27]
 8004e62:	e0fd      	b.n	8005060 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6c:	f040 8084 	bne.w	8004f78 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004e70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d85f      	bhi.n	8004f38 <UART_SetConfig+0x5a4>
 8004e78:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <UART_SetConfig+0x4ec>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ec5 	.word	0x08004ec5
 8004e88:	08004ee5 	.word	0x08004ee5
 8004e8c:	08004f39 	.word	0x08004f39
 8004e90:	08004f01 	.word	0x08004f01
 8004e94:	08004f39 	.word	0x08004f39
 8004e98:	08004f39 	.word	0x08004f39
 8004e9c:	08004f39 	.word	0x08004f39
 8004ea0:	08004f21 	.word	0x08004f21
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea4:	f7fd ff06 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004ea8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	005a      	lsls	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ec2:	e03c      	b.n	8004f3e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ec4:	f7fd ff0c 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 8004ec8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	005a      	lsls	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	085b      	lsrs	r3, r3, #1
 8004ed4:	441a      	add	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ee2:	e02c      	b.n	8004f3e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004eee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6852      	ldr	r2, [r2, #4]
 8004ef6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004efe:	e01e      	b.n	8004f3e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f00:	f7fd fe42 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8004f04:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	005a      	lsls	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	441a      	add	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f1e:	e00e      	b.n	8004f3e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f36:	e002      	b.n	8004f3e <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	76fb      	strb	r3, [r7, #27]
        break;
 8004f3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	2b0f      	cmp	r3, #15
 8004f42:	d916      	bls.n	8004f72 <UART_SetConfig+0x5de>
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4a:	d212      	bcs.n	8004f72 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f023 030f 	bic.w	r3, r3, #15
 8004f54:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	89fb      	ldrh	r3, [r7, #14]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	89fa      	ldrh	r2, [r7, #14]
 8004f6e:	60da      	str	r2, [r3, #12]
 8004f70:	e076      	b.n	8005060 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	76fb      	strb	r3, [r7, #27]
 8004f76:	e073      	b.n	8005060 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d85c      	bhi.n	800503a <UART_SetConfig+0x6a6>
 8004f80:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <UART_SetConfig+0x5f4>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fcb 	.word	0x08004fcb
 8004f90:	08004fe9 	.word	0x08004fe9
 8004f94:	0800503b 	.word	0x0800503b
 8004f98:	08005005 	.word	0x08005005
 8004f9c:	0800503b 	.word	0x0800503b
 8004fa0:	0800503b 	.word	0x0800503b
 8004fa4:	0800503b 	.word	0x0800503b
 8004fa8:	08005023 	.word	0x08005023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fd fe82 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	085a      	lsrs	r2, r3, #1
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	441a      	add	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fc8:	e03a      	b.n	8005040 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fca:	f7fd fe89 	bl	8002ce0 <HAL_RCC_GetPCLK2Freq>
 8004fce:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	085a      	lsrs	r2, r3, #1
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fe6:	e02b      	b.n	8005040 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004ff2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6852      	ldr	r2, [r2, #4]
 8004ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005002:	e01d      	b.n	8005040 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005004:	f7fd fdc0 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8005008:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	085a      	lsrs	r2, r3, #1
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	441a      	add	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	b29b      	uxth	r3, r3
 800501e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005020:	e00e      	b.n	8005040 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	b29b      	uxth	r3, r3
 8005036:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005038:	e002      	b.n	8005040 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	76fb      	strb	r3, [r7, #27]
        break;
 800503e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	2b0f      	cmp	r3, #15
 8005044:	d90a      	bls.n	800505c <UART_SetConfig+0x6c8>
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504c:	d206      	bcs.n	800505c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	e003      	b.n	8005060 <UART_SetConfig+0x6cc>
 8005058:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800506c:	7efb      	ldrb	r3, [r7, #27]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3728      	adds	r7, #40	; 0x28
 8005072:	46bd      	mov	sp, r7
 8005074:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01a      	beq.n	800518e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005176:	d10a      	bne.n	800518e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
  }
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80051ca:	f7fc fac9 	bl	8001760 <HAL_GetTick>
 80051ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d10e      	bne.n	80051fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f82a 	bl	8005246 <UART_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e020      	b.n	800523e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b04      	cmp	r3, #4
 8005208:	d10e      	bne.n	8005228 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800520a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f814 	bl	8005246 <UART_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e00a      	b.n	800523e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005256:	e05d      	b.n	8005314 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800525e:	d059      	beq.n	8005314 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005260:	f7fc fa7e 	bl	8001760 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	429a      	cmp	r2, r3
 800526e:	d302      	bcc.n	8005276 <UART_WaitOnFlagUntilTimeout+0x30>
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d11b      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005284:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e042      	b.n	8005334 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02b      	beq.n	8005314 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ca:	d123      	bne.n	8005314 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052e4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e00f      	b.n	8005334 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4013      	ands	r3, r2
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	429a      	cmp	r2, r3
 8005322:	bf0c      	ite	eq
 8005324:	2301      	moveq	r3, #1
 8005326:	2300      	movne	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	429a      	cmp	r2, r3
 8005330:	d092      	beq.n	8005258 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005352:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0201 	bic.w	r2, r2, #1
 8005362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7ff faf0 	bl	8004980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b4:	2b21      	cmp	r3, #33	; 0x21
 80053b6:	d12b      	bne.n	8005410 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d110      	bne.n	80053e6 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80053e4:	e014      	b.n	8005410 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ea:	781a      	ldrb	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	b292      	uxth	r2, r2
 80053f2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005428:	2b21      	cmp	r3, #33	; 0x21
 800542a:	d12f      	bne.n	800548c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d110      	bne.n	800545a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005446:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005456:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005458:	e018      	b.n	800548c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	881a      	ldrh	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800546c:	b292      	uxth	r2, r2
 800546e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005474:	1c9a      	adds	r2, r3, #2
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff fa55 	bl	800496c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <__errno>:
 80054e0:	4b01      	ldr	r3, [pc, #4]	; (80054e8 <__errno+0x8>)
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	2000000c 	.word	0x2000000c

080054ec <__libc_init_array>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	4e0d      	ldr	r6, [pc, #52]	; (8005524 <__libc_init_array+0x38>)
 80054f0:	4c0d      	ldr	r4, [pc, #52]	; (8005528 <__libc_init_array+0x3c>)
 80054f2:	1ba4      	subs	r4, r4, r6
 80054f4:	10a4      	asrs	r4, r4, #2
 80054f6:	2500      	movs	r5, #0
 80054f8:	42a5      	cmp	r5, r4
 80054fa:	d109      	bne.n	8005510 <__libc_init_array+0x24>
 80054fc:	4e0b      	ldr	r6, [pc, #44]	; (800552c <__libc_init_array+0x40>)
 80054fe:	4c0c      	ldr	r4, [pc, #48]	; (8005530 <__libc_init_array+0x44>)
 8005500:	f000 fc26 	bl	8005d50 <_init>
 8005504:	1ba4      	subs	r4, r4, r6
 8005506:	10a4      	asrs	r4, r4, #2
 8005508:	2500      	movs	r5, #0
 800550a:	42a5      	cmp	r5, r4
 800550c:	d105      	bne.n	800551a <__libc_init_array+0x2e>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005514:	4798      	blx	r3
 8005516:	3501      	adds	r5, #1
 8005518:	e7ee      	b.n	80054f8 <__libc_init_array+0xc>
 800551a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800551e:	4798      	blx	r3
 8005520:	3501      	adds	r5, #1
 8005522:	e7f2      	b.n	800550a <__libc_init_array+0x1e>
 8005524:	08005f24 	.word	0x08005f24
 8005528:	08005f24 	.word	0x08005f24
 800552c:	08005f24 	.word	0x08005f24
 8005530:	08005f28 	.word	0x08005f28

08005534 <memset>:
 8005534:	4402      	add	r2, r0
 8005536:	4603      	mov	r3, r0
 8005538:	4293      	cmp	r3, r2
 800553a:	d100      	bne.n	800553e <memset+0xa>
 800553c:	4770      	bx	lr
 800553e:	f803 1b01 	strb.w	r1, [r3], #1
 8005542:	e7f9      	b.n	8005538 <memset+0x4>

08005544 <siprintf>:
 8005544:	b40e      	push	{r1, r2, r3}
 8005546:	b500      	push	{lr}
 8005548:	b09c      	sub	sp, #112	; 0x70
 800554a:	ab1d      	add	r3, sp, #116	; 0x74
 800554c:	9002      	str	r0, [sp, #8]
 800554e:	9006      	str	r0, [sp, #24]
 8005550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005554:	4809      	ldr	r0, [pc, #36]	; (800557c <siprintf+0x38>)
 8005556:	9107      	str	r1, [sp, #28]
 8005558:	9104      	str	r1, [sp, #16]
 800555a:	4909      	ldr	r1, [pc, #36]	; (8005580 <siprintf+0x3c>)
 800555c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005560:	9105      	str	r1, [sp, #20]
 8005562:	6800      	ldr	r0, [r0, #0]
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	a902      	add	r1, sp, #8
 8005568:	f000 f866 	bl	8005638 <_svfiprintf_r>
 800556c:	9b02      	ldr	r3, [sp, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	b01c      	add	sp, #112	; 0x70
 8005574:	f85d eb04 	ldr.w	lr, [sp], #4
 8005578:	b003      	add	sp, #12
 800557a:	4770      	bx	lr
 800557c:	2000000c 	.word	0x2000000c
 8005580:	ffff0208 	.word	0xffff0208

08005584 <__ssputs_r>:
 8005584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	688e      	ldr	r6, [r1, #8]
 800558a:	429e      	cmp	r6, r3
 800558c:	4682      	mov	sl, r0
 800558e:	460c      	mov	r4, r1
 8005590:	4690      	mov	r8, r2
 8005592:	4699      	mov	r9, r3
 8005594:	d837      	bhi.n	8005606 <__ssputs_r+0x82>
 8005596:	898a      	ldrh	r2, [r1, #12]
 8005598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800559c:	d031      	beq.n	8005602 <__ssputs_r+0x7e>
 800559e:	6825      	ldr	r5, [r4, #0]
 80055a0:	6909      	ldr	r1, [r1, #16]
 80055a2:	1a6f      	subs	r7, r5, r1
 80055a4:	6965      	ldr	r5, [r4, #20]
 80055a6:	2302      	movs	r3, #2
 80055a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80055b0:	f109 0301 	add.w	r3, r9, #1
 80055b4:	443b      	add	r3, r7
 80055b6:	429d      	cmp	r5, r3
 80055b8:	bf38      	it	cc
 80055ba:	461d      	movcc	r5, r3
 80055bc:	0553      	lsls	r3, r2, #21
 80055be:	d530      	bpl.n	8005622 <__ssputs_r+0x9e>
 80055c0:	4629      	mov	r1, r5
 80055c2:	f000 fb2b 	bl	8005c1c <_malloc_r>
 80055c6:	4606      	mov	r6, r0
 80055c8:	b950      	cbnz	r0, 80055e0 <__ssputs_r+0x5c>
 80055ca:	230c      	movs	r3, #12
 80055cc:	f8ca 3000 	str.w	r3, [sl]
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d6:	81a3      	strh	r3, [r4, #12]
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e0:	463a      	mov	r2, r7
 80055e2:	6921      	ldr	r1, [r4, #16]
 80055e4:	f000 faa8 	bl	8005b38 <memcpy>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	6126      	str	r6, [r4, #16]
 80055f6:	6165      	str	r5, [r4, #20]
 80055f8:	443e      	add	r6, r7
 80055fa:	1bed      	subs	r5, r5, r7
 80055fc:	6026      	str	r6, [r4, #0]
 80055fe:	60a5      	str	r5, [r4, #8]
 8005600:	464e      	mov	r6, r9
 8005602:	454e      	cmp	r6, r9
 8005604:	d900      	bls.n	8005608 <__ssputs_r+0x84>
 8005606:	464e      	mov	r6, r9
 8005608:	4632      	mov	r2, r6
 800560a:	4641      	mov	r1, r8
 800560c:	6820      	ldr	r0, [r4, #0]
 800560e:	f000 fa9e 	bl	8005b4e <memmove>
 8005612:	68a3      	ldr	r3, [r4, #8]
 8005614:	1b9b      	subs	r3, r3, r6
 8005616:	60a3      	str	r3, [r4, #8]
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	441e      	add	r6, r3
 800561c:	6026      	str	r6, [r4, #0]
 800561e:	2000      	movs	r0, #0
 8005620:	e7dc      	b.n	80055dc <__ssputs_r+0x58>
 8005622:	462a      	mov	r2, r5
 8005624:	f000 fb54 	bl	8005cd0 <_realloc_r>
 8005628:	4606      	mov	r6, r0
 800562a:	2800      	cmp	r0, #0
 800562c:	d1e2      	bne.n	80055f4 <__ssputs_r+0x70>
 800562e:	6921      	ldr	r1, [r4, #16]
 8005630:	4650      	mov	r0, sl
 8005632:	f000 faa5 	bl	8005b80 <_free_r>
 8005636:	e7c8      	b.n	80055ca <__ssputs_r+0x46>

08005638 <_svfiprintf_r>:
 8005638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	461d      	mov	r5, r3
 800563e:	898b      	ldrh	r3, [r1, #12]
 8005640:	061f      	lsls	r7, r3, #24
 8005642:	b09d      	sub	sp, #116	; 0x74
 8005644:	4680      	mov	r8, r0
 8005646:	460c      	mov	r4, r1
 8005648:	4616      	mov	r6, r2
 800564a:	d50f      	bpl.n	800566c <_svfiprintf_r+0x34>
 800564c:	690b      	ldr	r3, [r1, #16]
 800564e:	b96b      	cbnz	r3, 800566c <_svfiprintf_r+0x34>
 8005650:	2140      	movs	r1, #64	; 0x40
 8005652:	f000 fae3 	bl	8005c1c <_malloc_r>
 8005656:	6020      	str	r0, [r4, #0]
 8005658:	6120      	str	r0, [r4, #16]
 800565a:	b928      	cbnz	r0, 8005668 <_svfiprintf_r+0x30>
 800565c:	230c      	movs	r3, #12
 800565e:	f8c8 3000 	str.w	r3, [r8]
 8005662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005666:	e0c8      	b.n	80057fa <_svfiprintf_r+0x1c2>
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	6163      	str	r3, [r4, #20]
 800566c:	2300      	movs	r3, #0
 800566e:	9309      	str	r3, [sp, #36]	; 0x24
 8005670:	2320      	movs	r3, #32
 8005672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005676:	2330      	movs	r3, #48	; 0x30
 8005678:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800567c:	9503      	str	r5, [sp, #12]
 800567e:	f04f 0b01 	mov.w	fp, #1
 8005682:	4637      	mov	r7, r6
 8005684:	463d      	mov	r5, r7
 8005686:	f815 3b01 	ldrb.w	r3, [r5], #1
 800568a:	b10b      	cbz	r3, 8005690 <_svfiprintf_r+0x58>
 800568c:	2b25      	cmp	r3, #37	; 0x25
 800568e:	d13e      	bne.n	800570e <_svfiprintf_r+0xd6>
 8005690:	ebb7 0a06 	subs.w	sl, r7, r6
 8005694:	d00b      	beq.n	80056ae <_svfiprintf_r+0x76>
 8005696:	4653      	mov	r3, sl
 8005698:	4632      	mov	r2, r6
 800569a:	4621      	mov	r1, r4
 800569c:	4640      	mov	r0, r8
 800569e:	f7ff ff71 	bl	8005584 <__ssputs_r>
 80056a2:	3001      	adds	r0, #1
 80056a4:	f000 80a4 	beq.w	80057f0 <_svfiprintf_r+0x1b8>
 80056a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056aa:	4453      	add	r3, sl
 80056ac:	9309      	str	r3, [sp, #36]	; 0x24
 80056ae:	783b      	ldrb	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 809d 	beq.w	80057f0 <_svfiprintf_r+0x1b8>
 80056b6:	2300      	movs	r3, #0
 80056b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056c0:	9304      	str	r3, [sp, #16]
 80056c2:	9307      	str	r3, [sp, #28]
 80056c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056c8:	931a      	str	r3, [sp, #104]	; 0x68
 80056ca:	462f      	mov	r7, r5
 80056cc:	2205      	movs	r2, #5
 80056ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80056d2:	4850      	ldr	r0, [pc, #320]	; (8005814 <_svfiprintf_r+0x1dc>)
 80056d4:	f7fa fd7c 	bl	80001d0 <memchr>
 80056d8:	9b04      	ldr	r3, [sp, #16]
 80056da:	b9d0      	cbnz	r0, 8005712 <_svfiprintf_r+0xda>
 80056dc:	06d9      	lsls	r1, r3, #27
 80056de:	bf44      	itt	mi
 80056e0:	2220      	movmi	r2, #32
 80056e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056e6:	071a      	lsls	r2, r3, #28
 80056e8:	bf44      	itt	mi
 80056ea:	222b      	movmi	r2, #43	; 0x2b
 80056ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056f0:	782a      	ldrb	r2, [r5, #0]
 80056f2:	2a2a      	cmp	r2, #42	; 0x2a
 80056f4:	d015      	beq.n	8005722 <_svfiprintf_r+0xea>
 80056f6:	9a07      	ldr	r2, [sp, #28]
 80056f8:	462f      	mov	r7, r5
 80056fa:	2000      	movs	r0, #0
 80056fc:	250a      	movs	r5, #10
 80056fe:	4639      	mov	r1, r7
 8005700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005704:	3b30      	subs	r3, #48	; 0x30
 8005706:	2b09      	cmp	r3, #9
 8005708:	d94d      	bls.n	80057a6 <_svfiprintf_r+0x16e>
 800570a:	b1b8      	cbz	r0, 800573c <_svfiprintf_r+0x104>
 800570c:	e00f      	b.n	800572e <_svfiprintf_r+0xf6>
 800570e:	462f      	mov	r7, r5
 8005710:	e7b8      	b.n	8005684 <_svfiprintf_r+0x4c>
 8005712:	4a40      	ldr	r2, [pc, #256]	; (8005814 <_svfiprintf_r+0x1dc>)
 8005714:	1a80      	subs	r0, r0, r2
 8005716:	fa0b f000 	lsl.w	r0, fp, r0
 800571a:	4318      	orrs	r0, r3
 800571c:	9004      	str	r0, [sp, #16]
 800571e:	463d      	mov	r5, r7
 8005720:	e7d3      	b.n	80056ca <_svfiprintf_r+0x92>
 8005722:	9a03      	ldr	r2, [sp, #12]
 8005724:	1d11      	adds	r1, r2, #4
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	9103      	str	r1, [sp, #12]
 800572a:	2a00      	cmp	r2, #0
 800572c:	db01      	blt.n	8005732 <_svfiprintf_r+0xfa>
 800572e:	9207      	str	r2, [sp, #28]
 8005730:	e004      	b.n	800573c <_svfiprintf_r+0x104>
 8005732:	4252      	negs	r2, r2
 8005734:	f043 0302 	orr.w	r3, r3, #2
 8005738:	9207      	str	r2, [sp, #28]
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	783b      	ldrb	r3, [r7, #0]
 800573e:	2b2e      	cmp	r3, #46	; 0x2e
 8005740:	d10c      	bne.n	800575c <_svfiprintf_r+0x124>
 8005742:	787b      	ldrb	r3, [r7, #1]
 8005744:	2b2a      	cmp	r3, #42	; 0x2a
 8005746:	d133      	bne.n	80057b0 <_svfiprintf_r+0x178>
 8005748:	9b03      	ldr	r3, [sp, #12]
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	9203      	str	r2, [sp, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	bfb8      	it	lt
 8005754:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005758:	3702      	adds	r7, #2
 800575a:	9305      	str	r3, [sp, #20]
 800575c:	4d2e      	ldr	r5, [pc, #184]	; (8005818 <_svfiprintf_r+0x1e0>)
 800575e:	7839      	ldrb	r1, [r7, #0]
 8005760:	2203      	movs	r2, #3
 8005762:	4628      	mov	r0, r5
 8005764:	f7fa fd34 	bl	80001d0 <memchr>
 8005768:	b138      	cbz	r0, 800577a <_svfiprintf_r+0x142>
 800576a:	2340      	movs	r3, #64	; 0x40
 800576c:	1b40      	subs	r0, r0, r5
 800576e:	fa03 f000 	lsl.w	r0, r3, r0
 8005772:	9b04      	ldr	r3, [sp, #16]
 8005774:	4303      	orrs	r3, r0
 8005776:	3701      	adds	r7, #1
 8005778:	9304      	str	r3, [sp, #16]
 800577a:	7839      	ldrb	r1, [r7, #0]
 800577c:	4827      	ldr	r0, [pc, #156]	; (800581c <_svfiprintf_r+0x1e4>)
 800577e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005782:	2206      	movs	r2, #6
 8005784:	1c7e      	adds	r6, r7, #1
 8005786:	f7fa fd23 	bl	80001d0 <memchr>
 800578a:	2800      	cmp	r0, #0
 800578c:	d038      	beq.n	8005800 <_svfiprintf_r+0x1c8>
 800578e:	4b24      	ldr	r3, [pc, #144]	; (8005820 <_svfiprintf_r+0x1e8>)
 8005790:	bb13      	cbnz	r3, 80057d8 <_svfiprintf_r+0x1a0>
 8005792:	9b03      	ldr	r3, [sp, #12]
 8005794:	3307      	adds	r3, #7
 8005796:	f023 0307 	bic.w	r3, r3, #7
 800579a:	3308      	adds	r3, #8
 800579c:	9303      	str	r3, [sp, #12]
 800579e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a0:	444b      	add	r3, r9
 80057a2:	9309      	str	r3, [sp, #36]	; 0x24
 80057a4:	e76d      	b.n	8005682 <_svfiprintf_r+0x4a>
 80057a6:	fb05 3202 	mla	r2, r5, r2, r3
 80057aa:	2001      	movs	r0, #1
 80057ac:	460f      	mov	r7, r1
 80057ae:	e7a6      	b.n	80056fe <_svfiprintf_r+0xc6>
 80057b0:	2300      	movs	r3, #0
 80057b2:	3701      	adds	r7, #1
 80057b4:	9305      	str	r3, [sp, #20]
 80057b6:	4619      	mov	r1, r3
 80057b8:	250a      	movs	r5, #10
 80057ba:	4638      	mov	r0, r7
 80057bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057c0:	3a30      	subs	r2, #48	; 0x30
 80057c2:	2a09      	cmp	r2, #9
 80057c4:	d903      	bls.n	80057ce <_svfiprintf_r+0x196>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0c8      	beq.n	800575c <_svfiprintf_r+0x124>
 80057ca:	9105      	str	r1, [sp, #20]
 80057cc:	e7c6      	b.n	800575c <_svfiprintf_r+0x124>
 80057ce:	fb05 2101 	mla	r1, r5, r1, r2
 80057d2:	2301      	movs	r3, #1
 80057d4:	4607      	mov	r7, r0
 80057d6:	e7f0      	b.n	80057ba <_svfiprintf_r+0x182>
 80057d8:	ab03      	add	r3, sp, #12
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	4622      	mov	r2, r4
 80057de:	4b11      	ldr	r3, [pc, #68]	; (8005824 <_svfiprintf_r+0x1ec>)
 80057e0:	a904      	add	r1, sp, #16
 80057e2:	4640      	mov	r0, r8
 80057e4:	f3af 8000 	nop.w
 80057e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80057ec:	4681      	mov	r9, r0
 80057ee:	d1d6      	bne.n	800579e <_svfiprintf_r+0x166>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	065b      	lsls	r3, r3, #25
 80057f4:	f53f af35 	bmi.w	8005662 <_svfiprintf_r+0x2a>
 80057f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057fa:	b01d      	add	sp, #116	; 0x74
 80057fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005800:	ab03      	add	r3, sp, #12
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4622      	mov	r2, r4
 8005806:	4b07      	ldr	r3, [pc, #28]	; (8005824 <_svfiprintf_r+0x1ec>)
 8005808:	a904      	add	r1, sp, #16
 800580a:	4640      	mov	r0, r8
 800580c:	f000 f882 	bl	8005914 <_printf_i>
 8005810:	e7ea      	b.n	80057e8 <_svfiprintf_r+0x1b0>
 8005812:	bf00      	nop
 8005814:	08005ee8 	.word	0x08005ee8
 8005818:	08005eee 	.word	0x08005eee
 800581c:	08005ef2 	.word	0x08005ef2
 8005820:	00000000 	.word	0x00000000
 8005824:	08005585 	.word	0x08005585

08005828 <_printf_common>:
 8005828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800582c:	4691      	mov	r9, r2
 800582e:	461f      	mov	r7, r3
 8005830:	688a      	ldr	r2, [r1, #8]
 8005832:	690b      	ldr	r3, [r1, #16]
 8005834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005838:	4293      	cmp	r3, r2
 800583a:	bfb8      	it	lt
 800583c:	4613      	movlt	r3, r2
 800583e:	f8c9 3000 	str.w	r3, [r9]
 8005842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005846:	4606      	mov	r6, r0
 8005848:	460c      	mov	r4, r1
 800584a:	b112      	cbz	r2, 8005852 <_printf_common+0x2a>
 800584c:	3301      	adds	r3, #1
 800584e:	f8c9 3000 	str.w	r3, [r9]
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	0699      	lsls	r1, r3, #26
 8005856:	bf42      	ittt	mi
 8005858:	f8d9 3000 	ldrmi.w	r3, [r9]
 800585c:	3302      	addmi	r3, #2
 800585e:	f8c9 3000 	strmi.w	r3, [r9]
 8005862:	6825      	ldr	r5, [r4, #0]
 8005864:	f015 0506 	ands.w	r5, r5, #6
 8005868:	d107      	bne.n	800587a <_printf_common+0x52>
 800586a:	f104 0a19 	add.w	sl, r4, #25
 800586e:	68e3      	ldr	r3, [r4, #12]
 8005870:	f8d9 2000 	ldr.w	r2, [r9]
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	42ab      	cmp	r3, r5
 8005878:	dc28      	bgt.n	80058cc <_printf_common+0xa4>
 800587a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	3300      	adds	r3, #0
 8005882:	bf18      	it	ne
 8005884:	2301      	movne	r3, #1
 8005886:	0692      	lsls	r2, r2, #26
 8005888:	d42d      	bmi.n	80058e6 <_printf_common+0xbe>
 800588a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800588e:	4639      	mov	r1, r7
 8005890:	4630      	mov	r0, r6
 8005892:	47c0      	blx	r8
 8005894:	3001      	adds	r0, #1
 8005896:	d020      	beq.n	80058da <_printf_common+0xb2>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	68e5      	ldr	r5, [r4, #12]
 800589c:	f8d9 2000 	ldr.w	r2, [r9]
 80058a0:	f003 0306 	and.w	r3, r3, #6
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	bf08      	it	eq
 80058a8:	1aad      	subeq	r5, r5, r2
 80058aa:	68a3      	ldr	r3, [r4, #8]
 80058ac:	6922      	ldr	r2, [r4, #16]
 80058ae:	bf0c      	ite	eq
 80058b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058b4:	2500      	movne	r5, #0
 80058b6:	4293      	cmp	r3, r2
 80058b8:	bfc4      	itt	gt
 80058ba:	1a9b      	subgt	r3, r3, r2
 80058bc:	18ed      	addgt	r5, r5, r3
 80058be:	f04f 0900 	mov.w	r9, #0
 80058c2:	341a      	adds	r4, #26
 80058c4:	454d      	cmp	r5, r9
 80058c6:	d11a      	bne.n	80058fe <_printf_common+0xd6>
 80058c8:	2000      	movs	r0, #0
 80058ca:	e008      	b.n	80058de <_printf_common+0xb6>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4652      	mov	r2, sl
 80058d0:	4639      	mov	r1, r7
 80058d2:	4630      	mov	r0, r6
 80058d4:	47c0      	blx	r8
 80058d6:	3001      	adds	r0, #1
 80058d8:	d103      	bne.n	80058e2 <_printf_common+0xba>
 80058da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e2:	3501      	adds	r5, #1
 80058e4:	e7c3      	b.n	800586e <_printf_common+0x46>
 80058e6:	18e1      	adds	r1, r4, r3
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	2030      	movs	r0, #48	; 0x30
 80058ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058f0:	4422      	add	r2, r4
 80058f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058fa:	3302      	adds	r3, #2
 80058fc:	e7c5      	b.n	800588a <_printf_common+0x62>
 80058fe:	2301      	movs	r3, #1
 8005900:	4622      	mov	r2, r4
 8005902:	4639      	mov	r1, r7
 8005904:	4630      	mov	r0, r6
 8005906:	47c0      	blx	r8
 8005908:	3001      	adds	r0, #1
 800590a:	d0e6      	beq.n	80058da <_printf_common+0xb2>
 800590c:	f109 0901 	add.w	r9, r9, #1
 8005910:	e7d8      	b.n	80058c4 <_printf_common+0x9c>
	...

08005914 <_printf_i>:
 8005914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005918:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800591c:	460c      	mov	r4, r1
 800591e:	7e09      	ldrb	r1, [r1, #24]
 8005920:	b085      	sub	sp, #20
 8005922:	296e      	cmp	r1, #110	; 0x6e
 8005924:	4617      	mov	r7, r2
 8005926:	4606      	mov	r6, r0
 8005928:	4698      	mov	r8, r3
 800592a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800592c:	f000 80b3 	beq.w	8005a96 <_printf_i+0x182>
 8005930:	d822      	bhi.n	8005978 <_printf_i+0x64>
 8005932:	2963      	cmp	r1, #99	; 0x63
 8005934:	d036      	beq.n	80059a4 <_printf_i+0x90>
 8005936:	d80a      	bhi.n	800594e <_printf_i+0x3a>
 8005938:	2900      	cmp	r1, #0
 800593a:	f000 80b9 	beq.w	8005ab0 <_printf_i+0x19c>
 800593e:	2958      	cmp	r1, #88	; 0x58
 8005940:	f000 8083 	beq.w	8005a4a <_printf_i+0x136>
 8005944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005948:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800594c:	e032      	b.n	80059b4 <_printf_i+0xa0>
 800594e:	2964      	cmp	r1, #100	; 0x64
 8005950:	d001      	beq.n	8005956 <_printf_i+0x42>
 8005952:	2969      	cmp	r1, #105	; 0x69
 8005954:	d1f6      	bne.n	8005944 <_printf_i+0x30>
 8005956:	6820      	ldr	r0, [r4, #0]
 8005958:	6813      	ldr	r3, [r2, #0]
 800595a:	0605      	lsls	r5, r0, #24
 800595c:	f103 0104 	add.w	r1, r3, #4
 8005960:	d52a      	bpl.n	80059b8 <_printf_i+0xa4>
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6011      	str	r1, [r2, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	da03      	bge.n	8005972 <_printf_i+0x5e>
 800596a:	222d      	movs	r2, #45	; 0x2d
 800596c:	425b      	negs	r3, r3
 800596e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005972:	486f      	ldr	r0, [pc, #444]	; (8005b30 <_printf_i+0x21c>)
 8005974:	220a      	movs	r2, #10
 8005976:	e039      	b.n	80059ec <_printf_i+0xd8>
 8005978:	2973      	cmp	r1, #115	; 0x73
 800597a:	f000 809d 	beq.w	8005ab8 <_printf_i+0x1a4>
 800597e:	d808      	bhi.n	8005992 <_printf_i+0x7e>
 8005980:	296f      	cmp	r1, #111	; 0x6f
 8005982:	d020      	beq.n	80059c6 <_printf_i+0xb2>
 8005984:	2970      	cmp	r1, #112	; 0x70
 8005986:	d1dd      	bne.n	8005944 <_printf_i+0x30>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	f043 0320 	orr.w	r3, r3, #32
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	e003      	b.n	800599a <_printf_i+0x86>
 8005992:	2975      	cmp	r1, #117	; 0x75
 8005994:	d017      	beq.n	80059c6 <_printf_i+0xb2>
 8005996:	2978      	cmp	r1, #120	; 0x78
 8005998:	d1d4      	bne.n	8005944 <_printf_i+0x30>
 800599a:	2378      	movs	r3, #120	; 0x78
 800599c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059a0:	4864      	ldr	r0, [pc, #400]	; (8005b34 <_printf_i+0x220>)
 80059a2:	e055      	b.n	8005a50 <_printf_i+0x13c>
 80059a4:	6813      	ldr	r3, [r2, #0]
 80059a6:	1d19      	adds	r1, r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6011      	str	r1, [r2, #0]
 80059ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059b4:	2301      	movs	r3, #1
 80059b6:	e08c      	b.n	8005ad2 <_printf_i+0x1be>
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6011      	str	r1, [r2, #0]
 80059bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059c0:	bf18      	it	ne
 80059c2:	b21b      	sxthne	r3, r3
 80059c4:	e7cf      	b.n	8005966 <_printf_i+0x52>
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	6825      	ldr	r5, [r4, #0]
 80059ca:	1d18      	adds	r0, r3, #4
 80059cc:	6010      	str	r0, [r2, #0]
 80059ce:	0628      	lsls	r0, r5, #24
 80059d0:	d501      	bpl.n	80059d6 <_printf_i+0xc2>
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	e002      	b.n	80059dc <_printf_i+0xc8>
 80059d6:	0668      	lsls	r0, r5, #25
 80059d8:	d5fb      	bpl.n	80059d2 <_printf_i+0xbe>
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	4854      	ldr	r0, [pc, #336]	; (8005b30 <_printf_i+0x21c>)
 80059de:	296f      	cmp	r1, #111	; 0x6f
 80059e0:	bf14      	ite	ne
 80059e2:	220a      	movne	r2, #10
 80059e4:	2208      	moveq	r2, #8
 80059e6:	2100      	movs	r1, #0
 80059e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ec:	6865      	ldr	r5, [r4, #4]
 80059ee:	60a5      	str	r5, [r4, #8]
 80059f0:	2d00      	cmp	r5, #0
 80059f2:	f2c0 8095 	blt.w	8005b20 <_printf_i+0x20c>
 80059f6:	6821      	ldr	r1, [r4, #0]
 80059f8:	f021 0104 	bic.w	r1, r1, #4
 80059fc:	6021      	str	r1, [r4, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d13d      	bne.n	8005a7e <_printf_i+0x16a>
 8005a02:	2d00      	cmp	r5, #0
 8005a04:	f040 808e 	bne.w	8005b24 <_printf_i+0x210>
 8005a08:	4665      	mov	r5, ip
 8005a0a:	2a08      	cmp	r2, #8
 8005a0c:	d10b      	bne.n	8005a26 <_printf_i+0x112>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	07db      	lsls	r3, r3, #31
 8005a12:	d508      	bpl.n	8005a26 <_printf_i+0x112>
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	6862      	ldr	r2, [r4, #4]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	bfde      	ittt	le
 8005a1c:	2330      	movle	r3, #48	; 0x30
 8005a1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a22:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a26:	ebac 0305 	sub.w	r3, ip, r5
 8005a2a:	6123      	str	r3, [r4, #16]
 8005a2c:	f8cd 8000 	str.w	r8, [sp]
 8005a30:	463b      	mov	r3, r7
 8005a32:	aa03      	add	r2, sp, #12
 8005a34:	4621      	mov	r1, r4
 8005a36:	4630      	mov	r0, r6
 8005a38:	f7ff fef6 	bl	8005828 <_printf_common>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d14d      	bne.n	8005adc <_printf_i+0x1c8>
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a44:	b005      	add	sp, #20
 8005a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a4a:	4839      	ldr	r0, [pc, #228]	; (8005b30 <_printf_i+0x21c>)
 8005a4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a50:	6813      	ldr	r3, [r2, #0]
 8005a52:	6821      	ldr	r1, [r4, #0]
 8005a54:	1d1d      	adds	r5, r3, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6015      	str	r5, [r2, #0]
 8005a5a:	060a      	lsls	r2, r1, #24
 8005a5c:	d50b      	bpl.n	8005a76 <_printf_i+0x162>
 8005a5e:	07ca      	lsls	r2, r1, #31
 8005a60:	bf44      	itt	mi
 8005a62:	f041 0120 	orrmi.w	r1, r1, #32
 8005a66:	6021      	strmi	r1, [r4, #0]
 8005a68:	b91b      	cbnz	r3, 8005a72 <_printf_i+0x15e>
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	f022 0220 	bic.w	r2, r2, #32
 8005a70:	6022      	str	r2, [r4, #0]
 8005a72:	2210      	movs	r2, #16
 8005a74:	e7b7      	b.n	80059e6 <_printf_i+0xd2>
 8005a76:	064d      	lsls	r5, r1, #25
 8005a78:	bf48      	it	mi
 8005a7a:	b29b      	uxthmi	r3, r3
 8005a7c:	e7ef      	b.n	8005a5e <_printf_i+0x14a>
 8005a7e:	4665      	mov	r5, ip
 8005a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a84:	fb02 3311 	mls	r3, r2, r1, r3
 8005a88:	5cc3      	ldrb	r3, [r0, r3]
 8005a8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a8e:	460b      	mov	r3, r1
 8005a90:	2900      	cmp	r1, #0
 8005a92:	d1f5      	bne.n	8005a80 <_printf_i+0x16c>
 8005a94:	e7b9      	b.n	8005a0a <_printf_i+0xf6>
 8005a96:	6813      	ldr	r3, [r2, #0]
 8005a98:	6825      	ldr	r5, [r4, #0]
 8005a9a:	6961      	ldr	r1, [r4, #20]
 8005a9c:	1d18      	adds	r0, r3, #4
 8005a9e:	6010      	str	r0, [r2, #0]
 8005aa0:	0628      	lsls	r0, r5, #24
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	d501      	bpl.n	8005aaa <_printf_i+0x196>
 8005aa6:	6019      	str	r1, [r3, #0]
 8005aa8:	e002      	b.n	8005ab0 <_printf_i+0x19c>
 8005aaa:	066a      	lsls	r2, r5, #25
 8005aac:	d5fb      	bpl.n	8005aa6 <_printf_i+0x192>
 8005aae:	8019      	strh	r1, [r3, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6123      	str	r3, [r4, #16]
 8005ab4:	4665      	mov	r5, ip
 8005ab6:	e7b9      	b.n	8005a2c <_printf_i+0x118>
 8005ab8:	6813      	ldr	r3, [r2, #0]
 8005aba:	1d19      	adds	r1, r3, #4
 8005abc:	6011      	str	r1, [r2, #0]
 8005abe:	681d      	ldr	r5, [r3, #0]
 8005ac0:	6862      	ldr	r2, [r4, #4]
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f7fa fb83 	bl	80001d0 <memchr>
 8005aca:	b108      	cbz	r0, 8005ad0 <_printf_i+0x1bc>
 8005acc:	1b40      	subs	r0, r0, r5
 8005ace:	6060      	str	r0, [r4, #4]
 8005ad0:	6863      	ldr	r3, [r4, #4]
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ada:	e7a7      	b.n	8005a2c <_printf_i+0x118>
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	462a      	mov	r2, r5
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	47c0      	blx	r8
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d0aa      	beq.n	8005a40 <_printf_i+0x12c>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	079b      	lsls	r3, r3, #30
 8005aee:	d413      	bmi.n	8005b18 <_printf_i+0x204>
 8005af0:	68e0      	ldr	r0, [r4, #12]
 8005af2:	9b03      	ldr	r3, [sp, #12]
 8005af4:	4298      	cmp	r0, r3
 8005af6:	bfb8      	it	lt
 8005af8:	4618      	movlt	r0, r3
 8005afa:	e7a3      	b.n	8005a44 <_printf_i+0x130>
 8005afc:	2301      	movs	r3, #1
 8005afe:	464a      	mov	r2, r9
 8005b00:	4639      	mov	r1, r7
 8005b02:	4630      	mov	r0, r6
 8005b04:	47c0      	blx	r8
 8005b06:	3001      	adds	r0, #1
 8005b08:	d09a      	beq.n	8005a40 <_printf_i+0x12c>
 8005b0a:	3501      	adds	r5, #1
 8005b0c:	68e3      	ldr	r3, [r4, #12]
 8005b0e:	9a03      	ldr	r2, [sp, #12]
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	42ab      	cmp	r3, r5
 8005b14:	dcf2      	bgt.n	8005afc <_printf_i+0x1e8>
 8005b16:	e7eb      	b.n	8005af0 <_printf_i+0x1dc>
 8005b18:	2500      	movs	r5, #0
 8005b1a:	f104 0919 	add.w	r9, r4, #25
 8005b1e:	e7f5      	b.n	8005b0c <_printf_i+0x1f8>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1ac      	bne.n	8005a7e <_printf_i+0x16a>
 8005b24:	7803      	ldrb	r3, [r0, #0]
 8005b26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b2e:	e76c      	b.n	8005a0a <_printf_i+0xf6>
 8005b30:	08005ef9 	.word	0x08005ef9
 8005b34:	08005f0a 	.word	0x08005f0a

08005b38 <memcpy>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	1e43      	subs	r3, r0, #1
 8005b3c:	440a      	add	r2, r1
 8005b3e:	4291      	cmp	r1, r2
 8005b40:	d100      	bne.n	8005b44 <memcpy+0xc>
 8005b42:	bd10      	pop	{r4, pc}
 8005b44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b4c:	e7f7      	b.n	8005b3e <memcpy+0x6>

08005b4e <memmove>:
 8005b4e:	4288      	cmp	r0, r1
 8005b50:	b510      	push	{r4, lr}
 8005b52:	eb01 0302 	add.w	r3, r1, r2
 8005b56:	d807      	bhi.n	8005b68 <memmove+0x1a>
 8005b58:	1e42      	subs	r2, r0, #1
 8005b5a:	4299      	cmp	r1, r3
 8005b5c:	d00a      	beq.n	8005b74 <memmove+0x26>
 8005b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b62:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b66:	e7f8      	b.n	8005b5a <memmove+0xc>
 8005b68:	4283      	cmp	r3, r0
 8005b6a:	d9f5      	bls.n	8005b58 <memmove+0xa>
 8005b6c:	1881      	adds	r1, r0, r2
 8005b6e:	1ad2      	subs	r2, r2, r3
 8005b70:	42d3      	cmn	r3, r2
 8005b72:	d100      	bne.n	8005b76 <memmove+0x28>
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b7a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b7e:	e7f7      	b.n	8005b70 <memmove+0x22>

08005b80 <_free_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4605      	mov	r5, r0
 8005b84:	2900      	cmp	r1, #0
 8005b86:	d045      	beq.n	8005c14 <_free_r+0x94>
 8005b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8c:	1f0c      	subs	r4, r1, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bfb8      	it	lt
 8005b92:	18e4      	addlt	r4, r4, r3
 8005b94:	f000 f8d2 	bl	8005d3c <__malloc_lock>
 8005b98:	4a1f      	ldr	r2, [pc, #124]	; (8005c18 <_free_r+0x98>)
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	b933      	cbnz	r3, 8005bae <_free_r+0x2e>
 8005ba0:	6063      	str	r3, [r4, #4]
 8005ba2:	6014      	str	r4, [r2, #0]
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005baa:	f000 b8c8 	b.w	8005d3e <__malloc_unlock>
 8005bae:	42a3      	cmp	r3, r4
 8005bb0:	d90c      	bls.n	8005bcc <_free_r+0x4c>
 8005bb2:	6821      	ldr	r1, [r4, #0]
 8005bb4:	1862      	adds	r2, r4, r1
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	bf04      	itt	eq
 8005bba:	681a      	ldreq	r2, [r3, #0]
 8005bbc:	685b      	ldreq	r3, [r3, #4]
 8005bbe:	6063      	str	r3, [r4, #4]
 8005bc0:	bf04      	itt	eq
 8005bc2:	1852      	addeq	r2, r2, r1
 8005bc4:	6022      	streq	r2, [r4, #0]
 8005bc6:	6004      	str	r4, [r0, #0]
 8005bc8:	e7ec      	b.n	8005ba4 <_free_r+0x24>
 8005bca:	4613      	mov	r3, r2
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	b10a      	cbz	r2, 8005bd4 <_free_r+0x54>
 8005bd0:	42a2      	cmp	r2, r4
 8005bd2:	d9fa      	bls.n	8005bca <_free_r+0x4a>
 8005bd4:	6819      	ldr	r1, [r3, #0]
 8005bd6:	1858      	adds	r0, r3, r1
 8005bd8:	42a0      	cmp	r0, r4
 8005bda:	d10b      	bne.n	8005bf4 <_free_r+0x74>
 8005bdc:	6820      	ldr	r0, [r4, #0]
 8005bde:	4401      	add	r1, r0
 8005be0:	1858      	adds	r0, r3, r1
 8005be2:	4282      	cmp	r2, r0
 8005be4:	6019      	str	r1, [r3, #0]
 8005be6:	d1dd      	bne.n	8005ba4 <_free_r+0x24>
 8005be8:	6810      	ldr	r0, [r2, #0]
 8005bea:	6852      	ldr	r2, [r2, #4]
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	4401      	add	r1, r0
 8005bf0:	6019      	str	r1, [r3, #0]
 8005bf2:	e7d7      	b.n	8005ba4 <_free_r+0x24>
 8005bf4:	d902      	bls.n	8005bfc <_free_r+0x7c>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	e7d3      	b.n	8005ba4 <_free_r+0x24>
 8005bfc:	6820      	ldr	r0, [r4, #0]
 8005bfe:	1821      	adds	r1, r4, r0
 8005c00:	428a      	cmp	r2, r1
 8005c02:	bf04      	itt	eq
 8005c04:	6811      	ldreq	r1, [r2, #0]
 8005c06:	6852      	ldreq	r2, [r2, #4]
 8005c08:	6062      	str	r2, [r4, #4]
 8005c0a:	bf04      	itt	eq
 8005c0c:	1809      	addeq	r1, r1, r0
 8005c0e:	6021      	streq	r1, [r4, #0]
 8005c10:	605c      	str	r4, [r3, #4]
 8005c12:	e7c7      	b.n	8005ba4 <_free_r+0x24>
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
 8005c16:	bf00      	nop
 8005c18:	20000090 	.word	0x20000090

08005c1c <_malloc_r>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	1ccd      	adds	r5, r1, #3
 8005c20:	f025 0503 	bic.w	r5, r5, #3
 8005c24:	3508      	adds	r5, #8
 8005c26:	2d0c      	cmp	r5, #12
 8005c28:	bf38      	it	cc
 8005c2a:	250c      	movcc	r5, #12
 8005c2c:	2d00      	cmp	r5, #0
 8005c2e:	4606      	mov	r6, r0
 8005c30:	db01      	blt.n	8005c36 <_malloc_r+0x1a>
 8005c32:	42a9      	cmp	r1, r5
 8005c34:	d903      	bls.n	8005c3e <_malloc_r+0x22>
 8005c36:	230c      	movs	r3, #12
 8005c38:	6033      	str	r3, [r6, #0]
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	bd70      	pop	{r4, r5, r6, pc}
 8005c3e:	f000 f87d 	bl	8005d3c <__malloc_lock>
 8005c42:	4a21      	ldr	r2, [pc, #132]	; (8005cc8 <_malloc_r+0xac>)
 8005c44:	6814      	ldr	r4, [r2, #0]
 8005c46:	4621      	mov	r1, r4
 8005c48:	b991      	cbnz	r1, 8005c70 <_malloc_r+0x54>
 8005c4a:	4c20      	ldr	r4, [pc, #128]	; (8005ccc <_malloc_r+0xb0>)
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	b91b      	cbnz	r3, 8005c58 <_malloc_r+0x3c>
 8005c50:	4630      	mov	r0, r6
 8005c52:	f000 f863 	bl	8005d1c <_sbrk_r>
 8005c56:	6020      	str	r0, [r4, #0]
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f000 f85e 	bl	8005d1c <_sbrk_r>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d124      	bne.n	8005cae <_malloc_r+0x92>
 8005c64:	230c      	movs	r3, #12
 8005c66:	6033      	str	r3, [r6, #0]
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f000 f868 	bl	8005d3e <__malloc_unlock>
 8005c6e:	e7e4      	b.n	8005c3a <_malloc_r+0x1e>
 8005c70:	680b      	ldr	r3, [r1, #0]
 8005c72:	1b5b      	subs	r3, r3, r5
 8005c74:	d418      	bmi.n	8005ca8 <_malloc_r+0x8c>
 8005c76:	2b0b      	cmp	r3, #11
 8005c78:	d90f      	bls.n	8005c9a <_malloc_r+0x7e>
 8005c7a:	600b      	str	r3, [r1, #0]
 8005c7c:	50cd      	str	r5, [r1, r3]
 8005c7e:	18cc      	adds	r4, r1, r3
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 f85c 	bl	8005d3e <__malloc_unlock>
 8005c86:	f104 000b 	add.w	r0, r4, #11
 8005c8a:	1d23      	adds	r3, r4, #4
 8005c8c:	f020 0007 	bic.w	r0, r0, #7
 8005c90:	1ac3      	subs	r3, r0, r3
 8005c92:	d0d3      	beq.n	8005c3c <_malloc_r+0x20>
 8005c94:	425a      	negs	r2, r3
 8005c96:	50e2      	str	r2, [r4, r3]
 8005c98:	e7d0      	b.n	8005c3c <_malloc_r+0x20>
 8005c9a:	428c      	cmp	r4, r1
 8005c9c:	684b      	ldr	r3, [r1, #4]
 8005c9e:	bf16      	itet	ne
 8005ca0:	6063      	strne	r3, [r4, #4]
 8005ca2:	6013      	streq	r3, [r2, #0]
 8005ca4:	460c      	movne	r4, r1
 8005ca6:	e7eb      	b.n	8005c80 <_malloc_r+0x64>
 8005ca8:	460c      	mov	r4, r1
 8005caa:	6849      	ldr	r1, [r1, #4]
 8005cac:	e7cc      	b.n	8005c48 <_malloc_r+0x2c>
 8005cae:	1cc4      	adds	r4, r0, #3
 8005cb0:	f024 0403 	bic.w	r4, r4, #3
 8005cb4:	42a0      	cmp	r0, r4
 8005cb6:	d005      	beq.n	8005cc4 <_malloc_r+0xa8>
 8005cb8:	1a21      	subs	r1, r4, r0
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f000 f82e 	bl	8005d1c <_sbrk_r>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d0cf      	beq.n	8005c64 <_malloc_r+0x48>
 8005cc4:	6025      	str	r5, [r4, #0]
 8005cc6:	e7db      	b.n	8005c80 <_malloc_r+0x64>
 8005cc8:	20000090 	.word	0x20000090
 8005ccc:	20000094 	.word	0x20000094

08005cd0 <_realloc_r>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	4607      	mov	r7, r0
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	460e      	mov	r6, r1
 8005cd8:	b921      	cbnz	r1, 8005ce4 <_realloc_r+0x14>
 8005cda:	4611      	mov	r1, r2
 8005cdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ce0:	f7ff bf9c 	b.w	8005c1c <_malloc_r>
 8005ce4:	b922      	cbnz	r2, 8005cf0 <_realloc_r+0x20>
 8005ce6:	f7ff ff4b 	bl	8005b80 <_free_r>
 8005cea:	4625      	mov	r5, r4
 8005cec:	4628      	mov	r0, r5
 8005cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf0:	f000 f826 	bl	8005d40 <_malloc_usable_size_r>
 8005cf4:	42a0      	cmp	r0, r4
 8005cf6:	d20f      	bcs.n	8005d18 <_realloc_r+0x48>
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	f7ff ff8e 	bl	8005c1c <_malloc_r>
 8005d00:	4605      	mov	r5, r0
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d0f2      	beq.n	8005cec <_realloc_r+0x1c>
 8005d06:	4631      	mov	r1, r6
 8005d08:	4622      	mov	r2, r4
 8005d0a:	f7ff ff15 	bl	8005b38 <memcpy>
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4638      	mov	r0, r7
 8005d12:	f7ff ff35 	bl	8005b80 <_free_r>
 8005d16:	e7e9      	b.n	8005cec <_realloc_r+0x1c>
 8005d18:	4635      	mov	r5, r6
 8005d1a:	e7e7      	b.n	8005cec <_realloc_r+0x1c>

08005d1c <_sbrk_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4c06      	ldr	r4, [pc, #24]	; (8005d38 <_sbrk_r+0x1c>)
 8005d20:	2300      	movs	r3, #0
 8005d22:	4605      	mov	r5, r0
 8005d24:	4608      	mov	r0, r1
 8005d26:	6023      	str	r3, [r4, #0]
 8005d28:	f7fb fc22 	bl	8001570 <_sbrk>
 8005d2c:	1c43      	adds	r3, r0, #1
 8005d2e:	d102      	bne.n	8005d36 <_sbrk_r+0x1a>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	b103      	cbz	r3, 8005d36 <_sbrk_r+0x1a>
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	20000320 	.word	0x20000320

08005d3c <__malloc_lock>:
 8005d3c:	4770      	bx	lr

08005d3e <__malloc_unlock>:
 8005d3e:	4770      	bx	lr

08005d40 <_malloc_usable_size_r>:
 8005d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d44:	1f18      	subs	r0, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bfbc      	itt	lt
 8005d4a:	580b      	ldrlt	r3, [r1, r0]
 8005d4c:	18c0      	addlt	r0, r0, r3
 8005d4e:	4770      	bx	lr

08005d50 <_init>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr

08005d5c <_fini>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr
